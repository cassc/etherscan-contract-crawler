{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/access_control/AccessControlInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { UintUtils } from '../../utils/UintUtils.sol';\\nimport { IAccessControlInternal } from './IAccessControlInternal.sol';\\nimport { AccessControlStorage } from './AccessControlStorage.sol';\\n\\n/**\\n * @title Role-based access control system\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nabstract contract AccessControlInternal is IAccessControlInternal {\\n    using AddressUtils for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using UintUtils for uint256;\\n\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /*\\n     * @notice query whether role is assigned to account\\n     * @param role role to query\\n     * @param account account to query\\n     * @return whether role is assigned to account\\n     */\\n    function _hasRole(bytes32 role, address account)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return\\n            AccessControlStorage.layout().roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @notice revert if sender does not have given role\\n     * @param role role to query\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @notice revert if given account does not have given role\\n     * @param role role to query\\n     * @param account to query\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!_hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        'AccessControl: account ',\\n                        account.toString(),\\n                        ' is missing role ',\\n                        uint256(role).toHexString(32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /*\\n     * @notice query admin role for given role\\n     * @param role role to query\\n     * @return admin role\\n     */\\n    function _getRoleAdmin(bytes32 role)\\n        internal\\n        view\\n        virtual\\n        returns (bytes32)\\n    {\\n        return AccessControlStorage.layout().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @notice set role as admin role\\n     * @param role role to set\\n     * @param adminRole admin role to set\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = _getRoleAdmin(role);\\n        AccessControlStorage.layout().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /*\\n     * @notice assign role to given account\\n     * @param role role to assign\\n     * @param account recipient of role assignment\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.add(account);\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /*\\n     * @notice unassign role from given account\\n     * @param role role to unassign\\n     * @parm account\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.remove(account);\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @notice relinquish role\\n     * @param role role to relinquish\\n     */\\n    function _renounceRole(bytes32 role) internal virtual {\\n        _revokeRole(role, msg.sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/access_control/AccessControlStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\n\\nlibrary AccessControlStorage {\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    bytes32 internal constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.AccessControl');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/access_control/IAccessControlInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Partial AccessControl interface needed by internal functions\\n */\\ninterface IAccessControlInternal {\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/data/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n    error EnumerableSet__IndexOutOfBounds();\\n\\n    struct Set {\\n        bytes32[] _values;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function at(Bytes32Set storage set, uint256 index)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return _at(set._inner, index);\\n    }\\n\\n    function at(AddressSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function at(UintSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function contains(Bytes32Set storage set, bytes32 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function contains(AddressSet storage set, address value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(UintSet storage set, uint256 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function indexOf(Bytes32Set storage set, bytes32 value)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _indexOf(set._inner, value);\\n    }\\n\\n    function indexOf(AddressSet storage set, address value)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function indexOf(UintSet storage set, uint256 value)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _indexOf(set._inner, bytes32(value));\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function add(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, value);\\n    }\\n\\n    function add(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function remove(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(UintSet storage set, uint256 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function toArray(Bytes32Set storage set)\\n        internal\\n        view\\n        returns (bytes32[] memory)\\n    {\\n        uint256 len = _length(set._inner);\\n        bytes32[] memory arr = new bytes32[](len);\\n\\n        unchecked {\\n            for (uint256 index; index < len; ++index) {\\n                arr[index] = at(set, index);\\n            }\\n        }\\n\\n        return arr;\\n    }\\n\\n    function toArray(AddressSet storage set)\\n        internal\\n        view\\n        returns (address[] memory)\\n    {\\n        uint256 len = _length(set._inner);\\n        address[] memory arr = new address[](len);\\n\\n        unchecked {\\n            for (uint256 index; index < len; ++index) {\\n                arr[index] = at(set, index);\\n            }\\n        }\\n\\n        return arr;\\n    }\\n\\n    function toArray(UintSet storage set)\\n        internal\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256 len = _length(set._inner);\\n        uint256[] memory arr = new uint256[](len);\\n\\n        unchecked {\\n            for (uint256 index; index < len; ++index) {\\n                arr[index] = at(set, index);\\n            }\\n        }\\n\\n        return arr;\\n    }\\n\\n    function _at(Set storage set, uint256 index)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        if (index >= set._values.length)\\n            revert EnumerableSet__IndexOutOfBounds();\\n        return set._values[index];\\n    }\\n\\n    function _contains(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _indexOf(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        unchecked {\\n            return set._indexes[value] - 1;\\n        }\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            unchecked {\\n                bytes32 last = set._values[set._values.length - 1];\\n\\n                // move last value to now-vacant index\\n\\n                set._values[valueIndex - 1] = last;\\n                set._indexes[last] = valueIndex;\\n            }\\n            // clear last index\\n\\n            set._values.pop();\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/utils/AddressUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/utils/UintUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(uint256 value, uint256 length)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Eip712/Eip712CheckerInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.13;\\n\\nimport \\\"./Eip712CheckerStorage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n/**\\n * @title Eip712CheckerInternal\\n * @notice Contract with internal functions to assist in verifying signatures\\n * @dev Based on the EIP-712 https://eips.ethereum.org/EIPS/eip-712\\n */\\nlibrary Eip712CheckerInternal {\\n    bytes32 private constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n\\n    /// @dev Returns the EIP-712 domain separator\\n    function _eip712Domain() internal view returns (bytes32) {\\n        Eip712CheckerStorage.Storage storage s = Eip712CheckerStorage\\n            .getStorage();\\n\\n        return\\n            keccak256(\\n                abi.encode(\\n                    EIP712_DOMAIN_TYPEHASH,\\n                    s.name,\\n                    s.version,\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Recovers message signer\\n     * @param message Hashed data payload\\n     * @param signature Signed data payload\\n     */\\n    function _recover(\\n        bytes32 message,\\n        bytes calldata signature\\n    ) internal view returns (address signer) {\\n        bytes32 msgHash = keccak256(\\n            abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _eip712Domain(), message)\\n        );\\n\\n        return ECDSA.recover(msgHash, signature);\\n    }\\n\\n    /**\\n     * @dev Recovers message signer and verifies if metches signatory\\n     * @param signatory The signer to be verified\\n     * @param message Hashed data payload\\n     * @param signature Signed data payload\\n     */\\n    function _verifySignature(\\n        address signatory,\\n        bytes32 message,\\n        bytes calldata signature\\n    ) internal view returns (bool success) {\\n        require(signatory != address(0), \\\"ECDSA: zero signatory address\\\");\\n\\n        bytes32 msgHash = keccak256(\\n            abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _eip712Domain(), message)\\n        );\\n\\n        return signatory == ECDSA.recover(msgHash, signature);\\n    }\\n\\n    /**\\n     * @dev Recovers message signer and verifies if metches signatory\\n     * @param signatory The signer to be verified\\n     * @param message Hashed data payload\\n     * @param v Signature \\\"v\\\" value\\n     * @param r Signature \\\"r\\\" value\\n     * @param s Signature \\\"s\\\" value\\n     */\\n    function _verifySignature(\\n        address signatory,\\n        bytes32 message,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view returns (bool success) {\\n        require(signatory != address(0), \\\"ECDSA: zero signatory address\\\");\\n\\n        bytes32 msgHash = keccak256(\\n            abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _eip712Domain(), message)\\n        );\\n\\n        return signatory == ECDSA.recover(msgHash, v, r, s);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Eip712/Eip712CheckerStorage.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.13;\\n\\n/**\\n * @title Eip712CheckerStorage\\n * @notice Storage of the Eip712Checker contract\\n */\\nlibrary Eip712CheckerStorage {\\n    bytes32 internal constant EIP712_CHECKER_STORAGE_SLOT =\\n        keccak256(\\\"DIMORegistry.eip712Checker.storage\\\");\\n\\n    struct Storage {\\n        bytes32 name;\\n        bytes32 version;\\n    }\\n\\n    /* solhint-disable no-inline-assembly */\\n    function getStorage() internal pure returns (Storage storage s) {\\n        bytes32 slot = EIP712_CHECKER_STORAGE_SLOT;\\n        assembly {\\n            s.slot := slot\\n        }\\n    }\\n    /* solhint-enable no-inline-assembly */\\n}\\n\"\r\n    },\r\n    \"contracts/implementations/nodes/SyntheticDevice.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.13;\\n\\nimport \\\"./VehicleInternal.sol\\\";\\nimport \\\"./SyntheticDeviceInternal.sol\\\";\\nimport \\\"../../interfaces/INFT.sol\\\";\\nimport \\\"../../Eip712/Eip712CheckerInternal.sol\\\";\\nimport \\\"../../libraries/NodesStorage.sol\\\";\\nimport \\\"../../libraries/nodes/ManufacturerStorage.sol\\\";\\nimport \\\"../../libraries/nodes/IntegrationStorage.sol\\\";\\nimport \\\"../../libraries/nodes/VehicleStorage.sol\\\";\\nimport \\\"../../libraries/nodes/SyntheticDeviceStorage.sol\\\";\\nimport \\\"../../libraries/MapperStorage.sol\\\";\\n\\nimport {ADMIN_ROLE, MINT_SD_ROLE, BURN_SD_ROLE, SET_SD_INFO_ROLE} from \\\"../../shared/Roles.sol\\\";\\n\\nimport \\\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\\\";\\n\\nerror DeviceAlreadyRegistered(address addr);\\nerror InvalidSdSignature();\\n\\n/**\\n * @title SyntheticDevice\\n * @notice Contract that represents the Synthetic Device node\\n * @dev It uses the Mapper contract to link Synthetic Devices to Vehicles\\n */\\ncontract SyntheticDevice is\\n    AccessControlInternal,\\n    VehicleInternal,\\n    SyntheticDeviceInternal\\n{\\n    bytes32 private constant MINT_TYPEHASH =\\n        keccak256(\\n            \\\"MintSyntheticDeviceSign(uint256 integrationNode,uint256 vehicleNode)\\\"\\n        );\\n    bytes32 private constant BURN_TYPEHASH =\\n        keccak256(\\n            \\\"BurnSyntheticDeviceSign(uint256 vehicleNode,uint256 syntheticDeviceNode)\\\"\\n        );\\n\\n    event SyntheticDeviceIdProxySet(address proxy);\\n    event SyntheticDeviceAttributeAdded(string attribute);\\n    event SyntheticDeviceNodeBurned(\\n        uint256 indexed syntheticDeviceNode,\\n        uint256 indexed vehicleNode,\\n        address indexed owner\\n    );\\n\\n    // ***** Admin management ***** //\\n\\n    /**\\n     * @notice Sets the NFT proxy associated with the Synthetic Device node\\n     * @dev Only an admin can set the address\\n     * @param addr The address of the proxy\\n     */\\n    function setSyntheticDeviceIdProxyAddress(\\n        address addr\\n    ) external onlyRole(ADMIN_ROLE) {\\n        if (addr == address(0)) revert ZeroAddress();\\n        SyntheticDeviceStorage.getStorage().idProxyAddress = addr;\\n\\n        emit SyntheticDeviceIdProxySet(addr);\\n    }\\n\\n    /**\\n     * @notice Adds an attribute to the whielist\\n     * @dev Only an admin can add a new attribute\\n     * @param attribute The attribute to be added\\n     */\\n    function addSyntheticDeviceAttribute(\\n        string calldata attribute\\n    ) external onlyRole(ADMIN_ROLE) {\\n        if (\\n            !AttributeSet.add(\\n                SyntheticDeviceStorage.getStorage().whitelistedAttributes,\\n                attribute\\n            )\\n        ) revert AttributeExists(attribute);\\n\\n        emit SyntheticDeviceAttributeAdded(attribute);\\n    }\\n\\n    // ***** Interaction with nodes *****//\\n\\n    /**\\n     * @notice Mints a list of synthetic devices and links them to vehicles\\n     * To be called for existing vehicles already connected\\n     * @dev Caller must have the admin role\\n     * @dev All devices will be minted under the same integration node\\n     * @param integrationNode Parent integration node id\\n     * @param data Input data with the following fields:\\n     *  vehicleNode -> Vehicle node id\\n     *  syntheticDeviceAddr -> Address associated with the synthetic device\\n     *  attrInfoPairs -> List of attribute-info pairs to be added\\n     */\\n    function mintSyntheticDeviceBatch(\\n        uint256 integrationNode,\\n        MintSyntheticDeviceBatchInput[] calldata data\\n    ) external onlyRole(MINT_SD_ROLE) {\\n        NodesStorage.Storage storage ns = NodesStorage.getStorage();\\n        MapperStorage.Storage storage ms = MapperStorage.getStorage();\\n        SyntheticDeviceStorage.Storage storage sds = SyntheticDeviceStorage\\n            .getStorage();\\n\\n        address vehicleIdProxyAddress = VehicleStorage\\n            .getStorage()\\n            .idProxyAddress;\\n        address sdIdProxyAddress = sds.idProxyAddress;\\n\\n        if (\\n            !INFT(IntegrationStorage.getStorage().idProxyAddress).exists(\\n                integrationNode\\n            )\\n        ) revert InvalidParentNode(integrationNode);\\n\\n        address owner;\\n        uint256 newTokenId;\\n        for (uint256 i = 0; i < data.length; i++) {\\n            if (!INFT(vehicleIdProxyAddress).exists(data[i].vehicleNode))\\n                revert InvalidNode(vehicleIdProxyAddress, data[i].vehicleNode);\\n            if (sds.deviceAddressToNodeId[data[i].syntheticDeviceAddr] != 0)\\n                revert DeviceAlreadyRegistered(data[i].syntheticDeviceAddr);\\n            if (\\n                ms.nodeLinks[vehicleIdProxyAddress][sdIdProxyAddress][\\n                    data[i].vehicleNode\\n                ] != 0\\n            ) revert VehiclePaired(data[i].vehicleNode);\\n\\n            owner = INFT(vehicleIdProxyAddress).ownerOf(data[i].vehicleNode);\\n            newTokenId = INFT(sdIdProxyAddress).safeMint(owner);\\n\\n            ns.nodes[sdIdProxyAddress][newTokenId].parentNode = integrationNode;\\n\\n            ms.nodeLinks[vehicleIdProxyAddress][sdIdProxyAddress][\\n                data[i].vehicleNode\\n            ] = newTokenId;\\n            ms.nodeLinks[sdIdProxyAddress][vehicleIdProxyAddress][\\n                newTokenId\\n            ] = data[i].vehicleNode;\\n\\n            sds.deviceAddressToNodeId[data[i].syntheticDeviceAddr] = newTokenId;\\n            sds.nodeIdToDeviceAddress[newTokenId] = data[i].syntheticDeviceAddr;\\n\\n            emit SyntheticDeviceNodeMinted(\\n                integrationNode,\\n                newTokenId,\\n                data[i].vehicleNode,\\n                data[i].syntheticDeviceAddr,\\n                owner\\n            );\\n\\n            if (data[i].attrInfoPairs.length > 0)\\n                _setInfos(newTokenId, data[i].attrInfoPairs);\\n        }\\n    }\\n\\n    /**\\n     * @notice Mints a synthetic device and pair it with a vehicle\\n     * @dev Caller must have the admin role\\n     * @param data Input data with the following fields:\\n     *  integrationNode -> Parent integration node id\\n     *  vehicleNode -> Vehicle node id\\n     *  syntheticDeviceSig -> Synthetic Device's signature hash\\n     *  vehicleOwnerSig -> Vehicle owner signature hash\\n     *  syntheticDeviceAddr -> Address associated with the synthetic device\\n     *  attrInfoPairs -> List of attribute-info pairs to be added\\n     */\\n    function mintSyntheticDeviceSign(\\n        MintSyntheticDeviceInput calldata data\\n    ) external onlyRole(MINT_SD_ROLE) {\\n        NodesStorage.Storage storage ns = NodesStorage.getStorage();\\n        MapperStorage.Storage storage ms = MapperStorage.getStorage();\\n        SyntheticDeviceStorage.Storage storage sds = SyntheticDeviceStorage\\n            .getStorage();\\n\\n        address vehicleIdProxyAddress = VehicleStorage\\n            .getStorage()\\n            .idProxyAddress;\\n        address sdIdProxyAddress = sds.idProxyAddress;\\n\\n        if (\\n            !INFT(IntegrationStorage.getStorage().idProxyAddress).exists(\\n                data.integrationNode\\n            )\\n        ) revert InvalidParentNode(data.integrationNode);\\n        if (!INFT(vehicleIdProxyAddress).exists(data.vehicleNode))\\n            revert InvalidNode(vehicleIdProxyAddress, data.vehicleNode);\\n        if (sds.deviceAddressToNodeId[data.syntheticDeviceAddr] != 0)\\n            revert DeviceAlreadyRegistered(data.syntheticDeviceAddr);\\n        if (\\n            ms.nodeLinks[vehicleIdProxyAddress][sdIdProxyAddress][\\n                data.vehicleNode\\n            ] != 0\\n        ) revert VehiclePaired(data.vehicleNode);\\n\\n        address owner = INFT(vehicleIdProxyAddress).ownerOf(data.vehicleNode);\\n        bytes32 message = keccak256(\\n            abi.encode(MINT_TYPEHASH, data.integrationNode, data.vehicleNode)\\n        );\\n\\n        if (\\n            !Eip712CheckerInternal._verifySignature(\\n                data.syntheticDeviceAddr,\\n                message,\\n                data.syntheticDeviceSig\\n            )\\n        ) revert InvalidSdSignature();\\n        if (\\n            !Eip712CheckerInternal._verifySignature(\\n                owner,\\n                message,\\n                data.vehicleOwnerSig\\n            )\\n        ) revert InvalidOwnerSignature();\\n\\n        uint256 newTokenId = INFT(sdIdProxyAddress).safeMint(owner);\\n\\n        ns.nodes[sdIdProxyAddress][newTokenId].parentNode = data\\n            .integrationNode;\\n\\n        ms.nodeLinks[vehicleIdProxyAddress][sdIdProxyAddress][\\n            data.vehicleNode\\n        ] = newTokenId;\\n        ms.nodeLinks[sdIdProxyAddress][vehicleIdProxyAddress][newTokenId] = data\\n            .vehicleNode;\\n\\n        sds.deviceAddressToNodeId[data.syntheticDeviceAddr] = newTokenId;\\n        sds.nodeIdToDeviceAddress[newTokenId] = data.syntheticDeviceAddr;\\n\\n        emit SyntheticDeviceNodeMinted(\\n            data.integrationNode,\\n            newTokenId,\\n            data.vehicleNode,\\n            data.syntheticDeviceAddr,\\n            owner\\n        );\\n\\n        if (data.attrInfoPairs.length > 0)\\n            _setInfos(newTokenId, data.attrInfoPairs);\\n    }\\n\\n    /**\\n     * @notice Burns a synthetic device and reset all its attributes and links\\n     * @dev Caller must have the admin role\\n     * @dev This contract has the BURNER_ROLE in the SyntheticDeviceId\\n     * @param vehicleNode Vehicle node id\\n     * @param syntheticDeviceNode Synthetic Device node id\\n     * @param ownerSig Vehicle/Synthetic Device's owner signature hash\\n     */\\n    function burnSyntheticDeviceSign(\\n        uint256 vehicleNode,\\n        uint256 syntheticDeviceNode,\\n        bytes calldata ownerSig\\n    ) external onlyRole(BURN_SD_ROLE) {\\n        NodesStorage.Storage storage ns = NodesStorage.getStorage();\\n        MapperStorage.Storage storage ms = MapperStorage.getStorage();\\n        SyntheticDeviceStorage.Storage storage sds = SyntheticDeviceStorage\\n            .getStorage();\\n\\n        address vehicleIdProxyAddress = VehicleStorage\\n            .getStorage()\\n            .idProxyAddress;\\n        address sdIdProxyAddress = sds.idProxyAddress;\\n\\n        if (!INFT(vehicleIdProxyAddress).exists(vehicleNode))\\n            revert InvalidNode(vehicleIdProxyAddress, vehicleNode);\\n        if (!INFT(sdIdProxyAddress).exists(syntheticDeviceNode))\\n            revert InvalidNode(sdIdProxyAddress, syntheticDeviceNode);\\n        if (\\n            ms.nodeLinks[vehicleIdProxyAddress][sdIdProxyAddress][\\n                vehicleNode\\n            ] != syntheticDeviceNode\\n        ) revert VehicleNotPaired(vehicleNode);\\n\\n        address owner = INFT(sdIdProxyAddress).ownerOf(syntheticDeviceNode);\\n        bytes32 message = keccak256(\\n            abi.encode(BURN_TYPEHASH, vehicleNode, syntheticDeviceNode)\\n        );\\n\\n        if (!Eip712CheckerInternal._verifySignature(owner, message, ownerSig))\\n            revert InvalidOwnerSignature();\\n\\n        delete ns.nodes[sdIdProxyAddress][syntheticDeviceNode].parentNode;\\n\\n        delete ms.nodeLinks[vehicleIdProxyAddress][sdIdProxyAddress][\\n            vehicleNode\\n        ];\\n        delete ms.nodeLinks[sdIdProxyAddress][vehicleIdProxyAddress][\\n            syntheticDeviceNode\\n        ];\\n\\n        delete sds.deviceAddressToNodeId[\\n            sds.nodeIdToDeviceAddress[syntheticDeviceNode]\\n        ];\\n        delete sds.nodeIdToDeviceAddress[syntheticDeviceNode];\\n\\n        INFT(sdIdProxyAddress).burn(syntheticDeviceNode);\\n\\n        emit SyntheticDeviceNodeBurned(syntheticDeviceNode, vehicleNode, owner);\\n\\n        _resetInfos(syntheticDeviceNode);\\n    }\\n\\n    /**\\n     * @notice Add infos to node\\n     * @dev attributes must be whitelisted\\n     * @param tokenId Node id where the info will be added\\n     * @param attrInfo List of attribute-info pairs to be added\\n     */\\n    function setSyntheticDeviceInfo(\\n        uint256 tokenId,\\n        AttributeInfoPair[] calldata attrInfo\\n    ) external onlyRole(SET_SD_INFO_ROLE) {\\n        address sdIdProxy = SyntheticDeviceStorage.getStorage().idProxyAddress;\\n        if (!INFT(sdIdProxy).exists(tokenId))\\n            revert InvalidNode(sdIdProxy, tokenId);\\n        _setInfos(tokenId, attrInfo);\\n    }\\n\\n    /**\\n     * @notice Gets the Synthetic Device Id by the device address\\n     * @dev If the device is not minted it will return 0\\n     * @param addr Address associated with the synthetic device\\n     */\\n    function getSyntheticDeviceIdByAddress(\\n        address addr\\n    ) external view returns (uint256 nodeId) {\\n        nodeId = SyntheticDeviceStorage.getStorage().deviceAddressToNodeId[\\n            addr\\n        ];\\n    }\\n\\n    /**\\n     * @notice Gets the SD address by the node ID\\n     * @dev If the device is not minted it will return 0x00 address\\n     * @param nodeId Node ID associated with the synthetic device\\n     */\\n    function getSyntheticDeviceAddressById(\\n        uint256 nodeId\\n    ) external view returns (address addr) {\\n        addr = SyntheticDeviceStorage.getStorage().nodeIdToDeviceAddress[\\n            nodeId\\n        ];\\n    }\\n\\n    // ***** PRIVATE FUNCTIONS ***** //\\n\\n    /**\\n     * @dev Internal function to reset node infos\\n     * It iterates over all whitelisted attributes to reset each info\\n     * @param tokenId Node which will have the infos reset\\n     */\\n    function _resetInfos(uint256 tokenId) private {\\n        NodesStorage.Storage storage ns = NodesStorage.getStorage();\\n        SyntheticDeviceStorage.Storage storage sds = SyntheticDeviceStorage\\n            .getStorage();\\n        address idProxyAddress = sds.idProxyAddress;\\n        string[] memory attributes = AttributeSet.values(\\n            sds.whitelistedAttributes\\n        );\\n\\n        for (\\n            uint256 i = 0;\\n            i < AttributeSet.count(sds.whitelistedAttributes);\\n            i++\\n        ) {\\n            delete ns.nodes[idProxyAddress][tokenId].info[attributes[i]];\\n\\n            emit SyntheticDeviceAttributeSet(tokenId, attributes[i], \\\"\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/implementations/nodes/SyntheticDeviceInternal.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../libraries/NodesStorage.sol\\\";\\nimport \\\"../../libraries/nodes/SyntheticDeviceStorage.sol\\\";\\n\\nimport \\\"../../shared/Types.sol\\\";\\nimport \\\"../../shared/Errors.sol\\\";\\n\\n/**\\n * @title SyntheticDeviceInternal\\n * @notice Contract with internal Synthetic Device related functions used in multiple contracts\\n */\\ncontract SyntheticDeviceInternal {\\n    event SyntheticDeviceAttributeSet(\\n        uint256 indexed tokenId,\\n        string attribute,\\n        string info\\n    );\\n    event SyntheticDeviceNodeMinted(\\n        uint256 integrationNode,\\n        uint256 syntheticDeviceNode,\\n        uint256 indexed vehicleNode,\\n        address indexed syntheticDeviceAddress,\\n        address indexed owner\\n    );\\n\\n    /**\\n     * @dev Internal function to add infos to node\\n     * @dev attributes must be whitelisted\\n     * @param tokenId Node where the info will be added\\n     * @param attrInfoPairList List of attribute-info pairs to be added\\n     */\\n    function _setInfos(\\n        uint256 tokenId,\\n        AttributeInfoPair[] calldata attrInfoPairList\\n    ) internal {\\n        NodesStorage.Storage storage ns = NodesStorage.getStorage();\\n        SyntheticDeviceStorage.Storage storage sds = SyntheticDeviceStorage\\n            .getStorage();\\n        address idProxyAddress = sds.idProxyAddress;\\n\\n        for (uint256 i = 0; i < attrInfoPairList.length; i++) {\\n            if (\\n                !AttributeSet.exists(\\n                    sds.whitelistedAttributes,\\n                    attrInfoPairList[i].attribute\\n                )\\n            ) revert AttributeNotWhitelisted(attrInfoPairList[i].attribute);\\n\\n            ns.nodes[idProxyAddress][tokenId].info[\\n                attrInfoPairList[i].attribute\\n            ] = attrInfoPairList[i].info;\\n\\n            emit SyntheticDeviceAttributeSet(\\n                tokenId,\\n                attrInfoPairList[i].attribute,\\n                attrInfoPairList[i].info\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/implementations/nodes/VehicleInternal.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../libraries/NodesStorage.sol\\\";\\nimport \\\"../../libraries/nodes/VehicleStorage.sol\\\";\\n\\nimport \\\"../../shared/Types.sol\\\";\\nimport \\\"../../shared/Errors.sol\\\";\\n\\n/**\\n * @title VehicleInternal\\n * @notice Contract with internal Vehicle related functions used in multiple contracts\\n */\\ncontract VehicleInternal {\\n    bytes32 internal constant MINT_VEHICLE_TYPEHASH =\\n        keccak256(\\n            \\\"MintVehicleSign(uint256 manufacturerNode,address owner,string[] attributes,string[] infos)\\\"\\n        );\\n\\n    event VehicleAttributeSet(uint256 tokenId, string attribute, string info);\\n    event VehicleNodeMinted(\\n        uint256 manufacturerNode,\\n        uint256 tokenId,\\n        address owner\\n    );\\n\\n    /**\\n     * @dev Internal function to add infos to node and calculate attribute and info hashes\\n     * @dev attributes must be whitelisted\\n     * @param tokenId Node where the info will be added\\n     * @param attrInfo List of attribute-info pairs to be added\\n     * @return keccak256 of the list of attributes and infos\\n     */\\n    function _setInfosHash(\\n        uint256 tokenId,\\n        AttributeInfoPair[] calldata attrInfo\\n    ) internal returns (bytes32, bytes32) {\\n        NodesStorage.Storage storage ns = NodesStorage.getStorage();\\n        VehicleStorage.Storage storage s = VehicleStorage.getStorage();\\n        address idProxyAddress = s.idProxyAddress;\\n\\n        bytes32[] memory attributeHashes = new bytes32[](attrInfo.length);\\n        bytes32[] memory infoHashes = new bytes32[](attrInfo.length);\\n\\n        for (uint256 i = 0; i < attrInfo.length; i++) {\\n            if (\\n                !AttributeSet.exists(\\n                    s.whitelistedAttributes,\\n                    attrInfo[i].attribute\\n                )\\n            ) revert AttributeNotWhitelisted(attrInfo[i].attribute);\\n\\n            attributeHashes[i] = keccak256(bytes(attrInfo[i].attribute));\\n            infoHashes[i] = keccak256(bytes(attrInfo[i].info));\\n\\n            ns.nodes[idProxyAddress][tokenId].info[\\n                attrInfo[i].attribute\\n            ] = attrInfo[i].info;\\n\\n            emit VehicleAttributeSet(\\n                tokenId,\\n                attrInfo[i].attribute,\\n                attrInfo[i].info\\n            );\\n        }\\n\\n        return (\\n            keccak256(abi.encodePacked(attributeHashes)),\\n            keccak256(abi.encodePacked(infoHashes))\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INFT.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.13;\\n\\n/**\\n * @title INFT\\n * @notice Interface of a generic NFT\\n */\\ninterface INFT {\\n    function safeMint(address to) external returns (uint256);\\n\\n    function safeTransferByRegistry(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    function burn(uint256 tokenId) external;\\n\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    function exists(uint256 tokenId) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/AttributeSet.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.13;\\n\\n/// @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n\\nlibrary AttributeSet {\\n    struct Set {\\n        string[] _values;\\n        mapping(string => uint256) _indexes;\\n    }\\n\\n    function add(Set storage set, string calldata key) internal returns (bool) {\\n        if (!exists(set, key)) {\\n            set._values.push(key);\\n            set._indexes[key] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function remove(\\n        Set storage set,\\n        string calldata key\\n    ) internal returns (bool) {\\n        uint256 valueIndex = set._indexes[key];\\n\\n        if (valueIndex != 0) {\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                string memory lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function count(Set storage set) internal view returns (uint256) {\\n        return (set._values.length);\\n    }\\n\\n    function exists(\\n        Set storage set,\\n        string calldata key\\n    ) internal view returns (bool) {\\n        return set._indexes[key] != 0;\\n    }\\n\\n    function values(Set storage set) internal view returns (string[] memory) {\\n        return set._values;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/MapperStorage.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.13;\\n\\n/**\\n * @title MapperStorage\\n * @notice Storage of the Mapper contract\\n */\\nlibrary MapperStorage {\\n    bytes32 internal constant MAPPER_STORAGE_SLOT =\\n        keccak256(\\\"DIMORegistry.mapper.storage\\\");\\n\\n    struct Storage {\\n        // Links between Vehicles and ADs\\n        // idProxyAddress -> vehicleId/adId -> adId/vehicleId\\n        mapping(address => mapping(uint256 => uint256)) links;\\n        // Stores beneficiary addresses for a given nodeId of an idProxy\\n        // idProxyAddress -> nodeId -> beneficiary\\n        mapping(address => mapping(uint256 => address)) beneficiaries;\\n        // idProxyAddress1 -> idProxyAddress2 -> nftId1 -> nftId2\\n        mapping(address => mapping(address => mapping(uint256 => uint256))) nodeLinks;\\n    }\\n\\n    /* solhint-disable no-inline-assembly */\\n    function getStorage() internal pure returns (Storage storage s) {\\n        bytes32 slot = MAPPER_STORAGE_SLOT;\\n        assembly {\\n            s.slot := slot\\n        }\\n    }\\n    /* solhint-enable no-inline-assembly */\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/nodes/IntegrationStorage.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.13;\\n\\nimport \\\"../AttributeSet.sol\\\";\\n\\n/**\\n * @title IntegrationStorage\\n * @notice Storage of the Integration contract\\n */\\nlibrary IntegrationStorage {\\n    using AttributeSet for AttributeSet.Set;\\n\\n    bytes32 private constant INTEGRATION_STORAGE_SLOT =\\n        keccak256(\\\"DIMORegistry.Integration.storage\\\");\\n\\n    struct Controller {\\n        bool isController;\\n        bool integrationMinted;\\n    }\\n\\n    struct Storage {\\n        address idProxyAddress;\\n        // [Controller address] => is controller, has minted integration node\\n        mapping(address => Controller) controllers;\\n        // Allowed node attribute\\n        AttributeSet.Set whitelistedAttributes;\\n        // Integration name => Integration Id\\n        mapping(string => uint256) integrationNameToNodeId;\\n        // Integration Id => Integration name\\n        mapping(uint256 => string) nodeIdToIntegrationName;\\n    }\\n\\n    /* solhint-disable no-inline-assembly */\\n    function getStorage() internal pure returns (Storage storage s) {\\n        bytes32 slot = INTEGRATION_STORAGE_SLOT;\\n        assembly {\\n            s.slot := slot\\n        }\\n    }\\n    /* solhint-enable no-inline-assembly */\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/nodes/ManufacturerStorage.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.13;\\n\\nimport \\\"../AttributeSet.sol\\\";\\n\\n/**\\n * @title ManufacturerStorage\\n * @notice Storage of the Manufacturer contract\\n */\\nlibrary ManufacturerStorage {\\n    using AttributeSet for AttributeSet.Set;\\n\\n    bytes32 private constant MANUFACTURER_STORAGE_SLOT =\\n        keccak256(\\\"DIMORegistry.Manufacturer.storage\\\");\\n\\n    struct Controller {\\n        bool isController;\\n        bool manufacturerMinted;\\n    }\\n\\n    struct Storage {\\n        address idProxyAddress;\\n        // [Controller address] => is controller, has minted manufacturer\\n        mapping(address => Controller) controllers;\\n        // Allowed node attribute\\n        AttributeSet.Set whitelistedAttributes;\\n        // Manufacturer name => Manufacturer Id\\n        mapping(string => uint256) manufacturerNameToNodeId;\\n        // Manufacturer Id => Manufacturer name\\n        mapping(uint256 => string) nodeIdToManufacturerName;\\n    }\\n\\n    /* solhint-disable no-inline-assembly */\\n    function getStorage() internal pure returns (Storage storage s) {\\n        bytes32 slot = MANUFACTURER_STORAGE_SLOT;\\n        assembly {\\n            s.slot := slot\\n        }\\n    }\\n    /* solhint-enable no-inline-assembly */\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/nodes/SyntheticDeviceStorage.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.13;\\n\\nimport \\\"../AttributeSet.sol\\\";\\n\\n/**\\n * @title SyntheticDeviceStorage\\n * @notice Storage of the SyntheticDevice contract\\n */\\nlibrary SyntheticDeviceStorage {\\n    using AttributeSet for AttributeSet.Set;\\n\\n    bytes32 private constant SYNTHETIC_DEVICE_STORAGE_SLOT =\\n        keccak256(\\\"DIMORegistry.syntheticDevice.storage\\\");\\n\\n    struct Storage {\\n        address idProxyAddress;\\n        // Allowed node attribute\\n        AttributeSet.Set whitelistedAttributes;\\n        // Synthetic Device address => Synthetic Device Id\\n        mapping(address => uint256) deviceAddressToNodeId;\\n        // Synthetic Device Id => Synthetic Device address\\n        mapping(uint256 => address) nodeIdToDeviceAddress;\\n    }\\n\\n    /* solhint-disable no-inline-assembly */\\n    function getStorage() internal pure returns (Storage storage s) {\\n        bytes32 slot = SYNTHETIC_DEVICE_STORAGE_SLOT;\\n        assembly {\\n            s.slot := slot\\n        }\\n    }\\n    /* solhint-enable no-inline-assembly */\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/nodes/VehicleStorage.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.13;\\n\\nimport \\\"../AttributeSet.sol\\\";\\n\\n/**\\n * @title VehicleStorage\\n * @notice Storage of the Vehicle contract\\n */\\nlibrary VehicleStorage {\\n    using AttributeSet for AttributeSet.Set;\\n\\n    bytes32 private constant VEHICLE_STORAGE_SLOT =\\n        keccak256(\\\"DIMORegistry.vehicle.storage\\\");\\n\\n    struct Storage {\\n        address idProxyAddress;\\n        // Allowed node attribute\\n        AttributeSet.Set whitelistedAttributes;\\n    }\\n\\n    /* solhint-disable no-inline-assembly */\\n    function getStorage() internal pure returns (Storage storage s) {\\n        bytes32 slot = VEHICLE_STORAGE_SLOT;\\n        assembly {\\n            s.slot := slot\\n        }\\n    }\\n    /* solhint-enable no-inline-assembly */\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/NodesStorage.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.13;\\n\\n/**\\n * @title NodesStorage\\n * @notice Storage of the Nodes contract\\n */\\nlibrary NodesStorage {\\n    bytes32 internal constant NODES_STORAGE_SLOT =\\n        keccak256(\\\"DIMORegistry.nodes.storage\\\");\\n\\n    struct Node {\\n        uint256 parentNode;\\n        mapping(string => string) info;\\n    }\\n\\n    struct Storage {\\n        mapping(address => mapping(uint256 => Node)) nodes;\\n    }\\n\\n    /* solhint-disable no-inline-assembly */\\n    function getStorage() internal pure returns (Storage storage s) {\\n        bytes32 slot = NODES_STORAGE_SLOT;\\n        assembly {\\n            s.slot := slot\\n        }\\n    }\\n    /* solhint-enable no-inline-assembly */\\n}\\n\"\r\n    },\r\n    \"contracts/shared/Errors.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.13;\\n\\n// Misc\\nerror ZeroAddress();\\nerror Unauthorized(address addr);\\nerror AttributeExists(string attr);\\nerror AttributeNotWhitelisted(string attr);\\nerror AlreadyController(address addr);\\nerror OnlyNftProxy();\\n\\n// Nodes\\nerror InvalidParentNode(uint256 id);\\nerror InvalidParentNodeOwner(uint256 id, address addr);\\nerror InvalidNode(address proxy, uint256 id);\\nerror VehiclePaired(uint256 id);\\nerror VehicleNotPaired(uint256 id);\\n\\n// Signature\\nerror InvalidSigner();\\nerror InvalidOwnerSignature();\\n\"\r\n    },\r\n    \"contracts/shared/Roles.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.13;\\n\\n// Admin roles\\nbytes32 constant DEFAULT_ADMIN_ROLE = 0x00;\\nbytes32 constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n\\n// Aftermarket Device roles\\nbytes32 constant CLAIM_AD_ROLE = keccak256(\\\"CLAIM_AD_ROLE\\\");\\nbytes32 constant PAIR_AD_ROLE = keccak256(\\\"PAIR_AD_ROLE\\\");\\nbytes32 constant UNPAIR_AD_ROLE = keccak256(\\\"UNPAIR_AD_ROLE\\\");\\nbytes32 constant SET_AD_INFO_ROLE = keccak256(\\\"SET_AD_INFO_ROLE\\\");\\n\\n// Integration roles\\nbytes32 constant MINT_INTEGRATION_ROLE = keccak256(\\\"MINT_INTEGRATION_ROLE\\\");\\nbytes32 constant SET_INTEGRATION_INFO_ROLE = keccak256(\\n    \\\"SET_INTEGRATION_INFO_ROLE\\\"\\n);\\n\\n// Manufacturer roles\\nbytes32 constant MINT_MANUFACTURER_ROLE = keccak256(\\\"MINT_MANUFACTURER_ROLE\\\");\\nbytes32 constant SET_MANUFACTURER_INFO_ROLE = keccak256(\\n    \\\"SET_MANUFACTURER_INFO_ROLE\\\"\\n);\\n\\n// Synthetic Device roles\\nbytes32 constant MINT_SD_ROLE = keccak256(\\\"MINT_SD_ROLE\\\");\\nbytes32 constant BURN_SD_ROLE = keccak256(\\\"BURN_SD_ROLE\\\");\\nbytes32 constant SET_SD_INFO_ROLE = keccak256(\\\"SET_SD_INFO_ROLE\\\");\\n\\n// Vehicle roles\\nbytes32 constant MINT_VEHICLE_ROLE = keccak256(\\\"MINT_VEHICLE_ROLE\\\");\\nbytes32 constant BURN_VEHICLE_ROLE = keccak256(\\\"BURN_VEHICLE_ROLE\\\");\\nbytes32 constant SET_VEHICLE_INFO_ROLE = keccak256(\\\"SET_VEHICLE_INFO_ROLE\\\");\\n\\n// Multiple Minter roles\\nbytes32 constant MINT_VEHICLE_SD_ROLE = keccak256(\\\"MINT_VEHICLE_SD_ROLE\\\");\\n\\n// Developer roles\\nbytes32 constant DEV_AD_TRANSFER_ROLE = keccak256(\\\"DEV_AD_TRANSFER_ROLE\\\");\\nbytes32 constant DEV_AD_UNCLAIM_ROLE = keccak256(\\\"DEV_AD_UNCLAIM_ROLE\\\");\\nbytes32 constant DEV_AD_UNPAIR_ROLE = keccak256(\\\"DEV_AD_UNPAIR_ROLE\\\");\\nbytes32 constant DEV_RENAME_MANUFACTURERS_ROLE = keccak256(\\n    \\\"DEV_RENAME_MANUFACTURERS_ROLE\\\"\\n);\\nbytes32 constant DEV_AD_PAIR_ROLE = keccak256(\\\"DEV_AD_PAIR_ROLE\\\");\\nbytes32 constant DEV_VEHICLE_BURN_ROLE = keccak256(\\\"DEV_VEHICLE_BURN_ROLE\\\");\\nbytes32 constant DEV_AD_BURN_ROLE = keccak256(\\\"DEV_AD_BURN_ROLE\\\");\\nbytes32 constant DEV_CHANGE_PARENT_NODE = keccak256(\\\"DEV_CHANGE_PARENT_NODE\\\");\\n\"\r\n    },\r\n    \"contracts/shared/Types.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.13;\\n\\n/// @notice File to store shared structs\\n\\nstruct AttributeInfoPair {\\n    string attribute;\\n    string info;\\n}\\n\\nstruct AftermarketDeviceInfos {\\n    address addr;\\n    AttributeInfoPair[] attrInfoPairs;\\n}\\n\\nstruct AftermarketDeviceOwnerPair {\\n    uint256 aftermarketDeviceNodeId;\\n    address owner;\\n}\\n\\nstruct MintSyntheticDeviceBatchInput {\\n    uint256 vehicleNode;\\n    address syntheticDeviceAddr;\\n    AttributeInfoPair[] attrInfoPairs;\\n}\\n\\nstruct MintSyntheticDeviceInput {\\n    uint256 integrationNode;\\n    uint256 vehicleNode;\\n    bytes syntheticDeviceSig;\\n    bytes vehicleOwnerSig;\\n    address syntheticDeviceAddr;\\n    AttributeInfoPair[] attrInfoPairs;\\n}\\n\\nstruct MintVehicleAndSdInput {\\n    uint256 manufacturerNode;\\n    address owner;\\n    AttributeInfoPair[] attrInfoPairsVehicle;\\n    uint256 integrationNode;\\n    bytes vehicleOwnerSig;\\n    bytes syntheticDeviceSig;\\n    address syntheticDeviceAddr;\\n    AttributeInfoPair[] attrInfoPairsDevice;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"attr\",\"type\":\"string\"}],\"name\":\"AttributeExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"attr\",\"type\":\"string\"}],\"name\":\"AttributeNotWhitelisted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"DeviceAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"InvalidNode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOwnerSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"InvalidParentNode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSdSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UintUtils__InsufficientHexLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"VehicleNotPaired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"VehiclePaired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"attribute\",\"type\":\"string\"}],\"name\":\"SyntheticDeviceAttributeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"attribute\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"info\",\"type\":\"string\"}],\"name\":\"SyntheticDeviceAttributeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"SyntheticDeviceIdProxySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"syntheticDeviceNode\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vehicleNode\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"SyntheticDeviceNodeBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"integrationNode\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"syntheticDeviceNode\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vehicleNode\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"syntheticDeviceAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"SyntheticDeviceNodeMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"attribute\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"info\",\"type\":\"string\"}],\"name\":\"VehicleAttributeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"manufacturerNode\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"VehicleNodeMinted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"attribute\",\"type\":\"string\"}],\"name\":\"addSyntheticDeviceAttribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vehicleNode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"syntheticDeviceNode\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ownerSig\",\"type\":\"bytes\"}],\"name\":\"burnSyntheticDeviceSign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeId\",\"type\":\"uint256\"}],\"name\":\"getSyntheticDeviceAddressById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getSyntheticDeviceIdByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"integrationNode\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"vehicleNode\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"syntheticDeviceAddr\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"attribute\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"info\",\"type\":\"string\"}],\"internalType\":\"struct AttributeInfoPair[]\",\"name\":\"attrInfoPairs\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MintSyntheticDeviceBatchInput[]\",\"name\":\"data\",\"type\":\"tuple[]\"}],\"name\":\"mintSyntheticDeviceBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"integrationNode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vehicleNode\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"syntheticDeviceSig\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"vehicleOwnerSig\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"syntheticDeviceAddr\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"attribute\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"info\",\"type\":\"string\"}],\"internalType\":\"struct AttributeInfoPair[]\",\"name\":\"attrInfoPairs\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MintSyntheticDeviceInput\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"mintSyntheticDeviceSign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setSyntheticDeviceIdProxyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"attribute\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"info\",\"type\":\"string\"}],\"internalType\":\"struct AttributeInfoPair[]\",\"name\":\"attrInfo\",\"type\":\"tuple[]\"}],\"name\":\"setSyntheticDeviceInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SyntheticDevice", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}