{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MarketplaceEditions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\nimport \\\"./IEditions.sol\\\";\\n\\ncontract SoundchainMarketplaceEditions is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using Address for address payable;\\n    uint256 public rewardsRate;\\n    uint256 public rewardsLimit;\\n\\n    /// @notice Events for the contract\\n    event ItemListed(\\n        address indexed owner,\\n        address indexed nft,\\n        uint256 tokenId,\\n        uint256 quantity,\\n        uint256 pricePerItem,\\n        uint256 OGUNPricePerItem,\\n        bool acceptsMATIC,\\n        bool acceptsOGUN,\\n        uint256 startingTime\\n    );\\n    event ItemSold(\\n        address indexed seller,\\n        address indexed buyer,\\n        address indexed nft,\\n        uint256 tokenId,\\n        uint256 quantity,\\n        uint256 pricePerItem,\\n        bool isPaymentOGUN\\n    );\\n    event ItemUpdated(\\n        address indexed owner,\\n        address indexed nft,\\n        uint256 tokenId,\\n        uint256 newPrice,\\n        uint256 newOGUNPrice,\\n        bool acceptsMATIC,\\n        bool acceptsOGUN,\\n        uint256 startingTime\\n    );\\n    event ItemCanceled(\\n        address indexed owner,\\n        address indexed nft,\\n        uint256 tokenId\\n    );\\n    event EditionListed(address indexed nft, uint256 editionId);\\n    event EditionCanceled(address indexed nft, uint256 editionId);\\n    event UpdatePlatformFee(uint16 platformFee);\\n    event UpdatePlatformFeeRecipient(address payable platformFeeRecipient);\\n\\n    /// @notice Structure for listed items\\n    struct Listing {\\n        uint256 quantity;\\n        uint256 pricePerItem;\\n        uint256 OGUNPricePerItem;\\n        bool acceptsMATIC;\\n        bool acceptsOGUN;\\n        uint256 startingTime;\\n    }\\n\\n    bytes4 private constant INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    IERC20 public immutable OGUNToken;\\n\\n    /// @notice NftAddress -> Token ID -> Owner -> Listing item\\n    mapping(address => mapping(uint256 => mapping(address => Listing)))\\n        public listings;\\n\\n    /// @notice NftAddress -> Edition Number -> True/False (Edition listed or not)\\n    mapping(address => mapping(uint256 => bool)) public editionListings;\\n\\n    /// @notice Platform fee\\n    uint16 public platformFee;\\n\\n    /// @notice Platform fee recipient\\n    address payable public feeRecipient;\\n\\n    modifier isListed(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address _owner\\n    ) {\\n        require(_isListed(_nftAddress, _tokenId, _owner), \\\"not listed item\\\");\\n        _;\\n    }\\n\\n    modifier notListed(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address _owner\\n    ) {\\n        require(_notListed(_nftAddress, _tokenId, _owner), \\\"already listed\\\");\\n        _;\\n    }\\n\\n    modifier editionNotListed(address nftAddress, uint256 _editionNumber) {\\n        require(\\n            !editionListings[nftAddress][_editionNumber],\\n            \\\"edition already listed\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier isEditionListed(address _nftAddress, uint256 _editionNumber) {\\n        require(\\n            editionListings[_nftAddress][_editionNumber],\\n            \\\"edition not listed item\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier validListing(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address _owner\\n    ) {\\n        Listing memory listedItem = listings[_nftAddress][_tokenId][_owner];\\n        if (IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721)) {\\n            IERC721 nft = IERC721(_nftAddress);\\n            require(nft.ownerOf(_tokenId) == _owner, \\\"not owning item\\\");\\n        } else {\\n            revert(\\\"invalid nft address\\\");\\n        }\\n        require(_getNow() >= listedItem.startingTime, \\\"item not buyable\\\");\\n        _;\\n    }\\n\\n    /// @notice Contract constructor\\n    constructor(\\n        address payable _feeRecipient,\\n        address _OGUNToken,\\n        uint16 _platformFee,\\n        uint256 _rewardsRate,\\n        uint256 _rewardsLimit\\n    ) {\\n        OGUNToken = IERC20(_OGUNToken);\\n        platformFee = _platformFee;\\n        feeRecipient = _feeRecipient;\\n        rewardsRate = _rewardsRate;\\n        rewardsLimit = _rewardsLimit;\\n    }\\n\\n    /// @notice Method for canceling listed NFT\\n    function cancelListing(address _nftAddress, uint256 _tokenId)\\n        external\\n        nonReentrant\\n        isListed(_nftAddress, _tokenId, _msgSender())\\n    {\\n        _cancelListing(_nftAddress, _tokenId, _msgSender());\\n    }\\n\\n    /// @notice Method for canceling Edition listed NFT\\n    function cancelEditionListing(address _nftAddress, uint256 _editionNumber)\\n        external\\n        nonReentrant\\n        isEditionListed(_nftAddress, _editionNumber)\\n    {\\n        IERC721 nft = IERC721(_nftAddress);\\n        IEditions nftEdition = IEditions(_nftAddress);\\n\\n        uint256[] memory tokensFromEdition = nftEdition.getTokenIdsOfEdition(\\n            _editionNumber\\n        );\\n\\n        require(tokensFromEdition.length > 0, \\\"edition has no tokens\\\");\\n\\n        for (uint256 index = 0; index < tokensFromEdition.length; index++) {\\n            if (nft.ownerOf(tokensFromEdition[index]) == _msgSender()) {\\n                _cancelListing(\\n                    _nftAddress,\\n                    tokensFromEdition[index],\\n                    _msgSender()\\n                );\\n            }\\n        }\\n        editionListings[_nftAddress][_editionNumber] = false;\\n\\n        emit EditionCanceled(_nftAddress, _editionNumber);\\n    }\\n\\n    /// @notice Method for batch canceling listed NFT\\n    function cancelListingBatch(address _nftAddress, uint256[] memory tokenIds)\\n        external\\n        nonReentrant\\n    {\\n        IERC721 nft = IERC721(_nftAddress);\\n\\n        require(tokenIds.length > 0, \\\"tokenIds is empty\\\");\\n\\n        for (uint256 index = 0; index < tokenIds.length; index++) {\\n            if (nft.ownerOf(tokenIds[index]) == _msgSender()) {\\n                require(\\n                    _isListed(_nftAddress, tokenIds[index], _msgSender()),\\n                    \\\"item not listed\\\"\\n                );\\n                _cancelListing(_nftAddress, tokenIds[index], _msgSender());\\n            }\\n        }\\n    }\\n\\n    /// @notice Method for updating listed NFT\\n    /// @param _nftAddress Address of NFT contract\\n    /// @param _tokenId Token ID of NFT\\n    /// @param _newPrice New sale price for each iteam\\n    /// @param _newOGUNPrice New sale price in OGUN for each iteam\\n    /// @param _acceptsMATIC true in case accepts MATIC as payment\\n    /// @param _acceptsOGUN true in case accepts OGUN as payment\\n    /// @param _startingTime scheduling for a future sale\\n    function updateListing(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        uint256 _newPrice,\\n        uint256 _newOGUNPrice,\\n        bool _acceptsMATIC,\\n        bool _acceptsOGUN,\\n        uint256 _startingTime\\n    ) external nonReentrant isListed(_nftAddress, _tokenId, _msgSender()) {\\n        Listing storage listedItem = listings[_nftAddress][_tokenId][\\n            _msgSender()\\n        ];\\n        if (IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721)) {\\n            IERC721 nft = IERC721(_nftAddress);\\n            require(nft.ownerOf(_tokenId) == _msgSender(), \\\"not owning item\\\");\\n        } else {\\n            revert(\\\"invalid nft address\\\");\\n        }\\n\\n        require(\\n            (_acceptsMATIC || _acceptsOGUN),\\n            \\\"item should have a way of payment\\\"\\n        );\\n\\n        listedItem.pricePerItem = _newPrice;\\n        listedItem.acceptsMATIC = _acceptsMATIC;\\n        listedItem.OGUNPricePerItem = _newOGUNPrice;\\n        listedItem.acceptsOGUN = _acceptsOGUN;\\n        listedItem.startingTime = _startingTime;\\n        emit ItemUpdated(\\n            _msgSender(),\\n            _nftAddress,\\n            _tokenId,\\n            _newPrice,\\n            _newOGUNPrice,\\n            _acceptsMATIC,\\n            _acceptsOGUN,\\n            _startingTime\\n        );\\n    }\\n\\n    /// @notice Method for buying listed NFT\\n    /// @param _nftAddress NFT contract address\\n    /// @param _tokenId TokenId\\n    /// @param _isPaymentOGUN true if the payment in OGUN\\n    function buyItem(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address payable _owner,\\n        bool _isPaymentOGUN\\n    )\\n        external\\n        payable\\n        nonReentrant\\n        isListed(_nftAddress, _tokenId, _owner)\\n        validListing(_nftAddress, _tokenId, _owner)\\n    {\\n        Listing memory listedItem = listings[_nftAddress][_tokenId][_owner];\\n        if (_isPaymentOGUN) {\\n            uint256 allowance = OGUNToken.allowance(\\n                _msgSender(),\\n                address(this)\\n            );\\n            require(\\n                allowance >=\\n                    listedItem.OGUNPricePerItem.mul(listedItem.quantity),\\n                \\\"insufficient OGUN balance to buy\\\"\\n            );\\n            require(\\n                listedItem.acceptsOGUN == true,\\n                \\\"this purchase can't be done in OGUN\\\"\\n            );\\n        } else {\\n            require(\\n                msg.value >= listedItem.pricePerItem.mul(listedItem.quantity),\\n                \\\"insufficient MATIC balance to buy\\\"\\n            );\\n            require(\\n                listedItem.acceptsMATIC == true,\\n                \\\"this purchase can't be done in MATIC\\\"\\n            );\\n        }\\n\\n        _buyItem(_nftAddress, _tokenId, _owner, _isPaymentOGUN);\\n    }\\n\\n    function _buyItem(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address _owner,\\n        bool isPaymentOGUN\\n    ) private {\\n        Listing memory listedItem = listings[_nftAddress][_tokenId][_owner];\\n        uint256 price;\\n        if (isPaymentOGUN) {\\n            price = listedItem.OGUNPricePerItem.mul(listedItem.quantity);\\n        } else {\\n            price = listedItem.pricePerItem.mul(listedItem.quantity);\\n        }\\n        uint256 feeAmount = price.mul(platformFee).div(1e4);\\n\\n        // Platform Fee payment\\n        if (isPaymentOGUN) {\\n            OGUNToken.safeTransferFrom(_msgSender(), feeRecipient, feeAmount);\\n        } else {\\n            (bool feeTransferSuccess, ) = feeRecipient.call{value: feeAmount}(\\n                \\\"\\\"\\n            );\\n            require(feeTransferSuccess, \\\"fee transfer failed\\\");\\n        }\\n\\n        // Royalty Fee payment\\n        (address minter, uint256 royaltyFee) = IERC2981(_nftAddress)\\n            .royaltyInfo(_tokenId, price - feeAmount);\\n        if (minter != address(0)) {\\n            if (isPaymentOGUN) {\\n                OGUNToken.safeTransferFrom(_msgSender(), minter, royaltyFee);\\n            } else {\\n                (bool royaltyTransferSuccess, ) = payable(minter).call{\\n                    value: royaltyFee\\n                }(\\\"\\\");\\n                require(royaltyTransferSuccess, \\\"royalty fee transfer failed\\\");\\n            }\\n\\n            feeAmount = feeAmount.add(royaltyFee);\\n        }\\n        // Owner payment\\n        if (isPaymentOGUN) {\\n            OGUNToken.safeTransferFrom(\\n                _msgSender(),\\n                _owner,\\n                price.sub(feeAmount)\\n            );\\n\\n            uint256 rewardValue = price.mul(rewardsRate).div(1e4);\\n            if (rewardValue > rewardsLimit) {\\n                rewardValue = rewardsLimit;\\n            }\\n            if (\\n                IERC20(OGUNToken).balanceOf(address(this)) >= rewardValue.mul(2)\\n            ) {\\n                OGUNToken.safeTransfer(_owner, rewardValue);\\n                OGUNToken.safeTransfer(_msgSender(), rewardValue);\\n            }\\n        } else {\\n            (bool ownerTransferSuccess, ) = _owner.call{\\n                value: price.sub(feeAmount)\\n            }(\\\"\\\");\\n            require(ownerTransferSuccess, \\\"owner transfer failed\\\");\\n        }\\n\\n        IERC721(_nftAddress).safeTransferFrom(_owner, _msgSender(), _tokenId);\\n\\n        emit ItemSold(\\n            _owner,\\n            _msgSender(),\\n            _nftAddress,\\n            _tokenId,\\n            listedItem.quantity,\\n            price.div(listedItem.quantity),\\n            isPaymentOGUN\\n        );\\n        delete (listings[_nftAddress][_tokenId][_owner]);\\n    }\\n\\n    /// @notice Method for listing NFT\\n    /// @param _nftAddress Address of NFT contract\\n    /// @param _tokenId Token ID of NFT\\n    /// @param _quantity token amount to list\\n    /// @param _pricePerItem sale price for each iteam\\n    /// @param _OGUNPricePerItem New sale price in OGUN for each iteam\\n    /// @param _acceptsMATIC true in case accepts MATIC as payment\\n    /// @param _acceptsOGUN true in case accepts OGUN as payment\\n    /// @param _startingTime scheduling for a future sale\\n    function listItem(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        uint256 _quantity,\\n        uint256 _pricePerItem,\\n        uint256 _OGUNPricePerItem,\\n        bool _acceptsMATIC,\\n        bool _acceptsOGUN,\\n        uint256 _startingTime\\n    ) external notListed(_nftAddress, _tokenId, _msgSender()) {\\n        if (IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721)) {\\n            IERC721 nft = IERC721(_nftAddress);\\n            require(nft.ownerOf(_tokenId) == _msgSender(), \\\"not owning item\\\");\\n            require(\\n                nft.isApprovedForAll(_msgSender(), address(this)),\\n                \\\"item not approved\\\"\\n            );\\n        } else {\\n            revert(\\\"invalid nft address\\\");\\n        }\\n\\n        require(\\n            (_acceptsMATIC || _acceptsOGUN),\\n            \\\"item should have a way of payment\\\"\\n        );\\n\\n        listings[_nftAddress][_tokenId][_msgSender()] = Listing(\\n            _quantity,\\n            _pricePerItem,\\n            _OGUNPricePerItem,\\n            _acceptsMATIC,\\n            _acceptsOGUN,\\n            _startingTime\\n        );\\n        emit ItemListed(\\n            _msgSender(),\\n            _nftAddress,\\n            _tokenId,\\n            _quantity,\\n            _pricePerItem,\\n            _OGUNPricePerItem,\\n            _acceptsMATIC,\\n            _acceptsOGUN,\\n            _startingTime\\n        );\\n    }\\n\\n    /// @notice Method for batch listing NFT\\n    /// @param editionNumber edition number\\n    /// @param _pricePerItem sale price for each iteam\\n    /// @param _OGUNPricePerItem New sale price in OGUN for each iteam\\n    /// @param _acceptsMATIC true in case accepts MATIC as payment\\n    /// @param _acceptsOGUN true in case accepts OGUN as payment\\n    /// @param _startingTime scheduling for a future sale\\n    function listEdition(\\n        address _nftEditionAddress,\\n        uint256 editionNumber,\\n        uint256 _pricePerItem,\\n        uint256 _OGUNPricePerItem,\\n        bool _acceptsMATIC,\\n        bool _acceptsOGUN,\\n        uint256 _startingTime\\n    ) external editionNotListed(_nftEditionAddress, editionNumber) {\\n        editionListings[_nftEditionAddress][editionNumber] = true;\\n\\n        require(\\n            (_acceptsMATIC || _acceptsOGUN),\\n            \\\"item should have a way of payment\\\"\\n        );\\n\\n        if (\\n            IERC165(_nftEditionAddress).supportsInterface(INTERFACE_ID_ERC721)\\n        ) {\\n            IERC721 nft = IERC721(_nftEditionAddress);\\n            IEditions nftEdition = IEditions(_nftEditionAddress);\\n\\n            require(\\n                nft.isApprovedForAll(_msgSender(), address(this)),\\n                \\\"item not approved\\\"\\n            );\\n\\n            uint256[] memory tokensFromEdition = nftEdition\\n                .getTokenIdsOfEdition(editionNumber);\\n\\n            require(tokensFromEdition.length > 0, \\\"edition has no tokens\\\");\\n\\n            for (uint256 index = 0; index < tokensFromEdition.length; index++) {\\n                if (nft.ownerOf(tokensFromEdition[index]) == _msgSender()) {\\n                    listings[_nftEditionAddress][tokensFromEdition[index]][\\n                        _msgSender()\\n                    ] = Listing(\\n                        1,\\n                        _pricePerItem,\\n                        _OGUNPricePerItem,\\n                        _acceptsMATIC,\\n                        _acceptsOGUN,\\n                        _startingTime\\n                    );\\n                    emit ItemListed(\\n                        _msgSender(),\\n                        _nftEditionAddress,\\n                        tokensFromEdition[index],\\n                        1,\\n                        _pricePerItem,\\n                        _OGUNPricePerItem,\\n                        _acceptsMATIC,\\n                        _acceptsOGUN,\\n                        _startingTime\\n                    );\\n                }\\n            }\\n\\n            emit EditionListed(_nftEditionAddress, editionNumber);\\n        } else {\\n            revert(\\\"invalid nft address\\\");\\n        }\\n    }\\n\\n    /// @notice Method for batch listing NFT\\n    /// @param tokenIds all token IDs to list\\n    /// @param _pricePerItem sale price for each iteam\\n    /// @param _OGUNPricePerItem New sale price in OGUN for each iteam\\n    /// @param _acceptsMATIC true in case accepts MATIC as payment\\n    /// @param _acceptsOGUN true in case accepts OGUN as payment\\n    /// @param _startingTime scheduling for a future sale\\n    function listBatch(\\n        address _nftAddress,\\n        uint256[] memory tokenIds,\\n        uint256 _pricePerItem,\\n        uint256 _OGUNPricePerItem,\\n        bool _acceptsMATIC,\\n        bool _acceptsOGUN,\\n        uint256 _startingTime\\n    ) external {\\n        require(\\n            (_acceptsMATIC || _acceptsOGUN),\\n            \\\"item should have a way of payment\\\"\\n        );\\n\\n        require(tokenIds.length > 0, \\\"tokenIds is empty\\\");\\n\\n        if (IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721)) {\\n            IERC721 nft = IERC721(_nftAddress);\\n\\n            require(\\n                nft.isApprovedForAll(_msgSender(), address(this)),\\n                \\\"item not approved\\\"\\n            );\\n\\n            for (uint256 index = 0; index < tokenIds.length; index++) {\\n                if (nft.ownerOf(tokenIds[index]) == _msgSender()) {\\n                    require(\\n                        _notListed(_nftAddress, tokenIds[index], _msgSender()),\\n                        \\\"item already listed\\\"\\n                    );\\n\\n                    listings[_nftAddress][tokenIds[index]][\\n                        _msgSender()\\n                    ] = Listing(\\n                        1,\\n                        _pricePerItem,\\n                        _OGUNPricePerItem,\\n                        _acceptsMATIC,\\n                        _acceptsOGUN,\\n                        _startingTime\\n                    );\\n                    emit ItemListed(\\n                        _msgSender(),\\n                        _nftAddress,\\n                        tokenIds[index],\\n                        1,\\n                        _pricePerItem,\\n                        _OGUNPricePerItem,\\n                        _acceptsMATIC,\\n                        _acceptsOGUN,\\n                        _startingTime\\n                    );\\n                }\\n            }\\n        } else {\\n            revert(\\\"invalid nft address\\\");\\n        }\\n    }\\n\\n    /**\\n     @notice Method for updating platform fee\\n     @dev Only admin\\n     @param _platformFee uint16 the platform fee to set\\n     */\\n    function updatePlatformFee(uint16 _platformFee) external onlyOwner {\\n        platformFee = _platformFee;\\n        emit UpdatePlatformFee(_platformFee);\\n    }\\n\\n    /**\\n     @notice Method for updating platform fee address\\n     @dev Only admin\\n     @param _platformFeeRecipient payable address the address to sends the funds to\\n     */\\n    function updatePlatformFeeRecipient(address payable _platformFeeRecipient)\\n        external\\n        onlyOwner\\n    {\\n        feeRecipient = _platformFeeRecipient;\\n        emit UpdatePlatformFeeRecipient(_platformFeeRecipient);\\n    }\\n\\n    /**\\n     @notice Method for withdraw any leftover OGUN\\n     @dev Only admin\\n     @param destination Where the OGUN will be sent\\n     */\\n    function withdraw(address destination) external onlyOwner {\\n        uint256 balance = IERC20(OGUNToken).balanceOf(address(this));\\n        IERC20(OGUNToken).transfer(destination, balance);\\n    }\\n\\n    /**\\n     @notice Method for updating rewards rate\\n     @dev Only admin\\n     @param _rewardsRate rate to be aplyed\\n     */\\n    function setRewardsRate(uint256 _rewardsRate) public onlyOwner {\\n        rewardsRate = _rewardsRate;\\n    }\\n\\n    /**\\n     @notice Method for updating rewards limit\\n     @dev Only admin\\n     @param newLimit Hardcap for rewards\\n     */\\n    function setRewardsLimit(uint256 newLimit) external onlyOwner {\\n        rewardsLimit = newLimit;\\n    }\\n\\n    ////////////////////////////\\n    /// Internal and Private ///\\n    ////////////////////////////\\n\\n    function _getNow() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    function _isListed(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address _owner\\n    ) private view returns (bool) {\\n        Listing memory listing = listings[_nftAddress][_tokenId][_owner];\\n        return listing.quantity > 0;\\n    }\\n\\n    function _notListed(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address _owner\\n    ) private view returns (bool) {\\n        Listing memory listing = listings[_nftAddress][_tokenId][_owner];\\n        return listing.quantity == 0;\\n    }\\n\\n    function _cancelListing(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address _owner\\n    ) private {\\n        if (IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721)) {\\n            IERC721 nft = IERC721(_nftAddress);\\n            require(nft.ownerOf(_tokenId) == _owner, \\\"not owning item\\\");\\n        } else {\\n            revert(\\\"invalid nft address\\\");\\n        }\\n\\n        delete (listings[_nftAddress][_tokenId][_owner]);\\n        emit ItemCanceled(_owner, _nftAddress, _tokenId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\\n     * @param tokenId - the NFT asset queried for royalty information\\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/IEditions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\ninterface IEditions {\\n    // ============ Structs ============\\n\\n    struct Edition {\\n        // The maximum number of tokens that can be sold.\\n        uint256 quantity;\\n        // The number of tokens sold so far.\\n        uint256 numSold;\\n        // The number of tokens still available.\\n        uint256 numRemaining;\\n        // Owner of the edition.\\n        address owner;\\n        // Royalty receiver of the edition.\\n        address royaltyReceiver;\\n        // Royalty percentage of the edition.\\n        uint8 royaltyPercentage;\\n    }\\n\\n    // ============ Events ============\\n\\n    event EditionCreated(\\n        uint256 quantity,\\n        uint256 indexed editionNumber,\\n        address owner\\n    );\\n\\n    function createEdition(\\n        // The number of tokens that can be minted and sold.\\n        uint256 editionQuantity,\\n        address to,\\n        uint8 _royaltyPercentage\\n    ) external returns (uint256 retEditionNumber);\\n\\n    function getTokenIdsOfEdition(uint256 editionNumber)\\n        external\\n        view\\n        returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_OGUNToken\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_platformFee\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"}],\"name\":\"EditionCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"}],\"name\":\"EditionListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ItemCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePerItem\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"OGUNPricePerItem\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"acceptsMATIC\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"acceptsOGUN\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startingTime\",\"type\":\"uint256\"}],\"name\":\"ItemListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePerItem\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaymentOGUN\",\"type\":\"bool\"}],\"name\":\"ItemSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newOGUNPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"acceptsMATIC\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"acceptsOGUN\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startingTime\",\"type\":\"uint256\"}],\"name\":\"ItemUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"platformFee\",\"type\":\"uint16\"}],\"name\":\"UpdatePlatformFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"platformFeeRecipient\",\"type\":\"address\"}],\"name\":\"UpdatePlatformFeeRecipient\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OGUNToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isPaymentOGUN\",\"type\":\"bool\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"name\":\"cancelEditionListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"cancelListingBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"editionListings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerItem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_OGUNPricePerItem\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_acceptsMATIC\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_acceptsOGUN\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_startingTime\",\"type\":\"uint256\"}],\"name\":\"listBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftEditionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"editionNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerItem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_OGUNPricePerItem\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_acceptsMATIC\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_acceptsOGUN\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_startingTime\",\"type\":\"uint256\"}],\"name\":\"listEdition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerItem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_OGUNPricePerItem\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_acceptsMATIC\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_acceptsOGUN\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_startingTime\",\"type\":\"uint256\"}],\"name\":\"listItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerItem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"OGUNPricePerItem\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"acceptsMATIC\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"acceptsOGUN\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"startingTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setRewardsLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsRate\",\"type\":\"uint256\"}],\"name\":\"setRewardsRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newOGUNPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_acceptsMATIC\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_acceptsOGUN\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_startingTime\",\"type\":\"uint256\"}],\"name\":\"updateListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_platformFee\",\"type\":\"uint16\"}],\"name\":\"updatePlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_platformFeeRecipient\",\"type\":\"address\"}],\"name\":\"updatePlatformFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SoundchainMarketplaceEditions", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000519bed3fe32272fa8f1aecaf86dbfbd674ee703b00000000000000000000000045f1af89486aeec2da0b06340cd9cd3bd741a15c00000000000000000000000000000000000000000000000000000000000000c800000000000000000000000000000000000000000000000000000000000000c800000000000000000000000000000000000000000000003635c9adc5dea00000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}