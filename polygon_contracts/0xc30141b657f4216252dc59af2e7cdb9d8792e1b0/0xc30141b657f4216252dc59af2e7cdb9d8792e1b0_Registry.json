{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Registry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./helpers/errors.sol\\\";\\nimport \\\"./ImplBase.sol\\\";\\nimport \\\"./MiddlewareImplBase.sol\\\";\\n\\n/**\\n// @title Movr Regisrtry Contract.\\n// @notice This is the main contract that is called using fund movr.\\n// This contains all the bridge and middleware ids. \\n// RouteIds signify which bridge to be used. \\n// Middleware Id signifies which aggregator will be used for swapping if required. \\n*/\\ncontract Registry is Ownable {\\n    using SafeERC20 for IERC20;\\n    address private constant NATIVE_TOKEN_ADDRESS =\\n        address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    ///@notice RouteData stores information for a route\\n    struct RouteData {\\n        address route;\\n        bool isEnabled;\\n        bool isMiddleware;\\n    }\\n    RouteData[] public routes;\\n    modifier onlyExistingRoute(uint256 _routeId) {\\n        require(\\n            routes[_routeId].route != address(0),\\n            MovrErrors.ROUTE_NOT_FOUND\\n        );\\n        _;\\n    }\\n\\n    constructor(address _owner) Ownable() {\\n        // first route is for direct bridging\\n        routes.push(RouteData(NATIVE_TOKEN_ADDRESS, true, true));\\n        transferOwnership(_owner);\\n    }\\n\\n    // Function to receive Ether. msg.data must be empty\\n    receive() external payable {}\\n\\n    //\\n    // Events\\n    //\\n    event NewRouteAdded(\\n        uint256 routeID,\\n        address route,\\n        bool isEnabled,\\n        bool isMiddleware\\n    );\\n    event RouteDisabled(uint256 routeID);\\n    event ExecutionCompleted(\\n        uint256 middlewareID,\\n        uint256 bridgeID,\\n        uint256 inputAmount\\n    );\\n\\n    /**\\n    // @param id route id of middleware to be used\\n    // @param optionalNativeAmount is the amount of native asset that the route requires \\n    // @param inputToken token address which will be swapped to\\n    // BridgeRequest inputToken \\n    // @param data to be used by middleware\\n    */\\n    struct MiddlewareRequest {\\n        uint256 id;\\n        uint256 optionalNativeAmount;\\n        address inputToken;\\n        bytes data;\\n    }\\n\\n    /**\\n    // @param id route id of bridge to be used\\n    // @param optionalNativeAmount optinal native amount, to be used\\n    // when bridge needs native token along with ERC20    \\n    // @param inputToken token addresss which will be bridged \\n    // @param data bridgeData to be used by bridge\\n    */\\n    struct BridgeRequest {\\n        uint256 id;\\n        uint256 optionalNativeAmount;\\n        address inputToken;\\n        bytes data;\\n    }\\n\\n    /**\\n    // @param receiverAddress Recipient address to recieve funds on destination chain\\n    // @param toChainId Destination ChainId\\n    // @param amount amount to be swapped if middlewareId is 0  it will be\\n    // the amount to be bridged\\n    // @param middlewareRequest middleware Requestdata\\n    // @param bridgeRequest bridge request data\\n    */\\n    struct UserRequest {\\n        address receiverAddress;\\n        uint256 toChainId;\\n        uint256 amount;\\n        MiddlewareRequest middlewareRequest;\\n        BridgeRequest bridgeRequest;\\n    }\\n\\n    /**\\n    // @notice function responsible for calling the respective implementation \\n    // depending on the bridge to be used\\n    // If the middlewareId is 0 then no swap is required,\\n    // we can directly bridge the source token to wherever required,\\n    // else, we first call the Swap Impl Base for swapping to the required \\n    // token and then start the bridging\\n    // @dev It is required for isMiddleWare to be true for route 0 as it is a special case\\n    // @param _userRequest calldata follows the input data struct\\n    */\\n    function outboundTransferTo(UserRequest calldata _userRequest)\\n        external\\n        payable\\n    {\\n        require(_userRequest.amount != 0, MovrErrors.INVALID_AMT);\\n\\n        // make sure bridge ID is not 0\\n        require(\\n            _userRequest.bridgeRequest.id != 0,\\n            MovrErrors.INVALID_BRIDGE_ID\\n        );\\n\\n        // make sure bridge input is provided\\n        require(\\n            _userRequest.bridgeRequest.inputToken != address(0),\\n            MovrErrors.ADDRESS_0_PROVIDED\\n        );\\n\\n        // load middleware info and validate\\n        RouteData memory middlewareInfo = routes[\\n            _userRequest.middlewareRequest.id\\n        ];\\n        require(\\n            middlewareInfo.route != address(0) &&\\n                middlewareInfo.isEnabled &&\\n                middlewareInfo.isMiddleware,\\n            MovrErrors.ROUTE_NOT_ALLOWED\\n        );\\n\\n        // load bridge info and validate\\n        RouteData memory bridgeInfo = routes[_userRequest.bridgeRequest.id];\\n        require(\\n            bridgeInfo.route != address(0) &&\\n                bridgeInfo.isEnabled &&\\n                !bridgeInfo.isMiddleware,\\n            MovrErrors.ROUTE_NOT_ALLOWED\\n        );\\n\\n        emit ExecutionCompleted(\\n            _userRequest.middlewareRequest.id,\\n            _userRequest.bridgeRequest.id,\\n            _userRequest.amount\\n        );\\n\\n        // if middlewareID is 0 it means we dont want to perform a action before bridging\\n        // and directly want to move for bridging\\n        if (_userRequest.middlewareRequest.id == 0) {\\n            // perform the bridging\\n            ImplBase(bridgeInfo.route).outboundTransferTo{value: msg.value}(\\n                _userRequest.amount,\\n                msg.sender,\\n                _userRequest.receiverAddress,\\n                _userRequest.bridgeRequest.inputToken,\\n                _userRequest.toChainId,\\n                _userRequest.bridgeRequest.data\\n            );\\n            return;\\n        }\\n\\n        // we first perform an action using the middleware\\n        // we determine if the input asset is a native asset, if yes we pass\\n        // the amount as value, else we pass the optionalNativeAmount\\n        uint256 _amountOut = MiddlewareImplBase(middlewareInfo.route)\\n            .performAction{\\n            value: _userRequest.middlewareRequest.inputToken ==\\n                NATIVE_TOKEN_ADDRESS\\n                ? _userRequest.amount +\\n                    _userRequest.middlewareRequest.optionalNativeAmount\\n                : _userRequest.middlewareRequest.optionalNativeAmount\\n        }(\\n            msg.sender,\\n            _userRequest.middlewareRequest.inputToken,\\n            _userRequest.amount,\\n            address(this),\\n            _userRequest.middlewareRequest.data\\n        );\\n\\n        // we mutate this variable if the input asset to bridge Impl is NATIVE\\n        uint256 nativeInput = _userRequest.bridgeRequest.optionalNativeAmount;\\n\\n        // if the input asset is ERC20, we need to grant the bridge implementation approval\\n        if (_userRequest.bridgeRequest.inputToken != NATIVE_TOKEN_ADDRESS) {\\n            IERC20(_userRequest.bridgeRequest.inputToken).safeIncreaseAllowance(\\n                    bridgeInfo.route,\\n                    _amountOut\\n                );\\n        } else {\\n            // if the input asset is native we need to set it as value\\n            nativeInput =\\n                _amountOut +\\n                _userRequest.bridgeRequest.optionalNativeAmount;\\n        }\\n\\n        // send off to bridge\\n        ImplBase(bridgeInfo.route).outboundTransferTo{value: nativeInput}(\\n            _amountOut,\\n            address(this),\\n            _userRequest.receiverAddress,\\n            _userRequest.bridgeRequest.inputToken,\\n            _userRequest.toChainId,\\n            _userRequest.bridgeRequest.data\\n        );\\n    }\\n\\n    //\\n    // Route management functions\\n    //\\n\\n    /// @notice add routes to the registry.\\n    function addRoutes(RouteData[] calldata _routes)\\n        external\\n        onlyOwner\\n        returns (uint256[] memory)\\n    {\\n        require(_routes.length != 0, MovrErrors.EMPTY_INPUT);\\n        uint256[] memory _routeIds = new uint256[](_routes.length);\\n        for (uint256 i = 0; i < _routes.length; i++) {\\n            require(\\n                _routes[i].route != address(0),\\n                MovrErrors.ADDRESS_0_PROVIDED\\n            );\\n            routes.push(_routes[i]);\\n            _routeIds[i] = routes.length - 1;\\n            emit NewRouteAdded(\\n                i,\\n                _routes[i].route,\\n                _routes[i].isEnabled,\\n                _routes[i].isMiddleware\\n            );\\n        }\\n\\n        return _routeIds;\\n    }\\n\\n    ///@notice disables the route  if required.\\n    function disableRoute(uint256 _routeId)\\n        external\\n        onlyOwner\\n        onlyExistingRoute(_routeId)\\n    {\\n        routes[_routeId].isEnabled = false;\\n        emit RouteDisabled(_routeId);\\n    }\\n\\n    function rescueFunds(\\n        address _token,\\n        address _receiverAddress,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        IERC20(_token).safeTransfer(_receiverAddress, _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nlibrary MovrErrors {\\n    string internal constant ADDRESS_0_PROVIDED = \\\"ADDRESS_0_PROVIDED\\\";\\n    string internal constant EMPTY_INPUT = \\\"EMPTY_INPUT\\\";\\n    string internal constant LENGTH_MISMATCH = \\\"LENGTH_MISMATCH\\\";\\n    string internal constant INVALID_VALUE = \\\"INVALID_VALUE\\\";\\n    string internal constant INVALID_AMT = \\\"INVALID_AMT\\\";\\n\\n    string internal constant IMPL_NOT_FOUND = \\\"IMPL_NOT_FOUND\\\";\\n    string internal constant ROUTE_NOT_FOUND = \\\"ROUTE_NOT_FOUND\\\";\\n    string internal constant IMPL_NOT_ALLOWED = \\\"IMPL_NOT_ALLOWED\\\";\\n    string internal constant ROUTE_NOT_ALLOWED = \\\"ROUTE_NOT_ALLOWED\\\";\\n    string internal constant INVALID_CHAIN_DATA = \\\"INVALID_CHAIN_DATA\\\";\\n    string internal constant CHAIN_NOT_SUPPORTED = \\\"CHAIN_NOT_SUPPORTED\\\";\\n    string internal constant TOKEN_NOT_SUPPORTED = \\\"TOKEN_NOT_SUPPORTED\\\";\\n    string internal constant NOT_IMPLEMENTED = \\\"NOT_IMPLEMENTED\\\";\\n    string internal constant INVALID_SENDER = \\\"INVALID_SENDER\\\";\\n    string internal constant INVALID_BRIDGE_ID = \\\"INVALID_BRIDGE_ID\\\";\\n    string internal constant MIDDLEWARE_ACTION_FAILED =\\n        \\\"MIDDLEWARE_ACTION_FAILED\\\";\\n    string internal constant VALUE_SHOULD_BE_ZERO = \\\"VALUE_SHOULD_BE_ZERO\\\";\\n    string internal constant VALUE_SHOULD_NOT_BE_ZERO = \\\"VALUE_SHOULD_NOT_BE_ZERO\\\";\\n    string internal constant VALUE_NOT_ENOUGH = \\\"VALUE_NOT_ENOUGH\\\";\\n    string internal constant VALUE_NOT_EQUAL_TO_AMOUNT = \\\"VALUE_NOT_EQUAL_TO_AMOUNT\\\";\\n}\\n\"\r\n    },\r\n    \"contracts/ImplBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./helpers/errors.sol\\\";\\n\\n/**\\n@title Abstract Implementation Contract.\\n@notice All Bridge Implementation will follow this interface. \\n*/\\nabstract contract ImplBase is Ownable {\\n    using SafeERC20 for IERC20;\\n    address public registry;\\n    address public constant NATIVE_TOKEN_ADDRESS =\\n        address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n    event UpdateRegistryAddress(address indexed registryAddress);\\n\\n    constructor(address _registry) Ownable() {\\n        registry = _registry;\\n    }\\n\\n    modifier onlyRegistry() {\\n        require(msg.sender == registry, MovrErrors.INVALID_SENDER);\\n        _;\\n    }\\n\\n    function updateRegistryAddress(address newRegistry) external onlyOwner {\\n        registry = newRegistry;\\n        emit UpdateRegistryAddress(newRegistry);\\n    }\\n\\n    function rescueFunds(\\n        address token,\\n        address userAddress,\\n        uint256 amount\\n    ) external onlyOwner {\\n        IERC20(token).safeTransfer(userAddress, amount);\\n    }\\n\\n    function outboundTransferTo(\\n        uint256 _amount,\\n        address _from,\\n        address _receiverAddress,\\n        address _token,\\n        uint256 _toChainId,\\n        bytes memory _extraData\\n    ) external payable virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/MiddlewareImplBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./helpers/errors.sol\\\";\\n\\n/**\\n// @title Abstract Contract for middleware services.\\n// @notice All middleware services will follow this interface. \\n*/\\nabstract contract MiddlewareImplBase is Ownable {\\n    using SafeERC20 for IERC20;\\n    address public immutable registry;\\n\\n    /// @notice only registry address is required.\\n    constructor(address _registry) Ownable() {\\n        registry = _registry;\\n    }\\n\\n    modifier onlyRegistry {\\n        require(msg.sender == registry, MovrErrors.INVALID_SENDER);\\n        _;\\n    }\\n\\n    function performAction(\\n        address from,\\n        address fromToken,\\n        uint256 amount,\\n        address receiverAddress,\\n        bytes memory data\\n    ) external payable virtual returns (uint256);\\n\\n    function rescueFunds(\\n        address token,\\n        address userAddress,\\n        uint256 amount\\n    ) external onlyOwner {\\n        IERC20(token).safeTransfer(userAddress, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"middlewareID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bridgeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"}],\"name\":\"ExecutionCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"routeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"route\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isMiddleware\",\"type\":\"bool\"}],\"name\":\"NewRouteAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"routeID\",\"type\":\"uint256\"}],\"name\":\"RouteDisabled\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"route\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isMiddleware\",\"type\":\"bool\"}],\"internalType\":\"struct Registry.RouteData[]\",\"name\":\"_routes\",\"type\":\"tuple[]\"}],\"name\":\"addRoutes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_routeId\",\"type\":\"uint256\"}],\"name\":\"disableRoute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optionalNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Registry.MiddlewareRequest\",\"name\":\"middlewareRequest\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optionalNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Registry.BridgeRequest\",\"name\":\"bridgeRequest\",\"type\":\"tuple\"}],\"internalType\":\"struct Registry.UserRequest\",\"name\":\"_userRequest\",\"type\":\"tuple\"}],\"name\":\"outboundTransferTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiverAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"routes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"route\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isMiddleware\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Registry", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "0000000000000000000000005fd7d0d6b91cc4787bcb86ca47e0bd4ea0346d34", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}