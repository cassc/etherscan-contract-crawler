{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/trv_v3/modules/summoning/routes/SummoningRoute.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport { Base } from \\\"../../../common/Base.sol\\\";\\nimport { SummonTypes } from \\\"../types/Types.sol\\\";\\nimport { ISummoningRoute } from \\\"../interfaces/ISummoningRoute.sol\\\";\\nimport { ISummoningService } from \\\"../interfaces/ISummoningService.sol\\\";\\n\\n// Pellar + LightLink 2022\\n\\ncontract SummoningRoute is Base, ISummoningRoute {\\n  address public summoningService;\\n\\n  function bindService(address _contract) external onlyRoler(\\\"bindService\\\") {\\n    require(_contract != address(0), \\\"Must set non-zero address\\\");\\n    summoningService = _contract;\\n  }\\n\\n  function withdrawPlatformShare(address _currency, address _to) external onlyRoler(\\\"withdrawPlatformShare\\\") {\\n    ISummoningService(summoningService).withdrawPlatformShare(_currency, _to);\\n  }\\n\\n  function createSession(string memory _key) external onlyRoler(\\\"createSession\\\") {\\n    ISummoningService(summoningService).createSession(_key);\\n  }\\n\\n  function summon(\\n    bytes memory _verifySignature,\\n    bytes memory _signature,\\n    bytes memory _params\\n  ) public {\\n    require(summoningService != address(0), \\\"Non-exists service\\\");\\n    ISummoningService(summoningService).summon(_verifySignature, _signature, _params);\\n  }\\n\\n  function batchSummon(\\n    bytes[] memory _verifySignatures,\\n    bytes[] memory _signatures,\\n    bytes[] memory _params\\n  ) public {\\n    require(_params.length == _signatures.length, \\\"Input mismatch\\\");\\n    for (uint256 i = 0; i < _params.length; i++) {\\n      summon(_verifySignatures[i], _signatures[i], _params[i]);\\n    }\\n  }\\n\\n  function eligibleSummon(SummonTypes.SummonSessionInfo memory _sessionInfo) public view returns (bool, string memory) {\\n    return ISummoningService(summoningService).eligibleSummon(_sessionInfo);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/trv_v3/common/Base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// Pellar + LightLink 2022\\n\\nabstract contract Base is Ownable {\\n  // variable\\n  address public accessControlProvider = 0x3f0B50B7A270de536D5De35C11C2613284C4304e;\\n\\n  constructor() {}\\n\\n  // verified\\n  modifier onlyRoler(string memory _methodInfo) {\\n    require(_msgSender() == owner() || IAccessControl(accessControlProvider).hasRole(_msgSender(), address(this), _methodInfo), \\\"Caller does not have permission\\\");\\n    _;\\n  }\\n\\n  // verified\\n  function setAccessControlProvider(address _contract) external onlyRoler(\\\"setAccessControlProvider\\\") {\\n    accessControlProvider = _contract;\\n  }\\n}\\n\\ninterface IAccessControl {\\n  function hasRole(\\n    address _account,\\n    address _contract,\\n    string memory _methodInfo\\n  ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/trv_v3/modules/summoning/types/Types.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nlibrary SummonChampion {\\n  struct TokenInfo {\\n    string uri_name;\\n    uint256 timestamp;\\n  }\\n}\\n\\nlibrary SummonTypes {\\n  struct LineageMetadata {\\n    uint256 session_id;\\n    uint256 summon_type; // private, public, etc\\n    uint256 summoned_at;\\n    uint256 latest_summon_time;\\n  }\\n\\n  struct LineageNode {\\n    bool inited;\\n    LineageMetadata metadata;\\n    uint256[] parents;\\n    uint256 original_mum;\\n  }\\n\\n  struct ChampionInfo {\\n    // (session id => (summon_type => total_count)) // maximum summon times count in a session by summon types\\n    mapping(uint256 => mapping(uint256 => uint256)) session_summoned_count;\\n\\n    // (type => total_count) // maximum summon times count in champion lifes by summon types\\n    mapping(uint256 => uint256) total_summoned_count;\\n\\n    mapping(bytes => bytes) others; // put type here\\n  }\\n\\n  struct SessionCheckpoint {\\n    bool inited;\\n    uint256 total_champions_summoned;\\n  }\\n\\n  struct SummonSessionInfo {\\n    uint256 id;\\n    uint256 max_champions_summoned;\\n    uint256 summon_type;\\n    uint8 lineage_level;\\n    ParentSummonChampions[] parents;\\n    FixedFeeInfo fees;\\n  }\\n\\n  struct ParentSummonChampions {\\n    uint256 champion_id;\\n    address owner;\\n    uint256 summon_eligible_after_session;\\n    uint256 max_per_life;\\n    uint256 max_per_session_by_type;\\n    uint256 max_per_session;\\n  }\\n\\n  struct FixedFeeInfo {\\n    address currency;\\n    uint256 total_fee;\\n\\n    address donor_receiver;\\n    uint256 donor_amount;\\n\\n    uint256 platform_amount;\\n\\n    DynamicFeeReceiver[] dynamic_fee_receivers;\\n  }\\n\\n  struct DynamicFeeReceiver {\\n    address receiver;\\n    uint256 amount;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/trv_v3/modules/summoning/interfaces/ISummoningRoute.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport { SummonTypes } from \\\"../types/Types.sol\\\";\\n\\n// Pellar + LightLink 2022\\n\\ninterface ISummoningRoute {\\n  // bind service processing summon\\n  function bindService(address _service) external;\\n\\n  function withdrawPlatformShare(address _currency, address _to) external;\\n\\n  // summon\\n  function createSession(string memory _key) external;\\n\\n  function summon(\\n    bytes memory _verifySignature,\\n    bytes memory _signature,\\n    bytes memory _params\\n  ) external;\\n\\n  // batch summon\\n  function batchSummon(\\n    bytes[] memory _verifySignatures,\\n    bytes[] memory _signatures,\\n    bytes[] memory _params\\n  ) external;\\n\\n  function eligibleSummon(SummonTypes.SummonSessionInfo memory _sessionInfo) external view returns (bool, string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/trv_v3/modules/summoning/interfaces/ISummoningService.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport { SummonTypes } from \\\"../types/Types.sol\\\";\\n\\n// Pellar + LightLink 2022\\n\\ninterface ISummoningService {\\n  function withdrawPlatformShare(address _currency, address _to) external;\\n\\n  function createSession(string memory _key) external;\\n\\n  function summon(\\n    bytes calldata _verifySignature,\\n    bytes memory _signature,\\n    bytes memory _params\\n  ) external;\\n\\n  function eligibleSummon(SummonTypes.SummonSessionInfo memory _sessionInfo) external view returns (bool, string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accessControlProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_verifySignatures\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_params\",\"type\":\"bytes[]\"}],\"name\":\"batchSummon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"bindService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"}],\"name\":\"createSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max_champions_summoned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"summon_type\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"lineage_level\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"champion_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"summon_eligible_after_session\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max_per_life\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max_per_session_by_type\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max_per_session\",\"type\":\"uint256\"}],\"internalType\":\"struct SummonTypes.ParentSummonChampions[]\",\"name\":\"parents\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"total_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"donor_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"donor_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platform_amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct SummonTypes.DynamicFeeReceiver[]\",\"name\":\"dynamic_fee_receivers\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SummonTypes.FixedFeeInfo\",\"name\":\"fees\",\"type\":\"tuple\"}],\"internalType\":\"struct SummonTypes.SummonSessionInfo\",\"name\":\"_sessionInfo\",\"type\":\"tuple\"}],\"name\":\"eligibleSummon\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setAccessControlProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_verifySignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"summon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"summoningService\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawPlatformShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SummoningRoute", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}