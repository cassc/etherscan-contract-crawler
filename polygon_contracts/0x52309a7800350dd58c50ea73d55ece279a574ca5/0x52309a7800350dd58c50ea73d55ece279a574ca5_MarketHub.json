{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/collections/CollectionRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport {MarketAccess} from \\\"../../utils/MarketAccess.sol\\\";\\nimport {IColleCollection} from \\\"./IColleCollection.sol\\\";\\nimport {ICollectionRegistry} from \\\"./ICollectionRegistry.sol\\\";\\n\\n/// @title CollectionRegistry\\n/// @notice This contract manages the registration and unregistration of collections in the Colle system.\\ncontract CollectionRegistry is ICollectionRegistry, MarketAccess {\\n    // Mapping from collection address to registration status\\n    mapping(address => bool) internal collections;\\n\\n    /// @notice Registers a new collection.\\n    /// @dev Only accessible by Colle role.\\n    /// @param _collection The address of the collection to register.\\n    function registerCollection(address _collection) public onlyAdmin {\\n        require(!collections[_collection], \\\"Collection already registered\\\");\\n\\n        collections[_collection] = true;\\n        emit RegisteredCollection(_collection);\\n\\n        IColleCollection collection = IColleCollection(_collection);\\n        require(\\n            collection.supportsInterface(type(IColleCollection).interfaceId),\\n            \\\"Collection does not support IColleCollection\\\"\\n        );\\n        collection.register();\\n    }\\n\\n    /// @notice Unregisters an existing collection.\\n    /// @dev Only accessible by Colle role.\\n    /// @param _collection The address of the collection to unregister.\\n    function unregisterCollection(address _collection) public onlyAdmin {\\n        require(collections[_collection], \\\"Market not registered\\\");\\n\\n        collections[_collection] = false;\\n        emit UnregisteredCollection(_collection);\\n\\n        IColleCollection collection = IColleCollection(_collection);\\n        collection.unregister();\\n    }\\n\\n    /// @notice Checks if a collection is registered.\\n    /// @param _collection The address of the collection to check.\\n    /// @return true if the collection is registered, false otherwise.\\n    function isERC721Registered(address _collection) public view returns (bool) {\\n        return collections[_collection];\\n    }\\n\\n    /// @notice Returns the collection interface for a registered collection.\\n    /// @param _collection The address of the collection.\\n    /// @return The interface of the registered collection.\\n    /// @dev Reverts if the collection is not registered.\\n    function getCollection(address _collection) public view returns (IColleCollection) {\\n        require(isERC721Registered(_collection), \\\"Collection not registered\\\");\\n        return IColleCollection(_collection);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/collections/IColleCollection.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IMarketHubRegistrar} from \\\"../IMarketHubRegistrar.sol\\\";\\nimport {Signature} from \\\"../../utils/Signature.sol\\\";\\n\\n/// @title Interface for ColleCollection\\n/// @notice This interface includes the necessary methods for managing ColleCollection NFTs.\\ninterface IColleCollection is IMarketHubRegistrar, IERC721 {\\n    /**\\n     * @dev Emitted when a token is minted, we freeze the URI per OpenSea's metadata standard.\\n     */\\n    event PermanentURI(string _value, uint256 indexed _id);\\n\\n    /**\\n     * @dev Emitted when the off-chain metadata for a token has been updated.\\n     */\\n    event SecondaryMetadataIPFS(string _ipfsHash, uint256 indexed _id);\\n\\n    /// @notice Mints a new NFT.\\n    /// @param _uri The URI of the NFT's metadata.\\n    /// @param _receiver The address to receive the minted NFT.\\n    function mint(string memory _uri, address _receiver) external;\\n\\n    /// @notice Updates the sale metadata of a specific NFT.\\n    /// @param _tokenId The ID of the NFT to update.\\n    /// @param _uri The new URI of the sale metadata.\\n    function updateSaleMetadata(uint256 _tokenId, string memory _uri) external;\\n\\n    /// @notice Gets the sale metadata of a specific NFT.\\n    /// @param _tokenId The ID of the NFT to query.\\n    /// @return The URI of the sale metadata.\\n    function getSaleMetadata(uint256 _tokenId) external view returns (string memory);\\n\\n    /// @notice Checks if the sale metadata of a specific NFT is set.\\n    /// @param _tokenId The ID of the NFT to query.\\n    /// @return True if the sale metadata is set, false otherwise.\\n    function isSaleMetadataSet(uint256 _tokenId) external view returns (bool);\\n\\n    /// @notice Allows a signer to approve a transfer on their behalf using a signature.\\n    /// @param _to The address to approve.\\n    /// @param _tokenId The ID of the token to approve.\\n    /// @param _signature The signature from the approving address, the 'from', including deadline\\n    function permitApprove(address _to, uint256 _tokenId, Signature memory _signature) external;\\n\\n    /**\\n     * @notice Approves an address to transfer any tokens owned by the sender.\\n     * @param _operator The address to approve.\\n     * @param _approve Whether to approve or revoke approval\\n     * @param _signature The signature, deadline and signer from the owner of the token.\\n     */\\n    function permitSetApprovalForAll(address _operator, bool _approve, Signature memory _signature) external;\\n\\n    /// @notice Allows a signer to transfer a NFT on their behalf using a signature.\\n    /// @param _to The address to receive the token.\\n    /// @param _tokenId The ID of the token to transfer.\\n    /// @param _signature The signature, deadline and signer from the owner of the token.\\n    function permitSafeTransfer(address _to, uint256 _tokenId, Signature memory _signature) external;\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/collections/ICollectionRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport {IColleCollection} from \\\"./IColleCollection.sol\\\";\\n\\n/// @title ICollectionRegistry\\n/// @notice Interface for the CollectionRegistry contract.\\n/// @dev This interface lists all the external functions implemented in the CollectionRegistry contract.\\ninterface ICollectionRegistry {\\n    /**\\n     * @dev Emitted when a collection is registered.\\n     */\\n    event RegisteredCollection(address collection);\\n\\n    /**\\n     * @dev Emitted when a collection is unregistered.\\n     */\\n    event UnregisteredCollection(address collection);\\n\\n    /// @notice Registers a new collection.\\n    /// @param _collection The address of the collection to register.\\n    function registerCollection(address _collection) external;\\n\\n    /// @notice Unregisters an existing collection.\\n    /// @param _collection The address of the collection to unregister.\\n    function unregisterCollection(address _collection) external;\\n\\n    /// @notice Checks if a collection is registered.\\n    /// @param _collection The address of the collection to check.\\n    /// @return A boolean indicating whether the collection is registered or not.\\n    function isERC721Registered(address _collection) external view returns (bool);\\n\\n    /// @notice Returns the collection interface for a registered collection.\\n    /// @param _collection The address of the collection.\\n    /// @return The interface of the registered collection.\\n    function getCollection(address _collection) external view returns (IColleCollection);\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/currencies/BaseCurrency.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport {MarketHubRegistrar, AccessControl} from \\\"../MarketHubRegistrar.sol\\\";\\nimport {ICurrency, IERC20, IERC165} from \\\"./ICurrency.sol\\\";\\n\\n/// @title BaseCurrency\\n/// @notice This contract is an abstraction for any ERC20 token to convert any value to a USDC equivalency for market calculations.\\nabstract contract BaseCurrency is ICurrency, MarketHubRegistrar {\\n    // The ERC20 token to be used as the currency\\n    IERC20 internal immutable erc20;\\n\\n    /// @notice Constructor sets the address for the ERC20 token.\\n    /// @param _erc20 The address of the ERC20 token to be used as the currency.\\n    constructor(address _erc20) {\\n        erc20 = IERC20(_erc20);\\n    }\\n\\n    /// @notice Returns the ERC20 token that is being used as the currency.\\n    /// @return The ERC20 token being used as the currency.\\n    function getERC20() public view returns (IERC20) {\\n        return erc20;\\n    }\\n\\n    /**\\n     * @notice Checks if the contract implements an interface.\\n     * @param _interfaceId The ID of the interface.\\n     * @return True if the contract implements the interface, false otherwise.\\n     */\\n    function supportsInterface(\\n        bytes4 _interfaceId\\n    ) public view virtual override(AccessControl, IERC165) returns (bool) {\\n        return\\n            _interfaceId == type(ICurrency).interfaceId ||\\n            _interfaceId == type(IERC165).interfaceId ||\\n            AccessControl.supportsInterface(_interfaceId);\\n    }\\n\\n    /// @notice Returns the estimated value in USDC of an amount of the currency.\\n    /// @dev This function is virtual and must be implemented in child contracts.\\n    /// @param _amount The amount of currency to estimate the value of.\\n    /// @return The estimated value in USDC of the specified amount of currency.\\n    function getEstimatedUSDCValue(uint256 _amount) public view virtual returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/currencies/CurrencyRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport {BaseCurrency} from \\\"./BaseCurrency.sol\\\";\\nimport {ICurrency} from \\\"./ICurrency.sol\\\";\\nimport {MarketAccess} from \\\"../../utils/MarketAccess.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ICurrencyRegistry} from \\\"./ICurrencyRegistry.sol\\\";\\n\\n/// @title CurrencyRegistry\\n/// @notice This contract is used for registering and unregistering ERC20 tokens as base currencies.\\n/// @dev Inherits from MarketAccess for role-based access control.\\ncontract CurrencyRegistry is ICurrencyRegistry, MarketAccess {\\n    /// @notice Internal storage for registered currencies and their corresponding ERC20 tokens.\\n    mapping(address => address) internal _currenciesByERC20;\\n    mapping(address => address) internal _erc20sByCurrency;\\n\\n    /// @notice An array of registered ERC20 tokens.\\n    address[] public erc20s;\\n\\n    /// @notice Registers an ERC20 token as a base currency.\\n    /// @param _currency The address of the BaseCurrency contract associated with the ERC20 token.\\n    function registerERC20(address _currency) public onlyAdmin {\\n        BaseCurrency currency = BaseCurrency(_currency);\\n        require(currency.supportsInterface(type(ICurrency).interfaceId), \\\"Currency does not support ICurrency\\\");\\n\\n        IERC20 erc20 = currency.getERC20();\\n\\n        require(address(erc20) != address(0), \\\"ERC20 address cannot be 0\\\");\\n\\n        require(_erc20sByCurrency[_currency] == address(0), \\\"ERC20 already registered\\\");\\n        require(_currenciesByERC20[address(erc20)] == address(0), \\\"Currency already registered\\\");\\n\\n        emit RegisteredCurrency(_currency, address(erc20));\\n\\n        _currenciesByERC20[address(erc20)] = _currency;\\n        _erc20sByCurrency[_currency] = address(erc20);\\n        erc20s.push(address(erc20));\\n\\n        currency.register();\\n    }\\n\\n    /// @notice Unregisters an ERC20 token from being a base currency.\\n    /// @param _currency The address of the BaseCurrency contract associated with the ERC20 token.\\n    function unregisterERC20(address _currency) public onlyAdmin {\\n        BaseCurrency currency = BaseCurrency(_currency);\\n        IERC20 erc20 = currency.getERC20();\\n\\n        require(_currenciesByERC20[address(erc20)] != address(0), \\\"Currency is not registered\\\");\\n\\n        emit UnregisteredCurrency(_currency, address(erc20));\\n\\n        // Remove the currency from the list of registered currencies\\n        _currenciesByERC20[address(erc20)] = address(0);\\n        _erc20sByCurrency[_currency] = address(0);\\n        for (uint256 i = 0; i < erc20s.length; i++) {\\n            if (erc20s[i] == address(erc20)) {\\n                erc20s[i] = erc20s[erc20s.length - 1];\\n                erc20s.pop();\\n                break;\\n            }\\n        }\\n\\n        currency.unregister();\\n    }\\n\\n    /// @notice Retrieves the BaseCurrency contract associated with a specific ERC20 token.\\n    /// @param _erc20 The address of the ERC20 token.\\n    /// @return The BaseCurrency contract associated with the ERC20 token.\\n    function getCurrencyByERC20(address _erc20) public view returns (BaseCurrency) {\\n        return BaseCurrency(_currenciesByERC20[_erc20]);\\n    }\\n\\n    /// @notice Retrieves the ERC20 token associated with a specific BaseCurrency contract.\\n    /// @param _currency The address of the BaseCurrency contract.\\n    /// @return The ERC20 token associated with the BaseCurrency contract.\\n    function getERC20ByCurrency(address _currency) public view returns (IERC20) {\\n        return IERC20(_erc20sByCurrency[_currency]);\\n    }\\n\\n    /// @notice Checks if an ERC20 token is registered as a base currency.\\n    /// @param _erc20 The address of the ERC20 token.\\n    /// @return true if the ERC20 token is registered, false otherwise.\\n    function isERC20Registered(address _erc20) public view returns (bool) {\\n        return _currenciesByERC20[_erc20] != address(0);\\n    }\\n\\n    /// @notice Gets all registered ERC20 tokens.\\n    /// @return An array of addresses of the registered ERC20 tokens.\\n    function getERC20s() public view returns (address[] memory) {\\n        return erc20s;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/currencies/ICurrency.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/// @title ICurrency\\n/// @notice This interface represents an abstraction for any ERC20 token to convert any value to a USDC equivalency for market calculations.\\ninterface ICurrency is IERC165 {\\n    /// @notice Returns the ERC20 token that is being used as the currency.\\n    /// @return The ERC20 token being used as the currency.\\n    function getERC20() external view returns (IERC20);\\n\\n    /// @notice Returns the estimated value in USDC of an amount of the currency.\\n    /// @dev This function is virtual and must be implemented in child contracts.\\n    /// @param _amount The amount of currency to estimate the value of.\\n    /// @return The estimated value in USDC of the specified amount of currency.\\n    function getEstimatedUSDCValue(uint256 _amount) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/currencies/ICurrencyRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport {BaseCurrency} from \\\"./BaseCurrency.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title ICurrencyRegistry\\n/// @notice This is the interface for the Currency Registry contract.\\ninterface ICurrencyRegistry {\\n    /**\\n     * @dev Emitted when a currency is registered.\\n     */\\n    event RegisteredCurrency(address currency, address erc20);\\n\\n    /**\\n     * @dev Emitted when a currency is unregistered.\\n     */\\n    event UnregisteredCurrency(address currency, address erc20);\\n\\n    /// @notice Registers an ERC20 token as a base currency.\\n    /// @param _currency The address of the BaseCurrency contract associated with the ERC20 token.\\n    function registerERC20(address _currency) external;\\n\\n    /// @notice Unregisters an ERC20 token from being a base currency.\\n    /// @param _currency The address of the BaseCurrency contract associated with the ERC20 token.\\n    function unregisterERC20(address _currency) external;\\n\\n    /// @notice Retrieves the BaseCurrency contract associated with a specific ERC20 token.\\n    /// @param _erc20 The address of the ERC20 token.\\n    /// @return The BaseCurrency contract associated with the ERC20 token.\\n    function getCurrencyByERC20(address _erc20) external view returns (BaseCurrency);\\n\\n    /// @notice Retrieves the ERC20 token associated with a specific BaseCurrency contract.\\n    /// @param _currency The address of the BaseCurrency contract.\\n    /// @return The ERC20 token associated with the BaseCurrency contract.\\n    function getERC20ByCurrency(address _currency) external view returns (IERC20);\\n\\n    /// @notice Checks if an ERC20 token is registered as a base currency.\\n    /// @param _erc20 The address of the ERC20 token.\\n    /// @return true if the ERC20 token is registered, false otherwise.\\n    function isERC20Registered(address _erc20) external view returns (bool);\\n\\n    /// @notice Gets all registered ERC20 tokens.\\n    /// @return An array of addresses of the registered ERC20 tokens.\\n    function getERC20s() external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/escrow/IEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport {IMarketHubRegistrar} from \\\"../IMarketHubRegistrar.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Tax} from \\\"../taxes/Tax.sol\\\";\\nimport {Signature} from \\\"../../utils/Signature.sol\\\";\\n\\n/**\\n * @title IEscrow\\n * @notice This interface outlines the functions necessary for an escrow system in a marketplace trading ERC721 and ERC20 tokens.\\n * @dev Any contract implementing this interface can act as an escrow in the marketplace.\\n */\\ninterface IEscrow is IMarketHubRegistrar, IERC165 {\\n    /**\\n     * @dev Emitted when a sale is created.\\n     */\\n    event CreateSale(\\n        uint256 saleId,\\n        State state,\\n        address buyer,\\n        address spender,\\n        address erc20,\\n        uint256 price,\\n        bytes32 tier,\\n        address seller,\\n        address erc721,\\n        uint256 tokenId,\\n        string metadata\\n    );\\n\\n    /**\\n     * @dev Emitted when a sale's state is updated.\\n     */\\n    event UpdateSale(uint256 saleId, State newState);\\n\\n    /**\\n     * @dev Emitted when a sale's tax is updated.\\n     */\\n    event SaleTaxesUpdated(uint256 saleId, uint256 amount, uint256 countryCode, uint256 regionCode);\\n\\n    /**\\n     * @notice Updates the sales tax for a pre-pending sale.\\n     * @param _saleId The id of the sale.\\n     * @param _taxes The new taxes to collect in ERC20 tokens.\\n     */\\n    function updateSaleTaxesToCollect(uint256 _saleId, Tax memory _taxes) external;\\n\\n    /**\\n     * @dev Emitted when a royalty is paid out.\\n     */\\n    event RoyaltyPayout(uint256 saleId, address receiver, uint256 amount);\\n\\n    /**\\n     * @dev Emitted when a commission is paid out.\\n     */\\n    event CommissionPayout(uint256 saleId, address receiver, uint256 amount);\\n\\n    /**\\n     * @dev Emitted when a sale is completed and any on-chain tax are collected/to be remitted.\\n     */\\n    event TaxCollected(uint256 saleId, address receiver, uint256 taxes, uint256 country, uint256 region);\\n\\n    /**\\n     * @dev Emitted when a sale is complete.\\n     */\\n    event SaleComplete(uint256 saleId, uint256 payoutAmount);\\n\\n    /**\\n     * @dev Emitted when a sale is cancelled.\\n     */\\n    event SaleCancelled(uint256 saleId, address erc20ReturnedTo, address erc721ReturnedTo);\\n\\n    /**\\n     * @dev Emitted when the challenge window for buyers is changed.\\n     */\\n    event BuyerChallengeWindowChanged(uint256 numberOfHours);\\n\\n    /**\\n     * @dev Emitted when the funding window for a sale is changed.\\n     */\\n    event SaleFundingWindowChanged(uint256 numberOfHours);\\n\\n    /**\\n     * @notice Represents the different states a sale can be in.\\n     */\\n    enum State {\\n        AwaitingSettlement,\\n        AwaitingERC20Deposit,\\n        PendingSale,\\n        ProcessingSale,\\n        ShippingToBuyer,\\n        Received,\\n        ShippingToColleForAuthentication,\\n        ColleProcessingSale,\\n        ShippingToColleForDispute,\\n        IssueWithDelivery,\\n        IssueWithProduct,\\n        SaleCancelled,\\n        SaleSuccess\\n    }\\n\\n    /**\\n     * @notice Represents a sale.\\n     */\\n    struct Sale {\\n        uint256 id;\\n        address buyer;\\n        address spender;\\n        address erc20;\\n        uint256 price;\\n        Tax taxes;\\n        bytes32 tier;\\n        address seller;\\n        address erc721;\\n        uint256 tokenId;\\n        State state;\\n        uint256 createdTimestamp;\\n        uint256 receivedTimestamp;\\n    }\\n\\n    /**\\n     * @notice Sets the time window during which buyers can challenge a sale.\\n     * @param _hours The new challenge window in hours.\\n     */\\n    function setBuyerChallengeWindow(uint256 _hours) external;\\n\\n    /**\\n     * @notice Returns the current challenge window for buyers.\\n     * @return uint256 The challenge window in hours.\\n     */\\n    function buyerChallengeWindow() external view returns (uint256);\\n\\n    /**\\n     * @notice Sets the time window during which a sale can be funded.\\n     * Can only be called by the colle.\\n     * @param _hours The new funding window in hours.\\n     */\\n    function setSaleFundingWindow(uint256 _hours) external;\\n\\n    /**\\n     * @notice Returns the current funding window for buyers.\\n     * @return uint256 The funding window in hours.\\n     */\\n    function saleFundingWindow() external view returns (uint256);\\n\\n    /**\\n     * @notice Creates a new sale.\\n     * @param _buyer The buyer's address.\\n     * @param _spender The address spending the ERC20 tokens.\\n     * @param _erc20 The address of the ERC20 token being used as currency.\\n     * @param _price The price in ERC20 tokens.\\n     * @param _seller The seller's address.\\n     * @param _erc721 The address of the ERC721 token being sold.\\n     * @param _tokenId The id of the ERC721 token being sold.\\n     */\\n    function createSale(\\n        address _buyer,\\n        address _spender,\\n        address _erc20,\\n        uint256 _price,\\n        address _seller,\\n        address _erc721,\\n        uint256 _tokenId\\n    ) external;\\n\\n    /**\\n     * @notice Returns details of a sale.\\n     * @param _saleId The id of the sale.\\n     * @return Sale The details of the sale.\\n     */\\n    function getSale(uint256 _saleId) external view returns (Sale memory);\\n\\n    /**\\n     * @notice Checks if a particular ERC721 token is currently part of an active sale.\\n     * @param _erc721 The address of the ERC721 token.\\n     * @param _tokenId The id of the ERC721 token.\\n     * @return bool Whether the token is part of an active sale or not.\\n     */\\n    function hasActiveSale(address _erc721, uint256 _tokenId) external view returns (bool);\\n\\n    /**\\n     * @notice Updates the state of a sale.\\n     * @param _saleId The id of the sale.\\n     * @param _newState The new state of the sale.\\n     */\\n    function updateSale(uint256 _saleId, State _newState) external;\\n\\n    /**\\n     * @notice Allows a signer to permit the update of a sale's state.\\n     * @param _saleId The id of the sale.\\n     * @param _newState The new state of the sale.\\n     * @param _signature The signer's signature, deadline and signer address.\\n     */\\n    function permitUpdateSale(uint256 _saleId, State _newState, Signature memory _signature) external;\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/escrow/IEscrowRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport {IEscrow} from \\\"./IEscrow.sol\\\";\\n\\n/**\\n * @title IEscrowRegistry\\n * @notice Interface for fetching the market's Escrow contract\\n */\\ninterface IEscrowRegistry {\\n    /**\\n     * @dev Emitted when a escrow is registered.\\n     */\\n    event RegisteredEscrow(address escrow);\\n\\n    /**\\n     * @notice Returns the market's Escrow contract\\n     * @return The market's Escrow contract\\n     */\\n    function getEscrow() external view returns (IEscrow);\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/IMarketHub.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport {IMarketRegistry} from \\\"./markets/IMarketRegistry.sol\\\";\\nimport {ICurrencyRegistry} from \\\"./currencies/ICurrencyRegistry.sol\\\";\\nimport {IRoyaltyRegistry} from \\\"./royalties/IRoyaltyRegistry.sol\\\";\\nimport {IKYCRegistry} from \\\"./kycs/IKYCRegistry.sol\\\";\\nimport {IVaultRegistry} from \\\"./vaults/IVaultRegistry.sol\\\";\\nimport {IEscrowRegistry} from \\\"./escrow/IEscrowRegistry.sol\\\";\\nimport {IUpgradeGatekeeper} from \\\"./upgrade-gatekeeper/IUpgradeGatekeeper.sol\\\";\\nimport {ICollectionRegistry} from \\\"./collections/ICollectionRegistry.sol\\\";\\nimport {ITaxPolicyRegistry} from \\\"./taxes/ITaxPolicyRegistry.sol\\\";\\n\\n/**\\n * @title IMarketHub\\n * @dev The IMarketHub contract provides an interface that encompasses\\n * various other registries like Market, Currency, Royalty, KYC, Vault, Escrow, Collection\\n * and some additional functionalities specifically for managing the MarketHub.\\n */\\ninterface IMarketHub is\\n    IMarketRegistry,\\n    ICurrencyRegistry,\\n    IRoyaltyRegistry,\\n    IKYCRegistry,\\n    IVaultRegistry,\\n    IEscrowRegistry,\\n    ICollectionRegistry,\\n    ITaxPolicyRegistry\\n{\\n    /**\\n     * @dev Emitted when a upgradeGatekeeper is registered.\\n     */\\n    event RegisteredUpgradeGatekeeper(address upgradeGatekeeper);\\n\\n    /**\\n     * @dev Emitted when the minimum price is changed.\\n     */\\n    event MinimumPriceChanged(uint256 _minUSDCPrice);\\n\\n    /**\\n     * @dev Notifies that a particular sale for a ERC721 has closed (i.e. successfully sold, fault/not as described, or lost/damaged in shipment)\\n     * @param _saleId The id of the sale that has closed.\\n     */\\n    function notifySaleClosed(uint256 _saleId) external;\\n\\n    /**\\n     * @dev Sets the minimum price in USDC for an asset.\\n     * @param _minUSDCPrice Minimum price in USDC.\\n     */\\n    function setMinUSDCPrice(uint256 _minUSDCPrice) external;\\n\\n    /**\\n     * @dev Returns the current minimum price in USDC for an asset.\\n     * @return Minimum price in USDC.\\n     */\\n    function getMinUSDCPrice() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the address of the Upgrade Gatekeeper contract.\\n     * @return Address of the Upgrade Gatekeeper.\\n     */\\n    function getUpgradeGatekeeper() external view returns (IUpgradeGatekeeper);\\n\\n    /**\\n     * @dev Checks if new sales are allowed in the market.\\n     * @return Boolean value representing if new sales are allowed.\\n     */\\n    function allowNewSales() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/IMarketHubRegistrar.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\n/**\\n * @title IMarketHubRegistrar\\n * @dev This contract defines the interface for registering and unregistering to the MarketHub.\\n */\\ninterface IMarketHubRegistrar {\\n    /**\\n     * @dev Emitted when a marketHub is registered.\\n     */\\n    event RegisteredMarketHub(address marketHub);\\n\\n    /**\\n     * @dev Emitted when a marketHub is registered.\\n     */\\n    event UnregisteredMarketHub(address marketHub);\\n\\n    /**\\n     * @dev Register the calling contract to the MarketHub.\\n     * Only contracts that meet certain criteria may successfully register.\\n     */\\n    function register() external;\\n\\n    /**\\n     * @dev Unregister the calling contract from the MarketHub.\\n     * Only contracts that are currently registered can successfully unregister.\\n     */\\n    function unregister() external;\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/kycs/Account.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nenum AccountStatus {\\n    ACTIVE,\\n    HAULTED,\\n    BANNED\\n}\\n\\nstruct Account {\\n    address account;\\n    bytes32 tier; // e.g. keccak(\\\"Black\\\"), keccak(\\\"Gold\\\"), keccak(\\\"Platinum\\\"), keccak(\\\"Green\\\")\\n    AccountStatus status;\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/kycs/IKYCRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport {Account, AccountStatus} from \\\"./Account.sol\\\";\\n\\n/// @title KYC Registry interface\\n/// @dev This interface includes all the functions to manage KYC verified accounts.\\ninterface IKYCRegistry {\\n    /**\\n     * @dev Emitted when a account is registered.\\n     */\\n    event RegisteredAccount(address account, bytes32 tier);\\n\\n    /**\\n     * @dev Emitted when a account's tier is updated\\n     */\\n    event UpdatedAccountTier(address account, bytes32 tier);\\n\\n    /**\\n     * @dev Emitted when a account's status is updated\\n     */\\n    event UpdatedAccountStatus(address account, AccountStatus status);\\n\\n    /// @notice Register a new account for KYC process\\n    /// @dev Register a new account and associate it with a tier\\n    /// @param _account The address of the account to register\\n    /// @param _tier The tier level of the account\\n    function registerAccount(address _account, bytes32 _tier) external;\\n\\n    /// @notice Update the tier level of an existing account\\n    /// @dev Updates the tier level of a registered account\\n    /// @param _account The address of the account to update\\n    /// @param _tier The new tier level of the account\\n    function updateTier(address _account, bytes32 _tier) external;\\n\\n    /// @notice Temporarily disable an account\\n    /// @dev Temporarily haults an account\\n    /// @param _account The address of the account to hault\\n    function haultAccount(address _account) external;\\n\\n    /// @notice Reactivate a temporarily disabled account\\n    /// @dev Unhaults a haulted account\\n    /// @param _account The address of the account to unhault\\n    function unhaultAccount(address _account) external;\\n\\n    /// @notice Permanently ban an account\\n    /// @dev Bans an account from the system\\n    /// @param _account The address of the account to ban\\n    function banAccount(address _account) external;\\n\\n    /// @notice Unban a previously banned account\\n    /// @dev Unbans a banned account\\n    /// @param _account The address of the account to unban\\n    function unbanAccount(address _account) external;\\n\\n    /// @notice Get the details of an account\\n    /// @dev Fetches the Account details for the given account address\\n    /// @param _account The address of the account\\n    /// @return The Account struct containing account details\\n    function getAccount(address _account) external view returns (Account memory);\\n\\n    /// @notice Checks if an account is registered\\n    /// @dev Checks the registry if an account address is registered\\n    /// @param _account The address of the account\\n    /// @return A boolean value indicating if the account is registered\\n    function isAccountRegistered(address _account) external view returns (bool);\\n\\n    /// @notice Checks if an account is active\\n    /// @dev Checks the status of an account if it is active\\n    /// @param _account The address of the account\\n    /// @return A boolean value indicating if the account is active\\n    function isAccountActive(address _account) external view returns (bool);\\n\\n    /// @notice Checks if an account is haulted\\n    /// @dev Checks the status of an account if it is haulted\\n    /// @param _account The address of the account\\n    /// @return A boolean value indicating if the account is haulted\\n    function isAccountHaulted(address _account) external view returns (bool);\\n\\n    /// @notice Checks if an account is banned\\n    /// @dev Checks the status of an account if it is banned\\n    /// @param _account The address of the account\\n    /// @return A boolean value indicating if the account is banned\\n    function isAccountBanned(address _account) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/kycs/KYCRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport {Account, AccountStatus} from \\\"./Account.sol\\\";\\nimport {MarketAccess} from \\\"../../utils/MarketAccess.sol\\\";\\nimport {IKYCRegistry} from \\\"./IKYCRegistry.sol\\\";\\n\\n/// @title KYC Registry contract\\n/// @dev This contract includes all the functions to manage KYC verified accounts.\\ncontract KYCRegistry is IKYCRegistry, MarketAccess {\\n    mapping(address => Account) internal _accounts;\\n\\n    /// @notice Register a new account for KYC process\\n    /// @dev Register a new account and associate it with a tier, country and region\\n    /// @param _account The address of the account to register\\n    /// @param _tier The tier level of the account\\n    function registerAccount(address _account, bytes32 _tier) public override onlyRelayer {\\n        require(_accounts[_account].account == address(0), \\\"Account already registered\\\");\\n\\n        Account storage account = _accounts[_account];\\n        account.account = _account;\\n        account.tier = _tier;\\n        account.status = AccountStatus.ACTIVE;\\n\\n        emit RegisteredAccount(_account, _tier);\\n    }\\n\\n    /// @notice Update the tier level of an existing account\\n    /// @dev Updates the tier level of a registered account\\n    /// @param _account The address of the account to update\\n    /// @param _tier The new tier level of the account\\n    function updateTier(address _account, bytes32 _tier) public override onlyRelayer {\\n        require(_accounts[_account].account != address(0), \\\"Account not registered\\\");\\n\\n        Account storage account = _accounts[_account];\\n        account.tier = _tier;\\n\\n        emit UpdatedAccountTier(_account, _tier);\\n    }\\n\\n    /// @notice Temporarily disable an account\\n    /// @dev Temporarily haults an account\\n    /// @param _account The address of the account to hault\\n    function haultAccount(address _account) public override onlyRelayer {\\n        require(_accounts[_account].account != address(0), \\\"Account not registered\\\");\\n        require(_accounts[_account].status == AccountStatus.ACTIVE, \\\"Account not active\\\");\\n\\n        Account storage account = _accounts[_account];\\n        account.status = AccountStatus.HAULTED;\\n\\n        emit UpdatedAccountStatus(_account, AccountStatus.HAULTED);\\n    }\\n\\n    /// @notice Reactivate a temporarily disabled account\\n    /// @dev Unhaults a haulted account\\n    /// @param _account The address of the account to unhault\\n    function unhaultAccount(address _account) public override onlyRelayer {\\n        require(_accounts[_account].account != address(0), \\\"Account not registered\\\");\\n        require(_accounts[_account].status == AccountStatus.HAULTED, \\\"Account not haulted\\\");\\n\\n        Account storage account = _accounts[_account];\\n        account.status = AccountStatus.ACTIVE;\\n\\n        emit UpdatedAccountStatus(_account, AccountStatus.ACTIVE);\\n    }\\n\\n    /// @notice Permanently ban an account\\n    /// @dev Bans an account from the system\\n    /// @param _account The address of the account to ban\\n    function banAccount(address _account) public override onlyRelayer {\\n        require(_accounts[_account].account != address(0), \\\"Account not registered\\\");\\n        require(_accounts[_account].status == AccountStatus.HAULTED, \\\"Account not haulted\\\");\\n\\n        Account storage account = _accounts[_account];\\n        account.status = AccountStatus.BANNED;\\n\\n        emit UpdatedAccountStatus(_account, AccountStatus.BANNED);\\n    }\\n\\n    /// @notice Unban a previously banned account\\n    /// @dev Unbans a banned account\\n    /// @param _account The address of the account to unban\\n    function unbanAccount(address _account) public override onlyRelayer {\\n        require(_accounts[_account].account != address(0), \\\"Account not registered\\\");\\n        require(_accounts[_account].status == AccountStatus.BANNED, \\\"Account not banned\\\");\\n\\n        Account storage account = _accounts[_account];\\n        account.status = AccountStatus.HAULTED;\\n\\n        emit UpdatedAccountStatus(_account, AccountStatus.HAULTED);\\n    }\\n\\n    /// @notice Get the details of an account\\n    /// @dev Fetches the Account details for the given account address\\n    /// @param _account The address of the account\\n    /// @return The Account struct containing account details\\n    function getAccount(address _account) public view override returns (Account memory) {\\n        return _accounts[_account];\\n    }\\n\\n    /// @notice Checks if an account is registered\\n    /// @dev Checks the registry if an account address is registered\\n    /// @param _account The address of the account\\n    /// @return A boolean value indicating if the account is registered\\n    function isAccountRegistered(address _account) public view override returns (bool) {\\n        return _accounts[_account].account != address(0);\\n    }\\n\\n    /// @notice Checks if an account is active\\n    /// @dev Checks the status of an account if it is active\\n    /// @param _account The address of the account\\n    /// @return A boolean value indicating if the account is active\\n    function isAccountActive(address _account) public view override returns (bool) {\\n        return _accounts[_account].account != address(0) && _accounts[_account].status == AccountStatus.ACTIVE;\\n    }\\n\\n    /// @notice Checks if an account is haulted\\n    /// @dev Checks the status of an account if it is haulted\\n    /// @param _account The address of the account\\n    /// @return A boolean value indicating if the account is haulted\\n    function isAccountHaulted(address _account) public view override returns (bool) {\\n        return _accounts[_account].status == AccountStatus.HAULTED;\\n    }\\n\\n    /// @notice Checks if an account is banned\\n    /// @dev Checks the status of an account if it is banned\\n    /// @param _account The address of the account\\n    /// @return A boolean value indicating if the account is banned\\n    function isAccountBanned(address _account) public view override returns (bool) {\\n        return _accounts[_account].status == AccountStatus.BANNED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/MarketHub.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport {MarketRegistry} from \\\"./markets/MarketRegistry.sol\\\";\\nimport {IMarket} from \\\"./markets/IMarket.sol\\\";\\nimport {CurrencyRegistry} from \\\"./currencies/CurrencyRegistry.sol\\\";\\nimport {RoyaltyRegistry} from \\\"./royalties/RoyaltyRegistry.sol\\\";\\nimport {IEscrow} from \\\"./escrow/IEscrow.sol\\\";\\nimport {IVault} from \\\"./vaults/IVault.sol\\\";\\nimport {KYCRegistry} from \\\"./kycs/KYCRegistry.sol\\\";\\nimport {CollectionRegistry} from \\\"./collections/CollectionRegistry.sol\\\";\\nimport {TaxPolicyRegistry} from \\\"./taxes/TaxPolicyRegistry.sol\\\";\\nimport {SignatureValidator} from \\\"../utils/SignatureValidator.sol\\\";\\nimport {IUpgradeGatekeeper} from \\\"./upgrade-gatekeeper/IUpgradeGatekeeper.sol\\\";\\nimport {IMarketHub} from \\\"./IMarketHub.sol\\\";\\n\\n/**\\n * @title MarketHub\\n * @dev The contract implements the functionality of the market hub,\\n * which includes multiple registries, escrow, vault, and other functionalities.\\n */\\ncontract MarketHub is\\n    IMarketHub,\\n    MarketRegistry,\\n    CurrencyRegistry,\\n    RoyaltyRegistry,\\n    KYCRegistry,\\n    CollectionRegistry,\\n    TaxPolicyRegistry,\\n    SignatureValidator,\\n    Pausable\\n{\\n    IUpgradeGatekeeper private immutable upgradeGatekeeper;\\n    IEscrow private immutable escrow;\\n    IVault private immutable vault;\\n\\n    uint256 private minUSDCPrice;\\n\\n    /**\\n     * @dev The constructor initializes the contract by setting the necessary parameters and registering the contract with Escrow and Vault.\\n     * @param _upgradeGatekeeper The address of the upgrade gatekeeper.\\n     * @param _escrow The address of the escrow.\\n     * @param _vault The address of the vault.\\n     */\\n    constructor(address _upgradeGatekeeper, address _escrow, address _vault) {\\n        __SignatureValidator_init(\\\"Colle Marketplace\\\", \\\"v0.1\\\");\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n        minUSDCPrice = 1e6;\\n\\n        emit MinimumPriceChanged(minUSDCPrice);\\n        emit RegisteredUpgradeGatekeeper(_upgradeGatekeeper);\\n        emit RegisteredEscrow(_escrow);\\n        emit RegisteredVault(_vault);\\n\\n        upgradeGatekeeper = IUpgradeGatekeeper(_upgradeGatekeeper);\\n        require(\\n            upgradeGatekeeper.supportsInterface(type(IUpgradeGatekeeper).interfaceId),\\n            \\\"UpgradeGatekeeper does not support IUpgradeGatekeeper interface\\\"\\n        );\\n\\n        escrow = IEscrow(_escrow);\\n        require(escrow.supportsInterface(type(IEscrow).interfaceId), \\\"Escrow does not support IEscrow interface\\\");\\n        escrow.register();\\n\\n        vault = IVault(_vault);\\n        require(vault.supportsInterface(type(IVault).interfaceId), \\\"Vault does not support IVault interface\\\");\\n        vault.register();\\n    }\\n\\n    /**\\n     * @dev Notifies that a particular sale for a ERC721 has closed (i.e. successfully sold, fault/not as described, or lost/damaged in shipment)\\n     * @param _saleId The id of the sale that has closed.\\n     */\\n    function notifySaleClosed(uint256 _saleId) public {\\n        require(msg.sender == address(getEscrow()), \\\"Only escrow can call this function\\\");\\n        bytes32[] memory marketNames = getMarketNames();\\n        for (uint256 i = 0; i < marketNames.length; ++i) {\\n            IMarket market = IMarket(getMarket(marketNames[i]));\\n            market.handleSaleClosed(_saleId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to set the minimum USDC price.\\n     * @param _minUSDCPrice The minimum USDC price.\\n     */\\n    function setMinUSDCPrice(uint256 _minUSDCPrice) public onlyAdmin {\\n        minUSDCPrice = _minUSDCPrice;\\n\\n        emit MinimumPriceChanged(minUSDCPrice);\\n    }\\n\\n    /**\\n     * @dev Function to get the minimum USDC price.\\n     * @return The minimum USDC price.\\n     */\\n    function getMinUSDCPrice() public view returns (uint256) {\\n        return minUSDCPrice;\\n    }\\n\\n    /**\\n     * @dev Function to get the upgrade gatekeeper.\\n     * @return The address of the upgrade gatekeeper.\\n     */\\n    function getUpgradeGatekeeper() public view returns (IUpgradeGatekeeper) {\\n        return upgradeGatekeeper;\\n    }\\n\\n    /**\\n     * @dev Function to get the escrow.\\n     * @return The address of the escrow.\\n     */\\n    function getEscrow() public view returns (IEscrow) {\\n        return escrow;\\n    }\\n\\n    /**\\n     * @dev Function to get the vault.\\n     * @return The address of the vault.\\n     */\\n    function getVault() public view returns (IVault) {\\n        return vault;\\n    }\\n\\n    /**\\n     * @dev Function to pause new sales.\\n     */\\n    function pauseNewSales() public onlyAdmin {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Function to unpause new sales.\\n     */\\n    function unpauseNewSales() public onlyAdmin {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev Function to check if new sales are allowed.\\n     * @return A boolean indicating whether new sales are allowed.\\n     */\\n    function allowNewSales() public view override returns (bool) {\\n        return !paused();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/MarketHubRegistrar.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport {IMarketHub} from \\\"./IMarketHub.sol\\\";\\nimport {MarketAccess, AccessControl} from \\\"../utils/MarketAccess.sol\\\";\\nimport {IMarketHubRegistrar} from \\\"./IMarketHubRegistrar.sol\\\";\\n\\n/**\\n * @title MarketHubRegistrar\\n * @dev This contract provides the functionality to register and unregister to the MarketHub.\\n * Contracts that inherit from this contract can be registered and unregistered from the MarketHub.\\n */\\ncontract MarketHubRegistrar is IMarketHubRegistrar, MarketAccess {\\n    // The instance of the MarketHub that the contract is registered to\\n    IMarketHub public marketHub;\\n\\n    /**\\n     * @dev Modifier to allow only the MarketHub contract to perform certain actions.\\n     */\\n    modifier onlyMarketHub() {\\n        require(msg.sender == address(marketHub), \\\"Only MarketHub can call this function\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Registers the calling contract to the MarketHub.\\n     * Reverts if the contract is already registered.\\n     */\\n    function register() public virtual {\\n        require(address(marketHub) == address(0), \\\"Market already registered\\\");\\n        emit RegisteredMarketHub(msg.sender);\\n        marketHub = IMarketHub(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Unregisters the calling contract from the MarketHub.\\n     * Reverts if the contract is not registered.\\n     */\\n    function unregister() public virtual onlyMarketHub {\\n        emit UnregisteredMarketHub(address(marketHub));\\n        marketHub = IMarketHub(address(0));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/markets/IMarket.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IMarketHubRegistrar} from \\\"../IMarketHubRegistrar.sol\\\";\\n\\n/// @title Market Interface\\n/// @dev Interface for the functionality of a market contract\\ninterface IMarket is IMarketHubRegistrar, IERC165 {\\n    /**\\n     * @notice Handles when a token is no longer available\\n     * @dev Notifies that a particular sale for a ERC721 has closed (i.e. successfully sold, fault/not as described, or lost/damaged in shipment)\\n     * @param _saleId The id of the sale that has closed.\\n     */\\n    function handleSaleClosed(uint256 _saleId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/markets/IMarketRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport {IMarket} from \\\"./IMarket.sol\\\";\\n\\n/// @title Market Registry interface\\n/// @dev An interface that defines the methods for the Market Registry\\ninterface IMarketRegistry {\\n    /**\\n     * @dev Emitted when a market is registered.\\n     */\\n    event RegisteredMarket(address market, bytes32 name);\\n\\n    /**\\n     * @dev Emitted when a market is unregistered.\\n     */\\n    event UnregisteredMarket(address market, bytes32 name);\\n\\n    /// @notice Registers a new market\\n    /// @dev Adds the market to the registry\\n    /// @param _marketAddress The address of the market to register\\n    /// @param _marketName The name of the market\\n    function registerMarket(address _marketAddress, bytes32 _marketName) external;\\n\\n    /// @notice Unregisters a market\\n    /// @dev Removes the market from the registry\\n    /// @param _marketAddress The address of the market to unregister\\n    /// @param _marketName The name of the market\\n    function unregisterMarket(address _marketAddress, bytes32 _marketName) external;\\n\\n    /// @notice Retrieves the address of a market\\n    /// @dev Finds the market in the registry by its name\\n    /// @param _marketName The name of the market\\n    /// @return The address of the market\\n    function getMarket(bytes32 _marketName) external view returns (address);\\n\\n    /// @notice Retrieves the names of all markets\\n    /// @dev Gets a list of all market names in the registry\\n    /// @return An array of market names\\n    function getMarketNames() external view returns (bytes32[] memory);\\n\\n    /// @notice Checks if an address is a registered market\\n    /// @dev Looks up if a market is in the registry by its address\\n    /// @param _marketAddress The address of the market\\n    /// @return A boolean indicating if the market is registered\\n    function isMarket(address _marketAddress) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/markets/MarketRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport {IMarket} from \\\"./IMarket.sol\\\";\\nimport {MarketAccess} from \\\"../../utils/MarketAccess.sol\\\";\\nimport {IMarketRegistry} from \\\"./IMarketRegistry.sol\\\";\\n\\n/// @title Market Registry Contract\\n/// @dev The contract manages the registration and de-registration of markets, provides info about registered markets\\ncontract MarketRegistry is IMarketRegistry, MarketAccess {\\n    bytes32 public constant MARKET_ROLE = keccak256(\\\"MARKET_ROLE\\\");\\n\\n    /// @dev A mapping that relates a market name to its contract address.\\n    mapping(bytes32 => address) internal _markets;\\n\\n    /// @dev A dynamic array that stores the names of all registered markets.\\n    bytes32[] internal _marketNames;\\n\\n    /// @notice Register a new market\\n    /// @dev The function assigns a market role to the market, adds the market to the markets mapping and stores the market name\\n    /// @param _marketAddress The address of the market contract\\n    /// @param _marketName The name of the market\\n    function registerMarket(address _marketAddress, bytes32 _marketName) public onlyAdmin {\\n        require(_markets[_marketName] == address(0), \\\"Market already registered\\\");\\n\\n        emit RegisteredMarket(_marketAddress, _marketName);\\n\\n        IMarket market = IMarket(_marketAddress);\\n        require(market.supportsInterface(type(IMarket).interfaceId), \\\"Market does not support IMarket\\\");\\n\\n        _grantRole(MARKET_ROLE, _marketAddress);\\n        _markets[_marketName] = _marketAddress;\\n        _marketNames.push(_marketName);\\n\\n        market.register();\\n    }\\n\\n    /// @notice Unregister an existing market\\n    /// @dev The function removes a market role from the market, deletes the market from the markets mapping and removes the market name\\n    /// @param _marketAddress The address of the market contract\\n    /// @param _marketName The name of the market\\n    function unregisterMarket(address _marketAddress, bytes32 _marketName) public onlyAdmin {\\n        require(_markets[_marketName] == _marketAddress, \\\"Market not registered\\\");\\n\\n        emit UnregisteredMarket(_marketAddress, _marketName);\\n\\n        IMarket market = IMarket(_marketAddress);\\n\\n        _revokeRole(MARKET_ROLE, _marketAddress);\\n        _markets[_marketName] = address(0);\\n\\n        // Remove the market name from _marketNames\\n        for (uint256 i = 0; i < _marketNames.length; i++) {\\n            if (_marketNames[i] == _marketName) {\\n                // Swap the found element with the last element\\n                _marketNames[i] = _marketNames[_marketNames.length - 1];\\n                _marketNames.pop(); // remove the last element\\n                break;\\n            }\\n        }\\n\\n        market.unregister();\\n    }\\n\\n    /// @notice Fetch the contract address of a registered market\\n    /// @dev Returns the contract address of a market given its name\\n    /// @param _marketName The name of the market\\n    /// @return The contract address of the market\\n    function getMarket(bytes32 _marketName) public view returns (address) {\\n        return _markets[_marketName];\\n    }\\n\\n    /// @notice Fetch the names of all registered markets\\n    /// @dev Returns a dynamic array that includes the names of all registered markets\\n    /// @return An array of names of all registered markets\\n    function getMarketNames() public view returns (bytes32[] memory) {\\n        return _marketNames;\\n    }\\n\\n    /// @notice Check whether a contract is a registered market\\n    /// @dev Checks whether a contract has been assigned a market role\\n    /// @param _marketAddress The address of the market contract\\n    /// @return A boolean value indicating whether the contract is a registered market\\n    function isMarket(address _marketAddress) public view returns (bool) {\\n        return hasRole(MARKET_ROLE, _marketAddress);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/royalties/BaseRoyalty.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport {MarketHubRegistrar, AccessControl} from \\\"../MarketHubRegistrar.sol\\\";\\nimport {IRoyalty, IERC165} from \\\"./IRoyalty.sol\\\";\\n\\n/**\\n * @title BaseRoyalty\\n * @dev Abstract contract for managing royalties. This contract provides the basis for creating\\n * custom royalties models by enabling the derivation of subclasses.\\n */\\nabstract contract BaseRoyalty is IRoyalty, MarketHubRegistrar {\\n    /**\\n     * @dev Calculates the basis points for the royalty pool\\n     * @param _erc20 The address of the ERC20 token\\n     * @param _totalAmount The total amount of tokens\\n     * @return royaltyPoolBasisPoints The calculated basis points for the royalty pool\\n     */\\n    function getRoyaltyPoolBasisPoints(\\n        address _erc20,\\n        uint256 _totalAmount\\n    ) external view virtual returns (uint256 royaltyPoolBasisPoints);\\n\\n    /**\\n     * @dev Calculates the commission basis points\\n     * @param _erc20 The address of the ERC20 token\\n     * @param _totalAmount The total amount of tokens\\n     * @return commissionBasisPoints The calculated commission basis points\\n     */\\n    function getCommissionBasisPoints(\\n        address _erc20,\\n        uint256 _totalAmount\\n    ) external view virtual returns (uint256 commissionBasisPoints);\\n\\n    /**\\n     * @dev Calculates the royalty and commission amounts\\n     * @param _erc20 The address of the ERC20 token\\n     * @param _totalAmount The total amount of tokens\\n     * @return _royaltyPoolAmount The calculated amount for the royalty pool\\n     * @return _comissionAmount The calculated commission amount\\n     */\\n    function getRoyaltyBreakdown(\\n        address _erc20,\\n        uint256 _totalAmount\\n    ) public view returns (uint256 _royaltyPoolAmount, uint256 _comissionAmount) {\\n        uint256 royaltyPoolBasisPoints = this.getRoyaltyPoolBasisPoints(_erc20, _totalAmount);\\n        uint256 commissionBasisPoints = this.getCommissionBasisPoints(_erc20, _totalAmount);\\n\\n        // We never intend to come close to these numbers\\n        // but we needed to guard to ensure basis points never exceed 100%\\n        // If the guard is required, we might as well make it a reasonable-ish number\\n        // rather than just guard that its under 100% fees\\n        require(royaltyPoolBasisPoints <= 1000, \\\"Royalty pool basis points cannot be greater than 10%\\\");\\n        require(commissionBasisPoints <= 2500, \\\"Commission basis points cannot be greater than 25%\\\");\\n\\n        _royaltyPoolAmount = (_totalAmount * royaltyPoolBasisPoints) / 10000;\\n        _comissionAmount = (_totalAmount * commissionBasisPoints) / 10000;\\n    }\\n\\n    /**\\n     * @notice Checks if the contract implements an interface.\\n     * @param _interfaceId The ID of the interface.\\n     * @return True if the contract implements the interface, false otherwise.\\n     */\\n    function supportsInterface(\\n        bytes4 _interfaceId\\n    ) public view virtual override(AccessControl, IERC165) returns (bool) {\\n        return\\n            _interfaceId == type(IRoyalty).interfaceId ||\\n            _interfaceId == type(IERC165).interfaceId ||\\n            AccessControl.supportsInterface(_interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/royalties/IRoyalty.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title IRoyalty\\n * @dev Interface for managing royalties. This interface provides the basis for creating\\n * custom royalties models by enabling the derivation of subclasses.\\n */\\ninterface IRoyalty is IERC165 {\\n    /**\\n     * @dev Calculates the basis points for the royalty pool\\n     * @param _erc20 The address of the ERC20 token\\n     * @param _totalAmount The total amount of tokens\\n     * @return royaltyPoolBasisPoints The calculated basis points for the royalty pool\\n     */\\n    function getRoyaltyPoolBasisPoints(\\n        address _erc20,\\n        uint256 _totalAmount\\n    ) external view returns (uint256 royaltyPoolBasisPoints);\\n\\n    /**\\n     * @dev Calculates the commission basis points\\n     * @param _erc20 The address of the ERC20 token\\n     * @param _totalAmount The total amount of tokens\\n     * @return commissionBasisPoints The calculated commission basis points\\n     */\\n    function getCommissionBasisPoints(\\n        address _erc20,\\n        uint256 _totalAmount\\n    ) external view returns (uint256 commissionBasisPoints);\\n\\n    /**\\n     * @dev Calculates the royalty and commission amounts\\n     * @param _erc20 The address of the ERC20 token\\n     * @param _totalAmount The total amount of tokens\\n     * @return _royaltyPoolAmount The calculated amount for the royalty pool\\n     * @return _comissionAmount The calculated commission amount\\n     */\\n    function getRoyaltyBreakdown(\\n        address _erc20,\\n        uint256 _totalAmount\\n    ) external view returns (uint256 _royaltyPoolAmount, uint256 _comissionAmount);\\n\\n    /**\\n     * @dev Determines whether a product sold through this royalty tier requires manual authentication or not\\n     * @return True if the product requires manual authentication, false otherwise\\n     */\\n    function requiresManualAuthentication() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/royalties/IRoyaltyPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IMarketHubRegistrar} from \\\"../IMarketHubRegistrar.sol\\\";\\n\\n/**\\n * @title IRoyaltyPool\\n * @dev Interface for managing a pool of previous owners to pay royalties to. The pool includes an initial owner and recent owners.\\n */\\ninterface IRoyaltyPool is IMarketHubRegistrar, IERC165 {\\n    /**\\n     * @notice Emitted when the weight initial owners get in the pool is updated\\n     */\\n    event InitialOwnerWeight(uint weight);\\n\\n    /**\\n     * @notice Emitted when the initial owner or recent owners updates for a token\\n     */\\n    event PoolUpdated(address indexed _erc721, uint256 indexed _tokenId, address initialOwner, address[4] recentOwners);\\n\\n    /**\\n     * @dev Set initial owner's weight\\n     * @param _weight New weight to set for initial owner\\n     */\\n    function setInitialOwnerWeight(uint _weight) external;\\n\\n    /**\\n     * @dev Tracks a new owner of a token\\n     * @param _erc721 The address of the token\\n     * @param _tokenId The ID of the token\\n     * @param _owner The address of the new owner\\n     */\\n    function trackNewOwner(address _erc721, uint256 _tokenId, address _owner) external;\\n\\n    /**\\n     * @dev Returns the weight of the initial owner\\n     */\\n    function getInitialOwnerWeight() external view returns (uint);\\n\\n    /**\\n     * @dev Returns the initial owner of a given token\\n     * @param _erc721 The address of the token\\n     * @param _tokenId The ID of the token\\n     */\\n    function getInitialOwner(address _erc721, uint256 _tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Returns the recent owners of a given token\\n     * @param _erc721 The address of the token\\n     * @param _tokenId The ID of the token\\n     */\\n    function getRecentOwners(address _erc721, uint256 _tokenId) external view returns (address[4] memory);\\n\\n    /**\\n     * @dev Returns the total pool shares for a given token\\n     * @param _erc721 The address of the token\\n     * @param _tokenId The ID of the token\\n     */\\n    function totalPoolShares(address _erc721, uint256 _tokenId) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/royalties/IRoyaltyRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport {BaseRoyalty} from \\\"./BaseRoyalty.sol\\\";\\nimport {IRoyaltyPool} from \\\"./IRoyaltyPool.sol\\\";\\n\\n/**\\n * @title IRoyaltyRegistry\\n * @dev This interface describes the functions exposed by the royalty registry.\\n */\\ninterface IRoyaltyRegistry {\\n    /**\\n     * @dev Emitted when a royalty is registered.\\n     */\\n    event RegisteredRoyalty(address royalty, bytes32 accountTier);\\n\\n    /**\\n     * @dev Emitted when a royalty is unregistered.\\n     */\\n    event UnregisteredRoyalty(address royalty, bytes32 accountTier);\\n\\n    /**\\n     * @dev Emitted when a royalty pool is registered.\\n     */\\n    event RegisteredRoyaltyPool(address royaltyPool);\\n\\n    /**\\n     * @dev Emitted when the comission payout address has been updated.\\n     */\\n    event UpdatedColleComissions(address colleComission);\\n\\n    /**\\n     * @dev Register a new royalty.\\n     * @param _accountTier The tier of the account for which to register the royalty.\\n     * @param _royalty The address of the royalty contract.\\n     */\\n    function registerRoyalty(bytes32 _accountTier, address _royalty) external;\\n\\n    /**\\n     * @dev Unregister an existing royalty.\\n     * @param _accountTier The tier of the account for which to unregister the royalty.\\n     */\\n    function unregisterRoyalty(bytes32 _accountTier) external;\\n\\n    /**\\n     * @dev Register a new royalty pool.\\n     * @param _royaltyPool The address of the royalty pool contract.\\n     */\\n    function registerRoyaltyPool(address _royaltyPool) external;\\n\\n    /**\\n     * @dev Register a new colleCommissions.\\n     * @param _colleCommissions The address of the colleCommissions contract.\\n     */\\n    function registerColleCommissions(address _colleCommissions) external;\\n\\n    /**\\n     * @dev Get the royalty of a specific account tier.\\n     * @param _accountTier The tier of the account for which to get the royalty.\\n     * @return The royalty contract of the specified account tier.\\n     */\\n    function getRoyalty(bytes32 _accountTier) external view returns (BaseRoyalty);\\n\\n    /**\\n     * @dev Get the royalty pool.\\n     * @return The royalty pool contract.\\n     */\\n    function getRoyaltyPool() external view returns (IRoyaltyPool);\\n\\n    /**\\n     * @dev Get the colleComissions.\\n     * @return The address of the colleComissions contract.\\n     */\\n    function getColleComissions() external view returns (address);\\n\\n    /**\\n     * @dev Check if a royalty is registered for a specific account tier.\\n     * @param _accountTier The tier of the account for which to check the royalty.\\n     * @return True if a royalty is registered for the specified account tier, false otherwise.\\n     */\\n    function isRoyaltyRegistered(bytes32 _accountTier) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/royalties/RoyaltyPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport {MarketHubRegistrar, AccessControl} from \\\"../MarketHubRegistrar.sol\\\";\\nimport {IRoyaltyPool, IERC165} from \\\"./IRoyaltyPool.sol\\\";\\n\\n/**\\n * @title RoyaltyPool\\n * @dev Contract for managing a pool of previous owners to pay royalties to. The pool includes an initial owner and recent owners.\\n */\\ncontract RoyaltyPool is IRoyaltyPool, MarketHubRegistrar {\\n    // Structure representing a Pool with initial owner and recent owners\\n    struct Pool {\\n        address initialOwner;\\n        address[4] recentOwners;\\n    }\\n\\n    // Mapping from token address to token Id to Pool\\n    mapping(address => mapping(uint256 => Pool)) private pools;\\n    uint private initialOwnerWeight;\\n\\n    /**\\n     * @dev Sets initial owner weight as 1 upon contract creation\\n     */\\n    constructor() {\\n        initialOwnerWeight = 1;\\n        emit InitialOwnerWeight(initialOwnerWeight);\\n    }\\n\\n    modifier onlyEscrow() {\\n        require(msg.sender == address(marketHub.getEscrow()), \\\"Caller is not the escrow\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Set initial owner's weight\\n     * @param _weight New weight to set for initial owner\\n     */\\n    function setInitialOwnerWeight(uint _weight) external onlyAdmin {\\n        initialOwnerWeight = _weight;\\n        emit InitialOwnerWeight(_weight);\\n    }\\n\\n    /**\\n     * @dev Tracks a new owner of a token\\n     * @param _erc721 The address of the token\\n     * @param _tokenId The ID of the token\\n     * @param _owner The address of the new owner\\n     */\\n    function trackNewOwner(address _erc721, uint256 _tokenId, address _owner) external onlyEscrow {\\n        _trackNewOwner(_erc721, _tokenId, _owner);\\n    }\\n\\n    /**\\n     * @dev Tracks a new owner of a token\\n     * @param _erc721 The address of the token\\n     * @param _tokenId The ID of the token\\n     * @param _owner The address of the new owner\\n     */\\n    function trackInitialOwner(address _erc721, uint256 _tokenId, address _owner) external onlyRelayer {\\n        require(pools[_erc721][_tokenId].initialOwner == address(0), \\\"Initial owner already set\\\");\\n        _trackNewOwner(_erc721, _tokenId, _owner);\\n    }\\n\\n    /**\\n     * @dev Tracks a new owner of a token\\n     * @param _erc721 The address of the token\\n     * @param _tokenId The ID of the token\\n     * @param _owner The address of the new owner\\n     */\\n    function _trackNewOwner(address _erc721, uint256 _tokenId, address _owner) internal {\\n        if (pools[_erc721][_tokenId].initialOwner == address(0)) {\\n            pools[_erc721][_tokenId].initialOwner = _owner;\\n            emit PoolUpdated(\\n                _erc721,\\n                _tokenId,\\n                pools[_erc721][_tokenId].initialOwner,\\n                pools[_erc721][_tokenId].recentOwners\\n            );\\n            return;\\n        }\\n\\n        // If there is no one else in the pool AND the owner is the initialOwner, do not track them as a new owner\\n        if (pools[_erc721][_tokenId].initialOwner == _owner && pools[_erc721][_tokenId].recentOwners[3] == address(0)) {\\n            return;\\n        }\\n\\n        // Shift the array to the left\\n        for (uint i = 0; i < 3; i++) {\\n            pools[_erc721][_tokenId].recentOwners[i] = pools[_erc721][_tokenId].recentOwners[i + 1];\\n        }\\n        // Add the new owner to the end\\n        pools[_erc721][_tokenId].recentOwners[3] = _owner;\\n        emit PoolUpdated(\\n            _erc721,\\n            _tokenId,\\n            pools[_erc721][_tokenId].initialOwner,\\n            pools[_erc721][_tokenId].recentOwners\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns the weight of the initial owner\\n     */\\n    function getInitialOwnerWeight() external view returns (uint) {\\n        return initialOwnerWeight;\\n    }\\n\\n    /**\\n     * @dev Returns the initial owner of a given token\\n     * @param _erc721 The address of the token\\n     * @param _tokenId The ID of the token\\n     */\\n    function getInitialOwner(address _erc721, uint256 _tokenId) external view returns (address) {\\n        return pools[_erc721][_tokenId].initialOwner;\\n    }\\n\\n    /**\\n     * @dev Returns the recent owners of a given token\\n     * @param _erc721 The address of the token\\n     * @param _tokenId The ID of the token\\n     */\\n    function getRecentOwners(address _erc721, uint256 _tokenId) external view returns (address[4] memory) {\\n        return pools[_erc721][_tokenId].recentOwners;\\n    }\\n\\n    /**\\n     * @dev Returns the total pool shares for a given token\\n     * @param _erc721 The address of the token\\n     * @param _tokenId The ID of the token\\n     */\\n    function totalPoolShares(address _erc721, uint256 _tokenId) external view returns (uint256) {\\n        uint256 count = 0;\\n        for (uint256 i = 0; i < 4; i++) {\\n            if (pools[_erc721][_tokenId].recentOwners[i] != address(0)) {\\n                count++;\\n            }\\n        }\\n        return count + initialOwnerWeight;\\n    }\\n\\n    /**\\n     * @notice Checks if the contract implements an interface.\\n     * @param _interfaceId The ID of the interface.\\n     * @return True if the contract implements the interface, false otherwise.\\n     */\\n    function supportsInterface(\\n        bytes4 _interfaceId\\n    ) public view virtual override(AccessControl, IERC165) returns (bool) {\\n        return\\n            _interfaceId == type(IRoyaltyPool).interfaceId ||\\n            _interfaceId == type(IERC165).interfaceId ||\\n            AccessControl.supportsInterface(_interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/royalties/RoyaltyRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport {BaseRoyalty, IRoyalty} from \\\"./BaseRoyalty.sol\\\";\\nimport {IRoyaltyPool} from \\\"./RoyaltyPool.sol\\\";\\nimport {IRoyaltyRegistry} from \\\"./IRoyaltyRegistry.sol\\\";\\nimport {MarketAccess} from \\\"../../utils/MarketAccess.sol\\\";\\n\\n/**\\n * @title RoyaltyRegistry\\n * @dev Registry contract for handling royalties. It allows registering, unregistering of royalties, and getting details about royalties.\\n */\\ncontract RoyaltyRegistry is IRoyaltyRegistry, MarketAccess {\\n    // Mapping from account tier to royalty contract address\\n    mapping(bytes32 => address) public royalties;\\n    IRoyaltyPool public royaltyPool;\\n    address public colleCommissions;\\n\\n    /**\\n     * @dev Registers a royalty for a given account tier\\n     * @param _accountTier The account tier to associate with the royalty\\n     * @param _royalty The address of the royalty contract\\n     */\\n    function registerRoyalty(bytes32 _accountTier, address _royalty) external onlyAdmin {\\n        require(royalties[_accountTier] == address(0), \\\"Royalty already registered\\\");\\n\\n        emit RegisteredRoyalty(_royalty, _accountTier);\\n\\n        royalties[_accountTier] = _royalty;\\n\\n        BaseRoyalty royalty = BaseRoyalty(_royalty);\\n        require(royalty.supportsInterface(type(IRoyalty).interfaceId), \\\"Royalty does not support IRoyalty\\\");\\n\\n        royalty.register();\\n    }\\n\\n    /**\\n     * @dev Unregisters a royalty associated with a given account tier\\n     * @param _accountTier The account tier associated with the royalty to unregister\\n     */\\n    function unregisterRoyalty(bytes32 _accountTier) external onlyAdmin {\\n        require(royalties[_accountTier] != address(0), \\\"Royalty not registered\\\");\\n\\n        emit UnregisteredRoyalty(royalties[_accountTier], _accountTier);\\n\\n        BaseRoyalty royalty = BaseRoyalty(royalties[_accountTier]);\\n        royalties[_accountTier] = address(0);\\n\\n        royalty.unregister();\\n    }\\n\\n    /**\\n     * @dev Registers a royalty pool\\n     * @param _royaltyPool The address of the royalty pool contract\\n     */\\n    function registerRoyaltyPool(address _royaltyPool) external onlyAdmin {\\n        require(address(royaltyPool) == address(0), \\\"Royalty pool already registered\\\");\\n\\n        emit RegisteredRoyaltyPool(_royaltyPool);\\n\\n        royaltyPool = IRoyaltyPool(_royaltyPool);\\n        require(\\n            royaltyPool.supportsInterface(type(IRoyaltyPool).interfaceId),\\n            \\\"RoyaltyPool does not support IRoyaltyPool\\\"\\n        );\\n\\n        royaltyPool.register();\\n    }\\n\\n    /**\\n     * @dev Registers a colleCommissions contract\\n     * @param _colleCommissions The address of the colleCommissions contract\\n     */\\n    function registerColleCommissions(address _colleCommissions) external onlyAdmin {\\n        require(_colleCommissions != address(0), \\\"Cannot register ColleCommissions address as zero\\\");\\n        colleCommissions = _colleCommissions;\\n\\n        emit UpdatedColleComissions(_colleCommissions);\\n    }\\n\\n    /**\\n     * @dev Returns the royalty associated with a given account tier\\n     * @param _accountTier The account tier associated with the royalty\\n     */\\n    function getRoyalty(bytes32 _accountTier) external view returns (BaseRoyalty) {\\n        return BaseRoyalty(royalties[_accountTier]);\\n    }\\n\\n    /**\\n     * @dev Returns the current royalty pool\\n     */\\n    function getRoyaltyPool() external view returns (IRoyaltyPool) {\\n        return royaltyPool;\\n    }\\n\\n    /**\\n     * @dev Returns the current colleCommissions contract\\n     */\\n    function getColleComissions() external view returns (address) {\\n        return colleCommissions;\\n    }\\n\\n    /**\\n     * @dev Checks if a royalty is registered for a given account tier\\n     * @param _accountTier The account tier to check\\n     */\\n    function isRoyaltyRegistered(bytes32 _accountTier) external view returns (bool) {\\n        return royalties[_accountTier] != address(0);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/taxes/ITaxPolicyRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\n/// @title ITaxPolicyRegistry\\n/// @notice Interface for the TaxPolicyRegistry contract.\\n/// @dev This interface lists all the external functions implemented in the TaxPolicyRegistry contract.\\ninterface ITaxPolicyRegistry {\\n    /**\\n     * @dev Emitted when the taxation payout address has been updated.\\n     */\\n    event UpdatedColleTaxes(address colleTaxes);\\n\\n    /**\\n     * @dev Registers a _colleTaxes contract\\n     * @param _colleTaxes The address of the colleTaxes contract\\n     */\\n    function registerColleTaxes(address _colleTaxes) external;\\n\\n    /**\\n     * @dev Returns the current colleTaxes address\\n     */\\n    function getColleTaxes() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/taxes/Tax.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nstruct Tax {\\n    uint256 amount;\\n    uint256 countryCode;\\n    uint256 regionCode;\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/taxes/TaxPolicyRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport {ITaxPolicyRegistry} from \\\"./ITaxPolicyRegistry.sol\\\";\\nimport {MarketAccess} from \\\"../../utils/MarketAccess.sol\\\";\\n\\n/// @title TaxPolicyRegistry\\n/// @notice Contract for the TaxPolicyRegistry.\\n/// @dev This contract implements all the functions from the ITaxPolicyRegistry interface.\\ncontract TaxPolicyRegistry is ITaxPolicyRegistry, MarketAccess {\\n    address public colleTaxes;\\n\\n    /**\\n     * @dev Registers a _colleTaxes contract\\n     * @param _colleTaxes The address of the colleTaxes contract\\n     */\\n    function registerColleTaxes(address _colleTaxes) external onlyAdmin {\\n        require(_colleTaxes != address(0), \\\"Cannot register ColleTaxes address as zero\\\");\\n        colleTaxes = _colleTaxes;\\n\\n        emit UpdatedColleTaxes(_colleTaxes);\\n    }\\n\\n    /**\\n     * @dev Returns the current colleTaxes contract\\n     */\\n    function getColleTaxes() external view returns (address) {\\n        return colleTaxes;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/upgrade-gatekeeper/IUpgradeGatekeeper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title IUpgradeGatekeeper\\n * @dev Interface for the Upgrade Gatekeeper, which manages upgrade targets for contract proxies.\\n */\\ninterface IUpgradeGatekeeper is IERC165 {\\n    /**\\n     * @dev Emitted when an upgrade target is set for a specific proxy.\\n     * @param _proxy The address of the proxy.\\n     * @param _target The address of the upgrade target.\\n     */\\n    event UpgradeTargetSet(address indexed _proxy, address indexed _target);\\n\\n    /**\\n     * @dev Sets an upgrade target for a specific proxy.\\n     * @param _proxy The address of the proxy.\\n     * @param _target The address of the upgrade target.\\n     */\\n    function setUpgradeTarget(address _proxy, address _target) external;\\n\\n    /**\\n     * @dev Retrieves the current upgrade target for a specific proxy.\\n     * @param _proxy The address of the proxy.\\n     * @return The address of the upgrade target.\\n     */\\n    function getUpgradeTarget(address _proxy) external view returns (address);\\n\\n    /**\\n     * @dev Resets the upgrade target.\\n     */\\n    function resetUpgradeTarget() external;\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/vaults/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IMarketHubRegistrar} from \\\"../IMarketHubRegistrar.sol\\\";\\nimport {IEscrow} from \\\"../escrow/IEscrow.sol\\\";\\nimport {Signature} from \\\"../../utils/Signature.sol\\\";\\n\\n/**\\n * @title IVault\\n * @dev IVault interface defines the functions for managing ERC20 and ERC721 assets.\\n * @notice It includes events that are emitted for each function that alters the state of the contract.\\n */\\ninterface IVault is IMarketHubRegistrar, IERC165 {\\n    /**\\n     * @dev Emitted when an ERC20 token is deposited into the vault.\\n     */\\n    event DepositedERC20(address indexed erc20, uint256 amount);\\n\\n    /**\\n     * @dev Emitted when an ERC20 token is withdrawn from the vault.\\n     */\\n    event WithdrawERC20(address indexed erc20, uint256 amount);\\n\\n    /**\\n     * @dev Emitted when an ERC721 token is deposited into the vault.\\n     */\\n    event DepositERC721(address indexed erc721, uint256 tokenId);\\n\\n    /**\\n     * @dev Emitted when an ERC721 token is withdrawn from the vault.\\n     */\\n    event WithdrawERC721(address indexed erc721, uint256 tokenId);\\n\\n    /**\\n     * @dev Emitted when a user enables or disables offchain payouts.\\n     */\\n    event SetOffchainPayout(address indexed user, bool enabled);\\n\\n    /**\\n     * @dev Emitted when a offchain payout is made.\\n     */\\n    event OffchainPayout(uint256 indexed saleId, address indexed user, uint256 amount, address indexed erc20);\\n\\n    /**\\n     * @notice Turns on or off the offchain payout behaviour\\n     * @dev When on, payouts will be redirected to Colle, and emit a event stating Colle owes the user the amount\\n     * @param _offchainPayout Whether to turn on or off offchain payouts.\\n     */\\n    function setOffchainPayout(bool _offchainPayout) external;\\n\\n    /**\\n     * @notice Turns on or off the offchain payout behaviour, via a EIP-712 signature\\n     * @dev When on, payouts will be redirected to Colle, and emit a event stating Colle owes the user the amount\\n     * @param _offchainPayout Whether to turn on or off offchain payouts.\\n     */\\n    function permitSetOffchainPayout(bool _offchainPayout, Signature memory _signature) external;\\n\\n    /**\\n     * @notice Turns off the offchain payout behaviour for a given address\\n     * @dev When on, payouts will be redirected to Colle, and emit a event stating Colle owes the user the amount\\n     * @param _address The address to disable offchain payouts for\\n     */\\n    function disableOffchainPayout(address _address) external;\\n\\n    /**\\n     * @dev Deposits ERC20 token into the vault.\\n     * @param _saleId The id of the sale.\\n     */\\n    function depositERC20ForSale(uint256 _saleId) external;\\n\\n    /**\\n     * @dev Deposits ERC721 token into the vault.\\n     * @param _erc721 Address of the ERC721 token.\\n     * @param _tokenId Token Id of the ERC721 token.\\n     * @param _sender Address of the sender.\\n     */\\n    function depositColleNFT(address _erc721, uint256 _tokenId, address _sender) external;\\n\\n    /**\\n     * @dev Withdraws ERC721 token and ERC20 tokens to a single receiver who will handle making parties whole\\n     * @param _sale The sale that had a issue arise\\n     * @param _sale The address of the user who will make parties whole\\n     */\\n    function withdrawForResolution(IEscrow.Sale memory _sale, address _receiver) external;\\n\\n    /**\\n     * @dev Withdraws ERC721 token and ERC20 tokens to the original depositors of these tokens\\n     * @param _sale The slme that is being cancelled\\n     */\\n    function withdrawToDepositors(IEscrow.Sale memory _sale) external;\\n\\n    /**\\n     * @dev Withdraws ERC721 token and ERC20 tokens on sale success to all parties.\\n     * @param _sale The sale that is completed\\n     * @param _colleComissionPoolAmount The amount of the sale to payout in comissions\\n     * @param _initialOwnerRoyaltyPayout The amount of the sale to payout to the original owner as a royalty\\n     * @param _recentOwnerRoyaltyPayout The amount of the sale each recent owner gets as a royalty\\n     * @param _amountToSeller The amount that the seller is to received from the sale\\n     * @param _initialOwner The address to receive the initial owner royalty\\n     * @param _recentOwners The recent owners to receive the recent owner royalty\\n     */\\n    function payout(\\n        IEscrow.Sale memory _sale,\\n        uint256 _colleComissionPoolAmount,\\n        uint256 _initialOwnerRoyaltyPayout,\\n        uint256 _recentOwnerRoyaltyPayout,\\n        uint256 _amountToSeller,\\n        address _initialOwner,\\n        address[4] memory _recentOwners\\n    ) external;\\n\\n    /**\\n     * @dev Checks the balance of ERC20 token in the vault.\\n     * @param _erc20 Address of the ERC20 token.\\n     * @return Returns the balance of the ERC20 token.\\n     */\\n    function erc20Balances(address _erc20) external view returns (uint256);\\n\\n    /**\\n     * @dev Checks if an ERC721 token is in the vault.\\n     * @param _erc721 Address of the ERC721 token.\\n     * @param _tokenId Token Id of the ERC721 token.\\n     * @return Returns true if the ERC721 token is in the vault, otherwise false.\\n     */\\n    function erc721Balances(address _erc721, uint256 _tokenId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/vaults/IVaultRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport {IVault} from \\\"./IVault.sol\\\";\\n\\n/**\\n * @title IVaultRegistry\\n * @dev This interface defines a function to get the instance of the deployed vault contract.\\n * @notice This registry provides the address of the Vault contract which manages the ERC20 and ERC721 assets.\\n */\\ninterface IVaultRegistry {\\n    /**\\n     * @dev Emitted when a vault is registered.\\n     */\\n    event RegisteredVault(address vault);\\n\\n    /**\\n     * @dev Returns the instance of the deployed vault contract.\\n     * @return Returns the instance of the IVault.\\n     */\\n    function getVault() external view returns (IVault);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/MarketAccess.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/// @title MarketAccess\\n/// @dev This contract provides a role-based access control for the marketplace.\\n/// It extends OpenZeppelin's AccessControl for role management.\\ncontract MarketAccess is AccessControl {\\n    /// @notice Role identifier for Relayer role\\n    bytes32 public constant RELAYER_ROLE = keccak256(\\\"RELAYER_ROLE\\\");\\n\\n    /// @notice Sets the deployer as the initial admin\\n    constructor() {\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /// @notice Checks if an address is assigned the Relayer role\\n    /// @param _address The address to check\\n    /// @return bool Returns true if the address has the Relayer role, false otherwise.\\n    function isRelayer(address _address) internal view returns (bool) {\\n        return hasRole(RELAYER_ROLE, _address);\\n    }\\n\\n    /// @notice Modifier to restrict the access to only addresses with the Relayer role\\n    modifier onlyRelayer() {\\n        require(hasRole(RELAYER_ROLE, msg.sender), \\\"Caller is not a relayer\\\");\\n        _;\\n    }\\n\\n    /// @notice Modifier to restrict the access to only addresses with the Relayer role\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Caller is not a admin\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Signature.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nstruct Signature {\\n    address signer;\\n    uint256 deadline;\\n    bytes signature;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/SignatureValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {Signature} from \\\"./Signature.sol\\\";\\n\\n/// @title SignatureValidator\\n/// @dev This contract validates the signatures associated with EIP-712 typed structures.\\ncontract SignatureValidator {\\n    using Counters for Counters.Counter;\\n    using ECDSA for bytes32;\\n\\n    // @dev Each address has a nonce that is incremented after each use.\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // @dev Domain name and version for EIP712 signatures\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 public DOMAIN_SEPARATOR;\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n    string private name_;\\n    string private version_;\\n\\n    /// @notice Initializes the `DOMAIN_SEPARATOR` value.\\n    /// @dev The function is meant to be called in the constructor of the contract implementing this logic.\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __SignatureValidator_init(string memory _name, string memory _version) internal {\\n        name_ = _name;\\n        version_ = _version;\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                keccak256(bytes(_name)),\\n                keccak256(bytes(_version)),\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /// @notice Validates a signature.\\n    /// @dev This modifier checks if the signature associated with a `_permitHash` is valid.\\n    /// @param _signature The signer struct containing the signature, signer and deadline.\\n    /// @param _permitHash The EIP-712 permit hash.\\n    modifier isValidSignature(Signature memory _signature, bytes32 _permitHash) {\\n        validateSignatureAndUpdateNonce(_signature, _permitHash);\\n        _;\\n    }\\n\\n    /// @notice Validates a signature.\\n    /// @dev This function checks if the signature associated with a `_permitHash` is valid.\\n    /// @param _signature The signer struct containing the signature, signer and deadline.\\n    /// @param _permitHash The EIP-712 permit hash.\\n    function validateSignatureAndUpdateNonce(Signature memory _signature, bytes32 _permitHash) internal {\\n        bytes32 permitHash = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\", // EIP191: Indicates EIP712\\n                DOMAIN_SEPARATOR,\\n                _permitHash\\n            )\\n        );\\n\\n        // solhint-disable-next-line not-rely-on-time\\n        require(block.timestamp <= _signature.deadline, \\\"Expired deadline\\\");\\n        address verifiedSigner = permitHash.recover(_signature.signature);\\n        require(verifiedSigner == _signature.signer, \\\"Invalid signature\\\");\\n        Counters.Counter storage nonce = _nonces[_signature.signer];\\n        nonce.increment();\\n    }\\n\\n    /// @notice Returns the nonce associated with a user.\\n    /// @dev The nonce is incremented after each use.\\n    /// @param _user The user's address.\\n    /// @return Returns the current nonce value.\\n    function nonces(address _user) public view returns (uint256) {\\n        return _nonces[_user].current();\\n    }\\n\\n    /// @notice Returns the EIP712 domain separator components.\\n    /// @dev This can be used to verify the domain of the EIP712 signature.\\n    /// @return name The domain name.\\n    /// @return version The domain version.\\n    /// @return chainId The current chain ID.\\n    /// @return verifyingContract The address of the verifying contract.\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (string memory name, string memory version, uint256 chainId, address verifyingContract)\\n    {\\n        return (name_, version_, block.chainid, address(this));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1,\r\n      \"details\": {\r\n        \"yul\": false\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upgradeGatekeeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_escrow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minUSDCPrice\",\"type\":\"uint256\"}],\"name\":\"MinimumPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tier\",\"type\":\"bytes32\"}],\"name\":\"RegisteredAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"RegisteredCollection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"}],\"name\":\"RegisteredCurrency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"escrow\",\"type\":\"address\"}],\"name\":\"RegisteredEscrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"RegisteredMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"royalty\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"accountTier\",\"type\":\"bytes32\"}],\"name\":\"RegisteredRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"royaltyPool\",\"type\":\"address\"}],\"name\":\"RegisteredRoyaltyPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"upgradeGatekeeper\",\"type\":\"address\"}],\"name\":\"RegisteredUpgradeGatekeeper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"RegisteredVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"UnregisteredCollection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"}],\"name\":\"UnregisteredCurrency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"UnregisteredMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"royalty\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"accountTier\",\"type\":\"bytes32\"}],\"name\":\"UnregisteredRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum AccountStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"UpdatedAccountStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tier\",\"type\":\"bytes32\"}],\"name\":\"UpdatedAccountTier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"colleComission\",\"type\":\"address\"}],\"name\":\"UpdatedColleComissions\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"colleTaxes\",\"type\":\"address\"}],\"name\":\"UpdatedColleTaxes\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKET_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAYER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowNewSales\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"banAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"colleCommissions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"colleTaxes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"erc20s\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAccount\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tier\",\"type\":\"bytes32\"},{\"internalType\":\"enum AccountStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct Account\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getColleComissions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getColleTaxes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"}],\"name\":\"getCollection\",\"outputs\":[{\"internalType\":\"contract IColleCollection\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"}],\"name\":\"getCurrencyByERC20\",\"outputs\":[{\"internalType\":\"contract BaseCurrency\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"getERC20ByCurrency\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getERC20s\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEscrow\",\"outputs\":[{\"internalType\":\"contract IEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_marketName\",\"type\":\"bytes32\"}],\"name\":\"getMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketNames\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinUSDCPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_accountTier\",\"type\":\"bytes32\"}],\"name\":\"getRoyalty\",\"outputs\":[{\"internalType\":\"contract BaseRoyalty\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoyaltyPool\",\"outputs\":[{\"internalType\":\"contract IRoyaltyPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUpgradeGatekeeper\",\"outputs\":[{\"internalType\":\"contract IUpgradeGatekeeper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"haultAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAccountActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAccountBanned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAccountHaulted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAccountRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"}],\"name\":\"isERC20Registered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"}],\"name\":\"isERC721Registered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketAddress\",\"type\":\"address\"}],\"name\":\"isMarket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_accountTier\",\"type\":\"bytes32\"}],\"name\":\"isRoyaltyRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleId\",\"type\":\"uint256\"}],\"name\":\"notifySaleClosed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseNewSales\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_tier\",\"type\":\"bytes32\"}],\"name\":\"registerAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_colleCommissions\",\"type\":\"address\"}],\"name\":\"registerColleCommissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_colleTaxes\",\"type\":\"address\"}],\"name\":\"registerColleTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"}],\"name\":\"registerCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"registerERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_marketName\",\"type\":\"bytes32\"}],\"name\":\"registerMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_accountTier\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_royalty\",\"type\":\"address\"}],\"name\":\"registerRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyPool\",\"type\":\"address\"}],\"name\":\"registerRoyaltyPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"royalties\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyPool\",\"outputs\":[{\"internalType\":\"contract IRoyaltyPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minUSDCPrice\",\"type\":\"uint256\"}],\"name\":\"setMinUSDCPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"unbanAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"unhaultAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseNewSales\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"}],\"name\":\"unregisterCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"unregisterERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_marketName\",\"type\":\"bytes32\"}],\"name\":\"unregisterMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_accountTier\",\"type\":\"bytes32\"}],\"name\":\"unregisterRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_tier\",\"type\":\"bytes32\"}],\"name\":\"updateTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MarketHub", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "000000000000000000000000d59daba1ce861d29309b9a873557345e2f4911ca0000000000000000000000000f70892770d33eb333b67dc2c7163971788698e300000000000000000000000057abcf1bab6029fdf9ab816d657b3ee7a38cd232", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}