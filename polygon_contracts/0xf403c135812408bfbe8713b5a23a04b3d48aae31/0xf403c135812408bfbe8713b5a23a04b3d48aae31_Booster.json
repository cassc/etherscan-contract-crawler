{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Booster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.10;\\r\\n\\r\\nimport \\\"./interfaces/IRewards.sol\\\";\\r\\nimport \\\"./interfaces/IRewardFactory.sol\\\";\\r\\nimport \\\"./interfaces/IStaker.sol\\\";\\r\\nimport \\\"./interfaces/IFeeDistro.sol\\\";\\r\\nimport \\\"./interfaces/IPoolFactory.sol\\\";\\r\\nimport \\\"./interfaces/IRewardManager.sol\\\";\\r\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\n/*\\r\\nThis is the main contract which will have operator role on the VoterProxy.\\r\\nHandles pool creation, deposits/withdraws, as well as other managment functions like factories/managers/fees\\r\\n*/\\r\\ncontract Booster is ReentrancyGuard{\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint256 public fees = 1700; //platform fees\\r\\n    uint256 public constant MaxFees = 2500; //hard code max fees\\r\\n    uint256 public constant FEE_DENOMINATOR = 10000;\\r\\n\\r\\n    address public owner; //owner\\r\\n    address public pendingOwner; //pending owner\\r\\n    address public poolManager; //add and shutdown pools\\r\\n    address public rescueManager; //specific role just for pulling non-lp/gauge tokens from voterproxy\\r\\n    address public rewardManager; //controls rewards\\r\\n    address public immutable staker; //voter proxy\\r\\n    address public rewardFactory; //factory for creating main reward/staking pools\\r\\n    address public feeDeposit; //address where fees are accumulated\\r\\n\\r\\n    bool public isShutdown; //flag if booster is shutdown or not\\r\\n\\r\\n    struct PoolInfo {\\r\\n        address lptoken; //the curve lp token\\r\\n        address gauge; //the curve gauge\\r\\n        address rewards; //the main reward/staking contract\\r\\n        bool shutdown; //is this pool shutdown?\\r\\n        address factory; //a reference to the curve factory used to create this pool (needed for minting crv)\\r\\n    }\\r\\n\\r\\n\\r\\n    PoolInfo[] public poolInfo;//list of convex pools, index(pid) -> pool\\r\\n    mapping(address => address) public factoryCrv;//map defining CRV token used by a Curve factory\\r\\n    mapping(address => bool) public activeMap;//map defining if a curve gauge/lp token is already being used or not\\r\\n    mapping(uint256 => uint256) public shutdownBalances; //lp balances of a shutdown pool, index(pid) -> lp balance\\r\\n\\r\\n    event Deposited(address indexed user, uint256 indexed poolid, uint256 amount);\\r\\n    event Withdrawn(address indexed user, uint256 indexed poolid, uint256 amount);\\r\\n    event SetPendingOwner(address indexed _address);\\r\\n    event OwnerChanged(address indexed _address);\\r\\n    event CrvFactorySet(address indexed _factory, address _crv);\\r\\n\\r\\n    constructor(address _staker) {\\r\\n        isShutdown = false;\\r\\n        staker = _staker;\\r\\n        owner = msg.sender;\\r\\n        poolManager = msg.sender;\\r\\n        rescueManager = msg.sender;\\r\\n    }\\r\\n\\r\\n\\r\\n    /// SETTER SECTION ///\\r\\n\\r\\n    //set next pending owner. owner must accept\\r\\n    function setPendingOwner(address _po) external {\\r\\n        require(msg.sender == owner, \\\"!auth\\\");\\r\\n        pendingOwner = _po;\\r\\n        emit SetPendingOwner(_po);\\r\\n    }\\r\\n\\r\\n    //claim ownership\\r\\n    function acceptPendingOwner() external {\\r\\n        require(msg.sender == pendingOwner, \\\"!p_owner\\\");\\r\\n\\r\\n        owner = pendingOwner;\\r\\n        pendingOwner = address(0);\\r\\n        emit OwnerChanged(owner);\\r\\n    }\\r\\n\\r\\n    //set CRV token address used by a specific Curve pool factory.\\r\\n    //While CRV could be set as immutable, there is no guarantee that a side chain token won't be changed.\\r\\n    //(for example a new/different bridge platform is used)\\r\\n    function setFactoryCrv(address _factory, address _crv) external {\\r\\n        require(msg.sender == owner, \\\"!auth\\\");\\r\\n        require(_factory != address(0) && _crv != address(0), \\\"invalid\\\");\\r\\n        factoryCrv[_factory] = _crv;\\r\\n\\r\\n        emit CrvFactorySet(_factory, _crv);\\r\\n    }\\r\\n\\r\\n    //set a pool manager\\r\\n    //note: only the pool manager can relinquish control\\r\\n    function setPoolManager(address _poolM) external {\\r\\n        require(msg.sender == poolManager, \\\"!auth\\\");\\r\\n        require(_poolM != address(0),\\\"invalid address\\\");\\r\\n        poolManager = _poolM;\\r\\n    }\\r\\n\\r\\n    //set a rescue manager for tokens\\r\\n    //set by owner. separate role though in case something needs to be streamlined like claiming outside rewards.\\r\\n    function setRescueManager(address _rescueM) external {\\r\\n        require(msg.sender == owner, \\\"!auth\\\");\\r\\n        rescueManager = _rescueM;\\r\\n    }\\r\\n\\r\\n    //set reward manager\\r\\n    //can add extra rewards and reward hooks on pools\\r\\n    function setRewardManager(address _rewardM) external {\\r\\n        require(msg.sender == owner, \\\"!auth\\\");\\r\\n        require(IRewardManager(_rewardM).rewardHook() != address(0), \\\"!no hook\\\");\\r\\n        require(IRewardManager(_rewardM).cvx() != address(0), \\\"!no cvx\\\");\\r\\n\\r\\n        rewardManager = _rewardM;\\r\\n    }\\r\\n\\r\\n    //set factories used when deploying new reward/token contracts\\r\\n    function setRewardFactory(address _rfactory) external {\\r\\n        require(msg.sender == owner, \\\"!auth\\\");\\r\\n        require(rewardFactory == address(0), \\\"sealed\\\");\\r\\n        \\r\\n        rewardFactory = _rfactory;\\r\\n    }\\r\\n\\r\\n    //set address that receives platform fees\\r\\n    function setFeeDeposit(address _deposit) external {\\r\\n        require(msg.sender == owner, \\\"!auth\\\");\\r\\n        \\r\\n        feeDeposit = _deposit;\\r\\n    }\\r\\n\\r\\n    //set platform fees\\r\\n    function setFees(uint256 _platformFees) external{\\r\\n        require(msg.sender == owner, \\\"!auth\\\");\\r\\n        require(_platformFees <= MaxFees, \\\">MaxFees\\\");\\r\\n\\r\\n        fees = _platformFees;\\r\\n    }\\r\\n\\r\\n    //rescue a token from the voter proxy\\r\\n    //token must not be an lp or gauge token\\r\\n    function rescueToken(address _token, address _to) external{\\r\\n        require(msg.sender==rescueManager, \\\"!auth\\\");\\r\\n\\r\\n        IStaker(staker).rescue(_token, _to);\\r\\n    }\\r\\n\\r\\n    /// END SETTER SECTION ///\\r\\n\\r\\n    //get pool count\\r\\n    function poolLength() external view returns (uint256) {\\r\\n        return poolInfo.length;\\r\\n    }\\r\\n\\r\\n    //create a new pool\\r\\n    function addPool(address _lptoken, address _gauge, address _factory) external nonReentrant returns(bool){\\r\\n        //only manager\\r\\n        require(msg.sender==poolManager && !isShutdown, \\\"!add\\\");\\r\\n        //basic checks\\r\\n        require(_gauge != address(0) && _lptoken != address(0) && _factory != address(0),\\\"!param\\\");\\r\\n        //crv check\\r\\n        require(factoryCrv[_factory] != address(0), \\\"!crv\\\");\\r\\n        //an unused pool\\r\\n        require(!activeMap[_gauge] && !activeMap[_lptoken],\\\"already reg\\\");\\r\\n\\r\\n        //check that the given factory is indeed tied with the gauge\\r\\n        require(IPoolFactory(_factory).is_valid_gauge(_gauge),\\\"!factory gauge\\\");\\r\\n\\r\\n        //the next pool's pid\\r\\n        uint256 pid = poolInfo.length;\\r\\n\\r\\n        //create a reward contract for rewards\\r\\n        address newRewardPool = IRewardFactory(rewardFactory).CreateMainRewards(factoryCrv[_factory],_gauge,_lptoken,pid);\\r\\n\\r\\n        //add the new pool\\r\\n        poolInfo.push(\\r\\n            PoolInfo({\\r\\n                lptoken: _lptoken,\\r\\n                gauge: _gauge,\\r\\n                rewards: newRewardPool,\\r\\n                shutdown: false,\\r\\n                factory: _factory\\r\\n            })\\r\\n        );\\r\\n        \\r\\n        //set gauge as being used\\r\\n        activeMap[_gauge] = true;\\r\\n        //also set the lp token as used\\r\\n        activeMap[_lptoken] = true;\\r\\n\\r\\n        //set gauge redirect\\r\\n        setGaugeRedirect(_gauge, newRewardPool);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    //shutdown pool, only call from pool manager\\r\\n    function shutdownPool(uint256 _pid) external nonReentrant returns(bool){\\r\\n        require(msg.sender==poolManager, \\\"!auth\\\");\\r\\n        return _shutdownPool(_pid);\\r\\n    }\\r\\n\\r\\n    //shutdown pool internal call\\r\\n    function _shutdownPool(uint256 _pid) internal returns(bool){\\r\\n        \\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        if(pool.shutdown){\\r\\n            //already shut down\\r\\n            return false;\\r\\n        }  \\r\\n\\r\\n        uint256 lpbalance = IERC20(pool.lptoken).balanceOf(address(this));\\r\\n\\r\\n        //withdraw from gauge\\r\\n        try IStaker(staker).withdrawAll(pool.lptoken,pool.gauge){\\r\\n        }catch{}\\r\\n\\r\\n        //lp difference\\r\\n        lpbalance = IERC20(pool.lptoken).balanceOf(address(this)) - lpbalance;\\r\\n\\r\\n        //record how many lp tokens were returned\\r\\n        //this is important to prevent a fake gauge attack which inflates deposit tokens\\r\\n        //in order to withdraw another pool's legitamate lp tokens\\r\\n        shutdownBalances[_pid] = lpbalance;\\r\\n\\r\\n        //flag pool as shutdown\\r\\n        pool.shutdown = true;\\r\\n        //reset active map\\r\\n        activeMap[pool.gauge] = false;\\r\\n        activeMap[pool.lptoken] = false;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    //shutdown this contract.\\r\\n    //  unstake and pull all lp tokens to this address\\r\\n    //  only allow withdrawals\\r\\n    function shutdownSystem() external nonReentrant{\\r\\n        require(msg.sender == owner, \\\"!auth\\\");\\r\\n        \\r\\n        //remove pool manager while shutting down so that no new pools can be added during the loop\\r\\n        address currentPoolManager = poolManager;\\r\\n        poolManager = address(0);\\r\\n\\r\\n        //shutdown all pools.\\r\\n        //gas cost could grow too large to do all, in which case individual pools should be shutdown first\\r\\n        for(uint i=0; i < poolInfo.length; i++){\\r\\n            _shutdownPool(i);\\r\\n        }\\r\\n\\r\\n        //flag system as shutdown at the end\\r\\n        isShutdown = true;\\r\\n\\r\\n        //revert pool manager\\r\\n        poolManager = currentPoolManager;\\r\\n    }\\r\\n\\r\\n\\r\\n    //deposit lp tokens and stake\\r\\n    function deposit(uint256 _pid, uint256 _amount) public nonReentrant returns(bool){\\r\\n        require(!isShutdown,\\\"shutdown\\\");\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        require(pool.shutdown == false, \\\"pool is closed\\\");\\r\\n\\r\\n        //send to proxy to stake\\r\\n        address lptoken = pool.lptoken;\\r\\n        IERC20(lptoken).safeTransferFrom(msg.sender, staker, _amount);\\r\\n\\r\\n        //stake\\r\\n        address gauge = pool.gauge;\\r\\n        require(gauge != address(0),\\\"!gauge setting\\\");\\r\\n        IStaker(staker).deposit(lptoken,gauge,_amount);\\r\\n\\r\\n        //mint reward tokens for user\\r\\n        IRewards(pool.rewards).stakeFor(msg.sender,_amount);\\r\\n        \\r\\n        \\r\\n        emit Deposited(msg.sender, _pid, _amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    //deposit all lp tokens and stake\\r\\n    function depositAll(uint256 _pid) external returns(bool){\\r\\n        address lptoken = poolInfo[_pid].lptoken;\\r\\n        uint256 balance = IERC20(lptoken).balanceOf(msg.sender);\\r\\n        deposit(_pid,balance);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    //withdraw lp tokens\\r\\n    function _withdraw(uint256 _pid, uint256 _amount, address _to) internal {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        address lptoken = pool.lptoken;\\r\\n        address gauge = pool.gauge;\\r\\n\\r\\n\\r\\n        //pull from gauge if not shutdown\\r\\n        if (!pool.shutdown) {\\r\\n            //get prev balance to double check difference\\r\\n            uint256 lpbalance = IERC20(lptoken).balanceOf(address(this));\\r\\n\\r\\n            //because of activeMap, a gauge and its lp token can only be assigned to a single unique pool\\r\\n            //thus claims for withdraw here are enforced to be the correct pair\\r\\n            IStaker(staker).withdraw(lptoken, gauge, _amount);\\r\\n\\r\\n            //also check that the amount returned was correct\\r\\n            //which will safegaurd pools that have been shutdown\\r\\n            require(IERC20(lptoken).balanceOf(address(this)) - lpbalance >= _amount, \\\"withdraw amount fail\\\");\\r\\n        }else{\\r\\n            //if shutdown, tokens will be held in this contract\\r\\n            //remove from shutdown balances. revert if not enough\\r\\n            //would only revert if something was wrong with the pool\\r\\n            //and shutdown didnt return lp tokens\\r\\n            //thus this is a catch to stop other pools with same lp token from\\r\\n            //being affected\\r\\n            shutdownBalances[_pid] -= _amount;\\r\\n        }\\r\\n\\r\\n        //return lp tokens\\r\\n        IERC20(lptoken).safeTransfer(_to, _amount);\\r\\n\\r\\n        emit Withdrawn(_to, _pid, _amount);\\r\\n    }\\r\\n\\r\\n    //allow reward contracts to withdraw directly to user\\r\\n    function withdrawTo(uint256 _pid, uint256 _amount, address _to) external nonReentrant returns(bool){\\r\\n        //require sender to be the reward contract for a given pool\\r\\n        address rewardContract = poolInfo[_pid].rewards;\\r\\n        require(msg.sender == rewardContract,\\\"!auth\\\");\\r\\n\\r\\n        //trust is on the reward contract to properly bookkeep deposit token balance\\r\\n        //since the reward contract is now the deposit token itself\\r\\n        _withdraw(_pid,_amount,_to);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    //claim crv for a pool from the pool's factory and send to rewards\\r\\n    function claimCrv(uint256 _pid, address _gauge) external {\\r\\n        //can only be called by the pool's reward contract\\r\\n        address rewardContract = poolInfo[_pid].rewards;\\r\\n        require(msg.sender == rewardContract,\\\"!auth\\\");\\r\\n\\r\\n        //only claim if the pool isnt shutdown, but no need to revert\\r\\n        if(!poolInfo[_pid].shutdown){\\r\\n            //claim crv and redirect to the reward contract\\r\\n            address _factory = poolInfo[_pid].factory;\\r\\n            IStaker(staker).claimCrv(factoryCrv[_factory], _factory, _gauge, rewardContract);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //set a gauge's redirect setting to claim extra rewards directly to a reward contract \\r\\n    //instead of being pulled to the voterproxy/staker contract \\r\\n    function setGaugeRedirect(address _gauge, address _rewards) internal returns(bool){\\r\\n        bytes memory data = abi.encodeWithSelector(bytes4(keccak256(\\\"set_rewards_receiver(address)\\\")), _rewards);\\r\\n        IStaker(staker).execute(_gauge,uint256(0),data);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    //given an amount of crv, calculate fees\\r\\n    function calculatePlatformFees(uint256 _amount) external view returns(uint256){\\r\\n        uint256 _fees = _amount * fees / FEE_DENOMINATOR;\\r\\n        return _fees;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IStaker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.10;\\r\\n\\r\\ninterface IStaker{\\r\\n    function deposit(address _lp, address _gauge, uint256 _amount) external;\\r\\n    function rescue(address _token, address _to) external;\\r\\n    function withdraw(address, address, uint256) external;\\r\\n    function withdrawAll(address, address) external;\\r\\n    function createLock(uint256, uint256) external;\\r\\n    function increaseAmount(uint256) external;\\r\\n    function increaseTime(uint256) external;\\r\\n    function release() external;\\r\\n    function claimRewards(address) external;\\r\\n    function claimFees(address,address) external;\\r\\n    function claimCrv(address _crv, address _minter, address _gauge, address _to) external;\\r\\n    function setStashAccess(address, bool) external;\\r\\n    function vote(uint256,address,bool) external;\\r\\n    function voteGaugeWeight(address,uint256) external;\\r\\n    function balanceOfPool(address) external view returns (uint256);\\r\\n    function operator() external view returns (address);\\r\\n    function execute(address _to, uint256 _value, bytes calldata _data) external returns (bool, bytes memory);\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.10;\\r\\n\\r\\ninterface IRewards{\\r\\n    function stake(address, uint256) external;\\r\\n    function stakeFor(address, uint256) external;\\r\\n    function withdraw(address, uint256) external;\\r\\n    function setWeight(address _pool, uint256 _amount) external returns(bool);\\r\\n    function setWeights(address[] calldata _account, uint256[] calldata _amount) external;\\r\\n    function setDistributor(address _distro, bool _valid) external;\\r\\n    function getReward(address) external;\\r\\n    function queueNewRewards(uint256) external;\\r\\n    function addExtraReward(address) external;\\r\\n    function invalidateReward(address _token) external;\\r\\n    function setRewardHook(address) external;\\r\\n    function user_checkpoint(address _account) external returns(bool);\\r\\n    function rewardToken() external view returns(address);\\r\\n    function rewardMap(address) external view returns(bool);\\r\\n    function earned(address account) external view returns (uint256);\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IRewardManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.10;\\r\\n\\r\\ninterface IRewardManager {\\r\\n    function rewardHook() external view returns(address);\\r\\n    function cvx() external view returns(address);\\r\\n    function setPoolRewardToken(address _pool, address _token) external;\\r\\n    function setPoolRewardContract(address _pool, address _hook, address _token) external;\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IRewardFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.10;\\r\\n\\r\\ninterface IRewardFactory{\\r\\n    function CreateMainRewards(address _crv, address _gauge, address _depositToken, uint256 _pid) external returns (address);\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IPoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.10;\\r\\n\\r\\ninterface IPoolFactory {\\r\\n    function is_valid_gauge(address) external view returns (bool);\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IFeeDistro.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.10;\\r\\n\\r\\ninterface IFeeDistro {\\r\\n   function processFees() external;\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_crv\",\"type\":\"address\"}],\"name\":\"CrvFactorySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"SetPendingOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaxFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptPendingOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"activeMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lptoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculatePlatformFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"claimCrv\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"depositAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"factoryCrv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDeposit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isShutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lptoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewards\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"shutdown\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"rescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crv\",\"type\":\"address\"}],\"name\":\"setFactoryCrv\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_deposit\",\"type\":\"address\"}],\"name\":\"setFeeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_platformFees\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_po\",\"type\":\"address\"}],\"name\":\"setPendingOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolM\",\"type\":\"address\"}],\"name\":\"setPoolManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rescueM\",\"type\":\"address\"}],\"name\":\"setRescueManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rfactory\",\"type\":\"address\"}],\"name\":\"setRewardFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardM\",\"type\":\"address\"}],\"name\":\"setRewardManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shutdownBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"shutdownPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdownSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Booster", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000989aeb4d175e16225e39e87d0d97a3360524ad80", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}