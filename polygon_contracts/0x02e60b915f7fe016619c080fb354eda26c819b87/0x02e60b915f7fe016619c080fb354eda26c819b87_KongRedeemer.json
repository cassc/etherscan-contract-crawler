{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"KongRedeemer.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"Ownable.sol\\\";\\nimport \\\"IERC20.sol\\\";\\nimport \\\"IERC721.sol\\\";\\nimport \\\"IERC1155.sol\\\";\\nimport \\\"VRFConsumerBase2.sol\\\";\\nimport \\\"SafeMath.sol\\\";\\n\\n/*\\n *     ,_,\\n *    (',')\\n *    {/\\\"\\\\}\\n *    -\\\"-\\\"-\\n */\\n\\ncontract KongRedeemer is VRFConsumerBaseV2 {\\n\\tusing SafeMath for uint256;\\n\\n\\tstruct vrfCall {\\n\\t\\tuint256 tokenType;\\n\\t\\taddress ticketAdd;\\n\\t\\tuint256 ticketId;\\n\\t\\tuint256 index;\\n\\t\\taddress user;\\n\\t\\taddress lootAdd;\\n\\t}\\n\\n\\tstruct Loot20 {\\n\\t\\tuint256 ticketReq;\\n\\t\\tuint256 min;\\n\\t\\tuint256 max;\\n\\t}\\n\\n\\tstruct Loot721 {\\n\\t\\tuint256 ticketReq;\\n\\t\\tuint256[] loot;\\n\\t}\\n\\n\\tstruct SubGroup {\\n\\t\\tuint256[] tokenIds;\\n\\t\\tuint256[] itemCount;\\n\\t\\tuint256 totalItemCount;\\n\\t}\\n\\n\\tstruct Loot1155 {\\n\\t\\tuint256 ticketReq;\\n\\t\\tuint256 itemCount;\\n\\t\\tuint256 subGroupCount;\\n\\t\\tmapping(uint256 => SubGroup) subGroups;\\n\\t}\\n\\n\\taddress constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\\n\\n\\tmapping(uint256 => vrfCall) public requestData;\\n\\n\\t// ticket add => tokenId  => redeemIndex => nftadd => array of loot\\n\\tmapping(address => mapping(uint256 => mapping(uint256 => mapping(address => Loot20)))) public loot20Array;\\n\\n\\t// ticket add => tokenId  => redeemIndex => nftadd => array of loot\\n\\tmapping(address => mapping(uint256 => mapping(uint256 => mapping(address => Loot721)))) public loot721Array;\\n\\t// ticket add => tokenId  => redeemIndex => nftadd => array of loot\\n\\tmapping(address => mapping(uint256 => mapping(uint256 => mapping(address => Loot1155)))) public lootArray1155;\\n\\n\\tevent ItemRedeemed(address indexed user, uint256 tokenType, address lootAdd, uint256 tokenId, uint256 amount);\\n\\n\\tconstructor(address _vrfCoordinator, address _link) public VRFConsumerBaseV2(_vrfCoordinator, _link) {}\\n\\n\\tfunction populateLoot20(address _ticket, uint256 _ticketId, uint256 _ticketReq, uint256 _index, address _lootAdd, uint256 _min, uint256 _max) external onlyOwner {\\n\\t\\tloot20Array[_ticket][_ticketId][_index][_lootAdd] = Loot20(_ticketReq, _min, _max);\\n\\t}\\n\\n\\tfunction populateArray721(address _ticket, uint256 _ticketId, uint256 _ticketReq, uint256 _index, address _lootAdd, uint256[] calldata _ids) external onlyOwner {\\n\\t\\tLoot721 storage loot = loot721Array[_ticket][_ticketId][_index][_lootAdd];\\n\\t\\tloot.ticketReq = _ticketReq;\\n\\t\\tfor (uint256 i = 0; i < _ids.length; i++) {\\n\\t\\t\\tloot.loot.push(_ids[i]);\\n\\t\\t\\tIERC721(_lootAdd).safeTransferFrom(msg.sender, address(this), _ids[i]);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction populateArray1155(address _ticket, uint256 _ticketId, uint256 _ticketReq, uint256 _index, address _lootAdd, uint256[][] calldata _groupIds, uint256[][] calldata _groupCounts) external onlyOwner {\\n\\t\\tLoot1155 storage loot1155 = lootArray1155[_ticket][_ticketId][_index][_lootAdd];\\n\\t\\trequire(loot1155.itemCount == 0);\\n\\t\\tloot1155.ticketReq = _ticketReq;\\n\\n\\t\\tuint256 totalCount;\\n\\t\\tfor (uint256 i = 0; i < _groupIds.length; i++) {\\n\\t\\t\\tuint256 subItemCount;\\n\\t\\t\\tSubGroup storage sub = loot1155.subGroups[i];\\n\\t\\t\\tfor (uint256 j = 0; j < _groupIds[i].length; j++) {\\n\\t\\t\\t\\tsub.tokenIds.push(_groupIds[i][j]);\\n\\t\\t\\t\\tsub.itemCount.push(_groupCounts[i][j]);\\n\\t\\t\\t\\tsubItemCount += _groupCounts[i][j];\\n\\t\\t\\t}\\n\\t\\t\\tsub.totalItemCount = subItemCount;\\n\\t\\t\\ttotalCount += subItemCount;\\n\\t\\t}\\n\\t\\tloot1155.subGroupCount = _groupIds.length;\\n\\t\\tloot1155.itemCount = totalCount;\\n\\t}\\n\\n\\tfunction redeem(uint256 tokenType, address _ticket, uint256 _ticketId, uint256 _index, address _lootAdd) external {\\n\\t\\trequire(tokenType == 20 || tokenType == 721 || tokenType == 1155);\\n\\t\\tuint256 ticketReq;\\n\\n\\t\\tif (tokenType == 721) {\\n\\t\\t\\trequire(loot721Array[_ticket][_ticketId][_index][_lootAdd].loot.length > 0, \\\"721: Array empty\\\");\\n\\t\\t\\tticketReq = loot721Array[_ticket][_ticketId][_index][_lootAdd].ticketReq;\\n\\t\\t}\\n\\t\\telse if (tokenType == 1155) {\\n\\t\\t\\trequire(lootArray1155[_ticket][_ticketId][_index][_lootAdd].itemCount > 0, \\\"1155: Array empty\\\" );\\n\\t\\t\\tticketReq = lootArray1155[_ticket][_ticketId][_index][_lootAdd].ticketReq;\\n\\t\\t}\\n\\t\\telse if (tokenType == 20) {\\n\\t\\t\\trequire(loot20Array[_ticket][_ticketId][_index][_lootAdd].max <= IERC20(_lootAdd).balanceOf(address(this)), \\\"Not enough tokens\\\");\\n\\t\\t\\tticketReq = loot20Array[_ticket][_ticketId][_index][_lootAdd].ticketReq;\\n\\t\\t}\\n\\t\\tuint256 requestId = requestRandomWords();\\n\\t\\trequestData[requestId] = vrfCall(tokenType, _ticket, _ticketId, _index, msg.sender, _lootAdd);\\n\\t\\tIERC1155(_ticket).safeTransferFrom(msg.sender, address(this), _ticketId, ticketReq, \\\"\\\");\\n\\t\\t\\n\\t}\\n\\n\\tfunction fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {\\n\\t\\tvrfCall memory call = requestData[requestId];\\n\\t\\tuint256 tokenType = call.tokenType;\\n\\t\\tuint256 ticketReq;\\n\\t\\tif (tokenType == 20) {\\n\\t\\t\\tLoot20 memory loot20 = loot20Array[call.ticketAdd][call.ticketId][call.index][call.lootAdd];\\n\\t\\t\\tticketReq = loot20.ticketReq;\\n\\t\\t\\tif (loot20.max > IERC20(call.lootAdd).balanceOf(address(this))) {\\n\\t\\t\\t\\tIERC1155(call.ticketAdd).safeTransferFrom(address(this), call.user, call.ticketId, ticketReq, \\\"\\\");\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\t_redeem20(randomWords[0], call.lootAdd, call.user, loot20.min, loot20.max);\\n\\t\\t}\\n\\t\\telse if (tokenType == 721) {\\n\\t\\t\\tLoot721 storage loot721 = loot721Array[call.ticketAdd][call.ticketId][call.index][call.lootAdd];\\n\\t\\t\\tticketReq = loot721.ticketReq;\\n\\t\\t\\tif (loot721.loot.length == 0) {\\n\\t\\t\\t\\tIERC1155(call.ticketAdd).safeTransferFrom(address(this), call.user, call.ticketId, ticketReq, \\\"\\\");\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\t_redeem721(loot721, randomWords[0], call.lootAdd, call.user);\\n\\t\\t}\\n\\t\\telse if (tokenType == 1155) {\\n\\t\\t\\tLoot1155 storage loot1155 = lootArray1155[call.ticketAdd][call.ticketId][call.index][call.lootAdd];\\n\\t\\t\\tticketReq = loot1155.ticketReq;\\n\\t\\t\\tif (loot1155.itemCount == 0) {\\n\\t\\t\\t\\tIERC1155(call.ticketAdd).safeTransferFrom(address(this), call.user, call.ticketId, ticketReq, \\\"\\\");\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\t_redeem1155(loot1155, randomWords[0], call.lootAdd, call.user);\\n\\t\\t}\\n\\n\\t\\tIERC1155(call.ticketAdd).safeTransferFrom(address(this), BURN_ADDRESS, call.ticketId, ticketReq, \\\"\\\");\\n\\t}\\n\\n\\tfunction _redeem20(uint256 _seed, address _lootAdd, address _receiver, uint256 _min, uint256 _max) internal {\\n\\t\\t_seed = uint256(keccak256(abi.encodePacked(_seed)));\\n\\t\\tuint256 amount = _min + _seed % (_max - _min + 1);\\n\\t\\tIERC20(_lootAdd).transfer(_receiver, amount);\\n\\t\\temit ItemRedeemed(_receiver, 20, _lootAdd, 0, amount);\\n\\t}\\n\\n\\tfunction _redeem721(Loot721 storage _loot, uint256 _seed, address _lootAdd, address _receiver) internal {\\n\\t\\tuint256 len = _loot.loot.length;\\n\\t\\t_seed = uint256(keccak256(abi.encodePacked(_seed))) % len;\\n\\t\\tuint256 tokenId = _loot.loot[_seed];\\n\\t\\t_loot.loot[_seed] = _loot.loot[len - 1];\\n\\t\\t_loot.loot.pop();\\n\\t\\tIERC721(_lootAdd).safeTransferFrom(address(this), _receiver, tokenId);\\n\\t\\temit ItemRedeemed(_receiver, 721, _lootAdd, tokenId, 0);\\n\\t}\\n\\n\\tfunction _redeem1155(Loot1155 storage _loot, uint256 _seed, address _lootAdd, address _receiver) internal {\\n\\t\\tuint256 rng = uint256(keccak256(abi.encodePacked(_seed))) % _loot.itemCount;\\n\\t\\tuint256 subGroupCount = _loot.subGroupCount;\\n\\t\\tuint256 rngCeiling;\\n\\t\\tuint256 returnId;\\n\\n\\t\\tfor (uint256 i = 0; i < subGroupCount; i++) {\\n\\t\\t\\trngCeiling += _loot.subGroups[i].totalItemCount;\\n\\t\\t\\tif (rng < rngCeiling) {\\n\\t\\t\\t\\tSubGroup storage sub = _loot.subGroups[i];\\n\\t\\t\\t\\trng = uint256(keccak256(abi.encodePacked(_seed))) % sub.totalItemCount;\\n\\t\\t\\t\\tuint256 itemCount = sub.tokenIds.length;\\n\\t\\t\\t\\trngCeiling = 0;\\n\\t\\t\\t\\tfor (uint256 j = 0; j < itemCount; j++) {\\n\\t\\t\\t\\t\\trngCeiling += sub.itemCount[j];\\n\\t\\t\\t\\t\\tif (rng < rngCeiling) {\\n\\t\\t\\t\\t\\t\\tsub.itemCount[j]--;\\n\\t\\t\\t\\t\\t\\tsub.totalItemCount--;\\n\\t\\t\\t\\t\\t\\t_loot.itemCount--;\\n\\t\\t\\t\\t\\t\\tIERC1155(_lootAdd).safeTransferFrom(address(this), _receiver, sub.tokenIds[j], 1, \\\"\\\");\\n\\t\\t\\t\\t\\t\\temit ItemRedeemed(_receiver, 1155, _lootAdd, sub.tokenIds[j], 1);\\n\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4) {\\n\\t\\treturn KongRedeemer.onERC721Received.selector;\\n\\t}\\n\\n\\tfunction onERC1155Received(address _operator, address _from, uint256 _id, uint256 _value, bytes calldata _data) external returns(bytes4) {\\n\\t\\treturn KongRedeemer.onERC1155Received.selector;\\n\\t}\\n}\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address internal _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"VRFConsumerBase2.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\nimport \\\"IVRFCoordinator2.sol\\\";\\nimport \\\"ILink.sol\\\";\\nimport \\\"Ownable.sol\\\";\\n\\nabstract contract VRFConsumerBaseV2 is Ownable {\\n\\n\\tstruct RequestConfig {\\n\\t\\tuint64 subId;\\n\\t\\tuint32 callbackGasLimit;\\n\\t\\tuint16 requestConfirmations;\\n\\t\\tuint32 numWords;\\n\\t\\tbytes32 keyHash;\\n\\t}\\n\\n\\tRequestConfig public config;\\n\\tVRFCoordinatorV2Interface private COORDINATOR;\\n\\tLinkTokenInterface private LINK;\\n\\n\\n\\t/**\\n\\t* @param _vrfCoordinator address of VRFCoordinator contract\\n\\t*/\\n\\t// poly coord: 0xAE975071Be8F8eE67addBC1A82488F1C24858067\\n\\t// poly link:  0xb0897686c545045afc77cf20ec7a532e3120e0f1\\n\\tconstructor(address _vrfCoordinator, address _link) public {\\n\\t\\tCOORDINATOR = VRFCoordinatorV2Interface(_vrfCoordinator);\\n\\t\\tLINK = LinkTokenInterface(_link);\\n\\t\\t\\n\\t\\tconfig = RequestConfig({\\n\\t\\t\\tsubId: 0,\\n\\t\\t\\tcallbackGasLimit: 1000000,\\n\\t\\t\\trequestConfirmations: 3,\\n\\t\\t\\tnumWords: 1,\\n\\t\\t\\tkeyHash: 0x6e099d640cde6de9d40ac749b4b594126b0169747122711109c9985d47751f93\\n\\t\\t});\\n\\t}\\n\\n\\tfunction _initVRF(address _vrfCoordinator, address _link) internal {\\n\\t\\tCOORDINATOR = VRFCoordinatorV2Interface(_vrfCoordinator);\\n\\t\\tLINK = LinkTokenInterface(_link);\\n\\t\\t\\n\\t\\tconfig = RequestConfig({\\n\\t\\t\\tsubId: 0,\\n\\t\\t\\tcallbackGasLimit: 1000000,\\n\\t\\t\\trequestConfirmations: 3,\\n\\t\\t\\tnumWords: 1,\\n\\t\\t\\tkeyHash: 0x6e099d640cde6de9d40ac749b4b594126b0169747122711109c9985d47751f93\\n\\t\\t});\\n\\t}\\n\\n\\t/**\\n\\t* @notice fulfillRandomness handles the VRF response. Your contract must\\n\\t* @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n\\t* @notice principles to keep in mind when implementing your fulfillRandomness\\n\\t* @notice method.\\n\\t*\\n\\t* @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n\\t* @dev signature, and will call it once it has verified the proof\\n\\t* @dev associated with the randomness. (It is triggered via a call to\\n\\t* @dev rawFulfillRandomness, below.)\\n\\t*\\n\\t* @param requestId The Id initially returned by requestRandomness\\n\\t* @param randomWords the VRF output expanded to the requested number of words\\n\\t*/\\n\\tfunction fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n\\t// rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n\\t// proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n\\t// the origin of the call\\n\\tfunction rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n\\t\\trequire (msg.sender == address(COORDINATOR), \\\"!coordinator\\\");\\n\\t\\tfulfillRandomWords(requestId, randomWords);\\n\\t}\\n\\n\\t  // Assumes the subscription is funded sufficiently.\\n\\tfunction requestRandomWords() internal returns(uint256 requestId) {\\n\\t\\tRequestConfig memory rc = config;\\n\\t\\t// Will revert if subscription is not set and funded.\\n\\t\\trequestId = COORDINATOR.requestRandomWords(\\n\\t\\t\\trc.keyHash,\\n\\t\\t\\trc.subId,\\n\\t\\t\\trc.requestConfirmations,\\n\\t\\t\\trc.callbackGasLimit,\\n\\t\\t\\trc.numWords\\n\\t\\t);\\n\\t}\\n\\n\\tfunction topUpSubscription(uint256 amount) external onlyOwner {\\n\\t\\tLINK.transferAndCall(address(COORDINATOR), amount, abi.encode(config.subId));\\n\\t}\\n\\n\\tfunction withdraw(uint256 amount, address to) external onlyOwner {\\n\\t\\tLINK.transfer(to, amount);\\n\\t}\\n\\n\\tfunction unsubscribe(address to) external onlyOwner {\\n\\t\\t// Returns funds to this address\\n\\t\\tCOORDINATOR.cancelSubscription(config.subId, to);\\n\\t\\tconfig.subId = 0;\\n\\t}\\n\\n\\tfunction subscribe() public onlyOwner {\\n\\t\\t// Create a subscription, current subId\\n\\t\\taddress[] memory consumers = new address[](1);\\n\\t\\tconsumers[0] = address(this);\\n\\t\\tconfig.subId = COORDINATOR.createSubscription();\\n\\t\\tCOORDINATOR.addConsumer(config.subId, consumers[0]);\\n\\t}\\n}\"\r\n    },\r\n    \"IVRFCoordinator2.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\"\r\n    },\r\n    \"ILink.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\"\r\n    },\r\n    \"SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lootAdd\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ItemRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"requestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"loot20Array\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketReq\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"loot721Array\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketReq\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lootArray1155\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketReq\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subGroupCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ticket\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ticketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ticketReq\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lootAdd\",\"type\":\"address\"},{\"internalType\":\"uint256[][]\",\"name\":\"_groupIds\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_groupCounts\",\"type\":\"uint256[][]\"}],\"name\":\"populateArray1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ticket\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ticketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ticketReq\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lootAdd\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"populateArray721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ticket\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ticketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ticketReq\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lootAdd\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"populateLoot20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ticket\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ticketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lootAdd\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ticketAdd\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lootAdd\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"topUpSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"unsubscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KongRedeemer", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ae975071be8f8ee67addbc1a82488f1c24858067000000000000000000000000b0897686c545045afc77cf20ec7a532e3120e0f1", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}