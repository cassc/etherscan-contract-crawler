{"SourceCode": "// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/elegantaccounts.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\n\r\nerror AdminUserOnly();\r\nerror NameCannotBeBlank();\r\nerror NameAlreadyInUse();\r\nerror RacerOwnershipIssues();\r\n\r\nstruct captaininfo{\r\n    uint16 captainid;\r\n    address capcontract;\r\n}\r\n\r\ninterface RacerInterface {\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n}\r\n\r\ncontract ElegantAccounts2 is Ownable {\r\n    \r\n    mapping(address => string)  nameByAddress;\r\n    mapping(string => bool) nameTaken;\r\n    mapping(address => captaininfo) captainMyCaptain;\r\n\r\n    address public admin;\r\n    address public racerAddy;\r\n\r\n    constructor() {\r\n        admin = msg.sender;\r\n        racerAddy = 0x72106Bbe2b447ECB9b52370Ddc63cfa8e553B08C;\r\n    }\r\n\r\n    //  //\r\n    function nameUpdate(string calldata _name, address _addy) public {\r\n        if (compareStrings(_name,\"\")) revert NameCannotBeBlank();\r\n        if (nameTaken[_name]) revert NameAlreadyInUse();\r\n        if (msg.sender != _addy && msg.sender != admin) revert AdminUserOnly();\r\n\r\n        string memory _old = nameByAddress[msg.sender];\r\n        nameByAddress[msg.sender] = _name;\r\n        nameTaken[_name] = true;\r\n        nameTaken[_old] = false;\r\n    }\r\n\r\n    function captainUpdate(uint16 _cap, address _addy, address _racercontract) public {\r\n        if (msg.sender != _addy && msg.sender != admin) revert AdminUserOnly();\r\n\r\n        address _owner;\r\n        _owner = RacerInterface(_racercontract).ownerOf(_cap);\r\n        if (_owner != _addy) revert RacerOwnershipIssues();\r\n        captaininfo memory _tempcapinfo;\r\n        _tempcapinfo.captainid = _cap;\r\n        _tempcapinfo.capcontract = _racercontract;\r\n        captainMyCaptain[_addy] = _tempcapinfo;\r\n    }\r\n    \r\n    function updateRacerAddress(address _new) public onlyOwner {\r\n        racerAddy = _new;\r\n    }\r\n\r\n    function getName(address _wallet) external view returns (string memory){\r\n        string memory _name = nameByAddress[_wallet];\r\n        return _name;\r\n    }\r\n\r\n    function getCaptain(address _wallet) external view returns (captaininfo memory){\r\n        return captainMyCaptain[_wallet];\r\n    }\r\n\r\n    function compareStrings(string memory a, string memory b) public pure returns (bool) {\r\n        return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AdminUserOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NameAlreadyInUse\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NameCannotBeBlank\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RacerOwnershipIssues\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_cap\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_addy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_racercontract\",\"type\":\"address\"}],\"name\":\"captainUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"a\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"b\",\"type\":\"string\"}],\"name\":\"compareStrings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getCaptain\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"captainid\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"capcontract\",\"type\":\"address\"}],\"internalType\":\"struct captaininfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_addy\",\"type\":\"address\"}],\"name\":\"nameUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"racerAddy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"updateRacerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ElegantAccounts2", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a27392c9e51f70cf9dac559239495aa32fef33414b9a5e63dfe0ab539ea4f0f5"}