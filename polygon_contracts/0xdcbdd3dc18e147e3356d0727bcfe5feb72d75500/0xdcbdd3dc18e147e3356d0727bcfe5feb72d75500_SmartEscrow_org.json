{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\n/**\r\n*   For SmartEscrow.org USD (SEUSD) - Know more about the project at SmartEscrow.org\r\n*\r\n*   This contract will act as a central Escrow contract for all transactions on the SmartEscrow.org\r\n*\r\n*/\r\n\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: contracts/SmartEscrow_org.sol\r\n\r\n\r\n\r\n/**\r\n *   For SmartEscrow.org USD (SEUSD) - Know more about the project at SmartEscrow.org\r\n *\r\n *   This contract will act as a central Escrow contract for all transactions on the SmartEscrow.org\r\n *\r\n */\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ncontract SmartEscrow_org is Ownable {\r\n    IERC20 public SEUSD;\r\n\r\n    enum TransactionState { Locked, Delivered, Released, DisputedByBuyer, DisputedBySeller, DisputeResolved }\r\n\r\n    struct Transaction {\r\n        address buyer;\r\n        address seller;\r\n        uint256 amount;\r\n        TransactionState state;\r\n        string optionalMessage;\r\n        uint256 optionalTimeInDays;\r\n        uint256 createdAt;\r\n        uint256 deliveredAt;\r\n        uint256 releasedAt;\r\n        uint256 disputedByBuyerAt;\r\n        uint256 disputedBySellerAt;\r\n        uint256 disputeResolvedAt;\r\n    }\r\n\r\n    struct TransactionInfo {\r\n        \r\n\r\n        uint256 transactionId;\r\n        uint256 amount;\r\n        TransactionState state;\r\n        string optionalMessage;\r\n        uint256 optionalTimeInDays;\r\n\r\n        address buyer;\r\n        address seller;\r\n        \r\n        uint256 deliveredAt;\r\n        uint256 releasedAt;\r\n        uint256 disputedByBuyerAt;\r\n        uint256 disputedBySellerAt;\r\n        uint256 disputeResolvedAt;\r\n    }\r\n\r\n    mapping(uint256 => Transaction) public transactions;\r\n    uint256 public transactionCount;\r\n\r\n    event TransactionCreated(\r\n        uint256 indexed transactionId,\r\n        address indexed buyer,\r\n        address indexed seller,\r\n        uint256 amount,\r\n        string optionalMessage,\r\n        uint256 optionalTimeInDays\r\n    );\r\n\r\n    event TransactionUpdated(uint256 indexed transactionId, TransactionState newState);\r\n    event DisputeResolved(uint256 indexed transactionId);\r\n    event FundsWithdrawn(uint256 indexed transactionId, uint256 amount);\r\n\r\n    constructor() {\r\n        SEUSD = IERC20(0x1Ae55197895ef0c09F3268320C6dceB2F2F17349);\r\n    }\r\n\r\n    function createTransaction(\r\n        address _seller,\r\n        uint256 _amount,\r\n        string calldata _optionalMessage,\r\n        uint256 _optionalTimeInDays\r\n    ) external {\r\n        require(_seller != address(0), \"Invalid seller address\");\r\n        require(_amount > 0, \"Amount must be greater than 0\");\r\n        require(_optionalTimeInDays <= 365, \"Optional time in days must not exceed 365 days\");\r\n\r\n        SEUSD.transferFrom(msg.sender, address(this), _amount);\r\n\r\n        transactions[transactionCount] = Transaction({\r\n            buyer: msg.sender,\r\n            seller: _seller,\r\n            amount: _amount,\r\n            state: TransactionState.Locked,\r\n            optionalMessage: _optionalMessage,\r\n            optionalTimeInDays: _optionalTimeInDays,\r\n            createdAt: block.timestamp,\r\n            deliveredAt: 0,\r\n            releasedAt: 0,\r\n            disputedByBuyerAt: 0,\r\n            disputedBySellerAt: 0,\r\n            disputeResolvedAt: 0\r\n        });\r\n\r\n        emit TransactionCreated(transactionCount, msg.sender, _seller, _amount, _optionalMessage, _optionalTimeInDays);\r\n        transactionCount++;\r\n    }\r\n\r\n    function deliver(uint256 _transactionId) external {\r\n        Transaction storage txn = transactions[_transactionId];\r\n\r\n        require(msg.sender == txn.seller, \"Only the seller can deliver the product/service\");\r\n        require(txn.state == TransactionState.Locked, \"Transaction must be in Locked state\");\r\n\r\n        txn.state = TransactionState.Delivered;\r\n        txn.deliveredAt = block.timestamp;\r\n\r\n        emit TransactionUpdated(_transactionId, txn.state);\r\n    }\r\n\r\n    function releaseFunds(uint256 _transactionId) external {\r\n        Transaction storage txn = transactions[_transactionId];\r\n\r\n        require(msg.sender == txn.buyer, \"Only the buyer can release funds\");\r\n        require(txn.state == TransactionState.Delivered, \"Transaction must be in Delivered state\");\r\n\r\n        txn.state = TransactionState.Released;\r\n        txn.releasedAt = block.timestamp;\r\n        SEUSD.transfer(txn.seller, txn.amount);\r\n\r\n        emit TransactionUpdated(_transactionId, txn.state);\r\n    }\r\n\r\n    function disputeTransaction(uint256 _transactionId) external {\r\n        Transaction storage txn = transactions[_transactionId];\r\n\r\n        require(msg.sender == txn.buyer || msg.sender == txn.seller, \"Only the buyer or seller can dispute the transaction\");\r\n        require(txn.state == TransactionState.Locked || txn.state == TransactionState.Delivered, \"Transaction must be in Locked or Delivered state\");\r\n\r\n        if (msg.sender == txn.buyer) {\r\n            txn.state = TransactionState.DisputedByBuyer;\r\n            txn.disputedByBuyerAt = block.timestamp;\r\n        } else {\r\n            txn.state = TransactionState.DisputedBySeller;\r\n            txn.disputedBySellerAt = block.timestamp;\r\n        }\r\n\r\n        emit TransactionUpdated(_transactionId, txn.state);\r\n    }\r\n\r\n    function resolveDispute(uint256 _transactionId) external onlyOwner {\r\n        Transaction storage txn = transactions[_transactionId];\r\n\r\n        require(txn.state == TransactionState.DisputedByBuyer || txn.state == TransactionState.DisputedBySeller, \"Transaction must be in a disputed state\");\r\n\r\n        txn.state = TransactionState.DisputeResolved;\r\n        txn.disputeResolvedAt = block.timestamp;\r\n\r\n        emit TransactionUpdated(_transactionId, txn.state);\r\n        emit DisputeResolved(_transactionId);\r\n    }\r\n\r\n    function withdrawFunds(uint256 _transactionId) external onlyOwner {\r\n        Transaction storage txn = transactions[_transactionId];\r\n\r\n        require(txn.state == TransactionState.DisputeResolved, \"Transaction must be in DisputeResolved state\");\r\n\r\n        uint256 amountToWithdraw = txn.amount;\r\n        txn.amount = 0;\r\n\r\n        SEUSD.transfer(owner(), amountToWithdraw);\r\n\r\n        emit FundsWithdrawn(_transactionId, amountToWithdraw);\r\n    }\r\n\r\n    function disputeByOwner(uint256 _transactionId) external onlyOwner {\r\n        Transaction storage txn = transactions[_transactionId];\r\n\r\n        require(txn.state == TransactionState.Locked, \"Transaction must be in Locked state\");\r\n\r\n        txn.state = TransactionState.DisputeResolved;\r\n        txn.disputeResolvedAt = block.timestamp;\r\n\r\n        emit TransactionUpdated(_transactionId, txn.state);\r\n    }\r\n\r\n    modifier onlyBuyerOrSeller(uint256 _transactionId) {\r\n        require(\r\n            msg.sender == transactions[_transactionId].buyer || msg.sender == transactions[_transactionId].seller,\r\n            \"Only the buyer or seller can call this function\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function releaseFundsAfterOptionalTime(uint256 _transactionId) external onlyBuyerOrSeller(_transactionId) {\r\n        Transaction storage txn = transactions[_transactionId];\r\n\r\n        require(txn.state == TransactionState.Delivered, \"Transaction must be in Delivered state\");\r\n        require(txn.optionalTimeInDays > 0, \"Optional time must be greater than 0\");\r\n\r\n        uint256 timePassedInDays = (block.timestamp - txn.createdAt) / 1 days;\r\n        require(timePassedInDays >= txn.optionalTimeInDays, \"Optional time has not yet passed\");\r\n\r\n        txn.state = TransactionState.Released;\r\n        txn.releasedAt = block.timestamp;\r\n        SEUSD.transfer(txn.seller, txn.amount);\r\n\r\n        emit TransactionUpdated(_transactionId, txn.state);\r\n    }\r\n\r\n    function checkTransactions(address _user)\r\n        external\r\n        view\r\n        returns (uint256 totalTransactions, TransactionInfo[] memory userTransactionsInfo)\r\n    {\r\n        uint256[] memory userTransactions = new uint256[](transactionCount);\r\n\r\n        uint256 userTransactionCount = 0;\r\n        for (uint256 i = 0; i < transactionCount; i++) {\r\n            if (transactions[i].buyer == _user || transactions[i].seller == _user) {\r\n                userTransactions[userTransactionCount] = i;\r\n                userTransactionCount++;\r\n            }\r\n        }\r\n\r\n        TransactionInfo[] memory userTransactionsDetails = new TransactionInfo[](userTransactionCount);\r\n        for (uint256 i = 0; i < userTransactionCount; i++) {\r\n            uint256 transactionId = userTransactions[i];\r\n            userTransactionsDetails[i] = TransactionInfo({\r\n                transactionId: transactionId,\r\n                amount: transactions[transactionId].amount,\r\n                state: transactions[transactionId].state,\r\n                optionalMessage: transactions[transactionId].optionalMessage,\r\n                optionalTimeInDays: transactions[transactionId].optionalTimeInDays,\r\n                buyer: transactions[transactionId].buyer,\r\n                seller: transactions[transactionId].seller,\r\n                deliveredAt: transactions[transactionId].deliveredAt,\r\n                releasedAt: transactions[transactionId].releasedAt,\r\n                disputedByBuyerAt: transactions[transactionId].disputedByBuyerAt,\r\n                disputedBySellerAt: transactions[transactionId].disputedBySellerAt,\r\n                disputeResolvedAt: transactions[transactionId].disputeResolvedAt\r\n            });\r\n        }\r\n\r\n        return (transactionCount, userTransactionsDetails);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"DisputeResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"optionalMessage\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"optionalTimeInDays\",\"type\":\"uint256\"}],\"name\":\"TransactionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum SmartEscrow_org.TransactionState\",\"name\":\"newState\",\"type\":\"uint8\"}],\"name\":\"TransactionUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SEUSD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkTransactions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTransactions\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum SmartEscrow_org.TransactionState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"optionalMessage\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"optionalTimeInDays\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deliveredAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"disputedByBuyerAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"disputedBySellerAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"disputeResolvedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct SmartEscrow_org.TransactionInfo[]\",\"name\":\"userTransactionsInfo\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_optionalMessage\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_optionalTimeInDays\",\"type\":\"uint256\"}],\"name\":\"createTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"disputeByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"disputeTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"releaseFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"releaseFundsAfterOptionalTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"resolveDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum SmartEscrow_org.TransactionState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"optionalMessage\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"optionalTimeInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deliveredAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"disputedByBuyerAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"disputedBySellerAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"disputeResolvedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transactionId\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SmartEscrow_org", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e58ebb7a8b1ef530e1436b3a15702cc7f63ebf4014ca2a98ad7162df240a91a7"}