{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address account) external view returns (uint);\r\n\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\ncontract SNGtoken is IERC20 {\r\n    uint public totalSupply;\r\n    mapping(address => uint) public balanceOf;\r\n    mapping(address => mapping(address => uint)) public allowance;\r\n    string public name = \"Synergy\";\r\n    string public symbol = \"SNG\";\r\n    uint8 public decimals = 1;\r\n\r\n    struct User{\r\n        string name;\r\n        address _address;\r\n        uint256 balance;\r\n        string role;\r\n    }\r\n\r\n    address public owner;\r\n    bool private paused;\r\n\r\n    address[] public users;\r\n    address[] public managers;\r\n    string[] public userNames;\r\n    string[] public managerNames;\r\n    mapping(address => string) public names;\r\n\r\n    mapping(address => bool) public transactionPermission;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    constructor ()  {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n        paused = false;\r\n    }\r\n\r\n    //MODIFIERS\r\n    modifier onlyOwner(){\r\n        require(msg.sender == owner, \"Ownable Function: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyUsers(address _address) {\r\n        require(transactionPermission[_address] == true, \"transaction is not allowed\");\r\n        _;\r\n    }\r\n\r\n    modifier isPaused(){\r\n        require(paused == false, \"Contract is paused\");\r\n        _;\r\n    }\r\n   \r\n\r\n    //OWNER MANAGEMENT FUNCTIONS\r\n    function whoIsOwner() public view returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function changeOwner(address _newOwner) public onlyOwner {\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n    //USER MANAGEMENT FUNCTIONS\r\n    function addUser(string memory _userName, address _newUser) onlyOwner external {\r\n        for(uint256 i = 0; i < users.length; i++){\r\n            if(users[i] == _newUser){\r\n                revert(\"this address is already added to users\");\r\n            }\r\n        }\r\n        users.push(_newUser);\r\n        userNames.push(_userName);\r\n        transactionPermission[_newUser] = true;\r\n    }\r\n\r\n    function removeUser(address _user) onlyOwner external{\r\n        uint256 index = users.length;\r\n        for(uint256 i = 0; i < users.length; i++){\r\n            if(users[i] == _user){\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n        if(index == users.length){\r\n            revert(\"this user does not exist\");\r\n        }\r\n        for(uint256 i = index; i < users.length - 1; i++){\r\n            users[i] = users[i+1];\r\n            userNames[i] = userNames[i+1];\r\n        }\r\n        users.pop();\r\n        userNames.pop();\r\n        transactionPermission[_user] = false;\r\n    }\r\n\r\n    // MANAGER MANAGEMENT FUNCTIONS\r\n    function addManager(string memory _managerName, address _newManager) onlyOwner external {\r\n        for(uint256 i = 0; i < managers.length; i++){\r\n            if(managers[i] == _newManager){\r\n                revert(\"this address is already added to managers\");\r\n            }\r\n        }\r\n        managers.push(_newManager);\r\n        managerNames.push(_managerName);\r\n        transactionPermission[_newManager] = true;\r\n    }\r\n\r\n    function removeManager(address _manager) onlyOwner external{\r\n        uint256 index = managers.length;\r\n        for(uint256 i = 0; i < managers.length; i++){\r\n            if(managers[i] == _manager){\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n        if(index == managers.length){\r\n            revert(\"this manager does not exist\");\r\n        }\r\n        for(uint256 i = index; i < managers.length - 1; i++){\r\n            managers[i] = managers[i+1];\r\n            managerNames[i] = managerNames[i+1];\r\n        }\r\n        managers.pop();\r\n        managerNames.pop();\r\n        transactionPermission[_manager] = false;\r\n    }\r\n\r\n    \r\n    //TOKEN FUNCTIONS\r\n    function transfer(address recipient, uint amount) onlyUsers(recipient) isPaused external returns (bool) {\r\n        balanceOf[msg.sender] -= amount;\r\n        balanceOf[recipient] += amount;\r\n        emit Transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint amount) onlyUsers(spender) external returns (bool) {\r\n        allowance[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) onlyUsers(recipient) isPaused external returns (bool) {\r\n        allowance[sender][msg.sender] -= amount;\r\n        balanceOf[sender] -= amount;\r\n        balanceOf[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    //MINTING AND BURNING FUNCTIONS\r\n    function monthlyMintforUsers(uint256 amount) onlyOwner external {\r\n        for(uint256 i = 0; i < users.length ; i++){\r\n            balanceOf[users[i]] += amount;\r\n            emit Transfer(address(0), users[i], amount);\r\n        }\r\n        totalSupply += amount * users.length;\r\n    }\r\n\r\n    function monthlyResetforManagers(uint256 amount) onlyOwner external{\r\n        uint256 managersSupply = 0;\r\n        for(uint256 i = 0; i < managers.length ; i++){\r\n            managersSupply += balanceOf[managers[i]];\r\n            emit Transfer(managers[i], address(0), balanceOf[managers[i]]);\r\n            balanceOf[managers[i]] = amount;\r\n            emit Transfer(address(0), managers[i], amount);\r\n        }\r\n        totalSupply = totalSupply - managersSupply + (managers.length * amount);\r\n    }\r\n\r\n    function burn(address _address, uint256 amount) onlyOwner external {\r\n        balanceOf[_address] -= amount;\r\n        totalSupply -= amount;\r\n        emit Transfer(_address, address(0), amount); \r\n    }\r\n\r\n    //PAUSE AND UNPAUSE FUNCTIONS\r\n    function pause() onlyOwner public{\r\n        require(paused == false,\"Contract is already paused\");\r\n        paused = true;\r\n    }\r\n\r\n    function unpause() onlyOwner public{\r\n        require(paused == true,\"Contract is not paused\");\r\n        paused = false;\r\n    }\r\n    \r\n    //INFORMATION FUNCTIONS\r\n    function showTotalSupply() public view returns(uint256){\r\n        return totalSupply;\r\n    }\r\n\r\n    function showBalance(address _address) public view returns(uint256){\r\n        return balanceOf[_address];\r\n    }\r\n\r\n    function usersList() public view returns(string[] memory nameList, address[] memory addressList, uint256[] memory balanceList, string[] memory roleList){\r\n        address[] memory allAddresses = new address[](users.length+ managers.length);\r\n        string[] memory allNames = new string[](users.length+ managers.length);\r\n        uint256[] memory allBalances = new uint256[](users.length + managers.length);\r\n        string[] memory allRoles = new string[](users.length+ managers.length);\r\n        \r\n        for(uint256 i = 0; i < users.length; i++){\r\n            allAddresses[i] = users[i];\r\n            allNames[i] = userNames[i];\r\n            allBalances[i] = balanceOf[users[i]];\r\n            allRoles[i] = \"USER\";\r\n        }\r\n\r\n        for(uint256 i = 0; i < managers.length; i++){\r\n            allAddresses[users.length + i] = managers[i];\r\n            allNames[users.length + i] = managerNames[i];\r\n            allBalances[users.length + i] = balanceOf[managers[i]];\r\n            allRoles[users.length + i] = \"MANAGER\";\r\n        }\r\n        return(allNames,allAddresses,allBalances,allRoles);\r\n\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_managerName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_userName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_newUser\",\"type\":\"address\"}],\"name\":\"addUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"managerNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"managers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"monthlyMintforUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"monthlyResetforManagers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"names\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"showBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"transactionPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usersList\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"nameList\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"addressList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balanceList\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"roleList\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whoIsOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SNGtoken", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://428a7dabd81f88960f8d3cbc86cc3f69e6effc5d5e8e94665335dd046d95f229"}