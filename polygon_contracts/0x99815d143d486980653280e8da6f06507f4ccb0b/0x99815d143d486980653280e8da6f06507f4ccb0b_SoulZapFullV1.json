{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/extensions/ApeBond/ApeBond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../../SoulZap.sol\\\";\\r\\nimport \\\"./lib/ICustomBillRefillable.sol\\\";\\r\\nimport \\\"../../lib/IApeRouter02.sol\\\";\\r\\nimport \\\"../../lib/ISoulZap.sol\\\";\\r\\nimport \\\"../../SoulFee.sol\\\";\\r\\n\\r\\nabstract contract ApeBond is SoulZap {\\r\\n    event ZapBond(ZapParamsBond zapParamsBond);\\r\\n    event ZapBondNative(ZapParamsBondNative zapParamsBondNative);\\r\\n    bool public apeBondPaused = false;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    modifier whenNotPausedApeBond() {\\r\\n        require(!paused() && !apeBondPaused, \\\"Paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function pauseApeBond() public onlyOwner {\\r\\n        apeBondPaused = true;\\r\\n    }\\r\\n\\r\\n    function unpauseApeBond() public onlyOwner {\\r\\n        apeBondPaused = false;\\r\\n    }\\r\\n\\r\\n    /// @notice Zap single token to LP\\r\\n    /// @param zapParamsBond all parameters for Bond zap\\r\\n    /// inputToken Input token to zap\\r\\n    /// inputAmount Amount of input tokens to zap\\r\\n    /// underlyingTokens Tokens of LP to zap to\\r\\n    /// paths Path from input token to LP token0\\r\\n    /// minAmounts The minimum amount of output tokens that must be received for\\r\\n    ///   swap and AmountAMin and amountBMin for adding liquidity\\r\\n    /// deadline Unix timestamp after which the transaction will revert\\r\\n    /// bill Treasury bill address\\r\\n    /// maxPrice Max price of treasury bill\\r\\n    function zapBond(ZapParamsBond memory zapParamsBond) external nonReentrant whenNotPausedApeBond {\\r\\n        IApePair pair = IApePair(zapParamsBond.bill.principalToken());\\r\\n        require(\\r\\n            (zapParamsBond.zapParams.token0 == pair.token0() && zapParamsBond.zapParams.token1 == pair.token1()) ||\\r\\n                (zapParamsBond.zapParams.token1 == pair.token0() && zapParamsBond.zapParams.token0 == pair.token1()),\\r\\n            \\\"ApeBond: Wrong LP pair for Bond\\\"\\r\\n        );\\r\\n        address to = zapParamsBond.zapParams.to;\\r\\n        zapParamsBond.zapParams.to = address(this);\\r\\n        _zapInternal(zapParamsBond.zapParams, soulFee.getFee(\\\"apebond-bond-zap\\\"));\\r\\n\\r\\n        uint256 balance = pair.balanceOf(address(this));\\r\\n        pair.approve(address(zapParamsBond.bill), balance);\\r\\n        zapParamsBond.bill.deposit(balance, zapParamsBond.maxPrice, to);\\r\\n        pair.approve(address(zapParamsBond.bill), 0);\\r\\n        emit ZapBond(zapParamsBond);\\r\\n    }\\r\\n\\r\\n    /// @notice Zap native token to Treasury Bill\\r\\n    /// @param zapParamsBondNative all parameters for native Bond zap\\r\\n    /// underlyingTokens Tokens of LP to zap to\\r\\n    /// paths Path from input token to LP token0\\r\\n    /// minAmounts The minimum amount of output tokens that must be received for\\r\\n    ///   swap and AmountAMin and amountBMin for adding liquidity\\r\\n    /// deadline Unix timestamp after which the transaction will revert\\r\\n    /// bill Treasury bill address\\r\\n    /// maxPrice Max price of treasury bill\\r\\n    function zapBondNative(\\r\\n        ZapParamsBondNative memory zapParamsBondNative\\r\\n    ) external payable nonReentrant whenNotPausedApeBond {\\r\\n        IApePair pair = IApePair(zapParamsBondNative.bill.principalToken());\\r\\n        require(\\r\\n            (zapParamsBondNative.zapParamsNative.token0 == pair.token0() &&\\r\\n                zapParamsBondNative.zapParamsNative.token1 == pair.token1()) ||\\r\\n                (zapParamsBondNative.zapParamsNative.token1 == pair.token0() &&\\r\\n                    zapParamsBondNative.zapParamsNative.token0 == pair.token1()),\\r\\n            \\\"ApeBond: Wrong LP pair for Bond\\\"\\r\\n        );\\r\\n        address to = zapParamsBondNative.zapParamsNative.to;\\r\\n        zapParamsBondNative.zapParamsNative.to = address(this);\\r\\n        _zapNativeInternal(zapParamsBondNative.zapParamsNative, soulFee.getFee(\\\"apebond-bond-zap\\\"));\\r\\n\\r\\n        uint256 balance = pair.balanceOf(address(this));\\r\\n        pair.approve(address(zapParamsBondNative.bill), balance);\\r\\n        zapParamsBondNative.bill.deposit(balance, zapParamsBondNative.maxPrice, to);\\r\\n        pair.approve(address(zapParamsBondNative.bill), 0);\\r\\n        emit ZapBondNative(zapParamsBondNative);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/extensions/ApeBond/lib/ICustomBillRefillable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.8.0. SEE SOURCE BELOW. !!\\r\\npragma solidity >=0.7.0 <0.9.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface ICustomBillRefillable {\\r\\n    event BillClaimed(uint256 indexed billId, address indexed recipient, uint256 payout, uint256 remaining);\\r\\n    event BillCreated(uint256 deposit, uint256 payout, uint256 expires, uint256 indexed billId);\\r\\n    event BillInitialized(ICustomBill.BillTerms billTerms, uint256 lastDecay);\\r\\n    event BillPriceChanged(uint256 internalPrice, uint256 debtRatio);\\r\\n    event BillRefilled(address payoutToken, uint256 amountAdded);\\r\\n    event ControlVariableAdjustment(uint256 initialBCV, uint256 newBCV, uint256 adjustment);\\r\\n    event FeeToChanged(address indexed newFeeTo);\\r\\n    event Initialized(uint8 version);\\r\\n    event MaxTotalPayoutChanged(uint256 newMaxTotalPayout);\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\r\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\r\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\r\\n    event SetAdjustment(uint256 currentBCV, uint256 increment, uint256 targetBCV, uint256 buffer);\\r\\n    event SetFees(uint256[] fees, uint256[] tierCeilings);\\r\\n    event SetPendingOwner(address indexed pendingOwner);\\r\\n    event TermsSet(uint8 parameter, uint256 input);\\r\\n    event UpdateClaimApproval(address indexed owner, address indexed approvedAccount, bool approved);\\r\\n\\r\\n    function DAO() external view returns (address);\\r\\n\\r\\n    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);\\r\\n\\r\\n    function MAX_FEE() external view returns (uint256);\\r\\n\\r\\n    function REFILL_ROLE() external view returns (bytes32);\\r\\n\\r\\n    function acceptOwnership() external;\\r\\n\\r\\n    function adjustment()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 rate, uint256 target, uint256 buffer, uint256 lastAdjustmentTimestamp);\\r\\n\\r\\n    function allIssuedBillIds() external view returns (uint256[] memory);\\r\\n\\r\\n    function batchClaim(uint256[] memory _billIds) external returns (uint256 payout);\\r\\n\\r\\n    function batchRedeem(uint256[] memory _billIds) external returns (uint256 payout);\\r\\n\\r\\n    function billInfo(\\r\\n        uint256\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 payout,\\r\\n            uint256 payoutClaimed,\\r\\n            uint256 vesting,\\r\\n            uint256 vestingTerm,\\r\\n            uint256 vestingStartTimestamp,\\r\\n            uint256 lastClaimTimestamp,\\r\\n            uint256 truePricePaid\\r\\n        );\\r\\n\\r\\n    function billNft() external view returns (address);\\r\\n\\r\\n    function billPrice() external view returns (uint256 price_);\\r\\n\\r\\n    function changeFeeTo(address _feeTo) external;\\r\\n\\r\\n    function claim(uint256 _billId) external returns (uint256);\\r\\n\\r\\n    function claimablePayout(uint256 _billId) external view returns (uint256 claimablePayout_);\\r\\n\\r\\n    function currentDebt() external view returns (uint256);\\r\\n\\r\\n    function currentFee() external view returns (uint256 currentFee_);\\r\\n\\r\\n    function customTreasury() external view returns (address);\\r\\n\\r\\n    function debtDecay() external view returns (uint256 decay_);\\r\\n\\r\\n    function debtRatio() external view returns (uint256 debtRatio_);\\r\\n\\r\\n    function deposit(uint256 _amount, uint256 _maxPrice, address _depositor) external returns (uint256);\\r\\n\\r\\n    function feeInPayout() external view returns (bool);\\r\\n\\r\\n    function feeTiers(uint256) external view returns (uint256 tierCeilings, uint256 fees);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function getBillIds(address user) external view returns (uint256[] memory);\\r\\n\\r\\n    function getBillIdsInRange(address user, uint256 start, uint256 end) external view returns (uint256[] memory);\\r\\n\\r\\n    function getBillInfo(uint256 billId) external view returns (ICustomBill.Bill memory);\\r\\n\\r\\n    function getFeeTierLength() external view returns (uint256 tierLength_);\\r\\n\\r\\n    function getMaxTotalPayout() external view returns (uint256);\\r\\n\\r\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\r\\n\\r\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\r\\n\\r\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\r\\n\\r\\n    function grantRefillRole(address[] memory _billRefillers) external;\\r\\n\\r\\n    function grantRole(bytes32 role, address account) external;\\r\\n\\r\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\r\\n\\r\\n    function initialize(\\r\\n        address _customTreasury,\\r\\n        ICustomBill.BillCreationDetails memory _billCreationDetails,\\r\\n        ICustomBill.BillTerms memory _billTerms,\\r\\n        ICustomBill.BillAccounts memory _billAccounts,\\r\\n        address[] memory _billRefillers\\r\\n    ) external;\\r\\n\\r\\n    function initialize(\\r\\n        address _customTreasury,\\r\\n        ICustomBill.BillCreationDetails memory _billCreationDetails,\\r\\n        ICustomBill.BillTerms memory _billTerms,\\r\\n        ICustomBill.BillAccounts memory _billAccounts\\r\\n    ) external;\\r\\n\\r\\n    function lastDecay() external view returns (uint256);\\r\\n\\r\\n    function maxPayout() external view returns (uint256);\\r\\n\\r\\n    function owner() external view returns (address);\\r\\n\\r\\n    function payoutFor(uint256 _amount) external view returns (uint256 _payout, uint256 _fee);\\r\\n\\r\\n    function payoutToken() external view returns (address);\\r\\n\\r\\n    function pendingOwner() external view returns (address);\\r\\n\\r\\n    function pendingPayout(uint256 _billId) external view returns (uint256 pendingPayout_);\\r\\n\\r\\n    function pendingVesting(uint256 _billId) external view returns (uint256 pendingVesting_);\\r\\n\\r\\n    function principalToken() external view returns (address);\\r\\n\\r\\n    function redeem(uint256 _billId) external returns (uint256);\\r\\n\\r\\n    function redeemerApproved(address, address) external view returns (bool);\\r\\n\\r\\n    function refillPayoutToken(uint256 _refillAmount) external;\\r\\n\\r\\n    function renounceOwnership() external;\\r\\n\\r\\n    function renounceRole(bytes32 role, address account) external;\\r\\n\\r\\n    function revokeRefillRole(address[] memory _billRefillers) external;\\r\\n\\r\\n    function revokeRole(bytes32 role, address account) external;\\r\\n\\r\\n    function setAdjustment(uint256 _rate, uint256 _target, uint256 _buffer) external;\\r\\n\\r\\n    function setBillTerms(uint8 _parameter, uint256 _input) external;\\r\\n\\r\\n    function setClaimApproval(address approvedAccount, bool approved) external;\\r\\n\\r\\n    function setFeeTiers(uint256[] memory fees, uint256[] memory tierCeilings) external;\\r\\n\\r\\n    function setMaxTotalPayout(uint256 _maxTotalPayout) external;\\r\\n\\r\\n    function setPendingOwner(address newPendingOwner) external;\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n\\r\\n    function terms()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 controlVariable,\\r\\n            uint256 vestingTerm,\\r\\n            uint256 minimumPrice,\\r\\n            uint256 maxPayout,\\r\\n            uint256 maxDebt,\\r\\n            uint256 maxTotalPayout,\\r\\n            uint256 initialDebt\\r\\n        );\\r\\n\\r\\n    function totalDebt() external view returns (uint256);\\r\\n\\r\\n    function totalPayoutGiven() external view returns (uint256);\\r\\n\\r\\n    function totalPrincipalBilled() external view returns (uint256);\\r\\n\\r\\n    function transferOwnership(address) external view;\\r\\n\\r\\n    function trueBillPrice() external view returns (uint256 price_);\\r\\n\\r\\n    function userBillIds() external view returns (uint256[] memory);\\r\\n\\r\\n    function vestedPayoutAtTime(uint256 _billId, uint256 _timestamp) external view returns (uint256 vestedPayout_);\\r\\n\\r\\n    function vestingCurve() external view returns (address);\\r\\n\\r\\n    function vestingPayout(uint256 _billId) external view returns (uint256 vestingPayout_);\\r\\n\\r\\n    function vestingPeriod(uint256 _billId) external view returns (uint256 vestingStart_, uint256 vestingEnd_);\\r\\n}\\r\\n\\r\\ninterface ICustomBill {\\r\\n    struct BillTerms {\\r\\n        uint256 controlVariable;\\r\\n        uint256 vestingTerm;\\r\\n        uint256 minimumPrice;\\r\\n        uint256 maxPayout;\\r\\n        uint256 maxDebt;\\r\\n        uint256 maxTotalPayout;\\r\\n        uint256 initialDebt;\\r\\n    }\\r\\n\\r\\n    struct Bill {\\r\\n        uint256 payout;\\r\\n        uint256 payoutClaimed;\\r\\n        uint256 vesting;\\r\\n        uint256 vestingTerm;\\r\\n        uint256 vestingStartTimestamp;\\r\\n        uint256 lastClaimTimestamp;\\r\\n        uint256 truePricePaid;\\r\\n    }\\r\\n\\r\\n    struct BillCreationDetails {\\r\\n        address payoutToken;\\r\\n        address principalToken;\\r\\n        address initialOwner;\\r\\n        address vestingCurve;\\r\\n        uint256[] tierCeilings;\\r\\n        uint256[] fees;\\r\\n        bool feeInPayout;\\r\\n    }\\r\\n\\r\\n    struct BillAccounts {\\r\\n        address feeTo;\\r\\n        address DAO;\\r\\n        address billNft;\\r\\n    }\\r\\n}\\r\\n\\r\\n// THIS FILE WAS AUTOGENERATED FROM THE FOLLOWING ABI JSON:\\r\\n/*\\r\\n[{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"billId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"recipient\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"payout\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"remaining\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"BillClaimed\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"deposit\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"payout\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"expires\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"billId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"BillCreated\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"components\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"controlVariable\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"vestingTerm\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"minimumPrice\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"maxPayout\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"maxDebt\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"maxTotalPayout\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"initialDebt\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"indexed\\\":false,\\\"internalType\\\":\\\"struct ICustomBill.BillTerms\\\",\\\"name\\\":\\\"billTerms\\\",\\\"type\\\":\\\"tuple\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"lastDecay\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"BillInitialized\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"internalPrice\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"debtRatio\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"BillPriceChanged\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"payoutToken\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountAdded\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"BillRefilled\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"initialBCV\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"newBCV\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"adjustment\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"ControlVariableAdjustment\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"newFeeTo\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"FeeToChanged\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint8\\\",\\\"name\\\":\\\"version\\\",\\\"type\\\":\\\"uint8\\\"}],\\\"name\\\":\\\"Initialized\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"newMaxTotalPayout\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"MaxTotalPayoutChanged\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"previousOwner\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"newOwner\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"OwnershipTransferred\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"role\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"previousAdminRole\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"newAdminRole\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"name\\\":\\\"RoleAdminChanged\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"role\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"account\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"sender\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"RoleGranted\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"role\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"account\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"sender\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"RoleRevoked\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"currentBCV\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"increment\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"targetBCV\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"buffer\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"SetAdjustment\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"fees\\\",\\\"type\\\":\\\"uint256[]\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"tierCeilings\\\",\\\"type\\\":\\\"uint256[]\\\"}],\\\"name\\\":\\\"SetFees\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"pendingOwner\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"SetPendingOwner\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"enum CustomBill.PARAMETER\\\",\\\"name\\\":\\\"parameter\\\",\\\"type\\\":\\\"uint8\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"input\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"TermsSet\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"owner\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"approvedAccount\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"approved\\\",\\\"type\\\":\\\"bool\\\"}],\\\"name\\\":\\\"UpdateClaimApproval\\\",\\\"type\\\":\\\"event\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"DAO\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"DEFAULT_ADMIN_ROLE\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"MAX_FEE\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"REFILL_ROLE\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"acceptOwnership\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"adjustment\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"rate\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"target\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"buffer\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"lastAdjustmentTimestamp\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"allIssuedBillIds\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256[]\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"_billIds\\\",\\\"type\\\":\\\"uint256[]\\\"}],\\\"name\\\":\\\"batchClaim\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"payout\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"_billIds\\\",\\\"type\\\":\\\"uint256[]\\\"}],\\\"name\\\":\\\"batchRedeem\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"payout\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"billInfo\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"payout\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"payoutClaimed\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"vesting\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"vestingTerm\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"vestingStartTimestamp\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"lastClaimTimestamp\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"truePricePaid\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"billNft\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"contract IBillNft\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"billPrice\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"price_\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"_feeTo\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"changeFeeTo\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_billId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"claim\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_billId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"claimablePayout\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"claimablePayout_\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"currentDebt\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"currentFee\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"currentFee_\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"customTreasury\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"contract ICustomTreasury\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"debtDecay\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"decay_\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"debtRatio\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"debtRatio_\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_amount\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_maxPrice\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"_depositor\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"deposit\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"feeInPayout\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"feeTiers\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tierCeilings\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"fees\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"feeTo\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"user\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"getBillIds\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256[]\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"user\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"start\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"end\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"getBillIdsInRange\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256[]\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"billId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"getBillInfo\\\",\\\"outputs\\\":[{\\\"components\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"payout\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"payoutClaimed\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"vesting\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"vestingTerm\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"vestingStartTimestamp\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"lastClaimTimestamp\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"truePricePaid\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"internalType\\\":\\\"struct ICustomBill.Bill\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"tuple\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"getFeeTierLength\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tierLength_\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"getMaxTotalPayout\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"role\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"name\\\":\\\"getRoleAdmin\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"role\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"index\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"getRoleMember\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"role\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"name\\\":\\\"getRoleMemberCount\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"_billRefillers\\\",\\\"type\\\":\\\"address[]\\\"}],\\\"name\\\":\\\"grantRefillRole\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"role\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"account\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"grantRole\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"role\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"account\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"hasRole\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"contract ICustomTreasury\\\",\\\"name\\\":\\\"_customTreasury\\\",\\\"type\\\":\\\"address\\\"},{\\\"components\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"payoutToken\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"principalToken\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"initialOwner\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"contract IVestingCurve\\\",\\\"name\\\":\\\"vestingCurve\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"tierCeilings\\\",\\\"type\\\":\\\"uint256[]\\\"},{\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"fees\\\",\\\"type\\\":\\\"uint256[]\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"feeInPayout\\\",\\\"type\\\":\\\"bool\\\"}],\\\"internalType\\\":\\\"struct ICustomBill.BillCreationDetails\\\",\\\"name\\\":\\\"_billCreationDetails\\\",\\\"type\\\":\\\"tuple\\\"},{\\\"components\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"controlVariable\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"vestingTerm\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"minimumPrice\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"maxPayout\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"maxDebt\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"maxTotalPayout\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"initialDebt\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"internalType\\\":\\\"struct ICustomBill.BillTerms\\\",\\\"name\\\":\\\"_billTerms\\\",\\\"type\\\":\\\"tuple\\\"},{\\\"components\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"feeTo\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"DAO\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"billNft\\\",\\\"type\\\":\\\"address\\\"}],\\\"internalType\\\":\\\"struct ICustomBill.BillAccounts\\\",\\\"name\\\":\\\"_billAccounts\\\",\\\"type\\\":\\\"tuple\\\"},{\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"_billRefillers\\\",\\\"type\\\":\\\"address[]\\\"}],\\\"name\\\":\\\"initialize\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"contract ICustomTreasury\\\",\\\"name\\\":\\\"_customTreasury\\\",\\\"type\\\":\\\"address\\\"},{\\\"components\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"payoutToken\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"principalToken\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"initialOwner\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"contract IVestingCurve\\\",\\\"name\\\":\\\"vestingCurve\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"tierCeilings\\\",\\\"type\\\":\\\"uint256[]\\\"},{\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"fees\\\",\\\"type\\\":\\\"uint256[]\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"feeInPayout\\\",\\\"type\\\":\\\"bool\\\"}],\\\"internalType\\\":\\\"struct ICustomBill.BillCreationDetails\\\",\\\"name\\\":\\\"_billCreationDetails\\\",\\\"type\\\":\\\"tuple\\\"},{\\\"components\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"controlVariable\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"vestingTerm\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"minimumPrice\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"maxPayout\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"maxDebt\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"maxTotalPayout\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"initialDebt\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"internalType\\\":\\\"struct ICustomBill.BillTerms\\\",\\\"name\\\":\\\"_billTerms\\\",\\\"type\\\":\\\"tuple\\\"},{\\\"components\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"feeTo\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"DAO\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"billNft\\\",\\\"type\\\":\\\"address\\\"}],\\\"internalType\\\":\\\"struct ICustomBill.BillAccounts\\\",\\\"name\\\":\\\"_billAccounts\\\",\\\"type\\\":\\\"tuple\\\"}],\\\"name\\\":\\\"initialize\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"lastDecay\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"maxPayout\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"owner\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_amount\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"payoutFor\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_payout\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_fee\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"payoutToken\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"contract IERC20MetadataUpgradeable\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"pendingOwner\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_billId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"pendingPayout\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"pendingPayout_\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_billId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"pendingVesting\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"pendingVesting_\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"principalToken\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"contract IERC20MetadataUpgradeable\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_billId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"redeem\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"redeemerApproved\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_refillAmount\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"refillPayoutToken\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"renounceOwnership\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"role\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"account\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"renounceRole\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"_billRefillers\\\",\\\"type\\\":\\\"address[]\\\"}],\\\"name\\\":\\\"revokeRefillRole\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"role\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"account\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"revokeRole\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_rate\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_target\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_buffer\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"setAdjustment\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"enum CustomBill.PARAMETER\\\",\\\"name\\\":\\\"_parameter\\\",\\\"type\\\":\\\"uint8\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_input\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"setBillTerms\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"approvedAccount\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"approved\\\",\\\"type\\\":\\\"bool\\\"}],\\\"name\\\":\\\"setClaimApproval\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"fees\\\",\\\"type\\\":\\\"uint256[]\\\"},{\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"tierCeilings\\\",\\\"type\\\":\\\"uint256[]\\\"}],\\\"name\\\":\\\"setFeeTiers\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_maxTotalPayout\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"setMaxTotalPayout\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"newPendingOwner\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"setPendingOwner\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes4\\\",\\\"name\\\":\\\"interfaceId\\\",\\\"type\\\":\\\"bytes4\\\"}],\\\"name\\\":\\\"supportsInterface\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"terms\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"controlVariable\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"vestingTerm\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"minimumPrice\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"maxPayout\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"maxDebt\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"maxTotalPayout\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"initialDebt\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"totalDebt\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"totalPayoutGiven\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"totalPrincipalBilled\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"transferOwnership\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"trueBillPrice\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"price_\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"userBillIds\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256[]\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_billId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_timestamp\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"vestedPayoutAtTime\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"vestedPayout_\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"vestingCurve\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"contract IVestingCurve\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_billId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"vestingPayout\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"vestingPayout_\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_billId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"vestingPeriod\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"vestingStart_\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"vestingEnd_\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"}]\\r\\n*/\\r\\n\"\r\n    },\r\n    \"contracts/lib/IApeFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity >=0.6.6;\\r\\n\\r\\ninterface IApeFactory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function INIT_CODE_PAIR_HASH() external view returns (bytes32);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address token0, address token1) external view returns (address pair);\\r\\n\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address token0, address token1) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/lib/IApePair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity >=0.6.6;\\r\\n\\r\\ninterface IApePair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\r\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint256 amount0In,\\r\\n        uint256 amount1In,\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n\\r\\n    function price0CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function price1CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function kLast() external view returns (uint256);\\r\\n\\r\\n    function mint(address to) external returns (uint256 liquidity);\\r\\n\\r\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/lib/IApeRouter01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.15;\\r\\n\\r\\ninterface IApeRouter01 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address token0,\\r\\n        address token1,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address token0,\\r\\n        address token1,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address token0,\\r\\n        address token1,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactETH(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);\\r\\n\\r\\n    function getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountOut);\\r\\n\\r\\n    function getAmountIn(\\r\\n        uint256 amountOut,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountIn);\\r\\n\\r\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/lib/IApeRouter02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.15;\\r\\n\\r\\nimport \\\"./IApeRouter01.sol\\\";\\r\\n\\r\\ninterface IApeRouter02 is IApeRouter01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/lib/ISoulZap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/*\\r\\n   \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2584  \u2588\u2588\u2588    \u2588\u2584   \u2584\u2588                                      \\r\\n  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588                                      \\r\\n  \u2588\u2588\u2588    \u2588\u2580  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588                                      \\r\\n  \u2588\u2588\u2588        \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588                                      \\r\\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588                                      \\r\\n         \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588                                      \\r\\n   \u2584\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588     \u2584                                \\r\\n \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580   \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                                \\r\\n                                                                           \\r\\n   \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2584   \u2584\u2588        \u2584\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584   \u2584\u2588      \u2588\u2588\u2588      \u2584\u2588\u2588   \u2588\u2584  \\r\\n  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588       \u2588\u2588\u2588  \u2588\u2588\u2588   \u2580\u2588\u2588\u2588 \u2588\u2588\u2588 \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584 \u2588\u2588\u2588   \u2588\u2588\u2588\\r\\n  \u2588\u2588\u2588    \u2588\u2580  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588       \u2588\u2588\u2588  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588   \u2580\u2580\u2580\u2588\u2588\u2588\u2580\u2580\u2580\u2580\u2580 \u2588\u2588\u2588\u2584\u2584\u2584\u2588\u2588\u2588\\r\\n  \u2588\u2588\u2588        \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588       \u2588\u2588\u2588  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588      \u2588\u2588\u2588      \u2580\u2580\u2580\u2580\u2580\u2580\u2588\u2588\u2588\\r\\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588       \u2588\u2588\u2588  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588      \u2588\u2588\u2588      \u2584\u2588\u2588   \u2588\u2588\u2588\\r\\n         \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588       \u2588\u2588\u2588  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588      \u2588\u2588\u2588      \u2588\u2588\u2588   \u2588\u2588\u2588\\r\\n   \u2584\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588     \u2584 \u2588\u2588\u2588  \u2588\u2588\u2588   \u2584\u2588\u2588\u2588 \u2588\u2588\u2588      \u2588\u2588\u2588      \u2588\u2588\u2588   \u2588\u2588\u2588\\r\\n \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580   \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2580   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \u2588\u2580      \u2584\u2588\u2588\u2588       \u2580\u2588\u2588\u2588\u2588\u2588\u2580    \\r\\n\\r\\n * App:             https:// TODO\\r\\n * Medium:          https:// TODO\\r\\n * Twitter:         https:// TODO\\r\\n * Discord:         https:// TODO\\r\\n * Telegram:        https:// TODO\\r\\n * Announcements:   https:// TODO\\r\\n * GitHub:          https:// TODO\\r\\n */\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./IApeRouter02.sol\\\";\\r\\nimport \\\"../extensions/ApeBond/lib/ICustomBillRefillable.sol\\\";\\r\\n\\r\\ninterface ISoulZap {\\r\\n    enum SwapType {\\r\\n        V2\\r\\n    }\\r\\n\\r\\n    struct SwapPath {\\r\\n        address swapRouter;\\r\\n        SwapType swapType;\\r\\n        address[] path;\\r\\n        uint256 amountOutMin;\\r\\n    }\\r\\n\\r\\n    enum LPType {\\r\\n        V2\\r\\n    }\\r\\n\\r\\n    struct LiquidityPath {\\r\\n        address lpRouter;\\r\\n        LPType lpType;\\r\\n        uint256 minAmountLP0;\\r\\n        uint256 minAmountLP1;\\r\\n    }\\r\\n\\r\\n    struct ZapParams {\\r\\n        IERC20 inputToken;\\r\\n        uint256 inputAmount;\\r\\n        address token0;\\r\\n        address token1;\\r\\n        SwapPath path0;\\r\\n        SwapPath path1;\\r\\n        LiquidityPath liquidityPath;\\r\\n        address to;\\r\\n        uint256 deadline;\\r\\n    }\\r\\n\\r\\n    struct ZapParamsNative {\\r\\n        address token0;\\r\\n        address token1;\\r\\n        SwapPath path0;\\r\\n        SwapPath path1;\\r\\n        LiquidityPath liquidityPath;\\r\\n        address to;\\r\\n        uint256 deadline;\\r\\n    }\\r\\n\\r\\n    struct ZapParamsBond {\\r\\n        ZapParams zapParams;\\r\\n        ICustomBillRefillable bill;\\r\\n        uint256 maxPrice;\\r\\n    }\\r\\n\\r\\n    struct ZapParamsBondNative {\\r\\n        ZapParamsNative zapParamsNative;\\r\\n        ICustomBillRefillable bill;\\r\\n        uint256 maxPrice;\\r\\n    }\\r\\n\\r\\n    // struct MinAmountsParams {\\r\\n    //     IERC20 inputToken;\\r\\n    //     uint256 inputAmount;\\r\\n    //     address token0;\\r\\n    //     address token1;\\r\\n    //     SwapPath path0;\\r\\n    //     SwapPath path1;\\r\\n    //     LiquidityPath liquidityPath;\\r\\n    // }\\r\\n\\r\\n    function zap(ZapParams memory zapParams) external;\\r\\n\\r\\n    function zapNative(ZapParamsNative memory zapParamsNative) external payable;\\r\\n\\r\\n    // function getMinAmounts(\\r\\n    //     MinAmountsParams memory params\\r\\n    // ) external view returns (uint256[2] memory minAmountsSwap, uint256[2] memory minAmountsLP);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/lib/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.15;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IWETH is IERC20 {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/SoulFee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity 0.8.15;\\r\\n\\r\\n/*\\r\\n   \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2584  \u2588\u2588\u2588    \u2588\u2584   \u2584\u2588                                      \\r\\n  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588                                      \\r\\n  \u2588\u2588\u2588    \u2588\u2580  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588                                      \\r\\n  \u2588\u2588\u2588        \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588                                      \\r\\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588                                      \\r\\n         \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588                                      \\r\\n   \u2584\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588     \u2584                                \\r\\n \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580   \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                                \\r\\n                                                                           \\r\\n   \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2584   \u2584\u2588        \u2584\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584   \u2584\u2588      \u2588\u2588\u2588      \u2584\u2588\u2588   \u2588\u2584  \\r\\n  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588       \u2588\u2588\u2588  \u2588\u2588\u2588   \u2580\u2588\u2588\u2588 \u2588\u2588\u2588 \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584 \u2588\u2588\u2588   \u2588\u2588\u2588\\r\\n  \u2588\u2588\u2588    \u2588\u2580  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588       \u2588\u2588\u2588  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588   \u2580\u2580\u2580\u2588\u2588\u2588\u2580\u2580\u2580\u2580\u2580 \u2588\u2588\u2588\u2584\u2584\u2584\u2588\u2588\u2588\\r\\n  \u2588\u2588\u2588        \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588       \u2588\u2588\u2588  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588      \u2588\u2588\u2588      \u2580\u2580\u2580\u2580\u2580\u2580\u2588\u2588\u2588\\r\\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588       \u2588\u2588\u2588  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588      \u2588\u2588\u2588      \u2584\u2588\u2588   \u2588\u2588\u2588\\r\\n         \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588       \u2588\u2588\u2588  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588      \u2588\u2588\u2588      \u2588\u2588\u2588   \u2588\u2588\u2588\\r\\n   \u2584\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588     \u2584 \u2588\u2588\u2588  \u2588\u2588\u2588   \u2584\u2588\u2588\u2588 \u2588\u2588\u2588      \u2588\u2588\u2588      \u2588\u2588\u2588   \u2588\u2588\u2588\\r\\n \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580   \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2580   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \u2588\u2580      \u2584\u2588\u2588\u2588       \u2580\u2588\u2588\u2588\u2588\u2588\u2580    \\r\\n\\r\\n * App:             https:// TODO\\r\\n * Medium:          https:// TODO\\r\\n * Twitter:         https:// TODO\\r\\n * Discord:         https:// TODO\\r\\n * Telegram:        https:// TODO \\r\\n * Announcements:   https:// TODO\\r\\n * GitHub:          https:// TODO\\r\\n */\\r\\n\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SoulFee\\r\\n * @dev A contract for managing project fees with ownership control.\\r\\n */\\r\\ncontract SoulFee is Ownable {\\r\\n    string[] public PROJECTS;\\r\\n    mapping(string => uint256) public FEE_PERCENTAGE; // Denominator of 10_000\\r\\n    uint256 public immutable MAX_FEE;\\r\\n    address public feeCollector;\\r\\n\\r\\n    event UpdatedFee(string project, uint256 fee);\\r\\n    event UpdatedFeeCollector(address feeCollector);\\r\\n    event MissingProject(string project);\\r\\n\\r\\n    /**\\r\\n     * @dev Constructor to initialize the contract and add an initial default project.\\r\\n     */\\r\\n    constructor(address _feeCollector, uint256 _defaultFee, uint256 _maxFee) Ownable() {\\r\\n        require(_defaultFee <= _maxFee, \\\"SoulFee: Fee too high\\\");\\r\\n        feeCollector = _feeCollector;\\r\\n        MAX_FEE = _maxFee;\\r\\n        addProject(\\\"default\\\", _defaultFee);\\r\\n        addProject(\\\"zap\\\", _defaultFee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the fee percentage for a specific project.\\r\\n     * @param project The name of the project.\\r\\n     * @return fee The fee percentage for the project.\\r\\n     */\\r\\n    function getFee(string memory project) public view returns (uint256 fee) {\\r\\n        if (!projectExists(project)) {\\r\\n            // TODO: Can't do this on view function unfortunately. Other ideas?\\r\\n            // emit MissingProject(project);\\r\\n            return FEE_PERCENTAGE[\\\"default\\\"];\\r\\n        }\\r\\n        return FEE_PERCENTAGE[project];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the fee percentage for a project by its index.\\r\\n     * @param projectId The index of the project in the PROJECTS array.\\r\\n     * @return fee The fee percentage for the project.\\r\\n     */\\r\\n    function getFee(uint256 projectId) public view returns (uint256 fee) {\\r\\n        return FEE_PERCENTAGE[PROJECTS[projectId]];\\r\\n    }\\r\\n\\r\\n    function getFeeCollector() public view returns (address) {\\r\\n        return feeCollector;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if a project with a given name exists.\\r\\n     * @param project The name of the project.\\r\\n     * @return exists True if the project exists, false otherwise.\\r\\n     */\\r\\n    function projectExists(string memory project) public view returns (bool exists) {\\r\\n        for (uint256 i = 0; i < PROJECTS.length; i++) {\\r\\n            if (compareStrings(PROJECTS[i], project)) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Compare two strings for equality.\\r\\n     * @param a The first string.\\r\\n     * @param b The second string.\\r\\n     * @return True if the strings are equal, false otherwise.\\r\\n     */\\r\\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\\r\\n        return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a new project with its associated fee percentage.\\r\\n     * @param project The name of the project.\\r\\n     * @param fee The fee percentage (out of 10,000).\\r\\n     */\\r\\n    function addProject(string memory project, uint256 fee) public onlyOwner {\\r\\n        require(fee <= MAX_FEE, \\\"SoulFee: Fee too high\\\");\\r\\n        PROJECTS.push(project);\\r\\n        FEE_PERCENTAGE[project] = fee;\\r\\n        emit UpdatedFee(project, fee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove a project and its associated fee percentage. This is a destructive operation.\\r\\n                Other contracts might depend on the data removed. Move with caution.\\r\\n     * @param project The name of the project to be removed.\\r\\n     */\\r\\n    function removeProject(string memory project) public onlyOwner {\\r\\n        require(!compareStrings(project, \\\"default\\\"), \\\"SoulFee: can't remove default project fee\\\");\\r\\n        for (uint256 i = 0; i < PROJECTS.length; i++) {\\r\\n            if (compareStrings(PROJECTS[i], project)) {\\r\\n                if (i != PROJECTS.length - 1) {\\r\\n                    // Swap the element to remove with the last element\\r\\n                    PROJECTS[i] = PROJECTS[PROJECTS.length - 1];\\r\\n                }\\r\\n                // Shorten the array by one\\r\\n                PROJECTS.pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        FEE_PERCENTAGE[project] = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set the fee percentage for an existing project.\\r\\n     * @param project The name of the project.\\r\\n     * @param fee The new fee percentage (out of 10,000).\\r\\n     */\\r\\n    function setFee(string memory project, uint256 fee) public onlyOwner {\\r\\n        require(fee <= MAX_FEE, \\\"SoulFee: Fee too high\\\");\\r\\n        require(projectExists(project), \\\"SoulFee: project not found\\\");\\r\\n        FEE_PERCENTAGE[project] = fee;\\r\\n        emit UpdatedFee(project, fee);\\r\\n    }\\r\\n\\r\\n    function setFeeCollector(address _feeCollector) public onlyOwner {\\r\\n        feeCollector = _feeCollector;\\r\\n        emit UpdatedFeeCollector(_feeCollector);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/SoulZap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity 0.8.15;\\r\\n\\r\\n/*\\r\\n   \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2584  \u2588\u2588\u2588    \u2588\u2584   \u2584\u2588                                      \\r\\n  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588                                      \\r\\n  \u2588\u2588\u2588    \u2588\u2580  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588                                      \\r\\n  \u2588\u2588\u2588        \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588                                      \\r\\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588                                      \\r\\n         \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588                                      \\r\\n   \u2584\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588     \u2584                                \\r\\n \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580   \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                                \\r\\n                                                                           \\r\\n   \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2584   \u2584\u2588        \u2584\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584   \u2584\u2588      \u2588\u2588\u2588      \u2584\u2588\u2588   \u2588\u2584  \\r\\n  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588       \u2588\u2588\u2588  \u2588\u2588\u2588   \u2580\u2588\u2588\u2588 \u2588\u2588\u2588 \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584 \u2588\u2588\u2588   \u2588\u2588\u2588\\r\\n  \u2588\u2588\u2588    \u2588\u2580  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588       \u2588\u2588\u2588  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588   \u2580\u2580\u2580\u2588\u2588\u2588\u2580\u2580\u2580\u2580\u2580 \u2588\u2588\u2588\u2584\u2584\u2584\u2588\u2588\u2588\\r\\n  \u2588\u2588\u2588        \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588       \u2588\u2588\u2588  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588      \u2588\u2588\u2588      \u2580\u2580\u2580\u2580\u2580\u2580\u2588\u2588\u2588\\r\\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588       \u2588\u2588\u2588  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588      \u2588\u2588\u2588      \u2584\u2588\u2588   \u2588\u2588\u2588\\r\\n         \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588       \u2588\u2588\u2588  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588      \u2588\u2588\u2588      \u2588\u2588\u2588   \u2588\u2588\u2588\\r\\n   \u2584\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588     \u2584 \u2588\u2588\u2588  \u2588\u2588\u2588   \u2584\u2588\u2588\u2588 \u2588\u2588\u2588      \u2588\u2588\u2588      \u2588\u2588\u2588   \u2588\u2588\u2588\\r\\n \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580   \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2580   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \u2588\u2580      \u2584\u2588\u2588\u2588       \u2580\u2588\u2588\u2588\u2588\u2588\u2580     \\r\\n\\r\\n * App:             https:// TODO\\r\\n * Medium:          https:// TODO\\r\\n * Twitter:         https:// TODO\\r\\n * Discord:         https:// TODO\\r\\n * Telegram:        https:// TODO\\r\\n * Announcements:   https:// TODO\\r\\n * GitHub:          https:// TODO\\r\\n */\\r\\n\\r\\nimport \\\"./lib/ISoulZap.sol\\\";\\r\\nimport \\\"./lib/IApeRouter02.sol\\\";\\r\\nimport \\\"./lib/IApeFactory.sol\\\";\\r\\nimport \\\"./lib/IApePair.sol\\\";\\r\\nimport \\\"./lib/IWETH.sol\\\";\\r\\nimport \\\"./SoulFee.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract SoulZap is ISoulZap, ReentrancyGuard, Ownable, Pausable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    struct LocalVars {\\r\\n        uint256 amount0In;\\r\\n        uint256 amount1In;\\r\\n        uint256 amount0Out;\\r\\n        uint256 amount1Out;\\r\\n        uint256 amount0Lp;\\r\\n        uint256 amount1Lp;\\r\\n    }\\r\\n\\r\\n    // struct minAmountsLocalVars {\\r\\n    //     uint256 inputAmountHalf;\\r\\n    //     uint256 amountOutMin0;\\r\\n    //     uint256 amountOutMin1;\\r\\n    //     IApeFactory factory;\\r\\n    //     address token0;\\r\\n    //     address token1;\\r\\n    //     address inputToken;\\r\\n    //     uint256 amount0;\\r\\n    //     uint256 amount1;\\r\\n    //     uint256 reserveA;\\r\\n    //     uint256 reserveB;\\r\\n    //     address uniV3Pool;\\r\\n    //     address arrakisPool;\\r\\n    //     uint256 weightedPrice0;\\r\\n    //     uint256 weightedPrice1;\\r\\n    // }\\r\\n\\r\\n    address public immutable WNATIVE;\\r\\n    SoulFee public soulFee;\\r\\n\\r\\n    event Zap(ZapParams zapParams);\\r\\n    event ZapNative(ZapParams zapParams);\\r\\n\\r\\n    constructor(address _wnative, SoulFee _soulFee) Ownable() {\\r\\n        WNATIVE = _wnative;\\r\\n        soulFee = _soulFee;\\r\\n    }\\r\\n\\r\\n    /// @dev The receive method is used as a fallback function in a contract\\r\\n    /// and is called when ether is sent to a contract with no calldata.\\r\\n    receive() external payable {\\r\\n        require(msg.sender == WNATIVE, \\\"ApeBond: Only receive ether from wrapped\\\");\\r\\n    }\\r\\n\\r\\n    function pauseAll() public onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function unpauseAll() public onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    /// @notice Zap single token to LP\\r\\n    /// @param zapParams all parameters for zap\\r\\n    function zap(ZapParams memory zapParams) external override nonReentrant whenNotPaused {\\r\\n        _zapInternal(zapParams, soulFee.getFee(\\\"zap\\\"));\\r\\n    }\\r\\n\\r\\n    /// @notice Zap native token to LP\\r\\n    /// @param zapParams all parameters for native zap\\r\\n    function zapNative(ZapParamsNative memory zapParams) external payable override nonReentrant whenNotPaused {\\r\\n        _zapNativeInternal(zapParams, soulFee.getFee(\\\"zap\\\"));\\r\\n    }\\r\\n\\r\\n    // TODO: This is not needed anymore as we use a different lens contract to get best routing and these min amounts for slippage\\r\\n    // /// @notice get min amounts for swaps\\r\\n    // /// @param params all params\\r\\n    // function getMinAmounts(\\r\\n    //     MinAmountsParams memory params\\r\\n    // ) external view override returns (uint256[2] memory minAmountsSwap, uint256[2] memory minAmountsLP) {\\r\\n    //     require(params.path0.path.length >= 2 || params.path1.path.length >= 2, \\\"ApeBond: Needs at least one path\\\");\\r\\n\\r\\n    //     minAmountsLocalVars memory vars;\\r\\n\\r\\n    //     IApeFactory factory;\\r\\n    //     vars.token0 = params.path0.path.length == 0\\r\\n    //         ? params.path1.path[0]\\r\\n    //         : params.path0.path[params.path0.path.length - 1];\\r\\n    //     vars.token1 = params.path1.path.length == 0\\r\\n    //         ? params.path0.path[0]\\r\\n    //         : params.path1.path[params.path1.path.length - 1];\\r\\n    //     vars.inputToken = params.path0.path.length > 0 ? params.path0.path[0] : params.path1.path[0];\\r\\n\\r\\n    //     //get min amounts for swap\\r\\n    //     // V2 swap and based on V2 also V3 estimate assuming no arbitrage exists\\r\\n    //     IApeRouter02 router = IApeRouter02(params.path0.swapRouter);\\r\\n    //     factory = IApeFactory(router.factory());\\r\\n    //     vars.inputAmountHalf = params.inputAmount / 2;\\r\\n    //     vars.amountOutMin0 = vars.inputAmountHalf;\\r\\n    //     if (params.path0.path.length != 0) {\\r\\n    //         uint256[] memory amountsOut0 = router.getAmountsOut(vars.inputAmountHalf, params.path0.path);\\r\\n    //         vars.amountOutMin0 = amountsOut0[amountsOut0.length - 1];\\r\\n    //     }\\r\\n    //     vars.amountOutMin1 = vars.inputAmountHalf;\\r\\n    //     if (params.path1.path.length != 0) {\\r\\n    //         uint256[] memory amountsOut1 = router.getAmountsOut(vars.inputAmountHalf, params.path1.path);\\r\\n    //         vars.amountOutMin1 = amountsOut1[amountsOut1.length - 1];\\r\\n    //     }\\r\\n    //     minAmountsSwap = [vars.amountOutMin0, vars.amountOutMin1];\\r\\n\\r\\n    //     // get min amounts for adding liquidity\\r\\n    //     if (params.liquidityPath.lpType == LPType.V2) {\\r\\n    //         //V2 LP\\r\\n    //         IApePair lp = IApePair(factory.getPair(vars.token0, vars.token1));\\r\\n    //         (vars.reserveA, vars.reserveB, ) = lp.getReserves();\\r\\n    //         if (vars.token0 == lp.token1()) {\\r\\n    //             (vars.reserveA, vars.reserveB) = (vars.reserveB, vars.reserveA);\\r\\n    //         }\\r\\n    //         uint256 amountB = IApeRouter02(params.path0.swapRouter).quote(\\r\\n    //             vars.amountOutMin0,\\r\\n    //             vars.reserveA,\\r\\n    //             vars.reserveB\\r\\n    //         );\\r\\n    //         minAmountsLP = [vars.amountOutMin0, amountB];\\r\\n    //     } else {\\r\\n    //         revert(\\\"LP is not yet supported\\\");\\r\\n    //     }\\r\\n    // }\\r\\n\\r\\n    function _zapInternal(ZapParams memory zapParams, uint256 protocolFee) internal {\\r\\n        uint256 balanceBefore = _getBalance(zapParams.inputToken);\\r\\n        zapParams.inputToken.safeTransferFrom(msg.sender, address(this), zapParams.inputAmount);\\r\\n        zapParams.inputAmount = _getBalance(zapParams.inputToken) - balanceBefore;\\r\\n\\r\\n        _zapPrivate(zapParams, false, protocolFee);\\r\\n        emit Zap(zapParams);\\r\\n    }\\r\\n\\r\\n    function _zapNativeInternal(ZapParamsNative memory zapParamsNative, uint256 protocolFee) internal {\\r\\n        uint256 inputAmount = msg.value;\\r\\n        IERC20 inputToken = IERC20(WNATIVE);\\r\\n        IWETH(WNATIVE).deposit{value: inputAmount}();\\r\\n\\r\\n        ZapParams memory zapParams = ZapParams({\\r\\n            inputToken: inputToken,\\r\\n            inputAmount: inputAmount,\\r\\n            token0: zapParamsNative.token0,\\r\\n            token1: zapParamsNative.token1,\\r\\n            path0: zapParamsNative.path0,\\r\\n            path1: zapParamsNative.path1,\\r\\n            liquidityPath: zapParamsNative.liquidityPath,\\r\\n            to: zapParamsNative.to,\\r\\n            deadline: zapParamsNative.deadline\\r\\n        });\\r\\n\\r\\n        _zapPrivate(zapParams, true, protocolFee);\\r\\n        emit ZapNative(zapParams);\\r\\n    }\\r\\n\\r\\n    function _transfer(address token, uint256 amount, bool native) internal {\\r\\n        if (amount == 0) return;\\r\\n        if (token == WNATIVE && native) {\\r\\n            IWETH(WNATIVE).withdraw(amount);\\r\\n            // 2600 COLD_ACCOUNT_ACCESS_COST plus 2300 transfer gas - 1\\r\\n            // Intended to support transfers to contracts, but not allow for further code execution\\r\\n            (bool success, ) = msg.sender.call{value: amount, gas: 4899}(\\\"\\\");\\r\\n            require(success, \\\"native transfer error\\\");\\r\\n        } else {\\r\\n            IERC20(token).safeTransfer(msg.sender, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getBalance(IERC20 token) internal view returns (uint256 balance) {\\r\\n        balance = token.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /// @notice Ultimate ZAP function\\r\\n    /// @param zapParams all parameters for zap\\r\\n    /// swapRouter swap router\\r\\n    /// swapType type of swap zap\\r\\n    /// lpRouter lp router\\r\\n    /// lpType type of lp zap\\r\\n    /// arrakisFactory Arrakis factory\\r\\n    /// inputToken Address of token to turn into an LP Token\\r\\n    /// inputAmount Amount of inputToken to deposit into LP\\r\\n    /// token0 first underlying token of LP\\r\\n    /// token1 second underlying token of LP\\r\\n    /// path0 path from input token to first underlying token of LP\\r\\n    /// amountOutMin0 min amount of token0 to receive after swap\\r\\n    /// uniV3PoolFees0 pool fees for path0 for when type of swap is V3\\r\\n    /// path1 path from input token to second underlying token of LP\\r\\n    /// amountOutMin1 min amount of token1 to receive after swap\\r\\n    /// uniV3PoolFees1 pool fees for path1 for when type of swap is V3\\r\\n    /// minAmountLP0 min amount of token0 to use when adding liquidity\\r\\n    /// minAmountLP1 min amount of token1 to use when adding liquidity\\r\\n    /// uniV3PoolLPFee pool fee of LP for when lp type is Arrakis or V3\\r\\n    /// to Address which receives the LP Tokens\\r\\n    /// deadline Latest timestamp this call is valid\\r\\n    /// @param native Unwrap Wrapped Native tokens before transferring\\r\\n    function _zapPrivate(ZapParams memory zapParams, bool native, uint256 protocolFee) private {\\r\\n        // Verify inputs\\r\\n        require(zapParams.to != address(0), \\\"ApeBond: Can't zap to null address\\\");\\r\\n        require(\\r\\n            zapParams.path0.swapRouter != address(0) &&\\r\\n                zapParams.path1.swapRouter != address(0) &&\\r\\n                zapParams.liquidityPath.lpRouter != address(0),\\r\\n            \\\"ApeBond: swap and lp routers can not be address(0)\\\"\\r\\n        );\\r\\n        require(zapParams.token0 != address(0), \\\"ApeBond: token0 can not be address(0)\\\");\\r\\n        require(zapParams.token1 != address(0), \\\"ApeBond: token1 can not be address(0)\\\");\\r\\n        // Setup struct to prevent stack overflow\\r\\n        LocalVars memory vars;\\r\\n        // Ensure token addresses and paths are in ascending numerical order\\r\\n        if (zapParams.token1 < zapParams.token0) {\\r\\n            (zapParams.token0, zapParams.token1) = (zapParams.token1, zapParams.token0);\\r\\n            (zapParams.path0, zapParams.path1) = (zapParams.path1, zapParams.path0);\\r\\n        }\\r\\n\\r\\n        //Take protocol fee\\r\\n        //TODO: it takes fee in form of input token. Can we somehow get blue chips? or is there another way?\\r\\n        if (protocolFee > 0) {\\r\\n            uint256 feeAmount = (zapParams.inputAmount * protocolFee) / 10_000;\\r\\n            zapParams.inputAmount -= feeAmount;\\r\\n            zapParams.inputToken.safeTransfer(soulFee.getFeeCollector(), feeAmount);\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Setup swap amount0 and amount1\\r\\n         */\\r\\n        if (zapParams.liquidityPath.lpType == LPType.V2) {\\r\\n            // Handle UniswapV2 Liquidity\\r\\n            require(\\r\\n                IApeFactory(IApeRouter02(zapParams.liquidityPath.lpRouter).factory()).getPair(\\r\\n                    zapParams.token0,\\r\\n                    zapParams.token1\\r\\n                ) != address(0),\\r\\n                \\\"ApeBond: Pair doesn't exist\\\"\\r\\n            );\\r\\n            vars.amount0In = zapParams.inputAmount / 2;\\r\\n            vars.amount1In = zapParams.inputAmount / 2;\\r\\n        } else {\\r\\n            revert(\\\"ApeBond: LPType not supported\\\");\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Handle token0 Swap\\r\\n         */\\r\\n        if (zapParams.token0 != address(zapParams.inputToken)) {\\r\\n            require(zapParams.path0.path[0] == address(zapParams.inputToken), \\\"ApeBond: wrong path path0[0]\\\");\\r\\n            require(\\r\\n                zapParams.path0.path[zapParams.path0.path.length - 1] == zapParams.token0,\\r\\n                \\\"ApeBond: wrong path path0[-1]\\\"\\r\\n            );\\r\\n            zapParams.inputToken.approve(zapParams.path0.swapRouter, vars.amount0In);\\r\\n            vars.amount0Out = _routerSwapFromPath(zapParams.path0, vars.amount0In, zapParams.deadline);\\r\\n        } else {\\r\\n            vars.amount0Out = zapParams.inputAmount - vars.amount1In;\\r\\n        }\\r\\n        /**\\r\\n         * Handle token1 Swap\\r\\n         */\\r\\n        if (zapParams.token1 != address(zapParams.inputToken)) {\\r\\n            require(zapParams.path1.path[0] == address(zapParams.inputToken), \\\"ApeBond: wrong path path1[0]\\\");\\r\\n            require(\\r\\n                zapParams.path1.path[zapParams.path1.path.length - 1] == zapParams.token1,\\r\\n                \\\"ApeBond: wrong path path1[-1]\\\"\\r\\n            );\\r\\n            zapParams.inputToken.approve(zapParams.path1.swapRouter, vars.amount1In);\\r\\n            vars.amount1Out = _routerSwapFromPath(zapParams.path1, vars.amount1In, zapParams.deadline);\\r\\n        } else {\\r\\n            vars.amount1Out = zapParams.inputAmount - vars.amount0In;\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Handle Liquidity Add\\r\\n         */\\r\\n        IERC20(zapParams.token0).approve(address(zapParams.liquidityPath.lpRouter), vars.amount0Out);\\r\\n        IERC20(zapParams.token1).approve(address(zapParams.liquidityPath.lpRouter), vars.amount1Out);\\r\\n\\r\\n        if (zapParams.liquidityPath.lpType == LPType.V2) {\\r\\n            // Add liquidity to UniswapV2 Pool\\r\\n            (vars.amount0Lp, vars.amount1Lp, ) = IApeRouter02(zapParams.liquidityPath.lpRouter).addLiquidity(\\r\\n                zapParams.token0,\\r\\n                zapParams.token1,\\r\\n                vars.amount0Out,\\r\\n                vars.amount1Out,\\r\\n                zapParams.liquidityPath.minAmountLP0,\\r\\n                zapParams.liquidityPath.minAmountLP1,\\r\\n                zapParams.to,\\r\\n                zapParams.deadline\\r\\n            );\\r\\n        } else {\\r\\n            revert(\\\"ApeBond: lpType not supported\\\");\\r\\n        }\\r\\n\\r\\n        if (zapParams.token0 == WNATIVE) {\\r\\n            // Ensure WNATIVE is called last\\r\\n            _transfer(zapParams.token1, vars.amount1Out - vars.amount1Lp, native);\\r\\n            _transfer(zapParams.token0, vars.amount0Out - vars.amount0Lp, native);\\r\\n        } else {\\r\\n            _transfer(zapParams.token0, vars.amount0Out - vars.amount0Lp, native);\\r\\n            _transfer(zapParams.token1, vars.amount1Out - vars.amount1Lp, native);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _routerSwapFromPath(\\r\\n        SwapPath memory _uniSwapPath,\\r\\n        uint256 _amountIn,\\r\\n        uint256 _deadline\\r\\n    ) private returns (uint256 amountOut) {\\r\\n        require(_uniSwapPath.path.length >= 2, \\\"ApeBond: need path0 of >=2\\\");\\r\\n        address outputToken = _uniSwapPath.path[_uniSwapPath.path.length - 1];\\r\\n        uint256 balanceBefore = _getBalance(IERC20(outputToken));\\r\\n        _routerSwap(\\r\\n            _uniSwapPath.swapRouter,\\r\\n            _uniSwapPath.swapType,\\r\\n            _amountIn,\\r\\n            _uniSwapPath.amountOutMin,\\r\\n            _uniSwapPath.path,\\r\\n            _deadline\\r\\n        );\\r\\n        amountOut = _getBalance(IERC20(outputToken)) - balanceBefore;\\r\\n    }\\r\\n\\r\\n    function _routerSwap(\\r\\n        address router,\\r\\n        SwapType swapType,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] memory path,\\r\\n        uint256 deadline\\r\\n    ) private {\\r\\n        if (swapType == SwapType.V2) {\\r\\n            // Perform UniV2 swap\\r\\n            IApeRouter02(router).swapExactTokensForTokens(amountIn, amountOutMin, path, address(this), deadline);\\r\\n        } else {\\r\\n            revert(\\\"ApeBond: SwapType not supported\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/SoulZapFullV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity 0.8.15;\\r\\n\\r\\n/*\\r\\n   \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2584  \u2588\u2588\u2588    \u2588\u2584   \u2584\u2588                                      \\r\\n  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588                                      \\r\\n  \u2588\u2588\u2588    \u2588\u2580  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588                                      \\r\\n  \u2588\u2588\u2588        \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588                                      \\r\\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588                                      \\r\\n         \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588                                      \\r\\n   \u2584\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588     \u2584                                \\r\\n \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580   \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                                \\r\\n                                                                           \\r\\n   \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2584   \u2584\u2588        \u2584\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584   \u2584\u2588      \u2588\u2588\u2588      \u2584\u2588\u2588   \u2588\u2584  \\r\\n  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588       \u2588\u2588\u2588  \u2588\u2588\u2588   \u2580\u2588\u2588\u2588 \u2588\u2588\u2588 \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584 \u2588\u2588\u2588   \u2588\u2588\u2588\\r\\n  \u2588\u2588\u2588    \u2588\u2580  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588       \u2588\u2588\u2588  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588   \u2580\u2580\u2580\u2588\u2588\u2588\u2580\u2580\u2580\u2580\u2580 \u2588\u2588\u2588\u2584\u2584\u2584\u2588\u2588\u2588\\r\\n  \u2588\u2588\u2588        \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588       \u2588\u2588\u2588  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588      \u2588\u2588\u2588      \u2580\u2580\u2580\u2580\u2580\u2580\u2588\u2588\u2588\\r\\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588       \u2588\u2588\u2588  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588      \u2588\u2588\u2588      \u2584\u2588\u2588   \u2588\u2588\u2588\\r\\n         \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588       \u2588\u2588\u2588  \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588      \u2588\u2588\u2588      \u2588\u2588\u2588   \u2588\u2588\u2588\\r\\n   \u2584\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588    \u2588\u2588\u2588 \u2588\u2588\u2588     \u2584 \u2588\u2588\u2588  \u2588\u2588\u2588   \u2584\u2588\u2588\u2588 \u2588\u2588\u2588      \u2588\u2588\u2588      \u2588\u2588\u2588   \u2588\u2588\u2588\\r\\n \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580   \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2580   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580  \u2588\u2580      \u2584\u2588\u2588\u2588       \u2580\u2588\u2588\u2588\u2588\u2588\u2580    \\r\\n\\r\\n * App:             https:// TODO\\r\\n * Medium:          https:// TODO\\r\\n * Twitter:         https:// TODO\\r\\n * Discord:         https:// TODO\\r\\n * Telegram:        https:// TODO \\r\\n * Announcements:   https:// TODO\\r\\n * GitHub:          https:// TODO\\r\\n */\\r\\n\\r\\nimport \\\"./SoulZap.sol\\\";\\r\\nimport \\\"./extensions/ApeBond/ApeBond.sol\\\";\\r\\nimport \\\"./SoulFee.sol\\\";\\r\\n\\r\\ncontract SoulZapFullV1 is SoulZap, ApeBond {\\r\\n    constructor(address _wnative, SoulFee _soulFee) SoulZap(_wnative, _soulFee) ApeBond() {}\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wnative\",\"type\":\"address\"},{\"internalType\":\"contract SoulFee\",\"name\":\"_soulFee\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap.SwapPath\",\"name\":\"path0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap.SwapPath\",\"name\":\"path1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"lpRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap.LPType\",\"name\":\"lpType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minAmountLP0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountLP1\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap.LiquidityPath\",\"name\":\"liquidityPath\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ISoulZap.ZapParams\",\"name\":\"zapParams\",\"type\":\"tuple\"}],\"name\":\"Zap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap.SwapPath\",\"name\":\"path0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap.SwapPath\",\"name\":\"path1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"lpRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap.LPType\",\"name\":\"lpType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minAmountLP0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountLP1\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap.LiquidityPath\",\"name\":\"liquidityPath\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap.ZapParams\",\"name\":\"zapParams\",\"type\":\"tuple\"},{\"internalType\":\"contract ICustomBillRefillable\",\"name\":\"bill\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ISoulZap.ZapParamsBond\",\"name\":\"zapParamsBond\",\"type\":\"tuple\"}],\"name\":\"ZapBond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap.SwapPath\",\"name\":\"path0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap.SwapPath\",\"name\":\"path1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"lpRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap.LPType\",\"name\":\"lpType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minAmountLP0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountLP1\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap.LiquidityPath\",\"name\":\"liquidityPath\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap.ZapParamsNative\",\"name\":\"zapParamsNative\",\"type\":\"tuple\"},{\"internalType\":\"contract ICustomBillRefillable\",\"name\":\"bill\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ISoulZap.ZapParamsBondNative\",\"name\":\"zapParamsBondNative\",\"type\":\"tuple\"}],\"name\":\"ZapBondNative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap.SwapPath\",\"name\":\"path0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap.SwapPath\",\"name\":\"path1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"lpRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap.LPType\",\"name\":\"lpType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minAmountLP0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountLP1\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap.LiquidityPath\",\"name\":\"liquidityPath\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ISoulZap.ZapParams\",\"name\":\"zapParams\",\"type\":\"tuple\"}],\"name\":\"ZapNative\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WNATIVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apeBondPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseApeBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soulFee\",\"outputs\":[{\"internalType\":\"contract SoulFee\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseApeBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap.SwapPath\",\"name\":\"path0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap.SwapPath\",\"name\":\"path1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"lpRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap.LPType\",\"name\":\"lpType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minAmountLP0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountLP1\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap.LiquidityPath\",\"name\":\"liquidityPath\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap.ZapParams\",\"name\":\"zapParams\",\"type\":\"tuple\"}],\"name\":\"zap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap.SwapPath\",\"name\":\"path0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap.SwapPath\",\"name\":\"path1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"lpRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap.LPType\",\"name\":\"lpType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minAmountLP0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountLP1\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap.LiquidityPath\",\"name\":\"liquidityPath\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap.ZapParams\",\"name\":\"zapParams\",\"type\":\"tuple\"},{\"internalType\":\"contract ICustomBillRefillable\",\"name\":\"bill\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap.ZapParamsBond\",\"name\":\"zapParamsBond\",\"type\":\"tuple\"}],\"name\":\"zapBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap.SwapPath\",\"name\":\"path0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap.SwapPath\",\"name\":\"path1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"lpRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap.LPType\",\"name\":\"lpType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minAmountLP0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountLP1\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap.LiquidityPath\",\"name\":\"liquidityPath\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap.ZapParamsNative\",\"name\":\"zapParamsNative\",\"type\":\"tuple\"},{\"internalType\":\"contract ICustomBillRefillable\",\"name\":\"bill\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap.ZapParamsBondNative\",\"name\":\"zapParamsBondNative\",\"type\":\"tuple\"}],\"name\":\"zapBondNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap.SwapPath\",\"name\":\"path0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap.SwapPath\",\"name\":\"path1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"lpRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap.LPType\",\"name\":\"lpType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minAmountLP0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountLP1\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap.LiquidityPath\",\"name\":\"liquidityPath\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap.ZapParamsNative\",\"name\":\"zapParams\",\"type\":\"tuple\"}],\"name\":\"zapNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SoulZapFullV1", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "0000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000000780927b5d935094eabf0159097c110c4cb000b3", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}