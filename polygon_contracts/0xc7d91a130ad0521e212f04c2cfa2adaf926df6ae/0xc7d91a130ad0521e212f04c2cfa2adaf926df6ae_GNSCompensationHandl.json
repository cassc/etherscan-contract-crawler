{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/interfaces/GNSStakingInterfaceV6_4_1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface GNSStakingInterfaceV6_4_1 {\\n    // Structs\\n    struct Staker {\\n        uint128 stakedGns; // 1e18\\n        uint128 debtDai; // 1e18\\n    }\\n\\n    struct UnlockSchedule {\\n        uint128 totalGns; // 1e18\\n        uint128 claimedGns; // 1e18\\n        uint128 debtDai; // 1e18\\n        uint48 start; // block.timestamp (seconds)\\n        uint48 duration; // in seconds\\n        bool revocable;\\n        UnlockType unlockType;\\n        uint16 __placeholder;\\n    }\\n\\n    struct UnlockScheduleInput {\\n        uint128 totalGns; // 1e18\\n        uint48 start; // block.timestamp (seconds)\\n        uint48 duration; // in seconds\\n        bool revocable;\\n        UnlockType unlockType;\\n    }\\n\\n    enum UnlockType {\\n        LINEAR,\\n        CLIFF\\n    }\\n\\n    function owner() external view returns (address);\\n\\n    function distributeRewardDai(uint _amountDai) external;\\n\\n    function createUnlockSchedule(UnlockScheduleInput calldata _schedule, address _staker) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/NftInterfaceV5.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface NftInterfaceV5 {\\n    function balanceOf(address) external view returns (uint);\\n\\n    function ownerOf(uint) external view returns (address);\\n\\n    function transferFrom(address, address, uint) external;\\n\\n    function tokenOfOwnerByIndex(address, uint) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/TokenInterfaceV5.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface TokenInterfaceV5 {\\n    function burn(address, uint256) external;\\n\\n    function mint(address, uint256) external;\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function transferFrom(address, address, uint256) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function hasRole(bytes32, address) external view returns (bool);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function allowance(address, address) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/v6.4.1/GNSCompensationHandlerV6_4_1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../interfaces/TokenInterfaceV5.sol\\\";\\nimport \\\"../interfaces/NftInterfaceV5.sol\\\";\\nimport \\\"../interfaces/GNSStakingInterfaceV6_4_1.sol\\\";\\n\\ncontract GNSCompensationHandlerV6_4_1 {\\n    // NFT unlock constants\\n    uint private constant NFT_1_VALUE = 800e18;\\n    uint private constant NFT_2_VALUE = 1_200e18;\\n    uint private constant NFT_3_VALUE = 1_800e18;\\n    uint private constant NFT_4_VALUE = 3_700e18;\\n    uint private constant NFT_5_VALUE = 12_000e18;\\n\\n    uint private constant NFT_PENALTY_P = 25; // Conversion penalty if user skip unlock schedule (25%)\\n    uint48 private constant NFT_UNLOCK_DURATION = 180 days; // 6 months in seconds\\n    GNSStakingInterfaceV6_4_1.UnlockType private constant NFT_UNLOCK_TYPE = GNSStakingInterfaceV6_4_1.UnlockType.LINEAR;\\n\\n    // Dev unlock constants\\n    address private constant DEV_ADDRESS = 0x211999E5eE74Af3E8dAcBCd5c4e608CD7D8086FA;\\n    uint private constant DEV_UNLOCK_CHAIN = 42161;\\n    uint128 private constant DEV_UNLOCK_AMOUNT = 1_000_000e18;\\n    uint48 private constant DEV_UNLOCK_DURATION = 365 days;\\n    GNSStakingInterfaceV6_4_1.UnlockType private constant DEV_UNLOCK_TYPE = GNSStakingInterfaceV6_4_1.UnlockType.CLIFF;\\n\\n    // Addresses\\n    TokenInterfaceV5 public immutable gns;\\n    GNSStakingInterfaceV6_4_1 public immutable staking;\\n    NftInterfaceV5[5] public nfts;\\n\\n    // State\\n    bool public devFundUnlockScheduled;\\n\\n    // Data structures\\n    struct ClaimInput {\\n        uint nftType;\\n        uint[] ids;\\n    }\\n\\n    // Events\\n    event NftsConverted(address indexed user, ClaimInput[] input, uint claimAmount, uint penaltyAmount, bool locked);\\n    event DevFundUnlockScheduled();\\n\\n    constructor(TokenInterfaceV5 _gns, GNSStakingInterfaceV6_4_1 _staking, NftInterfaceV5[5] memory _nfts) {\\n        require(\\n            address(_gns) != address(0) &&\\n                address(_staking) != address(0) &&\\n                address(_nfts[0]) != address(0) &&\\n                address(_nfts[1]) != address(0) &&\\n                address(_nfts[2]) != address(0) &&\\n                address(_nfts[3]) != address(0) &&\\n                address(_nfts[4]) != address(0),\\n            \\\"WRONG_VALUES\\\"\\n        );\\n\\n        gns = _gns;\\n        staking = _staking;\\n        nfts = _nfts;\\n\\n        // Approve staking contract allowance so it can transferFrom when creating new unlocks\\n        gns.approve(address(staking), type(uint256).max);\\n    }\\n\\n    function retireNfts(ClaimInput[] calldata _inputArr, bool _lock) external {\\n        // ClaimInput[] should be grouped by nftType and therefore of length 5 or less\\n        require(_inputArr.length < 6, \\\"INCORRECT_GROUPING\\\");\\n\\n        uint[5] memory nftValues = [NFT_1_VALUE, NFT_2_VALUE, NFT_3_VALUE, NFT_4_VALUE, NFT_5_VALUE];\\n        uint toClaim;\\n        uint penaltyAmount;\\n\\n        for (uint i; i < _inputArr.length; ) {\\n            ClaimInput memory input = _inputArr[i];\\n\\n            uint nftType = input.nftType - 1;\\n            NftInterfaceV5 nft = nfts[nftType];\\n\\n            for (uint j; j < input.ids.length; ) {\\n                nft.transferFrom(msg.sender, address(this), input.ids[j]);\\n\\n                unchecked {\\n                    ++j;\\n                }\\n            }\\n\\n            toClaim += nftValues[nftType] * input.ids.length;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        require(toClaim > 0, \\\"NOTHING_TO_CLAIM\\\");\\n\\n        if (_lock) {\\n            gns.mint(address(this), toClaim);\\n\\n            staking.createUnlockSchedule(\\n                GNSStakingInterfaceV6_4_1.UnlockScheduleInput({\\n                    totalGns: uint128(toClaim),\\n                    start: 0,\\n                    duration: NFT_UNLOCK_DURATION,\\n                    revocable: false,\\n                    unlockType: NFT_UNLOCK_TYPE\\n                }),\\n                msg.sender\\n            );\\n        } else {\\n            penaltyAmount = (toClaim * NFT_PENALTY_P) / 100;\\n            toClaim -= penaltyAmount;\\n\\n            gns.mint(msg.sender, toClaim);\\n            gns.mint(staking.owner(), penaltyAmount);\\n        }\\n\\n        emit NftsConverted(msg.sender, _inputArr, toClaim, penaltyAmount, _lock);\\n    }\\n\\n    function scheduleDevFundUnlock() external {\\n        require(msg.sender == staking.owner(), \\\"ONLY_GOV\\\");\\n        require(block.chainid == DEV_UNLOCK_CHAIN, \\\"NOT_ARBITRUM\\\");\\n        require(!devFundUnlockScheduled, \\\"ALREADY_SCHEDULED\\\");\\n\\n        devFundUnlockScheduled = true;\\n\\n        gns.mint(address(this), DEV_UNLOCK_AMOUNT);\\n\\n        staking.createUnlockSchedule(\\n            GNSStakingInterfaceV6_4_1.UnlockScheduleInput({\\n                totalGns: DEV_UNLOCK_AMOUNT,\\n                start: 0,\\n                duration: DEV_UNLOCK_DURATION,\\n                revocable: false,\\n                unlockType: DEV_UNLOCK_TYPE\\n            }),\\n            DEV_ADDRESS\\n        );\\n\\n        emit DevFundUnlockScheduled();\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 125\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract TokenInterfaceV5\",\"name\":\"_gns\",\"type\":\"address\"},{\"internalType\":\"contract GNSStakingInterfaceV6_4_1\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"contract NftInterfaceV5[5]\",\"name\":\"_nfts\",\"type\":\"address[5]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DevFundUnlockScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct GNSCompensationHandlerV6_4_1.ClaimInput[]\",\"name\":\"input\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penaltyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"}],\"name\":\"NftsConverted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"devFundUnlockScheduled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gns\",\"outputs\":[{\"internalType\":\"contract TokenInterfaceV5\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nfts\",\"outputs\":[{\"internalType\":\"contract NftInterfaceV5\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"internalType\":\"struct GNSCompensationHandlerV6_4_1.ClaimInput[]\",\"name\":\"_inputArr\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"_lock\",\"type\":\"bool\"}],\"name\":\"retireNfts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scheduleDevFundUnlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract GNSStakingInterfaceV6_4_1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GNSCompensationHandlerV6_4_1", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "125", "ConstructorArguments": "000000000000000000000000e5417af564e4bfda1c483642db720078713978960000000000000000000000008c74b2256ffb6705f14ada8e86fbd654e0e2beca000000000000000000000000f9a4c522e327935bd1f5a338c121e14e4cc1f89800000000000000000000000077cd42b925e1a82f41d852d6be727cfc88fddbbc0000000000000000000000003378ad81d09de23725ee9b9270635c97ed60192100000000000000000000000002e2c5825c1a3b69c0417706dbe1327c2af3e6c20000000000000000000000002d266a94469d05c9e06d52a4d0d9c23b157767c2", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}