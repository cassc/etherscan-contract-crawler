{"SourceCode": "// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\r\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\r\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/ORL_Staking_New.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\n\r\n\r\n\r\nerror NFTOwnershipIssue();\r\nerror NotEnoughMatic();\r\nerror NotEnoughPearls();\r\nerror PearlTransferIssue();\r\nerror NotTeamMember();\r\nerror alreadyRegistered();\r\nerror MaticTransferIssue();\r\nerror StakingIsPaused();\r\nerror StakedMoreThanMax();\r\nerror IncorrectContract();\r\nerror NotRegistered();\r\nerror NotSameEvent();\r\nerror EventSwitchNA();\r\n\r\n    struct raceRules{\r\n        address conCheck;\r\n        uint8 conValue;\r\n        uint8 maxQty;\r\n        uint matPrice;\r\n        uint prlPrice;     \r\n    }\r\n\r\n    struct walletInfo {\r\n        uint16 wAnchor;\r\n        uint16 wAssistant;\r\n        uint16 wEquip;\r\n        uint16 wBench;\r\n        address anchorContract;\r\n        address assistContract;\r\n        address equipContract;\r\n        address benchContract;\r\n    }\r\n\r\n        struct performance{\r\n        address nftContract;\r\n        address owner;\r\n        uint16 id;\r\n        uint8 leg1;\r\n        uint8 leg2;\r\n        uint8 leg3;\r\n        uint8 eventWanted;\r\n    }\r\n\r\n    struct funchecks{\r\n        uint count;\r\n        uint mTotal;\r\n        uint pTotal;\r\n        uint money;\r\n        uint pearls;\r\n        uint num;\r\n        uint8 newn;\r\n        uint16 tempstaked;\r\n        address own;\r\n    }\r\n\r\n\r\ninterface RacerInterface {\r\n    function tokensOfOwner(address _owner) external view returns (uint[] memory);\r\n}\r\n\r\ncontract ORL_StakingEngine is Ownable {\r\n\r\n      //Pearls\r\n    //Local address\r\n    //address internal constant tokenAddress = address(0xd9145CCE52D386f254917e481eB44e9943F39138); \r\n    //Mumbai address\r\n    //address internal constant tokenAddress = address(0x3B782594595096f1c854A606945980834b8a0e0c);\r\n    //Polygon address\r\n    address internal constant tokenAddress = address(0xCAf44e62003De4B8bD17c724f2B78CC532550C2F); \r\n    IERC20 internal constant rewardToken = IERC20(tokenAddress);\r\n\r\n    //Racers\r\n    //Local address\r\n    //address internal constant erc721Contract = address(0xd8b934580fcE35a11B58C6D73aDeE468a2833fa8);\r\n    //Mumbai Address\r\n    //address internal constant erc721Contract = address(0x6De8482cA107bc87AA23208fEE28C5b160FD3E6c);\r\n    //Polygon Address\r\n    address internal constant erc721Contract = address(0x72106Bbe2b447ECB9b52370Ddc63cfa8e553B08C);\r\n    IERC721 internal constant stakeableNFT = IERC721(erc721Contract);\r\n    \r\n    //Customs\r\n    //Local address\r\n    //address internal constant customAddress = 0xf8e81D47203A594245E36C48e151709F0C19fBe8;\r\n    //Mumbai Address\r\n    //address internal constant customAddress = 0x6Dc9207608Ac27Eb68B7E76B39C193F98284D9a7;\r\n    //Polygon address\r\n    address internal constant customAddress = 0xabA082D325AdC08F9a1c5A8208Bb5c42B3A6F978;\r\n    IERC721  internal constant customContract = IERC721(customAddress);\r\n\r\n    bool public paused;\r\n    uint immutable deployT;\r\n    uint16 public currentWeek = 22; \r\n\r\n    //walletByWeek[week][walletID].walletInfo\r\n    mapping(uint16 => mapping(address => walletInfo)) public walletByWeek;\r\n    \r\n    mapping(address => bool) internal isTeamMember;\r\n\r\n    //[week][id].raceRules\r\n    mapping(uint16 => mapping(uint16 => raceRules)) public rulesByRace;\r\n\r\n    //[week][slotid].performance\r\n    mapping(uint16 => mapping(uint16 => performance)) public perfByRacer;\r\n\r\n    //[week][racer contract][racer id]\r\n    mapping(uint16 => mapping(address => mapping(uint16 => uint16))) public slotByRacer;\r\n\r\n    //[week][wallet][tier] count\r\n    mapping(uint16 => mapping(address => mapping(uint8 => uint16))) internal tierCount; \r\n\r\n    mapping(uint16 => bool) internal allowEventMove;\r\n\r\n    \r\n\r\n\r\n    mapping(uint16 => uint16) public currentlyStaked;\r\n\r\n    constructor() {\r\n        isTeamMember[msg.sender] = true;\r\n        deployT = block.timestamp;\r\n    }\r\n\r\n\r\n    function signUp (uint16[] calldata _racers, address[] calldata _con, uint8[] calldata _event) external payable {\r\n\r\n    if (paused) revert StakingIsPaused();\r\n    funchecks memory _funchecks;\r\n    uint8[25] memory raceCounts; \r\n   \r\n\r\n        _funchecks.count = _racers.length;\r\n        uint i;\r\n        \r\n        do {\r\n            raceCounts[_event[i]]++;\r\n            if (_con[i] != erc721Contract && _con[i] != customAddress){\r\n                revert IncorrectContract();\r\n            }\r\n\r\n            _funchecks.own = IERC721(_con[i]).ownerOf(_racers[i]);\r\n            if (_funchecks.own != msg.sender) revert NFTOwnershipIssue();\r\n            if (raceCounts[_event[i]] + tierCount[currentWeek][msg.sender][_event[i]] > rulesByRace[currentWeek][_event[i]].maxQty){\r\n                revert StakedMoreThanMax();\r\n            }\r\n            _funchecks.money = (rulesByRace[currentWeek][_event[i]].matPrice);\r\n            _funchecks.pearls = (rulesByRace[currentWeek][_event[i]].prlPrice);\r\n\r\n            _funchecks.mTotal += _funchecks.money;\r\n            _funchecks.pTotal += _funchecks.pearls;\r\n\r\n            \r\n\r\n         unchecked {\r\n                    ++i;\r\n                }\r\n        } while (i < _funchecks.count);\r\n        \r\n        \r\n        if (msg.value != _funchecks.mTotal) revert NotEnoughMatic();\r\n        if (rewardToken.balanceOf(msg.sender) < _funchecks.pTotal) revert NotEnoughPearls();\r\n        if(!rewardToken.transferFrom(msg.sender, address(this), _funchecks.pTotal)) revert PearlTransferIssue();\r\n        \r\n        \r\n        performance memory _temp;\r\n        _funchecks.num = block.timestamp;  \r\n        _funchecks.tempstaked = currentlyStaked[currentWeek];\r\n        delete i;\r\n        do{\r\n\r\n\r\n            _temp.id = _racers[i];\r\n            _temp.nftContract = _con[i];\r\n            _temp.eventWanted = _event[i];\r\n            _temp.owner = msg.sender;\r\n            uint16 _slot = slotByRacer[currentWeek][_con[i]][_temp.id];\r\n\r\n            if (_slot != 0)  {\r\n                if (perfByRacer[currentWeek][_slot].eventWanted != 100)  revert alreadyRegistered();\r\n            }\r\n                ++_funchecks.tempstaked;\r\n                _slot = _funchecks.tempstaked;\r\n                slotByRacer[currentWeek][_con[i]][_temp.id] = _slot;\r\n            \r\n\r\n            _funchecks.newn = uint8(randomNumber(_funchecks.num, 3, 9));  \r\n            _temp.leg1 = _funchecks.newn;\r\n            _funchecks.num += _funchecks.newn;\r\n            _funchecks.newn = uint8(randomNumber(_funchecks.num, 3, 9));  \r\n            _temp.leg2 = _funchecks.newn;\r\n            _funchecks.num += _funchecks.newn;\r\n            _funchecks.newn = uint8(randomNumber(_funchecks.num, 5, 12));  \r\n            _temp.leg3 = _funchecks.newn;\r\n            perfByRacer[currentWeek][_slot] = _temp;\r\n            ++tierCount[currentWeek][msg.sender][_event[i]];\r\n\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n\r\n                 } while (i <_funchecks.count);\r\n                 currentlyStaked[currentWeek] = _funchecks.tempstaked;\r\n    }\r\n\r\n     function returnRacers() external view returns(performance[] memory){\r\n        performance[] memory _racers = new performance[](currentlyStaked[currentWeek] + 1);\r\n\r\n        for (uint16 i = 1; i <= currentlyStaked[currentWeek];){\r\n\r\n            _racers[i] = perfByRacer[currentWeek][i];\r\n            _racers[i].owner = IERC721(_racers[i].nftContract).ownerOf(_racers[i].id);\r\n\r\n             unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        return _racers;\r\n    }\r\n\r\n    function changeEvent(uint16 _tokenID, address _contract, uint8 _event) external {\r\n\r\n        if (!allowEventMove[currentWeek]) revert EventSwitchNA();\r\n        address _own = IERC721(_contract).ownerOf(_tokenID);\r\n        if (_own != msg.sender) revert NFTOwnershipIssue();\r\n        uint16 _slot = slotByRacer[currentWeek][_contract][_tokenID];\r\n        if (_slot == 0)  revert NotRegistered();\r\n        uint8 _currEvent = perfByRacer[currentWeek][_slot].eventWanted;\r\n        if (_event == _currEvent) revert NotSameEvent();\r\n        uint16 currStaked = tierCount[currentWeek][msg.sender][_event];\r\n        if (++currStaked > rulesByRace[currentWeek][_event].maxQty){\r\n            revert StakedMoreThanMax();\r\n        }\r\n            \r\n        perfByRacer[currentWeek][_slot].eventWanted = _event;\r\n        ++tierCount[currentWeek][msg.sender][_event];\r\n        --tierCount[currentWeek][msg.sender][_currEvent];\r\n    }\r\n\r\n\r\n    function randomNumber(uint _nonce, uint8 _start, uint8 _end) private view returns (uint random){\r\n        uint8 _far = _end - _start;\r\n        random = uint(keccak256(abi.encodePacked(deployT, msg.sender, _nonce))) % _far;\r\n        random = random + _start;\r\n        return random;\r\n    }\r\n\r\n     function returnTokens(uint16[] calldata _tokenID, address[] calldata _contract ) public payable {\r\n \r\n        funchecks memory _funchecks;\r\n        uint16 i;\r\n   \r\n\r\n        _funchecks.count = _tokenID.length;\r\n        do{\r\n            uint16 _slot = slotByRacer[currentWeek][_contract[i]][_tokenID[i]];\r\n            if (_slot == 0)  revert NotRegistered();\r\n            performance memory staking = perfByRacer[currentWeek][_slot];\r\n            if (staking.eventWanted == 100) revert NotRegistered();\r\n            address _owner = IERC721(_contract[i]).ownerOf(_tokenID[i]);\r\n            if (_owner != msg.sender) revert NFTOwnershipIssue();\r\n            _funchecks.money = (rulesByRace[currentWeek][staking.eventWanted].matPrice);\r\n            _funchecks.pearls = (rulesByRace[currentWeek][staking.eventWanted].prlPrice);\r\n\r\n            _funchecks.mTotal += _funchecks.money;\r\n            _funchecks.pTotal += _funchecks.pearls;\r\n\r\n            perfByRacer[currentWeek][_slot].eventWanted = 100;\r\n        unchecked {\r\n                ++i;\r\n            }\r\n\r\n                 } while (i <_funchecks.count);\r\n\r\n                 if (_funchecks.mTotal > 0) {\r\n                    (bool success, ) = (msg.sender).call{value: _funchecks.mTotal}(\"\");\r\n                    if (!success) revert MaticTransferIssue();\r\n\r\n                 }\r\n                 if (_funchecks.pTotal > 0) {\r\n                        if (rewardToken.balanceOf(address(this)) < _funchecks.pTotal) revert NotEnoughPearls();\r\n                        if(!rewardToken.transfer( msg.sender, _funchecks.pTotal)) revert PearlTransferIssue();\r\n                 }\r\n\r\n    }\r\n\r\n\r\n\r\n    function setBoost(uint8 _boost, uint16 _tokenID, address _contract) external {\r\n\r\n        address _own = IERC721(_contract).ownerOf(_tokenID);\r\n        if (_own != msg.sender) revert NFTOwnershipIssue();\r\n\r\n\r\n        uint nutso;\r\n        if (_boost == 1){\r\n            nutso = 250 ether;\r\n            walletByWeek[currentWeek][_own].wAnchor = _tokenID;\r\n            walletByWeek[currentWeek][_own].anchorContract = _contract;\r\n        } else if (_boost == 2){\r\n            nutso = 100 ether;\r\n            walletByWeek[currentWeek][_own].wAssistant = _tokenID;\r\n            walletByWeek[currentWeek][_own].assistContract = _contract;\r\n        } else if (_boost == 3){\r\n            nutso = 200 ether;\r\n            walletByWeek[currentWeek][_own].wEquip = _tokenID;\r\n            walletByWeek[currentWeek][_own].equipContract = _contract;\r\n        } else if (_boost == 4){\r\n            nutso = 100 ether;\r\n            walletByWeek[currentWeek][_own].wBench = _tokenID;\r\n            walletByWeek[currentWeek][_own].benchContract = _contract;\r\n        }\r\n        \r\n        if (rewardToken.balanceOf(msg.sender) < nutso) revert NotEnoughPearls();\r\n        if(!rewardToken.transferFrom(msg.sender, address(this), nutso)) revert PearlTransferIssue();\r\n\r\n    }\r\n\r\n    function getOwnerStaked(address _owner, address _contract) public view returns ( uint [] memory){\r\n        uint[] memory ownersTokens = RacerInterface(_contract).tokensOfOwner(_owner);\r\n        uint cachedLength = ownersTokens.length;\r\n        uint[] memory ownersStaked = new uint[](cachedLength);\r\n        uint index;\r\n        for ( uint i; i < cachedLength; ) {\r\n            uint t = ownersTokens[i];\r\n            uint16 _slot = slotByRacer[currentWeek][_contract][uint16(t)];\r\n            uint _id = perfByRacer[currentWeek][_slot].id;\r\n            if (_id == t && perfByRacer[currentWeek][_slot].eventWanted != 100 ){\r\n                ownersStaked[index] = _id ;\r\n                ++index;\r\n            }\r\n                        unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n\r\n        uint[] memory _return = new uint[](index);\r\n        uint j;\r\n        for(j; j < index; j++){\r\n            _return[j] = ownersStaked[j];\r\n        }\r\n\r\n\r\n        return _return;\r\n    }\r\n\r\n \r\n  function createEvent(uint16 _id, address _conCheck, uint8 _conValue, uint8 _maxqty, uint _matP, uint _nutP) public {\r\n        if(!isTeamMember[msg.sender]) revert NotTeamMember();\r\n        raceRules memory _rules;\r\n        if (_id == 1){\r\n            uint8 i = 1;\r\n            do{\r\n                _rules.conCheck = _conCheck;\r\n                _rules.conValue = i;\r\n                _rules.maxQty = _maxqty;\r\n                _rules.matPrice = _matP;\r\n                _rules.prlPrice = _nutP;\r\n                rulesByRace[currentWeek][i] = _rules;\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }while( i < 19);\r\n        } else {\r\n            _rules.conCheck = _conCheck;\r\n            _rules.conValue = _conValue;\r\n            _rules.maxQty = _maxqty;\r\n            _rules.matPrice = _matP;\r\n            _rules.prlPrice = _nutP;\r\n            rulesByRace[currentWeek][_id] = _rules;\r\n        }      \r\n    }\r\n\r\n\r\n\r\n    function teamUpdate(address to, bool member) public {\r\n        if(!isTeamMember[msg.sender]) revert NotTeamMember();\r\n        isTeamMember[to] = member;\r\n    }\r\n\r\n    function pause(bool _state) public {\r\n        if(!isTeamMember[msg.sender]) revert NotTeamMember();\r\n        paused = _state;\r\n    }\r\n\r\n    function withdraw() external onlyOwner {\r\n        (bool success, ) = (msg.sender).call{value: address(this).balance}(\"\");\r\n            //require(success, \"Transfer failed.\");\r\n            if (!success) revert MaticTransferIssue();\r\n\r\n            uint _nut = rewardToken.balanceOf(address(this));\r\n            if(!rewardToken.transfer(msg.sender, _nut)) revert PearlTransferIssue();\r\n    }\r\n\r\n    function updateEventMove(bool allowed) external {\r\n        if(!isTeamMember[msg.sender]) revert NotTeamMember();\r\n            allowEventMove[currentWeek] = allowed;\r\n    } \r\n\r\n    function updateWeek() external {\r\n        if(!isTeamMember[msg.sender]) revert NotTeamMember();\r\n        ++currentWeek;\r\n        paused = true;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EventSwitchNA\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaticTransferIssue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTOwnershipIssue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughMatic\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughPearls\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSameEvent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTeamMember\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PearlTransferIssue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakedMoreThanMax\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakingIsPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"alreadyRegistered\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_tokenID\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_event\",\"type\":\"uint8\"}],\"name\":\"changeEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_id\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_conCheck\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_conValue\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_maxqty\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_matP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nutP\",\"type\":\"uint256\"}],\"name\":\"createEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentWeek\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"currentlyStaked\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"getOwnerStaked\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"perfByRacer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"id\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"leg1\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"leg2\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"leg3\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"eventWanted\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnRacers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"id\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"leg1\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"leg2\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"leg3\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"eventWanted\",\"type\":\"uint8\"}],\"internalType\":\"struct performance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_tokenID\",\"type\":\"uint16[]\"},{\"internalType\":\"address[]\",\"name\":\"_contract\",\"type\":\"address[]\"}],\"name\":\"returnTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"rulesByRace\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"conCheck\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"conValue\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxQty\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"matPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prlPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_boost\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"_tokenID\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_racers\",\"type\":\"uint16[]\"},{\"internalType\":\"address[]\",\"name\":\"_con\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_event\",\"type\":\"uint8[]\"}],\"name\":\"signUp\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"slotByRacer\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"member\",\"type\":\"bool\"}],\"name\":\"teamUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"updateEventMove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateWeek\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletByWeek\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"wAnchor\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"wAssistant\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"wEquip\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"wBench\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"anchorContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assistContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"equipContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"benchContract\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ORL_StakingEngine", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4be3ea5699d0e2ade9eae9714a1bfa435becf123b06524379d6fd6782dab434f"}