{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Burnable is ERC1155 {\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Auctions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n\\ncontract Auctions{\\n    \\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    event AuctionCreated(uint auctionId);\\n    event AuctionDeleted(Auction auction);\\n\\n    struct Auction{\\n        address owner;\\n        uint minBid;\\n        uint reqPercentageForBiding;\\n        uint maxBid;\\n        address lastBidder;\\n        uint endDate;\\n    }\\n\\n    uint public _auctionId;\\n    \\n    mapping(uint => Auction) public _auctionDetails;\\n\\n    function createAuction(Auction calldata auction) internal returns(uint){\\n        isValidAuction(auction);\\n\\n        _auctionId++;\\n        _auctionDetails[_auctionId] = auction;\\n\\n        emit AuctionCreated(_auctionId);\\n        return _auctionId;\\n    }\\n\\n    function updateAuction(uint auctionId, Auction calldata updatedAuction) public {\\n        checkAuctionExists(auctionId);\\n        isValidAuctionOwner(auctionId);\\n        isValidAuction(updatedAuction);\\n\\n        cancelPreviousBid(auctionId);\\n        _auctionDetails[auctionId] = updatedAuction;\\n    }\\n\\n    function deleteAuction(uint auctionId) internal {\\n        Auction memory auction = _auctionDetails[auctionId];\\n\\n        checkAuctionExists(auctionId);\\n        isValidAuctionOwner(auctionId);\\n\\n        cancelPreviousBid(auctionId);\\n        delete _auctionDetails[auctionId];\\n        \\n        emit AuctionDeleted(auction);\\n    }\\n\\n    function makeBid(uint auctionId) public payable{\\n        uint currentTimestamp = block.timestamp;\\n\\n        checkAuctionExists(auctionId);\\n        isValidBid(auctionId);\\n        require(currentTimestamp < _auctionDetails[auctionId].endDate, \\\"Auctions: Auction end date expired\\\");\\n        require((msg.sender).code.length == 0, \\\"Auction: Bidder should be a EOA\\\");\\n\\n        cancelPreviousBid(auctionId);\\n        _auctionDetails[auctionId].maxBid = msg.value;\\n        _auctionDetails[auctionId].lastBidder = msg.sender;\\n\\n    }\\n\\n    function getReqBid(uint auctionId) public view returns(uint){\\n        if (_auctionDetails[auctionId].lastBidder == address(0)){\\n            return _auctionDetails[auctionId].minBid;\\n        }\\n        else{\\n            return _auctionDetails[auctionId].maxBid + findValueFromPercentage(_auctionDetails[auctionId].reqPercentageForBiding, _auctionDetails[auctionId].maxBid);\\n            // require(msg.value > _auctionDetails[auctionId].maxBid, \\\"Auctions: Bid should be > maximum bid\\\");\\n        }\\n    }\\n\\n    function endAuction(uint auctionId) internal{\\n        Auction memory auction = _auctionDetails[auctionId];\\n\\n        checkAuctionExists(auctionId);\\n        isValidAuctionOwner(auctionId);\\n\\n        // payable(auction.owner).transfer(auction.maxBid);\\n        delete _auctionDetails[auctionId];\\n\\n        emit AuctionDeleted(auction);\\n    }\\n\\n    function cancelPreviousBid(uint auctionId) private{\\n        if (_auctionDetails[auctionId].lastBidder != address(0)){\\n            payable(_auctionDetails[auctionId].lastBidder).transfer(_auctionDetails[auctionId].maxBid);\\n            _auctionDetails[auctionId].lastBidder = address(0);\\n            _auctionDetails[auctionId].maxBid = 0;\\n        }\\n    }\\n\\n    function isValidBid(uint auctionId) private view{\\n        if (_auctionDetails[auctionId].lastBidder == address(0)){\\n            require(msg.value >= _auctionDetails[auctionId].minBid, \\\"Auctions: Bid should be > minimum bid\\\");\\n        }\\n        else{\\n            require(msg.value >= _auctionDetails[auctionId].maxBid + findValueFromPercentage(_auctionDetails[auctionId].reqPercentageForBiding, _auctionDetails[auctionId].maxBid), \\\"Auctions: Bid should be > maximum bid\\\");\\n            // require(msg.value > _auctionDetails[auctionId].maxBid, \\\"Auctions: Bid should be > maximum bid\\\");\\n        }\\n    }\\n\\n    function isValidAuction(Auction calldata auction) private view{\\n        uint currentTimestamp = block.timestamp;\\n\\n        if (auction.owner == address(0) || msg.sender != auction.owner || auction.minBid == 0 || auction.maxBid != 0 || auction.lastBidder != address(0) || auction.endDate <= currentTimestamp || auction.reqPercentageForBiding == 0){\\n            revert(\\\"Auctions: Invalid auction details\\\");\\n        }\\n\\n        //\\n        \\n    }\\n\\n    function findValueFromPercentage(uint percentage, uint totalAmount) public pure returns(uint){\\n        return (percentage * totalAmount) / 100;\\n    }\\n\\n    function checkAuctionExists(uint auctionId) private view{\\n        require(_auctionDetails[auctionId].minBid != 0, \\\"Auctions: Auction don't exists\\\");\\n    }\\n\\n    function isValidAuctionOwner(uint auctionId) private view{\\n        require(msg.sender == _auctionDetails[auctionId].owner, \\\"Auctions: Not an owner of auction\\\");\\n    }\\n}\"\r\n    },\r\n    \"contracts/Main.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./TicketsERC1155.sol\\\";\\nimport \\\"./Renting.sol\\\";\\n\\n\\nenum PromoCodeType{ fixedDiscount, percentageDiscount, free }\\n\\nstruct Event{\\n    uint startDate;\\n    uint endDate;\\n    uint servicePercentage;\\n    uint royaltyPercentage;\\n    bool isPaused;\\n}\\n\\nstruct TicketType{\\n    uint maxAmount;\\n    uint price;\\n    string uri;\\n    uint[] validDates;\\n    uint soldAmount;\\n}\\n\\nstruct PromoCode{\\n    uint[] eventIds;\\n    uint endDate;\\n    PromoCodeType promoCodeType;\\n    uint maxUseAmount;\\n    uint amountUsed;\\n    // depends on promocode type\\n    uint amount;\\n    uint maxCap; //optional\\n    uint ticketTypeId; // in case of free discount for an event\\n}\\n\\ncontract Main is Ownable, Pausable{\\n    event EventCreated(uint indexed eventId, uint[] ticketIds);\\n    event TicketTypesCreated(uint indexed eventId, uint[] ticketIds);\\n    event PromoCodesCreated(uint[] promoCodeIds);\\n    \\n    event TicketTypeDeleted(TicketType ticketType);\\n    event PromoCodeDeleted(PromoCode promocode);\\n\\n    uint public _eventId;\\n    uint public _ticketTypeId;\\n    uint public _promoCodeId;\\n\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n//  ---------------------------------- Events Details ----------------------------------\\n\\n//  mapping(eventId => eventDetails)\\n    mapping(uint => Event) public _eventDetails;\\n\\n//  ---------------------------------- Ticket Type ----------------------------------\\n\\n//  mapping(eventId => ticketTypeIds)\\n    mapping(uint => EnumerableSet.UintSet) _eventTicketTypes;\\n//  mapping(ticketTypeId => ticketTypeDetails)\\n    mapping(uint => TicketType) public _ticketTypeDetails;\\n\\n//  ---------------------------------- Promo Code ----------------------------------\\n\\n//  mapping(promoCodeId => promoCodeDetails)\\n    mapping(uint => PromoCode) public _promoCodeDetails;\\n//  mapping(eventId => associated promoCodes[])\\n    mapping(uint => EnumerableSet.UintSet) _promoCodeDiscountOnEvent;\\n\\n    TicketsERC1155 public _ticketsERC1155Contract;\\n\\n    constructor(address ticketsERC1155Contract){\\n        require(ticketsERC1155Contract == address(0) || ticketsERC1155Contract.code.length > 0, \\\"Main: Invalid contract address\\\");\\n\\n        _ticketsERC1155Contract = TicketsERC1155(ticketsERC1155Contract);\\n\\n        require(_ticketsERC1155Contract.owner() == owner(), \\\"Main: Both Tickets and Main contract have different owners\\\");\\n    }\\n\\n    modifier isValidTicketContract(){\\n        require(address(_ticketsERC1155Contract) != address(0), \\\"Main: Ticket contract is null\\\");\\n        _;\\n    }\\n\\n    function setTicketContract(address ticketContractAddress) public whenNotPaused onlyOwner{\\n        require(ticketContractAddress.code.length > 0, \\\"Main: Invalid contract address\\\");\\n        _ticketsERC1155Contract = TicketsERC1155(ticketContractAddress);\\n\\n        require(msg.sender == _ticketsERC1155Contract.owner(), \\\"Main: Ticket1155 and Main contract have different owners\\\");\\n    }\\n\\n    function createEvent(Event calldata eventDetails, TicketType[] calldata ticketTypes)public whenNotPaused onlyOwner isValidTicketContract{\\n        isValidEvent(eventDetails);\\n        isValidTicketType(eventDetails, ticketTypes);\\n\\n        _eventId++;\\n        _eventDetails[_eventId] = eventDetails;\\n\\n        uint[] memory ticketTypeIds = createTicketTypes(_eventId, ticketTypes);\\n\\n        emit EventCreated(_eventId, ticketTypeIds);\\n    }\\n\\n    function updateEvent(uint eventId, Event calldata updatedEventDetails) public whenNotPaused onlyOwner isValidTicketContract{\\n        checkEventExists(eventId);\\n        isValidEvent(updatedEventDetails);\\n\\n        _eventDetails[_eventId] = updatedEventDetails;\\n    }\\n\\n    function deleteEvent(uint eventId) public whenNotPaused onlyOwner isValidTicketContract{\\n        checkEventExists(eventId);\\n\\n        delete _eventDetails[eventId];\\n        delete _eventTicketTypes[eventId];\\n        delete _promoCodeDiscountOnEvent[eventId];\\n    }\\n\\n    function createPromoCodes(PromoCode[] calldata promoCodes) public whenNotPaused onlyOwner isValidTicketContract{\\n        \\n        uint promoCodesLength = promoCodes.length;\\n        uint[] memory promoCodeIds = new uint[](promoCodesLength);\\n\\n        require(promoCodesLength > 0, \\\"Main: No promocode given\\\");\\n        \\n        for (uint i; i < promoCodesLength; i++){\\n            isValidPromoCode(promoCodes[i]);\\n\\n            _promoCodeId++;\\n            _promoCodeDetails[_promoCodeId] = promoCodes[i];\\n            promoCodeIds[i] = _promoCodeId;\\n\\n            associatePromoCodeWithEvents(promoCodes[i]);\\n        }\\n\\n        emit PromoCodesCreated(promoCodeIds);\\n    }\\n\\n    function updatePromoCode(uint promoCodeId, PromoCode calldata updatedPromoCode) public whenNotPaused onlyOwner isValidTicketContract{\\n        checkPromoCodeExists(promoCodeId);\\n        isValidPromoCode(updatedPromoCode);\\n        require(updatedPromoCode.maxUseAmount >= _promoCodeDetails[promoCodeId].amountUsed, \\\"Main: Max no of uses in updated promocode should be >= exisiting promocode used amount\\\");\\n\\n        removePromoCodeFromEvents(promoCodeId);\\n        uint usedAmount = _promoCodeDetails[promoCodeId].amountUsed;\\n       _promoCodeDetails[promoCodeId] = updatedPromoCode;\\n       _promoCodeDetails[promoCodeId].amountUsed = usedAmount;\\n       associatePromoCodeWithEvents(_promoCodeDetails[promoCodeId]);\\n    }\\n\\n    function deletePromocode(uint promoCodeId) public whenNotPaused onlyOwner isValidTicketContract{\\n        checkPromoCodeExists(promoCodeId);\\n\\n        PromoCode memory promoCode = _promoCodeDetails[promoCodeId];\\n        \\n        removePromoCodeFromEvents(promoCodeId);\\n        delete _promoCodeDetails[promoCodeId];\\n        \\n        emit PromoCodeDeleted(promoCode);\\n    }\\n\\n    // function buyTicketInCrypto(uint eventId, uint ticketTypeId, uint amountToBuy, uint promoCodeId) whenNotPaused isValidTicketContract public payable{\\n    //     uint currentTimestamp = block.timestamp;\\n        \\n    //     checkEventExists(eventId);\\n    //     checkEventNotPaused(eventId);\\n    //     checkTicketTypeExists(ticketTypeId);\\n    //     checkEventHasTicketTypeId(eventId, ticketTypeId);\\n        \\n    //     require(amountToBuy > 0, \\\"Main: Amount to buy is 0\\\");\\n    //     require(currentTimestamp <= _eventDetails[eventId].endDate, \\\"Main: Event end date passed\\\");\\n    //     require(_ticketTypeDetails[ticketTypeId].soldAmount + amountToBuy <= _ticketTypeDetails[ticketTypeId].maxAmount, \\\"Main: Don't have enough available tickets\\\");\\n\\n    //     if (promoCodeId != 0){\\n    //         checkPromoCodeExists(promoCodeId);\\n    //         checkEventHasPromoCode(eventId, promoCodeId);\\n    //         isValidDiscountAmouont(_ticketTypeDetails[ticketTypeId], _promoCodeDetails[promoCodeId]);\\n    //         require(currentTimestamp <= _promoCodeDetails[promoCodeId].endDate, \\\"Main: Promocode end date passed\\\");\\n    //     }\\n\\n    //     uint serviceFee = _promoCodeDetails[promoCodeId].promoCodeType == PromoCodeType.free ? 0 : findValueFromPercentage(_eventDetails[eventId].servicePercentage, _ticketTypeDetails[ticketTypeId].price) * amountToBuy;     \\n    //     uint actualPrice = _ticketTypeDetails[ticketTypeId].price * amountToBuy;\\n     \\n    //     uint discountedPrice = getTicketDiscountedPrice(_ticketTypeDetails[ticketTypeId], _promoCodeDetails[promoCodeId], amountToBuy);\\n\\n    //     require(msg.value == (promoCodeId == 0 ? actualPrice + serviceFee : discountedPrice + serviceFee), \\\"Main: Insufficient amount sent\\\");\\n\\n    //     _promoCodeDetails[promoCodeId].amountUsed += 1;\\n    //     _ticketTypeDetails[ticketTypeId].soldAmount += amountToBuy;\\n    //     _ticketsERC1155Contract.mint(msg.sender, ticketTypeId, amountToBuy, \\\"\\\");\\n    // }\\n\\n    function buyTicketInCrypto(uint eventId, uint ticketTypeId, uint amountToBuy, uint promoCodeId) whenNotPaused isValidTicketContract public payable{\\n        uint currentTimestamp = block.timestamp;\\n        \\n        checkEventExists(eventId);\\n        checkEventNotPaused(eventId);\\n        checkTicketTypeExists(ticketTypeId);\\n        checkEventHasTicketTypeId(eventId, ticketTypeId);\\n        \\n        require(amountToBuy > 0, \\\"Main: Amount to buy is 0\\\");\\n        require(currentTimestamp <= _eventDetails[eventId].endDate, \\\"Main: Event end date passed\\\");\\n        require(_ticketTypeDetails[ticketTypeId].soldAmount + amountToBuy <= _ticketTypeDetails[ticketTypeId].maxAmount, \\\"Main: Don't have enough available tickets\\\");\\n\\n        uint serviceFee; uint actualPrice; uint discountedPrice;\\n\\n        if (_ticketTypeDetails[ticketTypeId].price > 0){\\n            if (promoCodeId != 0){\\n                checkPromoCodeExists(promoCodeId);\\n                checkEventHasPromoCode(eventId, promoCodeId);\\n                isValidDiscountAmouont(_ticketTypeDetails[ticketTypeId], _promoCodeDetails[promoCodeId]);\\n                require(currentTimestamp <= _promoCodeDetails[promoCodeId].endDate, \\\"Main: Promocode end date passed\\\");\\n\\n                discountedPrice = getTicketDiscountedPrice(_ticketTypeDetails[ticketTypeId], _promoCodeDetails[promoCodeId], amountToBuy);\\n                \\n                _promoCodeDetails[promoCodeId].amountUsed += 1;\\n            } else {\\n                actualPrice = _ticketTypeDetails[ticketTypeId].price * amountToBuy;\\n            }\\n\\n            serviceFee = _promoCodeDetails[promoCodeId].promoCodeType == PromoCodeType.free ? 0 : findValueFromPercentage(_eventDetails[eventId].servicePercentage, _ticketTypeDetails[ticketTypeId].price) * amountToBuy;     \\n        }\\n     \\n        require(msg.value == (promoCodeId == 0 ? actualPrice + serviceFee : discountedPrice + serviceFee), \\\"Main: Insufficient amount sent\\\");\\n\\n        _ticketTypeDetails[ticketTypeId].soldAmount += amountToBuy;\\n        _ticketsERC1155Contract.mint(msg.sender, ticketTypeId, amountToBuy, \\\"\\\");\\n    }\\n\\n    function getReqTicketPrice(uint eventId, uint ticketTypeId, uint promoCodeId, uint amountToBuy) public view returns (uint, uint){\\n        \\n        if (_ticketTypeDetails[ticketTypeId].price == 0){\\n            return (0,0);\\n        }\\n\\n        isValidDiscountAmouont(_ticketTypeDetails[ticketTypeId], _promoCodeDetails[promoCodeId]);\\n        uint serviceFee = _promoCodeDetails[promoCodeId].promoCodeType == PromoCodeType.free ? 0 : findValueFromPercentage(_eventDetails[eventId].servicePercentage, _ticketTypeDetails[ticketTypeId].price);     \\n        uint actualPrice = _ticketTypeDetails[ticketTypeId].price;\\n        uint discountedPrice = getTicketDiscountedPrice(_ticketTypeDetails[ticketTypeId], _promoCodeDetails[promoCodeId], 1);\\n\\n        return promoCodeId == 0 ? (actualPrice * amountToBuy, serviceFee * amountToBuy) : (discountedPrice * amountToBuy, serviceFee * amountToBuy);\\n    }\\n\\n    function buyTicketInFiat(address buyer, uint eventId, uint ticketTypeId, uint amountToBuy) whenNotPaused public onlyOwner isValidTicketContract{\\n        uint currentTimestamp = block.timestamp;\\n        \\n        checkEventExists(eventId);\\n        checkEventNotPaused(eventId);\\n        checkTicketTypeExists(ticketTypeId);\\n        checkEventHasTicketTypeId(eventId, ticketTypeId);\\n        \\n        require(amountToBuy > 0, \\\"Main: Amount to buy is 0\\\");\\n        require(currentTimestamp <= _eventDetails[eventId].endDate, \\\"Main: Event end date passed\\\");\\n        require(_ticketTypeDetails[ticketTypeId].soldAmount + amountToBuy <= _ticketTypeDetails[ticketTypeId].maxAmount, \\\"Main: Don't have enough available tickets\\\");\\n\\n        _ticketTypeDetails[ticketTypeId].soldAmount += amountToBuy;\\n        _ticketsERC1155Contract.mint(buyer, ticketTypeId, amountToBuy, \\\"\\\");\\n    }\\n\\n    function getTicketDiscountedPrice(TicketType memory ticketTypeDetails, PromoCode memory promoCodeDetails, uint amountToBuy) private pure returns(uint){\\n        if (promoCodeDetails.promoCodeType == PromoCodeType.fixedDiscount){\\n            return (ticketTypeDetails.price - promoCodeDetails.amount) * amountToBuy;\\n        }\\n        else if(promoCodeDetails.promoCodeType == PromoCodeType.percentageDiscount){\\n            uint discountOnSingleTicket = findValueFromPercentage(promoCodeDetails.amount, ticketTypeDetails.price);\\n            uint actualPrice = ticketTypeDetails.price * amountToBuy;\\n        \\n            return (actualPrice - ((discountOnSingleTicket < promoCodeDetails.maxCap) ? (discountOnSingleTicket * amountToBuy) : (promoCodeDetails.maxCap * amountToBuy)));\\n        }\\n        else{ //promoCodeDetails.promoCodeType == PromoCodeType.free\\n            return 0;\\n        }\\n    }\\n\\n    function updateTicketType(uint eventId, uint ticketTypeId, TicketType memory updatedTicketType) public whenNotPaused onlyOwner isValidTicketContract {\\n        checkEventExists(eventId);\\n        checkEventNotPaused(eventId);\\n        checkTicketTypeExists(ticketTypeId);\\n        checkEventHasTicketTypeId(eventId, ticketTypeId);\\n        require(updatedTicketType.maxAmount >= _ticketTypeDetails[ticketTypeId].soldAmount, \\\"Main: Max copies in updated ticket type should be >= exisiting ticket sold amount\\\");\\n\\n        TicketType[] memory ticketTypes = new TicketType[](1);\\n        ticketTypes[0] = updatedTicketType;\\n\\n        isValidTicketType(_eventDetails[eventId], ticketTypes);\\n\\n        updatedTicketType.soldAmount = _ticketTypeDetails[ticketTypeId].soldAmount;\\n        _ticketTypeDetails[ticketTypeId] = updatedTicketType;\\n    }\\n\\n    function addTicketTypes(uint eventId, TicketType[] calldata ticketTypes) public whenNotPaused onlyOwner isValidTicketContract{\\n        checkEventExists(eventId);\\n        checkEventNotPaused(eventId);\\n        isValidTicketType(_eventDetails[eventId], ticketTypes);\\n\\n        uint[] memory ticketTypeIds = createTicketTypes(eventId, ticketTypes);\\n\\n        emit TicketTypesCreated(eventId, ticketTypeIds);\\n    }\\n\\n    function deleteTicketType(uint eventId, uint ticketTypeId) public whenNotPaused onlyOwner isValidTicketContract{\\n        checkEventExists(eventId);\\n        checkEventNotPaused(eventId);\\n        checkTicketTypeExists(ticketTypeId);\\n        checkEventHasTicketTypeId(eventId, ticketTypeId);\\n\\n        TicketType memory ticketType = _ticketTypeDetails[ticketTypeId];\\n        \\n        _eventTicketTypes[eventId].remove(ticketTypeId);\\n        \\n        delete _ticketTypeDetails[ticketTypeId];\\n        \\n        emit TicketTypeDeleted(ticketType);\\n    }\\n\\n    function updateEventStatus(uint eventId, bool status) public whenNotPaused onlyOwner isValidTicketContract{\\n        checkEventExists(eventId);\\n        _eventDetails[eventId].isPaused = status;\\n    }\\n\\n    function withdrawAmount(uint amount) public onlyOwner{\\n        require(amount > 0, \\\"Main: amount is 0\\\");\\n        require(amount <= address(this).balance, \\\"Main: Insufficient balance\\\");\\n        payable(owner()).transfer(amount);\\n    }\\n\\n    function checkEventExistsWithTicketTypes(uint[] calldata eventIds, uint[][] calldata ticketTypeIds) public view{\\n        require(eventIds.length > 0, \\\"Main: Got empty events array\\\");\\n        \\n        for (uint i; i < eventIds.length; i++){\\n            checkEventExists(eventIds[i]);\\n            require(ticketTypeIds[i].length > 0, \\\"Main: Got event with empty ticket type array passed\\\");\\n\\n            for (uint j; j < ticketTypeIds[i].length; j++){\\n                checkTicketTypeExists(ticketTypeIds[i][j]);\\n                checkEventHasTicketTypeId(eventIds[i], ticketTypeIds[i][j]);\\n            }\\n        }\\n    }\\n\\n    function createTicketTypes(uint eventId, TicketType[] calldata ticketTypes) private returns(uint[] memory){\\n        uint ticketTypeLength = ticketTypes.length;\\n        uint[] memory ticketTypeIds = new uint[](ticketTypeLength);\\n\\n        for (uint i; i < ticketTypeLength; i++){\\n            _ticketTypeId++;\\n            _ticketTypeDetails[_ticketTypeId] = ticketTypes[i];\\n            _eventTicketTypes[eventId].add(_ticketTypeId);\\n\\n            ticketTypeIds[i] = _ticketTypeId;\\n        }\\n\\n        return ticketTypeIds;\\n    }\\n\\n    function isValidEvent(Event calldata eventDetails) private view {\\n        uint currentTimestamp = block.timestamp;\\n        // eventDetails.startDate < currentTimestamp || \\n        if (eventDetails.endDate < currentTimestamp || eventDetails.startDate >= eventDetails.endDate){\\n            revert(\\\"Main: Invalid event details\\\");\\n        }\\n    }\\n\\n    function isValidTicketType(Event memory eventDetails, TicketType[] memory ticketTypes) private pure {\\n        uint ticketTypeLength = ticketTypes.length;\\n        \\n        require(ticketTypes.length > 0, \\\"Main: Empty ticketType array\\\");\\n\\n        for(uint i; i < ticketTypeLength; i++){\\n            \\n            uint validDatesLength = ticketTypes[i].validDates.length;\\n            // ticketTypes[i].price == 0 ||\\n            if (ticketTypes[i].maxAmount == 0 || ticketTypes[i].soldAmount > 0 || compareString(ticketTypes[i].uri, \\\"\\\") || validDatesLength == 0){\\n                revert(\\\"Main: Got invalid ticket type\\\");\\n            }\\n            else{\\n                for (uint j; j < validDatesLength; j++){\\n                    if (ticketTypes[i].validDates[j] < eventDetails.startDate || ticketTypes[i].validDates[j] > eventDetails.endDate){\\n                        revert(\\\"Main: Got invalid ticket valid date\\\");\\n                    }\\n                }\\n            }\\n        }\\n\\n    }\\n\\n    function isValidPromoCode(PromoCode calldata promoCode) private view {\\n        uint currentTimestamp = block.timestamp;\\n\\n        if (promoCode.endDate < currentTimestamp || promoCode.maxUseAmount == 0 || promoCode.amountUsed > 0 ){\\n            revert(\\\"Main: Got invalid promocode\\\");\\n        }\\n        \\n        if (promoCode.promoCodeType == PromoCodeType.fixedDiscount || promoCode.promoCodeType == PromoCodeType.percentageDiscount){\\n            require(promoCode.promoCodeType != PromoCodeType.percentageDiscount ? true : promoCode.maxCap > 0, \\\"Main: Max cap is 0\\\");\\n            isValidPromoCodeType(promoCode);\\n        }\\n        else if (promoCode.promoCodeType == PromoCodeType.free){\\n            require(promoCode.eventIds.length == 1, \\\"Main: Muliple events given for free discounts\\\");\\n\\n            checkEventExists(promoCode.eventIds[0]);\\n            checkTicketTypeExists(promoCode.ticketTypeId);\\n        }\\n        else{\\n            revert(\\\"Main: PromoCodeType enum not selected\\\");\\n        }\\n    }\\n\\n    function isValidDiscountAmouont(TicketType memory ticketType, PromoCode memory promoCode) private pure{\\n        if (promoCode.promoCodeType == PromoCodeType.percentageDiscount){\\n            require(promoCode.maxCap < ticketType.price, \\\"Main: Max cap is >= ticket type price\\\");\\n        }\\n        else if (promoCode.promoCodeType == PromoCodeType.fixedDiscount){\\n            require(promoCode.amount < ticketType.price, \\\"Main: Discount amount is >= ticket type price\\\");\\n        }\\n        \\n    }\\n\\n    function isValidPromoCodeType(PromoCode calldata promoCode) private view{\\n        \\n        require(promoCode.eventIds.length > 0, \\\"Main: No event given\\\");\\n        require(promoCode.amount > 0, \\\"Main: Discount amount is 0\\\");\\n\\n        for (uint i; i < promoCode.eventIds.length; i++){\\n            checkEventExists(promoCode.eventIds[i]);\\n            \\n            uint eventId = promoCode.eventIds[i];\\n            \\n            require(_eventTicketTypes[eventId].values().length > 0, \\\"Main: Event don't have ticket types\\\");\\n        }\\n    }\\n\\n    function removePromoCodeFromEvents(uint promoCodeId) private{\\n        uint eventIdsLength = _promoCodeDetails[promoCodeId].eventIds.length;\\n        uint[] memory eventIds = new uint[](eventIdsLength);\\n        eventIds = _promoCodeDetails[promoCodeId].eventIds;\\n\\n        for(uint i; i < eventIdsLength; i++){\\n            _promoCodeDiscountOnEvent[eventIds[i]].remove(promoCodeId);\\n        }\\n    }\\n\\n    function associatePromoCodeWithEvents(PromoCode memory promoCode) private{\\n        for(uint i; i < promoCode.eventIds.length; i++){\\n            _promoCodeDiscountOnEvent[promoCode.eventIds[i]].add(_promoCodeId);\\n        }\\n    }\\n\\n    function getEventDetails(uint eventId) public view returns(Event memory){\\n        return _eventDetails[eventId];\\n    }\\n\\n    function getPromoCodesOnEvent(uint eventId) public view returns(uint[] memory){\\n        return _promoCodeDiscountOnEvent[eventId].values();\\n    }\\n\\n    function getPromoCodeEventIds(uint promoCodeId) public view returns(uint[] memory){\\n        return _promoCodeDetails[promoCodeId].eventIds;\\n    }\\n\\n    function getEventTicketTypes(uint eventId) public view returns(uint[] memory){\\n        return _eventTicketTypes[eventId].values();\\n    }\\n\\n    function findValueFromPercentage(uint percentage, uint totalAmount) public pure returns(uint){\\n        return (percentage * totalAmount) / 100;\\n    }\\n\\n    function compareString(string memory str1, string memory str2) private pure returns(bool){\\n        return keccak256(bytes(str1)) == keccak256(bytes(str2));\\n    }\\n\\n    function checkEventExists(uint eventId) private view{\\n        require(_eventDetails[eventId].startDate != 0, \\\"Main: Event dont exists\\\");\\n    }\\n\\n    function checkEventNotPaused(uint eventId) private view {\\n        require(!_eventDetails[eventId].isPaused, \\\"Main: Event is paused\\\");\\n    }\\n\\n    function checkPromoCodeExists(uint promoCodeId) private view{\\n        require(_promoCodeDetails[promoCodeId].endDate != 0, \\\"Main: Promocode dont exists\\\");\\n    }\\n\\n    function checkTicketTypeExists(uint ticketTypeId) private view{\\n        require(_ticketTypeDetails[ticketTypeId].maxAmount != 0, \\\"Main: Ticket type dont exists\\\");\\n    }\\n\\n    function checkEventHasPromoCode(uint eventId, uint promoCodeId) private view{\\n        require(_promoCodeDiscountOnEvent[eventId].contains(promoCodeId), \\\"Main: Event dont contains promocode\\\");\\n    }\\n\\n    function checkEventHasTicketTypeId(uint eventId, uint ticketTypeId) private view{\\n        require(_eventTicketTypes[eventId].contains(ticketTypeId), \\\"Main: Event don't have given ticket type id\\\");\\n    }\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n}\\n\\n\\n    // function scanTicket(address user, uint eventId, uint ticketTypeId) public view returns(bool){\\n    //     require(user != address(0), \\\"Main: Invalid user address\\\");\\n    //     checkEventExists(eventId);\\n    //     checkEventNotPaused(eventId);\\n    //     checkTicketTypeExists(ticketTypeId);\\n    //     checkEventHasTicketTypeId(eventId, ticketTypeId);\\n\\n    //     checkTicketValidity(ticketTypeId);\\n\\n    //     //date validation\\n    //     if (_ticketsERC1155Contract.balanceOf(user, ticketTypeId) > 0 || _rentingContract._borrowedBalance(ticketTypeId, user) > 0){\\n    //         return true;\\n    //     }\\n\\n    //     return false;\\n    // }\\n\\n    // function checkTicketValidity(uint ticketTypeId) private view{\\n    //     uint currentTimestamp = block.timestamp;\\n    //     uint validDatesLength = _ticketTypeDetails[ticketTypeId].validDates.length;\\n    //     bool flag;\\n\\n    //     for (uint i; i < validDatesLength; i++){\\n    //         if (currentTimestamp <= (_ticketTypeDetails[ticketTypeId].validDates[i] + 86400)){\\n    //             revert(\\\"2nd expression\\\");\\n    //         }\\n    //         if (currentTimestamp >= _ticketTypeDetails[ticketTypeId].validDates[i] && currentTimestamp <= _ticketTypeDetails[ticketTypeId].validDates[i] + 86400){\\n    //             flag = true;\\n    //             break;\\n    //         }\\n    //     }\\n\\n    //     require(flag, \\\"Main: Ticket date validity fails\\\");\\n    // }\\n\"\r\n    },\r\n    \"contracts/Renting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./Main.sol\\\";\\nimport \\\"./Auctions.sol\\\";\\nimport \\\"./TicketsERC1155.sol\\\";\\n\\n\\ncontract Renting is Ownable, ERC1155Receiver, Auctions, Pausable {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    enum RentingType {fixedPrice, auction}\\n\\n    event RentingPkgCreatedWithFixedPrice(uint eventPkgId);\\n    event RentingPkgCreatedWithAuction(uint eventPkgId, uint auctionId);\\n    \\n    event RentingPkgDeleted(EventPkg pkg);\\n\\n    struct EventPkg{\\n        address lender;\\n        uint eventId;\\n        uint[] ticketTypeIds;\\n        uint[] copies;\\n        uint price;\\n        uint startDate;\\n        uint endDate;\\n        address borrower;\\n        RentingType rentingType;\\n    }\\n\\n\\n    Main public _mainContract;\\n    TicketsERC1155 public _ticketsERC1155Contract;\\n    uint public _eventPkgId;\\n\\n\\n    // mapping(tokenId => lender => amount)\\n    mapping(uint => mapping(address => uint)) public _lockedCopies;\\n    // mapping(tokenId => lender => amount)\\n    mapping(uint => mapping(address => uint)) public _frozenBalance;\\n\\n    mapping(uint => EventPkg) public _eventPkgDetails;\\n\\n// -------------------------- Marked as rent --------------------------\\n\\n//  mapping(lender => (tokenId => recIDs[]))\\n    mapping(address => EnumerableSet.UintSet) _lenderMarkedPkgIds;\\n\\n// -------------------------- Actually on rent --------------------------\\n\\n//  mapping(user => array containing record ids of borrowed tokens)\\n    mapping(address => EnumerableSet.UintSet) _userBorrowedpkgIds;\\n\\n//  mapping(user => array containing record ids of borrowed tokens)\\n    mapping(uint => mapping(address => uint)) public _borrowedBalance;\\n\\n//  mapping(lender => (tokenId => recIDs[]))\\n    mapping(address => EnumerableSet.UintSet) _lenderOnRentPkgIds;\\n\\n// -------------------------- Auction --------------------------\\n\\n    //mapping(pkgId => auctionId)\\n    mapping(uint => uint) public _rentingPkgWithAuction;\\n\\n\\n    constructor(address mainContractAddress, address ticketsERC1155Contract){    \\n        require(mainContractAddress.code.length > 0, \\\"Renting: Invalid main contract address\\\");\\n        require(ticketsERC1155Contract.code.length > 0, \\\"Renting: Invalid ticket1155 contract address\\\");\\n        \\n        _mainContract = Main(mainContractAddress);\\n        _ticketsERC1155Contract = TicketsERC1155(ticketsERC1155Contract);\\n\\n        require(msg.sender == _mainContract.owner(), \\\"Renting: Main and Renting contract have different owners\\\");\\n        require(msg.sender == _ticketsERC1155Contract.owner(), \\\"Renting: Tickets and Renting contract have different owners\\\");\\n    }\\n\\n    modifier isValidMainContract(){\\n        require(address(_mainContract) != address(0), \\\"Renting: Main contract is null\\\");\\n        _;\\n    }\\n\\n    modifier isValidTicketContract(){\\n        require(address(_ticketsERC1155Contract) != address(0), \\\"Renting: Ticket contract is null\\\");\\n        _;\\n    }\\n\\n    function setMainContract(address mainContractAddress) public onlyOwner whenNotPaused{\\n        require(mainContractAddress.code.length > 0, \\\"Renting: Invalid contract address\\\");\\n        _mainContract = Main(mainContractAddress);\\n\\n        require(msg.sender == _mainContract.owner(), \\\"Renting: Main and Renting contract have different owners\\\");\\n    }\\n\\n    function setTicketContract(address ticketContractAddress) public onlyOwner whenNotPaused{\\n        require(ticketContractAddress.code.length > 0, \\\"Renting: Invalid contract address\\\");\\n        _ticketsERC1155Contract = TicketsERC1155(ticketContractAddress);\\n\\n        require(msg.sender == _ticketsERC1155Contract.owner(), \\\"Renting: Ticket1155 and Renting contract have different owners\\\");\\n    }\\n\\n    function markForRentWithFixedPrice(EventPkg calldata pkg) public whenNotPaused isValidMainContract isValidTicketContract {\\n        isValidEventPkg(pkg);\\n        isEligibleForPkgCreation(pkg);\\n        require(pkg.rentingType == RentingType.fixedPrice, \\\"Renting: Renting type should be fixed-price\\\");\\n\\n        addNewEventPkgDetails(pkg);\\n\\n        emit RentingPkgCreatedWithFixedPrice(_eventPkgId);\\n    }\\n\\n    function markForRentWithAuction(EventPkg calldata pkg, Auction calldata auction) public whenNotPaused isValidMainContract isValidTicketContract {\\n        isValidEventPkg(pkg);\\n        isEligibleForPkgCreation(pkg);\\n\\n        require(pkg.lender == auction.owner, \\\"Renting: Different owners in package and auction details\\\");\\n        require(pkg.rentingType == RentingType.auction, \\\"Renting: Renting type should be auction\\\");\\n\\n        uint auctionId = createAuction(auction);\\n\\n        addNewEventPkgDetails(pkg);\\n        _rentingPkgWithAuction[_eventPkgId] = auctionId;\\n        \\n        emit RentingPkgCreatedWithAuction(_eventPkgId, auctionId);\\n    }\\n\\n    function updateEventPkg(uint eventPkgId, EventPkg calldata updatedPkg) public whenNotPaused isValidMainContract isValidTicketContract {\\n        checkEventPkgExists(eventPkgId);\\n        isValidPkgOwner(eventPkgId);\\n        checkPkgIsNotBorrowed(eventPkgId);\\n        isValidEventPkg(updatedPkg);\\n\\n        require(_eventPkgDetails[eventPkgId].rentingType == updatedPkg.rentingType, \\\"Renting: Renting type cannot be updated\\\");\\n        \\n        unlockUserCopies(_eventPkgDetails[eventPkgId]);\\n        isEligibleForPkgCreation(updatedPkg);\\n        lockUserCopies(updatedPkg);\\n        \\n        _eventPkgDetails[eventPkgId] = updatedPkg;\\n    }\\n\\n    function deleteEventPkg(uint eventPkgId) public whenNotPaused isValidMainContract isValidTicketContract {\\n        checkEventPkgExists(eventPkgId);\\n        isValidPkgOwner(eventPkgId);\\n        checkPkgIsNotBorrowed(eventPkgId);\\n        \\n        if(_eventPkgDetails[eventPkgId].rentingType == RentingType.auction){\\n            deleteAuction(_rentingPkgWithAuction[eventPkgId]);\\n            _rentingPkgWithAuction[eventPkgId] = 0;\\n        }\\n\\n        unlockUserCopies(_eventPkgDetails[eventPkgId]);\\n            \\n        EventPkg memory pkg = _eventPkgDetails[eventPkgId];\\n        _lenderMarkedPkgIds[pkg.lender].remove(eventPkgId);\\n\\n        delete _eventPkgDetails[eventPkgId];\\n        emit RentingPkgDeleted(pkg);\\n    }\\n\\n    function borrowPkgWithFixedPrice(uint eventPkgId) public whenNotPaused isValidMainContract isValidTicketContract  payable{\\n        checkEventPkgExists(eventPkgId);\\n        require(msg.sender != _eventPkgDetails[eventPkgId].lender, \\\"Renting: Cannot borrow your own package\\\");\\n        require(block.timestamp <= _eventPkgDetails[eventPkgId].endDate, \\\"Renting: Package end date passed\\\");\\n        checkPkgIsNotBorrowed(eventPkgId);\\n        checkUserBalance(_eventPkgDetails[eventPkgId].lender, _eventPkgDetails[eventPkgId].ticketTypeIds, _eventPkgDetails[eventPkgId].copies);\\n        \\n        EventPkg memory pkg = _eventPkgDetails[eventPkgId];\\n        Event memory eventDetails = _mainContract.getEventDetails(pkg.eventId);\\n\\n        uint serviceFee = findValueFromPercentage(eventDetails.servicePercentage, pkg.price);\\n        uint royaltyFee = findValueFromPercentage(eventDetails.royaltyPercentage, pkg.price);\\n\\n        require(msg.value == serviceFee + royaltyFee + pkg.price, \\\"Renting: Insufficient amount to buy package\\\");\\n        \\n        _ticketsERC1155Contract.transferTokensInBatch(\\n            pkg.lender, \\n            address(this),\\n            pkg.ticketTypeIds,\\n            pkg.copies\\n        );\\n\\n        _eventPkgDetails[eventPkgId].borrower = msg.sender;\\n        \\n        _lenderMarkedPkgIds[pkg.lender].remove(eventPkgId);\\n        _lenderOnRentPkgIds[pkg.lender].add(eventPkgId);\\n\\n        _userBorrowedpkgIds[msg.sender].add(eventPkgId);\\n        increaseBorrowedBalance(pkg, msg.sender);\\n\\n        freezeBalance(pkg);\\n\\n        payable(_eventPkgDetails[eventPkgId].lender).transfer(pkg.price);\\n        \\n    }\\n\\n    function endAuctionForRentingPkg(uint eventPkgId) public whenNotPaused isValidMainContract isValidTicketContract {\\n        checkEventPkgExists(eventPkgId);\\n        isValidPkgOwner(eventPkgId);\\n        checkUserBalance(_eventPkgDetails[eventPkgId].lender, _eventPkgDetails[eventPkgId].ticketTypeIds, _eventPkgDetails[eventPkgId].copies);\\n        require(_eventPkgDetails[eventPkgId].rentingType == RentingType.auction, \\\"Renting: Package is not on auction\\\");\\n\\n        EventPkg memory pkg = _eventPkgDetails[eventPkgId];\\n        Event memory eventDetails = _mainContract.getEventDetails(pkg.eventId);\\n        Auction memory auction = _auctionDetails[_rentingPkgWithAuction[eventPkgId]];\\n\\n        require(auction.lastBidder != address(0), \\\"Renting: Can't end auction having no bid\\\");\\n\\n        uint serviceFee = findValueFromPercentage(eventDetails.servicePercentage, auction.maxBid);\\n        uint royaltyFee = findValueFromPercentage(eventDetails.royaltyPercentage, auction.maxBid);\\n\\n        _ticketsERC1155Contract.transferTokensInBatch(\\n            pkg.lender, \\n            address(this),\\n            pkg.ticketTypeIds,\\n            pkg.copies\\n        );\\n\\n        _eventPkgDetails[eventPkgId].borrower = auction.lastBidder;\\n\\n        _lenderMarkedPkgIds[pkg.lender].remove(eventPkgId);\\n        _lenderOnRentPkgIds[pkg.lender].add(eventPkgId);\\n\\n        _userBorrowedpkgIds[auction.lastBidder].add(eventPkgId);\\n\\n        freezeBalance(pkg);\\n\\n        payable(_eventPkgDetails[eventPkgId].lender).transfer(auction.maxBid - (serviceFee + royaltyFee));\\n\\n        endAuction(_rentingPkgWithAuction[eventPkgId]);     \\n    }\\n\\n    function redeemPkg(uint eventPkgId) public whenNotPaused isValidMainContract isValidTicketContract {\\n        EventPkg memory pkg = _eventPkgDetails[eventPkgId];\\n\\n        checkEventPkgExists(eventPkgId);\\n        isValidPkgOwner(eventPkgId);\\n        require(pkg.borrower != address(0), \\\"Renting: Package is not borrowed yet\\\");\\n        require(block.timestamp >= pkg.endDate, \\\"Renting: Package is not expired yet\\\");\\n\\n        _userBorrowedpkgIds[pkg.borrower].remove(eventPkgId);\\n        decreaseBorrowedBalance(pkg);\\n\\n        _lenderOnRentPkgIds[pkg.lender].remove(eventPkgId);\\n\\n        unFreezeBalance(_eventPkgDetails[eventPkgId]);\\n        unlockUserCopies(_eventPkgDetails[eventPkgId]);\\n\\n        _ticketsERC1155Contract.transferTokensInBatch(\\n            address(this),\\n            pkg.lender, \\n            pkg.ticketTypeIds,\\n            pkg.copies\\n        );\\n        \\n        delete _eventPkgDetails[eventPkgId];\\n        emit RentingPkgDeleted(pkg); \\n    }\\n\\n    function removeFromRent(uint eventPkgId) public whenNotPaused isValidMainContract isValidTicketContract {\\n        EventPkg memory pkg = _eventPkgDetails[eventPkgId];\\n\\n        checkEventPkgExists(eventPkgId);\\n        isValidPkgOwner(eventPkgId);\\n        checkPkgIsNotBorrowed(eventPkgId);\\n\\n        unlockUserCopies(_eventPkgDetails[eventPkgId]);\\n        _lenderMarkedPkgIds[pkg.lender].remove(eventPkgId);\\n        \\n        delete _eventPkgDetails[eventPkgId];\\n        emit RentingPkgDeleted(pkg); \\n    }\\n\\n    function withdrawAmount(uint amount) public onlyOwner{\\n        require(amount > 0, \\\"Main: amount is 0\\\");\\n        require(amount <= address(this).balance, \\\"Main: Insufficient balance\\\");\\n        payable(owner()).transfer(amount);\\n    }\\n\\n    function getLenderMarkedPkgIds(address lender) public view returns(uint[] memory){\\n        return _lenderMarkedPkgIds[lender].values();\\n    }\\n\\n    function getLenderOnRentPkgIds(address lender) public view returns(uint[] memory){\\n        return _lenderOnRentPkgIds[lender].values();\\n    }\\n\\n    function getBorrowedPkgIds(address borrower) public view returns(uint[] memory){\\n        return _userBorrowedpkgIds[borrower].values();\\n    }\\n \\n    function isEligibleForPkgCreation(EventPkg calldata pkg) private view {\\n        \\n        for (uint i; i < pkg.ticketTypeIds.length; i++){\\n            \\n            uint lockedCopies = _lockedCopies[pkg.ticketTypeIds[i]][pkg.lender];\\n            uint frozenBalance = _frozenBalance[pkg.ticketTypeIds[i]][pkg.lender];\\n\\n            require(pkg.copies[i] > 0, \\\"Renting: Got invalid number of copies\\\");\\n\\n            if (_frozenBalance[pkg.ticketTypeIds[i]][pkg.lender] == 0){\\n                require(_ticketsERC1155Contract.balanceOf(pkg.lender, pkg.ticketTypeIds[i]) >= (lockedCopies + pkg.copies[i]), \\\"Renting: Not eligible for creating package (release locked tokens)\\\");\\n            }\\n            else{\\n                require(frozenBalance <= lockedCopies, \\\"Renting: Assertion occured (frozen > locked)\\\");\\n\\n                require(_ticketsERC1155Contract.balanceOf(pkg.lender, pkg.ticketTypeIds[i]) >= (lockedCopies - frozenBalance) + pkg.copies[i], \\\"Renting: Not eligible for creating package (release frozen tokens)\\\");\\n            }\\n            \\n        }\\n\\n    }\\n\\n    function addNewEventPkgDetails(EventPkg calldata pkg) private{\\n        _eventPkgId++;\\n        _eventPkgDetails[_eventPkgId] = pkg;\\n        _lenderMarkedPkgIds[pkg.lender].add(_eventPkgId);\\n        lockUserCopies(pkg);\\n    }\\n\\n    function lockUserCopies(EventPkg calldata pkg) private{\\n        for (uint i; i < pkg.ticketTypeIds.length; i++){\\n            _lockedCopies[pkg.ticketTypeIds[i]][pkg.lender] += pkg.copies[i];\\n        }\\n    }\\n\\n    function freezeBalance(EventPkg memory pkg) private{\\n        for (uint i; i < pkg.ticketTypeIds.length; i++){\\n            _frozenBalance[pkg.ticketTypeIds[i]][pkg.lender] += pkg.copies[i];\\n        }\\n    }\\n\\n    function increaseBorrowedBalance(EventPkg memory pkg, address borrower) private{\\n        for (uint i; i < pkg.ticketTypeIds.length; i++){\\n            _borrowedBalance[pkg.ticketTypeIds[i]][borrower] += pkg.copies[i];\\n        }\\n    }\\n\\n    function decreaseBorrowedBalance(EventPkg memory pkg) private{\\n        for (uint i; i < pkg.ticketTypeIds.length; i++){\\n            _borrowedBalance[pkg.ticketTypeIds[i]][pkg.borrower] -= pkg.copies[i];\\n        }\\n    }\\n\\n    function unlockUserCopies(EventPkg memory pkg) private{\\n        for (uint i; i < pkg.ticketTypeIds.length; i++){\\n            _lockedCopies[pkg.ticketTypeIds[i]][pkg.lender] -= pkg.copies[i];\\n        }\\n    }\\n\\n    function unFreezeBalance(EventPkg memory pkg) private{\\n        for (uint i; i < pkg.ticketTypeIds.length; i++){\\n            _frozenBalance[pkg.ticketTypeIds[i]][pkg.lender] -= pkg.copies[i];\\n        }\\n    }\\n\\n    function isValidEventPkg(EventPkg calldata pkg) private view{\\n        uint currentTimestamp = block.timestamp;\\n\\n        if (pkg.lender == address(0) || pkg.lender != msg.sender || pkg.price == 0 || pkg.ticketTypeIds.length == 0 || pkg.copies.length == 0 || pkg.borrower != address(0) || pkg.startDate >= pkg.endDate || pkg.endDate <= currentTimestamp){\\n            revert(\\\"Renting: Got invalid event package\\\");\\n        }\\n\\n        checkTicketTypeAndCopiesArrayLength(pkg);\\n        // require(pkg.copies.length == pkg.ticketTypeIds.length, \\\"Renting: Ticket type ids and copies arrays have different length\\\");\\n\\n        uint[] memory eventIds = new uint[](1);\\n        uint[][] memory  ticketTypeIds = new uint[][](1);\\n        \\n        eventIds[0] = pkg.eventId;\\n        ticketTypeIds[0] = pkg.ticketTypeIds;\\n\\n        _mainContract.checkEventExistsWithTicketTypes(eventIds, ticketTypeIds);\\n\\n        // checkUserBalance(pkg.lender, pkg.ticketTypeIds, pkg.copies);\\n    }\\n\\n    function isValidPkgOwner(uint eventPkgId) private view {\\n        require(msg.sender == _eventPkgDetails[eventPkgId].lender, \\\"Renting: Not an owner of package\\\");\\n    }\\n\\n    function checkUserBalance(address user, uint[] memory ticketTypeIds, uint[] memory copies) private view{\\n\\n        for (uint i; i < ticketTypeIds.length; i++){\\n            require(copies[i] > 0, \\\"Renting: Got invalid number of copies\\\");\\n            require(_ticketsERC1155Contract.balanceOf(user, ticketTypeIds[i]) >= copies[i], \\\"Renting: Seller has insufficient token balance\\\");\\n        }\\n    }\\n\\n    function checkEventPkgExists(uint eventPkgId) private view{\\n        require(_eventPkgDetails[eventPkgId].lender != address(0), \\\"Renting: Event package dont exists\\\");\\n    }\\n\\n    function checkTicketTypeAndCopiesArrayLength(EventPkg calldata pkg) private pure{\\n        require(pkg.copies.length == pkg.ticketTypeIds.length, \\\"Renting: Ticket type ids and copies arrays have different length\\\");\\n    }\\n\\n    function checkPkgIsNotBorrowed(uint eventPkgId)private view{\\n        require(_eventPkgDetails[eventPkgId].borrower == address(0), \\\"Renting: Package already borrowed\\\");\\n    }\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    // solhint-disable-next-line\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return IERC1155Receiver.onERC1155Received.selector;\\n    }\\n\\n    // solhint-disable-next-line\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return IERC1155Receiver.onERC1155BatchReceived.selector;\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/TicketsERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\\\";\\n\\ncontract TicketsERC1155 is ERC1155, Ownable, Pausable, ERC1155Burnable {\\n    address public _mainContract;\\n    address public _resellingContract;\\n    address public _rentingContract;\\n    address public _buyingContract;\\n\\n    constructor(string memory baseURI) ERC1155(baseURI) {    \\n\\n    }\\n\\n    modifier onlyAllowed(address caller){\\n        require(caller == _resellingContract || caller == _rentingContract || caller == _buyingContract || caller == _mainContract || caller == owner(), \\\"TicketsERC1155: Caller is not authorized\\\");\\n        _;\\n    }\\n\\n    modifier isValidAdminContract(){\\n        require(address(_mainContract) != address(0), \\\"TicketsERC1155: Main contract is null\\\");\\n        _;\\n    }\\n\\n    function setAdminContract(address adminContract) public onlyOwner{\\n        isValidContractAddress(adminContract);\\n        _mainContract = adminContract;\\n    }\\n\\n    function setResellingContract(address resellingContract) public onlyOwner{\\n        isValidContractAddress(resellingContract);\\n        _resellingContract = resellingContract;\\n    }\\n\\n    function setRentingContract(address rentingContract) public onlyOwner{\\n        isValidContractAddress(rentingContract);\\n        _rentingContract = rentingContract;\\n    }\\n\\n    function setBuyingContract(address buyingContract) public onlyOwner{\\n        isValidContractAddress(buyingContract);\\n        _buyingContract = buyingContract;\\n    }\\n\\n    function setURI(string memory newuri) public onlyAllowed(msg.sender) {\\n        _setURI(newuri);\\n    }\\n\\n    function mint(address account, uint256 id, uint256 amount, bytes memory data)\\n        public\\n        onlyAllowed(msg.sender) isValidAdminContract\\n    {\\n        require(account != address(0), \\\"TicketsERC1155: Account address is null\\\");\\n        \\n        _mint(account, id, amount, data);\\n\\n        givePermission(account);\\n    }\\n\\n    function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data)\\n        public\\n        onlyAllowed(msg.sender) isValidAdminContract\\n    {\\n        _mintBatch(to, ids, amounts, data);\\n        givePermission(to);\\n    }\\n\\n    function transferTokensInBatch(address from, address to, uint256[] memory ids, uint256[] memory amounts) public onlyAllowed(msg.sender) isValidAdminContract{\\n        givePermission(to);\\n        _safeBatchTransferFrom(from, to, ids, amounts, \\\"\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n        \\n        givePermission(from);\\n        givePermission(to);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n        \\n        givePermission(from);\\n        givePermission(to);\\n    }\\n\\n    function givePermission(address account) private{\\n        if (account != _mainContract && account != _resellingContract && account != _rentingContract && account != _buyingContract){\\n            if (_mainContract != address(0) && !isApprovedForAll(account, _mainContract)){\\n                updateApproval(account, _mainContract, true);\\n            }\\n            if (_resellingContract != address(0) && !isApprovedForAll(account, _resellingContract)){\\n                updateApproval(account, _resellingContract, true);\\n            }\\n            if (_rentingContract != address(0) && !isApprovedForAll(account, _rentingContract)){\\n                updateApproval(account, _rentingContract, true);\\n            }\\n            if (_buyingContract != address(0) && !isApprovedForAll(account, _buyingContract)){\\n                updateApproval(account, _buyingContract, true);\\n            }\\n        }\\n    }\\n\\n    function isValidContractAddress(address contractAddr) private view{\\n        require(contractAddr.code.length > 0, \\\"TicketsERC1155: Invalid contract address\\\");\\n    }\\n\\n    function updateApproval(address owner, address operator, bool appproved) public onlyAllowed(msg.sender){\\n       require(owner != address(0), \\\"TicketsERC1155: Owner address is null\\\");\\n       require(operator != address(0), \\\"TicketsERC1155: Operator address is null\\\");\\n\\n       _setApprovalForAll(owner, operator, appproved);\\n    }\\n\\n    function _beforeTokenTransfer(address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data)\\n        internal\\n        whenNotPaused\\n        override\\n    {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ticketsERC1155Contract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ticketIds\",\"type\":\"uint256[]\"}],\"name\":\"EventCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"eventIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"enum PromoCodeType\",\"name\":\"promoCodeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxUseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketTypeId\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct PromoCode\",\"name\":\"promocode\",\"type\":\"tuple\"}],\"name\":\"PromoCodeDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"promoCodeIds\",\"type\":\"uint256[]\"}],\"name\":\"PromoCodesCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"validDates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"soldAmount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct TicketType\",\"name\":\"ticketType\",\"type\":\"tuple\"}],\"name\":\"TicketTypeDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ticketIds\",\"type\":\"uint256[]\"}],\"name\":\"TicketTypesCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_eventDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"servicePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"royaltyPercentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_eventId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_promoCodeDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"enum PromoCodeType\",\"name\":\"promoCodeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxUseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketTypeId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_promoCodeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_ticketTypeDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"soldAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ticketTypeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ticketsERC1155Contract\",\"outputs\":[{\"internalType\":\"contract TicketsERC1155\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"validDates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"soldAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct TicketType[]\",\"name\":\"ticketTypes\",\"type\":\"tuple[]\"}],\"name\":\"addTicketTypes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketTypeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"promoCodeId\",\"type\":\"uint256\"}],\"name\":\"buyTicketInCrypto\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketTypeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToBuy\",\"type\":\"uint256\"}],\"name\":\"buyTicketInFiat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"eventIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"ticketTypeIds\",\"type\":\"uint256[][]\"}],\"name\":\"checkEventExistsWithTicketTypes\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"servicePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"royaltyPercentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"internalType\":\"struct Event\",\"name\":\"eventDetails\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"validDates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"soldAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct TicketType[]\",\"name\":\"ticketTypes\",\"type\":\"tuple[]\"}],\"name\":\"createEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"eventIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"enum PromoCodeType\",\"name\":\"promoCodeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxUseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketTypeId\",\"type\":\"uint256\"}],\"internalType\":\"struct PromoCode[]\",\"name\":\"promoCodes\",\"type\":\"tuple[]\"}],\"name\":\"createPromoCodes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"deleteEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"promoCodeId\",\"type\":\"uint256\"}],\"name\":\"deletePromocode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketTypeId\",\"type\":\"uint256\"}],\"name\":\"deleteTicketType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"findValueFromPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"getEventDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"servicePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"royaltyPercentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"internalType\":\"struct Event\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"getEventTicketTypes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"promoCodeId\",\"type\":\"uint256\"}],\"name\":\"getPromoCodeEventIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"getPromoCodesOnEvent\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketTypeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"promoCodeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToBuy\",\"type\":\"uint256\"}],\"name\":\"getReqTicketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ticketContractAddress\",\"type\":\"address\"}],\"name\":\"setTicketContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"servicePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"royaltyPercentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"internalType\":\"struct Event\",\"name\":\"updatedEventDetails\",\"type\":\"tuple\"}],\"name\":\"updateEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateEventStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"promoCodeId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"eventIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"enum PromoCodeType\",\"name\":\"promoCodeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxUseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUsed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketTypeId\",\"type\":\"uint256\"}],\"internalType\":\"struct PromoCode\",\"name\":\"updatedPromoCode\",\"type\":\"tuple\"}],\"name\":\"updatePromoCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketTypeId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"validDates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"soldAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct TicketType\",\"name\":\"updatedTicketType\",\"type\":\"tuple\"}],\"name\":\"updateTicketType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Main", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ab406e38798501224914858d548fdd06c3c8d9ed", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}