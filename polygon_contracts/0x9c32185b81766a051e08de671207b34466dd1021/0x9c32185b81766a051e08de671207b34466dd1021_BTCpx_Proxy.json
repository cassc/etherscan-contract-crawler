{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.7.6;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract Ownable {\r\n\r\n    bytes32 private constant ownerPosition = keccak256(\"btcpx.relay.proxy.owner\");\r\n\r\n    // EXCEPTION MESSAGES\r\n    string constant ERR_ZERO_ADDRESS = \"Zero address\";\r\n    string constant ERR_NOT_OWNER = \"Sender is not owner\";\r\n\r\n    constructor() {\r\n        setOwner(msg.sender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == getOwner(), ERR_NOT_OWNER);\r\n        _;\r\n    }\r\n\r\n    function getOwner() public view returns (address owner) {\r\n        bytes32 position = ownerPosition;\r\n        assembly {\r\n            owner := sload(position)\r\n        }\r\n    }\r\n\r\n    function setOwner(address _newOwner) internal {\r\n        bytes32 position = ownerPosition;\r\n        assembly {\r\n            sstore(position, _newOwner)\r\n        }\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) external onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0), ERR_ZERO_ADDRESS);\r\n        setOwner(_newOwner);\r\n    }\r\n}\r\n\r\n\r\ncontract Upgradeable is Ownable {\r\n\r\n    bytes32 private constant implementationPosition = keccak256(\"implementation\");\r\n\r\n    // EXCEPTION MESSAGES\r\n    string constant ERR_INVALID_ADDRESS = \"Implementation address is invalid\";\r\n    string constant ERR_INVALID_DATA = \"Function data is invalid\";\r\n    string constant ERR_CONTRACT_ADDRESS = \"Destination address is not contract\";\r\n    string constant ERR_SAME_ADDRESSES = \"Old and New implementation addresses are same\";\r\n\r\n    function getImplementation() public view returns (address implementation) {\r\n        bytes32 position = implementationPosition;\r\n        assembly {\r\n            implementation := sload(position)\r\n        }\r\n    }\r\n\r\n    function setImplementation(address _newImplementation) public onlyOwner {\r\n        require(_newImplementation != address(0), ERR_ZERO_ADDRESS);\r\n        require(isContract(_newImplementation), ERR_CONTRACT_ADDRESS);\r\n        address currentImplementation = getImplementation();\r\n        require(currentImplementation != _newImplementation, ERR_SAME_ADDRESSES);\r\n        bytes32 position = implementationPosition;\r\n        assembly {\r\n            sstore(position, _newImplementation)\r\n        }\r\n    }\r\n\r\n    function isContract(address _target) internal view returns (bool) {\r\n        if (_target == address(0)) {\r\n            return false;\r\n        }\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(_target)\r\n        }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\ncontract BTCpx_Proxy is Upgradeable {\r\n\r\n    fallback() external {\r\n    require(msg.data.length > 0, ERR_INVALID_DATA);\r\n        address _impl = getImplementation();\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            calldatacopy(ptr, 0x0, calldatasize())\r\n            let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0x0, 0)\r\n            let size := returndatasize()\r\n            returndatacopy(ptr, 0x0, size)\r\n            switch result\r\n            case 0 {\r\n                revert(ptr, size)\r\n            }\r\n            default {\r\n                return(ptr, size)\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newImplementation\",\"type\":\"address\"}],\"name\":\"setImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BTCpx_Proxy", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "1", "Implementation": "0x69404238d6ae1edffefa60b03e01cdc589aa94f6", "SwarmSource": "ipfs://a9a84a71d3c5bb0c24936ce56a8abfb0d46dd68af1972972bb3a6d8f8a2b2bf5"}