{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/StakingNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract NFTStaking is Ownable {\\n    IERC721 public nftContract;\\n\\n    uint256 public POINTS_REQUIRED_FOR_UPGRADE = 19200;\\n    uint256 public POINTS_REQUIRED_FOR_NAME = 5000;\\n    uint256 public REWARD_PER_HOUR = 20;\\n    uint256 public SPECIAL_REWARD_PER_HOUR = 32;\\n\\n    mapping(uint256 => bool) public specialNFTs; // Mapping to identify special NFTs\\n\\n    struct StakeInfo {\\n        uint256 stakedAt;\\n        uint256 points;\\n        uint256 usedCounter;\\n        uint256 unStakedAt;\\n        bool isStaked;\\n        bool specialStake;\\n    }\\n\\n    struct Data {\\n        uint tokenId;\\n        uint points;\\n        bool isStaked;\\n        bool specialStake;\\n    }\\n\\n    mapping(uint256 => StakeInfo) public stakes;\\n\\n    mapping(address => Data[]) public userStakes;\\n\\n    event Staked(uint256 tokenId, address staker);\\n    event Unstaked(uint256 tokenId, address unstaker);\\n    event ImageUpgraded(uint256 tokenId, address upgrader, uint256 usedCounter);\\n    event NameUpgraded(uint256 tokenId, address upgrader);\\n\\n    constructor(address _nftContract) {\\n        nftContract = IERC721(_nftContract);\\n    }\\n\\n    function setSpecialNFT(uint256[] memory tokenId) external onlyOwner {\\n        for (uint i = 0; i < tokenId.length; i++) {\\n            specialNFTs[i] = true;\\n        }\\n    }\\n\\n    function removeSpecialNFT(uint256 tokenId) external onlyOwner {\\n        specialNFTs[tokenId] = false;\\n    }\\n\\n    function setMaxPointsForArt(uint256 _newMax) external onlyOwner {\\n        POINTS_REQUIRED_FOR_UPGRADE = _newMax;\\n    }\\n\\n    function setMaxPointsForName(uint256 _newMax) external onlyOwner {\\n        POINTS_REQUIRED_FOR_NAME = _newMax;\\n    }\\n\\n    function setRewardPerHour(uint256 _new) external onlyOwner {\\n        REWARD_PER_HOUR = _new;\\n    }\\n\\n    function setSpecialRewardPerHour(uint256 _new) external onlyOwner {\\n        SPECIAL_REWARD_PER_HOUR = _new;\\n    }\\n\\n    function stake(uint256 tokenId, bool _specialStake) public {\\n        require(\\n            nftContract.ownerOf(tokenId) == msg.sender,\\n            \\\"Not the owner of NFT\\\"\\n        );\\n        nftContract.transferFrom(msg.sender, address(this), tokenId);\\n\\n        stakes[tokenId].stakedAt = block.timestamp;\\n        stakes[tokenId].isStaked = true;\\n        stakes[tokenId].specialStake = _specialStake;\\n\\n        Data memory newStake;\\n\\n        newStake = Data({\\n            tokenId: tokenId,\\n            points: stakes[tokenId].points,\\n            isStaked: true,\\n            specialStake: _specialStake\\n        });\\n\\n        userStakes[msg.sender].push(newStake);\\n\\n        emit Staked(tokenId, msg.sender);\\n    }\\n\\n    function multiSTake(\\n        uint[] memory _tokenIds,\\n        bool[] memory _specialStakes\\n    ) public {\\n        require(\\n            _tokenIds.length == _specialStakes.length,\\n            \\\"Invalid parameters\\\"\\n        );\\n        for (uint i = 0; i < _tokenIds.length; i++) {\\n            stake(_tokenIds[i], _specialStakes[i]);\\n        }\\n    }\\n\\n    function getTotalPointsOfUser(\\n        address user\\n    ) public view returns (uint256 totalPoints) {\\n        Data[] memory stakesForUser = userStakes[user];\\n        for (uint i = 0; i < stakesForUser.length; i++) {\\n            totalPoints += getTotalPoints(stakesForUser[i].tokenId);\\n        }\\n    }\\n\\n    function getAllStakesOfUser(\\n        address user\\n    ) external view returns (Data[] memory) {\\n        return userStakes[user];\\n    }\\n\\n    function getTotalPoints(uint256 tokenId) public view returns (uint256) {\\n        uint256 timeStaked = block.timestamp - stakes[tokenId].stakedAt;\\n        uint256 hoursStaked = timeStaked / 3600;\\n        uint256 pointsEarned = 0;\\n        if (stakes[tokenId].specialStake || stakes[tokenId].isStaked) {\\n            if (stakes[tokenId].specialStake) {\\n                pointsEarned = hoursStaked * SPECIAL_REWARD_PER_HOUR;\\n            } else if (!stakes[tokenId].specialStake) {\\n                pointsEarned = hoursStaked * REWARD_PER_HOUR;\\n            }\\n        }\\n        return (stakes[tokenId].points + pointsEarned);\\n    }\\n\\n    function getPointsOfNFT(uint _tokenId) public view returns (uint) {\\n        return stakes[_tokenId].points;\\n    }\\n\\n    function getIfLockingNotRequired(uint _tokenId) public view returns (bool) {\\n        if (stakes[_tokenId].points >= POINTS_REQUIRED_FOR_UPGRADE) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function unstake(uint256 tokenId) public {\\n        require(\\n            nftContract.ownerOf(tokenId) == address(this),\\n            \\\"NFT not staked\\\"\\n        );\\n\\n        if (stakes[tokenId].specialStake) {\\n            require(\\n                stakes[tokenId].points >= POINTS_REQUIRED_FOR_UPGRADE,\\n                \\\"Cannot Unlock before Accuring Required Points\\\"\\n            );\\n        }\\n        // Check if it's a special NFT\\n        if (specialNFTs[tokenId]) {\\n            uint256 accruedPoints = getTotalPoints(tokenId);\\n            if (stakes[tokenId].usedCounter == 0) {\\n                require(\\n                    accruedPoints >= POINTS_REQUIRED_FOR_UPGRADE,\\n                    \\\"Special NFTs can't unstake for first time before accuring required points\\\"\\n                );\\n            }\\n        }\\n        // Update points before unstaking\\n        stakes[tokenId].points = getTotalPoints(tokenId);\\n        stakes[tokenId].unStakedAt = block.timestamp;\\n        stakes[tokenId].isStaked = false;\\n\\n        // Find the stake in the user's stake array and remove it\\n        Data[] storage stakesForUser = userStakes[msg.sender];\\n        for (uint i = 0; i < stakesForUser.length; i++) {\\n            if (stakesForUser[i].tokenId == tokenId) {\\n                stakesForUser[i] = stakesForUser[stakesForUser.length - 1];\\n                stakesForUser.pop();\\n                break;\\n            }\\n        }\\n\\n        nftContract.transferFrom(address(this), msg.sender, tokenId);\\n\\n        emit Unstaked(tokenId, msg.sender); // Emitting the event\\n    }\\n\\n\\n    function multiUnStake(uint[] memory _tokenIds) public {\\n        require(\\n            _tokenIds.length > 0,\\n            \\\"Zero Selected\\\"\\n        );\\n        for (uint i = 0; i < _tokenIds.length; i++) {\\n            unstake(_tokenIds[i]);\\n        }\\n    }\\n\\n    function upgradeImage(uint256 tokenId) external returns (bool) {\\n        require(nftContract.ownerOf(tokenId) == msg.sender, \\\"Not the owner\\\");\\n        uint256 accruedPoints = stakes[tokenId].points;\\n        require(\\n            accruedPoints >= POINTS_REQUIRED_FOR_UPGRADE,\\n            \\\"Insufficient points\\\"\\n        );\\n\\n        stakes[tokenId].points = accruedPoints - POINTS_REQUIRED_FOR_UPGRADE; // Deduct used points\\n        stakes[tokenId].usedCounter += 1;\\n        Data[] storage stakesForUser = userStakes[msg.sender];\\n        for (uint i = 0; i < stakesForUser.length; i++) {\\n            if (stakesForUser[i].tokenId == tokenId) {\\n                stakesForUser[i].points -= POINTS_REQUIRED_FOR_UPGRADE;\\n                break;\\n            }\\n        }\\n        emit ImageUpgraded(tokenId, msg.sender, stakes[tokenId].usedCounter); // Emitting the event\\n        return true;\\n    }\\n\\n    function upgradeName(uint256 tokenId) external returns (bool) {\\n        require(nftContract.ownerOf(tokenId) == msg.sender, \\\"Not the owner\\\");\\n        uint256 accruedPoints = stakes[tokenId].points;\\n        require(\\n            accruedPoints >= POINTS_REQUIRED_FOR_NAME,\\n            \\\"Insufficient points\\\"\\n        );\\n\\n        stakes[tokenId].points = accruedPoints - POINTS_REQUIRED_FOR_NAME; // Deduct used points\\n        Data[] storage stakesForUser = userStakes[msg.sender];\\n        for (uint i = 0; i < stakesForUser.length; i++) {\\n            if (stakesForUser[i].tokenId == tokenId) {\\n                stakesForUser[i].points -= POINTS_REQUIRED_FOR_NAME;\\n                break;\\n            }\\n        }\\n        emit NameUpgraded(tokenId, msg.sender); // Emitting the event\\n        return true;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"upgrader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usedCounter\",\"type\":\"uint256\"}],\"name\":\"ImageUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"upgrader\",\"type\":\"address\"}],\"name\":\"NameUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"unstaker\",\"type\":\"address\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"POINTS_REQUIRED_FOR_NAME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POINTS_REQUIRED_FOR_UPGRADE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_PER_HOUR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPECIAL_REWARD_PER_HOUR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAllStakesOfUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"specialStake\",\"type\":\"bool\"}],\"internalType\":\"struct NFTStaking.Data[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getIfLockingNotRequired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPointsOfNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTotalPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTotalPointsOfUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalPoints\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"_specialStakes\",\"type\":\"bool[]\"}],\"name\":\"multiSTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"multiUnStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftContract\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"removeSpecialNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMax\",\"type\":\"uint256\"}],\"name\":\"setMaxPointsForArt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMax\",\"type\":\"uint256\"}],\"name\":\"setMaxPointsForName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"setRewardPerHour\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"}],\"name\":\"setSpecialNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_new\",\"type\":\"uint256\"}],\"name\":\"setSpecialRewardPerHour\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"specialNFTs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_specialStake\",\"type\":\"bool\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usedCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unStakedAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"specialStake\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"upgradeImage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"upgradeName\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStaked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"specialStake\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "NFTStaking", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000dcb074190b01a8c08c34866ee972d363c4339d53", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}