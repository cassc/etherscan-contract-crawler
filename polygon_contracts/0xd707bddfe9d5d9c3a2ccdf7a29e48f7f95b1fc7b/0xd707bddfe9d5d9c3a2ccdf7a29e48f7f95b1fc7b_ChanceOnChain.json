{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/OwnableInterface.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/**\\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\\n */\\npragma solidity ^0.8.0;\\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \\\"./AutomationCompatibleInterface.sol\\\";\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OwnableInterface {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/TypeAndVersionInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract TypeAndVersionInterface {\\n  function typeAndVersion() external pure virtual returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/VRFV2WrapperInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFV2WrapperInterface {\\n  /**\\n   * @return the request ID of the most recent VRF V2 request made by this wrapper. This should only\\n   * be relied option within the same transaction that the request was made.\\n   */\\n  function lastRequestId() external view returns (uint256);\\n\\n  /**\\n   * @notice Calculates the price of a VRF request with the given callbackGasLimit at the current\\n   * @notice block.\\n   *\\n   * @dev This function relies on the transaction gas price which is not automatically set during\\n   * @dev simulation. To estimate the price at a specific gas price, use the estimatePrice function.\\n   *\\n   * @param _callbackGasLimit is the gas limit used to estimate the price.\\n   */\\n  function calculateRequestPrice(uint32 _callbackGasLimit) external view returns (uint256);\\n\\n  /**\\n   * @notice Estimates the price of a VRF request with a specific gas limit and gas price.\\n   *\\n   * @dev This is a convenience function that can be called in simulation to better understand\\n   * @dev pricing.\\n   *\\n   * @param _callbackGasLimit is the gas limit used to estimate the price.\\n   * @param _requestGasPriceWei is the gas price in wei used for the estimation.\\n   */\\n  function estimateRequestPrice(uint32 _callbackGasLimit, uint256 _requestGasPriceWei) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// A mock for testing code that relies on VRFCoordinatorV2.\\npragma solidity ^0.8.4;\\n\\nimport \\\"../interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"../interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"../VRFConsumerBaseV2.sol\\\";\\n\\ncontract VRFCoordinatorV2Mock is VRFCoordinatorV2Interface {\\n  uint96 public immutable BASE_FEE;\\n  uint96 public immutable GAS_PRICE_LINK;\\n  uint16 public immutable MAX_CONSUMERS = 100;\\n\\n  error InvalidSubscription();\\n  error InsufficientBalance();\\n  error MustBeSubOwner(address owner);\\n  error TooManyConsumers();\\n  error InvalidConsumer();\\n  error InvalidRandomWords();\\n\\n  event RandomWordsRequested(\\n    bytes32 indexed keyHash,\\n    uint256 requestId,\\n    uint256 preSeed,\\n    uint64 indexed subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords,\\n    address indexed sender\\n  );\\n  event RandomWordsFulfilled(uint256 indexed requestId, uint256 outputSeed, uint96 payment, bool success);\\n  event SubscriptionCreated(uint64 indexed subId, address owner);\\n  event SubscriptionFunded(uint64 indexed subId, uint256 oldBalance, uint256 newBalance);\\n  event SubscriptionCanceled(uint64 indexed subId, address to, uint256 amount);\\n  event ConsumerAdded(uint64 indexed subId, address consumer);\\n  event ConsumerRemoved(uint64 indexed subId, address consumer);\\n\\n  uint64 s_currentSubId;\\n  uint256 s_nextRequestId = 1;\\n  uint256 s_nextPreSeed = 100;\\n  struct Subscription {\\n    address owner;\\n    uint96 balance;\\n  }\\n  mapping(uint64 => Subscription) s_subscriptions; /* subId */ /* subscription */\\n  mapping(uint64 => address[]) s_consumers; /* subId */ /* consumers */\\n\\n  struct Request {\\n    uint64 subId;\\n    uint32 callbackGasLimit;\\n    uint32 numWords;\\n  }\\n  mapping(uint256 => Request) s_requests; /* requestId */ /* request */\\n\\n  constructor(uint96 _baseFee, uint96 _gasPriceLink) {\\n    BASE_FEE = _baseFee;\\n    GAS_PRICE_LINK = _gasPriceLink;\\n  }\\n\\n  function consumerIsAdded(uint64 _subId, address _consumer) public view returns (bool) {\\n    address[] memory consumers = s_consumers[_subId];\\n    for (uint256 i = 0; i < consumers.length; i++) {\\n      if (consumers[i] == _consumer) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\\n\\n  modifier onlyValidConsumer(uint64 _subId, address _consumer) {\\n    if (!consumerIsAdded(_subId, _consumer)) {\\n      revert InvalidConsumer();\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomWords fulfills the given request, sending the random words to the supplied\\n   * @notice consumer.\\n   *\\n   * @dev This mock uses a simplified formula for calculating payment amount and gas usage, and does\\n   * @dev not account for all edge cases handled in the real VRF coordinator. When making requests\\n   * @dev against the real coordinator a small amount of additional LINK is required.\\n   *\\n   * @param _requestId the request to fulfill\\n   * @param _consumer the VRF randomness consumer to send the result to\\n   */\\n  function fulfillRandomWords(uint256 _requestId, address _consumer) external {\\n    fulfillRandomWordsWithOverride(_requestId, _consumer, new uint256[](0));\\n  }\\n\\n  /**\\n   * @notice fulfillRandomWordsWithOverride allows the user to pass in their own random words.\\n   *\\n   * @param _requestId the request to fulfill\\n   * @param _consumer the VRF randomness consumer to send the result to\\n   * @param _words user-provided random words\\n   */\\n  function fulfillRandomWordsWithOverride(\\n    uint256 _requestId,\\n    address _consumer,\\n    uint256[] memory _words\\n  ) public {\\n    uint256 startGas = gasleft();\\n    if (s_requests[_requestId].subId == 0) {\\n      revert(\\\"nonexistent request\\\");\\n    }\\n    Request memory req = s_requests[_requestId];\\n\\n    if (_words.length == 0) {\\n      _words = new uint256[](req.numWords);\\n      for (uint256 i = 0; i < req.numWords; i++) {\\n        _words[i] = uint256(keccak256(abi.encode(_requestId, i)));\\n      }\\n    } else if (_words.length != req.numWords) {\\n      revert InvalidRandomWords();\\n    }\\n\\n    VRFConsumerBaseV2 v;\\n    bytes memory callReq = abi.encodeWithSelector(v.rawFulfillRandomWords.selector, _requestId, _words);\\n    (bool success, ) = _consumer.call{gas: req.callbackGasLimit}(callReq);\\n\\n    uint96 payment = uint96(BASE_FEE + ((startGas - gasleft()) * GAS_PRICE_LINK));\\n    if (s_subscriptions[req.subId].balance < payment) {\\n      revert InsufficientBalance();\\n    }\\n    s_subscriptions[req.subId].balance -= payment;\\n    delete (s_requests[_requestId]);\\n    emit RandomWordsFulfilled(_requestId, _requestId, payment, success);\\n  }\\n\\n  /**\\n   * @notice fundSubscription allows funding a subscription with an arbitrary amount for testing.\\n   *\\n   * @param _subId the subscription to fund\\n   * @param _amount the amount to fund\\n   */\\n  function fundSubscription(uint64 _subId, uint96 _amount) public {\\n    if (s_subscriptions[_subId].owner == address(0)) {\\n      revert InvalidSubscription();\\n    }\\n    uint96 oldBalance = s_subscriptions[_subId].balance;\\n    s_subscriptions[_subId].balance += _amount;\\n    emit SubscriptionFunded(_subId, oldBalance, oldBalance + _amount);\\n  }\\n\\n  function requestRandomWords(\\n    bytes32 _keyHash,\\n    uint64 _subId,\\n    uint16 _minimumRequestConfirmations,\\n    uint32 _callbackGasLimit,\\n    uint32 _numWords\\n  ) external override onlyValidConsumer(_subId, msg.sender) returns (uint256) {\\n    if (s_subscriptions[_subId].owner == address(0)) {\\n      revert InvalidSubscription();\\n    }\\n\\n    uint256 requestId = s_nextRequestId++;\\n    uint256 preSeed = s_nextPreSeed++;\\n\\n    s_requests[requestId] = Request({subId: _subId, callbackGasLimit: _callbackGasLimit, numWords: _numWords});\\n\\n    emit RandomWordsRequested(\\n      _keyHash,\\n      requestId,\\n      preSeed,\\n      _subId,\\n      _minimumRequestConfirmations,\\n      _callbackGasLimit,\\n      _numWords,\\n      msg.sender\\n    );\\n    return requestId;\\n  }\\n\\n  function createSubscription() external override returns (uint64 _subId) {\\n    s_currentSubId++;\\n    s_subscriptions[s_currentSubId] = Subscription({owner: msg.sender, balance: 0});\\n    emit SubscriptionCreated(s_currentSubId, msg.sender);\\n    return s_currentSubId;\\n  }\\n\\n  function getSubscription(uint64 _subId)\\n    external\\n    view\\n    override\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    )\\n  {\\n    if (s_subscriptions[_subId].owner == address(0)) {\\n      revert InvalidSubscription();\\n    }\\n    return (s_subscriptions[_subId].balance, 0, s_subscriptions[_subId].owner, s_consumers[_subId]);\\n  }\\n\\n  function cancelSubscription(uint64 _subId, address _to) external override onlySubOwner(_subId) {\\n    emit SubscriptionCanceled(_subId, _to, s_subscriptions[_subId].balance);\\n    delete (s_subscriptions[_subId]);\\n  }\\n\\n  modifier onlySubOwner(uint64 _subId) {\\n    address owner = s_subscriptions[_subId].owner;\\n    if (owner == address(0)) {\\n      revert InvalidSubscription();\\n    }\\n    if (msg.sender != owner) {\\n      revert MustBeSubOwner(owner);\\n    }\\n    _;\\n  }\\n\\n  function getRequestConfig()\\n    external\\n    pure\\n    override\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    )\\n  {\\n    return (3, 2000000, new bytes32[](0));\\n  }\\n\\n  function addConsumer(uint64 _subId, address _consumer) external override onlySubOwner(_subId) {\\n    if (s_consumers[_subId].length == MAX_CONSUMERS) {\\n      revert TooManyConsumers();\\n    }\\n\\n    if (consumerIsAdded(_subId, _consumer)) {\\n      return;\\n    }\\n\\n    s_consumers[_subId].push(_consumer);\\n    emit ConsumerAdded(_subId, _consumer);\\n  }\\n\\n  function removeConsumer(uint64 _subId, address _consumer)\\n    external\\n    override\\n    onlySubOwner(_subId)\\n    onlyValidConsumer(_subId, _consumer)\\n  {\\n    address[] storage consumers = s_consumers[_subId];\\n    for (uint256 i = 0; i < consumers.length; i++) {\\n      if (consumers[i] == _consumer) {\\n        address last = consumers[consumers.length - 1];\\n        consumers[i] = last;\\n        consumers.pop();\\n        break;\\n      }\\n    }\\n\\n    emit ConsumerRemoved(_subId, _consumer);\\n  }\\n\\n  function getConfig()\\n    external\\n    view\\n    returns (\\n      uint16 minimumRequestConfirmations,\\n      uint32 maxGasLimit,\\n      uint32 stalenessSeconds,\\n      uint32 gasAfterPaymentCalculation\\n    )\\n  {\\n    return (4, 2_500_000, 2_700, 33285);\\n  }\\n\\n  function getFeeConfig()\\n    external\\n    view\\n    returns (\\n      uint32 fulfillmentFlatFeeLinkPPMTier1,\\n      uint32 fulfillmentFlatFeeLinkPPMTier2,\\n      uint32 fulfillmentFlatFeeLinkPPMTier3,\\n      uint32 fulfillmentFlatFeeLinkPPMTier4,\\n      uint32 fulfillmentFlatFeeLinkPPMTier5,\\n      uint24 reqsForTier2,\\n      uint24 reqsForTier3,\\n      uint24 reqsForTier4,\\n      uint24 reqsForTier5\\n    )\\n  {\\n    return (\\n      100000, // 0.1 LINK\\n      100000, // 0.1 LINK\\n      100000, // 0.1 LINK\\n      100000, // 0.1 LINK\\n      100000, // 0.1 LINK\\n      0,\\n      0,\\n      0,\\n      0\\n    );\\n  }\\n\\n  function getFallbackWeiPerUnitLink() external view returns (int256) {\\n    return 4000000000000000; // 0.004 Ether\\n  }\\n\\n  function requestSubscriptionOwnerTransfer(uint64 _subId, address _newOwner) external pure override {\\n    revert(\\\"not implemented\\\");\\n  }\\n\\n  function acceptSubscriptionOwnerTransfer(uint64 _subId) external pure override {\\n    revert(\\\"not implemented\\\");\\n  }\\n\\n  function pendingRequestExists(uint64 subId) public view override returns (bool) {\\n    revert(\\\"not implemented\\\");\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/VRFV2Wrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"./ConfirmedOwner.sol\\\";\\nimport \\\"./interfaces/TypeAndVersionInterface.sol\\\";\\nimport \\\"./VRFConsumerBaseV2.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"./interfaces/VRFV2WrapperInterface.sol\\\";\\nimport \\\"./VRFV2WrapperConsumerBase.sol\\\";\\n\\n/**\\n * @notice A wrapper for VRFCoordinatorV2 that provides an interface better suited to one-off\\n * @notice requests for randomness.\\n */\\ncontract VRFV2Wrapper is ConfirmedOwner, TypeAndVersionInterface, VRFConsumerBaseV2, VRFV2WrapperInterface {\\n  event WrapperFulfillmentFailed(uint256 indexed requestId, address indexed consumer);\\n\\n  LinkTokenInterface public immutable LINK;\\n  AggregatorV3Interface public immutable LINK_ETH_FEED;\\n  ExtendedVRFCoordinatorV2Interface public immutable COORDINATOR;\\n  uint64 public immutable SUBSCRIPTION_ID;\\n\\n  // 5k is plenty for an EXTCODESIZE call (2600) + warm CALL (100)\\n  // and some arithmetic operations.\\n  uint256 private constant GAS_FOR_CALL_EXACT_CHECK = 5_000;\\n\\n  // lastRequestId is the request ID of the most recent VRF V2 request made by this wrapper. This\\n  // should only be relied on within the same transaction the request was made.\\n  uint256 public override lastRequestId;\\n\\n  // Configuration fetched from VRFCoordinatorV2\\n\\n  // s_configured tracks whether this contract has been configured. If not configured, randomness\\n  // requests cannot be made.\\n  bool public s_configured;\\n\\n  // s_disabled disables the contract when true. When disabled, new VRF requests cannot be made\\n  // but existing ones can still be fulfilled.\\n  bool public s_disabled;\\n\\n  // s_fallbackWeiPerUnitLink is the backup LINK exchange rate used when the LINK/NATIVE feed is\\n  // stale.\\n  int256 private s_fallbackWeiPerUnitLink;\\n\\n  // s_stalenessSeconds is the number of seconds before we consider the feed price to be stale and\\n  // fallback to fallbackWeiPerUnitLink.\\n  uint32 private s_stalenessSeconds;\\n\\n  // s_fulfillmentFlatFeeLinkPPM is the flat fee in millionths of LINK that VRFCoordinatorV2\\n  // charges.\\n  uint32 private s_fulfillmentFlatFeeLinkPPM;\\n\\n  // Other configuration\\n\\n  // s_wrapperGasOverhead reflects the gas overhead of the wrapper's fulfillRandomWords\\n  // function. The cost for this gas is passed to the user.\\n  uint32 private s_wrapperGasOverhead;\\n\\n  // s_coordinatorGasOverhead reflects the gas overhead of the coordinator's fulfillRandomWords\\n  // function. The cost for this gas is billed to the subscription, and must therefor be included\\n  // in the pricing for wrapped requests. This includes the gas costs of proof verification and\\n  // payment calculation in the coordinator.\\n  uint32 private s_coordinatorGasOverhead;\\n\\n  // s_wrapperPremiumPercentage is the premium ratio in percentage. For example, a value of 0\\n  // indicates no premium. A value of 15 indicates a 15 percent premium.\\n  uint8 private s_wrapperPremiumPercentage;\\n\\n  // s_keyHash is the key hash to use when requesting randomness. Fees are paid based on current gas\\n  // fees, so this should be set to the highest gas lane on the network.\\n  bytes32 s_keyHash;\\n\\n  // s_maxNumWords is the max number of words that can be requested in a single wrapped VRF request.\\n  uint8 s_maxNumWords;\\n\\n  struct Callback {\\n    address callbackAddress;\\n    uint32 callbackGasLimit;\\n    uint256 requestGasPrice;\\n    int256 requestWeiPerUnitLink;\\n    uint256 juelsPaid;\\n  }\\n  mapping(uint256 => Callback) /* requestID */ /* callback */\\n    public s_callbacks;\\n\\n  constructor(\\n    address _link,\\n    address _linkEthFeed,\\n    address _coordinator\\n  ) ConfirmedOwner(msg.sender) VRFConsumerBaseV2(_coordinator) {\\n    LINK = LinkTokenInterface(_link);\\n    LINK_ETH_FEED = AggregatorV3Interface(_linkEthFeed);\\n    COORDINATOR = ExtendedVRFCoordinatorV2Interface(_coordinator);\\n\\n    // Create this wrapper's subscription and add itself as a consumer.\\n    uint64 subId = ExtendedVRFCoordinatorV2Interface(_coordinator).createSubscription();\\n    SUBSCRIPTION_ID = subId;\\n    ExtendedVRFCoordinatorV2Interface(_coordinator).addConsumer(subId, address(this));\\n  }\\n\\n  /**\\n   * @notice setConfig configures VRFV2Wrapper.\\n   *\\n   * @dev Sets wrapper-specific configuration based on the given parameters, and fetches any needed\\n   * @dev VRFCoordinatorV2 configuration from the coordinator.\\n   *\\n   * @param _wrapperGasOverhead reflects the gas overhead of the wrapper's fulfillRandomWords\\n   *        function.\\n   *\\n   * @param _coordinatorGasOverhead reflects the gas overhead of the coordinator's\\n   *        fulfillRandomWords function.\\n   *\\n   * @param _wrapperPremiumPercentage is the premium ratio in percentage for wrapper requests.\\n   *\\n   * @param _keyHash to use for requesting randomness.\\n   */\\n  function setConfig(\\n    uint32 _wrapperGasOverhead,\\n    uint32 _coordinatorGasOverhead,\\n    uint8 _wrapperPremiumPercentage,\\n    bytes32 _keyHash,\\n    uint8 _maxNumWords\\n  ) external onlyOwner {\\n    s_wrapperGasOverhead = _wrapperGasOverhead;\\n    s_coordinatorGasOverhead = _coordinatorGasOverhead;\\n    s_wrapperPremiumPercentage = _wrapperPremiumPercentage;\\n    s_keyHash = _keyHash;\\n    s_maxNumWords = _maxNumWords;\\n    s_configured = true;\\n\\n    // Get other configuration from coordinator\\n    (, , s_stalenessSeconds, ) = COORDINATOR.getConfig();\\n    s_fallbackWeiPerUnitLink = COORDINATOR.getFallbackWeiPerUnitLink();\\n    (s_fulfillmentFlatFeeLinkPPM, , , , , , , , ) = COORDINATOR.getFeeConfig();\\n  }\\n\\n  /**\\n   * @notice getConfig returns the current VRFV2Wrapper configuration.\\n   *\\n   * @return fallbackWeiPerUnitLink is the backup LINK exchange rate used when the LINK/NATIVE feed\\n   *         is stale.\\n   *\\n   * @return stalenessSeconds is the number of seconds before we consider the feed price to be stale\\n   *         and fallback to fallbackWeiPerUnitLink.\\n   *\\n   * @return fulfillmentFlatFeeLinkPPM is the flat fee in millionths of LINK that VRFCoordinatorV2\\n   *         charges.\\n   *\\n   * @return wrapperGasOverhead reflects the gas overhead of the wrapper's fulfillRandomWords\\n   *         function. The cost for this gas is passed to the user.\\n   *\\n   * @return coordinatorGasOverhead reflects the gas overhead of the coordinator's\\n   *         fulfillRandomWords function.\\n   *\\n   * @return wrapperPremiumPercentage is the premium ratio in percentage. For example, a value of 0\\n   *         indicates no premium. A value of 15 indicates a 15 percent premium.\\n   *\\n   * @return keyHash is the key hash to use when requesting randomness. Fees are paid based on\\n   *         current gas fees, so this should be set to the highest gas lane on the network.\\n   *\\n   * @return maxNumWords is the max number of words that can be requested in a single wrapped VRF\\n   *         request.\\n   */\\n  function getConfig()\\n    external\\n    view\\n    returns (\\n      int256 fallbackWeiPerUnitLink,\\n      uint32 stalenessSeconds,\\n      uint32 fulfillmentFlatFeeLinkPPM,\\n      uint32 wrapperGasOverhead,\\n      uint32 coordinatorGasOverhead,\\n      uint8 wrapperPremiumPercentage,\\n      bytes32 keyHash,\\n      uint8 maxNumWords\\n    )\\n  {\\n    return (\\n      s_fallbackWeiPerUnitLink,\\n      s_stalenessSeconds,\\n      s_fulfillmentFlatFeeLinkPPM,\\n      s_wrapperGasOverhead,\\n      s_coordinatorGasOverhead,\\n      s_wrapperPremiumPercentage,\\n      s_keyHash,\\n      s_maxNumWords\\n    );\\n  }\\n\\n  /**\\n   * @notice Calculates the price of a VRF request with the given callbackGasLimit at the current\\n   * @notice block.\\n   *\\n   * @dev This function relies on the transaction gas price which is not automatically set during\\n   * @dev simulation. To estimate the price at a specific gas price, use the estimatePrice function.\\n   *\\n   * @param _callbackGasLimit is the gas limit used to estimate the price.\\n   */\\n  function calculateRequestPrice(uint32 _callbackGasLimit)\\n    external\\n    view\\n    override\\n    onlyConfiguredNotDisabled\\n    returns (uint256)\\n  {\\n    int256 weiPerUnitLink = getFeedData();\\n    return calculateRequestPriceInternal(_callbackGasLimit, tx.gasprice, weiPerUnitLink);\\n  }\\n\\n  /**\\n   * @notice Estimates the price of a VRF request with a specific gas limit and gas price.\\n   *\\n   * @dev This is a convenience function that can be called in simulation to better understand\\n   * @dev pricing.\\n   *\\n   * @param _callbackGasLimit is the gas limit used to estimate the price.\\n   * @param _requestGasPriceWei is the gas price in wei used for the estimation.\\n   */\\n  function estimateRequestPrice(uint32 _callbackGasLimit, uint256 _requestGasPriceWei)\\n    external\\n    view\\n    override\\n    onlyConfiguredNotDisabled\\n    returns (uint256)\\n  {\\n    int256 weiPerUnitLink = getFeedData();\\n    return calculateRequestPriceInternal(_callbackGasLimit, _requestGasPriceWei, weiPerUnitLink);\\n  }\\n\\n  function calculateRequestPriceInternal(\\n    uint256 _gas,\\n    uint256 _requestGasPrice,\\n    int256 _weiPerUnitLink\\n  ) internal view returns (uint256) {\\n    uint256 baseFee = (1e18 * _requestGasPrice * (_gas + s_wrapperGasOverhead + s_coordinatorGasOverhead)) /\\n      uint256(_weiPerUnitLink);\\n\\n    uint256 feeWithPremium = (baseFee * (s_wrapperPremiumPercentage + 100)) / 100;\\n\\n    uint256 feeWithFlatFee = feeWithPremium + (1e12 * uint256(s_fulfillmentFlatFeeLinkPPM));\\n\\n    return feeWithFlatFee;\\n  }\\n\\n  /**\\n   * @notice onTokenTransfer is called by LinkToken upon payment for a VRF request.\\n   *\\n   * @dev Reverts if payment is too low.\\n   *\\n   * @param _sender is the sender of the payment, and the address that will receive a VRF callback\\n   *        upon fulfillment.\\n   *\\n   * @param _amount is the amount of LINK paid in Juels.\\n   *\\n   * @param _data is the abi-encoded VRF request parameters: uint32 callbackGasLimit,\\n   *        uint16 requestConfirmations, and uint32 numWords.\\n   */\\n  function onTokenTransfer(\\n    address _sender,\\n    uint256 _amount,\\n    bytes calldata _data\\n  ) external onlyConfiguredNotDisabled {\\n    require(msg.sender == address(LINK), \\\"only callable from LINK\\\");\\n\\n    (uint32 callbackGasLimit, uint16 requestConfirmations, uint32 numWords) = abi.decode(\\n      _data,\\n      (uint32, uint16, uint32)\\n    );\\n    uint32 eip150Overhead = getEIP150Overhead(callbackGasLimit);\\n    int256 weiPerUnitLink = getFeedData();\\n    uint256 price = calculateRequestPriceInternal(callbackGasLimit, tx.gasprice, weiPerUnitLink);\\n    require(_amount >= price, \\\"fee too low\\\");\\n    require(numWords <= s_maxNumWords, \\\"numWords too high\\\");\\n\\n    uint256 requestId = COORDINATOR.requestRandomWords(\\n      s_keyHash,\\n      SUBSCRIPTION_ID,\\n      requestConfirmations,\\n      callbackGasLimit + eip150Overhead + s_wrapperGasOverhead,\\n      numWords\\n    );\\n    s_callbacks[requestId] = Callback({\\n      callbackAddress: _sender,\\n      callbackGasLimit: callbackGasLimit,\\n      requestGasPrice: tx.gasprice,\\n      requestWeiPerUnitLink: weiPerUnitLink,\\n      juelsPaid: _amount\\n    });\\n    lastRequestId = requestId;\\n  }\\n\\n  /**\\n   * @notice withdraw is used by the VRFV2Wrapper's owner to withdraw LINK revenue.\\n   *\\n   * @param _recipient is the address that should receive the LINK funds.\\n   *\\n   * @param _amount is the amount of LINK in Juels that should be withdrawn.\\n   */\\n  function withdraw(address _recipient, uint256 _amount) external onlyOwner {\\n    LINK.transfer(_recipient, _amount);\\n  }\\n\\n  /**\\n   * @notice enable this contract so that new requests can be accepted.\\n   */\\n  function enable() external onlyOwner {\\n    s_disabled = false;\\n  }\\n\\n  /**\\n   * @notice disable this contract so that new requests will be rejected. When disabled, new requests\\n   * @notice will revert but existing requests can still be fulfilled.\\n   */\\n  function disable() external onlyOwner {\\n    s_disabled = true;\\n  }\\n\\n  function fulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) internal override {\\n    Callback memory callback = s_callbacks[_requestId];\\n    delete s_callbacks[_requestId];\\n    require(callback.callbackAddress != address(0), \\\"request not found\\\"); // This should never happen\\n\\n    VRFV2WrapperConsumerBase c;\\n    bytes memory resp = abi.encodeWithSelector(c.rawFulfillRandomWords.selector, _requestId, _randomWords);\\n\\n    bool success = callWithExactGas(callback.callbackGasLimit, callback.callbackAddress, resp);\\n    if (!success) {\\n      emit WrapperFulfillmentFailed(_requestId, callback.callbackAddress);\\n    }\\n  }\\n\\n  function getFeedData() private view returns (int256) {\\n    bool staleFallback = s_stalenessSeconds > 0;\\n    uint256 timestamp;\\n    int256 weiPerUnitLink;\\n    (, weiPerUnitLink, , timestamp, ) = LINK_ETH_FEED.latestRoundData();\\n    // solhint-disable-next-line not-rely-on-time\\n    if (staleFallback && s_stalenessSeconds < block.timestamp - timestamp) {\\n      weiPerUnitLink = s_fallbackWeiPerUnitLink;\\n    }\\n    require(weiPerUnitLink >= 0, \\\"Invalid LINK wei price\\\");\\n    return weiPerUnitLink;\\n  }\\n\\n  /**\\n   * @dev Calculates extra amount of gas required for running an assembly call() post-EIP150.\\n   */\\n  function getEIP150Overhead(uint32 gas) private pure returns (uint32) {\\n    return gas / 63 + 1;\\n  }\\n\\n  /**\\n   * @dev calls target address with exactly gasAmount gas and data as calldata\\n   * or reverts if at least gasAmount gas is not available.\\n   */\\n  function callWithExactGas(\\n    uint256 gasAmount,\\n    address target,\\n    bytes memory data\\n  ) private returns (bool success) {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      let g := gas()\\n      // Compute g -= GAS_FOR_CALL_EXACT_CHECK and check for underflow\\n      // The gas actually passed to the callee is min(gasAmount, 63//64*gas available).\\n      // We want to ensure that we revert if gasAmount >  63//64*gas available\\n      // as we do not want to provide them with less, however that check itself costs\\n      // gas.  GAS_FOR_CALL_EXACT_CHECK ensures we have at least enough gas to be able\\n      // to revert if gasAmount >  63//64*gas available.\\n      if lt(g, GAS_FOR_CALL_EXACT_CHECK) {\\n        revert(0, 0)\\n      }\\n      g := sub(g, GAS_FOR_CALL_EXACT_CHECK)\\n      // if g - g//64 <= gasAmount, revert\\n      // (we subtract g//64 because of EIP-150)\\n      if iszero(gt(sub(g, div(g, 64)), gasAmount)) {\\n        revert(0, 0)\\n      }\\n      // solidity calls check that a contract actually exists at the destination, so we do the same\\n      if iszero(extcodesize(target)) {\\n        revert(0, 0)\\n      }\\n      // call and return whether we succeeded. ignore return data\\n      // call(gas,addr,value,argsOffset,argsLength,retOffset,retLength)\\n      success := call(gasAmount, target, 0, add(data, 0x20), mload(data), 0, 0)\\n    }\\n    return success;\\n  }\\n\\n  function typeAndVersion() external pure virtual override returns (string memory) {\\n    return \\\"VRFV2Wrapper 1.0.0\\\";\\n  }\\n\\n  modifier onlyConfiguredNotDisabled() {\\n    require(s_configured, \\\"wrapper is not configured\\\");\\n    require(!s_disabled, \\\"wrapper is disabled\\\");\\n    _;\\n  }\\n}\\n\\ninterface ExtendedVRFCoordinatorV2Interface is VRFCoordinatorV2Interface {\\n  function getConfig()\\n    external\\n    view\\n    returns (\\n      uint16 minimumRequestConfirmations,\\n      uint32 maxGasLimit,\\n      uint32 stalenessSeconds,\\n      uint32 gasAfterPaymentCalculation\\n    );\\n\\n  function getFallbackWeiPerUnitLink() external view returns (int256);\\n\\n  function getFeeConfig()\\n    external\\n    view\\n    returns (\\n      uint32 fulfillmentFlatFeeLinkPPMTier1,\\n      uint32 fulfillmentFlatFeeLinkPPMTier2,\\n      uint32 fulfillmentFlatFeeLinkPPMTier3,\\n      uint32 fulfillmentFlatFeeLinkPPMTier4,\\n      uint32 fulfillmentFlatFeeLinkPPMTier5,\\n      uint24 reqsForTier2,\\n      uint24 reqsForTier3,\\n      uint24 reqsForTier4,\\n      uint24 reqsForTier5\\n    );\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/VRFV2WrapperConsumerBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/VRFV2WrapperInterface.sol\\\";\\n\\n/** *******************************************************************************\\n * @notice Interface for contracts using VRF randomness through the VRF V2 wrapper\\n * ********************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Create VRF V2 requests without the need for subscription management. Rather than creating\\n * @dev and funding a VRF V2 subscription, a user can use this wrapper to create one off requests,\\n * @dev paying up front rather than at fulfillment.\\n *\\n * @dev Since the price is determined using the gas price of the request transaction rather than\\n * @dev the fulfillment transaction, the wrapper charges an additional premium on callback gas\\n * @dev usage, in addition to some extra overhead costs associated with the VRFV2Wrapper contract.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFV2WrapperConsumerBase. The consumer must be funded\\n * @dev with enough LINK to make the request, otherwise requests will revert. To request randomness,\\n * @dev call the 'requestRandomness' function with the desired VRF parameters. This function handles\\n * @dev paying for the request based on the current pricing.\\n *\\n * @dev Consumers must implement the fullfillRandomWords function, which will be called during\\n * @dev fulfillment with the randomness result.\\n */\\nabstract contract VRFV2WrapperConsumerBase {\\n  LinkTokenInterface internal immutable LINK;\\n  VRFV2WrapperInterface internal immutable VRF_V2_WRAPPER;\\n\\n  /**\\n   * @param _link is the address of LinkToken\\n   * @param _vrfV2Wrapper is the address of the VRFV2Wrapper contract\\n   */\\n  constructor(address _link, address _vrfV2Wrapper) {\\n    LINK = LinkTokenInterface(_link);\\n    VRF_V2_WRAPPER = VRFV2WrapperInterface(_vrfV2Wrapper);\\n  }\\n\\n  /**\\n   * @dev Requests randomness from the VRF V2 wrapper.\\n   *\\n   * @param _callbackGasLimit is the gas limit that should be used when calling the consumer's\\n   *        fulfillRandomWords function.\\n   * @param _requestConfirmations is the number of confirmations to wait before fulfilling the\\n   *        request. A higher number of confirmations increases security by reducing the likelihood\\n   *        that a chain re-org changes a published randomness outcome.\\n   * @param _numWords is the number of random words to request.\\n   *\\n   * @return requestId is the VRF V2 request ID of the newly created randomness request.\\n   */\\n  function requestRandomness(\\n    uint32 _callbackGasLimit,\\n    uint16 _requestConfirmations,\\n    uint32 _numWords\\n  ) internal returns (uint256 requestId) {\\n    LINK.transferAndCall(\\n      address(VRF_V2_WRAPPER),\\n      VRF_V2_WRAPPER.calculateRequestPrice(_callbackGasLimit),\\n      abi.encode(_callbackGasLimit, _requestConfirmations, _numWords)\\n    );\\n    return VRF_V2_WRAPPER.lastRequestId();\\n  }\\n\\n  /**\\n   * @notice fulfillRandomWords handles the VRF V2 wrapper response. The consuming contract must\\n   * @notice implement it.\\n   *\\n   * @param _requestId is the VRF V2 request ID.\\n   * @param _randomWords is the randomness result.\\n   */\\n  function fulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) internal virtual;\\n\\n  function rawFulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) external {\\n    require(msg.sender == address(VRF_V2_WRAPPER), \\\"only VRF V2 wrapper can fulfill\\\");\\n    fulfillRandomWords(_requestId, _randomWords);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/AdminController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\ncontract AdminController is Ownable {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  EnumerableSet.AddressSet private admins;\\n\\n  event AdminAdded(address admin);\\n  event AdminRemoved(address admin);\\n\\n  constructor() Ownable() {\\n    admins.add(msg.sender);\\n  }\\n\\n  function getAdmins() public view returns (address[] memory) {\\n    return admins.values();\\n  }\\n\\n  function isAdmin(address _user) public view returns (bool) {\\n    return admins.contains(_user);\\n  }\\n\\n  function addAdmin(address _newAdmin) public onlyOwner {\\n    admins.add(_newAdmin);\\n\\n    emit AdminAdded(_newAdmin);\\n  }\\n\\n  function removeAdmin(address _admin) public onlyOwner {\\n    require(_admin != msg.sender, \\\"Cannot remove yourself\\\");\\n    require(owner() != _admin, \\\"Cannot remove owner\\\");\\n    admins.remove(_admin);\\n\\n    emit AdminRemoved(_admin);\\n  }\\n\\n  function _transferOwnership(address newOwner) internal override(Ownable) {\\n    admins.remove(owner());\\n    admins.add(newOwner);\\n    super._transferOwnership(newOwner);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/ChanceOnChain.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./interfaces/IChanceOnChain.sol\\\";\\nimport \\\"./interfaces/IAdminController.sol\\\";\\nimport \\\"./interfaces/ISettingsStorage.sol\\\";\\nimport \\\"./interfaces/ILuckyRefunder.sol\\\";\\nimport \\\"./MathTestLib.sol\\\";\\nimport \\\"./Entities.sol\\\";\\nimport \\\"./Errors.sol\\\";\\n\\ncontract ChanceOnChain {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.UintSet;\\n  using MathTestLib for MathTestLib.MathTest;\\n\\n  uint32 constant MAX_BPS = 10_000;\\n\\n  IERC20 immutable USDT;\\n\\n  address public upkeeper;\\n  address public raffleUpdater;\\n\\n  IAdminController private immutable adminController;\\n  ISettingsStorage private immutable settingsStorage;\\n  ILuckyRefunder private immutable luckyRefunder;\\n\\n  Raffle[] private _raffles;\\n  mapping(RaffleStatus => EnumerableSet.UintSet) private _rafflesByStatus;\\n  EnumerableSet.UintSet private _rafflesRerollWinner;\\n  mapping(uint256 => Entry[]) private _raffleEntries;\\n  mapping(address => EnumerableSet.UintSet) private _userRaffles;\\n  mapping(uint256 => Participant[]) private _raffleParticipants;\\n  mapping(uint256 => MathTestLib.MathTest) private _raffleMathTest;\\n  mapping(uint256 => mapping(address => bool)) private _raffleExcludedWinners;\\n  mapping(uint256 => uint256) private _raffleRerollAttempts;\\n  mapping(uint256 => mapping(address => uint256)) private _raffleParticipantIndex;\\n\\n  // Events\\n  event CreateRaffle(uint256 indexed raffleId);\\n  event BuyTickets(uint256 indexed raffleId, address indexed user, uint256 numTickets);\\n  event ClaimPrize(uint256 indexed raffleId, address indexed user, bool cashAlternative, uint256 amount);\\n  event ClaimRefund(uint256 indexed raffleId, address indexed user, uint256 refundAmount);\\n  event SelectWinner(uint256 indexed raffleId, address indexed user);\\n  event ChangeStatus(uint256 indexed raffleId, RaffleStatus oldStatus, RaffleStatus newStatus);\\n  event SetRaffleRecurrency(uint256 indexed raffleId, bool recurrent);\\n  event UpdateRaffle(uint256 indexed raffleId);\\n  event SetUpkeeper(address indexed upkeeper);\\n  event SetRaffleUpdater(address indexed updater);\\n  event FailedSkillTest(uint256 indexed raffleId, address indexed user);\\n  event WithdrawUnclaimedRefund(uint256 indexed _raffleId, uint256 amount);\\n  event WithdrawUnclaimedPrize(uint256 indexed _raffleId, uint256 charityWalletAmount, uint256 expenseWalletAmount, uint256 treasuryWalletAmount);\\n\\n  // Constructor\\n  constructor(address _usdtAddress, address _adminController, address _settingsStorage, address _luckyRefunder) {\\n    USDT = IERC20(_usdtAddress);\\n    adminController = IAdminController(_adminController);\\n    settingsStorage = ISettingsStorage(_settingsStorage);\\n    luckyRefunder = ILuckyRefunder(_luckyRefunder);\\n    luckyRefunder.setChanceOnChain(address(this));\\n  }\\n\\n  // View functions\\n\\n  function raffleParticipantIndex(uint256 raffleId, address user) public view returns (uint256) {\\n    return _raffleParticipantIndex[raffleId][user];\\n  }\\n\\n  function getRaffle(uint256 _raffleId) public view returns (Raffle memory) {\\n    return _raffles[_raffleId];\\n  }\\n\\n  function rafflesLength() public view returns (uint256) {\\n    return _raffles.length;\\n  }\\n\\n  function raffleEntriesLength(uint256 _raffleId) public view returns (uint256) {\\n    return _raffleEntries[_raffleId].length;\\n  }\\n\\n  function raffleParticipants(uint256 raffleId) public view returns (Participant[] memory) {\\n    return _raffleParticipants[raffleId];\\n  }\\n\\n  function raffleParticipantsLength(uint256 _raffleId) public view returns (uint256) {\\n    return _raffleParticipants[_raffleId].length;\\n  }\\n\\n  function raffleParticipant(uint256 _raffleId, address _participant) public view returns (Participant memory participant) {\\n    uint256 index = _raffleParticipantIndex[_raffleId][_participant];\\n    if (index != 0) {\\n      participant = _raffleParticipants[_raffleId][index - 1];\\n    }\\n  }\\n\\n  function raffleParticipantByIndex(uint256 _raffleId, uint256 _index) public view returns (Participant memory) {\\n    return _raffleParticipants[_raffleId][_index];\\n  }\\n\\n  function rafflesByStatusLength(RaffleStatus _status) public view returns (uint256) {\\n    return _rafflesByStatus[_status].length();\\n  }\\n\\n  function rafflesByStatusIds(RaffleStatus _status) public view returns (uint256[] memory) {\\n    return _rafflesByStatus[_status].values();\\n  }\\n\\n  function rafflesRerollWinnerIds() public view returns (uint256[] memory) {\\n    return _rafflesRerollWinner.values();\\n  }\\n\\n  function isRerollWinnerRaffle(uint256 id) public view returns (bool) {\\n    return _rafflesRerollWinner.contains(id);\\n  }\\n\\n  function userRafflesIds(address _user) public view returns (uint256[] memory) {\\n    return _userRaffles[_user].values();\\n  }\\n\\n  function raffleMathTest(uint256 _raffleId) public view returns (MathTestLib.MathTest memory) {\\n    return _raffleMathTest[_raffleId];\\n  }\\n\\n  function calcTickets(\\n    uint256 _prizeValue,\\n    uint256 _ticketPrice,\\n    uint256 _margin,\\n    uint256 _maxMargin\\n  ) public pure returns (uint256 minTickets, uint256 maxTickets) {\\n    minTickets = _calcTicketsCount((_prizeValue * (MAX_BPS + _margin)) / MAX_BPS, _ticketPrice);\\n    maxTickets = _calcTicketsCount((_prizeValue * (MAX_BPS + _maxMargin)) / MAX_BPS, _ticketPrice);\\n  }\\n\\n  // User functions\\n\\n  /**\\n   * @dev Buy tickets for a raffle\\n   */\\n  function buyTickets(uint256 _raffleId, uint256 _numTickets) public {\\n    Raffle storage raffle = _raffles[_raffleId];\\n    _ensureRaffleIsOpen(raffle.status, raffle.startTime);\\n    if (raffle.endTime <= block.timestamp) {\\n      revert RaffleEnded();\\n    }\\n    if (_numTickets == 0) {\\n      revert CannotBeZero();\\n    }\\n    if (raffle.ticketsSold + _numTickets > raffle.maxTickets) {\\n      revert NotEnoughTicketsLeft();\\n    }\\n\\n    uint256 totalCost = raffle.ticketPrice * _numTickets;\\n    USDT.safeTransferFrom(msg.sender, address(this), totalCost);\\n\\n    // Update participant ticket count\\n    _updateParticipant(_raffleId, totalCost, _numTickets);\\n\\n    if (!_userRaffles[msg.sender].contains(_raffleId)) {\\n      _userRaffles[msg.sender].add(_raffleId);\\n    }\\n\\n    raffle.ticketsSold += _numTickets;\\n    _raffleEntries[_raffleId].push(Entry(msg.sender, raffle.ticketsSold));\\n\\n    if (raffle.status == RaffleStatus.SCHEDULED) {\\n      _switchRaffleStatus(_raffleId, raffle.status, RaffleStatus.OPENED);\\n    }\\n\\n    emit BuyTickets(_raffleId, msg.sender, _numTickets);\\n  }\\n\\n  function _ensureRaffleIsOpen(RaffleStatus status, uint256 startTime) private view {\\n    if (!((status == RaffleStatus.SCHEDULED && startTime <= block.timestamp) || status == RaffleStatus.OPENED || status == RaffleStatus.HAPPENING)) {\\n      revert RaffleNotOpen();\\n    }\\n  }\\n\\n  function _updateParticipant(uint256 _raffleId, uint256 totalCost, uint256 _numTickets) private {\\n    uint256 index = _raffleParticipantIndex[_raffleId][msg.sender];\\n    if (index == 0) {\\n      _raffleParticipants[_raffleId].push(\\n        Participant({\\n          addr: msg.sender,\\n          ticketCount: _numTickets,\\n          amount: totalCost,\\n          winner: false,\\n          skillTestFailed: false,\\n          cashAlternativeClaimed: false,\\n          refundClaimed: false\\n        })\\n      );\\n      _raffleParticipantIndex[_raffleId][msg.sender] = _raffleParticipants[_raffleId].length;\\n    } else {\\n      _raffleParticipants[_raffleId][index - 1].ticketCount += _numTickets;\\n      _raffleParticipants[_raffleId][index - 1].amount += totalCost;\\n    }\\n  }\\n\\n  /**\\n   * @dev Claim raffle prize\\n   */\\n  function claimReward(uint256 _raffleId, int256 mathTestAnswer, bool _claimCashAlternative) public returns (bool) {\\n    Raffle storage raffle = _raffles[_raffleId];\\n    if (raffle.status != RaffleStatus.CLOSED) {\\n      revert RaffleNotClaimable();\\n    }\\n    if (raffle.closedTime + raffle.claimRewardDuration < block.timestamp) {\\n      revert ClaimTimeIsOver();\\n    }\\n    if (raffle.winner != msg.sender) {\\n      revert NotWinner();\\n    }\\n    /**\\n     * Reset winner data on wrong math test answer to reroll a winner\\n     */\\n    Participant storage participant = _raffleParticipants[_raffleId][_raffleParticipantIndex[_raffleId][msg.sender] - 1];\\n    if (!_raffleMathTest[_raffleId].verify(mathTestAnswer)) {\\n      _onSkillTestFailed(raffle, participant);\\n      return false;\\n    }\\n\\n    if (raffle.category == RaffleCategory.MONEY) {\\n      _claimCashAlternative = true;\\n    } else if (!raffle.cashAlternativeAvailable) {\\n      _claimCashAlternative = false;\\n    }\\n\\n    raffle.endedTime = block.timestamp;\\n    raffle.prizeClaimed = true;\\n    participant.cashAlternativeClaimed = _claimCashAlternative;\\n    _switchRaffleStatus(_raffleId, RaffleStatus.CLOSED, RaffleStatus.ENDED);\\n\\n    (\\n      uint256 treasuryWalletAmount,\\n      uint256 charityWalletAmount,\\n      uint256 expenseWalletAmount,\\n      uint256 cashAlternative,\\n      uint256 serviceFeeAmount\\n    ) = _calculateRaffleAllocations(_raffleId, _claimCashAlternative);\\n\\n    // Transfer prize to the winner\\n    if (_claimCashAlternative) {\\n      raffle.prizeCashAmount = cashAlternative;\\n      _safeTransfer(msg.sender, cashAlternative);\\n    }\\n\\n    _safeTransfer(_globalOrRaffleCharityWallet(_raffleId), charityWalletAmount);\\n    _safeTransfer(_globalOrRaffleExpenseWallet(_raffleId), expenseWalletAmount);\\n    _safeTransfer(_globalOrRaffleTreasuryWallet(_raffleId), treasuryWalletAmount);\\n    _safeTransfer(settingsStorage.getSettings().serviceFeeWallet, serviceFeeAmount);\\n\\n    emit ClaimPrize(_raffleId, msg.sender, _claimCashAlternative, cashAlternative);\\n    return true;\\n  }\\n\\n  function _onSkillTestFailed(Raffle storage raffle, Participant storage participant) private {\\n    raffle.winner = address(0);\\n    raffle.closedTime = block.timestamp;\\n    participant.winner = false;\\n    participant.skillTestFailed = true;\\n    _raffleExcludedWinners[raffle.id][msg.sender] = true;\\n    _rafflesRerollWinner.add(raffle.id);\\n    emit FailedSkillTest(raffle.id, msg.sender);\\n  }\\n\\n  /**\\n   * @dev Claim raffle refund\\n   */\\n  function claimRefund(uint256 _raffleId) public {\\n    if (_raffleParticipantIndex[_raffleId][msg.sender] == 0) {\\n      revert OnlyParticipant();\\n    }\\n\\n    Raffle storage raffle = _raffles[_raffleId];\\n    if (raffle.status != RaffleStatus.REFUND || raffle.refundStartTime + raffle.claimRefundDuration < block.timestamp) {\\n      revert RaffleNotRefundable();\\n    }\\n\\n    Participant storage participant = _raffleParticipants[_raffleId][_raffleParticipantIndex[_raffleId][msg.sender] - 1];\\n    if (participant.refundClaimed) {\\n      revert AlreadyClaimed();\\n    }\\n\\n    participant.refundClaimed = true;\\n    uint256 refundAmount = participant.ticketCount * raffle.ticketPrice;\\n    raffle.claimedRefundAmount += refundAmount;\\n\\n    _safeTransfer(msg.sender, refundAmount);\\n\\n    emit ClaimRefund(_raffleId, msg.sender, refundAmount);\\n  }\\n\\n  function onClaimLuckyRefund(uint256 _raffleId, address _user) public {\\n    if (msg.sender != address(luckyRefunder)) {\\n      revert NotAllowed();\\n    }\\n\\n    _raffleExcludedWinners[_raffleId][_user] = true;\\n  }\\n\\n  // Upkeeper functions\\n\\n  function switchRaffleStatus(uint256 _raffleId, RaffleStatus _oldStatus, RaffleStatus _newStatus) external {\\n    onlyUpkeeper();\\n\\n    _switchRaffleStatus(_raffleId, _oldStatus, _newStatus);\\n  }\\n\\n  function selectWinner(uint256 raffleId, uint256 randomness) external {\\n    onlyUpkeeper();\\n\\n    Raffle storage raffle = _raffles[raffleId];\\n\\n    if (raffle.status != RaffleStatus.CLOSED) {\\n      revert RaffleNotClosed();\\n    }\\n    if (raffle.winner != address(0)) {\\n      revert WinnerAlreadySelected();\\n    }\\n\\n    // Select a winner\\n    bool selected = _selectWinner(raffleId, randomness);\\n\\n    if (_rafflesRerollWinner.contains(raffleId)) {\\n      _raffleRerollAttempts[raffleId]++;\\n      if (selected) {\\n        _raffleRerollAttempts[raffleId] = 0;\\n        _rafflesRerollWinner.remove(raffleId);\\n      } else if (_raffleRerollAttempts[raffleId] >= settingsStorage.getSettings().maxRerollAttempts) {\\n        _rafflesRerollWinner.remove(raffleId);\\n        _switchRaffleStatus(raffleId, RaffleStatus.CLOSED, RaffleStatus.AUTO_ENDED);\\n      }\\n      return;\\n    }\\n\\n    uint256 luckyRefundAmount = luckyRefunder.onSelectWinner(raffleId);\\n    USDT.approve(address(luckyRefunder), luckyRefundAmount);\\n\\n    if (!raffle.recurrent) {\\n      return;\\n    }\\n\\n    // Create new raffle with same parameters if recurrent\\n    _createRaffle(\\n      RaffleData({\\n        prizeValue: raffle.prizeValue,\\n        ticketPrice: raffle.ticketPrice,\\n        startTime: 0,\\n        duration: raffle.duration,\\n        prizeName: raffle.prizeName,\\n        category: raffle.category,\\n        durationUnit: raffle.durationUnit\\n      }),\\n      raffle.entityName,\\n      raffle.recurrent,\\n      // Keep the link to the first origin raffle\\n      raffle.isDescendant ? raffle.originId : raffle.id,\\n      true,\\n      raffle.cashAlternativeAvailable,\\n      raffle.treasuryWallet,\\n      raffle.expenseWallet,\\n      raffle.charityWallet\\n    );\\n  }\\n\\n  function _selectWinner(uint256 raffleId, uint256 randomness) private returns (bool) {\\n    uint256 winningNumber = (randomness % _raffles[raffleId].ticketsSold) + 1;\\n    uint left = 0;\\n    uint right = _raffleEntries[raffleId].length - 1;\\n    while (left < right) {\\n      uint mid = left + (right - left) / 2;\\n\\n      if (_raffleEntries[raffleId][mid].cumulativeCount < winningNumber) {\\n        left = mid + 1;\\n      } else {\\n        right = mid;\\n      }\\n    }\\n    address winner = _raffleEntries[raffleId][left].user;\\n    if (_raffleExcludedWinners[raffleId][winner]) {\\n      return false;\\n    }\\n    _raffleParticipants[raffleId][_raffleParticipantIndex[raffleId][winner] - 1].winner = true;\\n    _raffles[raffleId].winner = winner;\\n\\n    // Winner cannot claim lucky refund\\n    luckyRefunder.excludeUser(raffleId, winner);\\n\\n    // Generate raffle math test\\n    _raffleMathTest[raffleId] = MathTestLib.generate(randomness);\\n\\n    emit SelectWinner(raffleId, _raffles[raffleId].winner);\\n\\n    return true;\\n  }\\n\\n  function withdrawUnclaimedFunds(uint256 _raffleId) public {\\n    onlyOwner();\\n\\n    Raffle storage raffle = _raffles[_raffleId];\\n    if (raffle.status != RaffleStatus.AUTO_ENDED) {\\n      revert RaffleNotClaimable();\\n    }\\n\\n    Settings memory settings = settingsStorage.getSettings();\\n\\n    if (raffle.refundStartTime > 0) {\\n      if (raffle.claimedRefundAmount == raffle.ticketPrice * raffle.ticketsSold) {\\n        revert AlreadyClaimed();\\n      }\\n\\n      uint256 leftAmount = raffle.ticketPrice * raffle.ticketsSold - raffle.claimedRefundAmount;\\n      uint256 serviceFeeAmount = (leftAmount * settings.serviceFeeBP) / MAX_BPS;\\n      _safeTransfer(settings.treasuryWallet, leftAmount - serviceFeeAmount);\\n      _safeTransfer(settings.serviceFeeWallet, serviceFeeAmount);\\n      raffle.claimedRefundAmount += leftAmount;\\n\\n      emit WithdrawUnclaimedRefund(_raffleId, leftAmount - serviceFeeAmount);\\n    } else {\\n      if (raffle.prizeClaimed) {\\n        revert AlreadyClaimed();\\n      }\\n\\n      raffle.prizeClaimed = true;\\n\\n      (\\n        uint256 treasuryWalletAmount,\\n        uint256 charityWalletAmount,\\n        uint256 expenseWalletAmount,\\n        uint256 cashAlternative,\\n        uint256 serviceFeeAmount\\n      ) = _calculateRaffleAllocations(_raffleId, true);\\n\\n      // Take service fee from cashAlternative\\n      uint256 serviceFeeCashAmount = (cashAlternative * settings.serviceFeeBP) / MAX_BPS;\\n      cashAlternative -= serviceFeeCashAmount;\\n\\n      _safeTransfer(_globalOrRaffleCharityWallet(_raffleId), charityWalletAmount);\\n      _safeTransfer(_globalOrRaffleExpenseWallet(_raffleId), expenseWalletAmount);\\n      _safeTransfer(_globalOrRaffleTreasuryWallet(_raffleId), treasuryWalletAmount + cashAlternative);\\n      _safeTransfer(settings.serviceFeeWallet, serviceFeeAmount + serviceFeeCashAmount);\\n\\n      emit WithdrawUnclaimedPrize(_raffleId, charityWalletAmount, expenseWalletAmount, treasuryWalletAmount + cashAlternative);\\n    }\\n  }\\n\\n  function setUpkeeper(address _upkeeper) public {\\n    onlyOwner();\\n    if (_upkeeper == address(0)) {\\n      revert InvalidAddress();\\n    }\\n    upkeeper = _upkeeper;\\n\\n    emit SetUpkeeper(_upkeeper);\\n  }\\n\\n  function setRaffleUpdater(address _raffleUpdater) public {\\n    onlyOwner();\\n    if (_raffleUpdater == address(0)) {\\n      revert InvalidAddress();\\n    }\\n    raffleUpdater = _raffleUpdater;\\n\\n    emit SetRaffleUpdater(_raffleUpdater);\\n  }\\n\\n  // Admin functions\\n\\n  function createRaffle(\\n    RaffleData memory data,\\n    string memory entityName,\\n    bool recurrent,\\n    bool cashAlternativeAvailable,\\n    address treasuryWallet,\\n    address expenseWallet,\\n    address charityWallet\\n  ) public {\\n    onlyAdmin();\\n\\n    if (data.startTime != 0 && data.startTime <= block.timestamp) {\\n      revert InvalidStartTime();\\n    }\\n    if (data.duration == 0) {\\n      revert CannotBeZero();\\n    }\\n    if (data.prizeValue == 0) {\\n      revert CannotBeZero();\\n    }\\n    if (data.ticketPrice == 0) {\\n      revert CannotBeZero();\\n    }\\n\\n    _createRaffle(data, entityName, recurrent, 0, false, cashAlternativeAvailable, treasuryWallet, expenseWallet, charityWallet);\\n  }\\n\\n  function updateRaffle(Raffle memory raffle) public {\\n    onlyRaffleUpdater();\\n\\n    if (_raffles[raffle.id].status != RaffleStatus.SCHEDULED) {\\n      revert NotAllowed();\\n    }\\n    if (raffle.startTime < block.timestamp) {\\n      revert InvalidStartTime();\\n    }\\n    if (raffle.duration == 0) {\\n      revert CannotBeZero();\\n    }\\n    if (raffle.minTickets == 0) {\\n      revert CannotBeZero();\\n    }\\n    if (raffle.maxTickets < raffle.minTickets) {\\n      revert MinTicketsTooBig();\\n    }\\n    if (raffle.prizeValue == 0) {\\n      revert CannotBeZero();\\n    }\\n    if (raffle.ticketPrice == 0) {\\n      revert CannotBeZero();\\n    }\\n\\n    _raffles[raffle.id] = raffle;\\n    emit UpdateRaffle(raffle.id);\\n  }\\n\\n  function setRaffleRecurrency(uint256 _raffleId, bool _recurrent) public {\\n    onlyAdmin();\\n    _raffles[_raffleId].recurrent = _recurrent;\\n\\n    emit SetRaffleRecurrency(_raffleId, _recurrent);\\n  }\\n\\n  function setRaffleStatus(uint256 _raffleId, RaffleStatus _newStatus) public {\\n    onlyAdmin();\\n    Raffle memory raffle = _raffles[_raffleId];\\n    RaffleStatus oldStatus = raffle.status;\\n    if (\\n      oldStatus == RaffleStatus.REFUND ||\\n      oldStatus == RaffleStatus.CANCELED ||\\n      oldStatus == RaffleStatus.CLOSED ||\\n      oldStatus == RaffleStatus.ENDED ||\\n      oldStatus == RaffleStatus.AUTO_ENDED\\n    ) {\\n      revert NotAllowed();\\n    }\\n\\n    /**\\n     * Can change raffle status when:\\n     * 1. _newStatus is PAUSE\\n     * 2. Current raffle status is SCHEDULE and _newStatus is CANCEL\\n     * 3. Current raffle status is PAUSE and _newStatus is OPEN, HAPPENING or REFUND\\n     */\\n    if (\\n      (_newStatus == RaffleStatus.PAUSED) ||\\n      (oldStatus == RaffleStatus.SCHEDULED && _newStatus == RaffleStatus.CANCELED) ||\\n      (oldStatus == RaffleStatus.PAUSED &&\\n        (_newStatus == RaffleStatus.OPENED || _newStatus == RaffleStatus.HAPPENING || _newStatus == RaffleStatus.REFUND))\\n    ) {\\n      _switchRaffleStatus(_raffleId, oldStatus, _newStatus);\\n    }\\n  }\\n\\n  // Private functions\\n\\n  function _createRaffle(\\n    RaffleData memory data,\\n    string memory entityName,\\n    bool recurrent,\\n    uint256 originId,\\n    bool isDescendant,\\n    bool cashAlternativeAvailable,\\n    address treasuryWallet,\\n    address expenseWallet,\\n    address charityWallet\\n  ) private {\\n    Settings memory settings = settingsStorage.getSettings();\\n    (uint256 minTickets, uint256 maxTickets) = calcTickets(\\n      data.prizeValue,\\n      data.ticketPrice,\\n      settings.treasuryAllocationBP + settings.charityAllocationBP + settings.luckyRefundAllocationBP,\\n      settings.maxMarginBP\\n    );\\n\\n    if (minTickets > maxTickets) {\\n      revert MinTicketsTooBig();\\n    }\\n\\n    // Make raffle open if it should start immediately\\n    RaffleStatus status = RaffleStatus.SCHEDULED;\\n    if (data.startTime == 0) {\\n      data.startTime = block.timestamp;\\n      status = RaffleStatus.OPENED;\\n    }\\n    uint256 endTime = data.startTime + _durationFromUnits(data.duration, data.durationUnit);\\n    uint256 id = _raffles.length;\\n\\n    _raffles.push(\\n      Raffle({\\n        id: id,\\n        category: data.category,\\n        prizeName: data.prizeName,\\n        prizeValue: data.prizeValue,\\n        ticketPrice: data.ticketPrice,\\n        minTickets: minTickets,\\n        maxTickets: maxTickets,\\n        startTime: data.startTime,\\n        duration: data.duration,\\n        durationUnit: data.durationUnit,\\n        endTime: endTime,\\n        endedTime: 0,\\n        closedTime: 0,\\n        refundStartTime: 0,\\n        recurrent: recurrent,\\n        status: status,\\n        ticketsSold: 0,\\n        winner: address(0),\\n        prizeCashAmount: 0,\\n        prizeClaimed: false,\\n        claimedRefundAmount: 0,\\n        treasuryAllocationBP: settings.treasuryAllocationBP,\\n        charityAllocationBP: settings.charityAllocationBP,\\n        luckyRefundAllocationBP: settings.luckyRefundAllocationBP,\\n        winnerAllocationBP: settings.winnerAllocationBP,\\n        maxMarginBP: settings.maxMarginBP,\\n        claimRewardDuration: settings.claimRewardDuration,\\n        claimLuckyRefundDuration: settings.claimLuckyRefundDuration,\\n        claimRefundDuration: settings.claimRefundDuration,\\n        originId: originId,\\n        isDescendant: isDescendant,\\n        treasuryWallet: treasuryWallet,\\n        expenseWallet: expenseWallet,\\n        charityWallet: charityWallet,\\n        entityName: entityName,\\n        cashAlternativeAvailable: cashAlternativeAvailable\\n      })\\n    );\\n\\n    _rafflesByStatus[status].add(id);\\n\\n    emit CreateRaffle(id);\\n  }\\n\\n  function _durationFromUnits(uint256 _duration, DurationUnit _unit) private pure returns (uint256) {\\n    if (_unit == DurationUnit.MINUTES) {\\n      return _duration * 1 minutes;\\n    }\\n    if (_unit == DurationUnit.DAYS) {\\n      return _duration * 1 days;\\n    }\\n\\n    return _duration * 1 hours;\\n  }\\n\\n  function _calculateRaffleAllocations(\\n    uint256 _raffleId,\\n    bool _claimCashAlternative\\n  )\\n    private\\n    view\\n    returns (\\n      uint256 treasuryWalletAmount,\\n      uint256 charityWalletAmount,\\n      uint256 expenseWalletAmount,\\n      uint256 cashAlternative,\\n      uint256 serviceFeeAmount\\n    )\\n  {\\n    Raffle memory raffle = _raffles[_raffleId];\\n\\n    cashAlternative = 0;\\n    // Send full prize to the winner for MONEY raffle category\\n    if (raffle.category == RaffleCategory.MONEY) {\\n      cashAlternative = raffle.prizeValue;\\n    } else if (_claimCashAlternative) {\\n      cashAlternative = (raffle.prizeValue * raffle.winnerAllocationBP) / MAX_BPS;\\n    }\\n\\n    uint256 margin = MAX_BPS + raffle.charityAllocationBP + raffle.luckyRefundAllocationBP + raffle.treasuryAllocationBP;\\n    uint256 minEarnAmount = raffle.ticketPrice * raffle.minTickets;\\n\\n    uint256 luckyRefundAmount = (minEarnAmount * raffle.luckyRefundAllocationBP) / margin;\\n    charityWalletAmount = (minEarnAmount * raffle.charityAllocationBP) / margin;\\n    expenseWalletAmount = 0;\\n    if (!_claimCashAlternative) {\\n      expenseWalletAmount = (minEarnAmount * MAX_BPS) / margin;\\n    }\\n    treasuryWalletAmount = raffle.ticketPrice * raffle.ticketsSold - charityWalletAmount - luckyRefundAmount - expenseWalletAmount - cashAlternative;\\n\\n    if (_claimCashAlternative && cashAlternative > (100 * 1e6)) {\\n      // Calculate remainder to the nearest $100\\n      uint256 remainder = cashAlternative % (100 * 1e6);\\n      // Add remainder to treasuryWallet amount\\n      if (remainder > 0) {\\n        cashAlternative -= remainder;\\n        treasuryWalletAmount += remainder;\\n      }\\n    }\\n\\n    // Take service fee from treasury amount\\n    serviceFeeAmount = (treasuryWalletAmount * settingsStorage.getSettings().serviceFeeBP) / MAX_BPS;\\n    treasuryWalletAmount -= serviceFeeAmount;\\n  }\\n\\n  function _switchRaffleStatus(uint256 _raffleId, RaffleStatus _oldStatus, RaffleStatus _newStatus) private {\\n    _rafflesByStatus[_oldStatus].remove(_raffleId);\\n    _rafflesByStatus[_newStatus].add(_raffleId);\\n    _raffles[_raffleId].status = _newStatus;\\n    // Set start time of refund period\\n    if (_newStatus == RaffleStatus.REFUND) {\\n      _raffles[_raffleId].refundStartTime = block.timestamp;\\n    }\\n    if (_newStatus == RaffleStatus.CLOSED) {\\n      _raffles[_raffleId].closedTime = block.timestamp;\\n    }\\n    if (_oldStatus == RaffleStatus.CLOSED && _newStatus == RaffleStatus.AUTO_ENDED) {\\n      _raffles[_raffleId].endedTime = block.timestamp;\\n    }\\n\\n    emit ChangeStatus(_raffleId, _oldStatus, _newStatus);\\n  }\\n\\n  function _calcTicketsCount(uint256 _totalAmount, uint256 _ticketPrice) private pure returns (uint256 count) {\\n    count = _totalAmount / _ticketPrice;\\n    // Round up to the nearest integer\\n    if (_totalAmount % _ticketPrice > 0) {\\n      count += 1;\\n    }\\n  }\\n\\n  function _globalOrRaffleTreasuryWallet(uint256 _raffleId) private view returns (address) {\\n    Raffle memory raffle = _raffles[_raffleId];\\n    return raffle.treasuryWallet != address(0) ? raffle.treasuryWallet : settingsStorage.getSettings().treasuryWallet;\\n  }\\n\\n  function _globalOrRaffleCharityWallet(uint256 _raffleId) private view returns (address) {\\n    Raffle memory raffle = _raffles[_raffleId];\\n    return raffle.charityWallet != address(0) ? raffle.charityWallet : settingsStorage.getSettings().charityWallet;\\n  }\\n\\n  function _globalOrRaffleExpenseWallet(uint256 _raffleId) private view returns (address) {\\n    Raffle memory raffle = _raffles[_raffleId];\\n    return raffle.expenseWallet != address(0) ? raffle.expenseWallet : settingsStorage.getSettings().expenseWallet;\\n  }\\n\\n  function _safeTransfer(address to, uint256 amount) private {\\n    if (amount == 0) {\\n      return;\\n    }\\n    USDT.safeTransfer(to, amount);\\n  }\\n\\n  function onlyOwner() private {\\n    if (adminController.owner() != msg.sender) {\\n      revert NotAllowed();\\n    }\\n  }\\n\\n  function onlyAdmin() private {\\n    if (!adminController.isAdmin(msg.sender)) {\\n      revert NotAllowed();\\n    }\\n  }\\n\\n  function onlyUpkeeper() private view {\\n    if (msg.sender != upkeeper) {\\n      revert OnlyUpkeeper();\\n    }\\n  }\\n\\n  function onlyRaffleUpdater() private view {\\n    if (msg.sender != raffleUpdater) {\\n      revert NotAllowed();\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/ChanceOnChainUpkeep.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\n\\nimport \\\"./interfaces/IChanceOnChain.sol\\\";\\nimport \\\"./interfaces/IAdminController.sol\\\";\\nimport \\\"./interfaces/ILuckyRefunder.sol\\\";\\nimport \\\"./Entities.sol\\\";\\nimport \\\"./Errors.sol\\\";\\n\\ncontract ChanceOnChainUpkeep is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n  enum UpkeepAction {\\n    OPEN_SCHEDULED_RAFFLES,\\n    HAPPEN_OPENED_RAFFLES,\\n    CLOSE_HAPPENING_RAFFLES,\\n    REFUND_OPENED_RAFFLES,\\n    AUTO_END_CLOSED_RAFFLES,\\n    AUTO_END_REFUND_RAFFLES,\\n    SELECT_LUCKY_REFUND_USERS,\\n    REROLL_WINNERS\\n  }\\n\\n  uint32 constant MAX_USERS_IN_BATCH = 80;\\n  uint32 constant MAX_RAFFLES_IN_BATCH = 50;\\n\\n  VRFCoordinatorV2Interface immutable COORDINATOR;\\n  uint32 constant CALLBACK_GAS_LIMIT = 2500000;\\n  uint64 immutable subscriptionId;\\n  bytes32 immutable keyHash;\\n\\n  address public keeperRegistryAddress;\\n  mapping(address => bool) public operators;\\n\\n  IChanceOnChain public chanceOnChain;\\n  IAdminController private immutable adminController;\\n  ILuckyRefunder private immutable luckyRefunder;\\n\\n  mapping(uint256 => uint256) internal requestIdToRaffleId;\\n  mapping(uint256 => uint256) internal raffleIdToRandomNumber;\\n\\n  event SetOperator(address indexed operator, bool allowed);\\n\\n  // Modifiers\\n  modifier onlyOwner() {\\n    if (adminController.owner() != msg.sender) {\\n      revert NotAllowed();\\n    }\\n    _;\\n  }\\n\\n  modifier onlyOwnerOrOperator() {\\n    if (adminController.owner() != msg.sender && !operators[msg.sender]) {\\n      revert OnlyOperator();\\n    }\\n    _;\\n  }\\n\\n  constructor(\\n    address _chanceOnChain,\\n    address _adminController,\\n    address _luckyRefunder,\\n    address _vrfCoordinator,\\n    uint64 _subscriptionId,\\n    bytes32 _keyHash\\n  ) VRFConsumerBaseV2(_vrfCoordinator) {\\n    chanceOnChain = IChanceOnChain(_chanceOnChain);\\n    adminController = IAdminController(_adminController);\\n    luckyRefunder = ILuckyRefunder(_luckyRefunder);\\n    COORDINATOR = VRFCoordinatorV2Interface(_vrfCoordinator);\\n    subscriptionId = _subscriptionId;\\n    keyHash = _keyHash;\\n    operators[msg.sender] = true;\\n\\n    luckyRefunder.setUpkeeper(address(this));\\n  }\\n\\n  function setOperator(address _operator, bool _allowed) public onlyOwner {\\n    operators[_operator] = _allowed;\\n    emit SetOperator(_operator, _allowed);\\n  }\\n\\n  function setChanceOnChain(IChanceOnChain _chanceOnChain) public onlyOwner {\\n    chanceOnChain = _chanceOnChain;\\n  }\\n\\n  function checkUpkeep(bytes calldata checkData) external view override returns (bool upkeepNeeded, bytes memory performData) {\\n    UpkeepAction action = abi.decode(checkData, (UpkeepAction));\\n\\n    if (action == UpkeepAction.OPEN_SCHEDULED_RAFFLES) {\\n      uint256[] memory ids = _getScheduledRafflesToOpen();\\n      upkeepNeeded = ids.length > 0;\\n      if (upkeepNeeded) {\\n        performData = abi.encode(action, abi.encode(ids));\\n      }\\n      return (upkeepNeeded, performData);\\n    } else if (action == UpkeepAction.HAPPEN_OPENED_RAFFLES) {\\n      uint256[] memory ids = _getOpenedRafflesToHappen();\\n      upkeepNeeded = ids.length > 0;\\n      if (upkeepNeeded) {\\n        performData = abi.encode(action, abi.encode(ids));\\n      }\\n      return (upkeepNeeded, performData);\\n    } else if (action == UpkeepAction.CLOSE_HAPPENING_RAFFLES) {\\n      uint256[] memory ids = _getHappeningRafflesToClose();\\n      upkeepNeeded = ids.length > 0;\\n      if (upkeepNeeded) {\\n        performData = abi.encode(action, abi.encode(ids));\\n      }\\n      return (upkeepNeeded, performData);\\n    } else if (action == UpkeepAction.REFUND_OPENED_RAFFLES) {\\n      uint256[] memory ids = _getOpenedRafflesToRefund();\\n      upkeepNeeded = ids.length > 0;\\n      if (upkeepNeeded) {\\n        performData = abi.encode(action, abi.encode(ids));\\n      }\\n      return (upkeepNeeded, performData);\\n    } else if (action == UpkeepAction.AUTO_END_CLOSED_RAFFLES) {\\n      uint256[] memory ids = _getClosedRafflesToAutoEnd();\\n      upkeepNeeded = ids.length > 0;\\n      if (upkeepNeeded) {\\n        performData = abi.encode(action, abi.encode(ids));\\n      }\\n      return (upkeepNeeded, performData);\\n    } else if (action == UpkeepAction.AUTO_END_REFUND_RAFFLES) {\\n      uint256[] memory ids = _getRefundRafflesToAutoEnd();\\n      upkeepNeeded = ids.length > 0;\\n      if (upkeepNeeded) {\\n        performData = abi.encode(action, abi.encode(ids));\\n      }\\n      return (upkeepNeeded, performData);\\n    } else if (action == UpkeepAction.SELECT_LUCKY_REFUND_USERS) {\\n      (uint256 raffleId, uint256 refundAmount, uint32[] memory refundees, uint256[] memory amounts) = _getLuckyRefundUsers();\\n      upkeepNeeded = refundees.length > 0;\\n      if (upkeepNeeded) {\\n        performData = abi.encode(action, abi.encode(raffleId, refundAmount, refundees, amounts));\\n      }\\n      return (upkeepNeeded, performData);\\n    } else if (action == UpkeepAction.REROLL_WINNERS) {\\n      uint256[] memory ids = _getRerollWinnerRaffles();\\n      upkeepNeeded = ids.length > 0;\\n      if (upkeepNeeded) {\\n        performData = abi.encode(action, abi.encode(ids));\\n      }\\n      return (upkeepNeeded, performData);\\n    }\\n\\n    return (false, bytes(\\\"\\\"));\\n  }\\n\\n  function _getScheduledRafflesToOpen() internal view returns (uint256[] memory ids) {\\n    uint256[] memory allIds = chanceOnChain.rafflesByStatusIds(RaffleStatus.SCHEDULED);\\n    ids = new uint256[](allIds.length);\\n    uint256 count = 0;\\n\\n    for (uint256 i = 0; i < allIds.length; i++) {\\n      uint256 id = allIds[i];\\n      if (chanceOnChain.getRaffle(id).startTime <= block.timestamp) {\\n        ids[count] = id;\\n        count++;\\n      }\\n      if (count == MAX_RAFFLES_IN_BATCH) {\\n        break;\\n      }\\n    }\\n\\n    if (count < allIds.length) {\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        mstore(ids, count)\\n      }\\n    }\\n  }\\n\\n  function _getOpenedRafflesToHappen() internal view returns (uint256[] memory ids) {\\n    uint256[] memory allIds = chanceOnChain.rafflesByStatusIds(RaffleStatus.OPENED);\\n    ids = new uint256[](allIds.length);\\n    uint256 count = 0;\\n\\n    for (uint256 i = 0; i < allIds.length; i++) {\\n      uint256 id = allIds[i];\\n      if (chanceOnChain.getRaffle(id).ticketsSold >= chanceOnChain.getRaffle(id).minTickets) {\\n        ids[count] = id;\\n        count++;\\n      }\\n      if (count == MAX_RAFFLES_IN_BATCH) {\\n        break;\\n      }\\n    }\\n\\n    if (count < allIds.length) {\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        mstore(ids, count)\\n      }\\n    }\\n  }\\n\\n  function _getHappeningRafflesToClose() internal view returns (uint256[] memory ids) {\\n    uint256[] memory allIds = chanceOnChain.rafflesByStatusIds(RaffleStatus.HAPPENING);\\n    ids = new uint256[](allIds.length);\\n    uint256 count = 0;\\n\\n    for (uint256 i = 0; i < allIds.length; i++) {\\n      uint256 id = allIds[i];\\n      if (\\n        chanceOnChain.getRaffle(id).ticketsSold == chanceOnChain.getRaffle(id).maxTickets ||\\n        (chanceOnChain.getRaffle(id).ticketsSold >= chanceOnChain.getRaffle(id).minTickets && chanceOnChain.getRaffle(id).endTime <= block.timestamp)\\n      ) {\\n        ids[count] = id;\\n        count++;\\n      }\\n      if (count == MAX_RAFFLES_IN_BATCH) {\\n        break;\\n      }\\n    }\\n\\n    if (count < allIds.length) {\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        mstore(ids, count)\\n      }\\n    }\\n  }\\n\\n  function _getOpenedRafflesToRefund() internal view returns (uint256[] memory ids) {\\n    uint256[] memory allIds = chanceOnChain.rafflesByStatusIds(RaffleStatus.OPENED);\\n    ids = new uint256[](allIds.length);\\n    uint256 count = 0;\\n\\n    for (uint256 i = 0; i < allIds.length; i++) {\\n      uint256 id = allIds[i];\\n      if (\\n        chanceOnChain.getRaffle(id).ticketsSold < chanceOnChain.getRaffle(id).minTickets && chanceOnChain.getRaffle(id).endTime <= block.timestamp\\n      ) {\\n        ids[count] = id;\\n        count++;\\n      }\\n      if (count == MAX_RAFFLES_IN_BATCH) {\\n        break;\\n      }\\n    }\\n\\n    if (count < allIds.length) {\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        mstore(ids, count)\\n      }\\n    }\\n  }\\n\\n  function _getClosedRafflesToAutoEnd() internal view returns (uint256[] memory ids) {\\n    uint256[] memory allIds = chanceOnChain.rafflesByStatusIds(RaffleStatus.CLOSED);\\n    ids = new uint256[](allIds.length);\\n    uint256 count = 0;\\n\\n    for (uint256 i = 0; i < allIds.length; i++) {\\n      uint256 id = allIds[i];\\n      if (chanceOnChain.getRaffle(id).closedTime + chanceOnChain.getRaffle(id).claimRewardDuration <= block.timestamp) {\\n        ids[count] = id;\\n        count++;\\n      }\\n      if (count == MAX_RAFFLES_IN_BATCH) {\\n        break;\\n      }\\n    }\\n\\n    if (count < allIds.length) {\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        mstore(ids, count)\\n      }\\n    }\\n  }\\n\\n  function _getRefundRafflesToAutoEnd() internal view returns (uint256[] memory ids) {\\n    uint256[] memory allIds = chanceOnChain.rafflesByStatusIds(RaffleStatus.REFUND);\\n    ids = new uint256[](allIds.length);\\n    uint256 count = 0;\\n\\n    for (uint256 i = 0; i < allIds.length; i++) {\\n      uint256 id = allIds[i];\\n      if (chanceOnChain.getRaffle(id).refundStartTime + chanceOnChain.getRaffle(id).claimRefundDuration <= block.timestamp) {\\n        ids[count] = id;\\n        count++;\\n      }\\n      if (count == MAX_RAFFLES_IN_BATCH) {\\n        break;\\n      }\\n    }\\n\\n    if (count < allIds.length) {\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        mstore(ids, count)\\n      }\\n    }\\n  }\\n\\n  function _getRerollWinnerRaffles() internal view returns (uint256[] memory ids) {\\n    uint256[] memory allIds = chanceOnChain.rafflesRerollWinnerIds();\\n    ids = new uint256[](allIds.length);\\n    uint256 count = 0;\\n\\n    for (uint256 i = 0; i < allIds.length; i++) {\\n      ids[count] = allIds[i];\\n      count++;\\n      if (count == MAX_RAFFLES_IN_BATCH) {\\n        break;\\n      }\\n    }\\n\\n    if (count < allIds.length) {\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        mstore(ids, count)\\n      }\\n    }\\n  }\\n\\n  function _getLuckyRefundUsers()\\n    internal\\n    view\\n    returns (uint256 raffleId, uint256 refundAmount, uint32[] memory refundees, uint256[] memory amounts)\\n  {\\n    uint256[] memory ids = luckyRefunder.rafflesSelectUsersIds();\\n    if (ids.length == 0) {\\n      return (raffleId, refundAmount, refundees, amounts);\\n    }\\n    raffleId = ids[0];\\n\\n    uint256 remainingAmount = luckyRefunder.raffleAmount(raffleId) - luckyRefunder.raffleAssignedAmount(raffleId);\\n\\n    // Select lucky refund winners\\n    uint256 participantsLength = chanceOnChain.raffleParticipantsLength(raffleId);\\n    bool[] memory selected = new bool[](participantsLength);\\n    refundees = new uint32[](MAX_USERS_IN_BATCH);\\n    amounts = new uint256[](MAX_USERS_IN_BATCH);\\n    uint count = 0;\\n    uint randomResult = raffleIdToRandomNumber[raffleId];\\n    while (refundAmount < remainingAmount && count < participantsLength && count != MAX_USERS_IN_BATCH) {\\n      randomResult = uint(keccak256(abi.encode(randomResult, block.timestamp)));\\n      uint32 index = uint32(randomResult % participantsLength);\\n\\n      // To avoid refunding the same person twice\\n      if (selected[index] || luckyRefunder.isSelectedUser(raffleId, index)) {\\n        continue;\\n      }\\n\\n      Participant memory participant = chanceOnChain.raffleParticipantByIndex(raffleId, index);\\n      uint256 amountToRefund;\\n      if (participant.amount > remainingAmount - refundAmount) {\\n        amountToRefund = remainingAmount - refundAmount;\\n      } else {\\n        amountToRefund = participant.amount;\\n      }\\n      if (amountToRefund == 0) {\\n        break;\\n      }\\n      refundAmount += amountToRefund;\\n\\n      selected[index] = true;\\n      refundees[count] = index;\\n      amounts[count] = amountToRefund;\\n      count++;\\n    }\\n\\n    if (count < MAX_USERS_IN_BATCH) {\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        mstore(refundees, count)\\n        mstore(amounts, count)\\n      }\\n    }\\n\\n    return (raffleId, refundAmount, refundees, amounts);\\n  }\\n\\n  function performUpkeep(bytes calldata performData) external override onlyOwnerOrOperator {\\n    (UpkeepAction action, bytes memory data) = abi.decode(performData, (UpkeepAction, bytes));\\n\\n    if (action == UpkeepAction.OPEN_SCHEDULED_RAFFLES) {\\n      _performOpenScheduledRaffles(data);\\n    } else if (action == UpkeepAction.HAPPEN_OPENED_RAFFLES) {\\n      _performHappenOpenedRaffles(data);\\n    } else if (action == UpkeepAction.CLOSE_HAPPENING_RAFFLES) {\\n      _performCloseHappeningRaffles(data);\\n    } else if (action == UpkeepAction.REFUND_OPENED_RAFFLES) {\\n      _performRefundOpenedRaffles(data);\\n    } else if (action == UpkeepAction.AUTO_END_CLOSED_RAFFLES) {\\n      _performAutoEndClosedRaffles(data);\\n    } else if (action == UpkeepAction.AUTO_END_REFUND_RAFFLES) {\\n      _performAutoEndRefundRaffles(data);\\n    } else if (action == UpkeepAction.SELECT_LUCKY_REFUND_USERS) {\\n      _performLuckyRefundUsersUpkeep(data);\\n    } else if (action == UpkeepAction.REROLL_WINNERS) {\\n      _performRerollWinnerRaffles(data);\\n    }\\n  }\\n\\n  // OPEN raffles in SCHEDULE state\\n  function _performOpenScheduledRaffles(bytes memory performData) internal {\\n    uint256[] memory ids = abi.decode(performData, (uint256[]));\\n\\n    for (uint256 i = 0; i < ids.length; i++) {\\n      Raffle memory raffle = chanceOnChain.getRaffle(ids[i]);\\n      if (raffle.status == RaffleStatus.SCHEDULED && raffle.startTime <= block.timestamp) {\\n        chanceOnChain.switchRaffleStatus(ids[i], RaffleStatus.SCHEDULED, RaffleStatus.OPENED);\\n      }\\n    }\\n  }\\n\\n  // HAPPENING raffles in OPEN state\\n  function _performHappenOpenedRaffles(bytes memory performData) internal {\\n    uint256[] memory ids = abi.decode(performData, (uint256[]));\\n\\n    for (uint256 i = 0; i < ids.length; i++) {\\n      Raffle memory raffle = chanceOnChain.getRaffle(ids[i]);\\n      if (raffle.status == RaffleStatus.OPENED && raffle.ticketsSold >= raffle.minTickets) {\\n        chanceOnChain.switchRaffleStatus(ids[i], RaffleStatus.OPENED, RaffleStatus.HAPPENING);\\n      }\\n    }\\n  }\\n\\n  // CLOSE raffles in HAPPENING state with minTickets sold\\n  function _performCloseHappeningRaffles(bytes memory performData) internal {\\n    uint256[] memory ids = abi.decode(performData, (uint256[]));\\n\\n    for (uint256 i = 0; i < ids.length; i++) {\\n      Raffle memory raffle = chanceOnChain.getRaffle(ids[i]);\\n      if (\\n        raffle.status == RaffleStatus.HAPPENING &&\\n        (raffle.ticketsSold == raffle.maxTickets || (raffle.ticketsSold >= raffle.minTickets && raffle.endTime <= block.timestamp))\\n      ) {\\n        chanceOnChain.switchRaffleStatus(ids[i], RaffleStatus.HAPPENING, RaffleStatus.CLOSED);\\n        _requestRandomness(ids[i]);\\n      }\\n    }\\n  }\\n\\n  // REFUND raffles in OPEN state\\n  function _performRefundOpenedRaffles(bytes memory performData) internal {\\n    uint256[] memory ids = abi.decode(performData, (uint256[]));\\n\\n    for (uint256 i = 0; i < ids.length; i++) {\\n      Raffle memory raffle = chanceOnChain.getRaffle(ids[i]);\\n      if (raffle.status == RaffleStatus.OPENED && raffle.ticketsSold < raffle.minTickets && raffle.endTime <= block.timestamp) {\\n        chanceOnChain.switchRaffleStatus(ids[i], RaffleStatus.OPENED, raffle.ticketsSold == 0 ? RaffleStatus.AUTO_ENDED : RaffleStatus.REFUND);\\n      }\\n    }\\n  }\\n\\n  // AUTO_END raffles in CLOSE state\\n  function _performAutoEndClosedRaffles(bytes memory performData) internal {\\n    uint256[] memory ids = abi.decode(performData, (uint256[]));\\n\\n    for (uint256 i = 0; i < ids.length; i++) {\\n      Raffle memory raffle = chanceOnChain.getRaffle(ids[i]);\\n      if (raffle.status == RaffleStatus.CLOSED && raffle.closedTime + raffle.claimRewardDuration <= block.timestamp) {\\n        chanceOnChain.switchRaffleStatus(ids[i], RaffleStatus.CLOSED, RaffleStatus.AUTO_ENDED);\\n      }\\n    }\\n  }\\n\\n  // AUTO_END raffles in REFUND state\\n  function _performAutoEndRefundRaffles(bytes memory performData) internal {\\n    uint256[] memory ids = abi.decode(performData, (uint256[]));\\n\\n    for (uint256 i = 0; i < ids.length; i++) {\\n      Raffle memory raffle = chanceOnChain.getRaffle(ids[i]);\\n      if (raffle.status == RaffleStatus.REFUND && raffle.refundStartTime + raffle.claimRefundDuration <= block.timestamp) {\\n        chanceOnChain.switchRaffleStatus(ids[i], RaffleStatus.REFUND, RaffleStatus.AUTO_ENDED);\\n      }\\n    }\\n  }\\n\\n  function _performRerollWinnerRaffles(bytes memory performData) internal {\\n    uint256[] memory ids = abi.decode(performData, (uint256[]));\\n\\n    for (uint256 i = 0; i < ids.length; i++) {\\n      if (!chanceOnChain.isRerollWinnerRaffle(ids[i])) {\\n        continue;\\n      }\\n      _requestRandomness(ids[i]);\\n    }\\n  }\\n\\n  function _performLuckyRefundUsersUpkeep(bytes memory performData) internal {\\n    (uint256 raffleId, uint256 refundAmount, uint32[] memory refundees, uint256[] memory amounts) = abi.decode(\\n      performData,\\n      (uint256, uint256, uint32[], uint256[])\\n    );\\n\\n    if (\\n      luckyRefunder.raffleAmount(raffleId) == luckyRefunder.raffleAssignedAmount(raffleId) ||\\n      refundees.length != amounts.length ||\\n      refundees.length == 0\\n    ) {\\n      return;\\n    }\\n\\n    luckyRefunder.addUsers(raffleId, refundAmount, refundees, amounts);\\n  }\\n\\n  function _requestRandomness(uint256 _raffleId) internal {\\n    uint256 requestId = COORDINATOR.requestRandomWords(keyHash, subscriptionId, 10, CALLBACK_GAS_LIMIT, 1);\\n    requestIdToRaffleId[requestId] = _raffleId;\\n  }\\n\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {\\n    uint256 randomness = randomWords[0];\\n    uint256 raffleId = requestIdToRaffleId[requestId];\\n\\n    raffleIdToRandomNumber[raffleId] = randomness;\\n\\n    chanceOnChain.selectWinner(raffleId, randomness);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/DigitalPrizeEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\nimport \\\"./interfaces/IChanceOnChain.sol\\\";\\nimport \\\"./interfaces/IAdminController.sol\\\";\\nimport \\\"./Entities.sol\\\";\\n\\ncontract DigitalPrizeEscrow is IERC721Receiver {\\n  using SafeERC20 for IERC20;\\n\\n  IChanceOnChain public chanceOnChain;\\n  IAdminController private immutable adminController;\\n\\n  enum TokenStandard {\\n    ERC20,\\n    ERC721\\n  }\\n\\n  struct DigitalPrize {\\n    bool claimed;\\n    TokenStandard tokenStandard;\\n    address tokenAddress;\\n    uint256 tokenIdOrAmount;\\n  }\\n\\n  mapping(uint256 => DigitalPrize) public raffleDigitalPrize;\\n\\n  event DepositDigitalPrize(uint256 indexed raffleId, address indexed tokenAddress, uint256 tokenIdOrAmount);\\n  event ClaimDigitalPrize(uint256 indexed raffleId, address indexed tokenAddress, uint256 tokenIdOrAmount);\\n  event WithdrawUnclaimedDigitalPrize(uint256 indexed raffleId, address indexed tokenAddress, uint256 tokenIdOrAmount);\\n\\n  modifier onlyOwner() {\\n    require(adminController.owner() == msg.sender, \\\"Not allowed\\\");\\n    _;\\n  }\\n\\n  constructor(address _chanceOnChain, address _adminController) {\\n    chanceOnChain = IChanceOnChain(_chanceOnChain);\\n    adminController = IAdminController(_adminController);\\n  }\\n\\n  function deposit(uint256 raffleId, address tokenAddress, uint256 tokenIdOrAmount) public onlyOwner {\\n    Raffle memory raffle = chanceOnChain.getRaffle(raffleId);\\n    require(raffle.status == RaffleStatus.SCHEDULED || raffle.status == RaffleStatus.OPENED, \\\"Not allowed\\\");\\n    require(raffle.category == RaffleCategory.DIGITAL, \\\"Only DIGITAL raffle\\\");\\n    require(tokenAddress != address(0), \\\"Empty token address\\\");\\n    require(\\n      raffleDigitalPrize[raffleId].tokenAddress != tokenAddress || raffleDigitalPrize[raffleId].tokenIdOrAmount != tokenIdOrAmount,\\n      \\\"Same token address and amount\\\"\\n    );\\n\\n    // Withdraw previously deposited tokens\\n    if (raffleDigitalPrize[raffleId].tokenAddress != address(0)) {\\n      if (raffleDigitalPrize[raffleId].tokenStandard == TokenStandard.ERC721) {\\n        IERC721(raffleDigitalPrize[raffleId].tokenAddress).safeTransferFrom(address(this), msg.sender, raffleDigitalPrize[raffleId].tokenIdOrAmount);\\n      } else {\\n        IERC20(raffleDigitalPrize[raffleId].tokenAddress).safeTransfer(msg.sender, raffleDigitalPrize[raffleId].tokenIdOrAmount);\\n      }\\n    }\\n\\n    TokenStandard tokenStandard;\\n    bool supportsInterface;\\n    try IERC721(tokenAddress).supportsInterface(type(IERC721).interfaceId) returns (bool _supportsInterface) {\\n      supportsInterface = _supportsInterface;\\n    } catch {}\\n\\n    if (supportsInterface) {\\n      IERC721(tokenAddress).safeTransferFrom(msg.sender, address(this), tokenIdOrAmount);\\n      tokenStandard = TokenStandard.ERC721;\\n    } else {\\n      require(tokenIdOrAmount > 0, \\\"Zero token amount\\\");\\n      IERC20(tokenAddress).safeTransferFrom(msg.sender, address(this), tokenIdOrAmount);\\n      tokenStandard = TokenStandard.ERC20;\\n    }\\n\\n    raffleDigitalPrize[raffleId] = DigitalPrize({\\n      tokenAddress: tokenAddress,\\n      tokenIdOrAmount: tokenIdOrAmount,\\n      claimed: false,\\n      tokenStandard: tokenStandard\\n    });\\n\\n    emit DepositDigitalPrize(raffleId, tokenAddress, tokenIdOrAmount);\\n  }\\n\\n  function claim(uint256 raffleId) public {\\n    Raffle memory raffle = chanceOnChain.getRaffle(raffleId);\\n    require(raffle.status == RaffleStatus.ENDED, \\\"Raffle is not ended\\\");\\n    require(raffle.winner == msg.sender, \\\"Not a winner\\\");\\n    require(raffle.prizeCashAmount == 0, \\\"Cash alternative already claimed\\\");\\n    require(!raffleDigitalPrize[raffleId].claimed, \\\"Already claimed\\\");\\n\\n    DigitalPrize storage prize = raffleDigitalPrize[raffleId];\\n    address tokenAddress = prize.tokenAddress;\\n    uint256 tokenIdOrAmount = prize.tokenIdOrAmount;\\n    if (prize.tokenStandard == TokenStandard.ERC721) {\\n      IERC721(tokenAddress).safeTransferFrom(address(this), msg.sender, tokenIdOrAmount);\\n    } else {\\n      IERC20(tokenAddress).safeTransfer(msg.sender, tokenIdOrAmount);\\n    }\\n\\n    prize.claimed = true;\\n\\n    emit ClaimDigitalPrize(raffleId, tokenAddress, tokenIdOrAmount);\\n  }\\n\\n  function withdrawUnclaimed(uint256 raffleId) public onlyOwner {\\n    Raffle memory raffle = chanceOnChain.getRaffle(raffleId);\\n    require(\\n      raffle.status == RaffleStatus.SCHEDULED ||\\n        raffle.status == RaffleStatus.AUTO_ENDED ||\\n        (raffle.status == RaffleStatus.ENDED && (raffle.prizeCashAmount > 0 || raffle.ticketsSold == 0)),\\n      \\\"Not allowed\\\"\\n    );\\n    require(raffleDigitalPrize[raffleId].tokenAddress != address(0), \\\"Nothing to withdraw\\\");\\n\\n    DigitalPrize storage prize = raffleDigitalPrize[raffleId];\\n    address tokenAddress = prize.tokenAddress;\\n    uint256 tokenIdOrAmount = prize.tokenIdOrAmount;\\n    if (prize.tokenStandard == TokenStandard.ERC721) {\\n      IERC721(tokenAddress).safeTransferFrom(address(this), msg.sender, tokenIdOrAmount);\\n    } else {\\n      IERC20(tokenAddress).safeTransfer(msg.sender, tokenIdOrAmount);\\n    }\\n\\n    prize.tokenAddress = address(0);\\n    prize.tokenIdOrAmount = 0;\\n\\n    emit WithdrawUnclaimedDigitalPrize(raffleId, tokenAddress, tokenIdOrAmount);\\n  }\\n\\n  function onERC721Received(address, address, uint, bytes calldata) external pure override returns (bytes4) {\\n    return IERC721Receiver.onERC721Received.selector;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Entities.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nenum DurationUnit {\\n  MINUTES,\\n  HOURS,\\n  DAYS\\n}\\n\\nstruct Settings {\\n  DurationUnit claimRewardDurationUnit;\\n  DurationUnit claimRefundDurationUnit;\\n  DurationUnit claimLuckyRefundDurationUnit;\\n  address treasuryWallet;\\n  address charityWallet;\\n  address expenseWallet;\\n  address serviceFeeWallet;\\n  uint256 claimRewardDuration;\\n  uint256 claimRefundDuration;\\n  uint256 claimLuckyRefundDuration;\\n  uint256 winnerAllocationBP; // Percentage towards winner in BP\\n  uint256 treasuryAllocationBP; // Percentage towards Treasury wallet in BP\\n  uint256 charityAllocationBP; // Percentage towards Charity wallet in BP\\n  uint256 luckyRefundAllocationBP; // Percentage towards Lucky refund in BP\\n  uint256 maxMarginBP; // Max margin in BP\\n  uint256 serviceFeeBP; // Percentage taken from treasury wallet amount as service fee in BP\\n  uint256 maxRerollAttempts;\\n}\\n\\n// Enum for the category of the raffle\\nenum RaffleCategory {\\n  PHYSICAL,\\n  DIGITAL,\\n  EXPERIENCE,\\n  MONEY\\n}\\n\\n// Enum for the status of the raffle\\nenum RaffleStatus {\\n  SCHEDULED,\\n  OPENED,\\n  PAUSED,\\n  HAPPENING,\\n  CLOSED,\\n  CANCELED,\\n  REFUND,\\n  ENDED,\\n  AUTO_ENDED\\n}\\n\\n// Participant data\\nstruct Participant {\\n  bool winner;\\n  bool skillTestFailed;\\n  bool cashAlternativeClaimed;\\n  bool refundClaimed;\\n  address addr;\\n  uint256 ticketCount;\\n  uint256 amount;\\n}\\n\\nstruct Entry {\\n  address user;\\n  uint cumulativeCount;\\n}\\n\\nstruct RaffleData {\\n  uint256 prizeValue;\\n  uint256 ticketPrice;\\n  uint256 startTime;\\n  uint256 duration;\\n  string prizeName;\\n  RaffleCategory category;\\n  DurationUnit durationUnit;\\n}\\n\\n// Struct for the details of the raffle\\nstruct Raffle {\\n  address winner;\\n  address treasuryWallet;\\n  address charityWallet;\\n  address expenseWallet;\\n  bool cashAlternativeAvailable;\\n  bool isDescendant;\\n  bool prizeClaimed;\\n  bool recurrent;\\n  RaffleCategory category;\\n  RaffleStatus status;\\n  DurationUnit durationUnit;\\n  uint256 id;\\n  uint256 prizeValue;\\n  uint256 ticketPrice;\\n  uint256 minTickets;\\n  uint256 maxTickets;\\n  uint256 startTime;\\n  uint256 duration;\\n  uint256 endTime;\\n  uint256 endedTime;\\n  uint256 closedTime;\\n  uint256 refundStartTime;\\n  uint256 ticketsSold;\\n  uint256 prizeCashAmount;\\n  uint256 claimedRefundAmount;\\n  uint256 treasuryAllocationBP;\\n  uint256 charityAllocationBP;\\n  uint256 luckyRefundAllocationBP;\\n  uint256 winnerAllocationBP;\\n  uint256 maxMarginBP;\\n  uint256 claimRewardDuration;\\n  uint256 claimLuckyRefundDuration;\\n  uint256 claimRefundDuration;\\n  uint256 originId;\\n  string prizeName;\\n  string entityName;\\n}\\n\"\r\n    },\r\n    \"contracts/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nerror MinTicketsTooBig();\\nerror ValueTooHigh();\\nerror InvalidStartTime();\\nerror AlreadyClaimed();\\nerror CannotBeZero();\\nerror InvalidAddress();\\nerror InvalidAmount();\\nerror OnlyParticipant();\\nerror RaffleNotOpen();\\nerror RaffleNotClosed();\\nerror RaffleEnded();\\nerror RaffleNotClaimable();\\nerror RaffleNotRefundable();\\nerror ClaimTimeIsOver();\\nerror NotEnoughTicketsLeft();\\nerror NotWinner();\\nerror WinnerAlreadySelected();\\nerror OnlyUpkeeper();\\nerror OnlyOperator();\\nerror NotAllowed();\\n\"\r\n    },\r\n    \"contracts/interfaces/IAdminController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\ninterface IAdminController {\\n  function owner() external returns (address);\\n\\n  function getAdmins() external returns (address[] memory);\\n\\n  function isAdmin(address _user) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IChanceOnChain.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport \\\"../Entities.sol\\\";\\n\\ninterface IChanceOnChain {\\n  function getRaffle(uint256 _raffleId) external view returns (Raffle memory);\\n\\n  function updateRaffle(Raffle memory raffle) external;\\n\\n  function calcTickets(uint256 _prizeValue, uint256 _ticketPrice, uint256 _margin, uint256 _maxMargin) external pure returns (uint256, uint256);\\n\\n  function rafflesLength() external view returns (uint256);\\n\\n  function raffleParticipants(uint256 _raffleId) external view returns (Participant[] memory);\\n\\n  function raffleParticipantsLength(uint256 _raffleId) external view returns (uint256);\\n\\n  function raffleParticipant(uint256 _raffleId, address _participant) external view returns (Participant memory);\\n\\n  function raffleParticipantByIndex(uint256 _raffleId, uint256 _index) external view returns (Participant memory);\\n\\n  function rafflesByStatusLength(RaffleStatus _status) external view returns (uint256);\\n\\n  function rafflesByStatusIds(RaffleStatus _status) external view returns (uint256[] memory);\\n\\n  function rafflesRerollWinnerIds() external view returns (uint256[] memory);\\n\\n  function isRerollWinnerRaffle(uint256 id) external view returns (bool);\\n\\n  function switchRaffleStatus(uint256 _raffleId, RaffleStatus _oldStatus, RaffleStatus _newStatus) external;\\n\\n  function selectWinner(uint256 raffleId, uint256 randomness) external;\\n\\n  function onClaimLuckyRefund(uint256 _raffleId, address _user) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILuckyRefunder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\ninterface ILuckyRefunder {\\n  function raffleAmount(uint256 _raffleId) external view returns (uint256);\\n\\n  function raffleAssignedAmount(uint256 _raffleId) external view returns (uint256);\\n\\n  function raffleClaimedAmount(uint256 _raffleId) external view returns (uint256);\\n\\n  function raffleUserAmount(uint256 raffleId, address user) external view returns (uint256);\\n\\n  function isExcludedUser(uint256 raffleId, address user) external view returns (bool);\\n\\n  function isSelectedUser(uint256 _raffleId, uint32 _index) external view returns (bool);\\n\\n  function rafflesSelectUsersIds() external view returns (uint256[] memory);\\n\\n  function paticipantDetails(uint256 _raffleId, address _user) external view returns (bool, uint256);\\n\\n  function setChanceOnChain(address _chanceOnChain) external;\\n\\n  function setUpkeeper(address _upkeeper) external;\\n\\n  function excludeUser(uint256 _raffleId, address _user) external;\\n\\n  function onSelectWinner(uint256 _raffleId) external returns (uint256);\\n\\n  function addUsers(uint256 _raffleId, uint256 _refundAmount, uint32[] memory _refundees, uint256[] memory _amounts) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISettingsStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport \\\"../Entities.sol\\\";\\n\\ninterface ISettingsStorage {\\n  function getSettings() external view returns (Settings memory);\\n}\\n\"\r\n    },\r\n    \"contracts/LuckyRefunder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./interfaces/IAdminController.sol\\\";\\nimport \\\"./interfaces/ISettingsStorage.sol\\\";\\nimport \\\"./interfaces/IChanceOnChain.sol\\\";\\nimport \\\"./Entities.sol\\\";\\nimport \\\"./Errors.sol\\\";\\n\\ncontract LuckyRefunder {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.UintSet;\\n\\n  uint32 constant MAX_BPS = 10_000;\\n\\n  address public upkeeper;\\n\\n  IERC20 immutable USDT;\\n  IAdminController private immutable adminController;\\n  ISettingsStorage private immutable settingsStorage;\\n  IChanceOnChain private chanceOnChain;\\n\\n  EnumerableSet.UintSet private _rafflesSelectUsers;\\n  mapping(uint256 => mapping(uint32 => bool)) private _raffleSelectedUsers;\\n  mapping(uint256 => mapping(address => uint256)) private _raffleUserAmount;\\n  mapping(uint256 => mapping(address => bool)) private _raffleExcludedUsers;\\n  mapping(uint256 => uint256) private _raffleAmount;\\n  mapping(uint256 => uint256) private _raffleAssignedAmount;\\n  mapping(uint256 => uint256) private _raffleClaimedAmount;\\n  mapping(uint256 => mapping(address => bool)) _raffleParticipantClaimed;\\n  mapping(uint256 => mapping(address => uint256)) _raffleParticipantClaimedAmount;\\n\\n  event Claim(uint256 indexed raffleId, address indexed user, uint256 amount);\\n  event WithdrawUnclaimedAmount(uint256 indexed _raffleId, uint256 amount);\\n\\n  constructor(address _usdtAddress, address _adminController, address _settingsStorage) {\\n    USDT = IERC20(_usdtAddress);\\n    adminController = IAdminController(_adminController);\\n    settingsStorage = ISettingsStorage(_settingsStorage);\\n  }\\n\\n  function raffleAmount(uint256 _raffleId) public view returns (uint256) {\\n    return _raffleAmount[_raffleId];\\n  }\\n\\n  function raffleAssignedAmount(uint256 _raffleId) public view returns (uint256) {\\n    return _raffleAssignedAmount[_raffleId];\\n  }\\n\\n  function raffleClaimedAmount(uint256 _raffleId) public view returns (uint256) {\\n    return _raffleClaimedAmount[_raffleId];\\n  }\\n\\n  function raffleUserAmount(uint256 raffleId, address user) public view returns (uint256) {\\n    return _raffleUserAmount[raffleId][user];\\n  }\\n\\n  function isExcludedUser(uint256 raffleId, address user) public view returns (bool) {\\n    return _raffleExcludedUsers[raffleId][user];\\n  }\\n\\n  function isSelectedUser(uint256 _raffleId, uint32 _index) public view returns (bool) {\\n    return _raffleSelectedUsers[_raffleId][_index];\\n  }\\n\\n  function rafflesSelectUsersIds() public view returns (uint256[] memory) {\\n    return _rafflesSelectUsers.values();\\n  }\\n\\n  function paticipantDetails(uint256 _raffleId, address _user) public view returns (bool, uint256) {\\n    return (_raffleParticipantClaimed[_raffleId][_user], _raffleParticipantClaimedAmount[_raffleId][_user]);\\n  }\\n\\n  function claim(uint256 _raffleId) public {\\n    Raffle memory raffle = chanceOnChain.getRaffle(_raffleId);\\n    // If raffle has closedTime > 0, then it can have CLOSE, END or AUTO_END status\\n    if (raffle.closedTime == 0) {\\n      revert RaffleNotClaimable();\\n    }\\n    if (_raffleExcludedUsers[_raffleId][msg.sender]) {\\n      revert NotAllowed();\\n    }\\n    if (raffle.endedTime > 0 && raffle.endedTime + raffle.claimLuckyRefundDuration < block.timestamp) {\\n      revert ClaimTimeIsOver();\\n    }\\n\\n    Participant memory participant = chanceOnChain.raffleParticipant(_raffleId, msg.sender);\\n    if (participant.addr == address(0)) {\\n      revert OnlyParticipant();\\n    }\\n    uint256 refundAmount = _raffleUserAmount[_raffleId][msg.sender];\\n    if (_raffleParticipantClaimed[_raffleId][msg.sender] || refundAmount == 0) {\\n      revert AlreadyClaimed();\\n    }\\n\\n    _raffleParticipantClaimed[_raffleId][msg.sender] = true;\\n    _raffleParticipantClaimedAmount[_raffleId][msg.sender] = refundAmount;\\n    _raffleClaimedAmount[_raffleId] += refundAmount;\\n    _raffleUserAmount[_raffleId][msg.sender] = 0;\\n\\n    chanceOnChain.onClaimLuckyRefund(_raffleId, msg.sender);\\n\\n    USDT.safeTransferFrom(address(chanceOnChain), msg.sender, refundAmount);\\n\\n    emit Claim(_raffleId, msg.sender, refundAmount);\\n  }\\n\\n  function withdrawUnclaimedAmount(uint256 _raffleId) public {\\n    onlyOwner();\\n\\n    Raffle memory raffle = chanceOnChain.getRaffle(_raffleId);\\n    if (raffle.endedTime == 0 || raffle.endedTime + raffle.claimLuckyRefundDuration > block.timestamp) {\\n      revert RaffleNotClaimable();\\n    }\\n    uint256 remainingAmount = _raffleAmount[_raffleId] - _raffleClaimedAmount[_raffleId];\\n    if (remainingAmount == 0) {\\n      revert AlreadyClaimed();\\n    }\\n\\n    _raffleClaimedAmount[_raffleId] += remainingAmount;\\n\\n    USDT.safeTransferFrom(\\n      address(chanceOnChain),\\n      raffle.treasuryWallet == address(0) ? settingsStorage.getSettings().treasuryWallet : raffle.treasuryWallet,\\n      remainingAmount\\n    );\\n\\n    emit WithdrawUnclaimedAmount(_raffleId, remainingAmount);\\n  }\\n\\n  function setChanceOnChain(address _chanceOnChain) public {\\n    if (address(chanceOnChain) != address(0)) {\\n      return;\\n    }\\n\\n    chanceOnChain = IChanceOnChain(_chanceOnChain);\\n  }\\n\\n  function setUpkeeper(address _upkeeper) public {\\n    if (upkeeper != address(0)) {\\n      return;\\n    }\\n\\n    upkeeper = _upkeeper;\\n  }\\n\\n  function excludeUser(uint256 _raffleId, address _user) external {\\n    onlyChanceOnChain();\\n\\n    _raffleExcludedUsers[_raffleId][_user] = true;\\n  }\\n\\n  function onSelectWinner(uint256 _raffleId) external returns (uint256) {\\n    onlyChanceOnChain();\\n\\n    Raffle memory raffle = chanceOnChain.getRaffle(_raffleId);\\n    _rafflesSelectUsers.add(_raffleId);\\n    _raffleAmount[_raffleId] =\\n      (raffle.ticketPrice * raffle.minTickets * raffle.luckyRefundAllocationBP) /\\n      (MAX_BPS + raffle.charityAllocationBP + raffle.luckyRefundAllocationBP + raffle.treasuryAllocationBP);\\n\\n    return _raffleAmount[_raffleId];\\n  }\\n\\n  function addUsers(uint256 _raffleId, uint256 _refundAmount, uint32[] memory _refundees, uint256[] memory _amounts) external {\\n    onlyUpkeeper();\\n\\n    if (!_rafflesSelectUsers.contains(_raffleId)) {\\n      revert NotAllowed();\\n    }\\n    uint256 totalAmount = 0;\\n    for (uint256 i = 0; i < _refundees.length; i++) {\\n      uint32 idx = _refundees[i];\\n      if (_raffleSelectedUsers[_raffleId][idx]) {\\n        continue;\\n      }\\n      uint256 amount = _amounts[i];\\n      Participant memory p = chanceOnChain.raffleParticipantByIndex(_raffleId, idx);\\n      _raffleUserAmount[_raffleId][p.addr] = amount;\\n      _raffleSelectedUsers[_raffleId][idx] = true;\\n      totalAmount += amount;\\n    }\\n\\n    if (totalAmount > _refundAmount) {\\n      revert InvalidAmount();\\n    }\\n    _raffleAssignedAmount[_raffleId] += totalAmount;\\n    if (_raffleAssignedAmount[_raffleId] == _raffleAmount[_raffleId]) {\\n      _rafflesSelectUsers.remove(_raffleId);\\n    }\\n  }\\n\\n  function onlyOwner() private {\\n    if (adminController.owner() != msg.sender) {\\n      revert NotAllowed();\\n    }\\n  }\\n\\n  function onlyChanceOnChain() private view {\\n    if (msg.sender != address(chanceOnChain)) {\\n      revert NotAllowed();\\n    }\\n  }\\n\\n  function onlyUpkeeper() private view {\\n    if (msg.sender != upkeeper) {\\n      revert OnlyUpkeeper();\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/MathTestLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nlibrary MathTestLib {\\n  enum Operator {\\n    ADD,\\n    SUB,\\n    MUL,\\n    DIV\\n  }\\n\\n  struct MathTest {\\n    uint256[] numbers;\\n    Operator[] operators;\\n  }\\n\\n  function generate(uint256 randomness) internal pure returns (MathTest memory skillTest) {\\n    uint256 number1 = ((randomness % 100) + 1) * 2; // number in the range 2-200\\n    uint256 number2 = (randomness % 10) + 1; // number in the range 1-10\\n    uint256 number3 = 2; // It's a factor of number 1, so the division will always result in an integer\\n    uint256 number4 = (randomness % 95) + 1; // number in the range 1-95\\n    uint256 number5 = (randomness % 85) + 1; // number in the range 1-85\\n\\n    skillTest.numbers = new uint256[](5);\\n    skillTest.operators = new Operator[](4);\\n\\n    skillTest.numbers[0] = number1;\\n    skillTest.numbers[1] = number2;\\n    skillTest.numbers[2] = number3;\\n    skillTest.numbers[3] = number4;\\n    skillTest.numbers[4] = number5;\\n    skillTest.operators[0] = Operator.MUL;\\n    skillTest.operators[1] = Operator.DIV;\\n    skillTest.operators[2] = Operator.ADD;\\n    skillTest.operators[3] = Operator.SUB;\\n  }\\n\\n  function verify(MathTest memory self, int256 answer) internal pure returns (bool) {\\n    int256 result = int256(self.numbers[0]);\\n    for (uint256 i = 0; i < self.operators.length; i++) {\\n      int256 nextNum = int256(self.numbers[i + 1]);\\n      if (self.operators[i] == Operator.ADD) {\\n        result += nextNum;\\n      } else if (self.operators[i] == Operator.SUB) {\\n        result -= nextNum;\\n      } else if (self.operators[i] == Operator.MUL) {\\n        result *= nextNum;\\n      } else if (self.operators[i] == Operator.DIV) {\\n        result /= nextNum;\\n      }\\n    }\\n\\n    return result == answer;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/RaffleUpdater.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport \\\"./interfaces/IChanceOnChain.sol\\\";\\nimport \\\"./interfaces/IAdminController.sol\\\";\\nimport \\\"./Entities.sol\\\";\\nimport \\\"./Errors.sol\\\";\\n\\ncontract RaffleUpdater {\\n  IChanceOnChain public chanceOnChain;\\n  IAdminController private immutable adminController;\\n\\n  modifier onlyAdmin() {\\n    if (!adminController.isAdmin(msg.sender)) {\\n      revert NotAllowed();\\n    }\\n    _;\\n  }\\n\\n  // Constructor\\n  constructor(address _chanceOnChain, address _adminController) {\\n    adminController = IAdminController(_adminController);\\n    chanceOnChain = IChanceOnChain(_chanceOnChain);\\n  }\\n\\n  function updateRaffle(uint256 raffleId, RaffleData memory data) public onlyAdmin {\\n    Raffle memory raffle = chanceOnChain.getRaffle(raffleId);\\n    if (raffle.status != RaffleStatus.SCHEDULED) {\\n      revert NotAllowed();\\n    }\\n    if (data.startTime != 0 && data.startTime <= block.timestamp) {\\n      revert InvalidStartTime();\\n    }\\n    if (data.duration == 0) {\\n      revert CannotBeZero();\\n    }\\n    if (data.prizeValue == 0) {\\n      revert CannotBeZero();\\n    }\\n    if (data.ticketPrice == 0) {\\n      revert CannotBeZero();\\n    }\\n\\n    if (data.category != raffle.category) {\\n      raffle.category = data.category;\\n    }\\n    if (keccak256(abi.encodePacked(data.prizeName)) != keccak256(abi.encodePacked(raffle.prizeName))) {\\n      raffle.prizeName = data.prizeName;\\n    }\\n    if (data.duration != raffle.duration) {\\n      raffle.duration = data.duration;\\n    }\\n    if (data.durationUnit != raffle.durationUnit) {\\n      raffle.durationUnit = data.durationUnit;\\n    }\\n    if (data.startTime != raffle.startTime) {\\n      if (data.startTime == 0) {\\n        raffle.startTime = block.timestamp;\\n      } else {\\n        raffle.startTime = data.startTime;\\n      }\\n    }\\n    raffle.endTime = raffle.startTime + _durationFromUnits(raffle.duration, raffle.durationUnit);\\n    if (data.prizeValue != raffle.prizeValue) {\\n      raffle.prizeValue = data.prizeValue;\\n    }\\n    if (data.ticketPrice != raffle.ticketPrice) {\\n      raffle.ticketPrice = data.ticketPrice;\\n    }\\n\\n    (raffle.minTickets, raffle.maxTickets) = chanceOnChain.calcTickets(\\n      raffle.prizeValue,\\n      raffle.ticketPrice,\\n      raffle.treasuryAllocationBP + raffle.charityAllocationBP + raffle.luckyRefundAllocationBP,\\n      raffle.maxMarginBP\\n    );\\n    if (raffle.minTickets > raffle.maxTickets) {\\n      revert MinTicketsTooBig();\\n    }\\n\\n    chanceOnChain.updateRaffle(raffle);\\n  }\\n\\n  function _durationFromUnits(uint256 _duration, DurationUnit _unit) private pure returns (uint256) {\\n    if (_unit == DurationUnit.MINUTES) {\\n      return _duration * 1 minutes;\\n    }\\n    if (_unit == DurationUnit.DAYS) {\\n      return _duration * 1 days;\\n    }\\n\\n    return _duration * 1 hours;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/SettingsStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport \\\"./interfaces/IAdminController.sol\\\";\\nimport \\\"./interfaces/ISettingsStorage.sol\\\";\\nimport \\\"./Entities.sol\\\";\\nimport \\\"./Errors.sol\\\";\\n\\ncontract SettingsStorage is ISettingsStorage {\\n  uint32 constant MAX_BPS = 10_000;\\n\\n  IAdminController private immutable adminController;\\n\\n  Settings private settings;\\n\\n  event SetClaimRewardDuration(uint256 indexed duration, DurationUnit unit);\\n  event SetClaimRefundDuration(uint256 indexed duration, DurationUnit unit);\\n  event SetClaimLuckyRefundDuration(uint256 indexed duration, DurationUnit unit);\\n  event SetTreasuryWallet(address indexed wallet);\\n  event SetCharityWallet(address indexed wallet);\\n  event SetExpenseWallet(address indexed wallet);\\n  event SetServiceFeeWallet(address indexed wallet);\\n  event SetTreasuryAllocation(uint256 indexed allocation);\\n  event SetCharityAllocation(uint256 indexed allocation);\\n  event SetLuckyRefundAllocation(uint256 indexed allocation);\\n  event SetWinnerAllocation(uint256 indexed allocation);\\n  event SetMaxMargin(uint256 indexed margin);\\n  event SetMaxRerollAttempts(uint256 indexed attempts);\\n  event SetServiceFee(uint256 indexed fee);\\n\\n  modifier onlyOwner() {\\n    if (adminController.owner() != msg.sender) {\\n      revert NotAllowed();\\n    }\\n    _;\\n  }\\n\\n  constructor(address _adminController, address _treasuryWallet, address _charityWallet, address _expenseWallet, address _serviceFeeWallet) {\\n    adminController = IAdminController(_adminController);\\n    settings = Settings({\\n      claimRewardDuration: 7 days,\\n      claimRewardDurationUnit: DurationUnit.DAYS,\\n      claimRefundDuration: 7 days,\\n      claimRefundDurationUnit: DurationUnit.DAYS,\\n      claimLuckyRefundDuration: 3 days,\\n      claimLuckyRefundDurationUnit: DurationUnit.DAYS,\\n      winnerAllocationBP: 8000,\\n      treasuryAllocationBP: 2000,\\n      charityAllocationBP: 500,\\n      luckyRefundAllocationBP: 500,\\n      serviceFeeBP: 0,\\n      maxMarginBP: 6000,\\n      maxRerollAttempts: 5,\\n      treasuryWallet: _treasuryWallet,\\n      charityWallet: _charityWallet,\\n      expenseWallet: _expenseWallet,\\n      serviceFeeWallet: _serviceFeeWallet\\n    });\\n  }\\n\\n  function getSettings() public view returns (Settings memory) {\\n    return settings;\\n  }\\n\\n  function setClaimRewardDuration(uint256 _duration, DurationUnit _unit) public onlyOwner {\\n    if (_duration == 0) {\\n      revert CannotBeZero();\\n    }\\n    settings.claimRewardDuration = _durationFromUnits(_duration, _unit);\\n    settings.claimRewardDurationUnit = _unit;\\n\\n    emit SetClaimRewardDuration(_duration, _unit);\\n  }\\n\\n  function setClaimRefundDuration(uint256 _duration, DurationUnit _unit) public onlyOwner {\\n    if (_duration == 0) {\\n      revert CannotBeZero();\\n    }\\n    settings.claimRefundDuration = _durationFromUnits(_duration, _unit);\\n    settings.claimRefundDurationUnit = _unit;\\n\\n    emit SetClaimRefundDuration(_duration, _unit);\\n  }\\n\\n  function setClaimLuckyRefundDuration(uint256 _duration, DurationUnit _unit) public onlyOwner {\\n    if (_duration == 0) {\\n      revert CannotBeZero();\\n    }\\n    settings.claimLuckyRefundDuration = _durationFromUnits(_duration, _unit);\\n    settings.claimLuckyRefundDurationUnit = _unit;\\n\\n    emit SetClaimLuckyRefundDuration(_duration, _unit);\\n  }\\n\\n  function setTreasuryWallet(address _wallet) public onlyOwner {\\n    if (_wallet == address(0)) {\\n      revert InvalidAddress();\\n    }\\n    settings.treasuryWallet = _wallet;\\n\\n    emit SetTreasuryWallet(_wallet);\\n  }\\n\\n  function setCharityWallet(address _wallet) public onlyOwner {\\n    if (_wallet == address(0)) {\\n      revert InvalidAddress();\\n    }\\n    settings.charityWallet = _wallet;\\n\\n    emit SetCharityWallet(_wallet);\\n  }\\n\\n  function setExpenseWallet(address _wallet) public onlyOwner {\\n    if (_wallet == address(0)) {\\n      revert InvalidAddress();\\n    }\\n    settings.expenseWallet = _wallet;\\n\\n    emit SetExpenseWallet(_wallet);\\n  }\\n\\n  function setServiceFeeWallet(address _wallet) public onlyOwner {\\n    if (_wallet == address(0)) {\\n      revert InvalidAddress();\\n    }\\n    settings.serviceFeeWallet = _wallet;\\n\\n    emit SetServiceFeeWallet(_wallet);\\n  }\\n\\n  function setTreasuryAllocationBP(uint256 _allocation) public onlyOwner {\\n    if (_allocation > MAX_BPS) {\\n      revert ValueTooHigh();\\n    }\\n    settings.treasuryAllocationBP = _allocation;\\n\\n    emit SetTreasuryAllocation(_allocation);\\n  }\\n\\n  function setCharityAllocationBP(uint256 _allocation) public onlyOwner {\\n    if (_allocation > MAX_BPS) {\\n      revert ValueTooHigh();\\n    }\\n    settings.charityAllocationBP = _allocation;\\n\\n    emit SetCharityAllocation(_allocation);\\n  }\\n\\n  function setLuckyRefundAllocationBP(uint256 _allocation) public onlyOwner {\\n    if (_allocation > MAX_BPS) {\\n      revert ValueTooHigh();\\n    }\\n    settings.luckyRefundAllocationBP = _allocation;\\n\\n    emit SetLuckyRefundAllocation(_allocation);\\n  }\\n\\n  function setWinnerAllocationBP(uint256 _allocation) public onlyOwner {\\n    if (_allocation > MAX_BPS) {\\n      revert ValueTooHigh();\\n    }\\n    settings.winnerAllocationBP = _allocation;\\n\\n    emit SetWinnerAllocation(_allocation);\\n  }\\n\\n  function setMaxMarginBP(uint256 _margin) public onlyOwner {\\n    if (_margin > MAX_BPS) {\\n      revert ValueTooHigh();\\n    }\\n    settings.maxMarginBP = _margin;\\n\\n    emit SetMaxMargin(_margin);\\n  }\\n\\n  function setServiceFeeBP(uint256 _value) public onlyOwner {\\n    if (_value > MAX_BPS) {\\n      revert ValueTooHigh();\\n    }\\n\\n    settings.serviceFeeBP = _value;\\n\\n    emit SetServiceFee(_value);\\n  }\\n\\n  function setMaxRerollAttempts(uint256 _value) public onlyOwner {\\n    if (_value > 10) {\\n      revert ValueTooHigh();\\n    }\\n    settings.maxRerollAttempts = _value;\\n\\n    emit SetMaxRerollAttempts(_value);\\n  }\\n\\n  function _durationFromUnits(uint256 _duration, DurationUnit _unit) private pure returns (uint256) {\\n    if (_unit == DurationUnit.MINUTES) {\\n      return _duration * 1 minutes;\\n    }\\n    if (_unit == DurationUnit.DAYS) {\\n      return _duration * 1 days;\\n    }\\n\\n    return _duration * 1 hours;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/test/Multicall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.16;\\n\\ncontract Multicall {\\n    struct Call {\\n        address target;\\n        bytes callData;\\n    }\\n\\n    function aggregate(\\n        Call[] memory calls\\n    ) public returns (uint256 blockNumber, bytes[] memory returnData) {\\n        blockNumber = block.number;\\n        returnData = new bytes[](calls.length);\\n        for (uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory ret) = calls[i].target.call(\\n                calls[i].callData\\n            );\\n            require(success);\\n            returnData[i] = ret;\\n        }\\n    }\\n\\n    // Helper functions\\n    function getEthBalance(address addr) public view returns (uint256 balance) {\\n        balance = addr.balance;\\n    }\\n\\n    function getBlockHash(\\n        uint256 blockNumber\\n    ) public view returns (bytes32 blockHash) {\\n        blockHash = blockhash(blockNumber);\\n    }\\n\\n    function getLastBlockHash() public view returns (bytes32 blockHash) {\\n        blockHash = blockhash(block.number - 1);\\n    }\\n\\n    function getCurrentBlockTimestamp()\\n        public\\n        view\\n        returns (uint256 timestamp)\\n    {\\n        timestamp = block.timestamp;\\n    }\\n\\n    function getCurrentBlockDifficulty()\\n        public\\n        view\\n        returns (uint256 difficulty)\\n    {\\n        difficulty = block.difficulty;\\n    }\\n\\n    function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {\\n        gaslimit = block.gaslimit;\\n    }\\n\\n    function getCurrentBlockCoinbase() public view returns (address coinbase) {\\n        coinbase = block.coinbase;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/test/PrizeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract PrizeERC20 is ERC20 {\\n  constructor() ERC20(\\\"Prize ERC20\\\", \\\"ERC20\\\") {}\\n\\n  function mint(uint256 amount) external {\\n    _mint(msg.sender, amount * 1e18);\\n  }\\n\\n  function mintTo(address addr, uint256 amount) external {\\n    _mint(addr, amount * 1e18);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/test/PrizeERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\ncontract PrizeERC721 is ERC721 {\\n  constructor() ERC721(\\\"Prize ERC721\\\", \\\"ERC721\\\") {}\\n\\n  function mint(uint256 id) external {\\n    _mint(msg.sender, id);\\n  }\\n\\n  function mintTo(address addr, uint256 id) external {\\n    _mint(addr, id);\\n  }\\n\\n  function mintBatch(address addr, uint256[] memory ids) external {\\n    for (uint256 i = 0; i < ids.length; i++) {\\n      _mint(addr, ids[i]);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/test/USDT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract USDT is ERC20 {\\n  constructor() ERC20(\\\"Tether USD\\\", \\\"USDT\\\") {}\\n\\n  function decimals() public view virtual override returns (uint8) {\\n    return 6;\\n  }\\n\\n  function mint(uint256 amount) external {\\n    _mint(msg.sender, amount * 10 ** 6);\\n  }\\n\\n  function mintTo(address addr, uint256 amount) external {\\n    _mint(addr, amount * 10 ** 6);\\n  }\\n\\n  function mintToAndApprove(address to, uint256 amount, address spender) external {\\n    _mint(to, amount * 10 ** 6);\\n    _approve(to, spender, amount * 10 ** 6);\\n  }\\n\\n  function mintToAndApproveWithEth(address to, uint256 amount, address spender, uint256 ethValue) external {\\n    _mint(to, amount * 10 ** 6);\\n    _approve(to, spender, amount * 10 ** 6);\\n    payable(to).transfer(ethValue);\\n  }\\n\\n  receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/test/VRFCoordinatorV2Mock.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol\\\";\\n\"\r\n    },\r\n    \"contracts/test/VRFV2Wrapper.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFV2Wrapper.sol\\\";\\n\"\r\n    },\r\n    \"hardhat/console.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdtAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_adminController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_settingsStorage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_luckyRefunder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimTimeIsOver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStartTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinTicketsTooBig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughTicketsLeft\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWinner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyParticipant\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyUpkeeper\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RaffleEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RaffleNotClaimable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RaffleNotClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RaffleNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RaffleNotRefundable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WinnerAlreadySelected\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numTickets\",\"type\":\"uint256\"}],\"name\":\"BuyTickets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum RaffleStatus\",\"name\":\"oldStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum RaffleStatus\",\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"ChangeStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"cashAlternative\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimPrize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"CreateRaffle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"FailedSkillTest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"SelectWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"recurrent\",\"type\":\"bool\"}],\"name\":\"SetRaffleRecurrency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updater\",\"type\":\"address\"}],\"name\":\"SetRaffleUpdater\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"upkeeper\",\"type\":\"address\"}],\"name\":\"SetUpkeeper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"UpdateRaffle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"charityWalletAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expenseWalletAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasuryWalletAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawUnclaimedPrize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawUnclaimedRefund\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numTickets\",\"type\":\"uint256\"}],\"name\":\"buyTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_prizeValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxMargin\",\"type\":\"uint256\"}],\"name\":\"calcTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minTickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTickets\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"}],\"name\":\"claimRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"mathTestAnswer\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"_claimCashAlternative\",\"type\":\"bool\"}],\"name\":\"claimReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"prizeValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"prizeName\",\"type\":\"string\"},{\"internalType\":\"enum RaffleCategory\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"enum DurationUnit\",\"name\":\"durationUnit\",\"type\":\"uint8\"}],\"internalType\":\"struct RaffleData\",\"name\":\"data\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"entityName\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"recurrent\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"cashAlternativeAvailable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"treasuryWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expenseWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"charityWallet\",\"type\":\"address\"}],\"name\":\"createRaffle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"}],\"name\":\"getRaffle\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasuryWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"charityWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expenseWallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"cashAlternativeAvailable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDescendant\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"prizeClaimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"recurrent\",\"type\":\"bool\"},{\"internalType\":\"enum RaffleCategory\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"enum RaffleStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum DurationUnit\",\"name\":\"durationUnit\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prizeValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refundStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketsSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prizeCashAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedRefundAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryAllocationBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"charityAllocationBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"luckyRefundAllocationBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winnerAllocationBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMarginBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimRewardDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimLuckyRefundDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimRefundDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"prizeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"entityName\",\"type\":\"string\"}],\"internalType\":\"struct Raffle\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isRerollWinnerRaffle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"onClaimLuckyRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"}],\"name\":\"raffleEntriesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"}],\"name\":\"raffleMathTest\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"numbers\",\"type\":\"uint256[]\"},{\"internalType\":\"enum MathTestLib.Operator[]\",\"name\":\"operators\",\"type\":\"uint8[]\"}],\"internalType\":\"struct MathTestLib.MathTest\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"raffleParticipant\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"winner\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"skillTestFailed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"cashAlternativeClaimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"refundClaimed\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ticketCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Participant\",\"name\":\"participant\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"raffleParticipantByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"winner\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"skillTestFailed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"cashAlternativeClaimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"refundClaimed\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ticketCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Participant\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"raffleParticipantIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"}],\"name\":\"raffleParticipants\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"winner\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"skillTestFailed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"cashAlternativeClaimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"refundClaimed\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ticketCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Participant[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"}],\"name\":\"raffleParticipantsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raffleUpdater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum RaffleStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"rafflesByStatusIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum RaffleStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"rafflesByStatusLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rafflesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rafflesRerollWinnerIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"selectWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_recurrent\",\"type\":\"bool\"}],\"name\":\"setRaffleRecurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"internalType\":\"enum RaffleStatus\",\"name\":\"_newStatus\",\"type\":\"uint8\"}],\"name\":\"setRaffleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_raffleUpdater\",\"type\":\"address\"}],\"name\":\"setRaffleUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upkeeper\",\"type\":\"address\"}],\"name\":\"setUpkeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"},{\"internalType\":\"enum RaffleStatus\",\"name\":\"_oldStatus\",\"type\":\"uint8\"},{\"internalType\":\"enum RaffleStatus\",\"name\":\"_newStatus\",\"type\":\"uint8\"}],\"name\":\"switchRaffleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasuryWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"charityWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expenseWallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"cashAlternativeAvailable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isDescendant\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"prizeClaimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"recurrent\",\"type\":\"bool\"},{\"internalType\":\"enum RaffleCategory\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"enum RaffleStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum DurationUnit\",\"name\":\"durationUnit\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prizeValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refundStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketsSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prizeCashAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedRefundAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryAllocationBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"charityAllocationBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"luckyRefundAllocationBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winnerAllocationBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMarginBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimRewardDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimLuckyRefundDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimRefundDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"prizeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"entityName\",\"type\":\"string\"}],\"internalType\":\"struct Raffle\",\"name\":\"raffle\",\"type\":\"tuple\"}],\"name\":\"updateRaffle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upkeeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userRafflesIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_raffleId\",\"type\":\"uint256\"}],\"name\":\"withdrawUnclaimedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ChanceOnChain", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f00000000000000000000000096d6fe34d08f460894744ad77a7571bf37eb4ba0000000000000000000000000c231b2e6e1158c6dc561312a4fdf79a8dc8434dd000000000000000000000000d134f600c25a4b251e92e19598ce99569ad21a76", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}