{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/AuditorContactsStore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/// @title Contract to store Stronghold DAO auditor social contacts\\n/// @author asimaranov\\n/// @notice Allows auditors to link their social networks to the auditor's board\\ncontract AuditorContactsStore {\\n    mapping(address => mapping(bytes32 => bytes32)) contacts;  // Auditor => social network name => username\\n\\n    event ContactsSet(address indexed auditor, bytes32[] socialNetwork, bytes32[] contact);\\n\\n    /// @notice Sets auditor contacts\\n    /// @param socialNetworks Social network names converted to bytes32\\n    /// @param contacts_ Corresponding contact usernames converted to bytes32 without website prefix\\n    function setContacts(bytes32[] calldata socialNetworks, bytes32[] calldata contacts_) public {\\n        require(socialNetworks.length == contacts_.length, \\\"Incorrect argument array length\\\");\\n        \\n        for (uint256 i = 0; i < contacts_.length; i++) {\\n            contacts[msg.sender][socialNetworks[i]] = contacts_[i];\\n        }\\n\\n        emit ContactsSet(msg.sender, socialNetworks, contacts_);\\n    }\\n\\n    /// @notice Returns saved auditor contacts\\n    /// @param auditor Auditor to request contacts for\\n    /// @param socialNetworks Social network names converted to bytes32 to get correspoinding contacts\\n    /// @return contacts_ Contacts for the requested social networks\\n    function getContacts(address auditor, bytes32[] calldata socialNetworks) public view returns (bytes32[] memory contacts_) {\\n        contacts_ = new bytes32[](socialNetworks.length);\\n        for (uint256 i = 0; i < socialNetworks.length; i++) {\\n            contacts_[i] = contacts[auditor][socialNetworks[i]];\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"auditor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"socialNetwork\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"contact\",\"type\":\"bytes32[]\"}],\"name\":\"ContactsSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"auditor\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"socialNetworks\",\"type\":\"bytes32[]\"}],\"name\":\"getContacts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contacts_\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"socialNetworks\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"contacts_\",\"type\":\"bytes32[]\"}],\"name\":\"setContacts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AuditorContactsStore", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}