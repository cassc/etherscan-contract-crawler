{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 0\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/utils/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/GreenBTCImage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\nimport \\\"./libraries/FormattedStrings.sol\\\";\\r\\nimport \\\"./libraries/TransferHelper.sol\\\";\\r\\n\\r\\nimport './GreenBTCType.sol';\\r\\n\\r\\ncontract GreenBTCImage {\\r\\n \\r\\n    using Strings for uint128;\\r\\n    using Strings for uint256;\\r\\n    using Strings for address;\\r\\n    using FormattedStrings for uint256;\\r\\n\\r\\n    function _decimalTruncate(string memory _str, uint256 decimalDigits) internal pure returns (string memory) {\\r\\n        bytes memory strBytes = bytes(_str);\\r\\n        uint256 dotIndex = strBytes.length;\\r\\n\\r\\n        for (uint256 i = 0; i < strBytes.length; i++) {\\r\\n            if (strBytes[i] == \\\".\\\") {\\r\\n\\r\\n                if(i + decimalDigits + 1 < strBytes.length){\\r\\n                    dotIndex = i + decimalDigits + 1;\\r\\n                }\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        bytes memory result = new bytes(dotIndex);\\r\\n        for (uint256 i = 0; i < dotIndex; i++) {\\r\\n            result[i] = strBytes[i];\\r\\n        }\\r\\n\\r\\n        return string(result);\\r\\n    }\\r\\n\\r\\n    function getCertificateSVGBytes(address owner, GreenBTCInfo calldata gbtc) external pure returns(string memory){\\r\\n\\r\\n        string memory turncateEnergy = _decimalTruncate(gbtc.energyStr, 3);\\r\\n\\r\\n        string memory artFlag = ((gbtc.greenType & 0xF0) == 0x10) \\r\\n                                  ? '<text x=\\\"15\\\" y=\\\"135\\\" class=\\\"prefix__medium\\\">*ART</text>' \\r\\n                                  : '';\\r\\n\\r\\n        bytes memory imgBytes = abi.encodePacked(\\r\\n            '<svg width=\\\"300\\\" height=\\\"300\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" font-family=\\\"Courier New\\\">'\\r\\n            '<rect width=\\\"300\\\" height=\\\"300\\\" rx=\\\"10\\\" fill=\\\"#f3f6d3\\\" />'\\r\\n            '<path fill=\\\"#fffef8\\\" d=\\\"M0 60h300v125H0z\\\" />'\\r\\n            '<rect y=\\\"240\\\" width=\\\"300\\\" height=\\\"60\\\" rx=\\\"10\\\" fill=\\\"#e5d2bd\\\" />'\\r\\n            '<path fill=\\\"#f6dfeb\\\" d=\\\"M0 180h300v70H0z\\\" />'\\r\\n            '<text x=\\\"15\\\" y=\\\"25\\\" class=\\\"prefix__medium\\\">GREENBTC CERTIFICATE</text>'\\r\\n            '<path fill=\\\"#8E8984\\\" d=\\\"M15 50h115v.409H15z\\\" />'\\r\\n            '<path opacity=\\\".1\\\" stroke=\\\"#5F5246\\\" stroke-width=\\\"20\\\" stroke-dasharray=\\\"5 5 5\\\" d=\\\"M275 208v87\\\" />'\\r\\n            '<text x=\\\"15\\\" y=\\\"95\\\" class=\\\"prefix__medium\\\">HEIGHT&gt;</text>'\\r\\n            '<text x=\\\"110\\\" y=\\\"95\\\" class=\\\"prefix__medium\\\">',\\r\\n            gbtc.height.toString(),\\r\\n            '</text>'\\r\\n            '<text x=\\\"15\\\" y=\\\"115\\\" class=\\\"prefix__medium\\\">ENERGY&gt;</text>'\\r\\n            '<text x=\\\"110\\\" y=\\\"115\\\" class=\\\"prefix__medium\\\">',\\r\\n            turncateEnergy,\\r\\n            '  kWh'\\r\\n            '</text>',\\r\\n            artFlag,\\r\\n            '<text x=\\\"15\\\" y=\\\"210\\\" class=\\\"prefix__medium\\\">OWNER:</text>'\\r\\n            '<text x=\\\"15\\\" y=\\\"230\\\" font-size=\\\"9\\\">',\\r\\n            owner.toHexString(),\\r\\n            '</text>'\\r\\n            '<g opacity=\\\".25\\\" fill=\\\"#FFC736\\\">'\\r\\n            '<path d=\\\"M223.859 16.717h-.26V0H203.51v16.717h-20.096v123.824h20.096v16.733h20.089v-16.733h.26v-26.773H210.2V90.342h13.659V63.57H210.2V43.49h13.659V16.717zM236.579 63.57h17.148c5.547 0 10.044-4.495 10.044-10.04 0-5.545-4.497-10.04-10.044-10.04h-17.148V0h20.071v16.832c18.974 1.489 33.907 17.35 33.907 36.698a36.655 36.655 0 01-8.866 23.957 38.316 38.316 0 018.866 24.568c0 19.7-14.809 35.943-33.907 38.214v17.005h-20.071v-43.506h15.473c6.473 0 11.719-5.244 11.719-11.713 0-6.469-5.246-11.713-11.719-11.713h-15.473V63.57z\\\" />'\\r\\n            '</g>'\\r\\n            '<style>.prefix__medium{font-size:16px}</style>'\\r\\n            '</svg>'\\r\\n        );\\r\\n\\r\\n        return  string(Base64.encode(imgBytes));\\r\\n    }\\r\\n\\r\\n    function getGreenTreeSVGBytes() external pure returns(string memory) {\\r\\n\\r\\n        bytes memory imgBytes = abi.encodePacked(\\r\\n            '<svg width=\\\"320\\\" height=\\\"320\\\" viewBox=\\\"0 0 320 320\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" shape-rendering=\\\"crispEdges\\\">'\\r\\n                '<rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"none\\\"/>'\\r\\n                '<rect width=\\\"320\\\" height=\\\"10\\\" x=\\\"0\\\" y=\\\"0\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"320\\\" height=\\\"10\\\" x=\\\"0\\\" y=\\\"10\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"320\\\" height=\\\"10\\\" x=\\\"0\\\" y=\\\"20\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"320\\\" height=\\\"10\\\" x=\\\"0\\\" y=\\\"30\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"320\\\" height=\\\"10\\\" x=\\\"0\\\" y=\\\"40\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"320\\\" height=\\\"10\\\" x=\\\"0\\\" y=\\\"50\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"100\\\" height=\\\"10\\\" x=\\\"0\\\" y=\\\"60\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"100\\\" y=\\\"60\\\" fill=\\\"#0e3500\\\"/>'\\r\\n                '<rect width=\\\"30\\\" height=\\\"10\\\" x=\\\"120\\\" y=\\\"60\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"150\\\" y=\\\"60\\\" fill=\\\"#0e3500\\\"/>'\\r\\n                '<rect width=\\\"30\\\" height=\\\"10\\\" x=\\\"170\\\" y=\\\"60\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"200\\\" y=\\\"60\\\" fill=\\\"#0e3500\\\"/>'\\r\\n                '<rect width=\\\"100\\\" height=\\\"10\\\" x=\\\"220\\\" y=\\\"60\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"90\\\" height=\\\"10\\\" x=\\\"0\\\" y=\\\"70\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"90\\\" y=\\\"70\\\" fill=\\\"#0e3500\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"100\\\" y=\\\"70\\\" fill=\\\"#287a17\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"120\\\" y=\\\"70\\\" fill=\\\"#0e3500\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"130\\\" y=\\\"70\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"140\\\" y=\\\"70\\\" fill=\\\"#0e3500\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"150\\\" y=\\\"70\\\" fill=\\\"#58a90f\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"170\\\" y=\\\"70\\\" fill=\\\"#0e3500\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"180\\\" y=\\\"70\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"190\\\" y=\\\"70\\\" fill=\\\"#0e3500\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"200\\\" y=\\\"70\\\" fill=\\\"#287a17\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"220\\\" y=\\\"70\\\" fill=\\\"#0e3500\\\"/>'\\r\\n                '<rect width=\\\"90\\\" height=\\\"10\\\" x=\\\"230\\\" y=\\\"70\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"80\\\" height=\\\"10\\\" x=\\\"0\\\" y=\\\"80\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"80\\\" y=\\\"80\\\" fill=\\\"#0e3500\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"90\\\" y=\\\"80\\\" fill=\\\"#287a17\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"100\\\" y=\\\"80\\\" fill=\\\"#1e6310\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"120\\\" y=\\\"80\\\" fill=\\\"#287a17\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"130\\\" y=\\\"80\\\" fill=\\\"#0e3500\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"150\\\" y=\\\"80\\\" fill=\\\"#58a90f\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"170\\\" y=\\\"80\\\" fill=\\\"#0e3500\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"190\\\" y=\\\"80\\\" fill=\\\"#287a17\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"200\\\" y=\\\"80\\\" fill=\\\"#1e6310\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"220\\\" y=\\\"80\\\" fill=\\\"#287a17\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"230\\\" y=\\\"80\\\" fill=\\\"#0e3500\\\"/>'\\r\\n                '<rect width=\\\"80\\\" height=\\\"10\\\" x=\\\"240\\\" y=\\\"80\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"90\\\" height=\\\"10\\\" x=\\\"0\\\" y=\\\"90\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"90\\\" y=\\\"90\\\" fill=\\\"#0e3500\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"100\\\" y=\\\"90\\\" fill=\\\"#287a17\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"120\\\" y=\\\"90\\\" fill=\\\"#0e3500\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"130\\\" y=\\\"90\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"140\\\" y=\\\"90\\\" fill=\\\"#0e3500\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"150\\\" y=\\\"90\\\" fill=\\\"#58a90f\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"170\\\" y=\\\"90\\\" fill=\\\"#0e3500\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"180\\\" y=\\\"90\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"190\\\" y=\\\"90\\\" fill=\\\"#0e3500\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"200\\\" y=\\\"90\\\" fill=\\\"#287a17\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"220\\\" y=\\\"90\\\" fill=\\\"#0e3500\\\"/>'\\r\\n                '<rect width=\\\"90\\\" height=\\\"10\\\" x=\\\"230\\\" y=\\\"90\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"100\\\" height=\\\"10\\\" x=\\\"0\\\" y=\\\"100\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"100\\\" y=\\\"100\\\" fill=\\\"#0e3500\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"120\\\" y=\\\"100\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"140\\\" y=\\\"100\\\" fill=\\\"#0e3500\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"150\\\" y=\\\"100\\\" fill=\\\"#58a90f\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"170\\\" y=\\\"100\\\" fill=\\\"#0e3500\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"180\\\" y=\\\"100\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"200\\\" y=\\\"100\\\" fill=\\\"#0e3500\\\"/>'\\r\\n                '<rect width=\\\"100\\\" height=\\\"10\\\" x=\\\"220\\\" y=\\\"100\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"130\\\" height=\\\"10\\\" x=\\\"0\\\" y=\\\"110\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"130\\\" y=\\\"110\\\" fill=\\\"#30120b\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"140\\\" y=\\\"110\\\" fill=\\\"#b7a31c\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"150\\\" y=\\\"110\\\" fill=\\\"#bec028\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"170\\\" y=\\\"110\\\" fill=\\\"#b7a31c\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"180\\\" y=\\\"110\\\" fill=\\\"#30120b\\\"/>'\\r\\n                '<rect width=\\\"130\\\" height=\\\"10\\\" x=\\\"190\\\" y=\\\"110\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"120\\\" height=\\\"10\\\" x=\\\"0\\\" y=\\\"120\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"120\\\" y=\\\"120\\\" fill=\\\"#30120b\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"130\\\" y=\\\"120\\\" fill=\\\"#662819\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"140\\\" y=\\\"120\\\" fill=\\\"#30120b\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"150\\\" y=\\\"120\\\" fill=\\\"#b7a31c\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"170\\\" y=\\\"120\\\" fill=\\\"#30120b\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"180\\\" y=\\\"120\\\" fill=\\\"#662819\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"190\\\" y=\\\"120\\\" fill=\\\"#30120b\\\"/>'\\r\\n                '<rect width=\\\"120\\\" height=\\\"10\\\" x=\\\"200\\\" y=\\\"120\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"110\\\" height=\\\"10\\\" x=\\\"0\\\" y=\\\"130\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"110\\\" y=\\\"130\\\" fill=\\\"#30120b\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"120\\\" y=\\\"130\\\" fill=\\\"#662819\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"130\\\" y=\\\"130\\\" fill=\\\"#722f1c\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"150\\\" y=\\\"130\\\" fill=\\\"#30120b\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"170\\\" y=\\\"130\\\" fill=\\\"#722f1c\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"190\\\" y=\\\"130\\\" fill=\\\"#662819\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"200\\\" y=\\\"130\\\" fill=\\\"#30120b\\\"/>'\\r\\n                '<rect width=\\\"110\\\" height=\\\"10\\\" x=\\\"210\\\" y=\\\"130\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"100\\\" height=\\\"10\\\" x=\\\"0\\\" y=\\\"140\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"100\\\" y=\\\"140\\\" fill=\\\"#30120b\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"110\\\" y=\\\"140\\\" fill=\\\"#662819\\\"/>'\\r\\n                '<rect width=\\\"80\\\" height=\\\"10\\\" x=\\\"120\\\" y=\\\"140\\\" fill=\\\"#722f1c\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"200\\\" y=\\\"140\\\" fill=\\\"#662819\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"210\\\" y=\\\"140\\\" fill=\\\"#30120b\\\"/>'\\r\\n                '<rect width=\\\"100\\\" height=\\\"10\\\" x=\\\"220\\\" y=\\\"140\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"90\\\" height=\\\"10\\\" x=\\\"0\\\" y=\\\"150\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"90\\\" y=\\\"150\\\" fill=\\\"#30120b\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"100\\\" y=\\\"150\\\" fill=\\\"#662819\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"110\\\" y=\\\"150\\\" fill=\\\"#722f1c\\\"/>'\\r\\n                '<rect width=\\\"60\\\" height=\\\"10\\\" x=\\\"130\\\" y=\\\"150\\\" fill=\\\"#ffffff\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"190\\\" y=\\\"150\\\" fill=\\\"#722f1c\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"210\\\" y=\\\"150\\\" fill=\\\"#662819\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"220\\\" y=\\\"150\\\" fill=\\\"#30120b\\\"/>'\\r\\n                '<rect width=\\\"90\\\" height=\\\"10\\\" x=\\\"230\\\" y=\\\"150\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"90\\\" height=\\\"10\\\" x=\\\"0\\\" y=\\\"160\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"90\\\" y=\\\"160\\\" fill=\\\"#30120b\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"100\\\" y=\\\"160\\\" fill=\\\"#662819\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"110\\\" y=\\\"160\\\" fill=\\\"#722f1c\\\"/>'\\r\\n                '<rect width=\\\"60\\\" height=\\\"10\\\" x=\\\"130\\\" y=\\\"160\\\" fill=\\\"#ffffff\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"190\\\" y=\\\"160\\\" fill=\\\"#722f1c\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"210\\\" y=\\\"160\\\" fill=\\\"#662819\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"220\\\" y=\\\"160\\\" fill=\\\"#30120b\\\"/>'\\r\\n                '<rect width=\\\"90\\\" height=\\\"10\\\" x=\\\"230\\\" y=\\\"160\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"80\\\" height=\\\"10\\\" x=\\\"0\\\" y=\\\"170\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"80\\\" y=\\\"170\\\" fill=\\\"#30120b\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"90\\\" y=\\\"170\\\" fill=\\\"#662819\\\"/>'\\r\\n                '<rect width=\\\"30\\\" height=\\\"10\\\" x=\\\"100\\\" y=\\\"170\\\" fill=\\\"#722f1c\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"130\\\" y=\\\"170\\\" fill=\\\"#ffffff\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"150\\\" y=\\\"170\\\" fill=\\\"#722f1c\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"170\\\" y=\\\"170\\\" fill=\\\"#ffffff\\\"/>'\\r\\n                '<rect width=\\\"30\\\" height=\\\"10\\\" x=\\\"190\\\" y=\\\"170\\\" fill=\\\"#722f1c\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"220\\\" y=\\\"170\\\" fill=\\\"#662819\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"230\\\" y=\\\"170\\\" fill=\\\"#30120b\\\"/>'\\r\\n                '<rect width=\\\"80\\\" height=\\\"10\\\" x=\\\"240\\\" y=\\\"170\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"80\\\" height=\\\"10\\\" x=\\\"0\\\" y=\\\"180\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"80\\\" y=\\\"180\\\" fill=\\\"#30120b\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"90\\\" y=\\\"180\\\" fill=\\\"#662819\\\"/>'\\r\\n                '<rect width=\\\"70\\\" height=\\\"10\\\" x=\\\"100\\\" y=\\\"180\\\" fill=\\\"#722f1c\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"170\\\" y=\\\"180\\\" fill=\\\"#ffffff\\\"/>'\\r\\n                '<rect width=\\\"30\\\" height=\\\"10\\\" x=\\\"190\\\" y=\\\"180\\\" fill=\\\"#722f1c\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"220\\\" y=\\\"180\\\" fill=\\\"#662819\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"230\\\" y=\\\"180\\\" fill=\\\"#30120b\\\"/>'\\r\\n                '<rect width=\\\"80\\\" height=\\\"10\\\" x=\\\"240\\\" y=\\\"180\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"80\\\" height=\\\"10\\\" x=\\\"0\\\" y=\\\"190\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"80\\\" y=\\\"190\\\" fill=\\\"#30120b\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"90\\\" y=\\\"190\\\" fill=\\\"#662819\\\"/>'\\r\\n                '<rect width=\\\"50\\\" height=\\\"10\\\" x=\\\"100\\\" y=\\\"190\\\" fill=\\\"#722f1c\\\"/>'\\r\\n                '<rect width=\\\"40\\\" height=\\\"10\\\" x=\\\"150\\\" y=\\\"190\\\" fill=\\\"#ffffff\\\"/>'\\r\\n                '<rect width=\\\"30\\\" height=\\\"10\\\" x=\\\"190\\\" y=\\\"190\\\" fill=\\\"#722f1c\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"220\\\" y=\\\"190\\\" fill=\\\"#662819\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"230\\\" y=\\\"190\\\" fill=\\\"#30120b\\\"/>'\\r\\n                '<rect width=\\\"80\\\" height=\\\"10\\\" x=\\\"240\\\" y=\\\"190\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"80\\\" height=\\\"10\\\" x=\\\"0\\\" y=\\\"200\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"80\\\" y=\\\"200\\\" fill=\\\"#30120b\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"90\\\" y=\\\"200\\\" fill=\\\"#662819\\\"/>'\\r\\n                '<rect width=\\\"50\\\" height=\\\"10\\\" x=\\\"100\\\" y=\\\"200\\\" fill=\\\"#722f1c\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"150\\\" y=\\\"200\\\" fill=\\\"#ffffff\\\"/>'\\r\\n                '<rect width=\\\"50\\\" height=\\\"10\\\" x=\\\"170\\\" y=\\\"200\\\" fill=\\\"#722f1c\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"220\\\" y=\\\"200\\\" fill=\\\"#662819\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"230\\\" y=\\\"200\\\" fill=\\\"#30120b\\\"/>'\\r\\n                '<rect width=\\\"80\\\" height=\\\"10\\\" x=\\\"240\\\" y=\\\"200\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"80\\\" height=\\\"10\\\" x=\\\"0\\\" y=\\\"210\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"80\\\" y=\\\"210\\\" fill=\\\"#30120b\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"90\\\" y=\\\"210\\\" fill=\\\"#662819\\\"/>'\\r\\n                '<rect width=\\\"100\\\" height=\\\"10\\\" x=\\\"110\\\" y=\\\"210\\\" fill=\\\"#722f1c\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"210\\\" y=\\\"210\\\" fill=\\\"#662819\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"230\\\" y=\\\"210\\\" fill=\\\"#30120b\\\"/>'\\r\\n                '<rect width=\\\"80\\\" height=\\\"10\\\" x=\\\"240\\\" y=\\\"210\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"90\\\" height=\\\"10\\\" x=\\\"0\\\" y=\\\"220\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"90\\\" y=\\\"220\\\" fill=\\\"#30120b\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"100\\\" y=\\\"220\\\" fill=\\\"#662819\\\"/>'\\r\\n                '<rect width=\\\"30\\\" height=\\\"10\\\" x=\\\"120\\\" y=\\\"220\\\" fill=\\\"#722f1c\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"150\\\" y=\\\"220\\\" fill=\\\"#ffffff\\\"/>'\\r\\n                '<rect width=\\\"30\\\" height=\\\"10\\\" x=\\\"170\\\" y=\\\"220\\\" fill=\\\"#722f1c\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"200\\\" y=\\\"220\\\" fill=\\\"#662819\\\"/>'\\r\\n                '<rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"220\\\" y=\\\"220\\\" fill=\\\"#30120b\\\"/>'\\r\\n                '<rect width=\\\"90\\\" height=\\\"10\\\" x=\\\"230\\\" y=\\\"220\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"100\\\" height=\\\"10\\\" x=\\\"0\\\" y=\\\"230\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"100\\\" y=\\\"230\\\" fill=\\\"#30120b\\\"/>'\\r\\n                '<rect width=\\\"80\\\" height=\\\"10\\\" x=\\\"120\\\" y=\\\"230\\\" fill=\\\"#662819\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"200\\\" y=\\\"230\\\" fill=\\\"#30120b\\\"/>'\\r\\n                '<rect width=\\\"100\\\" height=\\\"10\\\" x=\\\"220\\\" y=\\\"230\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"100\\\" height=\\\"10\\\" x=\\\"0\\\" y=\\\"240\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"100\\\" y=\\\"240\\\" fill=\\\"#426c4a\\\"/>'\\r\\n                '<rect width=\\\"80\\\" height=\\\"10\\\" x=\\\"120\\\" y=\\\"240\\\" fill=\\\"#30120b\\\"/>'\\r\\n                '<rect width=\\\"20\\\" height=\\\"10\\\" x=\\\"200\\\" y=\\\"240\\\" fill=\\\"#426c4a\\\"/>'\\r\\n                '<rect width=\\\"100\\\" height=\\\"10\\\" x=\\\"220\\\" y=\\\"240\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"110\\\" height=\\\"10\\\" x=\\\"0\\\" y=\\\"250\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"100\\\" height=\\\"10\\\" x=\\\"110\\\" y=\\\"250\\\" fill=\\\"#426c4a\\\"/>'\\r\\n                '<rect width=\\\"110\\\" height=\\\"10\\\" x=\\\"210\\\" y=\\\"250\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"320\\\" height=\\\"10\\\" x=\\\"0\\\" y=\\\"260\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"320\\\" height=\\\"10\\\" x=\\\"0\\\" y=\\\"270\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"320\\\" height=\\\"10\\\" x=\\\"0\\\" y=\\\"280\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"320\\\" height=\\\"10\\\" x=\\\"0\\\" y=\\\"290\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"320\\\" height=\\\"10\\\" x=\\\"0\\\" y=\\\"300\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '<rect width=\\\"320\\\" height=\\\"10\\\" x=\\\"0\\\" y=\\\"310\\\" fill=\\\"#49b652\\\"/>'\\r\\n                '</svg>'\\r\\n        );\\r\\n\\r\\n        return  string(Base64.encode(imgBytes));\\r\\n    }\\r\\n\\r\\n    function getBlindBoxSVGBytes(uint256 num) external pure returns(string memory){\\r\\n        bytes memory imgBytes = abi.encodePacked(\\r\\n            '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 192 192\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" fill=\\\"none\\\">'\\r\\n            '<style>.f{font-family:Montserrat,arial,sans-serif;dominant-baseline:middle;text-anchor:middle}</style>'\\r\\n            '<path d=\\\"M96.864 172.667L33.356 136v56.833L96.863 246v-73.333zM160.4 135.997l-63.51 36.667v73.333l63.51-76.54v-33.46z\\\"/>'\\r\\n            '<path d=\\\"M96.86 99.33L33.352 62.665v73.333l63.508 36.667V99.33z\\\" fill=\\\"#E8C684\\\"/>'\\r\\n            '<path d=\\\"M160.395 62.67L96.887 99.335v73.333l63.508-36.667V62.67z\\\" fill=\\\"#D7A94F\\\"/>'\\r\\n            '<path d=\\\"M160.395 62.667L96.887 26 33.378 62.667l63.509 36.666 63.508-36.666z\\\" fill=\\\"#EEDEA6\\\"/>'\\r\\n            '<text class=\\\"f\\\" x=\\\"118\\\" y=\\\"7\\\" transform=\\\"rotate(30.5) skewX(-30)\\\" fill=\\\"#98601e\\\" font-size=\\\"16\\\" font-weight=\\\"400\\\">',\\r\\n            num.toString(),\\r\\n            \\\"</text>\\\"\\r\\n            '<text class=\\\"f\\\" x=\\\"68\\\" y=\\\"82\\\" transform=\\\"skewY(26.83) scale(.92718 1.07853)\\\" fill=\\\"rgba(255,255,255,.5)\\\" font-size=\\\"42\\\">?</text>'\\r\\n            \\\"</svg>\\\"\\r\\n        );\\r\\n\\r\\n        return  string(Base64.encode(imgBytes));\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/GreenBTCType.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nstruct GreenBTCInfo {\\r\\n    uint128     height;\\r\\n    uint128     ARTCount;\\r\\n    address     minter;             // Minter of the respective NFT\\r\\n    uint8       greenType;          // High nibble:  ART type: 0, CART, 1, Arkreen ART; Low nibble: mint type, 1: system, 2: user;  \\r\\n    string      blockTime;          // For NFT display\\r\\n    string      energyStr;          // For NTT display\\r\\n}\\r\\n\\r\\nstruct NFTStatus {\\r\\n    address     opener;\\r\\n    uint64      blockHeight;\\r\\n    bool        open;\\r\\n    bool        reveal;\\r\\n    bool        won;\\r\\n    uint256     seed;\\r\\n}\\r\\n\\r\\nstruct OpenInfo {\\r\\n    uint64      tokenID;            // The token ID of the NFT opened\\r\\n    uint64      openHeight;         // The height of the block opening the NFT\\r\\n}\\r\\n\\r\\nstruct Sig {\\r\\n    uint8       v;\\r\\n    bytes32     r;\\r\\n    bytes32     s;              \\r\\n}\\r\\n\\r\\nstruct PayInfo {\\r\\n    address     token;\\r\\n    uint256     amount;\\r\\n}\\r\\n\\r\\nstruct BadgeInfo {\\r\\n    address     beneficiary;\\r\\n    string      offsetEntityID;\\r\\n    string      beneficiaryID;\\r\\n    string      offsetMessage;\\r\\n}\"\r\n    },\r\n    \"contracts/libraries/FormattedStrings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nlibrary FormattedStrings {\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n            Base on OpenZeppelin `toString` method from `String` library\\r\\n     */\\r\\n    function toFormattedString(uint256 value) internal pure returns (string memory) {\\r\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\r\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        uint256 pos;\\r\\n        uint256 comas = digits / 3;\\r\\n        digits = digits + (digits % 3 == 0 ? comas - 1 : comas);\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            if (pos == 3) {\\r\\n                buffer[digits] = \\\",\\\";\\r\\n                pos = 0;\\r\\n            } else {\\r\\n                buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n                value /= 10;\\r\\n                pos++;\\r\\n            }\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"getBlindBoxSVGBytes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"height\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"ARTCount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"greenType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"blockTime\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"energyStr\",\"type\":\"string\"}],\"internalType\":\"struct GreenBTCInfo\",\"name\":\"gbtc\",\"type\":\"tuple\"}],\"name\":\"getCertificateSVGBytes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGreenTreeSVGBytes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "GreenBTCImage", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "0", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}