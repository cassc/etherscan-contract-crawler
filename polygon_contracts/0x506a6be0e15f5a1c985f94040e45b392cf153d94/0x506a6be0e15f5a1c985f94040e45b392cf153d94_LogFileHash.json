{"SourceCode": "// File: @openzeppelin/contracts/utils/math/Math.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    enum Rounding {\r\n        Down, // Toward negative infinity\r\n        Up, // Toward infinity\r\n        Zero // Toward zero\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a == 0 ? 0 : (a - 1) / b + 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\r\n     * with further edits by Uniswap Labs also under MIT license.\r\n     */\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n            // variables such that product = prod1 * 2^256 + prod0.\r\n            uint256 prod0; // Least significant 256 bits of the product\r\n            uint256 prod1; // Most significant 256 bits of the product\r\n            assembly {\r\n                let mm := mulmod(x, y, not(0))\r\n                prod0 := mul(x, y)\r\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n            }\r\n\r\n            // Handle non-overflow cases, 256 by 256 division.\r\n            if (prod1 == 0) {\r\n                return prod0 / denominator;\r\n            }\r\n\r\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n            require(denominator > prod1);\r\n\r\n            ///////////////////////////////////////////////\r\n            // 512 by 256 division.\r\n            ///////////////////////////////////////////////\r\n\r\n            // Make division exact by subtracting the remainder from [prod1 prod0].\r\n            uint256 remainder;\r\n            assembly {\r\n                // Compute remainder using mulmod.\r\n                remainder := mulmod(x, y, denominator)\r\n\r\n                // Subtract 256 bit number from 512 bit number.\r\n                prod1 := sub(prod1, gt(remainder, prod0))\r\n                prod0 := sub(prod0, remainder)\r\n            }\r\n\r\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\r\n            // See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\r\n            uint256 twos = denominator & (~denominator + 1);\r\n            assembly {\r\n                // Divide denominator by twos.\r\n                denominator := div(denominator, twos)\r\n\r\n                // Divide [prod1 prod0] by twos.\r\n                prod0 := div(prod0, twos)\r\n\r\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n\r\n            // Shift in bits from prod1 into prod0.\r\n            prod0 |= prod1 * twos;\r\n\r\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n            // four bits. That is, denominator * inv = 1 mod 2^4.\r\n            uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\r\n            // in modular arithmetic, doubling the correct bits in each step.\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inverse;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n     */\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator,\r\n        Rounding rounding\r\n    ) internal pure returns (uint256) {\r\n        uint256 result = mulDiv(x, y, denominator);\r\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\r\n     *\r\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n     */\r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n        //\r\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\r\n        //\r\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\r\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\r\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\r\n        //\r\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\r\n        uint256 result = 1 << (log2(a) >> 1);\r\n\r\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n        // into the expected uint128 result.\r\n        unchecked {\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            return min(result, a / result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates sqrt(a), following the selected rounding direction.\r\n     */\r\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = sqrt(a);\r\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 128;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 64;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 32;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 16;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                value >>= 8;\r\n                result += 8;\r\n            }\r\n            if (value >> 4 > 0) {\r\n                value >>= 4;\r\n                result += 4;\r\n            }\r\n            if (value >> 2 > 0) {\r\n                value >>= 2;\r\n                result += 2;\r\n            }\r\n            if (value >> 1 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log2(value);\r\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >= 10**64) {\r\n                value /= 10**64;\r\n                result += 64;\r\n            }\r\n            if (value >= 10**32) {\r\n                value /= 10**32;\r\n                result += 32;\r\n            }\r\n            if (value >= 10**16) {\r\n                value /= 10**16;\r\n                result += 16;\r\n            }\r\n            if (value >= 10**8) {\r\n                value /= 10**8;\r\n                result += 8;\r\n            }\r\n            if (value >= 10**4) {\r\n                value /= 10**4;\r\n                result += 4;\r\n            }\r\n            if (value >= 10**2) {\r\n                value /= 10**2;\r\n                result += 2;\r\n            }\r\n            if (value >= 10**1) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log10(value);\r\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     *\r\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\r\n     */\r\n    function log256(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 16;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 8;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 4;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 2;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log256(value);\r\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            uint256 length = Math.log10(value) + 1;\r\n            string memory buffer = new string(length);\r\n            uint256 ptr;\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                ptr := add(buffer, add(32, length))\r\n            }\r\n            while (true) {\r\n                ptr--;\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\r\n                }\r\n                value /= 10;\r\n                if (value == 0) break;\r\n            }\r\n            return buffer;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            return toHexString(value, Math.log256(value) + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/staking/utils/ArrayUtils.sol\r\n\r\n\r\npragma solidity 0.8.16;\r\n\r\nlibrary ArrayUtils {\r\n\r\n    function includeAddress(address[] memory array, address element) pure internal returns(bool) {\r\n        for ( uint i = 0; i < array.length; i++ ) {\r\n            if (element == array[i]) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function includeString(string[] memory array, string memory element) pure internal returns(bool) {\r\n        for ( uint i = 0; i < array.length; i++ ) {\r\n            if (isSameString(element, array[i])) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function isSameString(string memory a, string memory b) pure internal returns (bool) {\r\n        if(bytes(a).length != bytes(b).length) {\r\n            return false;\r\n        } else {\r\n            return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\r\n        }\r\n    }\r\n\r\n    function reverse(address[] memory elements) pure internal returns(address[] memory) {\r\n        address[] memory outs = new address[](elements.length);\r\n\r\n        uint count = 0;\r\n        for ( uint i = elements.length - 1; i >= 0; i-- ) {\r\n            outs[count] = elements[i];\r\n            count++;\r\n\r\n            if (i == 0) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return outs;\r\n    }\r\n\r\n    function trim(address[] memory elements, uint length) pure internal returns(address[] memory) {\r\n        address[] memory outs = new address[](length);\r\n\r\n        for ( uint i = 0; i < length; i++ ) {\r\n            outs[i] = elements[i];\r\n        }\r\n\r\n        return outs;\r\n    }\r\n\r\n}\r\n// File: contracts/staking/interfaces/IRNG.sol\r\n\r\n\r\npragma solidity 0.8.16;\r\n\r\nstruct RequestStatus {\r\n    uint day; // target day\r\n    uint requestDay; // day when request was made\r\n    uint256 paid; // amount paid in link\r\n    uint256 max; // the maximum possible number\r\n    bool fulfilled; // whether the request has been successfully fulfilled\r\n    uint256 randomWords; // final computed random number\r\n}\r\n\r\n\r\ninterface IRNG {\r\n    /// @notice Returns whether random number has been generated for \"day\"\r\n    /// @param day Day to check\r\n    /// @return True if a random number has been generated for \"day\"\r\n    function hadGeneratedNumber(uint day) external view returns (bool);\r\n\r\n    /// @notice Returns random number generated for \"day\"\r\n    /// @param day Day to check\r\n    /// @return randNumber The random number generated for \"day\" (will fail if number has not been generated)\r\n    function getRandomNumber(uint day) external view returns (uint256 randNumber);\r\n\r\n    /// @notice Returns number of days before request with no callback is abandoned\r\n    /// @return Number of days before request with no callback is abandoned\r\n    function abandonDaysAfterRequesting() external pure returns (uint);\r\n\r\n    /// @notice Request random number linked to key \"day\", where 0 <= randomNumber < maxNumber\r\n    /// @param day The key to request, which is a 0-based day index (can only request 1 number per day)\r\n    /// @param maxNumber Specifies the range of requested number (0 <= randomNumber < maxNumber)\r\n    /// @return requestId The unique request id received from Chainlink when making the request\r\n    function requestRandomWords(uint day, uint256 maxNumber) external returns (uint256 requestId);\r\n    \r\n    /**\r\n     * @dev Emitted when `requester` is granted permission to use RNG generator\r\n     */\r\n    event RequesterGranted(address requester);\r\n\r\n    /**\r\n     * @dev Emitted when request for `numWords` pieces of data is sent to RNG source.  `requestId` is unique ID\r\n     *      assigned by the RNG source.\r\n     */\r\n    event RequestSent(uint256 requestId, uint32 numWords);\r\n\r\n    /**\r\n     * @dev Emitted when `requestId` is fulfilled.  `randomWords` is unmodded output from RNG source, and `payment` is\r\n            amount of Link token that was used in the request.\r\n     */\r\n    event RequestFulfilled(uint256 requestId, uint256[] randomWords, uint256 payment);\r\n\r\n    /**\r\n     * @dev Emitted when Link token `balance` is low (warning to refill!)\r\n     */\r\n    event LinkTokenBalanceTooLow(uint256 balance);\r\n\r\n    /**\r\n     * @dev Emitted when Link token `balance` is withdrawn to owner\r\n     */\r\n    event LinkTokenWithdrawn(uint256 balance);\r\n}\r\n\r\n// File: contracts/staking/interfaces/ILogFileHash.sol\r\n\r\n\r\npragma solidity 0.8.16;\r\n\r\n/**\r\n * @notice Winner decision status for the day\r\n *      Decided: Winner validator HAD been decided for the day\r\n *      NoWinnerForFutureDate: Winner validator HAD NOT YET been decided for a future date\r\n *      NoMajority: Winner validator CAN NOT been decided because no file hash voting power reached more than half\r\n *      NoSubmissionToday: Winner validator HAD NOT YET been decided until a submission of the next day\r\n *      Pending: Winner validator HAD NOT YET been decided until the random number generation\r\n *      Abandoned: Winner validator CAN NOT been decided because of the random number generation failure/delay\r\n * @dev Immutable status: Decided, NoMajority, Abandoned\r\n *       Mutable status: NoWinnerForFutureDate, NoSubmissionToday, Pending\r\n */\r\nenum WinnerStatus {\r\n    Uninitialized,\r\n    Decided,\r\n    NoWinnerForFutureDate,\r\n    NoMajority,\r\n    NoSubmissionToday,\r\n    Pending,\r\n    Abandoned\r\n}\r\n\r\n/**\r\n * @notice Interface of the LogFileHash.\r\n */\r\ninterface ILogFileHash {\r\n    struct ValidationRecord {\r\n        uint day;\r\n        uint fileNum;\r\n        address validator;\r\n        bytes hash;\r\n        string key;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the latest valid file number and hash.\r\n     */\r\n    function getLatestValidFile() external view returns (uint, bytes memory);\r\n\r\n    /**\r\n     * @notice Returns the file hash for a `fileNum`.\r\n     */\r\n    function getValidFileHash(uint fileNum) external view returns(bytes memory);\r\n\r\n    /**\r\n     * @notice Returns the number of participant validators for a `day`.\r\n     */\r\n    function getParticipatedValidators(uint day) external view returns(address[] memory);\r\n\r\n    /**\r\n     * @notice Returns the \"majority\" validators in the participant for a `day`.\r\n     */\r\n    function getMajorityValidators(uint day) external view returns(address[] memory);\r\n\r\n    /**\r\n     * @notice Returns the winner validator and/or winner status in the participant for a `day`.\r\n     */\r\n    function getWinner(uint day) external view returns(address, WinnerStatus);\r\n\r\n    /**\r\n     * @notice Returns the majority file hash, validators, participant validators and majority voting power for a `day`.\r\n     */\r\n    function getMajority(uint day) external view returns (bytes memory, address[] memory, address[] memory, uint256);\r\n\r\n    /**\r\n     * @notice Submit current and next file hash as a `validator`.\r\n     * @dev `validator` can submit a file with `submitter` role account.\r\n     *\r\n     * Emits a {HashSubmitted} event.\r\n     */\r\n    function submit(address validator, uint currentFileNum, bytes calldata currentHash, bytes calldata nextHash) external;\r\n\r\n    /// Events\r\n\r\n    /**\r\n     * @notice Emitted when the file `hash` of the `fileNum` file is submitted by a `sender` for a `validator`.\r\n     * @dev `today` is days since launch date.\r\n     * @dev `key` is a combination of accepted file number and the file hash joined with '-'. example: '1-0123456789abcdef'.\r\n     */\r\n    event HashSubmitted(uint indexed today, uint indexed fileNum, address indexed validator, address sender, bytes hash, string key);\r\n\r\n    /**\r\n     * @notice Emitted when `sender` updated winner's cache of `day` to (`winner`, `status`).\r\n     */\r\n    event WinnerUpdated(address indexed sender, uint day, address indexed winner, WinnerStatus indexed status);\r\n}\r\n\r\n// File: contracts/staking/interfaces/IValidator.sol\r\n\r\n\r\npragma solidity 0.8.16;\r\n\r\ninterface IValidator {\r\n    struct Validator {\r\n        address id;\r\n        bytes data;\r\n        uint commission;\r\n        bool enabled;\r\n    }\r\n\r\n    struct CommissionChangeRequest {\r\n        uint startDate;\r\n        uint targetCommission;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns current commission rate of a `validator`.\r\n     */\r\n    function getCommissionRate(address validator) external view returns(uint);\r\n\r\n    /**\r\n     * @notice Returns commission rate of a `validator` on the `day`.\r\n     */\r\n    function getCommissionRateOfDay(uint day, address validator) external view returns(uint);\r\n\r\n    /**\r\n     * @notice Returns commission rate allowance range.\r\n     */\r\n    function getCommissionRateRange() external view returns(uint, uint);\r\n\r\n    /**\r\n     * @notice Returns a commission rate schedule of a `validator`.\r\n     */\r\n    function getScheduledCommissionRate(address validator) external view returns (uint, uint);\r\n\r\n    /**\r\n     * @notice Returns whether a `validator` is valid on the system or not.\r\n     */\r\n    function checkIfExist(address validator) external view returns(bool);\r\n\r\n    /**\r\n     * @notice Returns the submitter of a `validator`.\r\n     */\r\n    function getSubmitter(address validator) external view returns(address);\r\n\r\n    /**\r\n     * @notice Returns the commission receiver of a `validator`.\r\n     */\r\n    function getCommissionReceiver(address validator) external view returns(address);\r\n\r\n    /**\r\n     * @notice Returns the state of a `validator`.\r\n     */\r\n    function getValidator(address validator) external view returns(Validator memory);\r\n\r\n    /**\r\n     * @notice Returns all validators address.\r\n     */\r\n    function getAllValidators() external view returns(address[] memory);\r\n\r\n    /// For owner\r\n\r\n    /**\r\n     * @notice Add a `validator` with manifest as `detail` and initial commission rate as `commissionRate`.\r\n     */\r\n    function addValidator(address validator, bytes calldata detail, uint commissionRate) external;\r\n\r\n    /**\r\n     * @notice Enable a `validator`.\r\n     */\r\n    function enableValidator(address validator) external;\r\n\r\n    /**\r\n     * @notice Disable a `validator`.\r\n     */\r\n    function disableValidator(address validator) external;\r\n\r\n    /**\r\n     * @notice Sets the commission rate allowance range from `min` to `max`.\r\n     */\r\n    function setCommissionRateRange(uint min, uint max) external;\r\n\r\n    /// For validators\r\n\r\n    /**\r\n     * @notice Updates manifest to `detailHash`.\r\n     */\r\n    function updateDetail(bytes calldata detailHash) external;\r\n\r\n    /**\r\n     * @notice Updates commission rate to `commissionRate`.\r\n     */\r\n    function updateCommissionRate(uint commissionRate) external;\r\n\r\n    /**\r\n     * @notice Updates manifest to `detailHash` and commission rate to `commissionRate`.\r\n     */\r\n    function updateValidator(uint commissionRate, bytes calldata detailHash) external;\r\n\r\n    /**\r\n     * @notice Sets a new `submitter`.\r\n     */\r\n    function setSubmitter(address submitter) external;\r\n\r\n    /**\r\n     * @notice Sets a new commission receiver as `receiver`.\r\n     */\r\n    function setCommissionReceiver(address receiver) external;\r\n\r\n    /// For cache\r\n\r\n    /**\r\n     * @notice Updates the cache of commission rate for a `validator` on the `day`\r\n     * @dev Basically this function should be called by the LogFileHash contract, but whoever can call it.\r\n     */\r\n    function updateCommissionRateCache(uint day, address validator) external;\r\n\r\n    /// Events\r\n\r\n    /**\r\n     * @notice Emitted when the `validator` added.\r\n     */\r\n    event ValidatorAdded(address indexed validator);\r\n\r\n    /**\r\n     * @notice Emitted when the `validator` disabled.\r\n     */\r\n    event ValidatorDisabled(address indexed validator);\r\n\r\n    /**\r\n     * @notice Emitted when the `validator` enabled.\r\n     */\r\n    event ValidatorEnabled(address indexed validator);\r\n\r\n    /**\r\n     * @notice Emitted when the `validator` updated with the manifest as `detailHash`.\r\n     */\r\n    event DetailUpdated(address indexed validator, bytes detailHash);\r\n\r\n    /**\r\n     * @notice Emitted when the `validator` commission rate scheduled to the new `rate` on the `availableAt` day.\r\n     */\r\n    event CommissionRateUpdated(address indexed validator, uint availableAt, uint rate);\r\n\r\n    /**\r\n     * @notice Emitted when the commission rate allowance updated with the range from `min` to `max`.\r\n     */\r\n    event CommissionRateRangeUpdated(uint min, uint max);\r\n\r\n    /**\r\n     * @notice Emitted when `sender` changed submitter to `submitter`.\r\n     */\r\n    event SubmitterChanged(address indexed sender, address indexed submitter);\r\n\r\n    /**\r\n     * @notice Emitted when `sender` changed submitter to `receiver`.\r\n     */\r\n    event ComissionReceiverChanged(address indexed sender, address indexed receiver);\r\n\r\n    /**\r\n     * @notice Emitted when `sender` updated `validator`'s commission rate cache of `day` to `rate`.\r\n     */\r\n    event CachedComissionRateChanged(address indexed sender, address indexed validator, uint day, uint rate);\r\n}\r\n\r\n// File: contracts/staking/fixed_interfaces/IFixedStaking.sol\r\n\r\n\r\npragma solidity 0.8.16;\r\n\r\n/**\r\n * @dev Fixed interface of the Staking.\r\n * @dev DO NOT EDIT THIS INTERFACE\r\n */\r\ninterface IFixedStaking {\r\n    function calcUnlockable(address user) external view returns(uint256);\r\n    function lockAndDelegate(uint256 amount, address validator) external;\r\n    function unlock(uint256 amount) external;\r\n}\r\n\r\n// File: contracts/staking/interfaces/IStaking.sol\r\n\r\n\r\npragma solidity 0.8.16;\r\n\r\n\r\ninterface IStaking is IFixedStaking {\r\n    struct Selection {\r\n        uint day;\r\n        address validator;\r\n    }\r\n\r\n    struct TotalValidationPower {\r\n        uint day;\r\n        uint256 power;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns a validator which a `user` delegated to at the `day`.\r\n     * @dev `day` is days since launch date.\r\n     */\r\n    function getValidatorOfDay(uint day, address user) external view returns(address);\r\n\r\n    /**\r\n     * @notice Returns total delegated tokens to a `validator` at the `day`.\r\n     * @dev `day` is days since launch date.\r\n     */\r\n    function getTotalDelegatedTo(uint day, address validator) external view returns(uint256);\r\n\r\n    /**\r\n     * @notice Returns current locked token amount of a `user`.\r\n     */\r\n    function calcLock(address user) external view returns(uint256);\r\n\r\n    /**\r\n     * @notice Returns current unlockable token amount of a `user`.\r\n     */\r\n    function calcUnlockable(address user) external view returns(uint256);\r\n\r\n    /**\r\n     * @notice Returns current validator which a `user` delegates to.\r\n     */\r\n    function getValidator(address user) external view returns(address);\r\n\r\n    /**\r\n     * @notice Returns whether a `user` can change validator now or not.\r\n     */\r\n    function canChangeValidator(address user) external view returns(bool);\r\n\r\n    /**\r\n     * @notice Updates internal cache of total delegated amount.\r\n     * @dev This function is designed to be idempotent.\r\n     * @dev Basically this function should be called by the LogFileHash contract, but whoever can call it.\r\n     */\r\n    function updateTotalDelegated(uint day, address validator) external;\r\n\r\n    /**\r\n     * @notice Move `amount` of tokens from the caller to the Vault contract and/or change validator selection.\r\n     * @dev Requires `amount` of ERC20-approval from the caller to the Vault contract.\r\n     */\r\n    function lockAndDelegate(uint256 amount, address validator) external;\r\n\r\n    /**\r\n     * @notice Move `amount` of tokens from the Vault contract to the caller.\r\n     */\r\n    function unlock(uint256 amount) external;\r\n\r\n    /// Events\r\n\r\n    /**\r\n     * @notice Emitted when `amount` of tokens locked by the `user` and changed validator selection from `oldValidator` to the `newValidator`.\r\n     */\r\n    event LockedAndDelegated(address indexed user, address indexed newValidator, address indexed oldValidator, uint256 amount);\r\n\r\n    /**\r\n     * @notice Emitted when `amount` of tokens unlocked by the `user` with delegated `validator` to at the time.\r\n     */\r\n    event Unlocked(address indexed user, address indexed validator, uint256 amount);\r\n\r\n    /**\r\n     * @notice Emitted when internal cache of total delegated `amount` updated\r\n     */\r\n    event TotalDelegatedUpdated(address indexed sender, address indexed validator, uint day, uint256 amount);\r\n}\r\n\r\n// File: contracts/staking/interfaces/ITime.sol\r\n\r\n\r\npragma solidity 0.8.16;\r\n\r\ninterface ITime {\r\n    /// @notice Returns current \"day\"\r\n    /// @dev Launch Date = 0 Day\r\n    /// @return randNumber Current day index\r\n    function getCurrentTimeIndex() external view returns(uint);\r\n}\r\n\r\n// File: contracts/staking/LogFileHash.sol\r\n\r\n\r\npragma solidity 0.8.16;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract LogFileHash is ILogFileHash, ReentrancyGuard {\r\n    IStaking private immutable _stakingContract;\r\n    IValidator private immutable _validatorContract;\r\n    ITime private immutable _timeContract;\r\n    IRNG private immutable _rng;\r\n\r\n    mapping(uint => ValidationRecord[]) _validationRecords;\r\n    mapping(uint => bool) _validationSubmitted;\r\n    mapping(uint => bool) _hadRequestedOrSkipped;\r\n    mapping(uint => address[]) _participatedValidators;\r\n    mapping(uint => address[]) _majorityValidators;\r\n    bytes[] _validFileHash;\r\n\r\n    struct Winner {\r\n        address winner;\r\n        WinnerStatus status;\r\n    }\r\n    mapping(uint => Winner) _decidedWinner;\r\n    mapping(uint => bool) _isDecidedWinner;\r\n\r\n    /**\r\n     * @notice Constructor\r\n     *\r\n     * @param timeContract_         Address of Time contract.\r\n     * @param stakingContract_      Address of StakingContract.\r\n     * @param validatorContract_    Address of ValidatorContract.\r\n     * @param rng_                  Address of RundomNumberGenerator contract.\r\n     * @param preValidatedHash      Valid file hashes before launched.\r\n     */\r\n    constructor(\r\n        address timeContract_,\r\n        address stakingContract_,\r\n        address validatorContract_,\r\n        address rng_,\r\n        bytes[] memory preValidatedHash\r\n    ) {\r\n        require(timeContract_ != address(0x0), \"LogFileHash: TimeContract is zero address\");\r\n        require(stakingContract_ != address(0x0), \"LogFileHash: StakingContract is zero address\");\r\n        require(validatorContract_ != address(0x0), \"LogFileHash: ValidatorContract is zero address\");\r\n        require(rng_ != address(0x0), \"LogFileHash: RundomNumberGenerator is zero address\");\r\n\r\n        _timeContract = ITime(timeContract_);\r\n        _stakingContract = IStaking(stakingContract_);\r\n        _validatorContract = IValidator(validatorContract_);\r\n        _rng = IRNG(rng_);\r\n\r\n        _validFileHash = preValidatedHash;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the latest valid file number and hash.\r\n     */\r\n    function getLatestValidFile() override external view returns (uint, bytes memory) {\r\n        require( _validFileHash.length > 0, \"LogFileHash: No valid file yet\" );\r\n\r\n        uint currentIndex = _validFileHash.length - 1;\r\n        return (currentIndex, _validFileHash[currentIndex]);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the file hash for a `fileNum`.\r\n     */\r\n    function getValidFileHash(uint fileNum) override external view returns(bytes memory) {\r\n        return _validFileHash[fileNum];\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the number of participant validators for a `day`.\r\n     */\r\n    function getParticipatedValidators(uint day) override external view returns(address[] memory) {\r\n        return _participatedValidators[day];\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the \"majority\" validators in the participant for a `day`.\r\n     */\r\n    function getMajorityValidators(uint day) override external view returns(address[] memory) {\r\n        return _majorityValidators[day];\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the winner validator, if one exists, and WinnerStatus for a `day`.\r\n     */\r\n    function getWinner(uint day) public view returns(address, WinnerStatus) {\r\n        if ( _isDecidedWinner[day] ) {\r\n            return (_decidedWinner[day].winner, _decidedWinner[day].status);\r\n        }\r\n\r\n        // NoWinnerForFutureDate: for the future date\r\n        if ( day >= _timeContract.getCurrentTimeIndex() ) {\r\n            return (address(0), WinnerStatus.NoWinnerForFutureDate);\r\n        }\r\n\r\n        // Pending winner: no submission yet for the day\r\n        if ( !_hadRequestedOrSkipped[day] ) {\r\n            return (address(0), WinnerStatus.NoSubmissionToday);\r\n        }\r\n\r\n        // No winner: in case of no majority hash\r\n        if ( _majorityValidators[day].length == 0 ) {\r\n            return (address(0), WinnerStatus.NoMajority);\r\n        }\r\n\r\n        // Pending winner: rng processing\r\n        if ( !_rng.hadGeneratedNumber(day) ) {\r\n            uint today = _timeContract.getCurrentTimeIndex();\r\n            if ( today - day > _rng.abandonDaysAfterRequesting() ) {\r\n                // 30 days after random number requested\r\n                return (address(0), WinnerStatus.Abandoned);\r\n            } else {\r\n                return (address(0), WinnerStatus.Pending);\r\n            }\r\n        }\r\n\r\n        // Select winner: from majority hash\r\n        uint256 pseudoRand = _rng.getRandomNumber(day);\r\n        return (_getWinnerFromMajority(day, pseudoRand), WinnerStatus.Decided);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns a immutable winner validator's address from the majority validators for a `day` according to the generated random number `pseudoRand`.\r\n     * @dev Winning probability is proportional to the delegated tokens amount.\r\n     */\r\n    function _getWinnerFromMajority(uint day, uint256 pseudoRand) internal view returns (address) {\r\n        address winner = _majorityValidators[day][0];\r\n        uint pointer = 0;\r\n        for ( uint i = 0; i < _majorityValidators[day].length; i++ ) {\r\n            uint delegatedAmount = _stakingContract.getTotalDelegatedTo(day, _majorityValidators[day][i]);\r\n\r\n            if ( pointer + delegatedAmount > pseudoRand && pointer <= pseudoRand ) {\r\n                winner = _majorityValidators[day][i];\r\n            }\r\n            pointer += delegatedAmount;\r\n        }\r\n        return winner;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the majority file hash, validators, participant validators and majority voting power for a `day`.\r\n     */\r\n    function getMajority(uint day) public view returns (bytes memory, address[] memory, address[] memory, uint256) {\r\n        if ( !_validationSubmitted[day] ) {\r\n            bytes memory empty;\r\n            address[] memory emptyArray;\r\n            return (empty, emptyArray, emptyArray, 0);\r\n        }\r\n\r\n        address[][] memory validators;\r\n        uint[] memory validatorCounters;\r\n        address[] memory registered;\r\n        bytes[] memory hashes;\r\n        (validators, validatorCounters, registered, hashes) = _calcValidatorMaps(_validationRecords[day]);\r\n\r\n        // check max power\r\n        uint256 maxPower = 0;\r\n        uint maxKey = 0;\r\n        (maxPower, maxKey) = _getMajorPower(day, validators);\r\n\r\n        // in case of no majority hash\r\n        if ( maxPower == 0 ) {\r\n            bytes memory empty;\r\n            address[] memory emptyArray;\r\n            return (empty, emptyArray, registered, 0);\r\n        } else {\r\n            address[] memory majorities = ArrayUtils.reverse(ArrayUtils.trim(validators[maxKey], validatorCounters[maxKey]));\r\n            return (hashes[maxKey], majorities, registered, maxPower);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Returns participant validators, numbers of validates for each file hash group, participant validators and file hashes for a day.\r\n     */\r\n    function _calcValidatorMaps(ValidationRecord[] memory records)\r\n        internal pure returns(address[][] memory, uint[] memory, address[] memory, bytes[] memory) {\r\n        string[] memory keys = new string[](records.length);\r\n        bytes[] memory hashes = new bytes[](records.length);\r\n\r\n        // save unique keys\r\n        uint count = 0;\r\n        for ( uint i = 0; i < records.length; i++ ) {\r\n            if ( !ArrayUtils.includeString(keys, records[i].key) ) {\r\n                keys[count] = records[i].key;\r\n                hashes[count] = records[i].hash;\r\n                count++;\r\n            }\r\n        }\r\n\r\n        // save unique validators of each keys\r\n        address[][] memory validators = new address[][](keys.length);\r\n        for ( uint i = 0; i < keys.length; i++ ) {\r\n            validators[i] = new address[](records.length);\r\n        }\r\n\r\n        address[] memory registeredValidators = new address[](records.length);\r\n        uint[] memory validatorCounters = new uint[](keys.length);\r\n        uint registeredSize = 0;\r\n\r\n        for ( uint i = records.length - 1; ; i-- ) {\r\n            for ( uint j = 0; j < keys.length; j++ ) {\r\n                if ( ArrayUtils.isSameString(keys[j], records[i].key) && !ArrayUtils.includeAddress(registeredValidators, records[i].validator)) {\r\n                    validators[j][validatorCounters[j]] = records[i].validator;\r\n                    validatorCounters[j]++;\r\n                    registeredValidators[registeredSize] = records[i].validator;\r\n                    registeredSize++;\r\n                }\r\n            }\r\n\r\n            if ( i == 0 ) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        address[] memory registered = ArrayUtils.reverse(ArrayUtils.trim(registeredValidators, registeredSize));\r\n\r\n        return(validators, validatorCounters, registered, hashes);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the total voting power of majority file hash and the index of the majority file hash group from `validators` grouped by hash for a `day`.\r\n     */\r\n    function _getMajorPower(uint day, address[][] memory validators) view internal returns(uint256, uint256) {\r\n        uint256 total = 0;\r\n        uint256 maxPower = 0;\r\n        uint256 maxKey = 0;\r\n        for ( uint i = 0; i < validators.length; i++ ) {\r\n            uint256 power = 0;\r\n            for ( uint j = 0; j < validators[i].length; j++ ) {\r\n                if ( validators[i][j] != address(0x0) ) {\r\n                    power += _stakingContract.getTotalDelegatedTo(day, validators[i][j]);\r\n                }\r\n            }\r\n\r\n            total += power;\r\n\r\n            if ( power > maxPower ) {\r\n                maxPower = power;\r\n                maxKey = i;\r\n            }\r\n        }\r\n\r\n        // Is there more than a majority?\r\n        if ( maxPower * 2 > total ) {\r\n            return (maxPower, maxKey);\r\n        } else {\r\n            return (0, 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Submit current and next file hash as a `validator`.\r\n     * @dev currentHash and nextHash can be empty when no latest file exists.\r\n     * @dev `validator` can submit a file with `submitter` role account.\r\n     *\r\n     * @notice Internally, this does two things:\r\n     *         1. Record a file hash as a \"Validation\".\r\n     *         2. Request a random seed for the validator selection in case of the first submitter in a day.\r\n     *\r\n     * Emits a {HashSubmitted} event.\r\n     */\r\n    function submit(address validator, uint currentFileNum, bytes calldata currentHash, bytes calldata nextHash) override external nonReentrant {\r\n        require(_validatorContract.checkIfExist(validator), \"LogFileHash: Validator is not in the whitelist\");\r\n        require(_validatorContract.getSubmitter(validator) == msg.sender, \"LogFileHash: Sender is allowed as a submitter\");\r\n\r\n        // Check specified file number matches the contract has or not\r\n        require(_validFileHash.length == currentFileNum, \"LogFileHash: Index is invalid\");\r\n        uint today = _timeContract.getCurrentTimeIndex();\r\n\r\n        bytes memory hash = currentHash;\r\n        uint majorityValidationPower;\r\n        uint evalDay;\r\n\r\n        if ( today > 0 ) {\r\n            // Target day starts with yesterday\r\n            for ( evalDay = today - 1; ; evalDay-- ) {\r\n                // Already requested on the target day?\r\n                if ( _hadRequestedOrSkipped[evalDay] ) break;\r\n\r\n                // Skip if no majority validation selection\r\n                bytes memory majorityFileHash;\r\n                address[] memory majorityValidators;\r\n                address[] memory participatedValidators;\r\n\r\n                (majorityFileHash, majorityValidators, participatedValidators, majorityValidationPower) = getMajority(evalDay);\r\n                if ( majorityValidators.length > 0 ) {\r\n                    if ( majorityFileHash.length > 0 ) {\r\n                        // if previous majority is null hash, keep submitting for the current file\r\n                        _validFileHash.push(majorityFileHash);\r\n                        hash = nextHash;\r\n                    }\r\n\r\n                    _rng.requestRandomWords(evalDay, majorityValidationPower);\r\n\r\n                    _majorityValidators[evalDay] = majorityValidators;\r\n                    _participatedValidators[evalDay] = participatedValidators;\r\n\r\n                    updateWinner(today);\r\n                }\r\n\r\n                _hadRequestedOrSkipped[evalDay] = true;\r\n\r\n                if ( evalDay == 0 ) break;\r\n            }\r\n        }\r\n\r\n        string memory key = string.concat(Strings.toString(_validFileHash.length), \"-\", _bytesToHex(hash));\r\n        _validationRecords[today].push(ValidationRecord(today, _validFileHash.length, validator, hash, key));\r\n        _validationSubmitted[today] = true;\r\n\r\n        if ( today > 0 ) {\r\n            // Ensure previous date total delegated power\r\n            _stakingContract.updateTotalDelegated(today - 1, validator);\r\n            // Update validator commission rate cache to prepare for today's submission\r\n            _validatorContract.updateCommissionRateCache(today, validator);\r\n        }\r\n\r\n        emit HashSubmitted(today, _validFileHash.length, validator, msg.sender, hash, key);\r\n    }\r\n\r\n    /**\r\n     * @notice Store the winner and status which had been decided for a day from day:0 to `today`.\r\n     */\r\n    function updateWinner(uint today) internal {\r\n        for ( uint day = 0; day < today; day++ ) {\r\n            if ( !_isDecidedWinner[day] && _hadRequestedOrSkipped[day] ) {\r\n                address winner;\r\n                WinnerStatus status;\r\n                (winner, status) = getWinner(day);\r\n                if ( status != WinnerStatus.Pending && status != WinnerStatus.Abandoned ) {\r\n                    _decidedWinner[day] = Winner(winner, status);\r\n                    _isDecidedWinner[day] = true;\r\n\r\n                    emit  WinnerUpdated(msg.sender, day, winner, status);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _bytesToHex(bytes memory buffer) internal pure returns (string memory) {\r\n        // Fixed buffer size for hexadecimal convertion\r\n        bytes memory converted = new bytes(buffer.length * 2);\r\n\r\n        bytes memory _base = \"0123456789abcdef\";\r\n\r\n        for ( uint256 i = 0; i < buffer.length; i++ ) {\r\n            converted[i * 2] = _base[uint8(buffer[i]) / _base.length];\r\n            converted[i * 2 + 1] = _base[uint8(buffer[i]) % _base.length];\r\n        }\r\n\r\n        return string(abi.encodePacked(converted));\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"timeContract_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakingContract_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"validatorContract_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rng_\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"preValidatedHash\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"today\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fileNum\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"HashSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum WinnerStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"WinnerUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getLatestValidFile\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"getMajority\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"getMajorityValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"getParticipatedValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fileNum\",\"type\":\"uint256\"}],\"name\":\"getValidFileHash\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"getWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum WinnerStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentFileNum\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"currentHash\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"nextHash\",\"type\":\"bytes\"}],\"name\":\"submit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LogFileHash", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ef5fd24125a10861443a54428f40f92c8ee0481f138632e03c4a8359cbd49c23"}