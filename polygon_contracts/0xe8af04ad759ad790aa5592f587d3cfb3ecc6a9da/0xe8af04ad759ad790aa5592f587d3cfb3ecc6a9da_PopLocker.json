{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/core/dao/PopLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n// Docgen-SOLC: 0.6.0\\n\\nimport \\\"openzeppelin-v3/token/ERC20/IERC20.sol\\\";\\nimport \\\"openzeppelin-v3/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"openzeppelin-v3/math/Math.sol\\\";\\nimport \\\"openzeppelin-v3/access/Ownable.sol\\\";\\nimport \\\"openzeppelin-v3/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../libraries/BoringMath.sol\\\";\\nimport \\\"../interfaces/IRewardsEscrow.sol\\\";\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n// POP locked in this contract will be entitled to voting rights for popcorn.network\\n// Based on CVX Locking contract for https://www.convexfinance.com/\\n// Based on EPS Staking contract for http://ellipsis.finance/\\n// Based on SNX MultiRewards by iamdefinitelyahuman - https://github.com/iamdefinitelyahuman/multi-rewards\\n\\ncontract PopLocker is ReentrancyGuard, Ownable {\\n  using BoringMath for uint256;\\n  using BoringMath224 for uint224;\\n  using BoringMath112 for uint112;\\n  using BoringMath32 for uint32;\\n  using SafeERC20 for IERC20;\\n\\n  /* ========== STATE VARIABLES ========== */\\n\\n  struct Reward {\\n    bool useBoost;\\n    uint40 periodFinish;\\n    uint208 rewardRate;\\n    uint40 lastUpdateTime;\\n    uint208 rewardPerTokenStored;\\n  }\\n  struct Balances {\\n    uint112 locked;\\n    uint112 boosted;\\n    uint32 nextUnlockIndex;\\n  }\\n  struct LockedBalance {\\n    uint112 amount;\\n    uint112 boosted;\\n    uint32 unlockTime;\\n  }\\n  struct EarnedData {\\n    address token;\\n    uint256 amount;\\n  }\\n  struct Epoch {\\n    uint224 supply; //epoch boosted supply\\n    uint32 date; //epoch start date\\n  }\\n\\n  //token constants\\n  IERC20 public stakingToken;\\n  IRewardsEscrow public rewardsEscrow;\\n\\n  //rewards\\n  address[] public rewardTokens;\\n  mapping(address => Reward) public rewardData;\\n\\n  // duration in seconds for rewards to be held in escrow\\n  uint256 public escrowDuration;\\n\\n  // Duration that rewards are streamed over\\n  uint256 public constant rewardsDuration = 7 days;\\n\\n  // Duration of lock/earned penalty period\\n  uint256 public constant lockDuration = rewardsDuration * 12;\\n\\n  // reward token -> distributor -> is approved to add rewards\\n  mapping(address => mapping(address => bool)) public rewardDistributors;\\n\\n  // user -> reward token -> amount\\n  mapping(address => mapping(address => uint256)) public userRewardPerTokenPaid;\\n  mapping(address => mapping(address => uint256)) public rewards;\\n\\n  //supplies and epochs\\n  uint256 public lockedSupply;\\n  uint256 public boostedSupply;\\n  Epoch[] public epochs;\\n\\n  //mappings for balance data\\n  mapping(address => Balances) public balances;\\n  mapping(address => LockedBalance[]) public userLocks;\\n\\n  //boost\\n  address public boostPayment;\\n  uint256 public maximumBoostPayment = 0;\\n  uint256 public boostRate = 10000;\\n  uint256 public nextMaximumBoostPayment = 0;\\n  uint256 public nextBoostRate = 10000;\\n  uint256 public constant denominator = 10000;\\n\\n  //management\\n  uint256 public kickRewardPerEpoch = 100;\\n  uint256 public kickRewardEpochDelay = 4;\\n\\n  //shutdown\\n  bool public isShutdown = false;\\n\\n  //erc20-like interface\\n  string private _name;\\n  string private _symbol;\\n  uint8 private immutable _decimals;\\n\\n  /* ========== CONSTRUCTOR ========== */\\n\\n  constructor(IERC20 _stakingToken, IRewardsEscrow _rewardsEscrow) public Ownable() {\\n    _name = \\\"Vote Locked POP Token\\\";\\n    _symbol = \\\"vlPOP\\\";\\n    _decimals = 18;\\n\\n    stakingToken = _stakingToken;\\n    rewardsEscrow = _rewardsEscrow;\\n    escrowDuration = 365 days;\\n\\n    uint256 currentEpoch = block.timestamp.div(rewardsDuration).mul(rewardsDuration);\\n    epochs.push(Epoch({ supply: 0, date: uint32(currentEpoch) }));\\n  }\\n\\n  function decimals() public view returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  function name() public view returns (string memory) {\\n    return _name;\\n  }\\n\\n  function symbol() public view returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /* ========== ADMIN CONFIGURATION ========== */\\n\\n  // Add a new reward token to be distributed to stakers\\n  function addReward(\\n    address _rewardsToken,\\n    address _distributor,\\n    bool _useBoost\\n  ) public onlyOwner {\\n    require(rewardData[_rewardsToken].lastUpdateTime == 0);\\n    rewardTokens.push(_rewardsToken);\\n    rewardData[_rewardsToken].lastUpdateTime = uint40(block.timestamp);\\n    rewardData[_rewardsToken].periodFinish = uint40(block.timestamp);\\n    rewardData[_rewardsToken].useBoost = _useBoost;\\n    rewardDistributors[_rewardsToken][_distributor] = true;\\n  }\\n\\n  // Modify approval for an address to call notifyRewardAmount\\n  function approveRewardDistributor(\\n    address _rewardsToken,\\n    address _distributor,\\n    bool _approved\\n  ) external onlyOwner {\\n    require(rewardData[_rewardsToken].lastUpdateTime > 0, \\\"rewards token does not exist\\\");\\n    rewardDistributors[_rewardsToken][_distributor] = _approved;\\n  }\\n\\n  //set boost parameters\\n  function setBoost(\\n    uint256 _max,\\n    uint256 _rate,\\n    address _receivingAddress\\n  ) external onlyOwner {\\n    require(_max < 1500, \\\"over max payment\\\"); //max 15%\\n    require(_rate < 30000, \\\"over max rate\\\"); //max 3x\\n    require(_receivingAddress != address(0), \\\"invalid address\\\"); //must point somewhere valid\\n    nextMaximumBoostPayment = _max;\\n    nextBoostRate = _rate;\\n    boostPayment = _receivingAddress;\\n  }\\n\\n  function setEscrowDuration(uint256 duration) external onlyOwner {\\n    emit EscrowDurationUpdated(escrowDuration, duration);\\n    escrowDuration = duration;\\n  }\\n\\n  //set kick incentive\\n  function setKickIncentive(uint256 _rate, uint256 _delay) external onlyOwner {\\n    require(_rate <= 500, \\\"over max rate\\\"); //max 5% per epoch\\n    require(_delay >= 2, \\\"min delay\\\"); //minimum 2 epochs of grace\\n    kickRewardPerEpoch = _rate;\\n    kickRewardEpochDelay = _delay;\\n  }\\n\\n  //shutdown the contract.\\n  function shutdown() external onlyOwner {\\n    isShutdown = true;\\n  }\\n\\n  //set approvals for rewards escrow\\n  function setApprovals() external {\\n    IERC20(stakingToken).safeApprove(address(rewardsEscrow), 0);\\n    IERC20(stakingToken).safeApprove(address(rewardsEscrow), uint256(-1));\\n  }\\n\\n  /* ========== VIEWS ========== */\\n\\n  function _rewardPerToken(address _rewardsToken) internal view returns (uint256) {\\n    if (boostedSupply == 0) {\\n      return rewardData[_rewardsToken].rewardPerTokenStored;\\n    }\\n    return\\n      uint256(rewardData[_rewardsToken].rewardPerTokenStored).add(\\n        _lastTimeRewardApplicable(rewardData[_rewardsToken].periodFinish)\\n          .sub(rewardData[_rewardsToken].lastUpdateTime)\\n          .mul(rewardData[_rewardsToken].rewardRate)\\n          .mul(1e18)\\n          .div(rewardData[_rewardsToken].useBoost ? boostedSupply : lockedSupply)\\n      );\\n  }\\n\\n  function _earned(\\n    address _user,\\n    address _rewardsToken,\\n    uint256 _balance\\n  ) internal view returns (uint256) {\\n    return\\n      _balance.mul(_rewardPerToken(_rewardsToken).sub(userRewardPerTokenPaid[_user][_rewardsToken])).div(1e18).add(\\n        rewards[_user][_rewardsToken]\\n      );\\n  }\\n\\n  function _lastTimeRewardApplicable(uint256 _finishTime) internal view returns (uint256) {\\n    return Math.min(block.timestamp, _finishTime);\\n  }\\n\\n  function lastTimeRewardApplicable(address _rewardsToken) public view returns (uint256) {\\n    return _lastTimeRewardApplicable(rewardData[_rewardsToken].periodFinish);\\n  }\\n\\n  function rewardPerToken(address _rewardsToken) external view returns (uint256) {\\n    return _rewardPerToken(_rewardsToken);\\n  }\\n\\n  function getRewardForDuration(address _rewardsToken) external view returns (uint256) {\\n    return uint256(rewardData[_rewardsToken].rewardRate).mul(rewardsDuration);\\n  }\\n\\n  // Address and claimable amount of all reward tokens for the given account\\n  function claimableRewards(address _account) external view returns (EarnedData[] memory userRewards) {\\n    userRewards = new EarnedData[](rewardTokens.length);\\n    Balances storage userBalance = balances[_account];\\n    uint256 boostedBal = userBalance.boosted;\\n    for (uint256 i = 0; i < userRewards.length; i++) {\\n      address token = rewardTokens[i];\\n      userRewards[i].token = token;\\n      userRewards[i].amount = _earned(_account, token, rewardData[token].useBoost ? boostedBal : userBalance.locked);\\n    }\\n    return userRewards;\\n  }\\n\\n  // Total BOOSTED balance of an account, including unlocked but not withdrawn tokens\\n  function rewardWeightOf(address _user) external view returns (uint256 amount) {\\n    return balances[_user].boosted;\\n  }\\n\\n  // total token balance of an account, including unlocked but not withdrawn tokens\\n  function lockedBalanceOf(address _user) external view returns (uint256 amount) {\\n    return balances[_user].locked;\\n  }\\n\\n  //BOOSTED balance of an account which only includes properly locked tokens as of the most recent eligible epoch\\n  function balanceOf(address _user) external view returns (uint256 amount) {\\n    LockedBalance[] storage locks = userLocks[_user];\\n    Balances storage userBalance = balances[_user];\\n    uint256 nextUnlockIndex = userBalance.nextUnlockIndex;\\n\\n    //start with current boosted amount\\n    amount = balances[_user].boosted;\\n\\n    uint256 locksLength = locks.length;\\n    //remove old records only (will be better gas-wise than adding up)\\n    for (uint256 i = nextUnlockIndex; i < locksLength; i++) {\\n      if (locks[i].unlockTime <= block.timestamp) {\\n        amount = amount.sub(locks[i].boosted);\\n      } else {\\n        //stop now as no futher checks are needed\\n        break;\\n      }\\n    }\\n\\n    //also remove amount in the current epoch\\n    uint256 currentEpoch = block.timestamp.div(rewardsDuration).mul(rewardsDuration);\\n    if (locksLength > 0 && uint256(locks[locksLength - 1].unlockTime).sub(lockDuration) == currentEpoch) {\\n      amount = amount.sub(locks[locksLength - 1].boosted);\\n    }\\n\\n    return amount;\\n  }\\n\\n  //BOOSTED balance of an account which only includes properly locked tokens at the given epoch\\n  function balanceAtEpochOf(uint256 _epoch, address _user) external view returns (uint256 amount) {\\n    LockedBalance[] storage locks = userLocks[_user];\\n\\n    //get timestamp of given epoch index\\n    uint256 epochTime = epochs[_epoch].date;\\n    //get timestamp of first non-inclusive epoch\\n    uint256 cutoffEpoch = epochTime.sub(lockDuration);\\n\\n    //current epoch is not counted\\n    uint256 currentEpoch = block.timestamp.div(rewardsDuration).mul(rewardsDuration);\\n\\n    //need to add up since the range could be in the middle somewhere\\n    //traverse inversely to make more current queries more gas efficient\\n    for (uint256 i = locks.length - 1; i + 1 != 0; i--) {\\n      uint256 lockEpoch = uint256(locks[i].unlockTime).sub(lockDuration);\\n      //lock epoch must be less or equal to the epoch we're basing from.\\n      //also not include the current epoch\\n      if (lockEpoch <= epochTime && lockEpoch < currentEpoch) {\\n        if (lockEpoch > cutoffEpoch) {\\n          amount = amount.add(locks[i].boosted);\\n        } else {\\n          //stop now as no futher checks matter\\n          break;\\n        }\\n      }\\n    }\\n\\n    return amount;\\n  }\\n\\n  //supply of all properly locked BOOSTED balances at most recent eligible epoch\\n  function totalSupply() external view returns (uint256 supply) {\\n    uint256 currentEpoch = block.timestamp.div(rewardsDuration).mul(rewardsDuration);\\n    uint256 cutoffEpoch = currentEpoch.sub(lockDuration);\\n    uint256 epochindex = epochs.length;\\n\\n    //do not include current epoch's supply\\n    if (uint256(epochs[epochindex - 1].date) == currentEpoch) {\\n      epochindex--;\\n    }\\n\\n    //traverse inversely to make more current queries more gas efficient\\n    for (uint256 i = epochindex - 1; i + 1 != 0; i--) {\\n      Epoch storage e = epochs[i];\\n      if (uint256(e.date) <= cutoffEpoch) {\\n        break;\\n      }\\n      supply = supply.add(e.supply);\\n    }\\n\\n    return supply;\\n  }\\n\\n  //supply of all properly locked BOOSTED balances at the given epoch\\n  function totalSupplyAtEpoch(uint256 _epoch) external view returns (uint256 supply) {\\n    uint256 epochStart = uint256(epochs[_epoch].date).div(rewardsDuration).mul(rewardsDuration);\\n    uint256 cutoffEpoch = epochStart.sub(lockDuration);\\n    uint256 currentEpoch = block.timestamp.div(rewardsDuration).mul(rewardsDuration);\\n\\n    //do not include current epoch's supply\\n    if (uint256(epochs[_epoch].date) == currentEpoch) {\\n      _epoch--;\\n    }\\n\\n    //traverse inversely to make more current queries more gas efficient\\n    for (uint256 i = _epoch; i + 1 != 0; i--) {\\n      Epoch storage e = epochs[i];\\n      if (uint256(e.date) <= cutoffEpoch) {\\n        break;\\n      }\\n      supply = supply.add(epochs[i].supply);\\n    }\\n\\n    return supply;\\n  }\\n\\n  //find an epoch index based on timestamp\\n  function findEpochId(uint256 _time) external view returns (uint256 epoch) {\\n    uint256 max = epochs.length - 1;\\n    uint256 min = 0;\\n\\n    //convert to start point\\n    _time = _time.div(rewardsDuration).mul(rewardsDuration);\\n\\n    for (uint256 i = 0; i < 128; i++) {\\n      if (min >= max) break;\\n\\n      uint256 mid = (min + max + 1) / 2;\\n      uint256 midEpochBlock = epochs[mid].date;\\n      if (midEpochBlock == _time) {\\n        //found\\n        return mid;\\n      } else if (midEpochBlock < _time) {\\n        min = mid;\\n      } else {\\n        max = mid - 1;\\n      }\\n    }\\n    return min;\\n  }\\n\\n  // Information on a user's locked balances\\n  function lockedBalances(address _user)\\n    external\\n    view\\n    returns (\\n      uint256 total,\\n      uint256 unlockable,\\n      uint256 locked,\\n      LockedBalance[] memory lockData\\n    )\\n  {\\n    LockedBalance[] storage locks = userLocks[_user];\\n    Balances storage userBalance = balances[_user];\\n    uint256 nextUnlockIndex = userBalance.nextUnlockIndex;\\n    uint256 idx;\\n    for (uint256 i = nextUnlockIndex; i < locks.length; i++) {\\n      if (locks[i].unlockTime > block.timestamp) {\\n        if (idx == 0) {\\n          lockData = new LockedBalance[](locks.length - i);\\n        }\\n        lockData[idx] = locks[i];\\n        idx++;\\n        locked = locked.add(locks[i].amount);\\n      } else {\\n        unlockable = unlockable.add(locks[i].amount);\\n      }\\n    }\\n    return (userBalance.locked, unlockable, locked, lockData);\\n  }\\n\\n  //number of epochs\\n  function epochCount() external view returns (uint256) {\\n    return epochs.length;\\n  }\\n\\n  /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n  function checkpointEpoch() external {\\n    _checkpointEpoch();\\n  }\\n\\n  //insert a new epoch if needed. fill in any gaps\\n  function _checkpointEpoch() internal {\\n    uint256 currentEpoch = block.timestamp.div(rewardsDuration).mul(rewardsDuration);\\n    uint256 epochindex = epochs.length;\\n\\n    //first epoch add in constructor, no need to check 0 length\\n\\n    //check to add\\n    if (epochs[epochindex - 1].date < currentEpoch) {\\n      //fill any epoch gaps\\n      while (epochs[epochs.length - 1].date != currentEpoch) {\\n        uint256 nextEpochDate = uint256(epochs[epochs.length - 1].date).add(rewardsDuration);\\n        epochs.push(Epoch({ supply: 0, date: uint32(nextEpochDate) }));\\n      }\\n\\n      //update boost parameters on a new epoch\\n      if (boostRate != nextBoostRate) {\\n        boostRate = nextBoostRate;\\n      }\\n      if (maximumBoostPayment != nextMaximumBoostPayment) {\\n        maximumBoostPayment = nextMaximumBoostPayment;\\n      }\\n    }\\n  }\\n\\n  // Locked tokens cannot be withdrawn for lockDuration and are eligible to receive stakingReward rewards\\n  function lock(\\n    address _account,\\n    uint256 _amount,\\n    uint256 _spendRatio\\n  ) external nonReentrant {\\n    //pull tokens\\n    stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n    //lock\\n    _lock(_account, _amount, _spendRatio);\\n  }\\n\\n  //lock tokens\\n  function _lock(\\n    address _account,\\n    uint256 _amount,\\n    uint256 _spendRatio\\n  ) internal updateReward(_account) {\\n    require(_amount > 0, \\\"Cannot stake 0\\\");\\n    require(_spendRatio <= maximumBoostPayment, \\\"over max spend\\\");\\n    require(!isShutdown, \\\"shutdown\\\");\\n\\n    Balances storage bal = balances[_account];\\n\\n    //must try check pointing epoch first\\n    _checkpointEpoch();\\n\\n    //calc lock and boosted amount\\n    uint256 spendAmount = _amount.mul(_spendRatio).div(denominator);\\n    uint256 boostRatio = boostRate.mul(_spendRatio).div(maximumBoostPayment == 0 ? 1 : maximumBoostPayment);\\n    uint112 lockAmount = _amount.sub(spendAmount).to112();\\n    uint112 boostedAmount = _amount.add(_amount.mul(boostRatio).div(denominator)).to112();\\n\\n    //add user balances\\n    bal.locked = bal.locked.add(lockAmount);\\n    bal.boosted = bal.boosted.add(boostedAmount);\\n\\n    //add to total supplies\\n    lockedSupply = lockedSupply.add(lockAmount);\\n    boostedSupply = boostedSupply.add(boostedAmount);\\n\\n    //add user lock records or add to current\\n    uint256 currentEpoch = block.timestamp.div(rewardsDuration).mul(rewardsDuration);\\n    uint256 unlockTime = currentEpoch.add(lockDuration);\\n    uint256 idx = userLocks[_account].length;\\n    if (idx == 0 || userLocks[_account][idx - 1].unlockTime < unlockTime) {\\n      userLocks[_account].push(\\n        LockedBalance({ amount: lockAmount, boosted: boostedAmount, unlockTime: uint32(unlockTime) })\\n      );\\n    } else {\\n      LockedBalance storage userL = userLocks[_account][idx - 1];\\n      userL.amount = userL.amount.add(lockAmount);\\n      userL.boosted = userL.boosted.add(boostedAmount);\\n    }\\n\\n    //update epoch supply, epoch checkpointed above so safe to add to latest\\n    Epoch storage e = epochs[epochs.length - 1];\\n    e.supply = e.supply.add(uint224(boostedAmount));\\n\\n    //send boost payment\\n    if (spendAmount > 0) {\\n      stakingToken.safeTransfer(boostPayment, spendAmount);\\n    }\\n\\n    emit Staked(_account, _amount, lockAmount, boostedAmount);\\n  }\\n\\n  // Withdraw all currently locked tokens where the unlock time has passed\\n  function _processExpiredLocks(\\n    address _account,\\n    bool _relock,\\n    uint256 _spendRatio,\\n    address _withdrawTo,\\n    address _rewardAddress,\\n    uint256 _checkDelay\\n  ) internal updateReward(_account) {\\n    LockedBalance[] storage locks = userLocks[_account];\\n    Balances storage userBalance = balances[_account];\\n    uint112 locked;\\n    uint112 boostedAmount;\\n    uint256 length = locks.length;\\n    uint256 reward = 0;\\n\\n    if (isShutdown || locks[length - 1].unlockTime <= block.timestamp.sub(_checkDelay)) {\\n      //if time is beyond last lock, can just bundle everything together\\n      locked = userBalance.locked;\\n      boostedAmount = userBalance.boosted;\\n\\n      //dont delete, just set next index\\n      userBalance.nextUnlockIndex = length.to32();\\n\\n      //check for kick reward\\n      //this wont have the exact reward rate that you would get if looped through\\n      //but this section is supposed to be for quick and easy low gas processing of all locks\\n      //we'll assume that if the reward was good enough someone would have processed at an earlier epoch\\n      if (_checkDelay > 0) {\\n        reward = _getDelayAdjustedReward(_checkDelay, locks[length - 1]);\\n      }\\n    } else {\\n      //use a processed index(nextUnlockIndex) to not loop as much\\n      //deleting does not change array length\\n      uint32 nextUnlockIndex = userBalance.nextUnlockIndex;\\n      for (uint256 i = nextUnlockIndex; i < length; i++) {\\n        //unlock time must be less or equal to time\\n        if (locks[i].unlockTime > block.timestamp.sub(_checkDelay)) break;\\n\\n        //add to cumulative amounts\\n        locked = locked.add(locks[i].amount);\\n        boostedAmount = boostedAmount.add(locks[i].boosted);\\n\\n        //check for kick reward\\n        //each epoch over due increases reward\\n        if (_checkDelay > 0) {\\n          reward = reward.add(_getDelayAdjustedReward(_checkDelay, locks[i]));\\n        }\\n        //set next unlock index\\n        nextUnlockIndex++;\\n      }\\n      //update next unlock index\\n      userBalance.nextUnlockIndex = nextUnlockIndex;\\n    }\\n    require(locked > 0, \\\"no exp locks\\\");\\n\\n    //update user balances and total supplies\\n    userBalance.locked = userBalance.locked.sub(locked);\\n    userBalance.boosted = userBalance.boosted.sub(boostedAmount);\\n    lockedSupply = lockedSupply.sub(locked);\\n    boostedSupply = boostedSupply.sub(boostedAmount);\\n\\n    //send process incentive\\n    if (reward > 0) {\\n      //if theres a reward(kicked), it will always be a withdraw only\\n\\n      //reduce return amount by the kick reward\\n      locked = locked.sub(reward.to112());\\n\\n      //transfer reward\\n      stakingToken.safeTransfer(_rewardAddress, reward);\\n\\n      emit KickReward(_rewardAddress, _account, reward);\\n    }\\n\\n    //relock or return to user\\n    if (_relock) {\\n      _lock(_withdrawTo, locked, _spendRatio);\\n      emit Relocked(_account, locked);\\n    } else {\\n      stakingToken.safeTransfer(_withdrawTo, locked);\\n      emit Withdrawn(_account, locked);\\n    }\\n  }\\n\\n  function _getDelayAdjustedReward(uint256 _checkDelay, LockedBalance storage lockedBalance)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 currentEpoch = block.timestamp.sub(_checkDelay).div(rewardsDuration).mul(rewardsDuration);\\n    uint256 epochsover = currentEpoch.sub(uint256(lockedBalance.unlockTime)).div(rewardsDuration);\\n    uint256 rRate = Math.min(kickRewardPerEpoch.mul(epochsover + 1), denominator);\\n    return uint256(lockedBalance.amount).mul(rRate).div(denominator);\\n  }\\n\\n  // Withdraw/relock all currently locked tokens where the unlock time has passed\\n  function processExpiredLocks(\\n    bool _relock,\\n    uint256 _spendRatio,\\n    address _withdrawTo\\n  ) external nonReentrant {\\n    _processExpiredLocks(msg.sender, _relock, _spendRatio, _withdrawTo, msg.sender, 0);\\n  }\\n\\n  // Withdraw/relock all currently locked tokens where the unlock time has passed\\n  function processExpiredLocks(bool _relock) external nonReentrant {\\n    _processExpiredLocks(msg.sender, _relock, 0, msg.sender, msg.sender, 0);\\n  }\\n\\n  function kickExpiredLocks(address _account) external nonReentrant {\\n    //allow kick after grace period of 'kickRewardEpochDelay'\\n    _processExpiredLocks(_account, false, 0, _account, msg.sender, rewardsDuration.mul(kickRewardEpochDelay));\\n  }\\n\\n  // Claim all pending rewards\\n  function getReward(address _account) public nonReentrant updateReward(_account) {\\n    for (uint256 i; i < rewardTokens.length; i++) {\\n      address _rewardsToken = rewardTokens[i];\\n      uint256 reward = rewards[_account][_rewardsToken];\\n      if (reward > 0) {\\n        rewards[_account][_rewardsToken] = 0;\\n        uint256 payout = reward.div(uint256(10));\\n        uint256 escrowed = payout.mul(uint256(9));\\n        IERC20(_rewardsToken).safeTransfer(_account, payout);\\n        IRewardsEscrow(rewardsEscrow).lock(_account, escrowed, escrowDuration);\\n        emit RewardPaid(_account, _rewardsToken, reward);\\n      }\\n    }\\n  }\\n\\n  /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n  function _notifyReward(address _rewardsToken, uint256 _reward) internal {\\n    Reward storage rdata = rewardData[_rewardsToken];\\n\\n    if (block.timestamp >= rdata.periodFinish) {\\n      rdata.rewardRate = _reward.div(rewardsDuration).to208();\\n    } else {\\n      uint256 remaining = uint256(rdata.periodFinish).sub(block.timestamp);\\n      uint256 leftover = remaining.mul(rdata.rewardRate);\\n      rdata.rewardRate = _reward.add(leftover).div(rewardsDuration).to208();\\n    }\\n\\n    rdata.lastUpdateTime = block.timestamp.to40();\\n    rdata.periodFinish = block.timestamp.add(rewardsDuration).to40();\\n  }\\n\\n  function notifyRewardAmount(address _rewardsToken, uint256 _reward) external updateReward(address(0)) {\\n    require(rewardDistributors[_rewardsToken][msg.sender], \\\"not authorized\\\");\\n    require(_reward > 0, \\\"No reward\\\");\\n\\n    _notifyReward(_rewardsToken, _reward);\\n\\n    // handle the transfer of reward tokens via `transferFrom` to reduce the number\\n    // of transactions required and ensure correctness of the _reward amount\\n    IERC20(_rewardsToken).safeTransferFrom(msg.sender, address(this), _reward);\\n\\n    emit RewardAdded(_rewardsToken, _reward);\\n  }\\n\\n  function setRewardsEscrow(address _rewardsEscrow) external onlyOwner {\\n    emit RewardsEscrowUpdated(address(rewardsEscrow), _rewardsEscrow);\\n    rewardsEscrow = IRewardsEscrow(_rewardsEscrow);\\n  }\\n\\n  // Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\\n  function recoverERC20(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {\\n    require(_tokenAddress != address(stakingToken), \\\"Cannot withdraw staking token\\\");\\n    require(rewardData[_tokenAddress].lastUpdateTime == 0, \\\"Cannot withdraw reward token\\\");\\n    IERC20(_tokenAddress).safeTransfer(owner(), _tokenAmount);\\n    emit Recovered(_tokenAddress, _tokenAmount);\\n  }\\n\\n  /* ========== MODIFIERS ========== */\\n\\n  modifier updateReward(address _account) {\\n    {\\n      //stack too deep\\n      Balances storage userBalance = balances[_account];\\n      uint256 boostedBal = userBalance.boosted;\\n      for (uint256 i = 0; i < rewardTokens.length; i++) {\\n        address token = rewardTokens[i];\\n        rewardData[token].rewardPerTokenStored = _rewardPerToken(token).to208();\\n        rewardData[token].lastUpdateTime = _lastTimeRewardApplicable(rewardData[token].periodFinish).to40();\\n        if (_account != address(0)) {\\n          //check if reward is boostable or not. use boosted or locked balance accordingly\\n          rewards[_account][token] = _earned(\\n            _account,\\n            token,\\n            rewardData[token].useBoost ? boostedBal : userBalance.locked\\n          );\\n          userRewardPerTokenPaid[_account][token] = rewardData[token].rewardPerTokenStored;\\n        }\\n      }\\n    }\\n    _;\\n  }\\n\\n  /* ========== EVENTS ========== */\\n  event RewardAdded(address indexed _token, uint256 _reward);\\n  event RewardsEscrowUpdated(address _previous, address _new);\\n  event Staked(address indexed _user, uint256 _paidAmount, uint256 _lockedAmount, uint256 _boostedAmount);\\n  event Withdrawn(address indexed _user, uint256 _amount);\\n  event Relocked(address indexed _user, uint256 _amount);\\n  event EscrowDurationUpdated(uint256 _previousDuration, uint256 _newDuration);\\n  event KickReward(address indexed _user, address indexed _kicked, uint256 _reward);\\n  event RewardPaid(address indexed _user, address indexed _rewardsToken, uint256 _reward);\\n  event Recovered(address _token, uint256 _amount);\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IRewardsEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n// Docgen-SOLC: 0.8.0\\n\\npragma solidity >0.6.0;\\n\\ninterface IRewardsEscrow {\\n  function lock(\\n    address _address,\\n    uint256 _amount,\\n    uint256 duration\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/core/libraries/BoringMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Docgen-SOLC: 0.6.12\\n\\npragma solidity 0.6.12;\\n\\n/// @notice A library for performing overflow-/underflow-safe math,\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\nlibrary BoringMath {\\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n  }\\n\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\n  }\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b > 0, \\\"BoringMath: division by zero\\\");\\n    return a / b;\\n  }\\n\\n  function to128(uint256 a) internal pure returns (uint128 c) {\\n    require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\n    c = uint128(a);\\n  }\\n\\n  function to64(uint256 a) internal pure returns (uint64 c) {\\n    require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\n    c = uint64(a);\\n  }\\n\\n  function to32(uint256 a) internal pure returns (uint32 c) {\\n    require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\n    c = uint32(a);\\n  }\\n\\n  function to40(uint256 a) internal pure returns (uint40 c) {\\n    require(a <= uint40(-1), \\\"BoringMath: uint40 Overflow\\\");\\n    c = uint40(a);\\n  }\\n\\n  function to112(uint256 a) internal pure returns (uint112 c) {\\n    require(a <= uint112(-1), \\\"BoringMath: uint112 Overflow\\\");\\n    c = uint112(a);\\n  }\\n\\n  function to224(uint256 a) internal pure returns (uint224 c) {\\n    require(a <= uint224(-1), \\\"BoringMath: uint224 Overflow\\\");\\n    c = uint224(a);\\n  }\\n\\n  function to208(uint256 a) internal pure returns (uint208 c) {\\n    require(a <= uint208(-1), \\\"BoringMath: uint208 Overflow\\\");\\n    c = uint208(a);\\n  }\\n\\n  function to216(uint256 a) internal pure returns (uint216 c) {\\n    require(a <= uint216(-1), \\\"BoringMath: uint216 Overflow\\\");\\n    c = uint216(a);\\n  }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\nlibrary BoringMath128 {\\n  function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n    require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n  }\\n\\n  function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n    require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n  }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\nlibrary BoringMath64 {\\n  function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n    require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n  }\\n\\n  function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\n    require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n  }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary BoringMath32 {\\n  function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n    require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n  }\\n\\n  function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n    require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n  }\\n\\n  function mul(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n    require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\n  }\\n\\n  function div(uint32 a, uint32 b) internal pure returns (uint32) {\\n    require(b > 0, \\\"BoringMath: division by zero\\\");\\n    return a / b;\\n  }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint112.\\nlibrary BoringMath112 {\\n  function add(uint112 a, uint112 b) internal pure returns (uint112 c) {\\n    require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n  }\\n\\n  function sub(uint112 a, uint112 b) internal pure returns (uint112 c) {\\n    require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n  }\\n\\n  function mul(uint112 a, uint112 b) internal pure returns (uint112 c) {\\n    require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\n  }\\n\\n  function div(uint112 a, uint112 b) internal pure returns (uint112) {\\n    require(b > 0, \\\"BoringMath: division by zero\\\");\\n    return a / b;\\n  }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint224.\\nlibrary BoringMath224 {\\n  function add(uint224 a, uint224 b) internal pure returns (uint224 c) {\\n    require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\n  }\\n\\n  function sub(uint224 a, uint224 b) internal pure returns (uint224 c) {\\n    require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\n  }\\n\\n  function mul(uint224 a, uint224 b) internal pure returns (uint224 c) {\\n    require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\n  }\\n\\n  function div(uint224 a, uint224 b) internal pure returns (uint224) {\\n    require(b > 0, \\\"BoringMath: division by zero\\\");\\n    return a / b;\\n  }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-v3/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-v3/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-v3/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-v3/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-v3/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-v3/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-v3/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-v3/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"contract IRewardsEscrow\",\"name\":\"_rewardsEscrow\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_previousDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newDuration\",\"type\":\"uint256\"}],\"name\":\"EscrowDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_kicked\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"KickReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Relocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_previous\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"RewardsEscrowUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_paidAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_boostedAmount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_useBoost\",\"type\":\"bool\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"approveRewardDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceAtEpochOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"locked\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"boosted\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"nextUnlockIndex\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boostPayment\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boostRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boostedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"claimableRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct PopLocker.EarnedData[]\",\"name\":\"userRewards\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochs\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"supply\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"date\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"escrowDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"findEpochId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isShutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"kickExpiredLocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kickRewardEpochDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kickRewardPerEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_spendRatio\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"lockedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"boosted\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"unlockTime\",\"type\":\"uint32\"}],\"internalType\":\"struct PopLocker.LockedBalance[]\",\"name\":\"lockData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumBoostPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextBoostRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextMaximumBoostPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_relock\",\"type\":\"bool\"}],\"name\":\"processExpiredLocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_relock\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_spendRatio\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_withdrawTo\",\"type\":\"address\"}],\"name\":\"processExpiredLocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"useBoost\",\"type\":\"bool\"},{\"internalType\":\"uint40\",\"name\":\"periodFinish\",\"type\":\"uint40\"},{\"internalType\":\"uint208\",\"name\":\"rewardRate\",\"type\":\"uint208\"},{\"internalType\":\"uint40\",\"name\":\"lastUpdateTime\",\"type\":\"uint40\"},{\"internalType\":\"uint208\",\"name\":\"rewardPerTokenStored\",\"type\":\"uint208\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardDistributors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"rewardWeightOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsEscrow\",\"outputs\":[{\"internalType\":\"contract IRewardsEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setApprovals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receivingAddress\",\"type\":\"address\"}],\"name\":\"setBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setEscrowDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"setKickIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsEscrow\",\"type\":\"address\"}],\"name\":\"setRewardsEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAtEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userLocks\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"boosted\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"unlockTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PopLocker", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000c5b57e9a1e7914fda753a88f24e5703e617ee50c000000000000000000000000a82caa79f35f7d6b6f1ec1971878f3474c894565", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}