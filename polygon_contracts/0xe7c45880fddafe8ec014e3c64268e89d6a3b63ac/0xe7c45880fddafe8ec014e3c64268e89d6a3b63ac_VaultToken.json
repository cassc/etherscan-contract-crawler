{"SourceCode": "pragma solidity =0.5.16;\r\n\r\ncontract IMasterChef {\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount; // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IERC20 lpToken; // Address of LP token contract.\r\n        uint256 allocPoint; // How many allocation points assigned to this pool. Reward tokens to distribute per block.\r\n        uint256 lastRewardBlock; // Last block number that reward token distribution occurs.\r\n        uint256 accRewardTokenPerShare; // Accumulated reward tokens per share, times 1e12. See below.\r\n        uint16 depositFee;\r\n        bool isStarted;\r\n    }\r\n\r\n    // Info of each user that stakes LP tokens.\r\n    mapping(uint256 => PoolInfo) public poolInfo;\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n\r\n    // Deposit LP tokens to MasterChef.\r\n    function deposit(uint256 _pid, uint256 _amount) external {}\r\n\r\n    // Withdraw LP tokens from MasterChef.\r\n    function withdraw(uint256 _pid, uint256 _amount) external {}\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n\r\n    // <Lif3Swap V2> additions\r\n    function mintFee(address) external view returns (uint);\r\n    function swapFee(address) external view returns (uint);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    // <Lif3Swap V2 />\r\n}\r\n\r\ninterface IVaultTokenFactory {\r\n    event VaultTokenCreated(\r\n        uint256 indexed pid,\r\n        address vaultToken,\r\n        uint256 vaultTokenIndex\r\n    );\r\n\r\n    function router() external view returns (address);\r\n\r\n    function masterChef() external view returns (address);\r\n\r\n    function rewardsToken() external view returns (address);\r\n\r\n    function admin() external view returns (address);\r\n\r\n    function reservesManager() external view returns (address);\r\n\r\n    function getVaultToken(uint256) external view returns (address);\r\n\r\n    function allVaultTokens(uint256) external view returns (address);\r\n\r\n    function allVaultTokensLength() external view returns (uint256);\r\n\r\n    function createVaultToken(uint256 pid)\r\n        external\r\n        returns (address vaultToken);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function underlying() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut,\r\n        address pair\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IVaultToken {\r\n    /*** LIF3 ERC20 ***/\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /*** Pool Token ***/\r\n\r\n    event Mint(\r\n        address indexed sender,\r\n        address indexed minter,\r\n        uint256 mintAmount,\r\n        uint256 mintTokens\r\n    );\r\n    event Redeem(\r\n        address indexed sender,\r\n        address indexed redeemer,\r\n        uint256 redeemAmount,\r\n        uint256 redeemTokens\r\n    );\r\n    event Sync(uint256 totalBalance);\r\n\r\n    function underlying() external view returns (address);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function totalBalance() external view returns (uint256);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function exchangeRate() external view returns (uint256);\r\n\r\n    function mint(address minter) external returns (uint256 mintTokens);\r\n\r\n    function redeem(address redeemer) external returns (uint256 redeemAmount);\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function _setFactory() external;\r\n\r\n    /*** VaultToken ***/\r\n\r\n    event Reinvest(address indexed caller, uint256 reward, uint256 bounty);\r\n\r\n    function isVaultToken() external pure returns (bool);\r\n\r\n    function router() external view returns (IUniswapV2Router01);\r\n\r\n    function masterChef() external view returns (IMasterChef);\r\n\r\n    function rewardsToken() external view returns (address);\r\n\r\n    function WETH() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function pid() external view returns (uint256);\r\n\r\n    function PERFORMANCE_FEE() external pure returns (uint256);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function _initialize(\r\n        address optiswap,\r\n        IUniswapV2Router01 _router,\r\n        IMasterChef _masterChef,\r\n        address _rewardsToken,\r\n        uint256 _pid\r\n    ) external;\r\n\r\n    function reinvest() external;\r\n}\r\n\r\ninterface IERC20 {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface ERC20Interface {\r\n    function balanceOf(address user) external view returns (uint256);\r\n}\r\n\r\nlibrary SafeToken {\r\n    function myBalance(address token) internal view returns (uint256) {\r\n        return ERC20Interface(token).balanceOf(address(this));\r\n    }\r\n\r\n    function balanceOf(address token, address user)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return ERC20Interface(token).balanceOf(user);\r\n    }\r\n\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x095ea7b3, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"!safeApprove\"\r\n        );\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0xa9059cbb, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"!safeTransfer\"\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"!safeTransferFrom\"\r\n        );\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call.value(value)(new bytes(0));\r\n        require(success, \"!safeTransferETH\");\r\n    }\r\n}\r\n\r\nlibrary Math {\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\ncontract LifeERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply;\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    bytes32 public DOMAIN_SEPARATOR;\r\n    mapping(address => uint256) public nonces;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    constructor() public {}\r\n\r\n    function _setName(string memory _name, string memory _symbol) internal {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        uint256 chainId;\r\n        assembly {\r\n            chainId := chainid\r\n        }\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                keccak256(\r\n                    \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\r\n                ),\r\n                keccak256(bytes(_name)),\r\n                keccak256(bytes(\"1\")),\r\n                chainId,\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    function _mint(address to, uint256 value) internal {\r\n        totalSupply = totalSupply.add(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n\r\n    function _burn(address from, uint256 value) internal {\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n        emit Transfer(from, address(0), value);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 value\r\n    ) private {\r\n        allowance[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        balanceOf[from] = balanceOf[from].sub(\r\n            value,\r\n            \"LIF3: TRANSFER_TOO_HIGH\"\r\n        );\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) external returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 value) external returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool) {\r\n        if (allowance[from][msg.sender] != uint256(-1)) {\r\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(\r\n                value,\r\n                \"LIF3: TRANSFER_NOT_ALLOWED\"\r\n            );\r\n        }\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function _checkSignature(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        bytes32 typehash\r\n    ) internal {\r\n        require(deadline >= block.timestamp, \"LIF3: EXPIRED\");\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                DOMAIN_SEPARATOR,\r\n                keccak256(\r\n                    abi.encode(\r\n                        typehash,\r\n                        owner,\r\n                        spender,\r\n                        value,\r\n                        nonces[owner]++,\r\n                        deadline\r\n                    )\r\n                )\r\n            )\r\n        );\r\n        address recoveredAddress = ecrecover(digest, v, r, s);\r\n        require(\r\n            recoveredAddress != address(0) && recoveredAddress == owner,\r\n            \"LIF3: INVALID_SIGNATURE\"\r\n        );\r\n    }\r\n\r\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 public constant PERMIT_TYPEHASH =\r\n        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external {\r\n        _checkSignature(\r\n            owner,\r\n            spender,\r\n            value,\r\n            deadline,\r\n            v,\r\n            r,\r\n            s,\r\n            PERMIT_TYPEHASH\r\n        );\r\n        _approve(owner, spender, value);\r\n    }\r\n}\r\n\r\ninterface OptiSwapPair {\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n}\r\n\r\ninterface IPoolToken {\r\n    /*** LIF3 ERC20 ***/\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /*** Pool Token ***/\r\n\r\n    event Mint(\r\n        address indexed sender,\r\n        address indexed minter,\r\n        uint256 mintAmount,\r\n        uint256 mintTokens\r\n    );\r\n    event Redeem(\r\n        address indexed sender,\r\n        address indexed redeemer,\r\n        uint256 redeemAmount,\r\n        uint256 redeemTokens\r\n    );\r\n    event Sync(uint256 totalBalance);\r\n\r\n    function underlying() external view returns (address);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function totalBalance() external view returns (uint256);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function exchangeRate() external view returns (uint256);\r\n\r\n    function mint(address minter) external returns (uint256 mintTokens);\r\n\r\n    function redeem(address redeemer) external returns (uint256 redeemAmount);\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function _setFactory() external;\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, errorMessage);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot underflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction underflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot underflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, errorMessage);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers.\r\n     * Reverts on division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers.\r\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IOptiSwap {\r\n    function weth() external view returns (address);\r\n\r\n    function bridgeFromTokens(uint256 index) external view returns (address token);\r\n\r\n    function bridgeFromTokensLength() external view returns (uint256);\r\n\r\n    function getBridgeToken(address _token) external view returns (address bridgeToken);\r\n\r\n    function addBridgeToken(address _token, address _bridgeToken) external;\r\n\r\n    function getDexInfo(uint256 index) external view returns (address dex, address handler);\r\n\r\n    function dexListLength() external view returns (uint256);\r\n\r\n    function indexOfDex(address _dex) external view returns (uint256);\r\n\r\n    function getDexEnabled(address _dex) external view returns (bool);\r\n\r\n    function addDex(address _dex, address _handler) external;\r\n\r\n    function removeDex(address _dex) external;\r\n\r\n    function getBestAmountOut(\r\n        uint256 _amountIn,\r\n        address _tokenIn,\r\n        address _tokenOut\r\n    ) external view returns (address pair, uint256 amountOut);\r\n}\r\n\r\ncontract PoolToken is IPoolToken, LifeERC20 {\r\n    uint256 internal constant initialExchangeRate = 1e18;\r\n    address public underlying;\r\n    address public factory;\r\n    uint256 public totalBalance;\r\n    uint256 public constant MINIMUM_LIQUIDITY = 1000;\r\n\r\n    event Mint(\r\n        address indexed sender,\r\n        address indexed minter,\r\n        uint256 mintAmount,\r\n        uint256 mintTokens\r\n    );\r\n    event Redeem(\r\n        address indexed sender,\r\n        address indexed redeemer,\r\n        uint256 redeemAmount,\r\n        uint256 redeemTokens\r\n    );\r\n    event Sync(uint256 totalBalance);\r\n\r\n    /*** Initialize ***/\r\n\r\n    // called once by the factory\r\n    function _setFactory() external {\r\n        require(factory == address(0), \"LIF3: FACTORY_ALREADY_SET\");\r\n        factory = msg.sender;\r\n    }\r\n\r\n    /*** PoolToken ***/\r\n\r\n    function _update() internal {\r\n        totalBalance = IERC20(underlying).balanceOf(address(this));\r\n        emit Sync(totalBalance);\r\n    }\r\n\r\n    function exchangeRate() public view returns (uint256) {\r\n        uint256 _totalSupply = totalSupply; // gas savings\r\n        uint256 _totalBalance = totalBalance; // gas savings\r\n        if (_totalSupply == 0 || _totalBalance == 0) return initialExchangeRate;\r\n        return _totalBalance.mul(1e18).div(_totalSupply);\r\n    }\r\n\r\n    // this low-level function should be called from another contract\r\n    function mint(address minter)\r\n        external\r\n        nonReentrant\r\n        update\r\n        returns (uint256 mintTokens)\r\n    {\r\n        uint256 balance = IERC20(underlying).balanceOf(address(this));\r\n        uint256 mintAmount = balance.sub(totalBalance);\r\n        mintTokens = mintAmount.mul(1e18).div(exchangeRate());\r\n\r\n        if (totalSupply == 0) {\r\n            // permanently lock the first MINIMUM_LIQUIDITY tokens\r\n            mintTokens = mintTokens.sub(MINIMUM_LIQUIDITY);\r\n            _mint(address(0), MINIMUM_LIQUIDITY);\r\n        }\r\n        require(mintTokens > 0, \"LIF3: MINT_AMOUNT_ZERO\");\r\n        _mint(minter, mintTokens);\r\n        emit Mint(msg.sender, minter, mintAmount, mintTokens);\r\n    }\r\n\r\n    // this low-level function should be called from another contract\r\n    function redeem(address redeemer)\r\n        external\r\n        nonReentrant\r\n        update\r\n        returns (uint256 redeemAmount)\r\n    {\r\n        uint256 redeemTokens = balanceOf[address(this)];\r\n        redeemAmount = redeemTokens.mul(exchangeRate()).div(1e18);\r\n\r\n        require(redeemAmount > 0, \"LIF3: REDEEM_AMOUNT_ZERO\");\r\n        require(redeemAmount <= totalBalance, \"LIF3: INSUFFICIENT_CASH\");\r\n        _burn(address(this), redeemTokens);\r\n        _safeTransfer(redeemer, redeemAmount);\r\n        emit Redeem(msg.sender, redeemer, redeemAmount, redeemTokens);\r\n    }\r\n\r\n    // force real balance to match totalBalance\r\n    function skim(address to) external nonReentrant {\r\n        _safeTransfer(\r\n            to,\r\n            IERC20(underlying).balanceOf(address(this)).sub(totalBalance)\r\n        );\r\n    }\r\n\r\n    // force totalBalance to match real balance\r\n    function sync() external nonReentrant update {}\r\n\r\n    /*** Utilities ***/\r\n\r\n    // same safe transfer function used by UniSwapV2 (with fixed underlying)\r\n    bytes4 private constant SELECTOR =\r\n        bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\r\n\r\n    function _safeTransfer(address to, uint256 amount) internal {\r\n        (bool success, bytes memory data) = underlying.call(\r\n            abi.encodeWithSelector(SELECTOR, to, amount)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"LIF3: TRANSFER_FAILED\"\r\n        );\r\n    }\r\n\r\n    // prevents a contract from calling itself, directly or indirectly.\r\n    bool internal _notEntered = true;\r\n    modifier nonReentrant() {\r\n        require(_notEntered, \"LIF3: REENTERED\");\r\n        _notEntered = false;\r\n        _;\r\n        _notEntered = true;\r\n    }\r\n\r\n    // update totalBalance with current balance\r\n    modifier update() {\r\n        _;\r\n        _update();\r\n    }\r\n}\r\n\r\ncontract VaultToken is IVaultToken, IUniswapV2Pair, PoolToken {\r\n    using SafeToken for address;\r\n\r\n    bool public constant isVaultToken = true;\r\n\r\n    IUniswapV2Router01 public router;\r\n    IMasterChef public masterChef;\r\n    address public rewardsToken;\r\n    address public WETH;\r\n    address public token0;\r\n    address public token1;\r\n    address public optiSwap;\r\n    uint256 public pid;\r\n    uint256 public PERFORMANCE_FEE;\r\n    uint256 public FEE_OVERWRITE;\r\n\r\n    event Reinvest(address indexed caller, uint256 reward, uint256 bounty);\r\n\r\n    function _initialize(\r\n        address _optiSwap,\r\n        IUniswapV2Router01 _router,\r\n        IMasterChef _masterChef,\r\n        address _rewardsToken,\r\n        uint256 _pid\r\n    ) external {\r\n        require(factory == address(0), \"VaultToken: FACTORY_ALREADY_SET\"); // sufficient check\r\n        factory = msg.sender;\r\n        optiSwap = _optiSwap;\r\n        _setName(\"Terrace Vault Token\", \"vTerrace\");\r\n        WETH = _router.WETH();\r\n        router = _router;\r\n        masterChef = _masterChef;\r\n        pid = _pid;\r\n        (IERC20 _underlying, , , , ,) = masterChef.poolInfo(_pid);\r\n        underlying = address(_underlying);\r\n        token0 = IUniswapV2Pair(underlying).token0();\r\n        token1 = IUniswapV2Pair(underlying).token1();\r\n        rewardsToken = _rewardsToken;\r\n        rewardsToken.safeApprove(address(router), uint256(-1));\r\n        WETH.safeApprove(address(router), uint256(-1));\r\n        underlying.safeApprove(address(masterChef), uint256(-1));\r\n        PERFORMANCE_FEE = 0.04e18; //4% is the default performance fee, used for other incentives or converted to DEX owned liquidity\r\n    }\r\n\r\n    function changeReinvestBounty(uint256 newValue) external {\r\n        require(msg.sender == IVaultTokenFactory(factory).admin(), \"Not an admin\");\r\n        PERFORMANCE_FEE = newValue;\r\n    } \r\n\r\n    function changeFeeOverwrite(uint256 newValue) external {\r\n        require(msg.sender == IVaultTokenFactory(factory).admin(), \"Not an admin\");\r\n        FEE_OVERWRITE = newValue;\r\n    } \r\n\r\n    /*** PoolToken Overrides ***/\r\n\r\n    function _update() internal {\r\n        (uint256 _totalBalance, ) = masterChef.userInfo(pid, address(this));\r\n        totalBalance = _totalBalance;\r\n        emit Sync(totalBalance);\r\n    }\r\n\r\n    // this low-level function should be called from another contract\r\n    function mint(address minter)\r\n        external\r\n        nonReentrant\r\n        update\r\n        returns (uint256 mintTokens)\r\n    {\r\n        uint256 mintAmount = underlying.myBalance();\r\n        // handle pools with deposit fees by checking balance before and after deposit\r\n        (uint256 _totalBalanceBefore, ) = masterChef.userInfo(\r\n            pid,\r\n            address(this)\r\n        );\r\n        masterChef.deposit(pid, mintAmount);\r\n        (uint256 _totalBalanceAfter, ) = masterChef.userInfo(\r\n            pid,\r\n            address(this)\r\n        );\r\n\r\n        mintTokens = _totalBalanceAfter.sub(_totalBalanceBefore).mul(1e18).div(\r\n            exchangeRate()\r\n        );\r\n\r\n        if (totalSupply == 0) {\r\n            // permanently lock the first MINIMUM_LIQUIDITY tokens\r\n            mintTokens = mintTokens.sub(MINIMUM_LIQUIDITY);\r\n            _mint(address(0), MINIMUM_LIQUIDITY);\r\n        }\r\n        require(mintTokens > 0, \"VaultToken: MINT_AMOUNT_ZERO\");\r\n        _mint(minter, mintTokens);\r\n        emit Mint(msg.sender, minter, mintAmount, mintTokens);\r\n    }\r\n\r\n    // this low-level function should be called from another contract\r\n    function redeem(address redeemer)\r\n        external\r\n        nonReentrant\r\n        update\r\n        returns (uint256 redeemAmount)\r\n    {\r\n        uint256 redeemTokens = balanceOf[address(this)];\r\n        redeemAmount = redeemTokens.mul(exchangeRate()).div(1e18);\r\n\r\n        require(redeemAmount > 0, \"VaultToken: REDEEM_AMOUNT_ZERO\");\r\n        require(redeemAmount <= totalBalance, \"VaultToken: INSUFFICIENT_CASH\");\r\n        _burn(address(this), redeemTokens);\r\n        masterChef.withdraw(pid, redeemAmount);\r\n        _safeTransfer(redeemer, redeemAmount);\r\n        emit Redeem(msg.sender, redeemer, redeemAmount, redeemTokens);\r\n    }\r\n\r\n    /*** Reinvest ***/\r\n\r\n    function getFee() public view returns (uint256){\r\n        if(FEE_OVERWRITE > 0){\r\n            return FEE_OVERWRITE;\r\n        }\r\n        return IUniswapV2Factory(IUniswapV2Pair(underlying).factory()).swapFee(underlying);\r\n    }\r\n\r\n    function _optimalDepositA(\r\n        uint256 _amountA,\r\n        uint256 _reserveA\r\n    ) public view returns (uint256) {\r\n        uint256 _swapFeeFactor = 1000 - getFee();\r\n        require(\r\n            _swapFeeFactor >= 900 && _swapFeeFactor <= 1000,\r\n            \"VaultToken: INVALID_FEE_FACTOR\"\r\n        );\r\n        uint256 a = uint256(1000).add(_swapFeeFactor).mul(_reserveA);\r\n        uint256 b = _amountA.mul(1000).mul(_reserveA).mul(4).mul(\r\n            _swapFeeFactor\r\n        );\r\n        uint256 c = Math.sqrt(a.mul(a).add(b));\r\n        uint256 d = uint256(2).mul(_swapFeeFactor);\r\n        return c.sub(a).div(d);\r\n    }\r\n\r\n    function approveRouter(address token, uint256 amount) internal {\r\n        if (IERC20(token).allowance(address(this), address(router)) >= amount)\r\n            return;\r\n        token.safeApprove(address(router), uint256(-1));\r\n    }\r\n\r\n    function swapExactTokensForTokens(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amount\r\n    ) internal {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(tokenIn);\r\n        path[1] = address(tokenOut);\r\n        approveRouter(tokenIn, amount);\r\n        router.swapExactTokensForTokens(amount, 0, path, address(this), now);\r\n    }\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountA,\r\n        uint256 amountB\r\n    ) internal returns (uint256 liquidity) {\r\n        approveRouter(tokenA, amountA);\r\n        approveRouter(tokenB, amountB);\r\n        (, , liquidity) = router.addLiquidity(\r\n            tokenA,\r\n            tokenB,\r\n            amountA,\r\n            amountB,\r\n            0,\r\n            0,\r\n            address(this),\r\n            now\r\n        );\r\n    }\r\n\r\n    function swapTokensForBestAmountOut(\r\n        IOptiSwap _optiSwap,\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountIn\r\n    ) internal returns (uint256 amountOut) {\r\n        if (tokenIn == tokenOut) {\r\n            return amountIn;\r\n        }\r\n        address pair;\r\n        (pair, amountOut) = _optiSwap.getBestAmountOut(amountIn, tokenIn, tokenOut);\r\n        require(pair != address(0), \"NO_PAIR\");\r\n        tokenIn.safeTransfer(pair, amountIn);\r\n        if (tokenIn < tokenOut) {\r\n            OptiSwapPair(pair).swap(0, amountOut, address(this), new bytes(0));\r\n        } else {\r\n            OptiSwapPair(pair).swap(amountOut, 0, address(this), new bytes(0));\r\n        }\r\n    }\r\n    function optiSwapExactTokensForTokens(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountIn\r\n    ) internal returns (uint256 amountOut) {\r\n        if (tokenIn == tokenOut) {\r\n            return amountIn;\r\n        }\r\n        IOptiSwap _optiSwap = IOptiSwap(optiSwap);\r\n        address nextHop = _optiSwap.getBridgeToken(tokenIn);\r\n        if (nextHop == tokenOut) {\r\n            return swapTokensForBestAmountOut(_optiSwap, tokenIn, tokenOut, amountIn);\r\n        }\r\n        address waypoint = _optiSwap.getBridgeToken(tokenOut);\r\n        if (tokenIn == waypoint) {\r\n            return swapTokensForBestAmountOut(_optiSwap, tokenIn, tokenOut, amountIn);\r\n        }\r\n        uint256 hopAmountOut;\r\n        if (nextHop != tokenIn) {\r\n            hopAmountOut = swapTokensForBestAmountOut(_optiSwap, tokenIn, nextHop, amountIn);\r\n        } else {\r\n            hopAmountOut = amountIn;\r\n        }\r\n        if (nextHop == waypoint) {\r\n            return swapTokensForBestAmountOut(_optiSwap, nextHop, tokenOut, hopAmountOut);\r\n        } else if (waypoint == tokenOut) {\r\n            return optiSwapExactTokensForTokens(nextHop, tokenOut, hopAmountOut);\r\n        } else {\r\n            uint256 waypointAmountOut = optiSwapExactTokensForTokens(nextHop, waypoint, hopAmountOut);\r\n            return swapTokensForBestAmountOut(_optiSwap, waypoint, tokenOut, waypointAmountOut);\r\n        }\r\n    }\r\n\r\n    function reinvest() external nonReentrant update {\r\n        require(msg.sender == tx.origin);\r\n        // 1. Withdraw all the rewards.\r\n        masterChef.withdraw(pid, 0);\r\n        uint256 reward = rewardsToken.myBalance();\r\n        if (reward == 0) return;\r\n        // 2. Send the reward bounty to the admin, performance fee\r\n        uint256 bounty = reward.mul(PERFORMANCE_FEE) / 1e18;\r\n        rewardsToken.safeTransfer(IVaultTokenFactory(factory).reservesManager(), bounty);\r\n        // 3. Convert all the remaining rewards to token0 or token1.\r\n        address tokenA;\r\n        address tokenB;\r\n        if (token0 == rewardsToken || token1 == rewardsToken) {\r\n            (tokenA, tokenB) = token0 == rewardsToken\r\n                ? (token0, token1)\r\n                : (token1, token0);\r\n        } else {\r\n            if (token1 == WETH) {\r\n                (tokenA, tokenB) = (token1, token0);\r\n            } else {\r\n                    (tokenA, tokenB) = (token0, token1);\r\n            }\r\n            optiSwapExactTokensForTokens(rewardsToken, tokenA, reward.sub(bounty));\r\n        }\r\n        // 4. Convert tokenA to LP Token underlyings.\r\n        uint256 totalAmountA = tokenA.myBalance();\r\n        assert(totalAmountA > 0);\r\n        (uint256 r0, uint256 r1, ) = IUniswapV2Pair(underlying).getReserves();\r\n        uint256 reserveA = tokenA == token0 ? r0 : r1;\r\n        uint256 swapAmount = _optimalDepositA(\r\n            totalAmountA,\r\n            reserveA\r\n        );\r\n        swapExactTokensForTokens(tokenA, tokenB, swapAmount);\r\n        uint256 liquidity = addLiquidity(\r\n            tokenA,\r\n            tokenB,\r\n            totalAmountA.sub(swapAmount),\r\n            tokenB.myBalance()\r\n        );\r\n        // 5. Stake the LP Tokens.\r\n        masterChef.deposit(pid, liquidity);\r\n        emit Reinvest(msg.sender, reward, bounty);\r\n    }\r\n\r\n    /*** Mirrored From uniswapV2Pair ***/\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        )\r\n    {\r\n        (reserve0, reserve1, blockTimestampLast) = IUniswapV2Pair(underlying)\r\n        .getReserves();\r\n        // if no token has been minted yet mirror uniswap getReserves\r\n        if (totalSupply == 0) return (reserve0, reserve1, blockTimestampLast);\r\n        // else, return the underlying reserves of this contract\r\n        uint256 _totalBalance = totalBalance;\r\n        uint256 _totalSupply = IUniswapV2Pair(underlying).totalSupply();\r\n        reserve0 = safe112(_totalBalance.mul(reserve0).div(_totalSupply));\r\n        reserve1 = safe112(_totalBalance.mul(reserve1).div(_totalSupply));\r\n        require(\r\n            reserve0 > 100 && reserve1 > 100,\r\n            \"VaultToken: INSUFFICIENT_RESERVES\"\r\n        );\r\n    }\r\n\r\n    function price0CumulativeLast() external view returns (uint256) {\r\n        return IUniswapV2Pair(underlying).price0CumulativeLast();\r\n    }\r\n\r\n    function price1CumulativeLast() external view returns (uint256) {\r\n        return IUniswapV2Pair(underlying).price1CumulativeLast();\r\n    }\r\n\r\n    /*** Utilities ***/\r\n\r\n    function safe112(uint256 n) internal pure returns (uint112) {\r\n        require(n < 2**112, \"VaultToken: SAFE112\");\r\n        return uint112(n);\r\n    }\r\n}\r\n\r\n\r\n// This is a vault token factory used in Mortuary Vaults for Farms\r\n\r\ncontract VaultTokenFactory is IVaultTokenFactory {\r\n    address public router;\r\n    address public masterChef;\r\n    address public rewardsToken;\r\n    address public admin;\r\n    address public optiSwap;\r\n    address public reservesManager;\r\n\r\n    mapping(uint256 => address) public getVaultToken;\r\n    address[] public allVaultTokens;\r\n\r\n    event VaultTokenCreated(\r\n        uint256 indexed pid,\r\n        address vaultToken,\r\n        uint256 vaultTokenIndex\r\n    );\r\n\r\n    constructor(\r\n        address _optiSwap,\r\n        address _router, // LIF3 router\r\n        address _masterChef, // masterchef\r\n        address _rewardsToken,\r\n        address _admin\r\n    ) public {\r\n        optiSwap = _optiSwap;\r\n        router = _router;\r\n        masterChef = _masterChef;\r\n        rewardsToken = _rewardsToken;\r\n        admin = _admin;\r\n    }\r\n\r\n    function changeAdmin(address newAdmin) external {\r\n        require(msg.sender == admin, \"Not permitted\");\r\n        admin = newAdmin;\r\n    }\r\n\r\n    function changeReservesManager(address newReservesManager) external {\r\n        require(msg.sender == admin, \"Not permitted\");\r\n        reservesManager = newReservesManager;\r\n    }\r\n\r\n    function allVaultTokensLength() external view returns (uint256) {\r\n        return allVaultTokens.length;\r\n    }\r\n\r\n    function createVaultToken(uint256 pid)\r\n        external\r\n        returns (address vaultToken)\r\n    {\r\n        require(\r\n            getVaultToken[pid] == address(0),\r\n            \"VaultTokenFactory: PID_EXISTS\"\r\n        );\r\n        bytes memory bytecode = type(VaultToken).creationCode;\r\n        assembly {\r\n            vaultToken := create2(0, add(bytecode, 32), mload(bytecode), pid)\r\n        }\r\n        VaultToken(vaultToken)._initialize(\r\n            optiSwap,\r\n            IUniswapV2Router01(router),\r\n            IMasterChef(masterChef),\r\n            rewardsToken,\r\n            pid\r\n        );\r\n        getVaultToken[pid] = vaultToken;\r\n        allVaultTokens.push(vaultToken);\r\n        emit VaultTokenCreated(pid, vaultToken, allVaultTokens.length);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintTokens\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"}],\"name\":\"Sync\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FEE_OVERWRITE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINIMUM_LIQUIDITY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERFORMANCE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_optiSwap\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router01\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"contract IMasterChef\",\"name\":\"_masterChef\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"_initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveA\",\"type\":\"uint256\"}],\"name\":\"_optimalDepositA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_setFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"changeFeeOverwrite\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"changeReinvestBounty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestampLast\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isVaultToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"masterChef\",\"outputs\":[{\"internalType\":\"contract IMasterChef\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"optiSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price0CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price1CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router01\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"skim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "VaultToken", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://689166ef45c8b9f5945e745c9f16ca89161e0c2131ead213d406a0bb8accbdd5"}