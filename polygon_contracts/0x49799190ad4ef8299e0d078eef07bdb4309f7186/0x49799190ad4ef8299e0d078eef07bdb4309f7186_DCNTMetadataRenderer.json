{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DCNTMetadataRenderer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/*\\n ______   _______  _______  _______  _       _________\\n(  __  \\\\ (  ____ \\\\(  ____ \\\\(  ____ \\\\( (    /|\\\\__   __/\\n| (  \\\\  )| (    \\\\/| (    \\\\/| (    \\\\/|  \\\\  ( |   ) (\\n| |   ) || (__    | |      | (__    |   \\\\ | |   | |\\n| |   | ||  __)   | |      |  __)   | (\\\\ \\\\) |   | |\\n| |   ) || (      | |      | (      | | \\\\   |   | |\\n| (__/  )| (____/\\\\| (____/\\\\| (____/\\\\| )  \\\\  |   | |\\n(______/ (_______/(_______/(_______/|/    )_)   )_(\\n\\n*/\\n\\n/// ============ Imports ============\\nimport \\\"./interfaces/IMetadataRenderer.sol\\\";\\nimport {MusicMetadata} from \\\"./utils/MusicMetadata.sol\\\";\\nimport {Credits} from \\\"./utils/Credits.sol\\\";\\nimport {ISharedNFTLogic} from \\\"./interfaces/ISharedNFTLogic.sol\\\";\\nimport \\\"erc721a/contracts/IERC721A.sol\\\";\\n\\n/// @notice DCNTMetadataRenderer for editions support\\ncontract DCNTMetadataRenderer is IMetadataRenderer, MusicMetadata, Credits {\\n  /// @notice Reference to Shared NFT logic library\\n  ISharedNFTLogic public immutable sharedNFTLogic;\\n\\n  /// @notice Constructor for library\\n  /// @param _sharedNFTLogic reference to shared NFT logic library\\n  constructor(ISharedNFTLogic _sharedNFTLogic) {\\n    sharedNFTLogic = _sharedNFTLogic;\\n  }\\n\\n  /// @notice Default initializer for edition data from a specific contract\\n  /// @param data data to init with\\n  function initializeWithData(bytes memory data) external {\\n    // data format: description, imageURI, animationURI\\n    (\\n      string memory description,\\n      string memory imageURI,\\n      string memory animationURI\\n    ) = abi.decode(data, (string, string, string));\\n\\n    songMetadatas[msg.sender].songPublishingData.description = description;\\n    songMetadatas[msg.sender].song.audio.losslessAudio = animationURI;\\n    songMetadatas[msg.sender].song.artwork.artworkUri = imageURI;\\n\\n    emit EditionInitialized({\\n      target: msg.sender,\\n      description: description,\\n      imageURI: imageURI,\\n      animationURI: animationURI\\n    });\\n  }\\n\\n  /// @notice Update everything in 1 transaction.\\n  /// @param target target for contract to update metadata for\\n  /// @param _songMetadata song metadata\\n  /// @param _projectMetadata project metadata\\n  /// @param _tags tags\\n  /// @param _credits credits for the track\\n  function bulkUpdate(\\n    address target,\\n    SongMetadata memory _songMetadata,\\n    ProjectMetadata memory _projectMetadata,\\n    string[] memory _tags,\\n    Credit[] calldata _credits\\n  ) external requireSenderAdmin(target) {\\n    songMetadatas[target] = _songMetadata;\\n    projectMetadatas[target] = _projectMetadata;\\n    updateTags(target, _tags);\\n    updateCredits(target, _credits);\\n\\n    emit SongUpdated({\\n      target: target,\\n      sender: msg.sender,\\n      songMetadata: _songMetadata,\\n      projectMetadata: _projectMetadata,\\n      tags: _tags,\\n      credits: _credits\\n    });\\n  }\\n\\n  /// @notice Contract URI information getter\\n  /// @return contract uri (if set)\\n  function contractURI() external view override returns (string memory) {\\n    address target = msg.sender;\\n    bytes memory imageSpace = bytes(\\\"\\\");\\n    if (bytes(songMetadatas[target].song.artwork.artworkUri).length > 0) {\\n      imageSpace = abi.encodePacked(\\n        '\\\", \\\"image\\\": \\\"',\\n        songMetadatas[target].song.artwork.artworkUri\\n      );\\n    }\\n    bool isMusicNft = bytes(\\n      songMetadatas[target].song.audio.songDetails.audioQuantitative.audioMimeType\\n    ).length > 0;\\n    string memory name = isMusicNft\\n      ? songMetadatas[target].songPublishingData.title\\n      : IERC721A(target).name();\\n    return\\n      string(\\n        sharedNFTLogic.encodeMetadataJSON(\\n          abi.encodePacked(\\n            '{\\\"name\\\": \\\"',\\n            name,\\n            '\\\", \\\"description\\\": \\\"',\\n            songMetadatas[target].songPublishingData.description,\\n            imageSpace,\\n            '\\\"}'\\n          )\\n        )\\n      );\\n  }\\n\\n  /// @notice Token URI information getter\\n  /// @param tokenId to get uri for\\n  /// @return contract uri (if set)\\n  function tokenURI(uint256 tokenId)\\n    external\\n    view\\n    override\\n    returns (string memory)\\n  {\\n    address target = msg.sender;\\n\\n    return tokenURITarget(tokenId, target);\\n  }\\n\\n  /// @notice Token URI information getter\\n  /// @param tokenId to get uri for\\n  /// @return contract uri (if set)\\n  function tokenURITarget(uint256 tokenId, address target)\\n    public\\n    view\\n    returns (string memory)\\n  {\\n    return\\n      sharedNFTLogic.createMetadataEdition({\\n        name: IERC721A(target).name(),\\n        tokenOfEdition: tokenId,\\n        songMetadata: songMetadatas[target],\\n        projectMetadata: projectMetadatas[target],\\n        credits: credits[target],\\n        tags: trackTags[target]\\n      });\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMetadataRenderer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IMetadataRenderer {\\n  function tokenURI(uint256) external view returns (string memory);\\n\\n  function contractURI() external view returns (string memory);\\n\\n  function initializeWithData(bytes memory initData) external;\\n\\n  /// @notice Storage for token edition information\\n  struct TokenEditionInfo {\\n    string description;\\n    string imageURI;\\n    string animationURI;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/MusicMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/*\\n ______   _______  _______  _______  _       _________\\n(  __  \\\\ (  ____ \\\\(  ____ \\\\(  ____ \\\\( (    /|\\\\__   __/\\n| (  \\\\  )| (    \\\\/| (    \\\\/| (    \\\\/|  \\\\  ( |   ) (\\n| |   ) || (__    | |      | (__    |   \\\\ | |   | |\\n| |   | ||  __)   | |      |  __)   | (\\\\ \\\\) |   | |\\n| |   ) || (      | |      | (      | | \\\\   |   | |\\n| (__/  )| (____/\\\\| (____/\\\\| (____/\\\\| )  \\\\  |   | |\\n(______/ (_______/(_______/(_______/|/    )_)   )_(\\n\\n*/\\n\\n/// ============ Imports ============\\nimport {IOnChainMetadata} from \\\"../interfaces/IOnChainMetadata.sol\\\";\\nimport {MetadataRenderAdminCheck} from \\\"./MetadataRenderAdminCheck.sol\\\";\\n\\ncontract MusicMetadata is MetadataRenderAdminCheck, IOnChainMetadata {\\n  mapping(address => SongMetadata) public songMetadatas;\\n  mapping(address => ProjectMetadata) public projectMetadatas;\\n  mapping(address => string[]) internal trackTags;\\n\\n  /// @notice Update media URIs\\n  /// @param target target for contract to update metadata for\\n  /// @param imageURI new image uri address\\n  /// @param animationURI new animation uri address\\n  function updateMediaURIs(\\n    address target,\\n    string memory imageURI,\\n    string memory animationURI\\n  ) external requireSenderAdmin(target) {\\n    songMetadatas[target].song.artwork.artworkUri = imageURI;\\n    songMetadatas[target].song.audio.losslessAudio = animationURI;\\n    emit MediaURIsUpdated({\\n      target: target,\\n      sender: msg.sender,\\n      imageURI: imageURI,\\n      animationURI: animationURI\\n    });\\n  }\\n\\n  /// @notice Admin function to update description\\n  /// @param target target description\\n  /// @param newDescription new description\\n  function updateDescription(address target, string memory newDescription)\\n    external\\n    requireSenderAdmin(target)\\n  {\\n    songMetadatas[target].songPublishingData.description = newDescription;\\n\\n    emit DescriptionUpdated({\\n      target: target,\\n      sender: msg.sender,\\n      newDescription: newDescription\\n    });\\n  }\\n\\n  /// @notice Admin function to update description\\n  /// @param target target description\\n  /// @param tags The tags of the track\\n  function updateTags(address target, string[] memory tags)\\n    public\\n    requireSenderAdmin(target)\\n  {\\n    trackTags[target] = tags;\\n\\n    emit TagsUpdated({target: target, sender: msg.sender, tags: tags});\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Credits.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/*\\n ______   _______  _______  _______  _       _________\\n(  __  \\\\ (  ____ \\\\(  ____ \\\\(  ____ \\\\( (    /|\\\\__   __/\\n| (  \\\\  )| (    \\\\/| (    \\\\/| (    \\\\/|  \\\\  ( |   ) (\\n| |   ) || (__    | |      | (__    |   \\\\ | |   | |\\n| |   | ||  __)   | |      |  __)   | (\\\\ \\\\) |   | |\\n| |   ) || (      | |      | (      | | \\\\   |   | |\\n| (__/  )| (____/\\\\| (____/\\\\| (____/\\\\| )  \\\\  |   | |\\n(______/ (_______/(_______/(_______/|/    )_)   )_(\\n\\n*/\\n\\n/// ============ Imports ============\\nimport {IOnChainMetadata} from \\\"../interfaces/IOnChainMetadata.sol\\\";\\nimport {MetadataRenderAdminCheck} from \\\"./MetadataRenderAdminCheck.sol\\\";\\n\\ncontract Credits is MetadataRenderAdminCheck, IOnChainMetadata {\\n  /// @notice Array of credits\\n  mapping(address => Credit[]) internal credits;\\n\\n  /// @notice Admin function to update description\\n  /// @param target target description\\n  /// @param _credits credits for the track\\n  function updateCredits(address target, Credit[] calldata _credits)\\n    public\\n    requireSenderAdmin(target)\\n  {\\n    delete credits[target];\\n\\n    for (uint256 i = 0; i < _credits.length; i++) {\\n      credits[target].push(\\n        Credit(_credits[i].name, _credits[i].collaboratorType)\\n      );\\n    }\\n\\n    emit CreditsUpdated({\\n      target: target,\\n      sender: msg.sender,\\n      credits: _credits\\n    });\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISharedNFTLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/*\\n ______   _______  _______  _______  _       _________\\n(  __  \\\\ (  ____ \\\\(  ____ \\\\(  ____ \\\\( (    /|\\\\__   __/\\n| (  \\\\  )| (    \\\\/| (    \\\\/| (    \\\\/|  \\\\  ( |   ) (\\n| |   ) || (__    | |      | (__    |   \\\\ | |   | |\\n| |   | ||  __)   | |      |  __)   | (\\\\ \\\\) |   | |\\n| |   ) || (      | |      | (      | | \\\\   |   | |\\n| (__/  )| (____/\\\\| (____/\\\\| (____/\\\\| )  \\\\  |   | |\\n(______/ (_______/(_______/(_______/|/    )_)   )_(\\n\\n*/\\n\\n/// ============ Imports ============\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"../interfaces/IOnChainMetadata.sol\\\";\\n\\n/// Shared NFT logic for rendering metadata associated with editions\\n/// @dev Can safely be used for generic base64Encode and numberToString functions\\ncontract ISharedNFTLogic is IOnChainMetadata {\\n  /// Generate edition metadata from storage information as base64-json blob\\n  /// Combines the media data and metadata\\n  /// @param name the token name\\n  /// @param tokenOfEdition Token ID for specific token\\n  /// @param songMetadata song metadata\\n  /// @param projectMetadata project metadata\\n  /// @param credits The credits of the track\\n  /// @param tags The tags of the track\\n  function createMetadataEdition(\\n    string memory name,\\n    uint256 tokenOfEdition,\\n    SongMetadata memory songMetadata,\\n    ProjectMetadata memory projectMetadata,\\n    Credit[] memory credits,\\n    string[] memory tags\\n  ) external pure returns (string memory) {}\\n\\n  /// Encodes the argument json bytes into base64-data uri format\\n  /// @param json Raw json to base64 and turn into a data-uri\\n  function encodeMetadataJSON(bytes memory json)\\n    public\\n    pure\\n    returns (string memory)\\n  {}\\n}\\n\"\r\n    },\r\n    \"erc721a/contracts/IERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.2\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * The caller cannot approve to their own address.\\n     */\\n    error ApproveToCaller();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOnChainMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOnChainMetadata {\\n  /// @notice Lyrics updated for this edition\\n  event SongUpdated(\\n    address target,\\n    address sender,\\n    SongMetadata songMetadata,\\n    ProjectMetadata projectMetadata,\\n    string[] tags,\\n    Credit[] credits\\n  );\\n\\n  /// @notice AudioQuantitativeUpdated updated for this edition\\n  /// @dev admin function indexer feedback\\n  event AudioQuantitativeUpdated(\\n    address indexed target,\\n    address sender,\\n    string key,\\n    uint256 bpm,\\n    uint256 duration,\\n    string audioMimeType,\\n    uint256 trackNumber\\n  );\\n\\n  /// @notice AudioQualitative updated for this edition\\n  /// @dev admin function indexer feedback\\n  event AudioQualitativeUpdated(\\n    address indexed target,\\n    address sender,\\n    string license,\\n    string externalUrl,\\n    string isrc,\\n    string genre\\n  );\\n\\n  /// @notice Lyrics updated for this edition\\n  event LyricsUpdated(\\n    address target,\\n    address sender,\\n    string lyrics,\\n    string lyricsNft\\n  );\\n\\n  /// @notice Artwork updated for this edition\\n  /// @dev admin function indexer feedback\\n  event ArtworkUpdated(\\n    address indexed target,\\n    address sender,\\n    string artworkUri,\\n    string artworkMimeType,\\n    string artworkNft\\n  );\\n\\n  /// @notice Visualizer updated for this edition\\n  /// @dev admin function indexer feedback\\n  event VisualizerUpdated(\\n    address indexed target,\\n    address sender,\\n    string artworkUri,\\n    string artworkMimeType,\\n    string artworkNft\\n  );\\n\\n  /// @notice ProjectMetadata updated for this edition\\n  /// @dev admin function indexer feedback\\n  event ProjectArtworkUpdated(\\n    address indexed target,\\n    address sender,\\n    string artworkUri,\\n    string artworkMimeType,\\n    string artworkNft\\n  );\\n\\n  /// @notice Tags updated for this edition\\n  /// @dev admin function indexer feedback\\n  event TagsUpdated(address indexed target, address sender, string[] tags);\\n\\n  /// @notice Credit updated for this edition\\n  /// @dev admin function indexer feedback\\n  event CreditsUpdated(\\n    address indexed target,\\n    address sender,\\n    Credit[] credits\\n  );\\n\\n  /// @notice ProjectMetadata updated for this edition\\n  /// @dev admin function indexer feedback\\n  event ProjectPublishingDataUpdated(\\n    address indexed target,\\n    address sender,\\n    string title,\\n    string description,\\n    string recordLabel,\\n    string publisher,\\n    string locationCreated,\\n    string releaseDate,\\n    string projectType,\\n    string upc\\n  );\\n\\n  /// @notice PublishingData updated for this edition\\n  /// @dev admin function indexer feedback\\n  event PublishingDataUpdated(\\n    address indexed target,\\n    address sender,\\n    string title,\\n    string description,\\n    string recordLabel,\\n    string publisher,\\n    string locationCreated,\\n    string releaseDate\\n  );\\n\\n  /// @notice losslessAudio updated for this edition\\n  /// @dev admin function indexer feedback\\n  event LosslessAudioUpdated(\\n    address indexed target,\\n    address sender,\\n    string losslessAudio\\n  );\\n\\n  /// @notice Description updated for this edition\\n  /// @dev admin function indexer feedback\\n  event DescriptionUpdated(\\n    address indexed target,\\n    address sender,\\n    string newDescription\\n  );\\n\\n  /// @notice Artist updated for this edition\\n  /// @dev admin function indexer feedback\\n  event ArtistUpdated(address indexed target, address sender, string newArtist);\\n\\n  /// @notice Event for updated Media URIs\\n  event MediaURIsUpdated(\\n    address indexed target,\\n    address sender,\\n    string imageURI,\\n    string animationURI\\n  );\\n\\n  /// @notice Event for a new edition initialized\\n  /// @dev admin function indexer feedback\\n  event EditionInitialized(\\n    address indexed target,\\n    string description,\\n    string imageURI,\\n    string animationURI\\n  );\\n\\n  /// @notice Storage for SongMetadata\\n  struct SongMetadata {\\n    SongContent song;\\n    PublishingData songPublishingData;\\n  }\\n\\n  /// @notice Storage for SongContent\\n  struct SongContent {\\n    Audio audio;\\n    Artwork artwork;\\n    Artwork visualizer;\\n  }\\n\\n  /// @notice Storage for SongDetails\\n  struct SongDetails {\\n    string artistName;\\n    AudioQuantitative audioQuantitative;\\n    AudioQualitative audioQualitative;\\n  }\\n\\n  /// @notice Storage for Audio\\n  struct Audio {\\n    string losslessAudio; // ipfs://{cid} or arweave\\n    SongDetails songDetails;\\n    Lyrics lyrics;\\n  }\\n\\n  /// @notice Storage for AudioQuantitative\\n  struct AudioQuantitative {\\n    string key; // C / A# / etc\\n    uint256 bpm; // 120 / 60 / 100\\n    uint256 duration; // 240 / 60 / 120\\n    string audioMimeType; // audio/wav\\n    uint256 trackNumber; // 1\\n  }\\n\\n  /// @notice Storage for AudioQualitative\\n  struct AudioQualitative {\\n    string license; // CC0\\n    string externalUrl; // Link to your project website\\n    string isrc; // CC-XXX-YY-NNNNN\\n    string genre; // Rock / Pop / Metal / Hip-Hop / Electronic / Classical / Jazz / Folk / Reggae / Other\\n  }\\n\\n  /// @notice Storage for Artwork\\n  struct Artwork {\\n    string artworkUri; // The uri of the artwork (ipfs://<CID>)\\n    string artworkMimeType; // The mime type of the artwork\\n    string artworkNft; // The NFT of the artwork (caip19)\\n  }\\n\\n  /// @notice Storage for Lyrics\\n  struct Lyrics {\\n    string lyrics;\\n    string lyricsNft;\\n  }\\n\\n  /// @notice Storage for PublishingData\\n  struct PublishingData {\\n    string title;\\n    string description;\\n    string recordLabel; // Sony / Universal / etc\\n    string publisher; // Sony / Universal / etc\\n    string locationCreated;\\n    string releaseDate; // 2020-01-01\\n  }\\n\\n  /// @notice Storage for ProjectMetadata\\n  struct ProjectMetadata {\\n    PublishingData publishingData;\\n    Artwork artwork;\\n    string projectType; // Single / EP / Album\\n    string upc; // 03600029145\\n  }\\n\\n  /// @notice Storage for Credit\\n  struct Credit {\\n    string name;\\n    string collaboratorType;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/MetadataRenderAdminCheck.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract MetadataRenderAdminCheck {\\n  error Access_OnlyAdmin();\\n\\n  /// @notice Modifier to require the sender to be an admin\\n  /// @param target address that the user wants to modify\\n  modifier requireSenderAdmin(address target) {\\n    if (target != msg.sender && Ownable(target).owner() != msg.sender) {\\n      revert Access_OnlyAdmin();\\n    }\\n\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ISharedNFTLogic\",\"name\":\"_sharedNFTLogic\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Access_OnlyAdmin\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newArtist\",\"type\":\"string\"}],\"name\":\"ArtistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"artworkUri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"artworkMimeType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"artworkNft\",\"type\":\"string\"}],\"name\":\"ArtworkUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"license\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"externalUrl\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"isrc\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"genre\",\"type\":\"string\"}],\"name\":\"AudioQualitativeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bpm\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"audioMimeType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trackNumber\",\"type\":\"uint256\"}],\"name\":\"AudioQuantitativeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"collaboratorType\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct IOnChainMetadata.Credit[]\",\"name\":\"credits\",\"type\":\"tuple[]\"}],\"name\":\"CreditsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newDescription\",\"type\":\"string\"}],\"name\":\"DescriptionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"animationURI\",\"type\":\"string\"}],\"name\":\"EditionInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"losslessAudio\",\"type\":\"string\"}],\"name\":\"LosslessAudioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"lyrics\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"lyricsNft\",\"type\":\"string\"}],\"name\":\"LyricsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"animationURI\",\"type\":\"string\"}],\"name\":\"MediaURIsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"artworkUri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"artworkMimeType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"artworkNft\",\"type\":\"string\"}],\"name\":\"ProjectArtworkUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"recordLabel\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"publisher\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"locationCreated\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"releaseDate\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"projectType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"upc\",\"type\":\"string\"}],\"name\":\"ProjectPublishingDataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"recordLabel\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"publisher\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"locationCreated\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"releaseDate\",\"type\":\"string\"}],\"name\":\"PublishingDataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"losslessAudio\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"artistName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"bpm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"audioMimeType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"trackNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct IOnChainMetadata.AudioQuantitative\",\"name\":\"audioQuantitative\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"license\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"externalUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"isrc\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"genre\",\"type\":\"string\"}],\"internalType\":\"struct IOnChainMetadata.AudioQualitative\",\"name\":\"audioQualitative\",\"type\":\"tuple\"}],\"internalType\":\"struct IOnChainMetadata.SongDetails\",\"name\":\"songDetails\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"lyrics\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lyricsNft\",\"type\":\"string\"}],\"internalType\":\"struct IOnChainMetadata.Lyrics\",\"name\":\"lyrics\",\"type\":\"tuple\"}],\"internalType\":\"struct IOnChainMetadata.Audio\",\"name\":\"audio\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"artworkUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artworkMimeType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artworkNft\",\"type\":\"string\"}],\"internalType\":\"struct IOnChainMetadata.Artwork\",\"name\":\"artwork\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"artworkUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artworkMimeType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artworkNft\",\"type\":\"string\"}],\"internalType\":\"struct IOnChainMetadata.Artwork\",\"name\":\"visualizer\",\"type\":\"tuple\"}],\"internalType\":\"struct IOnChainMetadata.SongContent\",\"name\":\"song\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"recordLabel\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"publisher\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"locationCreated\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"releaseDate\",\"type\":\"string\"}],\"internalType\":\"struct IOnChainMetadata.PublishingData\",\"name\":\"songPublishingData\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct IOnChainMetadata.SongMetadata\",\"name\":\"songMetadata\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"recordLabel\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"publisher\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"locationCreated\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"releaseDate\",\"type\":\"string\"}],\"internalType\":\"struct IOnChainMetadata.PublishingData\",\"name\":\"publishingData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"artworkUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artworkMimeType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artworkNft\",\"type\":\"string\"}],\"internalType\":\"struct IOnChainMetadata.Artwork\",\"name\":\"artwork\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"projectType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"upc\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct IOnChainMetadata.ProjectMetadata\",\"name\":\"projectMetadata\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"tags\",\"type\":\"string[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"collaboratorType\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct IOnChainMetadata.Credit[]\",\"name\":\"credits\",\"type\":\"tuple[]\"}],\"name\":\"SongUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"tags\",\"type\":\"string[]\"}],\"name\":\"TagsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"artworkUri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"artworkMimeType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"artworkNft\",\"type\":\"string\"}],\"name\":\"VisualizerUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"losslessAudio\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"artistName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"bpm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"audioMimeType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"trackNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct IOnChainMetadata.AudioQuantitative\",\"name\":\"audioQuantitative\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"license\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"externalUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"isrc\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"genre\",\"type\":\"string\"}],\"internalType\":\"struct IOnChainMetadata.AudioQualitative\",\"name\":\"audioQualitative\",\"type\":\"tuple\"}],\"internalType\":\"struct IOnChainMetadata.SongDetails\",\"name\":\"songDetails\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"lyrics\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lyricsNft\",\"type\":\"string\"}],\"internalType\":\"struct IOnChainMetadata.Lyrics\",\"name\":\"lyrics\",\"type\":\"tuple\"}],\"internalType\":\"struct IOnChainMetadata.Audio\",\"name\":\"audio\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"artworkUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artworkMimeType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artworkNft\",\"type\":\"string\"}],\"internalType\":\"struct IOnChainMetadata.Artwork\",\"name\":\"artwork\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"artworkUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artworkMimeType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artworkNft\",\"type\":\"string\"}],\"internalType\":\"struct IOnChainMetadata.Artwork\",\"name\":\"visualizer\",\"type\":\"tuple\"}],\"internalType\":\"struct IOnChainMetadata.SongContent\",\"name\":\"song\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"recordLabel\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"publisher\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"locationCreated\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"releaseDate\",\"type\":\"string\"}],\"internalType\":\"struct IOnChainMetadata.PublishingData\",\"name\":\"songPublishingData\",\"type\":\"tuple\"}],\"internalType\":\"struct IOnChainMetadata.SongMetadata\",\"name\":\"_songMetadata\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"recordLabel\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"publisher\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"locationCreated\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"releaseDate\",\"type\":\"string\"}],\"internalType\":\"struct IOnChainMetadata.PublishingData\",\"name\":\"publishingData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"artworkUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artworkMimeType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artworkNft\",\"type\":\"string\"}],\"internalType\":\"struct IOnChainMetadata.Artwork\",\"name\":\"artwork\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"projectType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"upc\",\"type\":\"string\"}],\"internalType\":\"struct IOnChainMetadata.ProjectMetadata\",\"name\":\"_projectMetadata\",\"type\":\"tuple\"},{\"internalType\":\"string[]\",\"name\":\"_tags\",\"type\":\"string[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"collaboratorType\",\"type\":\"string\"}],\"internalType\":\"struct IOnChainMetadata.Credit[]\",\"name\":\"_credits\",\"type\":\"tuple[]\"}],\"name\":\"bulkUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"initializeWithData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"projectMetadatas\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"recordLabel\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"publisher\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"locationCreated\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"releaseDate\",\"type\":\"string\"}],\"internalType\":\"struct IOnChainMetadata.PublishingData\",\"name\":\"publishingData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"artworkUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artworkMimeType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artworkNft\",\"type\":\"string\"}],\"internalType\":\"struct IOnChainMetadata.Artwork\",\"name\":\"artwork\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"projectType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"upc\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharedNFTLogic\",\"outputs\":[{\"internalType\":\"contract ISharedNFTLogic\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"songMetadatas\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"losslessAudio\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"artistName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"bpm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"audioMimeType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"trackNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct IOnChainMetadata.AudioQuantitative\",\"name\":\"audioQuantitative\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"license\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"externalUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"isrc\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"genre\",\"type\":\"string\"}],\"internalType\":\"struct IOnChainMetadata.AudioQualitative\",\"name\":\"audioQualitative\",\"type\":\"tuple\"}],\"internalType\":\"struct IOnChainMetadata.SongDetails\",\"name\":\"songDetails\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"lyrics\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lyricsNft\",\"type\":\"string\"}],\"internalType\":\"struct IOnChainMetadata.Lyrics\",\"name\":\"lyrics\",\"type\":\"tuple\"}],\"internalType\":\"struct IOnChainMetadata.Audio\",\"name\":\"audio\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"artworkUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artworkMimeType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artworkNft\",\"type\":\"string\"}],\"internalType\":\"struct IOnChainMetadata.Artwork\",\"name\":\"artwork\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"artworkUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artworkMimeType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"artworkNft\",\"type\":\"string\"}],\"internalType\":\"struct IOnChainMetadata.Artwork\",\"name\":\"visualizer\",\"type\":\"tuple\"}],\"internalType\":\"struct IOnChainMetadata.SongContent\",\"name\":\"song\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"recordLabel\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"publisher\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"locationCreated\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"releaseDate\",\"type\":\"string\"}],\"internalType\":\"struct IOnChainMetadata.PublishingData\",\"name\":\"songPublishingData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"tokenURITarget\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"collaboratorType\",\"type\":\"string\"}],\"internalType\":\"struct IOnChainMetadata.Credit[]\",\"name\":\"_credits\",\"type\":\"tuple[]\"}],\"name\":\"updateCredits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newDescription\",\"type\":\"string\"}],\"name\":\"updateDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationURI\",\"type\":\"string\"}],\"name\":\"updateMediaURIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"tags\",\"type\":\"string[]\"}],\"name\":\"updateTags\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DCNTMetadataRenderer", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d2d92f35f52ec65d39c136ebd357004472bdc758", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}