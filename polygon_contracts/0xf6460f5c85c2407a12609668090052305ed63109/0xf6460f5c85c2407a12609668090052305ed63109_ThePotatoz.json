{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ThePotatoz.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\n\\n\\n\\n\\n\\n// \\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557  \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557    \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n// \u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d    \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2588\u2588\u2588\u2554\u255d\\n//    \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557      \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2551  \u2588\u2588\u2588\u2554\u255d \\n//    \u2588\u2588\u2551   \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d      \u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2551 \u2588\u2588\u2588\u2554\u255d  \\n//    \u2588\u2588\u2551   \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557    \u2588\u2588\u2551     \u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d   \u2588\u2588\u2551   \u2588\u2588\u2551  \u2588\u2588\u2551   \u2588\u2588\u2551   \u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n//    \u255a\u2550\u255d   \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d    \u255a\u2550\u255d      \u255a\u2550\u2550\u2550\u2550\u2550\u255d    \u255a\u2550\u255d   \u255a\u2550\u255d  \u255a\u2550\u255d   \u255a\u2550\u255d    \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\\n//                                                                                          \\n// The Potatoz - generated with HeyMint.xyz Launchpad - https://nft-launchpad.heymint.xyz\\n// \\n\\n\\n\\n\\n\\n\\n\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport {IAddressRelay} from \\\"./interfaces/IAddressRelay.sol\\\";\\nimport {BaseConfig, TokenConfig} from \\\"./libraries/HeyMintStorage.sol\\\";\\n\\ncontract ThePotatoz {\\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n    bytes32 internal constant _ADDRESS_RELAY_SLOT =\\n        keccak256(\\\"heymint.launchpad.1155.addressRelay\\\");\\n\\n    /**\\n     * @notice Initializes the child contract with the base implementation address and the configuration settings\\n     * @param _name The name of the NFT\\n     * @param _symbol The symbol of the NFT\\n     * @param _baseConfig Base configuration settings\\n     */\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _addressRelay,\\n        address _implementation,\\n        BaseConfig memory _baseConfig,\\n        TokenConfig[] memory _tokenConfig\\n    ) {\\n        StorageSlot\\n            .getAddressSlot(_IMPLEMENTATION_SLOT)\\n            .value = _implementation;\\n        StorageSlot.getAddressSlot(_ADDRESS_RELAY_SLOT).value = _addressRelay;\\n        IAddressRelay addressRelay = IAddressRelay(_addressRelay);\\n        address implContract = addressRelay.fallbackImplAddress();\\n        (bool success, ) = implContract.delegatecall(\\n            abi.encodeWithSelector(\\n                0xd940392c,\\n                _name,\\n                _symbol,\\n                _baseConfig,\\n                _tokenConfig\\n            )\\n        );\\n        require(success);\\n    }\\n\\n    /**\\n     * @dev Delegates the current call to nftImplementation\\n     *\\n     * This function does not return to its internal call site - it will return directly to the external caller.\\n     */\\n    fallback() external payable {\\n        IAddressRelay addressRelay = IAddressRelay(\\n            StorageSlot.getAddressSlot(_ADDRESS_RELAY_SLOT).value\\n        );\\n        address implContract = addressRelay.getImplAddress(msg.sig);\\n\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(\\n                gas(),\\n                implContract,\\n                0,\\n                calldatasize(),\\n                0,\\n                0\\n            )\\n            returndatacopy(0, 0, returndatasize())\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/common/ERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155Supply is ERC1155 {\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155Supply.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = _totalSupply[id];\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    _totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/AddressRelay.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IAddressRelay, Implementation} from \\\"./interfaces/IAddressRelay.sol\\\";\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {IERC173} from \\\"./interfaces/IERC173.sol\\\";\\n\\n/**\\n * @author Created by HeyMint Launchpad https://join.heymint.xyz\\n * @notice This contract contains the base logic for ERC-721A tokens deployed with HeyMint\\n */\\ncontract AddressRelay is IAddressRelay, Ownable {\\n    mapping(bytes4 => address) public selectorToImplAddress;\\n    mapping(bytes4 => bool) public supportedInterfaces;\\n    bytes4[] selectors;\\n    address[] implAddresses;\\n    address public fallbackImplAddress;\\n    bool public relayFrozen;\\n\\n    constructor() {\\n        supportedInterfaces[0x01ffc9a7] = true; // IERC165\\n        supportedInterfaces[0x7f5828d0] = true; // IERC173\\n        supportedInterfaces[0xd9b67a26] = true; // ERC-1155\\n        supportedInterfaces[0x0e89341c] = true; // ERC1155MetadataURI\\n        supportedInterfaces[0x2a55205a] = true; // IERC2981\\n    }\\n\\n    /**\\n     * @notice Permanently freezes the relay so no more selectors can be added or removed\\n     */\\n    function freezeRelay() external onlyOwner {\\n        relayFrozen = true;\\n    }\\n\\n    /**\\n     * @notice Adds or updates selectors and their implementation addresses\\n     * @param _selectors The selectors to add or update\\n     * @param _implAddress The implementation address the selectors will point to\\n     */\\n    function addOrUpdateSelectors(\\n        bytes4[] memory _selectors,\\n        address _implAddress\\n    ) external onlyOwner {\\n        require(!relayFrozen, \\\"RELAY_FROZEN\\\");\\n        for (uint256 i = 0; i < _selectors.length; i++) {\\n            bytes4 selector = _selectors[i];\\n            selectorToImplAddress[selector] = _implAddress;\\n            selectors.push(selector);\\n        }\\n        bool implAddressExists = false;\\n        for (uint256 i = 0; i < implAddresses.length; i++) {\\n            if (implAddresses[i] == _implAddress) {\\n                implAddressExists = true;\\n                break;\\n            }\\n        }\\n        if (!implAddressExists) {\\n            implAddresses.push(_implAddress);\\n        }\\n    }\\n\\n    /**\\n     * @notice Removes selectors\\n     * @param _selectors The selectors to remove\\n     */\\n    function removeSelectors(bytes4[] memory _selectors) external onlyOwner {\\n        require(!relayFrozen, \\\"RELAY_FROZEN\\\");\\n        for (uint256 i = 0; i < _selectors.length; i++) {\\n            bytes4 selector = _selectors[i];\\n            delete selectorToImplAddress[selector];\\n            uint256 selectorsLen = selectors.length;\\n            for (uint256 j = 0; j < selectorsLen; j++) {\\n                if (selectors[j] == selector) {\\n                    if (j != selectorsLen - 1) {\\n                        // if not last element, copy last to deleted element's slot\\n                        selectors[j] = selectors[selectorsLen - 1];\\n                    }\\n                    // pop last element\\n                    selectors.pop();\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Removes an implementation address and all the selectors that point to it\\n     * @param _implAddress The implementation address to remove\\n     */\\n    function removeImplAddressAndAllSelectors(\\n        address _implAddress\\n    ) external onlyOwner {\\n        require(!relayFrozen, \\\"RELAY_FROZEN\\\");\\n        for (uint256 i = 0; i < implAddresses.length; i++) {\\n            if (implAddresses[i] == _implAddress) {\\n                // this just sets the value to 0, but doesn't remove it from the array\\n                delete implAddresses[i];\\n                break;\\n            }\\n        }\\n        for (uint256 i = 0; i < selectors.length; i++) {\\n            if (selectorToImplAddress[selectors[i]] == _implAddress) {\\n                delete selectorToImplAddress[selectors[i]];\\n                delete selectors[i];\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the implementation address for a given function selector\\n     * @param _functionSelector The function selector to get the implementation address for\\n     */\\n    function getImplAddress(\\n        bytes4 _functionSelector\\n    ) external view returns (address) {\\n        address implAddress = selectorToImplAddress[_functionSelector];\\n        if (implAddress == address(0)) {\\n            implAddress = fallbackImplAddress;\\n        }\\n        require(implAddress != address(0), \\\"Function does not exist\\\");\\n        return implAddress;\\n    }\\n\\n    /**\\n     * @notice Returns the implementation address for a given function selector. Throws an error if function does not exist.\\n     * @param _functionSelector The function selector to get the implementation address for\\n     */\\n    function getImplAddressNoFallback(\\n        bytes4 _functionSelector\\n    ) external view returns (address) {\\n        address implAddress = selectorToImplAddress[_functionSelector];\\n        require(implAddress != address(0), \\\"Function does not exist\\\");\\n        return implAddress;\\n    }\\n\\n    /**\\n     * @notice Returns all the implementation addresses and the selectors they support\\n     * @return impls_ An array of Implementation structs\\n     */\\n    function getAllImplAddressesAndSelectors()\\n        external\\n        view\\n        returns (Implementation[] memory)\\n    {\\n        uint256 trueImplAddressCount = 0;\\n        uint256 implAddressesLength = implAddresses.length;\\n        for (uint256 i = 0; i < implAddressesLength; i++) {\\n            if (implAddresses[i] != address(0)) {\\n                trueImplAddressCount++;\\n            }\\n        }\\n        Implementation[] memory impls = new Implementation[](\\n            trueImplAddressCount\\n        );\\n        for (uint256 i = 0; i < implAddressesLength; i++) {\\n            if (implAddresses[i] == address(0)) {\\n                continue;\\n            }\\n            address implAddress = implAddresses[i];\\n            bytes4[] memory selectors_;\\n            uint256 selectorCount = 0;\\n            uint256 selectorsLength = selectors.length;\\n            for (uint256 j = 0; j < selectorsLength; j++) {\\n                if (selectorToImplAddress[selectors[j]] == implAddress) {\\n                    selectorCount++;\\n                }\\n            }\\n            selectors_ = new bytes4[](selectorCount);\\n            uint256 selectorIndex = 0;\\n            for (uint256 j = 0; j < selectorsLength; j++) {\\n                if (selectorToImplAddress[selectors[j]] == implAddress) {\\n                    selectors_[selectorIndex] = selectors[j];\\n                    selectorIndex++;\\n                }\\n            }\\n            impls[i] = Implementation(implAddress, selectors_);\\n        }\\n        return impls;\\n    }\\n\\n    /**\\n     * @notice Return all the function selectors associated with an implementation address\\n     * @param _implAddress The implementation address to get the selectors for\\n     */\\n    function getSelectorsForImplAddress(\\n        address _implAddress\\n    ) external view returns (bytes4[] memory) {\\n        uint256 selectorCount = 0;\\n        uint256 selectorsLength = selectors.length;\\n        for (uint256 i = 0; i < selectorsLength; i++) {\\n            if (selectorToImplAddress[selectors[i]] == _implAddress) {\\n                selectorCount++;\\n            }\\n        }\\n        bytes4[] memory selectorArr = new bytes4[](selectorCount);\\n        uint256 selectorIndex = 0;\\n        for (uint256 i = 0; i < selectorsLength; i++) {\\n            if (selectorToImplAddress[selectors[i]] == _implAddress) {\\n                selectorArr[selectorIndex] = selectors[i];\\n                selectorIndex++;\\n            }\\n        }\\n        return selectorArr;\\n    }\\n\\n    /**\\n     * @notice Sets the fallback implementation address to use when a function selector is not found\\n     * @param _fallbackAddress The fallback implementation address\\n     */\\n    function setFallbackImplAddress(\\n        address _fallbackAddress\\n    ) external onlyOwner {\\n        require(!relayFrozen, \\\"RELAY_FROZEN\\\");\\n        fallbackImplAddress = _fallbackAddress;\\n    }\\n\\n    /**\\n     * @notice Updates the supported interfaces\\n     * @param _interfaceId The interface ID to update\\n     * @param _supported Whether the interface is supported or not\\n     */\\n    function updateSupportedInterfaces(\\n        bytes4 _interfaceId,\\n        bool _supported\\n    ) external onlyOwner {\\n        supportedInterfaces[_interfaceId] = _supported;\\n    }\\n\\n    /**\\n     * @notice Returns whether the interface is supported or not\\n     * @param _interfaceId The interface ID to check\\n     */\\n    function supportsInterface(\\n        bytes4 _interfaceId\\n    ) external view returns (bool) {\\n        return supportedInterfaces[_interfaceId];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/implementations/EIP712PermitUDS.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// ------------- storage\\n\\nbytes32 constant DIAMOND_STORAGE_EIP_712_PERMIT = keccak256(\\n    \\\"diamond.storage.eip.712.permit\\\"\\n);\\n\\nfunction s() pure returns (EIP2612DS storage diamondStorage) {\\n    bytes32 slot = DIAMOND_STORAGE_EIP_712_PERMIT;\\n    assembly {\\n        diamondStorage.slot := slot\\n    }\\n}\\n\\nstruct EIP2612DS {\\n    mapping(address => uint256) nonces;\\n}\\n\\n// ------------- errors\\n\\nerror InvalidSigner();\\nerror DeadlineExpired();\\n\\n/// @title EIP712Permit (Upgradeable Diamond Storage)\\n/// @author phaze (https://github.com/0xPhaze/UDS)\\n/// @author Modified from Solmate (https://github.com/Rari-Capital/solmate)\\n/// @dev `DOMAIN_SEPARATOR` needs to be re-computed every time\\n///      when using with a proxy, due to `address(this)`\\nabstract contract EIP712PermitUDS {\\n    EIP2612DS private __storageLayout; // storage layout for upgrade compatibility checks\\n\\n    bytes32 immutable _EIP_712_DOMAIN_TYPEHASH;\\n    bytes32 immutable _NAME_HASH;\\n    bytes32 immutable _VERSION_HASH;\\n\\n    constructor(string memory name, string memory version) {\\n        _EIP_712_DOMAIN_TYPEHASH = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _NAME_HASH = keccak256(bytes(name));\\n        _VERSION_HASH = keccak256(bytes(version));\\n    }\\n\\n    /* ------------- public ------------- */\\n\\n    function nonces(address owner) public view returns (uint256) {\\n        return s().nonces[owner];\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    _EIP_712_DOMAIN_TYPEHASH,\\n                    _NAME_HASH,\\n                    _VERSION_HASH,\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /* ------------- internal ------------- */\\n\\n    function _usePermit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v_,\\n        bytes32 r_,\\n        bytes32 s_\\n    ) internal virtual {\\n        if (deadline < block.timestamp) revert DeadlineExpired();\\n\\n        unchecked {\\n            uint256 nonce = s().nonces[owner]++;\\n\\n            address recovered = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonce,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v_,\\n                r_,\\n                s_\\n            );\\n\\n            if (recovered == address(0) || recovered != owner)\\n                revert InvalidSigner();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/implementations/ERC1155UDS.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {EIP712PermitUDS} from \\\"./EIP712PermitUDS.sol\\\";\\n\\n// ------------- storage\\n\\nbytes32 constant DIAMOND_STORAGE_ERC1155 = keccak256(\\\"diamond.storage.erc1155\\\");\\n\\nfunction s() pure returns (ERC1155DS storage diamondStorage) {\\n    bytes32 slot = DIAMOND_STORAGE_ERC1155;\\n    assembly {\\n        diamondStorage.slot := slot\\n    }\\n}\\n\\nstruct ERC1155DS {\\n    mapping(address => mapping(uint256 => uint256)) balanceOf;\\n    mapping(address => mapping(address => bool)) isApprovedForAll;\\n}\\n\\n// ------------- errors\\n\\nerror NotAuthorized();\\nerror LengthMismatch();\\nerror UnsafeRecipient();\\n\\n/// @title ERC1155 (Upgradeable Diamond Storage)\\n/// @author phaze (https://github.com/0xPhaze/UDS)\\n/// @author Modified from Solmate ERC1155 (https://github.com/Rari-Capital/solmate)\\nabstract contract ERC1155UDS is EIP712PermitUDS(\\\"ERC1155Permit\\\", \\\"1\\\") {\\n    ERC1155DS private __storageLayout; // storage layout for upgrade compatibility checks\\n\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n    event URI(string value, uint256 indexed id);\\n\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 amount\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] amounts\\n    );\\n\\n    /* ------------- virtual ------------- */\\n\\n    function uri(uint256 id) public view virtual returns (string memory);\\n\\n    /**\\n     * @dev Hook that is called before any token transfer.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called before any batch token transfer.\\n     */\\n    function _beforeBatchTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /* ------------- view ------------- */\\n\\n    function balanceOf(\\n        address owner,\\n        uint256 id\\n    ) public view virtual returns (uint256) {\\n        return s().balanceOf[owner][id];\\n    }\\n\\n    function balanceOfBatch(\\n        address[] calldata owners,\\n        uint256[] calldata ids\\n    ) public view virtual returns (uint256[] memory balances) {\\n        if (owners.length != ids.length) revert LengthMismatch();\\n\\n        balances = new uint256[](owners.length);\\n\\n        unchecked {\\n            for (uint256 i = 0; i < owners.length; ++i) {\\n                balances[i] = s().balanceOf[owners[i]][ids[i]];\\n            }\\n        }\\n    }\\n\\n    function isApprovedForAll(\\n        address operator,\\n        address owner\\n    ) public view returns (bool) {\\n        return s().isApprovedForAll[operator][owner];\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0xd9b67a26 || // ERC165 Interface ID for ERC1155\\n            interfaceId == 0x0e89341c; // ERC165 Interface ID for ERC1155MetadataURI\\n    }\\n\\n    /* ------------- public ------------- */\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        s().isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual {\\n        if (msg.sender != from && !s().isApprovedForAll[from][msg.sender])\\n            revert NotAuthorized();\\n\\n        _beforeTokenTransfer(msg.sender, from, to, id, amount, data);\\n\\n        s().balanceOf[from][id] -= amount;\\n        s().balanceOf[to][id] += amount;\\n\\n        emit TransferSingle(msg.sender, from, to, id, amount);\\n\\n        if (\\n            to.code.length == 0\\n                ? to == address(0)\\n                : ERC1155TokenReceiver(to).onERC1155Received(\\n                    msg.sender,\\n                    from,\\n                    id,\\n                    amount,\\n                    data\\n                ) != ERC1155TokenReceiver.onERC1155Received.selector\\n        ) revert UnsafeRecipient();\\n    }\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes memory data\\n    ) public virtual {\\n        if (ids.length != amounts.length) revert LengthMismatch();\\n        if (msg.sender != from && !s().isApprovedForAll[from][msg.sender])\\n            revert NotAuthorized();\\n\\n        _beforeBatchTokenTransfer(msg.sender, from, to, ids, amounts, data);\\n\\n        uint256 id;\\n        uint256 amount;\\n\\n        for (uint256 i = 0; i < ids.length; ) {\\n            id = ids[i];\\n            amount = amounts[i];\\n\\n            s().balanceOf[from][id] -= amount;\\n            s().balanceOf[to][id] += amount;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, from, to, ids, amounts);\\n\\n        if (\\n            to.code.length == 0\\n                ? to == address(0)\\n                : ERC1155TokenReceiver(to).onERC1155BatchReceived(\\n                    msg.sender,\\n                    from,\\n                    ids,\\n                    amounts,\\n                    data\\n                ) != ERC1155TokenReceiver.onERC1155BatchReceived.selector\\n        ) revert UnsafeRecipient();\\n    }\\n\\n    // EIP-4494 permit; differs from the current EIP\\n    function permit(\\n        address owner,\\n        address operator,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s_\\n    ) public virtual {\\n        _usePermit(owner, operator, 1, deadline, v, r, s_);\\n\\n        s().isApprovedForAll[owner][operator] = true;\\n\\n        emit ApprovalForAll(owner, operator, true);\\n    }\\n\\n    /* ------------- internal ------------- */\\n\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        s().balanceOf[to][id] += amount;\\n\\n        emit TransferSingle(msg.sender, address(0), to, id, amount);\\n\\n        if (\\n            to.code.length == 0\\n                ? to == address(0)\\n                : ERC1155TokenReceiver(to).onERC1155Received(\\n                    msg.sender,\\n                    address(0),\\n                    id,\\n                    amount,\\n                    data\\n                ) != ERC1155TokenReceiver.onERC1155Received.selector\\n        ) revert UnsafeRecipient();\\n    }\\n\\n    function _batchMint(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        uint256 idsLength = ids.length;\\n\\n        if (idsLength != amounts.length) revert LengthMismatch();\\n\\n        for (uint256 i = 0; i < idsLength; ) {\\n            s().balanceOf[to][ids[i]] += amounts[i];\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, address(0), to, ids, amounts);\\n\\n        if (\\n            to.code.length == 0\\n                ? to == address(0)\\n                : ERC1155TokenReceiver(to).onERC1155BatchReceived(\\n                    msg.sender,\\n                    address(0),\\n                    ids,\\n                    amounts,\\n                    data\\n                ) != ERC1155TokenReceiver.onERC1155BatchReceived.selector\\n        ) revert UnsafeRecipient();\\n    }\\n\\n    function _batchBurn(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        uint256 idsLength = ids.length;\\n\\n        if (idsLength != amounts.length) revert LengthMismatch();\\n\\n        for (uint256 i = 0; i < idsLength; ) {\\n            s().balanceOf[from][ids[i]] -= amounts[i];\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, from, address(0), ids, amounts);\\n    }\\n\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        s().balanceOf[from][id] -= amount;\\n\\n        emit TransferSingle(msg.sender, from, address(0), id, amount);\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which properly accepts ERC1155 tokens.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC1155.sol)\\nabstract contract ERC1155TokenReceiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        return ERC1155TokenReceiver.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        return ERC1155TokenReceiver.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/implementations/ERC1967Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// ------------- storage\\n\\n/// @dev computed as `keccak256(\\\"eip1967.proxy.implementation\\\") - 1`\\nbytes32 constant ERC1967_PROXY_STORAGE_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\nfunction s() pure returns (ERC1967UpgradeDS storage diamondStorage) {\\n    assembly {\\n        diamondStorage.slot := ERC1967_PROXY_STORAGE_SLOT\\n    }\\n}\\n\\nstruct ERC1967UpgradeDS {\\n    address implementation;\\n}\\n\\n// ------------- errors\\n\\nerror InvalidUUID();\\nerror NotAContract();\\n\\n/// @title ERC1967\\n/// @author phaze (https://github.com/0xPhaze/UDS)\\nabstract contract ERC1967 {\\n    event Upgraded(address indexed implementation);\\n\\n    function _upgradeToAndCall(address logic, bytes memory data) internal {\\n        if (logic.code.length == 0) revert NotAContract();\\n\\n        if (ERC1822(logic).proxiableUUID() != ERC1967_PROXY_STORAGE_SLOT)\\n            revert InvalidUUID();\\n\\n        if (data.length != 0) {\\n            (bool success, ) = logic.delegatecall(data);\\n\\n            if (!success) {\\n                assembly {\\n                    returndatacopy(0, 0, returndatasize())\\n                    revert(0, returndatasize())\\n                }\\n            }\\n        }\\n\\n        s().implementation = logic;\\n\\n        emit Upgraded(logic);\\n    }\\n}\\n\\n/// @title Minimal ERC1967Proxy\\n/// @author phaze (https://github.com/0xPhaze/UDS)\\ncontract ERC1967Proxy is ERC1967 {\\n    constructor(address logic, bytes memory data) payable {\\n        _upgradeToAndCall(logic, data);\\n    }\\n\\n    fallback() external payable {\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n\\n            let success := delegatecall(\\n                gas(),\\n                sload(ERC1967_PROXY_STORAGE_SLOT),\\n                0,\\n                calldatasize(),\\n                0,\\n                0\\n            )\\n\\n            returndatacopy(0, 0, returndatasize())\\n\\n            if success {\\n                return(0, returndatasize())\\n            }\\n\\n            revert(0, returndatasize())\\n        }\\n    }\\n}\\n\\n/// @title ERC1822\\n/// @author phaze (https://github.com/0xPhaze/UDS)\\nabstract contract ERC1822 {\\n    function proxiableUUID() external view virtual returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/implementations/HeyMintERC1155ExtensionA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {HeyMintERC1155Upgradeable} from \\\"./HeyMintERC1155Upgradeable.sol\\\";\\nimport {BaseConfig, TokenConfig, HeyMintStorage} from \\\"../libraries/HeyMintStorage.sol\\\";\\nimport {ERC1155UDS} from \\\"./ERC1155UDS.sol\\\";\\n\\nimport {ECDSAUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport {IERC2981Upgradeable, IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\\\";\\nimport {RevokableOperatorFiltererUpgradeable} from \\\"operator-filter-registry/src/upgradeable/RevokableOperatorFiltererUpgradeable.sol\\\";\\n\\ncontract HeyMintERC1155ExtensionA is\\n    HeyMintERC1155Upgradeable,\\n    IERC2981Upgradeable\\n{\\n    using HeyMintStorage for HeyMintStorage.State;\\n\\n    // Default subscription address to use to enable royalty enforcement on certain exchanges like OpenSea\\n    address public constant CORI_SUBSCRIPTION_ADDRESS =\\n        0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6;\\n    // Default subscription address to use as a placeholder for no royalty enforcement\\n    address public constant EMPTY_SUBSCRIPTION_ADDRESS =\\n        0x511af84166215d528ABf8bA6437ec4BEcF31934B;\\n\\n    /**\\n     * @notice Initializes a new child deposit contract\\n     * @param _name The name of the collection\\n     * @param _symbol The symbol of the collection\\n     * @param _config Base configuration settings\\n     * @param _tokenConfig Array of token configuration settings\\n     */\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        BaseConfig memory _config,\\n        TokenConfig[] memory _tokenConfig\\n    ) public initializer {\\n        __Ownable_init();\\n        __OperatorFilterer_init(\\n            _config.enforceRoyalties == true\\n                ? CORI_SUBSCRIPTION_ADDRESS\\n                : EMPTY_SUBSCRIPTION_ADDRESS,\\n            true\\n        );\\n\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        state.cfg = _config;\\n        state.name = _name;\\n        state.symbol = _symbol;\\n        for (uint i = 0; i < _tokenConfig.length; i++) {\\n            state.tokens[_tokenConfig[i].tokenId] = _tokenConfig[i];\\n            state.data.tokenIds.push(_tokenConfig[i].tokenId);\\n        }\\n    }\\n\\n    // ============ BASE FUNCTIONALITY ============\\n\\n    /**\\n     * @notice Returns true if the contract implements the interface defined by interfaceId\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    )\\n        public\\n        view\\n        virtual\\n        override(HeyMintERC1155Upgradeable, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return HeyMintStorage.state().name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return HeyMintStorage.state().symbol;\\n    }\\n\\n    /**\\n     * @notice Lock a token id so that it can never be minted again\\n     */\\n    function permanentlyDisableTokenMinting(\\n        uint16 _tokenId\\n    ) external onlyOwner {\\n        HeyMintStorage.state().data.tokenMintingPermanentlyDisabled[\\n            _tokenId\\n        ] = true;\\n    }\\n\\n    // ============ ERC-2981 ROYALTY ============\\n\\n    /**\\n     * @notice Basic gas saving implementation of ERC-2981 royaltyInfo function with receiver set to the contract owner\\n     * @param _salePrice The sale price used to determine the royalty amount\\n     */\\n    function royaltyInfo(\\n        uint256,\\n        uint256 _salePrice\\n    ) external view override returns (address, uint256) {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        address payoutAddress = state.advCfg.royaltyPayoutAddress !=\\n            address(0x0)\\n            ? state.advCfg.royaltyPayoutAddress\\n            : owner();\\n        if (payoutAddress == address(0x0)) {\\n            return (payoutAddress, 0);\\n        }\\n        return (payoutAddress, (_salePrice * state.cfg.royaltyBps) / 10000);\\n    }\\n\\n    /**\\n     * @notice Updates royalty basis points\\n     * @param _royaltyBps The new royalty basis points to use\\n     */\\n    function setRoyaltyBasisPoints(uint16 _royaltyBps) external onlyOwner {\\n        HeyMintStorage.state().cfg.royaltyBps = _royaltyBps;\\n    }\\n\\n    /**\\n     * @notice Updates royalty payout address\\n     * @param _royaltyPayoutAddress The new royalty payout address to use\\n     */\\n    function setRoyaltyPayoutAddress(\\n        address _royaltyPayoutAddress\\n    ) external onlyOwner {\\n        HeyMintStorage\\n            .state()\\n            .advCfg\\n            .royaltyPayoutAddress = _royaltyPayoutAddress;\\n    }\\n\\n    // ============ OPERATOR FILTER REGISTRY ============\\n\\n    /**\\n     * @notice Override default ERC-1155 setApprovalForAll to require that the operator is not from a blocklisted exchange\\n     * @param operator Address to add to the set of authorized operators\\n     * @param approved True if the operator is approved, false to revoke approval\\n     */\\n    function setApprovalForAll(\\n        address operator,\\n        bool approved\\n    ) public override(ERC1155UDS) onlyAllowedOperatorApproval(operator) {\\n        return super.setApprovalForAll(operator, approved);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/implementations/HeyMintERC1155ExtensionB.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {HeyMintERC1155Upgradeable} from \\\"./HeyMintERC1155Upgradeable.sol\\\";\\nimport {HeyMintStorage, TokenConfig, AdvancedConfig} from \\\"../libraries/HeyMintStorage.sol\\\";\\n\\ncontract HeyMintERC1155ExtensionB is HeyMintERC1155Upgradeable {\\n    using HeyMintStorage for HeyMintStorage.State;\\n\\n    /**\\n     * @notice Returns how many of a given token have been minted\\n     */\\n    function totalSupply(uint16 _tokenId) external view returns (uint16) {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        return state.data.totalSupply[_tokenId];\\n    }\\n\\n    // ============ PUBLIC SALE ============\\n\\n    /**\\n     * @notice To be updated by contract owner to allow public sale minting for a given token\\n     */\\n    function setTokenPublicSaleState(\\n        uint16 _tokenId,\\n        bool _saleActiveState\\n    ) external onlyOwner {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        state.tokens[_tokenId].publicSaleActive = _saleActiveState;\\n    }\\n\\n    /**\\n     * @notice Update the public mint price for a given token\\n     */\\n    function setTokenPublicPrice(\\n        uint16 _tokenId,\\n        uint32 _publicPrice\\n    ) external onlyOwner {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        state.tokens[_tokenId].publicPrice = _publicPrice;\\n    }\\n\\n    function setTokenMaxSupply(\\n        uint16 _tokenId,\\n        uint16 _maxSupply\\n    ) external onlyOwner {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        require(\\n            _maxSupply >= state.data.totalSupply[_tokenId],\\n            \\\"MAX_SUPPLY_LESS_THAN_TOTAL_SUPPLY\\\"\\n        );\\n        state.tokens[_tokenId].maxSupply = _maxSupply;\\n    }\\n\\n    /**\\n     * @notice Set the maximum public mints allowed per a given address for a given token\\n     */\\n    function setTokenPublicMintsAllowedPerAddress(\\n        uint16 _tokenId,\\n        uint8 _mintsAllowed\\n    ) external onlyOwner {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        state.tokens[_tokenId].publicMintsAllowedPerAddress = _mintsAllowed;\\n    }\\n\\n    /**\\n     * @notice Update the start time for public mint for a given token\\n     */\\n    function setTokenPublicSaleStartTime(\\n        uint16 _tokenId,\\n        uint32 _publicSaleStartTime\\n    ) external onlyOwner {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        require(_publicSaleStartTime > block.timestamp, \\\"TIME_IN_PAST\\\");\\n        state.tokens[_tokenId].publicSaleStartTime = _publicSaleStartTime;\\n    }\\n\\n    /**\\n     * @notice Update the end time for public mint for a given token\\n     */\\n    function setTokenPublicSaleEndTime(\\n        uint16 _tokenId,\\n        uint32 _publicSaleEndTime\\n    ) external onlyOwner {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        require(_publicSaleEndTime > block.timestamp, \\\"TIME_IN_PAST\\\");\\n        require(\\n            state.tokens[_tokenId].publicSaleStartTime < _publicSaleEndTime,\\n            \\\"END_TIME_BEFORE_START_TIME\\\"\\n        );\\n        state.tokens[_tokenId].publicSaleEndTime = _publicSaleEndTime;\\n    }\\n\\n    /**\\n     * @notice Update whether or not to use the automatic public sale times for a given token\\n     */\\n    function setTokenUsePublicSaleTimes(\\n        uint16 _tokenId,\\n        bool _usePublicSaleTimes\\n    ) external onlyOwner {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        state.tokens[_tokenId].usePublicSaleTimes = _usePublicSaleTimes;\\n    }\\n\\n    function mintToken(\\n        uint16 _tokenId,\\n        uint16 _numTokens\\n    ) external payable nonReentrant notPaused {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        uint16 totalSupply = state.data.totalSupply[_tokenId];\\n        uint256 heymintFee = _numTokens * heymintFeePerToken();\\n        uint256 publicPrice = publicPriceInWei(_tokenId);\\n        require(\\n            state.tokens[_tokenId].publicSaleActive,\\n            \\\"PUBLIC_SALE_IS_NOT_ACTIVE\\\"\\n        );\\n        require(\\n            tokenPublicSaleTimeIsActive(_tokenId),\\n            \\\"PUBLIC_SALE_TIME_IS_NOT_ACTIVE\\\"\\n        );\\n        uint16 newTokensMintedByAddress = state.data.tokensMintedByAddress[\\n            msg.sender\\n        ][_tokenId] + _numTokens;\\n        uint16 publicMintsAllowedPerAddress = state\\n            .tokens[_tokenId]\\n            .publicMintsAllowedPerAddress;\\n        require(\\n            publicMintsAllowedPerAddress == 0 ||\\n                newTokensMintedByAddress <= publicMintsAllowedPerAddress,\\n            \\\"MAX_MINTS_FOR_ADDRESS_EXCEEDED\\\"\\n        );\\n        uint16 newTotalSupply = totalSupply + _numTokens;\\n        uint16 _maxSupply = state.tokens[_tokenId].maxSupply;\\n        require(\\n            _maxSupply == 0 ||\\n                newTotalSupply <= state.tokens[_tokenId].maxSupply,\\n            \\\"MAX_SUPPLY_EXCEEDED\\\"\\n        );\\n        require(\\n            msg.value == publicPrice * _numTokens + heymintFee,\\n            \\\"PAYMENT_INCORRECT\\\"\\n        );\\n        require(\\n            !state.data.tokenMintingPermanentlyDisabled[_tokenId],\\n            \\\"MINTING_PERMANENTLY_DISABLED\\\"\\n        );\\n        if (heymintFee > 0) {\\n            (bool success, ) = heymintPayoutAddress.call{value: heymintFee}(\\\"\\\");\\n            require(success, \\\"HeyMint fee transfer failed\\\");\\n        }\\n        state.data.totalSupply[_tokenId] = newTotalSupply;\\n        state.data.tokensMintedByAddress[msg.sender][\\n            _tokenId\\n        ] = newTokensMintedByAddress;\\n\\n        _mint(msg.sender, _tokenId, _numTokens, \\\"\\\");\\n\\n        if (_maxSupply != 0 && newTotalSupply == _maxSupply) {\\n            state.tokens[_tokenId].publicSaleActive = false;\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the number of tokens minted by a specific address\\n     */\\n    function tokensMintedByAddress(\\n        address _address,\\n        uint16 _tokenId\\n    ) external view returns (uint16) {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        return state.data.tokensMintedByAddress[_address][_tokenId];\\n    }\\n\\n    // ============ HEYMINT FEE ============\\n\\n    // Address of the HeyMint admin\\n    address public constant heymintAdminAddress =\\n        0x52EA5F96f004d174470901Ba3F1984D349f0D3eF;\\n\\n    /**\\n     * @notice Allows the heymintAdminAddress to set the heymint fee per token\\n     * @param _heymintFeePerToken The new fee per token in wei\\n     */\\n    function setHeymintFeePerToken(uint256 _heymintFeePerToken) external {\\n        require(msg.sender == heymintAdminAddress, \\\"MUST_BE_HEYMINT_ADMIN\\\");\\n        HeyMintStorage.state().data.heymintFeePerToken = _heymintFeePerToken;\\n    }\\n\\n    // ============ PAYOUT ============\\n\\n    /**\\n     * @notice Withdraws all funds held within contract\\n     */\\n    function withdraw() external nonReentrant onlyOwner {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        require(\\n            !anyTokenRefundGuaranteeActive(),\\n            \\\"REFUND_GUARANTEE_STILL_ACTIVE\\\"\\n        );\\n        uint256 balance = address(this).balance;\\n        if (state.advCfg.payoutAddresses.length == 0) {\\n            (bool success, ) = payable(owner()).call{value: balance}(\\\"\\\");\\n            require(success, \\\"TRANSFER_FAILED\\\");\\n        } else {\\n            for (uint256 i = 0; i < state.advCfg.payoutAddresses.length; i++) {\\n                uint256 amount = (balance * state.advCfg.payoutBasisPoints[i]) /\\n                    10000;\\n                (bool success, ) = HeyMintStorage\\n                    .state()\\n                    .advCfg\\n                    .payoutAddresses[i]\\n                    .call{value: amount}(\\\"\\\");\\n                require(success, \\\"TRANSFER_FAILED\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Freeze all payout addresses & basis points so they can never be changed again\\n     */\\n    function freezePayoutAddresses() external onlyOwner {\\n        HeyMintStorage.state().advCfg.payoutAddressesFrozen = true;\\n    }\\n\\n    /**\\n     * @notice Will return true if token holders can still return their tokens for a refund\\n     * @param _tokenId The token id\\n     */\\n    function refundGuaranteeActive(uint16 _tokenId) public view returns (bool) {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        return block.timestamp < state.tokens[_tokenId].refundEndsAt;\\n    }\\n\\n    /**\\n     * Will return true if any token refund is still active\\n     */\\n    function anyTokenRefundGuaranteeActive() public view returns (bool) {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        for (uint256 i = 0; i < state.data.tokenIds.length; i++) {\\n            if (refundGuaranteeActive(state.data.tokenIds[i])) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Update payout addresses and basis points for each addresses' respective share of contract funds\\n     * @param _payoutAddresses The new payout addresses to use\\n     * @param _payoutBasisPoints The amount to pay out to each address in _payoutAddresses (in basis points)\\n     */\\n    function updatePayoutAddressesAndBasisPoints(\\n        address[] calldata _payoutAddresses,\\n        uint16[] calldata _payoutBasisPoints\\n    ) external onlyOwner {\\n        AdvancedConfig storage advCfg = HeyMintStorage.state().advCfg;\\n        require(!advCfg.payoutAddressesFrozen, \\\"PAYOUT_ADDRESSES_FROZEN\\\");\\n        uint256 payoutBasisPointsLength = _payoutBasisPoints.length;\\n        require(\\n            _payoutAddresses.length == payoutBasisPointsLength,\\n            \\\"ARRAY_LENGTHS_MUST_MATCH\\\"\\n        );\\n        uint256 totalBasisPoints = 0;\\n        for (uint256 i = 0; i < payoutBasisPointsLength; i++) {\\n            totalBasisPoints += _payoutBasisPoints[i];\\n        }\\n        require(totalBasisPoints == 10000, \\\"BASIS_POINTS_MUST_EQUAL_10000\\\");\\n        advCfg.payoutAddresses = _payoutAddresses;\\n        advCfg.payoutBasisPoints = _payoutBasisPoints;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/implementations/HeyMintERC1155ExtensionC.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {HeyMintERC1155Upgradeable} from \\\"./HeyMintERC1155Upgradeable.sol\\\";\\nimport {HeyMintStorage, TokenConfig} from \\\"../libraries/HeyMintStorage.sol\\\";\\nimport {ECDSAUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\n\\ncontract HeyMintERC1155ExtensionC is HeyMintERC1155Upgradeable {\\n    using HeyMintStorage for HeyMintStorage.State;\\n    using ECDSAUpgradeable for bytes32;\\n\\n    // ============ PRESALE ============\\n\\n    /**\\n     * @notice Set the signer address used to verify presale minting\\n     */\\n    function setPresaleSignerAddress(\\n        address _presaleSignerAddress\\n    ) external onlyOwner {\\n        require(_presaleSignerAddress != address(0));\\n        HeyMintStorage.state().cfg.presaleSignerAddress = _presaleSignerAddress;\\n    }\\n\\n    /**\\n     * @notice Verify that a signed message is validly signed by the presaleSignerAddress\\n     */\\n    function verifySignerAddress(\\n        bytes32 _messageHash,\\n        bytes calldata _signature\\n    ) private view returns (bool) {\\n        address presaleSignerAddress = HeyMintStorage\\n            .state()\\n            .cfg\\n            .presaleSignerAddress;\\n        return\\n            presaleSignerAddress ==\\n            _messageHash.toEthSignedMessageHash().recover(_signature);\\n    }\\n\\n    /**\\n     * @notice Returns the presale price in wei. Presale price is stored with 5 decimals (1 = 0.00001 ETH), so total 5 + 13 == 18 decimals\\n     */\\n    function presalePriceInWei(uint16 _tokenId) public view returns (uint256) {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        return uint256(state.tokens[_tokenId].presalePrice) * 10 ** 13;\\n    }\\n\\n    /**\\n     * @notice To be updated by contract owner to allow presale minting for a given token\\n     */\\n    function setTokenPresaleState(\\n        uint16 _tokenId,\\n        bool _presaleActiveState\\n    ) external onlyOwner {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        state.tokens[_tokenId].presaleActive = _presaleActiveState;\\n    }\\n\\n    /**\\n     * @notice Update the presale mint price for a given token\\n     */\\n    function setTokenPresalePrice(\\n        uint16 _tokenId,\\n        uint32 _presalePrice\\n    ) external onlyOwner {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        state.tokens[_tokenId].presalePrice = _presalePrice;\\n    }\\n\\n    function setTokenPresaleMaxSupply(\\n        uint16 _tokenId,\\n        uint16 _maxSupply\\n    ) external onlyOwner {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        require(\\n            _maxSupply >= state.data.totalSupply[_tokenId],\\n            \\\"MAX_SUPPLY_LESS_THAN_TOTAL_SUPPLY\\\"\\n        );\\n        state.tokens[_tokenId].presaleMaxSupply = _maxSupply;\\n    }\\n\\n    /**\\n     * @notice Set the maximum presale mints allowed per a given address for a given token\\n     */\\n    function setTokenPresaleMintsAllowedPerAddress(\\n        uint16 _tokenId,\\n        uint8 _mintsAllowed\\n    ) external onlyOwner {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        state.tokens[_tokenId].presaleMintsAllowedPerAddress = _mintsAllowed;\\n    }\\n\\n    /**\\n     * @notice Update the start time for public mint for a given token\\n     */\\n    function setTokenPresaleStartTime(\\n        uint16 _tokenId,\\n        uint32 _presaleStartTime\\n    ) external onlyOwner {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        require(_presaleStartTime > block.timestamp, \\\"TIME_IN_PAST\\\");\\n        state.tokens[_tokenId].presaleStartTime = _presaleStartTime;\\n    }\\n\\n    /**\\n     * @notice Update the end time for public mint for a given token\\n     */\\n    function setTokenPresaleEndTime(\\n        uint16 _tokenId,\\n        uint32 _presaleEndTime\\n    ) external onlyOwner {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        require(_presaleEndTime > block.timestamp, \\\"TIME_IN_PAST\\\");\\n        require(\\n            state.tokens[_tokenId].presaleStartTime < _presaleEndTime,\\n            \\\"END_TIME_BEFORE_START_TIME\\\"\\n        );\\n        state.tokens[_tokenId].presaleEndTime = _presaleEndTime;\\n    }\\n\\n    /**\\n     * @notice Update whether or not to use the automatic public sale times for a given token\\n     */\\n    function setTokenUsePresaleTimes(\\n        uint16 _tokenId,\\n        bool _usePresaleTimes\\n    ) external onlyOwner {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        state.tokens[_tokenId].usePresaleTimes = _usePresaleTimes;\\n    }\\n\\n    /**\\n     * @notice Returns if public sale times are active for a given token\\n     */\\n    function tokenPresaleTimeIsActive(\\n        uint16 _tokenId\\n    ) public view returns (bool) {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        if (state.tokens[_tokenId].usePresaleTimes == false) {\\n            return true;\\n        }\\n        return\\n            block.timestamp >= state.tokens[_tokenId].presaleStartTime &&\\n            block.timestamp <= state.tokens[_tokenId].presaleEndTime;\\n    }\\n\\n    /**\\n     * @notice Allow for allowlist minting of tokens\\n     */\\n    function presaleMint(\\n        bytes32 _messageHash,\\n        bytes calldata _signature,\\n        uint16 _tokenId,\\n        uint16 _numTokens,\\n        uint256 _maximumAllowedMints\\n    ) external payable nonReentrant notPaused {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        TokenConfig storage tokenConfig = state.tokens[_tokenId];\\n        uint256 heymintFee = _numTokens * heymintFeePerToken();\\n        uint256 presalePrice = presalePriceInWei(_tokenId);\\n\\n        require(tokenConfig.presaleActive, \\\"PRESALE_IS_NOT_ACTIVE\\\");\\n        require(\\n            tokenPresaleTimeIsActive(_tokenId),\\n            \\\"PRESALE_TIME_IS_NOT_ACTIVE\\\"\\n        );\\n        require(\\n            !state.data.tokenMintingPermanentlyDisabled[_tokenId],\\n            \\\"MINTING_PERMANENTLY_DISABLED\\\"\\n        );\\n        uint16 presaleMintsAllowedPerAddress = tokenConfig\\n            .presaleMintsAllowedPerAddress;\\n        uint16 newTokensMintedByAddress = state.data.tokensMintedByAddress[\\n            msg.sender\\n        ][_tokenId] + _numTokens;\\n        require(\\n            presaleMintsAllowedPerAddress == 0 ||\\n                newTokensMintedByAddress <= presaleMintsAllowedPerAddress,\\n            \\\"MAX_MINTS_PER_ADDRESS_EXCEEDED\\\"\\n        );\\n        require(\\n            _maximumAllowedMints == 0 ||\\n                newTokensMintedByAddress <= _maximumAllowedMints,\\n            \\\"MAX_MINTS_EXCEEDED\\\"\\n        );\\n        uint16 newTotalSupply = state.data.totalSupply[_tokenId] + _numTokens;\\n        require(\\n            state.tokens[_tokenId].maxSupply == 0 ||\\n                newTotalSupply <= state.tokens[_tokenId].maxSupply,\\n            \\\"MAX_SUPPLY_EXCEEDED\\\"\\n        );\\n        uint16 presaleMaxSupply = tokenConfig.presaleMaxSupply;\\n        require(\\n            presaleMaxSupply == 0 || newTotalSupply <= presaleMaxSupply,\\n            \\\"MAX_SUPPLY_EXCEEDED\\\"\\n        );\\n        require(\\n            msg.value == presalePrice * _numTokens + heymintFee,\\n            \\\"PAYMENT_INCORRECT\\\"\\n        );\\n        require(\\n            keccak256(abi.encode(msg.sender, _maximumAllowedMints, _tokenId)) ==\\n                _messageHash,\\n            \\\"MESSAGE_INVALID\\\"\\n        );\\n        require(\\n            verifySignerAddress(_messageHash, _signature),\\n            \\\"SIGNATURE_VALIDATION_FAILED\\\"\\n        );\\n        if (heymintFee > 0) {\\n            (bool success, ) = heymintPayoutAddress.call{value: heymintFee}(\\\"\\\");\\n            require(success, \\\"HeyMint fee transfer failed\\\");\\n        }\\n\\n        state.data.tokensMintedByAddress[msg.sender][\\n            _tokenId\\n        ] = newTokensMintedByAddress;\\n        state.data.totalSupply[_tokenId] = newTotalSupply;\\n\\n        _mint(msg.sender, _tokenId, _numTokens, \\\"\\\");\\n\\n        if (presaleMaxSupply != 0 && newTotalSupply == presaleMaxSupply) {\\n            state.tokens[_tokenId].presaleActive = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/implementations/HeyMintERC1155ExtensionD.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {HeyMintERC1155Upgradeable} from \\\"./HeyMintERC1155Upgradeable.sol\\\";\\nimport {HeyMintStorage, TokenConfig, BaseConfig, AdvancedConfig, Data, BurnToken} from \\\"../libraries/HeyMintStorage.sol\\\";\\n\\ncontract HeyMintERC1155ExtensionD is HeyMintERC1155Upgradeable {\\n    using HeyMintStorage for HeyMintStorage.State;\\n\\n    // ============ CONFIG ============\\n\\n    /**\\n     * @notice Returns config storage variables for the contract\\n     */\\n    function getSettings()\\n        external\\n        view\\n        returns (\\n            BaseConfig memory,\\n            AdvancedConfig memory,\\n            bool,\\n            uint16[] memory\\n        )\\n    {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        return (\\n            state.cfg,\\n            state.advCfg,\\n            state.data.advancedConfigInitialized,\\n            state.data.tokenIds\\n        );\\n    }\\n\\n    /**\\n     * @notice Updates the base configuration for the contract\\n     */\\n    function _updateBaseConfig(BaseConfig memory _baseConfig) internal {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        require(\\n            _baseConfig.heyMintFeeActive == state.cfg.heyMintFeeActive,\\n            \\\"CANNOT_UPDATE_CONSTANT_VARIABLE\\\"\\n        );\\n        require(\\n            _baseConfig.enforceRoyalties == state.cfg.enforceRoyalties,\\n            \\\"CANNOT_UPDATE_CONSTANT_VARIABLE\\\"\\n        );\\n        state.cfg = _baseConfig;\\n    }\\n\\n    /**\\n     * @notice Updates the base configuration for the contract\\n     */\\n    function updateBaseConfig(\\n        BaseConfig memory _baseConfig\\n    ) external onlyOwner {\\n        return _updateBaseConfig(_baseConfig);\\n    }\\n\\n    /**\\n     * @notice Updates the advanced configuration for the contract\\n     */\\n    function _updateAdvancedConfig(\\n        AdvancedConfig memory _advancedConfig\\n    ) internal {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        require(\\n            _advancedConfig.payoutAddresses.length ==\\n                _advancedConfig.payoutBasisPoints.length,\\n            \\\"PAYOUT_ARRAY_LENGTHS_MUST_MATCH\\\"\\n        );\\n        uint256 totalBasisPoints = 0;\\n        for (uint256 i = 0; i < _advancedConfig.payoutBasisPoints.length; i++) {\\n            totalBasisPoints += _advancedConfig.payoutBasisPoints[i];\\n        }\\n        require(totalBasisPoints == 10000, \\\"BASIS_POINTS_MUST_EQUAL_10000\\\");\\n        if (state.advCfg.payoutAddressesFrozen) {\\n            require(\\n                _advancedConfig.payoutAddressesFrozen,\\n                \\\"PAYOUT_ADDRESSES_FROZEN\\\"\\n            );\\n            bool payoutInfoChanged = false;\\n            for (\\n                uint256 i = 0;\\n                i < _advancedConfig.payoutAddresses.length;\\n                i++\\n            ) {\\n                if (\\n                    _advancedConfig.payoutAddresses[i] !=\\n                    state.advCfg.payoutAddresses[i]\\n                ) {\\n                    payoutInfoChanged = true;\\n                    break;\\n                }\\n            }\\n            require(!payoutInfoChanged, \\\"PAYOUT_ADDRESSES_FROZEN\\\");\\n            for (\\n                uint256 i = 0;\\n                i < _advancedConfig.payoutBasisPoints.length;\\n                i++\\n            ) {\\n                if (\\n                    _advancedConfig.payoutBasisPoints[i] !=\\n                    state.advCfg.payoutBasisPoints[i]\\n                ) {\\n                    payoutInfoChanged = true;\\n                    break;\\n                }\\n            }\\n            require(!payoutInfoChanged, \\\"PAYOUT_ADDRESSES_FROZEN\\\");\\n        }\\n        state.advCfg = _advancedConfig;\\n        state.data.advancedConfigInitialized = true;\\n    }\\n\\n    /**\\n     * @notice Updates the advanced configuration for the contract\\n     */\\n    function updateAdvancedConfig(\\n        AdvancedConfig memory _advancedConfig\\n    ) external onlyOwner {\\n        return _updateAdvancedConfig(_advancedConfig);\\n    }\\n\\n    /**\\n     * @notice Returns token storage variables for the contract\\n     */\\n    function getTokenSettings(\\n        uint16 tokenId\\n    ) external view returns (TokenConfig memory, BurnToken[] memory) {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        return (state.tokens[tokenId], state.burnTokens[tokenId]);\\n    }\\n\\n    /**\\n     * @notice Creates or updates a token based on the tokenId\\n     */\\n    function upsertToken(TokenConfig memory _tokenConfig) external onlyOwner {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        require(\\n            _tokenConfig.maxSupply >=\\n                state.data.totalSupply[_tokenConfig.tokenId],\\n            \\\"MAX_SUPPLY_LESS_THAN_TOTAL_SUPPLY\\\"\\n        );\\n        require(\\n            _tokenConfig.presaleMaxSupply >=\\n                state.data.totalSupply[_tokenConfig.tokenId],\\n            \\\"MAX_SUPPLY_LESS_THAN_TOTAL_SUPPLY\\\"\\n        );\\n        require(\\n            _tokenConfig.publicSaleStartTime == 0 ||\\n                _tokenConfig.publicSaleStartTime > block.timestamp,\\n            \\\"TIME_IN_PAST\\\"\\n        );\\n        require(\\n            _tokenConfig.publicSaleEndTime == 0 ||\\n                _tokenConfig.publicSaleEndTime > block.timestamp,\\n            \\\"TIME_IN_PAST\\\"\\n        );\\n        require(\\n            _tokenConfig.presaleStartTime == 0 ||\\n                _tokenConfig.presaleStartTime > block.timestamp,\\n            \\\"TIME_IN_PAST\\\"\\n        );\\n        require(\\n            _tokenConfig.presaleEndTime == 0 ||\\n                _tokenConfig.presaleEndTime > block.timestamp,\\n            \\\"TIME_IN_PAST\\\"\\n        );\\n        require(\\n            !state.data.tokenMetadataFrozen[_tokenConfig.tokenId] &&\\n                !state.data.allMetadataFrozen,\\n            \\\"ALL_METADATA_FROZEN\\\"\\n        );\\n        require(\\n            !state.data.tokenMetadataFrozen[_tokenConfig.tokenId] ||\\n                keccak256(bytes(_tokenConfig.tokenUri)) ==\\n                keccak256(bytes(state.tokens[_tokenConfig.tokenId].tokenUri)),\\n            \\\"METADATA_FROZEN\\\"\\n        );\\n        require(\\n            _tokenConfig.refundEndsAt >=\\n                state.tokens[_tokenConfig.tokenId].refundEndsAt,\\n            \\\"REFUND_DURATION_CANNOT_BE_DECREASED\\\"\\n        );\\n        require(\\n            state.tokens[_tokenConfig.tokenId].refundPrice == 0 ||\\n                state.tokens[_tokenConfig.tokenId].refundPrice ==\\n                _tokenConfig.refundPrice,\\n            \\\"REFUND_PRICE_CANNOT_BE_CHANGED\\\"\\n        );\\n\\n        state.tokens[_tokenConfig.tokenId] = _tokenConfig;\\n        // add the token id to the tokenIds array if it doesn't already exist\\n        for (uint256 i = 0; i < state.data.tokenIds.length; i++) {\\n            if (state.data.tokenIds[i] == _tokenConfig.tokenId) {\\n                return;\\n            }\\n        }\\n        state.data.tokenIds.push(_tokenConfig.tokenId);\\n    }\\n\\n    /**\\n     * @notice Updates all of the token IDs on the contract.\\n     */\\n    function _setTokenIds(uint16[] memory _tokenIds) internal {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n\\n        uint256 oldLength = state.data.tokenIds.length;\\n        uint256 newLength = _tokenIds.length;\\n\\n        // Update the existing token ids & push any new ones.\\n        for (uint256 i = 0; i < newLength; i++) {\\n            if (i < oldLength) {\\n                state.data.tokenIds[i] = _tokenIds[i];\\n                state.tokens[_tokenIds[i]].tokenId = _tokenIds[i];\\n            } else {\\n                state.data.tokenIds.push(_tokenIds[i]);\\n                state.tokens[_tokenIds[i]].tokenId = _tokenIds[i];\\n            }\\n        }\\n\\n        // Pop any extra token ids.\\n        for (uint256 i = oldLength; i > newLength; i--) {\\n            state.data.tokenIds.pop();\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates all of the token IDs on the contract.\\n     */\\n    function setTokenIds(uint16[] memory _tokenIds) external onlyOwner {\\n        return _setTokenIds(_tokenIds);\\n    }\\n\\n    /**\\n     * @notice Set the details of the tokens to be burned in order to mint a token\\n     * @param _tokenIds The ids of the token on the contract to update\\n     * @param _burnConfigs An array of arrays of all tokens required for burning\\n     */\\n    function _updateBurnTokens(\\n        uint16[] memory _tokenIds,\\n        BurnToken[][] memory _burnConfigs\\n    ) internal {\\n        require(\\n            _tokenIds.length == 0 || _tokenIds.length == _burnConfigs.length,\\n            \\\"BURN_CONFIGS_LENGTH_MUST_MATCH_TOKENS_LENGTH\\\"\\n        );\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n\\n        for (uint16 i = 0; i < _tokenIds.length; i++) {\\n            uint16 tokenId = _tokenIds[i];\\n\\n            uint256 oldBurnTokensLength = state.burnTokens[tokenId].length;\\n            uint256 newBurnTokensLength = _burnConfigs[i].length;\\n\\n            // Update the existing BurnTokens and push any new BurnTokens\\n            for (uint256 j = 0; j < newBurnTokensLength; j++) {\\n                if (j < oldBurnTokensLength) {\\n                    state.burnTokens[tokenId][j] = _burnConfigs[i][j];\\n                } else {\\n                    state.burnTokens[tokenId].push(_burnConfigs[i][j]);\\n                }\\n            }\\n\\n            // Pop any extra BurnTokens if the new array is shorter\\n            for (\\n                uint256 j = oldBurnTokensLength;\\n                j > newBurnTokensLength;\\n                j--\\n            ) {\\n                state.burnTokens[tokenId].pop();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Set the details of the tokens to be burned in order to mint a token\\n     * @param _tokenIds The ids of the token on the contract to update\\n     * @param _burnConfigs An array of arrays of all tokens required for burning\\n     */\\n    function updateBurnTokens(\\n        uint16[] calldata _tokenIds,\\n        BurnToken[][] calldata _burnConfigs\\n    ) external onlyOwner {\\n        return _updateBurnTokens(_tokenIds, _burnConfigs);\\n    }\\n\\n    /**\\n     * @notice Update the full config (base config + adv config + all tokens + burn tokens) on the contract.\\n     */\\n    function updateFullConfig(\\n        BaseConfig memory _baseConfig,\\n        TokenConfig[] memory _tokenConfigs,\\n        AdvancedConfig memory _advancedConfig,\\n        BurnToken[][] memory _burnTokens\\n    ) external onlyOwner {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        require(\\n            _burnTokens.length == 0 ||\\n                _burnTokens.length == _tokenConfigs.length,\\n            \\\"BURN_CONFIGS_LENGTH_MUST_MATCH_TOKENS_LENGTH\\\"\\n        );\\n        uint16[] memory tokenIds = new uint16[](_tokenConfigs.length);\\n        for (uint256 i = 0; i < _tokenConfigs.length; i++) {\\n            tokenIds[i] = _tokenConfigs[i].tokenId;\\n        }\\n        _updateBaseConfig(_baseConfig);\\n        _updateAdvancedConfig(_advancedConfig);\\n        state.data.advancedConfigInitialized = true;\\n        _setTokenIds(tokenIds);\\n        _updateBurnTokens(tokenIds, _burnTokens);\\n    }\\n\\n    /**\\n     * @notice Sets a URI for a specific token id.\\n     */\\n    function setTokenUri(\\n        uint16 _tokenId,\\n        string calldata _newTokenURI\\n    ) external onlyOwner {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        require(!state.data.allMetadataFrozen, \\\"ALL_METADATA_FROZEN\\\");\\n        require(\\n            !state.data.tokenMetadataFrozen[_tokenId],\\n            \\\"TOKEN_METADATA_FROZEN\\\"\\n        );\\n        state.tokens[_tokenId].tokenUri = _newTokenURI;\\n    }\\n\\n    /**\\n     * @notice Returns a token-specific URI, if configured. Otherwise, returns an empty string.\\n     */\\n    function tokenURI(uint256 _tokenId) external view returns (string memory) {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        return state.tokens[uint16(_tokenId)].tokenUri;\\n    }\\n\\n    /**\\n     * @notice Update the global default ERC-1155 base URI\\n     */\\n    function setGlobalUri(string calldata _newTokenURI) external onlyOwner {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        require(!state.data.allMetadataFrozen, \\\"ALL_METADATA_FROZEN\\\");\\n        state.cfg.uriBase = _newTokenURI;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/implementations/HeyMintERC1155ExtensionE.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {HeyMintERC1155Upgradeable} from \\\"./HeyMintERC1155Upgradeable.sol\\\";\\nimport {HeyMintStorage, TokenConfig, BaseConfig, AdvancedConfig} from \\\"../libraries/HeyMintStorage.sol\\\";\\n\\ncontract HeyMintERC1155ExtensionE is HeyMintERC1155Upgradeable {\\n    using HeyMintStorage for HeyMintStorage.State;\\n\\n    // ============ FREEZING ============\\n    /**\\n     * @notice Freeze metadata for a specific token id so it can never be changed again\\n     */\\n    function freezeTokenMetadata(uint16 _tokenId) external onlyOwner {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        if (\\n            !state.data.tokenMetadataFrozen[_tokenId] &&\\n            bytes(state.tokens[_tokenId].tokenUri).length == 0\\n        ) {\\n            state.tokens[_tokenId].tokenUri = state.cfg.uriBase;\\n        }\\n        state.data.tokenMetadataFrozen[_tokenId] = true;\\n    }\\n\\n    /**\\n     * @notice Freeze all metadata so it can never be changed again\\n     */\\n    function freezeAllMetadata() external onlyOwner {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        state.data.allMetadataFrozen = true;\\n    }\\n\\n    // ============ GIFT ============\\n\\n    /**\\n     * @notice Allow owner to send tokens without cost to multiple addresses\\n     */\\n    function giftTokens(\\n        uint16 _tokenId,\\n        address[] calldata _receivers,\\n        uint256[] calldata _mintNumber\\n    ) external payable onlyOwner {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        require(\\n            !state.data.tokenMintingPermanentlyDisabled[_tokenId],\\n            \\\"MINTING_PERMANENTLY_DISABLED\\\"\\n        );\\n        require(\\n            _receivers.length == _mintNumber.length,\\n            \\\"ARRAY_LENGTHS_MUST_MATCH\\\"\\n        );\\n        uint256 totalMints = 0;\\n        for (uint256 i = 0; i < _mintNumber.length; i++) {\\n            totalMints += _mintNumber[i];\\n        }\\n        // require either no tokenMaxSupply set or tokenMaxSupply not maxed out\\n        uint16 newtotalSupply = state.data.totalSupply[_tokenId] +\\n            uint16(totalMints);\\n        uint16 maxSupply = state.tokens[_tokenId].maxSupply;\\n        require(\\n            maxSupply == 0 || newtotalSupply <= maxSupply,\\n            \\\"MINT_TOO_LARGE\\\"\\n        );\\n        uint256 heymintFee = (totalMints * heymintFeePerToken()) / 10;\\n        require(msg.value == heymintFee, \\\"PAYMENT_INCORRECT\\\");\\n        if (heymintFee > 0) {\\n            (bool success, ) = heymintPayoutAddress.call{value: heymintFee}(\\\"\\\");\\n            require(success, \\\"HeyMint fee transfer failed\\\");\\n        }\\n        state.data.totalSupply[_tokenId] = newtotalSupply;\\n        for (uint256 i = 0; i < _receivers.length; i++) {\\n            _mint(_receivers[i], _tokenId, _mintNumber[i], \\\"\\\");\\n        }\\n    }\\n\\n    // ============ CREDIT CARD PAYMENT ============\\n\\n    /**\\n     * @notice Returns an array of default addresses authorized to call creditCardMint\\n     */\\n    function getDefaultCreditCardMintAddresses()\\n        public\\n        pure\\n        returns (address[5] memory)\\n    {\\n        return [\\n            0xf3DB642663231887E2Ff3501da6E3247D8634A6D,\\n            0x5e01a33C75931aD0A91A12Ee016Be8D61b24ADEB,\\n            0x9E733848061e4966c4a920d5b99a123459670aEe,\\n            0x7754B94345BCE520f8dd4F6a5642567603e90E10,\\n            0xdAb1a1854214684acE522439684a145E62505233\\n        ];\\n    }\\n\\n    /**\\n     * @notice Set addresses authorized to call creditCardMint\\n     * @param _creditCardMintAddresses The custom addresses to authorize\\n     */\\n    function setCreditCardMintAddresses(\\n        address[] memory _creditCardMintAddresses\\n    ) external onlyOwner {\\n        HeyMintStorage\\n            .state()\\n            .advCfg\\n            .creditCardMintAddresses = _creditCardMintAddresses;\\n    }\\n\\n    function creditCardMint(\\n        uint16 _tokenId,\\n        uint16 _numTokens,\\n        address _to\\n    ) external payable nonReentrant notPaused {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        address[5]\\n            memory defaultAddresses = getDefaultCreditCardMintAddresses();\\n        bool authorized = false;\\n        for (uint256 i = 0; i < defaultAddresses.length; i++) {\\n            if (msg.sender == defaultAddresses[i]) {\\n                authorized = true;\\n                break;\\n            }\\n        }\\n        if (!authorized) {\\n            for (\\n                uint256 i = 0;\\n                i < state.advCfg.creditCardMintAddresses.length;\\n                i++\\n            ) {\\n                if (msg.sender == state.advCfg.creditCardMintAddresses[i]) {\\n                    authorized = true;\\n                    break;\\n                }\\n            }\\n        }\\n        require(authorized, \\\"NOT_AUTHORIZED_ADDRESS\\\");\\n        require(state.tokens[_tokenId].publicSaleActive, \\\"NOT_ACTIVE\\\");\\n        require(tokenPublicSaleTimeIsActive(_tokenId), \\\"NOT_ACTIVE\\\");\\n        uint16 publicMintsAllowedPerAddress = state\\n            .tokens[_tokenId]\\n            .publicMintsAllowedPerAddress;\\n        uint16 newTokensMintedByAddress = state.data.tokensMintedByAddress[_to][\\n            _tokenId\\n        ] + _numTokens;\\n        require(\\n            publicMintsAllowedPerAddress == 0 ||\\n                newTokensMintedByAddress <= publicMintsAllowedPerAddress,\\n            \\\"MAX_MINTS_EXCEEDED\\\"\\n        );\\n        uint16 newTotalSupply = state.data.totalSupply[_tokenId] + _numTokens;\\n        uint16 maxSupply = state.tokens[_tokenId].maxSupply;\\n        require(newTotalSupply <= maxSupply, \\\"MAX_SUPPLY_EXCEEDED\\\");\\n        uint256 publicPrice = publicPriceInWei(_tokenId);\\n        uint256 heymintFee = _numTokens * heymintFeePerToken();\\n        require(\\n            msg.value == publicPrice * _numTokens + heymintFee,\\n            \\\"INVALID_PRICE_PAID\\\"\\n        );\\n        if (heymintFee > 0) {\\n            (bool success, ) = heymintPayoutAddress.call{value: heymintFee}(\\\"\\\");\\n            require(success, \\\"TRANSFER_FAILED\\\");\\n        }\\n\\n        state.data.totalSupply[_tokenId] = newTotalSupply;\\n        state.data.tokensMintedByAddress[msg.sender][\\n            _tokenId\\n        ] = newTokensMintedByAddress;\\n        _mint(_to, _tokenId, _numTokens, \\\"\\\");\\n\\n        if (maxSupply != 0 && newTotalSupply == maxSupply) {\\n            state.tokens[_tokenId].publicSaleActive = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/implementations/HeyMintERC1155ExtensionF.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {HeyMintERC1155Upgradeable} from \\\"./HeyMintERC1155Upgradeable.sol\\\";\\nimport {HeyMintStorage, TokenConfig, BaseConfig, AdvancedConfig, BurnToken} from \\\"../libraries/HeyMintStorage.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {s} from \\\"./ERC1155UDS.sol\\\";\\n\\ncontract HeyMintERC1155ExtensionF is HeyMintERC1155Upgradeable {\\n    using HeyMintStorage for HeyMintStorage.State;\\n\\n    // ============ SOULBINDING ============\\n\\n    /**\\n     * @notice Change the admin address used to transfer tokens if needed.\\n     * @param _adminAddress The new soulbound admin address\\n     */\\n    function setSoulboundAdminAddress(\\n        address _adminAddress\\n    ) external onlyOwner {\\n        AdvancedConfig storage advCfg = HeyMintStorage.state().advCfg;\\n        require(!advCfg.soulbindAdminTransfersPermanentlyDisabled);\\n        advCfg.soulboundAdminAddress = _adminAddress;\\n    }\\n\\n    /**\\n     * @notice Disallow admin transfers of soulbound tokens permanently.\\n     */\\n    function disableSoulbindAdminTransfersPermanently() external onlyOwner {\\n        AdvancedConfig storage advCfg = HeyMintStorage.state().advCfg;\\n        advCfg.soulboundAdminAddress = address(0);\\n        advCfg.soulbindAdminTransfersPermanentlyDisabled = true;\\n    }\\n\\n    /**\\n     * @notice Turn soulbinding on or off\\n     * @param _tokenId The token to modify soulbinding for\\n     * @param _soulbindingActive If true soulbinding is active\\n     */\\n    function setSoulbindingState(\\n        uint16 _tokenId,\\n        bool _soulbindingActive\\n    ) external onlyOwner {\\n        HeyMintStorage\\n            .state()\\n            .tokens[_tokenId]\\n            .soulbindingActive = _soulbindingActive;\\n    }\\n\\n    /**\\n     * @notice Allows an admin address to initiate token transfers if user wallets get hacked or lost\\n     * This function can only be used on soulbound tokens to prevent arbitrary transfers of normal tokens\\n     * @param _from The address to transfer from\\n     * @param _to The address to transfer to\\n     * @param _tokenId The token id to transfer\\n     * @param _amount The number of tokens to transfer\\n     */\\n    function soulboundAdminTransfer(\\n        address _from,\\n        address _to,\\n        uint16 _tokenId,\\n        uint256 _amount\\n    ) external {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        require(\\n            !state.advCfg.soulbindAdminTransfersPermanentlyDisabled,\\n            \\\"NOT_ACTIVE\\\"\\n        );\\n        require(state.tokens[_tokenId].soulbindingActive, \\\"NOT_ACTIVE\\\");\\n        address adminAddress = state.advCfg.soulboundAdminAddress == address(0)\\n            ? owner()\\n            : state.advCfg.soulboundAdminAddress;\\n        require(msg.sender == adminAddress, \\\"NOT_ADMIN\\\");\\n        state.data.soulboundAdminTransferInProgress = true;\\n        s().isApprovedForAll[_from][adminAddress] = true;\\n        safeTransferFrom(_from, _to, _tokenId, _amount, \\\"\\\");\\n        state.data.soulboundAdminTransferInProgress = false;\\n        s().isApprovedForAll[_from][adminAddress] = false;\\n    }\\n\\n    // ============ REFUND ============\\n\\n    /**\\n     * @notice Returns the refund price in wei. Refund price is stored with 5 decimals (1 = 0.00001 ETH), so total 5 + 13 == 18 decimals\\n     * @param _tokenId The token id\\n     */\\n    function refundPriceInWei(uint16 _tokenId) public view returns (uint256) {\\n        return\\n            uint256(HeyMintStorage.state().tokens[_tokenId].refundPrice) *\\n            10 ** 13;\\n    }\\n\\n    /**\\n     * @notice Will return true if token holders can still return their tokens for a refund\\n     * @param _tokenId The token id\\n     */\\n    function refundGuaranteeActive(uint16 _tokenId) public view returns (bool) {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        return block.timestamp < state.tokens[_tokenId].refundEndsAt;\\n    }\\n\\n    /**\\n     * @notice Set the address where tokens are sent when refunded\\n     * @param _refundAddress The new refund address\\n     */\\n    function setRefundAddress(address _refundAddress) external onlyOwner {\\n        require(_refundAddress != address(0), \\\"CANNOT_SEND_TO_ZERO_ADDRESS\\\");\\n        HeyMintStorage.state().advCfg.refundAddress = _refundAddress;\\n    }\\n\\n    /**\\n     * @notice Increase the period of time where token holders can still return their tokens for a refund\\n     * @param _tokenId The token id\\n     * @param _newRefundEndsAt The new timestamp when the refund period ends. Must be greater than the current timestamp\\n     */\\n    function increaseRefundEndsAt(\\n        uint16 _tokenId,\\n        uint32 _newRefundEndsAt\\n    ) external onlyOwner {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        require(\\n            _newRefundEndsAt > state.tokens[_tokenId].refundEndsAt,\\n            \\\"MUST_INCREASE_DURATION\\\"\\n        );\\n        HeyMintStorage.state().tokens[_tokenId].refundEndsAt = _newRefundEndsAt;\\n    }\\n\\n    /**\\n     * @notice Refund token and return the refund price to the token owner.\\n     * @param _tokenId The id of the token to refund\\n     */\\n    function refund(uint16 _tokenId, uint256 _numTokens) external nonReentrant {\\n        require(refundGuaranteeActive(_tokenId), \\\"REFUND_GUARANTEE_EXPIRED\\\");\\n        require(\\n            balanceOf(msg.sender, _tokenId) >= _numTokens,\\n            \\\"NOT_ENOUGH_TOKENS_OWNED\\\"\\n        );\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n\\n        address addressToSendToken = state.advCfg.refundAddress != address(0)\\n            ? state.advCfg.refundAddress\\n            : owner();\\n\\n        safeTransferFrom(\\n            msg.sender,\\n            addressToSendToken,\\n            _tokenId,\\n            _numTokens,\\n            \\\"\\\"\\n        );\\n\\n        uint256 refundPrice = refundPriceInWei(_tokenId);\\n        uint256 totalRefundAmount = refundPrice * _numTokens;\\n\\n        (bool success, ) = payable(msg.sender).call{value: totalRefundAmount}(\\n            \\\"\\\"\\n        );\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    // ============ BURN TO MINT ============\\n\\n    // Address where burnt tokens are sent.\\n    address public constant burnAddress =\\n        0x000000000000000000000000000000000000dEaD;\\n\\n    /**\\n     * @notice Returns the burn payment in wei. Price is stored with 5 decimals (1 = 0.00001 ETH), so total 5 + 13 == 18 decimals\\n     * @param _tokenId The id of the token on the contract\\n     */\\n    function burnPaymentInWei(uint16 _tokenId) public view returns (uint256) {\\n        return\\n            uint256(HeyMintStorage.state().tokens[_tokenId].burnPayment) *\\n            10 ** 13;\\n    }\\n\\n    /**\\n     * @notice To be updated by contract owner to allow burning to claim a token\\n     * @param _tokenId The id of the token on the contract\\n     * @param _burnClaimActive If true tokens can be burned in order to mint\\n     */\\n    function setBurnClaimState(\\n        uint16 _tokenId,\\n        bool _burnClaimActive\\n    ) external onlyOwner {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        TokenConfig storage tokenCfg = state.tokens[_tokenId];\\n        if (_burnClaimActive) {\\n            require(state.burnTokens[_tokenId].length != 0, \\\"NOT_CONFIGURED\\\");\\n            require(tokenCfg.mintsPerBurn != 0, \\\"NOT_CONFIGURED\\\");\\n        }\\n        tokenCfg.burnClaimActive = _burnClaimActive;\\n    }\\n\\n    /**\\n     * @notice Update the number of mints claimable per token burned\\n     * @param _tokenId The id of the token on the contract\\n     * @param _mintsPerBurn The new number of tokens that can be minted per burn transaction\\n     */\\n    function updateMintsPerBurn(\\n        uint16 _tokenId,\\n        uint8 _mintsPerBurn\\n    ) external onlyOwner {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        if (state.tokens[_tokenId].burnClaimActive) {\\n            require(_mintsPerBurn > 0, \\\"MUST_BE_AT_LEAST_1_IF_ACTIVE\\\");\\n        }\\n        HeyMintStorage.state().tokens[_tokenId].mintsPerBurn = _mintsPerBurn;\\n    }\\n\\n    /**\\n     * @notice Update the price required to be paid alongside a burn tx to mint (payment is per tx, not per token in the case of >1 mintsPerBurn)\\n     * @param _tokenId The id of the token on the contract\\n     * @param _burnPayment The new amount of payment required per burn transaction\\n     */\\n    function updatePaymentPerBurn(\\n        uint16 _tokenId,\\n        uint32 _burnPayment\\n    ) external onlyOwner {\\n        HeyMintStorage.state().tokens[_tokenId].burnPayment = _burnPayment;\\n    }\\n\\n    /**\\n     * @notice Burn tokens from other contracts in order to mint tokens on this contract\\n     * @dev This contract must be approved by the caller to transfer the tokens being burned\\n     * @param _tokenId The id of the token to mint\\n     * @param _contracts The contracts of the tokens to burn in the same order as the array burnTokens\\n     * @param _tokenIdsToBurn Nested array of token ids to burn for 721 and amounts to burn for 1155 corresponding to _contracts\\n     * @param _tokensToMint The number of tokens to mint\\n     */\\n    function burnToMint(\\n        uint16 _tokenId,\\n        address[] calldata _contracts,\\n        uint256[][] calldata _tokenIdsToBurn,\\n        uint16 _tokensToMint\\n    ) external payable nonReentrant notPaused {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        uint256 burnTokensLen = state.burnTokens[_tokenId].length;\\n        require(burnTokensLen > 0, \\\"NOT_CONFIGURED\\\");\\n        uint16 mintsPerBurn = state.tokens[_tokenId].mintsPerBurn;\\n        require(mintsPerBurn != 0, \\\"NOT_CONFIGURED\\\");\\n        require(state.tokens[_tokenId].burnClaimActive, \\\"NOT_ACTIVE\\\");\\n        require(\\n            _contracts.length == _tokenIdsToBurn.length,\\n            \\\"ARRAY_LENGTHS_MUST_MATCH\\\"\\n        );\\n        require(_contracts.length == burnTokensLen, \\\"ARRAY_LENGTHS_MUST_MATCH\\\");\\n        //uint16 newTotalSupply = state.data.totalSupply[_tokenId] + _tokensToMint;\\n        require(\\n            state.data.totalSupply[_tokenId] + _tokensToMint <=\\n                state.tokens[_tokenId].maxSupply,\\n            \\\"MAX_SUPPLY_EXCEEDED\\\"\\n        );\\n        uint256 burnPayment = burnPaymentInWei(_tokenId);\\n        uint256 burnPaymentTotal = burnPayment * (_tokensToMint / mintsPerBurn);\\n        uint256 heymintFee = _tokensToMint * heymintFeePerToken();\\n        require(\\n            msg.value == burnPaymentTotal + heymintFee,\\n            \\\"INVALID_PRICE_PAID\\\"\\n        );\\n        if (heymintFee > 0) {\\n            (bool success, ) = heymintPayoutAddress.call{value: heymintFee}(\\\"\\\");\\n            require(success, \\\"TRANSFER_FAILED\\\");\\n        }\\n        for (uint256 i = 0; i < burnTokensLen; i++) {\\n            BurnToken memory burnToken = state.burnTokens[_tokenId][i];\\n            require(\\n                burnToken.contractAddress == _contracts[i],\\n                \\\"INCORRECT_CONTRACT\\\"\\n            );\\n            if (burnToken.tokenType == 1) {\\n                uint256 _tokenIdsToBurnLength = _tokenIdsToBurn[i].length;\\n                require(\\n                    (_tokenIdsToBurnLength / burnToken.tokensPerBurn) *\\n                        mintsPerBurn ==\\n                        _tokensToMint,\\n                    \\\"INCORRECT_NO_OF_TOKENS_TO_BURN\\\"\\n                );\\n                for (uint256 j = 0; j < _tokenIdsToBurnLength; j++) {\\n                    IERC721 burnContract = IERC721(_contracts[i]);\\n                    uint256 tokenId = _tokenIdsToBurn[i][j];\\n                    require(\\n                        burnContract.ownerOf(tokenId) == msg.sender,\\n                        \\\"MUST_OWN_TOKEN\\\"\\n                    );\\n                    burnContract.transferFrom(msg.sender, burnAddress, tokenId);\\n                }\\n            } else if (burnToken.tokenType == 2) {\\n                uint256 amountToBurn = _tokenIdsToBurn[i][0];\\n                require(\\n                    (amountToBurn / burnToken.tokensPerBurn) * mintsPerBurn ==\\n                        _tokensToMint,\\n                    \\\"INCORRECT_NO_OF_TOKENS_TO_BURN\\\"\\n                );\\n                IERC1155 burnContract = IERC1155(_contracts[i]);\\n                require(\\n                    burnContract.balanceOf(msg.sender, burnToken.tokenId) >=\\n                        amountToBurn,\\n                    \\\"MUST_OWN_TOKEN\\\"\\n                );\\n                burnContract.safeTransferFrom(\\n                    msg.sender,\\n                    burnAddress,\\n                    burnToken.tokenId,\\n                    amountToBurn,\\n                    \\\"\\\"\\n                );\\n            }\\n        }\\n\\n        state.data.totalSupply[_tokenId] += _tokensToMint;\\n        state.data.tokensMintedByAddress[msg.sender][_tokenId] += uint16(\\n            _tokensToMint\\n        );\\n        _mint(msg.sender, _tokenId, _tokensToMint, \\\"\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/implementations/HeyMintERC1155ExtensionG.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {HeyMintERC1155Upgradeable} from \\\"./HeyMintERC1155Upgradeable.sol\\\";\\nimport {HeyMintStorage, TokenConfig, Data} from \\\"../libraries/HeyMintStorage.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ncontract HeyMintERC1155ExtensionG is HeyMintERC1155Upgradeable {\\n    using HeyMintStorage for HeyMintStorage.State;\\n\\n    // ============ FREE CLAIM ============\\n\\n    /**\\n     * @notice To be updated by contract owner to allow free claiming tokens\\n     * @param _tokenId The id of the token to update\\n     * @param _freeClaimActive If true tokens can be claimed for free\\n     */\\n    function setFreeClaimState(\\n        uint16 _tokenId,\\n        bool _freeClaimActive\\n    ) external onlyOwner {\\n        TokenConfig storage tokenCfg = HeyMintStorage.state().tokens[_tokenId];\\n        if (_freeClaimActive) {\\n            require(\\n                tokenCfg.freeClaimContractAddress != address(0),\\n                \\\"NOT_CONFIGURED\\\"\\n            );\\n            require(tokenCfg.mintsPerFreeClaim != 0, \\\"NOT_CONFIGURED\\\");\\n        }\\n        tokenCfg.freeClaimActive = _freeClaimActive;\\n    }\\n\\n    /**\\n     * @notice Set the contract address of the NFT eligible for free claim\\n     * @param _tokenId The id of the token to update\\n     * @param _freeClaimContractAddress The new contract address\\n     */\\n    function setFreeClaimContractAddress(\\n        uint16 _tokenId,\\n        address _freeClaimContractAddress\\n    ) external onlyOwner {\\n        HeyMintStorage\\n            .state()\\n            .tokens[_tokenId]\\n            .freeClaimContractAddress = _freeClaimContractAddress;\\n    }\\n\\n    /**\\n     * @notice Update the number of free mints claimable per token redeemed from the external ERC721 contract\\n     * @param _tokenId The id of the token to update\\n     * @param _mintsPerFreeClaim The new number of free mints per token redeemed\\n     */\\n    function updateMintsPerFreeClaim(\\n        uint16 _tokenId,\\n        uint8 _mintsPerFreeClaim\\n    ) external onlyOwner {\\n        HeyMintStorage\\n            .state()\\n            .tokens[_tokenId]\\n            .mintsPerFreeClaim = _mintsPerFreeClaim;\\n    }\\n\\n    /**\\n     * @notice Check if an array of tokens is eligible for free claim\\n     * @param _tokenId The id of the token on this contract\\n     * @param _claimTokenIds The ids of the tokens to check\\n     */\\n    function checkFreeClaimEligibility(\\n        uint16 _tokenId,\\n        uint256[] calldata _claimTokenIds\\n    ) external view returns (bool[] memory) {\\n        Data storage data = HeyMintStorage.state().data;\\n        bool[] memory eligible = new bool[](_claimTokenIds.length);\\n        for (uint256 i = 0; i < _claimTokenIds.length; i++) {\\n            eligible[i] = !data.tokenFreeClaimUsed[_tokenId][_claimTokenIds[i]];\\n        }\\n        return eligible;\\n    }\\n\\n    /**\\n     * @notice Free claim token when msg.sender owns the token in the external contract\\n     * @param _tokenId The id of the token to mint\\n     * @param _claimTokenIds The ids of the tokens to redeem\\n     */\\n    function freeClaim(\\n        uint16 _tokenId,\\n        uint256[] calldata _claimTokenIds\\n    ) external payable nonReentrant notPaused {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        uint16 mintsPerFreeClaim = state.tokens[_tokenId].mintsPerFreeClaim;\\n        uint256 tokenIdsLength = _claimTokenIds.length;\\n        uint256 totalMints = tokenIdsLength * mintsPerFreeClaim;\\n        address freeClaimContractAddress = state\\n            .tokens[_tokenId]\\n            .freeClaimContractAddress;\\n        require(\\n            state.tokens[_tokenId].freeClaimContractAddress != address(0),\\n            \\\"NOT_CONFIGURED\\\"\\n        );\\n        require(mintsPerFreeClaim != 0, \\\"NOT_CONFIGURED\\\");\\n        require(state.tokens[_tokenId].freeClaimActive, \\\"NOT_ACTIVE\\\");\\n        uint16 newTotalSupply = state.data.totalSupply[_tokenId] +\\n            uint16(totalMints);\\n        require(\\n            newTotalSupply <= state.tokens[_tokenId].maxSupply,\\n            \\\"MAX_SUPPLY_EXCEEDED\\\"\\n        );\\n        if (state.cfg.heyMintFeeActive) {\\n            uint256 heymintFee = totalMints * heymintFeePerToken();\\n            require(msg.value == heymintFee, \\\"PAYMENT_INCORRECT\\\");\\n            (bool success, ) = heymintPayoutAddress.call{value: heymintFee}(\\\"\\\");\\n            require(success, \\\"TRANSFER_FAILED\\\");\\n        }\\n        IERC721 ExternalERC721FreeClaimContract = IERC721(\\n            freeClaimContractAddress\\n        );\\n        for (uint256 i = 0; i < tokenIdsLength; i++) {\\n            require(\\n                ExternalERC721FreeClaimContract.ownerOf(_claimTokenIds[i]) ==\\n                    msg.sender,\\n                \\\"MUST_OWN_TOKEN\\\"\\n            );\\n            require(\\n                !state.data.tokenFreeClaimUsed[_tokenId][_claimTokenIds[i]],\\n                \\\"TOKEN_ALREADY_CLAIMED\\\"\\n            );\\n            state.data.tokenFreeClaimUsed[_tokenId][_claimTokenIds[i]] = true;\\n        }\\n\\n        state.data.totalSupply[_tokenId] = newTotalSupply;\\n        state.data.tokensMintedByAddress[msg.sender][_tokenId] += uint16(\\n            totalMints\\n        );\\n        _mint(msg.sender, _tokenId, totalMints, \\\"\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/implementations/HeyMintERC1155Reference.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\n/**\\n * @title HeyMint ERC1155 Function Reference\\n * @author HeyMint Launchpad (https://join.heymint.xyz)\\n * @notice This is a function reference contract for Etherscan reference purposes only.\\n * This contract includes all the functions from multiple implementation contracts.\\n */\\ncontract HeyMintERC1155Reference {\\n    struct BaseConfig {\\n        uint24 projectId;\\n        bool enforceRoyalties;\\n        uint16 royaltyBps;\\n        bool heyMintFeeActive;\\n        address presaleSignerAddress;\\n        string uriBase;\\n    }\\n\\n    struct TokenConfig {\\n        uint16 tokenId;\\n        uint16 maxSupply;\\n        bool publicSaleActive;\\n        uint32 publicPrice;\\n        uint8 publicMintsAllowedPerAddress;\\n        bool usePublicSaleTimes;\\n        uint32 publicSaleStartTime;\\n        uint32 publicSaleEndTime;\\n        bool presaleActive;\\n        uint32 presalePrice;\\n        uint16 presaleMaxSupply;\\n        uint8 presaleMintsAllowedPerAddress;\\n        string tokenUri;\\n        bool usePresaleTimes;\\n        uint32 presaleStartTime;\\n        uint32 presaleEndTime;\\n        address freeClaimContractAddress;\\n        uint16 mintsPerFreeClaim;\\n        bool freeClaimActive;\\n        uint32 burnPayment;\\n        uint16 mintsPerBurn;\\n        bool burnClaimActive;\\n        bool soulbindingActive;\\n        uint32 refundEndsAt;\\n        uint32 refundPrice;\\n    }\\n\\n    struct AdvancedConfig {\\n        address royaltyPayoutAddress;\\n        uint16[] payoutBasisPoints;\\n        address[] payoutAddresses;\\n        bool payoutAddressesFrozen;\\n        address[] creditCardMintAddresses;\\n        bool soulbindAdminTransfersPermanentlyDisabled;\\n        address soulboundAdminAddress;\\n        address refundAddress;\\n    }\\n\\n    struct BurnToken {\\n        address contractAddress;\\n        uint8 tokenType;\\n        uint8 tokensPerBurn;\\n        uint16 tokenId;\\n    }\\n\\n    function CORI_SUBSCRIPTION_ADDRESS() external view returns (address) {}\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32) {}\\n\\n    function EMPTY_SUBSCRIPTION_ADDRESS() external view returns (address) {}\\n\\n    function balanceOf(\\n        address owner,\\n        uint256 id\\n    ) external view returns (uint256) {}\\n\\n    function balanceOfBatch(\\n        address[] memory owners,\\n        uint256[] memory ids\\n    ) external view returns (uint256[] memory balances) {}\\n\\n    function defaultHeymintFeePerToken() external view returns (uint256) {}\\n\\n    function heymintFeePerToken() external view returns (uint256) {}\\n\\n    function heymintPayoutAddress() external view returns (address) {}\\n\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        BaseConfig memory _config,\\n        TokenConfig[] memory _tokenConfig\\n    ) external {}\\n\\n    function isApprovedForAll(\\n        address operator,\\n        address owner\\n    ) external view returns (bool) {}\\n\\n    function isOperatorFilterRegistryRevoked() external view returns (bool) {}\\n\\n    function name() external view returns (string memory) {}\\n\\n    function nonces(address owner) external view returns (uint256) {}\\n\\n    function owner() external view returns (address) {}\\n\\n    function pause() external {}\\n\\n    function permanentlyDisableTokenMinting(uint16 _tokenId) external {}\\n\\n    function permit(\\n        address owner,\\n        address operator,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s_\\n    ) external {}\\n\\n    function revokeOperatorFilterRegistry() external {}\\n\\n    function royaltyInfo(\\n        uint256,\\n        uint256 _salePrice\\n    ) external view returns (address, uint256) {}\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external {}\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external {}\\n\\n    function setApprovalForAll(address operator, bool approved) external {}\\n\\n    function setRoyaltyBasisPoints(uint16 _royaltyBps) external {}\\n\\n    function setRoyaltyPayoutAddress(address _royaltyPayoutAddress) external {}\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) external view returns (bool) {}\\n\\n    function symbol() external view returns (string memory) {}\\n\\n    function transferOwnership(address newOwner) external {}\\n\\n    function unpause() external {}\\n\\n    function uri(uint256 _id) external view returns (string memory) {}\\n\\n    function anyTokenRefundGuaranteeActive() external view returns (bool) {}\\n\\n    function heymintAdminAddress() external view returns (address) {}\\n\\n    function mintToken(uint16 _tokenId, uint16 _numTokens) external payable {}\\n\\n    function publicPriceInWei(\\n        uint16 _tokenId\\n    ) external view returns (uint256) {}\\n\\n    function refundGuaranteeActive(\\n        uint16 _tokenId\\n    ) external view returns (bool) {}\\n\\n    function setHeymintFeePerToken(uint256 _heymintFeePerToken) external {}\\n\\n    function setTokenMaxSupply(uint16 _tokenId, uint16 _maxSupply) external {}\\n\\n    function setTokenPublicMintsAllowedPerAddress(\\n        uint16 _tokenId,\\n        uint8 _mintsAllowed\\n    ) external {}\\n\\n    function setTokenPublicPrice(\\n        uint16 _tokenId,\\n        uint32 _publicPrice\\n    ) external {}\\n\\n    function setTokenPublicSaleEndTime(\\n        uint16 _tokenId,\\n        uint32 _publicSaleEndTime\\n    ) external {}\\n\\n    function setTokenPublicSaleStartTime(\\n        uint16 _tokenId,\\n        uint32 _publicSaleStartTime\\n    ) external {}\\n\\n    function setTokenPublicSaleState(\\n        uint16 _tokenId,\\n        bool _saleActiveState\\n    ) external {}\\n\\n    function setTokenUsePublicSaleTimes(\\n        uint16 _tokenId,\\n        bool _usePublicSaleTimes\\n    ) external {}\\n\\n    function tokenPublicSaleTimeIsActive(\\n        uint16 _tokenId\\n    ) external view returns (bool) {}\\n\\n    function updatePayoutAddressesAndBasisPoints(\\n        address[] memory _payoutAddresses,\\n        uint16[] memory _payoutBasisPoints\\n    ) external {}\\n\\n    function withdraw() external {}\\n\\n    function presaleMint(\\n        bytes32 _messageHash,\\n        bytes memory _signature,\\n        uint16 _tokenId,\\n        uint16 _numTokens,\\n        uint256 _maximumAllowedMints\\n    ) external payable {}\\n\\n    function presalePriceInWei(\\n        uint16 _tokenId\\n    ) external view returns (uint256) {}\\n\\n    function setPresaleSignerAddress(address _presaleSignerAddress) external {}\\n\\n    function setTokenPresaleEndTime(\\n        uint16 _tokenId,\\n        uint32 _presaleEndTime\\n    ) external {}\\n\\n    function setTokenPresaleMaxSupply(\\n        uint16 _tokenId,\\n        uint16 _maxSupply\\n    ) external {}\\n\\n    function setTokenPresaleMintsAllowedPerAddress(\\n        uint16 _tokenId,\\n        uint8 _mintsAllowed\\n    ) external {}\\n\\n    function setTokenPresalePrice(\\n        uint16 _tokenId,\\n        uint32 _presalePrice\\n    ) external {}\\n\\n    function setTokenPresaleStartTime(\\n        uint16 _tokenId,\\n        uint32 _presaleStartTime\\n    ) external {}\\n\\n    function setTokenPresaleState(\\n        uint16 _tokenId,\\n        bool _presaleActiveState\\n    ) external {}\\n\\n    function setTokenUsePresaleTimes(\\n        uint16 _tokenId,\\n        bool _usePresaleTimes\\n    ) external {}\\n\\n    function tokenPresaleTimeIsActive(\\n        uint16 _tokenId\\n    ) external view returns (bool) {}\\n\\n    function getSettings()\\n        external\\n        view\\n        returns (\\n            BaseConfig memory,\\n            AdvancedConfig memory,\\n            bool,\\n            uint16[] memory\\n        )\\n    {}\\n\\n    function getTokenSettings(\\n        uint16 tokenId\\n    ) external view returns (TokenConfig memory, BurnToken[] memory) {}\\n\\n    function setGlobalUri(string memory _newTokenURI) external {}\\n\\n    function setTokenUri(\\n        uint16 _tokenId,\\n        string memory _newTokenURI\\n    ) external {}\\n\\n    function updateBaseConfig(BaseConfig memory _baseConfig) external {}\\n\\n    function updateAdvancedConfig(\\n        AdvancedConfig memory _advancedConfig\\n    ) external {}\\n\\n    function updateFullConfig(\\n        BaseConfig memory _baseConfig,\\n        TokenConfig[] memory _tokenConfigs,\\n        AdvancedConfig memory _advancedConfig,\\n        BurnToken[][] memory _burnTokens\\n    ) external {}\\n\\n    function upsertToken(TokenConfig memory _tokenConfig) external {}\\n\\n    function creditCardMint(\\n        uint16 _tokenId,\\n        uint16 _numTokens,\\n        address _to\\n    ) external payable {}\\n\\n    function getDefaultCreditCardMintAddresses()\\n        external\\n        pure\\n        returns (address[5] memory)\\n    {}\\n\\n    function giftTokens(\\n        uint16 _tokenId,\\n        address[] memory _receivers,\\n        uint256[] memory _mintNumber\\n    ) external payable {}\\n\\n    function setCreditCardMintAddresses(\\n        address[] memory _creditCardMintAddresses\\n    ) external {}\\n\\n    function burnAddress() external view returns (address) {}\\n\\n    function burnPaymentInWei(\\n        uint16 _tokenId\\n    ) external view returns (uint256) {}\\n\\n    function burnToMint(\\n        uint16 _tokenId,\\n        address[] memory _contracts,\\n        uint256[][] memory _tokenIdsToBurn,\\n        uint16 _tokensToMint\\n    ) external payable {}\\n\\n    function disableSoulbindAdminTransfersPermanently() external {}\\n\\n    function increaseRefundEndsAt(\\n        uint16 _tokenId,\\n        uint32 _newRefundEndsAt\\n    ) external {}\\n\\n    function refund(uint16 _tokenId, uint256 _numTokens) external {}\\n\\n    function refundPriceInWei(\\n        uint16 _tokenId\\n    ) external view returns (uint256) {}\\n\\n    function setBurnClaimState(\\n        uint16 _tokenId,\\n        bool _burnClaimActive\\n    ) external {}\\n\\n    function setRefundAddress(address _refundAddress) external {}\\n\\n    function setSoulbindingState(\\n        uint16 _tokenId,\\n        bool _soulbindingActive\\n    ) external {}\\n\\n    function setSoulboundAdminAddress(address _adminAddress) external {}\\n\\n    function soulboundAdminTransfer(\\n        address _from,\\n        address _to,\\n        uint16 _tokenId,\\n        uint256 _amount\\n    ) external {}\\n\\n    function updateBurnTokens(\\n        uint16[] calldata _tokenIds,\\n        BurnToken[][] calldata _burnConfigs\\n    ) external {}\\n\\n    function updateMintsPerBurn(\\n        uint16 _tokenId,\\n        uint8 _mintsPerBurn\\n    ) external {}\\n\\n    function updatePaymentPerBurn(\\n        uint16 _tokenId,\\n        uint32 _burnPayment\\n    ) external {}\\n\\n    function checkFreeClaimEligibility(\\n        uint16 _tokenId,\\n        uint256[] memory _claimTokenIds\\n    ) external view returns (bool[] memory) {}\\n\\n    function freeClaim(\\n        uint16 _tokenId,\\n        uint256[] memory _claimTokenIds\\n    ) external payable {}\\n\\n    function setFreeClaimContractAddress(\\n        uint16 _tokenId,\\n        address _freeClaimContractAddress\\n    ) external {}\\n\\n    function setFreeClaimState(\\n        uint16 _tokenId,\\n        bool _freeClaimActive\\n    ) external {}\\n\\n    function updateMintsPerFreeClaim(\\n        uint16 _tokenId,\\n        uint8 _mintsPerFreeClaim\\n    ) external {}\\n\\n    function freezePayoutAddresses() external {}\\n\\n    function freezeTokenMetadata(uint16 _tokenId) external {}\\n\\n    function freezeAllMetadata() external {}\\n\\n    function totalSupply(uint16 _tokenId) external view returns (uint16) {}\\n\\n    function tokensMintedByAddress(\\n        address _address,\\n        uint16 _tokenId\\n    ) external view returns (uint16) {}\\n\\n    function tokenURI(uint256 _tokenId) external view returns (string memory) {}\\n\\n    function setTokenIds(uint16[] calldata _tokenIds) external {}\\n}\\n\"\r\n    },\r\n    \"contracts/implementations/HeyMintERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {Data, HeyMintStorage} from \\\"../libraries/HeyMintStorage.sol\\\";\\nimport {ERC1155UDS} from \\\"./ERC1155UDS.sol\\\";\\nimport {OwnableUDS} from \\\"./OwnableUDS.sol\\\";\\nimport {PausableUDS} from \\\"./PausableUDS.sol\\\";\\nimport {ReentrancyGuardUDS} from \\\"./ReentrancyGuardUDS.sol\\\";\\nimport {RevokableOperatorFiltererUpgradeable} from \\\"operator-filter-registry/src/upgradeable/RevokableOperatorFiltererUpgradeable.sol\\\";\\nimport {IERC2981Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\\\";\\n\\n/**\\n * @title HeyMintERC1155Upgradeable\\n * @author HeyMint Launchpad (https://join.heymint.xyz)\\n * @notice This contract contains shared logic to be inherited by all implementation contracts\\n */\\ncontract HeyMintERC1155Upgradeable is\\n    ERC1155UDS,\\n    OwnableUDS,\\n    PausableUDS,\\n    ReentrancyGuardUDS,\\n    RevokableOperatorFiltererUpgradeable\\n{\\n    using HeyMintStorage for HeyMintStorage.State;\\n\\n    uint256 public constant defaultHeymintFeePerToken = 0.0007 ether;\\n    address public constant heymintPayoutAddress =\\n        0xE1FaC470dE8dE91c66778eaa155C64c7ceEFc851;\\n\\n    // ============ BASE FUNCTIONALITY ============\\n\\n    function uri(\\n        uint256 _id\\n    ) public view virtual override(ERC1155UDS) returns (string memory) {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        uint16 id = uint16(_id);\\n        if (bytes(state.tokens[id].tokenUri).length > 0) {\\n            return state.tokens[id].tokenUri;\\n        }\\n        return state.cfg.uriBase;\\n    }\\n\\n    /**\\n     * @notice Returns the owner of the contract\\n     */\\n    function owner()\\n        public\\n        view\\n        virtual\\n        override(OwnableUDS, RevokableOperatorFiltererUpgradeable)\\n        returns (address)\\n    {\\n        return OwnableUDS.owner();\\n    }\\n\\n    /**\\n     * @notice Returns true if the contract implements the interface defined by interfaceId\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC1155UDS) returns (bool) {\\n        return\\n            super.supportsInterface(interfaceId) ||\\n            interfaceId == type(IERC2981Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @notice Override ERC1155 such that zero amount token transfers are disallowed.\\n     * This prevents arbitrary 'creation' of new tokens in the collection by anyone.\\n     * Also prevents transfers from blocked operators.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public override(ERC1155UDS) onlyAllowedOperator(from) {\\n        require(amount > 0, \\\"AMOUNT_CANNOT_BE_ZERO\\\");\\n        return super.safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @notice Override ERC1155 such that zero amount token transfers are disallowed.\\n     * This prevents arbitrary 'creation' of new tokens in the collection by anyone.\\n     * Also prevents transfers from blocked operators.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes memory data\\n    ) public override(ERC1155UDS) onlyAllowedOperator(from) {\\n        for (uint256 i; i < ids.length; i++) {\\n            require(amounts[i] > 0, \\\"AMOUNT_CANNOT_BE_ZERO\\\");\\n        }\\n        return super.safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal override(ERC1155UDS) notPaused onlyAllowedOperator(from) {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        if (!state.data.soulboundAdminTransferInProgress) {\\n            require(\\n                !state.tokens[uint16(id)].soulbindingActive,\\n                \\\"TOKEN_SOULBOUND\\\"\\n            );\\n        }\\n    }\\n\\n    function _beforeBatchTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal override(ERC1155UDS) notPaused onlyAllowedOperator(from) {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        if (!state.data.soulboundAdminTransferInProgress) {\\n            for (uint256 i; i < ids.length; i++) {\\n                require(\\n                    !state.tokens[uint16(ids[i])].soulbindingActive,\\n                    \\\"TOKEN_SOULBOUND\\\"\\n                );\\n            }\\n        }\\n    }\\n\\n    // ============ HEYMINT FEE ============\\n\\n    /**\\n     * @notice Returns the HeyMint fee per token. If the fee is active but 0, the default fee is returned\\n     */\\n    function heymintFeePerToken() public view returns (uint256) {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        uint256 fee = state.data.heymintFeePerToken;\\n        if (!state.cfg.heyMintFeeActive) {\\n            return 0;\\n        }\\n        return fee == 0 ? defaultHeymintFeePerToken : fee;\\n    }\\n\\n    // ============ PUBLIC SALE ============\\n\\n    /**\\n     * @notice Returns the public price in wei. Public price is stored with 5 decimals (1 = 0.00001 ETH), so total 5 + 13 == 18 decimals\\n     */\\n    function publicPriceInWei(uint16 _tokenId) public view returns (uint256) {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        return uint256(state.tokens[_tokenId].publicPrice) * 10 ** 13;\\n    }\\n\\n    /**\\n     * @notice Returns if public sale times are active for a given token\\n     */\\n    function tokenPublicSaleTimeIsActive(\\n        uint16 _tokenId\\n    ) public view returns (bool) {\\n        HeyMintStorage.State storage state = HeyMintStorage.state();\\n        if (state.tokens[_tokenId].usePublicSaleTimes == false) {\\n            return true;\\n        }\\n        return\\n            block.timestamp >= state.tokens[_tokenId].publicSaleStartTime &&\\n            block.timestamp <= state.tokens[_tokenId].publicSaleEndTime;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/implementations/OwnableUDS.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n// ------------- storage\\n\\nbytes32 constant DIAMOND_STORAGE_OWNABLE = keccak256(\\\"diamond.storage.ownable\\\");\\n\\nfunction s() pure returns (OwnableDS storage diamondStorage) {\\n    bytes32 slot = DIAMOND_STORAGE_OWNABLE;\\n    assembly {\\n        diamondStorage.slot := slot\\n    }\\n}\\n\\nstruct OwnableDS {\\n    address owner;\\n}\\n\\n// ------------- errors\\n\\nerror CallerNotOwner();\\n\\n/// @title Ownable (Upgradeable Diamond Storage)\\n/// @author phaze (https://github.com/0xPhaze/UDS)\\n/// @dev Requires `__Ownable_init` to be called in proxy\\nabstract contract OwnableUDS is Initializable {\\n    OwnableDS private __storageLayout; // storage layout for upgrade compatibility checks\\n\\n    event OwnerChanged(address oldOwner, address newOwner);\\n\\n    function __Ownable_init() internal initializer {\\n        s().owner = msg.sender;\\n    }\\n\\n    /* ------------- external ------------- */\\n\\n    function owner() public view virtual returns (address) {\\n        return s().owner;\\n    }\\n\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        s().owner = newOwner;\\n\\n        emit OwnerChanged(msg.sender, newOwner);\\n    }\\n\\n    /* ------------- modifier ------------- */\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != s().owner) revert CallerNotOwner();\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/implementations/PausableUDS.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// ------------- storage\\n\\nbytes32 constant DIAMOND_STORAGE_PAUSABLE = keccak256(\\n    \\\"diamond.storage.pausable\\\"\\n);\\n\\nfunction s() pure returns (PausableDS storage diamondStorage) {\\n    bytes32 slot = DIAMOND_STORAGE_PAUSABLE;\\n    assembly {\\n        diamondStorage.slot := slot\\n    }\\n}\\n\\nstruct PausableDS {\\n    uint256 paused;\\n}\\n\\n// ------------- errors\\n\\nerror Paused();\\nerror AlreadyPaused();\\nerror AlreadyUnpaused();\\n\\n/// @title Puasable (Upgradeable Diamond Storage)\\n/// @author phaze (https://github.com/0xPhaze/UDS)\\ncontract PausableUDS {\\n    PausableDS private __storageLayout; // storage layout for upgrade compatibility checks\\n\\n    /* ------------- internal ------------- */\\n\\n    function _pause() internal {\\n        if (s().paused == 2) revert AlreadyPaused();\\n\\n        s().paused = 2;\\n    }\\n\\n    function _unpause() internal {\\n        if (s().paused != 2) revert AlreadyUnpaused();\\n\\n        s().paused = 1;\\n    }\\n\\n    /* ------------- modifier ------------- */\\n\\n    modifier notPaused() {\\n        if (s().paused == 2) revert Paused();\\n\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/implementations/ReentrancyGuardUDS.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// ------------- storage\\n\\nbytes32 constant DIAMOND_STORAGE_REENTRANCY_GUARD = keccak256(\\n    \\\"diamond.storage.reentrancy.guard\\\"\\n);\\n\\nfunction s() pure returns (ReentrancyGuardDS storage diamondStorage) {\\n    bytes32 slot = DIAMOND_STORAGE_REENTRANCY_GUARD;\\n    assembly {\\n        diamondStorage.slot := slot\\n    }\\n}\\n\\nstruct ReentrancyGuardDS {\\n    uint256 locked;\\n}\\n\\n// ------------- errors\\n\\nerror ReentrancyNotPermitted();\\n\\n/// @title Reentrancy Guard (Upgradeable Diamond Storage)\\n/// @author phaze (https://github.com/0xPhaze/UDS)\\ncontract ReentrancyGuardUDS {\\n    ReentrancyGuardDS private __storageLayout; // storage layout for upgrade compatibility checks\\n\\n    /* ------------- modifier ------------- */\\n\\n    modifier nonReentrant() {\\n        if (s().locked == 2) revert ReentrancyNotPermitted();\\n\\n        s().locked = 2;\\n\\n        _;\\n\\n        s().locked = 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAddressRelay.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nstruct Implementation {\\n    address implAddress;\\n    bytes4[] selectors;\\n}\\n\\ninterface IAddressRelay {\\n    /**\\n     * @notice Returns the fallback implementation address\\n     */\\n    function fallbackImplAddress() external returns (address);\\n\\n    /**\\n     * @notice Adds or updates selectors and their implementation addresses\\n     * @param _selectors The selectors to add or update\\n     * @param _implAddress The implementation address the selectors will point to\\n     */\\n    function addOrUpdateSelectors(\\n        bytes4[] memory _selectors,\\n        address _implAddress\\n    ) external;\\n\\n    /**\\n     * @notice Removes selectors\\n     * @param _selectors The selectors to remove\\n     */\\n    function removeSelectors(bytes4[] memory _selectors) external;\\n\\n    /**\\n     * @notice Removes an implementation address and all the selectors that point to it\\n     * @param _implAddress The implementation address to remove\\n     */\\n    function removeImplAddressAndAllSelectors(address _implAddress) external;\\n\\n    /**\\n     * @notice Returns the implementation address for a given function selector\\n     * @param _functionSelector The function selector to get the implementation address for\\n     */\\n    function getImplAddress(\\n        bytes4 _functionSelector\\n    ) external view returns (address implAddress_);\\n\\n    /**\\n     * @notice Returns all the implementation addresses and the selectors they support\\n     * @return impls_ An array of Implementation structs\\n     */\\n    function getAllImplAddressesAndSelectors()\\n        external\\n        view\\n        returns (Implementation[] memory impls_);\\n\\n    /**\\n     * @notice Return all the fucntion selectors associated with an implementation address\\n     * @param _implAddress The implementation address to get the selectors for\\n     */\\n    function getSelectorsForImplAddress(\\n        address _implAddress\\n    ) external view returns (bytes4[] memory selectors_);\\n\\n    /**\\n     * @notice Sets the fallback implementation address to use when a function selector is not found\\n     * @param _fallbackAddress The fallback implementation address\\n     */\\n    function setFallbackImplAddress(address _fallbackAddress) external;\\n\\n    /**\\n     * @notice Updates the supported interfaces\\n     * @param _interfaceId The interface ID to update\\n     * @param _supported Whether the interface is supported or not\\n     */\\n    function updateSupportedInterfaces(\\n        bytes4 _interfaceId,\\n        bool _supported\\n    ) external;\\n\\n    /**\\n     * @notice Returns whether the interface is supported or not\\n     * @param _interfaceId The interface ID to check\\n     */\\n    function supportsInterface(\\n        bytes4 _interfaceId\\n    ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC173.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n/* is ERC165 */\\ninterface IERC173 {\\n    /// @dev This emits when ownership of a contract changes.\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IExchangeOperatorAddressList.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IExchangeOperatorAddressList {\\n    /**\\n     * @notice Returns an integer representing the exchange a given operator address belongs to (0 if none)\\n     * @param _operatorAddress The operator address to map to an exchange\\n     */\\n    function operatorAddressToExchange(\\n        address _operatorAddress\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/HeyMintStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nstruct BaseConfig {\\n    // Used to create a default HeyMint Launchpad URI for token metadata to save gas over setting a custom URI and increase fetch reliability\\n    uint24 projectId;\\n    // If true, the default CORI subscription address will be used to enforce royalties with the Operator Filter Registry\\n    bool enforceRoyalties;\\n    // The royalty payout percentage in basis points\\n    uint16 royaltyBps;\\n    // If true, HeyMint fees will be charged for minting tokens\\n    bool heyMintFeeActive;\\n    // The address used to sign and validate presale mints\\n    address presaleSignerAddress;\\n    // The base URI for all token metadata\\n    string uriBase;\\n}\\n\\nstruct TokenConfig {\\n    uint16 tokenId;\\n    // Maximum supply of tokens that can be minted\\n    uint16 maxSupply;\\n    // If true tokens can be minted in the public sale\\n    bool publicSaleActive;\\n    // The price of a token in the public sale in 1/100,000 ETH - e.g. 1 = 0.00001 ETH, 100,000 = 1 ETH - multiply by 10^13 to get correct wei amount\\n    uint32 publicPrice;\\n    // The number of tokens that can be minted in the public sale per address\\n    uint8 publicMintsAllowedPerAddress;\\n    // If enabled, automatic start and stop times for the public sale will be enforced, otherwise ignored\\n    bool usePublicSaleTimes;\\n    // The automatic start time for the public sale (if usePublicSaleTimes is true and publicSaleActive is true)\\n    uint32 publicSaleStartTime;\\n    // The automatic end time for the public sale (if usePublicSaleTimes is true and publicSaleActive is true)\\n    uint32 publicSaleEndTime;\\n    // If true tokens can be minted in the presale\\n    bool presaleActive;\\n    // The price of a token in the presale in 1/100,000 ETH\\n    uint32 presalePrice;\\n    // Total number of tokens available for minting in the presale\\n    uint16 presaleMaxSupply;\\n    // The number of tokens that can be minted in the presale per address\\n    uint8 presaleMintsAllowedPerAddress;\\n    // The uri for this token (defaults to using uriBase if not set).\\n    string tokenUri;\\n    // If enabled, automatic start and stop times for the presale will be enforced, otherwise ignored\\n    bool usePresaleTimes;\\n    // The automatic start time for the presale (if usePresaleTimes is true and presaleActive is true)\\n    uint32 presaleStartTime;\\n    // The automatic end time for the presale (if usePresaleTimes is true and presaleActive is true)\\n    uint32 presaleEndTime;\\n    // Free claim\\n    address freeClaimContractAddress;\\n    uint16 mintsPerFreeClaim;\\n    bool freeClaimActive;\\n    // Burn to mint\\n    uint32 burnPayment;\\n    uint16 mintsPerBurn;\\n    bool burnClaimActive;\\n    // Soulbinding\\n    bool soulbindingActive;\\n    // If set, the UTC timestamp in seconds until which tokens are refundable for refundPrice\\n    uint32 refundEndsAt;\\n    // The amount returned to a user in a token refund in 1/100,000 ETH\\n    uint32 refundPrice;\\n}\\n\\nstruct AdvancedConfig {\\n    // Optional address where royalties are paid out. If not set, royalties are paid to the contract owner.\\n    address royaltyPayoutAddress;\\n    // The respective share of funds to be sent to each address in payoutAddresses in basis points\\n    uint16[] payoutBasisPoints;\\n    // The addresses to which funds are sent when a token is sold. If empty, funds are sent to the contract owner.\\n    address[] payoutAddresses;\\n    // Permanenetly disables the ability to change payout addresses or basis points.\\n    bool payoutAddressesFrozen;\\n    // Custom addresses that are allowed to call the 'creditCardMint' function.\\n    address[] creditCardMintAddresses;\\n    // Soulbinding\\n    bool soulbindAdminTransfersPermanentlyDisabled;\\n    address soulboundAdminAddress;\\n    // The address where refunded tokens are returned. If not set, refunded tokens are sent to the contract owner.\\n    address refundAddress;\\n}\\n\\nstruct Data {\\n    // ============ BASE FUNCTIONALITY ============\\n    // All token ids on the contract\\n    uint16[] tokenIds;\\n    // HeyMint fee to be paid per minted token (if not set, defaults to defaultHeymintFeePerToken)\\n    uint256 heymintFeePerToken;\\n    // Keeps track of if advanced config settings have been initialized to prevent setting multiple times\\n    bool advancedConfigInitialized;\\n    // Keeps track of how many of each token have been minted.\\n    mapping(uint16 => uint16) totalSupply;\\n    // Keeps track of how many tokens each address has minted.\\n    mapping(address => mapping(uint16 => uint16)) tokensMintedByAddress;\\n    // If minting a token has been permanently disabled.\\n    mapping(uint16 => bool) tokenMintingPermanentlyDisabled;\\n    // Keeps track of token ids that have been used for free claim.\\n    mapping(uint16 => mapping(uint256 => bool)) tokenFreeClaimUsed;\\n    // Used to allow an admin to transfer soulbound tokens when necessary\\n    bool soulboundAdminTransferInProgress;\\n    mapping(uint16 => bool) tokenMetadataFrozen;\\n    bool allMetadataFrozen;\\n}\\n\\nstruct BurnToken {\\n    // The contract address of the token to be burned\\n    address contractAddress;\\n    // The type of contract - 1 = ERC-721, 2 = ERC-1155\\n    uint8 tokenType;\\n    // The number of tokens to burn per mint\\n    uint8 tokensPerBurn;\\n    // The ID of the token on an ERC-1155 contract eligible for burn; unused for ERC-721\\n    uint16 tokenId;\\n}\\n\\nlibrary HeyMintStorage {\\n    struct State {\\n        string name;\\n        string symbol;\\n        BaseConfig cfg;\\n        mapping(uint16 => TokenConfig) tokens;\\n        mapping(uint16 => BurnToken[]) burnTokens;\\n        AdvancedConfig advCfg;\\n        Data data;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256(\\\"heymint.launchpad.storage.erc1155\\\");\\n\\n    function state() internal pure returns (State storage s) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            s.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/testContracts/EnumerableERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\n\\n/**\\n * @author Created with HeyMint Launchpad https://launchpad.heymint.xyz\\n * @notice This contract handles minting Verification test tokens.\\n */\\ncontract EnumerableERC1155 is\\n    ERC1155Supply,\\n    Ownable,\\n    Pausable,\\n    ReentrancyGuard,\\n    ERC2981\\n{\\n    using ECDSA for bytes32;\\n\\n    // Used to validate authorized presale mint addresses\\n    address private presaleSignerAddress =\\n        0x0fE6E0D15E6F775138Ab556dE54B96d5C1358F3D;\\n    address public royaltyAddress = 0x7A4dF7B461f1bE3e88373a4d933aeefE2FAdcE71;\\n    address[] public payoutAddresses = [\\n        0xD3371FD388664Bd16A267788dbE977582B850f5b\\n    ];\\n    // Permanently freezes metadata for all tokens so they can never be changed\\n    bool public allMetadataFrozen = false;\\n    // If true, payout addresses and basis points are permanently frozen and can never be updated\\n    bool public payoutAddressesFrozen;\\n    // The amount of tokens minted by a given address for a given token id\\n    mapping(address => mapping(uint256 => uint256))\\n        public tokensMintedByAddress;\\n    // Permanently freezes metadata for a specific token id so it can never be changed\\n    mapping(uint256 => bool) public tokenMetadataFrozen;\\n    // If true, the given token id can never be minted again\\n    mapping(uint256 => bool) public tokenMintingPermanentlyDisabled;\\n    mapping(uint256 => bool) public tokenPresaleSaleActive;\\n    mapping(uint256 => bool) public tokenPublicSaleActive;\\n    // If true, sale start and end times for the presale will be enforced, else ignored\\n    mapping(uint256 => bool) public tokenUsePresaleTimes;\\n    // If true, sale start and end times for the public sale will be enforced, else ignored\\n    mapping(uint256 => bool) public tokenUsePublicSaleTimes;\\n    mapping(uint256 => string) public tokenURI;\\n    // Maximum supply of tokens that can be minted for each token id. If zero, this token is open edition and has no mint limit\\n    mapping(uint256 => uint256) public tokenMaxSupply;\\n    // If zero, this token is open edition and has no mint limit\\n    mapping(uint256 => uint256) public tokenPresaleMaxSupply;\\n    mapping(uint256 => uint256) public tokenPresaleMintsPerAddress;\\n    mapping(uint256 => uint256) public tokenPresalePrice;\\n    mapping(uint256 => uint256) public tokenPresaleSaleEndTime;\\n    mapping(uint256 => uint256) public tokenPresaleSaleStartTime;\\n    mapping(uint256 => uint256) public tokenPublicMintsPerAddress;\\n    mapping(uint256 => uint256) public tokenPublicPrice;\\n    mapping(uint256 => uint256) public tokenPublicSaleEndTime;\\n    mapping(uint256 => uint256) public tokenPublicSaleStartTime;\\n    string public name = \\\"Verification test\\\";\\n    string public symbol = \\\"VRT\\\";\\n    // The respective share of funds to be sent to each address in payoutAddresses in basis points\\n    uint256[] public payoutBasisPoints = [10000];\\n    uint96 public royaltyFee = 0;\\n\\n    constructor()\\n        ERC1155(\\n            \\\"ipfs://bafybeicin4rmb5y44r2a5jhwvobfgxutabetrttoi3u2po7pdymxt7dwdy/{id}\\\"\\n        )\\n    {\\n        _setDefaultRoyalty(royaltyAddress, royaltyFee);\\n        tokenPublicPrice[1] = 0.1 ether;\\n        tokenPublicMintsPerAddress[1] = 0;\\n        require(\\n            payoutAddresses.length == payoutBasisPoints.length,\\n            \\\"PAYOUT_ARRAYS_NOT_SAME_LENGTH\\\"\\n        );\\n        uint256 totalPayoutBasisPoints = 0;\\n        for (uint256 i = 0; i < payoutBasisPoints.length; i++) {\\n            totalPayoutBasisPoints += payoutBasisPoints[i];\\n        }\\n        require(\\n            totalPayoutBasisPoints == 10000,\\n            \\\"TOTAL_BASIS_POINTS_MUST_BE_10000\\\"\\n        );\\n    }\\n\\n    modifier originalUser() {\\n        require(tx.origin == msg.sender, \\\"CANNOT_CALL_FROM_CONTRACT\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns a custom URI for each token id if set\\n     */\\n    function uri(\\n        uint256 _tokenId\\n    ) public view override returns (string memory) {\\n        // If no URI exists for the specific id requested, fallback to the default ERC-1155 URI.\\n        if (bytes(tokenURI[_tokenId]).length == 0) {\\n            return super.uri(_tokenId);\\n        }\\n        return tokenURI[_tokenId];\\n    }\\n\\n    /**\\n     * @notice Sets a URI for a specific token id.\\n     */\\n    function setURI(\\n        uint256 _tokenId,\\n        string calldata _newTokenURI\\n    ) external onlyOwner {\\n        require(\\n            !allMetadataFrozen && !tokenMetadataFrozen[_tokenId],\\n            \\\"METADATA_HAS_BEEN_FROZEN\\\"\\n        );\\n        tokenURI[_tokenId] = _newTokenURI;\\n    }\\n\\n    /**\\n     * @notice Update the global default ERC-1155 base URI\\n     */\\n    function setGlobalURI(string calldata _newTokenURI) external onlyOwner {\\n        require(!allMetadataFrozen, \\\"METADATA_HAS_BEEN_FROZEN\\\");\\n        _setURI(_newTokenURI);\\n    }\\n\\n    /**\\n     * @notice Freeze metadata for a specific token id so it can never be changed again\\n     */\\n    function freezeTokenMetadata(uint256 _tokenId) external onlyOwner {\\n        require(\\n            !tokenMetadataFrozen[_tokenId],\\n            \\\"METADATA_HAS_ALREADY_BEEN_FROZEN\\\"\\n        );\\n        tokenMetadataFrozen[_tokenId] = true;\\n    }\\n\\n    /**\\n     * @notice Freeze all metadata so it can never be changed again\\n     */\\n    function freezeAllMetadata() external onlyOwner {\\n        require(!allMetadataFrozen, \\\"METADATA_HAS_ALREADY_BEEN_FROZEN\\\");\\n        allMetadataFrozen = true;\\n    }\\n\\n    /**\\n     * @notice Reduce the max supply of tokens for a given token id\\n     * @param _newMaxSupply The new maximum supply of tokens available to mint\\n     * @param _tokenId The token id to reduce the max supply for\\n     */\\n    function reduceMaxSupply(\\n        uint256 _tokenId,\\n        uint256 _newMaxSupply\\n    ) external onlyOwner {\\n        require(\\n            tokenMaxSupply[_tokenId] == 0 ||\\n                _newMaxSupply < tokenMaxSupply[_tokenId],\\n            \\\"NEW_MAX_SUPPLY_TOO_HIGH\\\"\\n        );\\n        require(\\n            _newMaxSupply >= totalSupply(_tokenId),\\n            \\\"SUPPLY_LOWER_THAN_MINTED_TOKENS\\\"\\n        );\\n        tokenMaxSupply[_tokenId] = _newMaxSupply;\\n    }\\n\\n    /**\\n     * @notice Lock a token id so that it can never be minted again\\n     */\\n    function permanentlyDisableTokenMinting(\\n        uint256 _tokenId\\n    ) external onlyOwner {\\n        tokenMintingPermanentlyDisabled[_tokenId] = true;\\n    }\\n\\n    /**\\n     * @notice Change the royalty fee for the collection\\n     */\\n    function setRoyaltyFee(uint96 _feeNumerator) external onlyOwner {\\n        royaltyFee = _feeNumerator;\\n        _setDefaultRoyalty(royaltyAddress, royaltyFee);\\n    }\\n\\n    /**\\n     * @notice Change the royalty address where royalty payouts are sent\\n     */\\n    function setRoyaltyAddress(address _royaltyAddress) external onlyOwner {\\n        royaltyAddress = _royaltyAddress;\\n        _setDefaultRoyalty(royaltyAddress, royaltyFee);\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Override ERC1155 such that zero amount token transfers are disallowed.\\n     * This prevents arbitrary 'creation' of new tokens in the collection by anyone.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public override {\\n        require(amount > 0, \\\"AMOUNT_CANNOT_BE_ZERO\\\");\\n        return super.safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 _interfaceId\\n    ) public view override(ERC1155, ERC2981) returns (bool) {\\n        return super.supportsInterface(_interfaceId);\\n    }\\n\\n    /**\\n     * @notice Allow owner to send tokens without cost to multiple addresses\\n     */\\n    function giftTokens(\\n        uint256 _tokenId,\\n        address[] calldata _receivers,\\n        uint256[] calldata _mintNumber\\n    ) external onlyOwner {\\n        require(\\n            !tokenMintingPermanentlyDisabled[_tokenId],\\n            \\\"MINTING_PERMANENTLY_DISABLED\\\"\\n        );\\n        uint256 totalMint = 0;\\n        for (uint256 i = 0; i < _mintNumber.length; i++) {\\n            totalMint += _mintNumber[i];\\n        }\\n        // require either no tokenMaxSupply set or tokenMaxSupply not maxed out\\n        require(\\n            tokenMaxSupply[_tokenId] == 0 ||\\n                totalSupply(_tokenId) + totalMint <= tokenMaxSupply[_tokenId],\\n            \\\"MINT_TOO_LARGE\\\"\\n        );\\n        for (uint256 i = 0; i < _receivers.length; i++) {\\n            _mint(_receivers[i], _tokenId, _mintNumber[i], \\\"\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice To be updated by contract owner to allow public sale minting for a given token\\n     */\\n    function setTokenPublicSaleState(\\n        uint256 _tokenId,\\n        bool _saleActiveState\\n    ) external onlyOwner {\\n        require(\\n            tokenPublicSaleActive[_tokenId] != _saleActiveState,\\n            \\\"NEW_STATE_IDENTICAL_TO_OLD_STATE\\\"\\n        );\\n        tokenPublicSaleActive[_tokenId] = _saleActiveState;\\n    }\\n\\n    /**\\n     * @notice Update the public mint price for a given token\\n     */\\n    function setTokenPublicPrice(\\n        uint256 _tokenId,\\n        uint256 _publicPrice\\n    ) external onlyOwner {\\n        tokenPublicPrice[_tokenId] = _publicPrice;\\n    }\\n\\n    /**\\n     * @notice Set the maximum public mints allowed per a given address for a given token\\n     */\\n    function setTokenPublicMintsAllowedPerAddress(\\n        uint256 _tokenId,\\n        uint256 _mintsAllowed\\n    ) external onlyOwner {\\n        tokenPublicMintsPerAddress[_tokenId] = _mintsAllowed;\\n    }\\n\\n    /**\\n     * @notice Update the start time for public mint for a given token\\n     */\\n    function setTokenPublicSaleStartTime(\\n        uint256 _tokenId,\\n        uint256 _publicSaleStartTime\\n    ) external onlyOwner {\\n        require(_publicSaleStartTime > block.timestamp, \\\"TIME_IN_PAST\\\");\\n        tokenPublicSaleStartTime[_tokenId] = _publicSaleStartTime;\\n    }\\n\\n    /**\\n     * @notice Update the end time for public mint for a given token\\n     */\\n    function setTokenPublicSaleEndTime(\\n        uint256 _tokenId,\\n        uint256 _publicSaleEndTime\\n    ) external onlyOwner {\\n        require(_publicSaleEndTime > block.timestamp, \\\"TIME_IN_PAST\\\");\\n        tokenPublicSaleEndTime[_tokenId] = _publicSaleEndTime;\\n    }\\n\\n    /**\\n     * @notice Update whether or not to use the automatic public sale times for a given token\\n     */\\n    function setTokenUsePublicSaleTimes(\\n        uint256 _tokenId,\\n        bool _usePublicSaleTimes\\n    ) external onlyOwner {\\n        require(\\n            tokenUsePublicSaleTimes[_tokenId] != _usePublicSaleTimes,\\n            \\\"NEW_STATE_IDENTICAL_TO_OLD_STATE\\\"\\n        );\\n        tokenUsePublicSaleTimes[_tokenId] = _usePublicSaleTimes;\\n    }\\n\\n    /**\\n     * @notice Returns if public sale times are active for a given token\\n     */\\n    function tokenPublicSaleTimeIsActive(\\n        uint256 _tokenId\\n    ) public view returns (bool) {\\n        if (tokenUsePublicSaleTimes[_tokenId] == false) {\\n            return true;\\n        }\\n        return\\n            block.timestamp >= tokenPublicSaleStartTime[_tokenId] &&\\n            block.timestamp <= tokenPublicSaleEndTime[_tokenId];\\n    }\\n\\n    /**\\n     * @notice Allow for public minting of tokens for a given token\\n     */\\n    function mintToken(\\n        uint256 _tokenId,\\n        uint256 _numTokens\\n    ) external payable originalUser nonReentrant {\\n        require(tokenPublicSaleActive[_tokenId], \\\"PUBLIC_SALE_IS_NOT_ACTIVE\\\");\\n        require(\\n            tokenPublicSaleTimeIsActive(_tokenId),\\n            \\\"PUBLIC_SALE_TIME_IS_NOT_ACTIVE\\\"\\n        );\\n        require(\\n            tokenPublicMintsPerAddress[_tokenId] == 0 ||\\n                tokensMintedByAddress[msg.sender][_tokenId] + _numTokens <=\\n                tokenPublicMintsPerAddress[_tokenId],\\n            \\\"MAX_MINTS_FOR_ADDRESS_EXCEEDED\\\"\\n        );\\n        require(\\n            tokenMaxSupply[_tokenId] == 0 ||\\n                totalSupply(_tokenId) + _numTokens <= tokenMaxSupply[_tokenId],\\n            \\\"MAX_SUPPLY_EXCEEDED\\\"\\n        );\\n        require(\\n            msg.value == tokenPublicPrice[_tokenId] * _numTokens,\\n            \\\"PAYMENT_INCORRECT\\\"\\n        );\\n        require(\\n            !tokenMintingPermanentlyDisabled[_tokenId],\\n            \\\"MINTING_PERMANENTLY_DISABLED\\\"\\n        );\\n\\n        tokensMintedByAddress[msg.sender][_tokenId] += _numTokens;\\n        _mint(msg.sender, _tokenId, _numTokens, \\\"\\\");\\n\\n        if (\\n            tokenMaxSupply[_tokenId] != 0 &&\\n            totalSupply(_tokenId) >= tokenMaxSupply[_tokenId]\\n        ) {\\n            tokenPublicSaleActive[_tokenId] = false;\\n        }\\n    }\\n\\n    /**\\n     * @notice Set the signer address used to verify presale minting\\n     */\\n    function setPresaleSignerAddress(\\n        address _presaleSignerAddress\\n    ) external onlyOwner {\\n        require(_presaleSignerAddress != address(0));\\n        presaleSignerAddress = _presaleSignerAddress;\\n    }\\n\\n    /**\\n     * @notice To be updated by contract owner to allow presale minting for a given token\\n     */\\n    function setTokenPresaleState(\\n        uint256 _tokenId,\\n        bool _saleActiveState\\n    ) external onlyOwner {\\n        require(\\n            tokenPresaleSaleActive[_tokenId] != _saleActiveState,\\n            \\\"NEW_STATE_IDENTICAL_TO_OLD_STATE\\\"\\n        );\\n        tokenPresaleSaleActive[_tokenId] = _saleActiveState;\\n    }\\n\\n    /**\\n     * @notice Update the presale mint price for a given token\\n     */\\n    function setTokenPresalePrice(\\n        uint256 _tokenId,\\n        uint256 _presalePrice\\n    ) external onlyOwner {\\n        tokenPresalePrice[_tokenId] = _presalePrice;\\n    }\\n\\n    /**\\n     * @notice Set the maximum presale mints allowed per a given address for a given token\\n     */\\n    function setTokenPresaleMintsAllowedPerAddress(\\n        uint256 _tokenId,\\n        uint256 _mintsAllowed\\n    ) external onlyOwner {\\n        tokenPresaleMintsPerAddress[_tokenId] = _mintsAllowed;\\n    }\\n\\n    /**\\n     * @notice Reduce the presale max supply of tokens for a given token id\\n     * @param _newPresaleMaxSupply The new maximum supply of tokens available to mint\\n     * @param _tokenId The token id to reduce the max supply for\\n     */\\n    function reducePresaleMaxSupply(\\n        uint256 _tokenId,\\n        uint256 _newPresaleMaxSupply\\n    ) external onlyOwner {\\n        require(\\n            tokenPresaleMaxSupply[_tokenId] == 0 ||\\n                _newPresaleMaxSupply < tokenPresaleMaxSupply[_tokenId],\\n            \\\"NEW_MAX_SUPPLY_TOO_HIGH\\\"\\n        );\\n        tokenPresaleMaxSupply[_tokenId] = _newPresaleMaxSupply;\\n    }\\n\\n    /**\\n     * @notice Update the start time for presale mint for a given token\\n     */\\n    function setTokenPresaleStartTime(\\n        uint256 _tokenId,\\n        uint256 _presaleStartTime\\n    ) external onlyOwner {\\n        require(_presaleStartTime > block.timestamp, \\\"TIME_IN_PAST\\\");\\n        tokenPresaleSaleStartTime[_tokenId] = _presaleStartTime;\\n    }\\n\\n    /**\\n     * @notice Update the end time for presale mint for a given token\\n     */\\n    function setTokenPresaleEndTime(\\n        uint256 _tokenId,\\n        uint256 _presaleEndTime\\n    ) external onlyOwner {\\n        require(_presaleEndTime > block.timestamp, \\\"TIME_IN_PAST\\\");\\n        tokenPresaleSaleEndTime[_tokenId] = _presaleEndTime;\\n    }\\n\\n    /**\\n     * @notice Update whether or not to use the automatic presale times for a given token\\n     */\\n    function setTokenUsePresaleTimes(\\n        uint256 _tokenId,\\n        bool _usePresaleTimes\\n    ) external onlyOwner {\\n        require(\\n            tokenUsePresaleTimes[_tokenId] != _usePresaleTimes,\\n            \\\"NEW_STATE_IDENTICAL_TO_OLD_STATE\\\"\\n        );\\n        tokenUsePresaleTimes[_tokenId] = _usePresaleTimes;\\n    }\\n\\n    /**\\n     * @notice Returns if presale times are active for a given token\\n     */\\n    function tokenPresaleTimeIsActive(\\n        uint256 _tokenId\\n    ) public view returns (bool) {\\n        if (tokenUsePresaleTimes[_tokenId] == false) {\\n            return true;\\n        }\\n        return\\n            block.timestamp >= tokenPresaleSaleStartTime[_tokenId] &&\\n            block.timestamp <= tokenPresaleSaleEndTime[_tokenId];\\n    }\\n\\n    /**\\n     * @notice Verify that a signed message is validly signed by the presaleSignerAddress\\n     */\\n    function verifySignerAddress(\\n        bytes32 _messageHash,\\n        bytes calldata _signature\\n    ) private view returns (bool) {\\n        return\\n            presaleSignerAddress ==\\n            _messageHash.toEthSignedMessageHash().recover(_signature);\\n    }\\n\\n    /**\\n     * @notice Allow for allowlist minting of tokens\\n     */\\n    function presaleMint(\\n        bytes32 _messageHash,\\n        bytes calldata _signature,\\n        uint256 _tokenId,\\n        uint256 _numTokens,\\n        uint256 _maximumAllowedMints\\n    ) external payable originalUser nonReentrant {\\n        require(tokenPresaleSaleActive[_tokenId], \\\"PRESALE_IS_NOT_ACTIVE\\\");\\n        require(\\n            tokenPresaleTimeIsActive(_tokenId),\\n            \\\"PRESALE_TIME_IS_NOT_ACTIVE\\\"\\n        );\\n        require(\\n            !tokenMintingPermanentlyDisabled[_tokenId],\\n            \\\"MINTING_PERMANENTLY_DISABLED\\\"\\n        );\\n        require(\\n            tokenPresaleMintsPerAddress[_tokenId] == 0 ||\\n                tokensMintedByAddress[msg.sender][_tokenId] + _numTokens <=\\n                tokenPresaleMintsPerAddress[_tokenId],\\n            \\\"MAX_MINTS_PER_ADDRESS_EXCEEDED\\\"\\n        );\\n        require(\\n            _maximumAllowedMints == 0 ||\\n                tokensMintedByAddress[msg.sender][_tokenId] + _numTokens <=\\n                _maximumAllowedMints,\\n            \\\"MAX_MINTS_EXCEEDED\\\"\\n        );\\n        require(\\n            tokenPresaleMaxSupply[_tokenId] == 0 ||\\n                totalSupply(_tokenId) + _numTokens <=\\n                tokenPresaleMaxSupply[_tokenId],\\n            \\\"MAX_SUPPLY_EXCEEDED\\\"\\n        );\\n        require(\\n            msg.value == tokenPresalePrice[_tokenId] * _numTokens,\\n            \\\"PAYMENT_INCORRECT\\\"\\n        );\\n        require(\\n            keccak256(abi.encode(msg.sender, _maximumAllowedMints, _tokenId)) ==\\n                _messageHash,\\n            \\\"MESSAGE_INVALID\\\"\\n        );\\n        require(\\n            verifySignerAddress(_messageHash, _signature),\\n            \\\"SIGNATURE_VALIDATION_FAILED\\\"\\n        );\\n\\n        tokensMintedByAddress[msg.sender][_tokenId] += _numTokens;\\n        _mint(msg.sender, _tokenId, _numTokens, \\\"\\\");\\n\\n        if (\\n            tokenPresaleMaxSupply[_tokenId] != 0 &&\\n            totalSupply(_tokenId) >= tokenPresaleMaxSupply[_tokenId]\\n        ) {\\n            tokenPresaleSaleActive[_tokenId] = false;\\n        }\\n    }\\n\\n    /**\\n     * @notice Freeze all payout addresses and percentages so they can never be changed again\\n     */\\n    function freezePayoutAddresses() external onlyOwner {\\n        require(!payoutAddressesFrozen, \\\"PAYOUT_ADDRESSES_ALREADY_FROZEN\\\");\\n        payoutAddressesFrozen = true;\\n    }\\n\\n    /**\\n     * @notice Update payout addresses and basis points for each addresses' respective share of contract funds\\n     */\\n    function updatePayoutAddressesAndBasisPoints(\\n        address[] calldata _payoutAddresses,\\n        uint256[] calldata _payoutBasisPoints\\n    ) external onlyOwner {\\n        require(!payoutAddressesFrozen, \\\"PAYOUT_ADDRESSES_FROZEN\\\");\\n        require(\\n            _payoutAddresses.length == _payoutBasisPoints.length,\\n            \\\"ARRAY_LENGTHS_MUST_MATCH\\\"\\n        );\\n        uint256 totalBasisPoints = 0;\\n        for (uint256 i = 0; i < _payoutBasisPoints.length; i++) {\\n            totalBasisPoints += _payoutBasisPoints[i];\\n        }\\n        require(totalBasisPoints == 10000, \\\"TOTAL_BASIS_POINTS_MUST_BE_10000\\\");\\n        payoutAddresses = _payoutAddresses;\\n        payoutBasisPoints = _payoutBasisPoints;\\n    }\\n\\n    /**\\n     * @notice Withdraws all funds held within contract\\n     */\\n    function withdraw() external onlyOwner nonReentrant {\\n        require(address(this).balance > 0, \\\"CONTRACT_HAS_NO_BALANCE\\\");\\n        uint256 balance = address(this).balance;\\n        for (uint256 i = 0; i < payoutAddresses.length; i++) {\\n            uint256 amount = (balance * payoutBasisPoints[i]) / 10000;\\n            (bool success, ) = payoutAddresses[i].call{value: amount}(\\\"\\\");\\n            require(success, \\\"Transfer failed.\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Override default ERC-1155 setApprovalForAll to require that the operator is not from a blocklisted exchange\\n     * @param operator Address to add to the set of authorized operators\\n     * @param approved True if the operator is approved, false to revoke approval\\n     */\\n    function setApprovalForAll(\\n        address operator,\\n        bool approved\\n    ) public override {\\n        super.setApprovalForAll(operator, approved);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal override whenNotPaused {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/testContracts/EnumerableERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {ERC721Enumerable, ERC721} from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\n/**\\n * @title Basic Enumerable ERC721 Contract\\n * @author Ben Yu\\n * @notice An ERC721Enumerable contract with basic functionality\\n */\\ncontract EnumerableERC721 is ERC721Enumerable, Ownable {\\n    using Counters for Counters.Counter;\\n    Counters.Counter private supplyCounter;\\n\\n    uint256 public constant PRICE = 0.01 ether;\\n    uint256 public constant MAX_SUPPLY = 1000;\\n\\n    string public baseTokenURI =\\n        \\\"ipfs://bafybeih5lgrstt7kredzhpcvmft2qefue5pl3ykrdktadw5w62zd7cbkja/\\\";\\n    bool public publicSaleActive;\\n\\n    /**\\n     * @notice Initialize the contract\\n     */\\n    constructor() ERC721(\\\"Test Contract\\\", \\\"TEST\\\") {\\n        // Start token IDs at 1\\n        supplyCounter.increment();\\n    }\\n\\n    /**\\n     * @notice Override the default base URI function to provide a real base URI\\n     */\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return baseTokenURI;\\n    }\\n\\n    /**\\n     * @notice Update the base token URI\\n     * @param _newBaseURI New base URI\\n     */\\n    function setBaseURI(string calldata _newBaseURI) external onlyOwner {\\n        baseTokenURI = _newBaseURI;\\n    }\\n\\n    /**\\n     * @notice Allows for public minting of tokens\\n     * @param _mintNumber Number of tokens to mint\\n     */\\n    function publicMint(uint256 _mintNumber) external payable virtual {\\n        require(msg.value == PRICE * _mintNumber, \\\"INVALID_PRICE\\\");\\n        require((totalSupply() + _mintNumber) <= MAX_SUPPLY, \\\"MINT_TOO_LARGE\\\");\\n\\n        for (uint256 i = 0; i < _mintNumber; i++) {\\n            _safeMint(msg.sender, supplyCounter.current());\\n            supplyCounter.increment();\\n        }\\n    }\\n\\n    /**\\n     * @notice Allow owner to send `mintNumber` tokens without cost to multiple addresses\\n     * @param _receivers Array of addresses to send tokens to\\n     * @param _mintNumber Number of tokens to send to each address\\n     */\\n    function gift(\\n        address[] calldata _receivers,\\n        uint256 _mintNumber\\n    ) external onlyOwner {\\n        require(\\n            (totalSupply() + (_receivers.length * _mintNumber)) <= MAX_SUPPLY,\\n            \\\"MINT_TOO_LARGE\\\"\\n        );\\n\\n        for (uint256 i = 0; i < _receivers.length; i++) {\\n            for (uint256 j = 0; j < _mintNumber; j++) {\\n                _safeMint(_receivers[i], supplyCounter.current());\\n                supplyCounter.increment();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Allow contract owner to withdraw funds\\n     */\\n    function withdraw() external onlyOwner {\\n        payable(owner()).transfer(address(this).balance);\\n    }\\n}\\n\"\r\n    },\r\n    \"operator-filter-registry/src/IOperatorFilterRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IOperatorFilterRegistry {\\n    /**\\n     * @notice Returns true if operator is not filtered for a given token, either by address or codeHash. Also returns\\n     *         true if supplied registrant address is not registered.\\n     */\\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\\n\\n    /**\\n     * @notice Registers an address with the registry. May be called by address itself or by EIP-173 owner.\\n     */\\n    function register(address registrant) external;\\n\\n    /**\\n     * @notice Registers an address with the registry and \\\"subscribes\\\" to another address's filtered operators and codeHashes.\\n     */\\n    function registerAndSubscribe(address registrant, address subscription) external;\\n\\n    /**\\n     * @notice Registers an address with the registry and copies the filtered operators and codeHashes from another\\n     *         address without subscribing.\\n     */\\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\\n\\n    /**\\n     * @notice Unregisters an address with the registry and removes its subscription. May be called by address itself or by EIP-173 owner.\\n     *         Note that this does not remove any filtered addresses or codeHashes.\\n     *         Also note that any subscriptions to this registrant will still be active and follow the existing filtered addresses and codehashes.\\n     */\\n    function unregister(address addr) external;\\n\\n    /**\\n     * @notice Update an operator address for a registered address - when filtered is true, the operator is filtered.\\n     */\\n    function updateOperator(address registrant, address operator, bool filtered) external;\\n\\n    /**\\n     * @notice Update multiple operators for a registered address - when filtered is true, the operators will be filtered. Reverts on duplicates.\\n     */\\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\\n\\n    /**\\n     * @notice Update a codeHash for a registered address - when filtered is true, the codeHash is filtered.\\n     */\\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\\n\\n    /**\\n     * @notice Update multiple codeHashes for a registered address - when filtered is true, the codeHashes will be filtered. Reverts on duplicates.\\n     */\\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\\n\\n    /**\\n     * @notice Subscribe an address to another registrant's filtered operators and codeHashes. Will remove previous\\n     *         subscription if present.\\n     *         Note that accounts with subscriptions may go on to subscribe to other accounts - in this case,\\n     *         subscriptions will not be forwarded. Instead the former subscription's existing entries will still be\\n     *         used.\\n     */\\n    function subscribe(address registrant, address registrantToSubscribe) external;\\n\\n    /**\\n     * @notice Unsubscribe an address from its current subscribed registrant, and optionally copy its filtered operators and codeHashes.\\n     */\\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\\n\\n    /**\\n     * @notice Get the subscription address of a given registrant, if any.\\n     */\\n    function subscriptionOf(address addr) external returns (address registrant);\\n\\n    /**\\n     * @notice Get the set of addresses subscribed to a given registrant.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function subscribers(address registrant) external returns (address[] memory);\\n\\n    /**\\n     * @notice Get the subscriber at a given index in the set of addresses subscribed to a given registrant.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function subscriberAt(address registrant, uint256 index) external returns (address);\\n\\n    /**\\n     * @notice Copy filtered operators and codeHashes from a different registrantToCopy to addr.\\n     */\\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\\n\\n    /**\\n     * @notice Returns true if operator is filtered by a given address or its subscription.\\n     */\\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\\n\\n    /**\\n     * @notice Returns true if the hash of an address's code is filtered by a given address or its subscription.\\n     */\\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\\n\\n    /**\\n     * @notice Returns true if a codeHash is filtered by a given address or its subscription.\\n     */\\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\\n\\n    /**\\n     * @notice Returns a list of filtered operators for a given address or its subscription.\\n     */\\n    function filteredOperators(address addr) external returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the set of filtered codeHashes for a given address or its subscription.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\\n\\n    /**\\n     * @notice Returns the filtered operator at the given index of the set of filtered operators for a given address or\\n     *         its subscription.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\\n\\n    /**\\n     * @notice Returns the filtered codeHash at the given index of the list of filtered codeHashes for a given address or\\n     *         its subscription.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\\n\\n    /**\\n     * @notice Returns true if an address has registered\\n     */\\n    function isRegistered(address addr) external returns (bool);\\n\\n    /**\\n     * @dev Convenience method to compute the code hash of an arbitrary contract\\n     */\\n    function codeHashOf(address addr) external returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"operator-filter-registry/src/upgradeable/OperatorFiltererUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport {IOperatorFilterRegistry} from \\\"../IOperatorFilterRegistry.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title  OperatorFiltererUpgradeable\\n * @notice Abstract contract whose constructor automatically registers and optionally subscribes to or copies another\\n *         registrant's entries in the OperatorFilterRegistry when the init function is called.\\n * @dev    This smart contract is meant to be inherited by token contracts so they can use the following:\\n *         - `onlyAllowedOperator` modifier for `transferFrom` and `safeTransferFrom` methods.\\n *         - `onlyAllowedOperatorApproval` modifier for `approve` and `setApprovalForAll` methods.\\n */\\nabstract contract OperatorFiltererUpgradeable is Initializable {\\n    /// @notice Emitted when an operator is not allowed.\\n    error OperatorNotAllowed(address operator);\\n\\n    IOperatorFilterRegistry constant OPERATOR_FILTER_REGISTRY =\\n        IOperatorFilterRegistry(0x000000000000AAeB6D7670E522A718067333cd4E);\\n\\n    /// @dev The upgradeable initialize function that should be called when the contract is being upgraded.\\n    function __OperatorFilterer_init(address subscriptionOrRegistrantToCopy, bool subscribe)\\n        internal\\n        onlyInitializing\\n    {\\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\\n        // order for the modifier to filter addresses.\\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\\n            if (!OPERATOR_FILTER_REGISTRY.isRegistered(address(this))) {\\n                if (subscribe) {\\n                    OPERATOR_FILTER_REGISTRY.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\\n                } else {\\n                    if (subscriptionOrRegistrantToCopy != address(0)) {\\n                        OPERATOR_FILTER_REGISTRY.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\\n                    } else {\\n                        OPERATOR_FILTER_REGISTRY.register(address(this));\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev A helper modifier to check if the operator is allowed.\\n     */\\n    modifier onlyAllowedOperator(address from) virtual {\\n        // Allow spending tokens from addresses with balance\\n        // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\\n        // from an EOA.\\n        if (from != msg.sender) {\\n            _checkFilterOperator(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev A helper modifier to check if the operator approval is allowed.\\n     */\\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\\n        _checkFilterOperator(operator);\\n        _;\\n    }\\n\\n    /**\\n     * @dev A helper function to check if the operator is allowed.\\n     */\\n    function _checkFilterOperator(address operator) internal view virtual {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\\n            // under normal circumstances, this function will revert rather than return false, but inheriting or\\n            // upgraded contracts may specify their own OperatorFilterRegistry implementations, which may behave\\n            // differently\\n            if (!OPERATOR_FILTER_REGISTRY.isOperatorAllowed(address(this), operator)) {\\n                revert OperatorNotAllowed(operator);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"operator-filter-registry/src/upgradeable/RevokableOperatorFiltererUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport {OperatorFiltererUpgradeable} from \\\"./OperatorFiltererUpgradeable.sol\\\";\\n\\n/**\\n * @title  Upgradeable storage layout for RevokableOperatorFiltererUpgradeable.\\n * @notice Upgradeable contracts must use a storage layout that can be used across upgrades.\\n *         Only append new variables to the end of the layout.\\n */\\nlibrary RevokableOperatorFiltererUpgradeableStorage {\\n    struct Layout {\\n        /// @dev Whether the OperatorFilterRegistry has been revoked.\\n        bool _isOperatorFilterRegistryRevoked;\\n    }\\n\\n    /// @dev The storage slot for the layout.\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"RevokableOperatorFiltererUpgradeable.contracts.storage\\\");\\n\\n    /// @dev The layout of the storage.\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\\n/**\\n * @title  RevokableOperatorFilterer\\n * @notice This contract is meant to allow contracts to permanently opt out of the OperatorFilterRegistry. The Registry\\n *         itself has an \\\"unregister\\\" function, but if the contract is ownable, the owner can re-register at any point.\\n *         As implemented, this abstract contract allows the contract owner to toggle the\\n *         isOperatorFilterRegistryRevoked flag in order to permanently bypass the OperatorFilterRegistry checks.\\n */\\nabstract contract RevokableOperatorFiltererUpgradeable is OperatorFiltererUpgradeable {\\n    using RevokableOperatorFiltererUpgradeableStorage for RevokableOperatorFiltererUpgradeableStorage.Layout;\\n\\n    error OnlyOwner();\\n    error AlreadyRevoked();\\n\\n    event OperatorFilterRegistryRevoked();\\n\\n    function __RevokableOperatorFilterer_init(address subscriptionOrRegistrantToCopy, bool subscribe) internal {\\n        OperatorFiltererUpgradeable.__OperatorFilterer_init(subscriptionOrRegistrantToCopy, subscribe);\\n    }\\n\\n    /**\\n     * @dev A helper function to check if the operator is allowed.\\n     */\\n    function _checkFilterOperator(address operator) internal view virtual override {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (\\n            !RevokableOperatorFiltererUpgradeableStorage.layout()._isOperatorFilterRegistryRevoked\\n                && address(OPERATOR_FILTER_REGISTRY).code.length > 0\\n        ) {\\n            // under normal circumstances, this function will revert rather than return false, but inheriting or\\n            // upgraded contracts may specify their own OperatorFilterRegistry implementations, which may behave\\n            // differently\\n            if (!OPERATOR_FILTER_REGISTRY.isOperatorAllowed(address(this), operator)) {\\n                revert OperatorNotAllowed(operator);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Disable the isOperatorFilterRegistryRevoked flag. OnlyOwner.\\n     */\\n    function revokeOperatorFilterRegistry() external {\\n        if (msg.sender != owner()) {\\n            revert OnlyOwner();\\n        }\\n        if (RevokableOperatorFiltererUpgradeableStorage.layout()._isOperatorFilterRegistryRevoked) {\\n            revert AlreadyRevoked();\\n        }\\n        RevokableOperatorFiltererUpgradeableStorage.layout()._isOperatorFilterRegistryRevoked = true;\\n        emit OperatorFilterRegistryRevoked();\\n    }\\n\\n    function isOperatorFilterRegistryRevoked() public view returns (bool) {\\n        return RevokableOperatorFiltererUpgradeableStorage.layout()._isOperatorFilterRegistryRevoked;\\n    }\\n\\n    /**\\n     * @dev assume the contract has an owner, but leave specific Ownable implementation up to inheriting contract\\n     */\\n    function owner() public view virtual returns (address);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_addressRelay\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"projectId\",\"type\":\"uint24\"},{\"internalType\":\"bool\",\"name\":\"enforceRoyalties\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"royaltyBps\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"heyMintFeeActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"presaleSignerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uriBase\",\"type\":\"string\"}],\"internalType\":\"struct BaseConfig\",\"name\":\"_baseConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxSupply\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"publicSaleActive\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"publicPrice\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"publicMintsAllowedPerAddress\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"usePublicSaleTimes\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"publicSaleStartTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"publicSaleEndTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"presaleActive\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"presalePrice\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"presaleMaxSupply\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"presaleMintsAllowedPerAddress\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"usePresaleTimes\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"presaleStartTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"presaleEndTime\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"freeClaimContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"mintsPerFreeClaim\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"freeClaimActive\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"burnPayment\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"mintsPerBurn\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"burnClaimActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"soulbindingActive\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"refundEndsAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"refundPrice\",\"type\":\"uint32\"}],\"internalType\":\"struct TokenConfig[]\",\"name\":\"_tokenConfig\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ThePotatoz", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000a5d3bb6006ad30c7c9e6df4156b9086a81b94948000000000000000000000000f33ea4a4296d0809b8a7a3d3c6452670874a317900000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000000000000e54686520506f7461746f7a2056320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007506f7461746f7a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045fd0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007d99dcef8c5a862fa89242a784754173b8b8a38a00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000047697066733a2f2f62616679626569637233666d6c3232786c666768637070756c636437643575336162346f7461757a6a767070356d6362796d6a7066356a6e346e6d2f7b69647dersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "1", "Implementation": "0xf33ea4a4296d0809b8a7a3d3c6452670874a3179", "SwarmSource": ""}