{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"WrapperBaseV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ENVELOP(NIFTSY) protocol V1 for NFT. Wrapper - main protocol contract\\npragma solidity 0.8.13;\\n\\nimport \\\"Ownable.sol\\\";\\nimport \\\"ERC721Holder.sol\\\";\\nimport \\\"ERC1155Holder.sol\\\";\\nimport \\\"ReentrancyGuard.sol\\\";\\nimport \\\"IFeeRoyaltyModel.sol\\\";\\nimport \\\"IWrapper.sol\\\";\\nimport \\\"IAdvancedWhiteList.sol\\\";\\nimport \\\"TokenService.sol\\\";\\n\\n// #### Envelop ProtocolV1 Rules\\n// 15   14   13   12   11   10   9   8   7   6   5   4   3   2   1   0  <= Bit number(dec)\\n// ------------------------------------------------------------------------------------  \\n//  1    1    1    1    1    1   1   1   1   1   1   1   1   1   1   1\\n//  |    |    |    |    |    |   |   |   |   |   |   |   |   |   |   |\\n//  |    |    |    |    |    |   |   |   |   |   |   |   |   |   |   +-No_Unwrap\\n//  |    |    |    |    |    |   |   |   |   |   |   |   |   |   +-No_Wrap \\n//  |    |    |    |    |    |   |   |   |   |   |   |   |   +-No_Transfer\\n//  |    |    |    |    |    |   |   |   |   |   |   |   +-No_Collateral\\n//  |    |    |    |    |    |   |   |   |   |   |   +-reserved_core\\n//  |    |    |    |    |    |   |   |   |   |   +-reserved_core\\n//  |    |    |    |    |    |   |   |   |   +-reserved_core  \\n//  |    |    |    |    |    |   |   |   +-reserved_core\\n//  |    |    |    |    |    |   |   |\\n//  |    |    |    |    |    |   |   |\\n//  +----+----+----+----+----+---+---+\\n//      for use in extendings\\n/**\\n * @title Non-Fungible Token Wrapper\\n * @dev Make  wraping for existing ERC721 & ERC1155 and empty \\n */\\ncontract WrapperBaseV1 is \\n    ReentrancyGuard, \\n    ERC721Holder, \\n    ERC1155Holder, \\n    IWrapper, \\n    TokenService, \\n    Ownable \\n{\\n\\n    uint256 public MAX_COLLATERAL_SLOTS = 25;\\n    address public protocolTechToken;\\n    address public protocolWhiteList;\\n\\n    // Map from wrapping asset type to wnft contract address and last minted id\\n    mapping(ETypes.AssetType => ETypes.NFTItem) public lastWNFTId;  \\n    \\n    // Map from wNFT address to it's type (721, 1155)\\n    mapping(address => ETypes.AssetType) public wnftTypes;\\n\\n    // Map from wrapped token address and id => wNFT record \\n    mapping(address => mapping(uint256 => ETypes.WNFT)) internal wrappedTokens; \\n\\n    constructor(address _erc20) {\\n        require(_erc20 != address(0), \\\"ProtocolTechToken cant be zero value\\\");\\n        protocolTechToken = _erc20;\\n        // This because default trnaferFe moddel included in techToken code\\n        IFeeRoyaltyModel(protocolTechToken).registerModel(); \\n    }\\n\\n    \\n    function wrap(\\n        ETypes.INData calldata _inData, \\n        ETypes.AssetItem[] calldata _collateral, \\n        address _wrappFor\\n    ) \\n        public \\n        virtual\\n        payable \\n        nonReentrant \\n        returns (ETypes.AssetItem memory) \\n    {\\n\\n        // 0. Check assetIn asset\\n        require(_checkWrap(_inData,_wrappFor),\\n            \\\"Wrap check fail\\\"\\n        );\\n        // 1. Take users inAsset\\n        if ( _inData.inAsset.asset.assetType != ETypes.AssetType.NATIVE &&\\n             _inData.inAsset.asset.assetType != ETypes.AssetType.EMPTY\\n        ) \\n        {\\n            require(\\n                _mustTransfered(_inData.inAsset) == _transferSafe(\\n                    _inData.inAsset, \\n                    msg.sender, \\n                    address(this)\\n                ),\\n                \\\"Suspicious asset for wrap\\\"\\n            );\\n        }\\n        \\n        // 2. Mint wNFT\\n        lastWNFTId[_inData.outType].tokenId += 1;  //Save just will minted id \\n        _mintNFT(\\n            _inData.outType,     // what will be minted instead of wrapping asset\\n            lastWNFTId[_inData.outType].contractAddress, // wNFT contract address\\n            _wrappFor,                                   // wNFT receiver (1st owner) \\n            lastWNFTId[_inData.outType].tokenId,        \\n            _inData.outBalance                           // wNFT tokenId\\n        );\\n        \\n        // 3. Safe wNFT info\\n        _saveWNFTinfo(\\n            lastWNFTId[_inData.outType].contractAddress, \\n            lastWNFTId[_inData.outType].tokenId,\\n            _inData\\n        );\\n\\n        \\n        addCollateral(\\n            lastWNFTId[_inData.outType].contractAddress, \\n            lastWNFTId[_inData.outType].tokenId,\\n            _collateral\\n        ); \\n         \\n        // Charge Fee Hook \\n        // There is No Any Fees in Protocol\\n        // So this hook can be used in b2b extensions of Envelop Protocol \\n        // 0x02 - feeType for WrapFee\\n        _chargeFees(\\n            lastWNFTId[_inData.outType].contractAddress, \\n            lastWNFTId[_inData.outType].tokenId, \\n            msg.sender, \\n            address(this), \\n            0x02\\n        );\\n        \\n\\n        emit WrappedV1(\\n            _inData.inAsset.asset.contractAddress,        // inAssetAddress\\n            lastWNFTId[_inData.outType].contractAddress,  // outAssetAddress\\n            _inData.inAsset.tokenId,                      // inAssetTokenId \\n            lastWNFTId[_inData.outType].tokenId,          // outTokenId \\n            _wrappFor,                                    // wnftFirstOwner\\n            msg.value,                                    // nativeCollateralAmount\\n            _inData.rules                                 // rules\\n        );\\n        return ETypes.AssetItem(\\n            ETypes.Asset(_inData.outType, lastWNFTId[_inData.outType].contractAddress),\\n            lastWNFTId[_inData.outType].tokenId,\\n            _inData.outBalance\\n        );\\n    }\\n\\n    function addCollateral(\\n        address _wNFTAddress, \\n        uint256 _wNFTTokenId, \\n        ETypes.AssetItem[] calldata _collateral\\n    ) public payable virtual  {\\n        if (_collateral.length > 0 || msg.value > 0) {\\n            require(\\n                _checkAddCollateral(\\n                    _wNFTAddress, \\n                    _wNFTTokenId,\\n                    _collateral\\n                ),\\n                \\\"Forbidden add collateral\\\"\\n            );\\n            _addCollateral(\\n                _wNFTAddress, \\n                _wNFTTokenId, \\n                _collateral\\n            );\\n        }\\n    }\\n\\n    \\n\\n    function unWrap(address _wNFTAddress, uint256 _wNFTTokenId) external virtual {\\n        unWrap(wnftTypes[_wNFTAddress], _wNFTAddress, _wNFTTokenId, false);\\n    }\\n\\n    function unWrap(\\n        ETypes.AssetType _wNFTType, \\n        address _wNFTAddress, \\n        uint256 _wNFTTokenId\\n    ) external virtual {\\n        unWrap(_wNFTType, _wNFTAddress, _wNFTTokenId, false);\\n    }\\n\\n    function unWrap(\\n        ETypes.AssetType _wNFTType, \\n        address _wNFTAddress, \\n        uint256 _wNFTTokenId, \\n        bool _isEmergency\\n    ) public virtual {\\n        // 1. Check core protocol logic:\\n        // - who and what possible to unwrap\\n        (address burnFor, uint256 burnBalance) = _checkCoreUnwrap(_wNFTType, _wNFTAddress, _wNFTTokenId);\\n\\n        // 2. Check  locks = move to _checkUnwrap\\n        require(\\n            _checkLocks(_wNFTAddress, _wNFTTokenId)\\n        );\\n\\n        // 3. Charge Fee Hook \\n        // There is No Any Fees in Protocol\\n        // So this hook can be used in b2b extensions of Envelop Protocol \\n        // 0x03 - feeType for UnWrapFee\\n        // \\n        _chargeFees(_wNFTAddress, _wNFTTokenId, msg.sender, address(this), 0x03);\\n        \\n        (uint256 nativeCollateralAmount, ) = getCollateralBalanceAndIndex(\\n            _wNFTAddress, \\n            _wNFTTokenId,\\n            ETypes.AssetType.NATIVE,\\n            address(0),\\n            0\\n        );\\n        ///////////////////////////////////////////////\\n        ///  Place for hook                        ////\\n        ///////////////////////////////////////////////\\n        // 4. Safe return collateral to appropriate benificiary\\n\\n        if (!_beforeUnWrapHook(_wNFTAddress, _wNFTTokenId, _isEmergency)) {\\n            return;\\n        }\\n        \\n        // 5. BurnWNFT\\n        _burnNFT(\\n            _wNFTType, \\n            _wNFTAddress, \\n            burnFor,  // msg.sender, \\n            _wNFTTokenId, \\n            burnBalance\\n        );\\n\\n        emit UnWrappedV1(\\n            _wNFTAddress,\\n            wrappedTokens[_wNFTAddress][_wNFTTokenId].inAsset.asset.contractAddress,\\n            _wNFTTokenId, \\n            wrappedTokens[_wNFTAddress][_wNFTTokenId].inAsset.tokenId,\\n            wrappedTokens[_wNFTAddress][_wNFTTokenId].unWrapDestination, \\n            nativeCollateralAmount,  // TODO Check  GAS\\n            wrappedTokens[_wNFTAddress][_wNFTTokenId].rules \\n        );\\n    } \\n\\n    function chargeFees(\\n        address _wNFTAddress, \\n        uint256 _wNFTTokenId, \\n        address _from, \\n        address _to,\\n        bytes1 _feeType\\n    ) \\n        public\\n        virtual  \\n        returns (bool) \\n    {\\n        //TODO  only wNFT contract can  execute  this(=charge fee)\\n        require(msg.sender == _wNFTAddress || msg.sender == address(this), \\n            \\\"Only for wNFT or wrapper\\\"\\n        );\\n        require(_chargeFees(_wNFTAddress, _wNFTTokenId, _from, _to, _feeType),\\n            \\\"Fee charge fail\\\"\\n        );\\n    }\\n    /////////////////////////////////////////////////////////////////////\\n    //                    Admin functions                              //\\n    /////////////////////////////////////////////////////////////////////\\n    function setWNFTId(\\n        ETypes.AssetType  _assetOutType, \\n        address _wnftContract, \\n        uint256 _tokenId\\n    ) external onlyOwner {\\n        require(_wnftContract != address(0), \\\"No zero address\\\");\\n        lastWNFTId[_assetOutType] = ETypes.NFTItem(_wnftContract, _tokenId);\\n        wnftTypes[_wnftContract] =  _assetOutType;\\n    }\\n\\n    function setWhiteList(address _wlAddress) external onlyOwner {\\n        protocolWhiteList = _wlAddress;\\n    }\\n    /////////////////////////////////////////////////////////////////////\\n\\n\\n    function getWrappedToken(address _wNFTAddress, uint256 _wNFTTokenId) \\n        public \\n        view \\n        returns (ETypes.WNFT memory) \\n    {\\n        return wrappedTokens[_wNFTAddress][_wNFTTokenId];\\n    }\\n\\n    function getOriginalURI(address _wNFTAddress, uint256 _wNFTTokenId) \\n        public \\n        view \\n        returns(string memory uri_) \\n    {\\n        ETypes.AssetItem memory _wnftInAsset = getWrappedToken(\\n                _wNFTAddress, _wNFTTokenId\\n        ).inAsset;\\n\\n        if (_wnftInAsset.asset.assetType == ETypes.AssetType.ERC721) {\\n            uri_ = IERC721Metadata(_wnftInAsset.asset.contractAddress).tokenURI(_wnftInAsset.tokenId);\\n        \\n        } else if (_wnftInAsset.asset.assetType == ETypes.AssetType.ERC1155) {\\n            uri_ = IERC1155MetadataURI(_wnftInAsset.asset.contractAddress).uri(_wnftInAsset.tokenId);\\n        \\n        } else {\\n            uri_ = '';\\n        } \\n    }\\n\\n    function getCollateralBalanceAndIndex(\\n        address _wNFTAddress, \\n        uint256 _wNFTTokenId,\\n        ETypes.AssetType _collateralType, \\n        address _erc,\\n        uint256 _tokenId\\n    ) public view returns (uint256, uint256) \\n    {\\n        for (uint256 i = 0; i < wrappedTokens[_wNFTAddress][_wNFTTokenId].collateral.length; i ++) {\\n            if (wrappedTokens[_wNFTAddress][_wNFTTokenId].collateral[i].asset.contractAddress == _erc &&\\n                wrappedTokens[_wNFTAddress][_wNFTTokenId].collateral[i].tokenId == _tokenId &&\\n                wrappedTokens[_wNFTAddress][_wNFTTokenId].collateral[i].asset.assetType == _collateralType \\n            ) \\n            {\\n                return (wrappedTokens[_wNFTAddress][_wNFTTokenId].collateral[i].amount, i);\\n            }\\n        }\\n    } \\n    /////////////////////////////////////////////////////////////////////\\n    //                    Internals                                    //\\n    /////////////////////////////////////////////////////////////////////\\n    function _saveWNFTinfo(\\n        address wNFTAddress, \\n        uint256 tokenId, \\n        ETypes.INData calldata _inData\\n    ) internal virtual \\n    {\\n        wrappedTokens[wNFTAddress][tokenId].inAsset = _inData.inAsset;\\n        // We will use _inData.unWrapDestination  ONLY for RENT implementation\\n        // wrappedTokens[wNFTAddress][tokenId].unWrapDestination = _inData.unWrapDestination;\\n        wrappedTokens[wNFTAddress][tokenId].unWrapDestination = address(0);\\n        wrappedTokens[wNFTAddress][tokenId].rules = _inData.rules;\\n        \\n        // Copying of type struct ETypes.Fee memory[] \\n        // memory to storage not yet supported.\\n        for (uint256 i = 0; i < _inData.fees.length; i ++) {\\n            wrappedTokens[wNFTAddress][tokenId].fees.push(_inData.fees[i]);            \\n        }\\n\\n        for (uint256 i = 0; i < _inData.locks.length; i ++) {\\n            wrappedTokens[wNFTAddress][tokenId].locks.push(_inData.locks[i]);            \\n        }\\n\\n        for (uint256 i = 0; i < _inData.royalties.length; i ++) {\\n            wrappedTokens[wNFTAddress][tokenId].royalties.push(_inData.royalties[i]);            \\n        }\\n\\n    }\\n\\n    function _addCollateral(\\n        address _wNFTAddress, \\n        uint256 _wNFTTokenId, \\n        ETypes.AssetItem[] calldata _collateral\\n    ) internal virtual \\n    {\\n        // Process Native Colleteral\\n        if (msg.value > 0) {\\n            _updateCollateralInfo(\\n                _wNFTAddress, \\n                _wNFTTokenId,\\n                ETypes.AssetItem(\\n                    ETypes.Asset(ETypes.AssetType.NATIVE, address(0)),\\n                    0,\\n                    msg.value\\n                )\\n            );\\n            emit CollateralAdded(\\n                    _wNFTAddress, \\n                    _wNFTTokenId, \\n                    uint8(ETypes.AssetType.NATIVE),\\n                    address(0),\\n                    0,\\n                    msg.value\\n                );\\n        }\\n       \\n        // Process Token Colleteral\\n        for (uint256 i = 0; i <_collateral.length; i ++) {\\n            if (_collateral[i].asset.assetType != ETypes.AssetType.NATIVE) {\\n                \\n                // Check WhiteList Logic\\n                if  (protocolWhiteList != address(0)) {\\n                    require(\\n                        IAdvancedWhiteList(protocolWhiteList).enabledForCollateral(\\n                        _collateral[i].asset.contractAddress),\\n                        \\\"WL:Some assets are not enabled for collateral\\\"\\n                    );\\n                } \\n                require(\\n                    _mustTransfered(_collateral[i]) == _transferSafe(\\n                        _collateral[i], \\n                        msg.sender, \\n                        address(this)\\n                    ),\\n                    \\\"Suspicious asset for wrap\\\"\\n                );\\n                _updateCollateralInfo(\\n                    _wNFTAddress, \\n                    _wNFTTokenId,\\n                    _collateral[i]\\n                );\\n                emit CollateralAdded(\\n                    _wNFTAddress, \\n                    _wNFTTokenId, \\n                    uint8(_collateral[i].asset.assetType),\\n                    _collateral[i].asset.contractAddress,\\n                    _collateral[i].tokenId,\\n                    _collateral[i].amount\\n                );\\n            }\\n        }\\n    }\\n\\n    function _updateCollateralInfo(\\n        address _wNFTAddress, \\n        uint256 _wNFTTokenId, \\n        ETypes.AssetItem memory collateralItem\\n    ) internal virtual \\n    {\\n        /////////////////////////////////////////\\n        //  ERC20 & NATIVE Collateral         ///\\n        /////////////////////////////////////////\\n        if (collateralItem.asset.assetType == ETypes.AssetType.ERC20  ||\\n            collateralItem.asset.assetType == ETypes.AssetType.NATIVE) \\n        {\\n            require(collateralItem.tokenId == 0, \\\"TokenId must be zero\\\");\\n        }\\n\\n        /////////////////////////////////////////\\n        //  ERC1155 Collateral                ///\\n        // /////////////////////////////////////////\\n        // if (collateralItem.asset.assetType == ETypes.AssetType.ERC1155) {\\n        //  No need special checks\\n        // }    \\n\\n        /////////////////////////////////////////\\n        //  ERC721 Collateral                 ///\\n        /////////////////////////////////////////\\n        if (collateralItem.asset.assetType == ETypes.AssetType.ERC721 ) {\\n            require(collateralItem.amount == 0, \\\"Amount must be zero\\\");\\n        }\\n        /////////////////////////////////////////\\n        if (wrappedTokens[_wNFTAddress][_wNFTTokenId].collateral.length == 0 \\n            || collateralItem.asset.assetType == ETypes.AssetType.ERC721 \\n        )\\n        {\\n            // First record in collateral or 721\\n            _newCollateralItem(_wNFTAddress,_wNFTTokenId,collateralItem);\\n        }  else {\\n             // length > 0 \\n            (uint256 _amnt, uint256 _index) = getCollateralBalanceAndIndex(\\n                _wNFTAddress, \\n                _wNFTTokenId,\\n                collateralItem.asset.assetType, \\n                collateralItem.asset.contractAddress,\\n                collateralItem.tokenId\\n            );\\n\\n            if (_index > 0 ||\\n                   (_index == 0 \\n                    && wrappedTokens[_wNFTAddress][_wNFTTokenId].collateral[0].asset.contractAddress \\n                        == collateralItem.asset.contractAddress \\n                    ) \\n                ) \\n            {\\n                // We dont need addition if  for erc721 because for erc721 _amnt always be zero\\n                wrappedTokens[_wNFTAddress][_wNFTTokenId].collateral[_index].amount \\n                += collateralItem.amount;\\n\\n            } else {\\n                // _index == 0 &&  and no this  token record yet\\n                _newCollateralItem(_wNFTAddress,_wNFTTokenId,collateralItem);\\n            }\\n        }\\n    }\\n\\n    function _newCollateralItem(\\n        address _wNFTAddress, \\n        uint256 _wNFTTokenId, \\n        ETypes.AssetItem memory collateralItem\\n    ) internal virtual \\n\\n    {\\n        require(\\n            wrappedTokens[_wNFTAddress][_wNFTTokenId].collateral.length < MAX_COLLATERAL_SLOTS, \\n            \\\"Too much tokens in collateral\\\"\\n        );\\n\\n        for (uint256 i = 0; i < wrappedTokens[_wNFTAddress][_wNFTTokenId].locks.length; i ++) \\n        {\\n            // Personal Collateral count Lock check\\n            if (wrappedTokens[_wNFTAddress][_wNFTTokenId].locks[i].lockType == 0x02) {\\n                require(\\n                    wrappedTokens[_wNFTAddress][_wNFTTokenId].locks[i].param \\n                      >= (wrappedTokens[_wNFTAddress][_wNFTTokenId].collateral.length + 1),\\n                    \\\"Too much collateral slots for this wNFT\\\"\\n                );\\n            }\\n        }\\n        wrappedTokens[_wNFTAddress][_wNFTTokenId].collateral.push(collateralItem);\\n    }\\n\\n\\n    function _chargeFees(\\n        address _wNFTAddress, \\n        uint256 _wNFTTokenId, \\n        address _from, \\n        address _to,\\n        bytes1 _feeType\\n    ) \\n        internal\\n        virtual  \\n        returns (bool) \\n    {\\n        if (_feeType == 0x00) {// Transfer fee\\n            for (uint256 i = 0; i < wrappedTokens[_wNFTAddress][_wNFTTokenId].fees.length; i ++){\\n                /////////////////////////////////////////\\n                // For Transfer Fee -0x00             ///  \\n                /////////////////////////////////////////\\n                if (wrappedTokens[_wNFTAddress][_wNFTTokenId].fees[i].feeType == 0x00){\\n                   // - get modelAddress.  Default feeModel adddress always live in\\n                   // protocolTechToken. When white list used it is possible override that model.\\n                   // default model always  must be set  as protocolTechToken\\n                   address feeModel = protocolTechToken;\\n                    if  (protocolWhiteList != address(0)) {\\n                        feeModel = IAdvancedWhiteList(protocolWhiteList).getWLItem(\\n                            wrappedTokens[_wNFTAddress][_wNFTTokenId].fees[i].token).transferFeeModel;\\n                    }\\n\\n                    // - get transfer list from external model by feetype(with royalties)\\n                    (ETypes.AssetItem[] memory assetItems, \\n                     address[] memory from, \\n                     address[] memory to\\n                    ) =\\n                        IFeeRoyaltyModel(feeModel).getTransfersList(\\n                            wrappedTokens[_wNFTAddress][_wNFTTokenId].fees[i],\\n                            wrappedTokens[_wNFTAddress][_wNFTTokenId].royalties,\\n                            _from, \\n                            _to \\n                        );\\n                    // - execute transfers\\n                    uint256 actualTransfered;\\n                    for (uint256 j = 0; j < to.length; j ++){\\n                        // if transfer receiver(to) = address(this) lets consider\\n                        // wNFT as receiver. in this case received amount\\n                        // will be added to collateral\\n                        if (to[j]== address(this)){\\n                            _updateCollateralInfo(\\n                              _wNFTAddress, \\n                              _wNFTTokenId, \\n                               assetItems[j]\\n                            ); \\n                        }\\n                        actualTransfered = _transferSafe(assetItems[j], from[j], to[j]);\\n                        emit EnvelopFee(to[j], _wNFTAddress, _wNFTTokenId, actualTransfered); \\n                    }\\n                }\\n                //////////////////////////////////////////\\n            }\\n            return true;\\n        }\\n    }\\n\\n\\n    /**\\n     * @dev This hook may be overriden in inheritor contracts for extend\\n     * base functionality.\\n     *\\n     * @param _wNFTAddress -wrapped token address\\n     * @param _wNFTTokenId -wrapped token id\\n     * \\n     * must returns true for success unwrapping enable \\n     */\\n    function _beforeUnWrapHook(\\n        address _wNFTAddress, \\n        uint256 _wNFTTokenId, \\n        bool _emergency\\n    ) internal virtual returns (bool)\\n    {\\n        uint256 transfered;\\n        address receiver = msg.sender;\\n        if (wrappedTokens[_wNFTAddress][_wNFTTokenId].unWrapDestination != address(0)) {\\n            receiver = wrappedTokens[_wNFTAddress][_wNFTTokenId].unWrapDestination;\\n        }\\n\\n        for (uint256 i = 0; i < wrappedTokens[_wNFTAddress][_wNFTTokenId].collateral.length; i ++) {\\n            if (wrappedTokens[_wNFTAddress][_wNFTTokenId].collateral[i].asset.assetType \\n                != ETypes.AssetType.EMPTY\\n            ) {\\n                if (_emergency) {\\n                    // In case of something is wrong with any collateral (attack)\\n                    // user can use  this mode  for skip  malicious asset\\n                    transfered = _transferEmergency(\\n                        wrappedTokens[_wNFTAddress][_wNFTTokenId].collateral[i],\\n                        address(this),\\n                        receiver\\n                    );\\n                } else {\\n                    transfered = _transferSafe(\\n                        wrappedTokens[_wNFTAddress][_wNFTTokenId].collateral[i],\\n                        address(this),\\n                        receiver\\n                    );\\n                }\\n\\n                // we collect info about contracts with not standard behavior\\n                if (transfered != wrappedTokens[_wNFTAddress][_wNFTTokenId].collateral[i].amount ) {\\n                    emit SuspiciousFail(\\n                        _wNFTAddress, \\n                        _wNFTTokenId, \\n                        wrappedTokens[_wNFTAddress][_wNFTTokenId].collateral[i].asset.contractAddress\\n                    );\\n                }\\n\\n                // mark collateral record as returned\\n                wrappedTokens[_wNFTAddress][_wNFTTokenId].collateral[i].asset.assetType = ETypes.AssetType.EMPTY;                \\n            }\\n            // dont pop due in some case it c can be very costly\\n            // https://docs.soliditylang.org/en/v0.8.9/types.html#array-members  \\n\\n            // For safe exit in case of low gaslimit\\n            // this strange part of code can prevent only case \\n            // when when some collateral tokens spent unexpected gas limit\\n            if (\\n                gasleft() <= 1_000 &&\\n                    i < wrappedTokens[_wNFTAddress][_wNFTTokenId].collateral.length - 1\\n                ) \\n            {\\n                emit PartialUnWrapp(_wNFTAddress, _wNFTTokenId, i);\\n                //allReturned = false;\\n                return false;\\n            }\\n        }\\n\\n        // 5. Return Original\\n        if (wrappedTokens[_wNFTAddress][_wNFTTokenId].inAsset.asset.assetType != ETypes.AssetType.NATIVE && \\n            wrappedTokens[_wNFTAddress][_wNFTTokenId].inAsset.asset.assetType != ETypes.AssetType.EMPTY\\n        ) \\n        {\\n\\n            if (!_emergency){\\n                _transferSafe(\\n                    wrappedTokens[_wNFTAddress][_wNFTTokenId].inAsset,\\n                    address(this),\\n                    receiver\\n                );\\n            } else {\\n                _transferEmergency (\\n                    wrappedTokens[_wNFTAddress][_wNFTTokenId].inAsset,\\n                    address(this),\\n                    receiver\\n                );\\n            }\\n        }\\n        return true;\\n    }\\n    ////////////////////////////////////////////////////////////////////////////////////////////\\n\\n    function _mustTransfered(ETypes.AssetItem calldata _assetForTransfer) \\n        internal \\n        pure \\n        returns (uint256 mustTransfered) \\n    {\\n        // Available for wrap assets must be good transferable (stakable).\\n        // So for erc721  mustTransfered always be 1\\n        if (_assetForTransfer.asset.assetType == ETypes.AssetType.ERC721) {\\n            mustTransfered = 1;\\n        } else {\\n            mustTransfered = _assetForTransfer.amount;\\n        }\\n    }\\n     \\n    function _checkRule(bytes2 _rule, bytes2 _wNFTrules) internal view returns (bool) {\\n        return _rule == (_rule & _wNFTrules);\\n    }\\n\\n    // 0x00 - TimeLock\\n    // 0x01 - TransferFeeLock\\n    // 0x02 - Personal Collateral count Lock check\\n    function _checkLocks(address _wNFTAddress, uint256 _wNFTTokenId) internal view returns (bool) \\n    {\\n        // Lets check that inAsset\\n        for (uint256 i = 0; i < wrappedTokens[_wNFTAddress][_wNFTTokenId].locks.length; i ++) {\\n            // Time Lock check\\n            if (wrappedTokens[_wNFTAddress][_wNFTTokenId].locks[i].lockType == 0x00) {\\n                require(\\n                    wrappedTokens[_wNFTAddress][_wNFTTokenId].locks[i].param <= block.timestamp,\\n                    \\\"TimeLock error\\\"\\n                );\\n            }\\n\\n            // Fee Lock check\\n            if (wrappedTokens[_wNFTAddress][_wNFTTokenId].locks[i].lockType == 0x01) {\\n                // Lets check this lock rule against each fee record\\n                for (uint256 j = 0; j < wrappedTokens[_wNFTAddress][_wNFTTokenId].fees.length; j ++){\\n                    // Fee Lock depend  only from Transfer Fee - 0x00\\n                    if ( wrappedTokens[_wNFTAddress][_wNFTTokenId].fees[j].feeType == 0x00) {\\n                        (uint256 _bal,) = getCollateralBalanceAndIndex(\\n                            _wNFTAddress, \\n                            _wNFTTokenId,\\n                            ETypes.AssetType.ERC20,\\n                            wrappedTokens[_wNFTAddress][_wNFTTokenId].fees[j].token,\\n                            0\\n                        );\\n                        require(\\n                            wrappedTokens[_wNFTAddress][_wNFTTokenId].locks[i].param <= _bal,\\n                            \\\"TransferFeeLock error\\\"\\n                        );\\n                    }   \\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n\\n    function _checkWrap(ETypes.INData calldata _inData, address _wrappFor) \\n        internal \\n        view \\n        returns (bool enabled)\\n    {\\n        // Lets check that inAsset \\n        // 0x0002 - this rule disable wrap already wrappednFT (NO matryoshka)\\n        enabled = !_checkRule(0x0002, getWrappedToken(\\n            _inData.inAsset.asset.contractAddress, \\n            _inData.inAsset.tokenId).rules\\n            ) \\n            && _wrappFor != address(this);\\n        // Check WhiteList Logic\\n        if  (protocolWhiteList != address(0)) {\\n            require(\\n                !IAdvancedWhiteList(protocolWhiteList).getBLItem(_inData.inAsset.asset.contractAddress),\\n                \\\"WL:Asset disabled for wrap\\\"\\n            );\\n            require(\\n                IAdvancedWhiteList(protocolWhiteList).rulesEnabled(_inData.inAsset.asset.contractAddress, _inData.rules),\\n                \\\"WL:Some rules are disabled for this asset\\\"\\n            );\\n\\n            for (uint256 i = 0; i < _inData.fees.length; i ++){\\n                require(\\n                    IAdvancedWhiteList(protocolWhiteList).enabledForFee(\\n                    _inData.fees[i].token),\\n                    \\\"WL:Some assets are not enabled for fee\\\"\\n                );\\n            }\\n        }    \\n    }\\n    \\n    function _checkAddCollateral(\\n        address _wNFTAddress, \\n        uint256 _wNFTTokenId, \\n        ETypes.AssetItem[] calldata _collateral\\n    ) \\n        internal \\n        view \\n        returns (bool enabled)\\n    {\\n        // Check  that wNFT exist\\n        if (wnftTypes[_wNFTAddress] == ETypes.AssetType.ERC721) {\\n            require(IERC721Mintable(_wNFTAddress).exists(_wNFTTokenId), \\\"wNFT not exists\\\");\\n        } else if(wnftTypes[_wNFTAddress] == ETypes.AssetType.ERC1155) {\\n            require(IERC1155Mintable(_wNFTAddress).exists(_wNFTTokenId), \\\"wNFT not exists\\\");\\n        } else {\\n            revert UnSupportedAsset(\\n                ETypes.AssetItem(ETypes.Asset(wnftTypes[_wNFTAddress],_wNFTAddress),_wNFTTokenId, 0)\\n            );\\n        }\\n        // Lets check wNFT rules \\n        // 0x0008 - this rule disable add collateral\\n        enabled = !_checkRule(0x0008, getWrappedToken(_wNFTAddress, _wNFTTokenId).rules); \\n    }\\n\\n    function _checkCoreUnwrap(\\n        ETypes.AssetType _wNFTType, \\n        address _wNFTAddress, \\n        uint256 _wNFTTokenId\\n    ) \\n        internal \\n        view \\n        virtual \\n        returns (address burnFor, uint256 burnBalance) \\n    {\\n        \\n        // Lets wNFT rules \\n        // 0x0001 - this rule disable unwrap wrappednFT \\n        require(!_checkRule(0x0001, getWrappedToken(_wNFTAddress, _wNFTTokenId).rules),\\n            \\\"UnWrapp forbidden by author\\\"\\n        );\\n\\n        if (_wNFTType == ETypes.AssetType.ERC721) {\\n            // Only token owner can UnWrap\\n            burnFor = IERC721Mintable(_wNFTAddress).ownerOf(_wNFTTokenId);\\n            require(burnFor == msg.sender, \\n                'Only owner can unwrap it'\\n            ); \\n\\n        } else if (_wNFTType == ETypes.AssetType.ERC1155) {\\n            burnBalance = IERC1155Mintable(_wNFTAddress).totalSupply(_wNFTTokenId);\\n            burnFor = msg.sender;\\n            require(\\n                burnBalance ==\\n                IERC1155Mintable(_wNFTAddress).balanceOf(burnFor, _wNFTTokenId)\\n                ,'ERC115 unwrap available only for all totalSupply'\\n            );\\n            \\n        } else {\\n            revert UnSupportedAsset(ETypes.AssetItem(ETypes.Asset(_wNFTType,_wNFTAddress),_wNFTTokenId, 0));\\n        }\\n    }\\n}\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"ERC1155Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC1155Receiver.sol\\\";\\nimport \\\"ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"IFeeRoyaltyModel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\nimport \\\"LibEnvelopTypes.sol\\\";\\n\\ninterface IFeeRoyaltyModel {\\n    \\n    function registerModel() external;\\n    \\n    function getTransfersList(\\n        ETypes.Fee calldata _fee,\\n        ETypes.Royalty[] calldata _royalties,\\n        address _from, \\n        address _to\\n    ) external view returns (\\n      ETypes.AssetItem[] memory, \\n      address[] memory, \\n      address[] memory\\n    );\\n\\n    function wrapper() external returns (address);\\n}\"\r\n    },\r\n    \"LibEnvelopTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ENVELOP(NIFTSY) protocol V1 for NFT. \\npragma solidity 0.8.13;\\n\\nlibrary ETypes {\\n\\n    enum AssetType {EMPTY, NATIVE, ERC20, ERC721, ERC1155, FUTURE1, FUTURE2, FUTURE3}\\n    \\n    struct Asset {\\n        AssetType assetType;\\n        address contractAddress;\\n    }\\n\\n    struct AssetItem {\\n        Asset asset;\\n        uint256 tokenId;\\n        uint256 amount;\\n    }\\n\\n    struct NFTItem {\\n        address contractAddress;\\n        uint256 tokenId;   \\n    }\\n\\n    struct Fee {\\n        bytes1 feeType;\\n        uint256 param;\\n        address token; \\n    }\\n\\n    struct Lock {\\n        bytes1 lockType;\\n        uint256 param; \\n    }\\n\\n    struct Royalty {\\n        address beneficiary;\\n        uint16 percent;\\n    }\\n\\n    struct WNFT {\\n        AssetItem inAsset;\\n        AssetItem[] collateral;\\n        address unWrapDestination;\\n        Fee[] fees;\\n        Lock[] locks;\\n        Royalty[] royalties;\\n        bytes2 rules;\\n\\n    }\\n\\n    struct INData {\\n        AssetItem inAsset;\\n        address unWrapDestination;\\n        Fee[] fees;\\n        Lock[] locks;\\n        Royalty[] royalties;\\n        AssetType outType;\\n        uint256 outBalance;      //0- for 721 and any amount for 1155\\n        bytes2 rules;\\n\\n    }\\n\\n    struct WhiteListItem {\\n        bool enabledForFee;\\n        bool enabledForCollateral;\\n        bool enabledRemoveFromCollateral;\\n        address transferFeeModel;\\n    }\\n\\n    struct Rules {\\n        bytes2 onlythis;\\n        bytes2 disabled;\\n    }\\n\\n}\"\r\n    },\r\n    \"IWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\n//import \\\"IERC721Enumerable.sol\\\";\\nimport \\\"LibEnvelopTypes.sol\\\";\\n\\ninterface IWrapper  {\\n\\n    event WrappedV1(\\n        address indexed inAssetAddress,\\n        address indexed outAssetAddress, \\n        uint256 indexed inAssetTokenId, \\n        uint256 outTokenId,\\n        address wnftFirstOwner,\\n        uint256 nativeCollateralAmount,\\n        bytes2  rules\\n    );\\n\\n    event UnWrappedV1(\\n        address indexed wrappedAddress,\\n        address indexed originalAddress,\\n        uint256 indexed wrappedId, \\n        uint256 originalTokenId, \\n        address beneficiary, \\n        uint256 nativeCollateralAmount,\\n        bytes2  rules \\n    );\\n\\n    event CollateralAdded(\\n        address indexed wrappedAddress,\\n        uint256 indexed wrappedId,\\n        uint8   assetType,\\n        address collateralAddress,\\n        uint256 collateralTokenId,\\n        uint256 collateralBalance\\n    );\\n\\n    event PartialUnWrapp(\\n        address indexed wrappedAddress,\\n        uint256 indexed wrappedId,\\n        uint256 lastCollateralIndex\\n    );\\n    event SuspiciousFail(\\n        address indexed wrappedAddress,\\n        uint256 indexed wrappedId, \\n        address indexed failedContractAddress\\n    );\\n\\n    event EnvelopFee(\\n        address indexed receiver,\\n        address indexed wNFTConatract,\\n        uint256 indexed wNFTTokenId,\\n        uint256 amount\\n    );\\n\\n    function wrap(\\n        ETypes.INData calldata _inData, \\n        ETypes.AssetItem[] calldata _collateral, \\n        address _wrappFor\\n    ) \\n        external \\n        payable \\n    returns (ETypes.AssetItem memory);\\n\\n    // function wrapUnsafe(\\n    //     ETypes.INData calldata _inData, \\n    //     ETypes.AssetItem[] calldata _collateral, \\n    //     address _wrappFor\\n    // ) \\n    //     external \\n    //     payable\\n    // returns (ETypes.AssetItem memory);\\n\\n    function addCollateral(\\n        address _wNFTAddress, \\n        uint256 _wNFTTokenId, \\n        ETypes.AssetItem[] calldata _collateral\\n    ) external payable;\\n\\n    // function addCollateralUnsafe(\\n    //     address _wNFTAddress, \\n    //     uint256 _wNFTTokenId, \\n    //     ETypes.AssetItem[] calldata _collateral\\n    // ) \\n    //     external \\n    //     payable;\\n\\n    function unWrap(\\n        address _wNFTAddress, \\n        uint256 _wNFTTokenId\\n    ) external; \\n\\n    function unWrap(\\n        ETypes.AssetType _wNFTType, \\n        address _wNFTAddress, \\n        uint256 _wNFTTokenId\\n    ) external; \\n\\n    function unWrap(\\n        ETypes.AssetType _wNFTType, \\n        address _wNFTAddress, \\n        uint256 _wNFTTokenId, \\n        bool _isEmergency\\n    ) external;\\n\\n    function chargeFees(\\n        address _wNFTAddress, \\n        uint256 _wNFTTokenId, \\n        address _from, \\n        address _to,\\n        bytes1 _feeType\\n    ) \\n        external  \\n        returns (bool);   \\n\\n    ////////////////////////////////////////////////////////////////////// \\n    \\n    function MAX_COLLATERAL_SLOTS() external view returns (uint256);\\n    function protocolTechToken() external view returns (address);\\n    function protocolWhiteList() external view returns (address);\\n    //function trustedOperators(address _operator) external view returns (bool); \\n    //function lastWNFTId(ETypes.AssetType _assetType) external view returns (ETypes.NFTItem); \\n\\n    function getWrappedToken(address _wNFTAddress, uint256 _wNFTTokenId) \\n        external \\n        view \\n        returns (ETypes.WNFT memory);\\n\\n    function getOriginalURI(address _wNFTAddress, uint256 _wNFTTokenId) \\n        external \\n        view \\n        returns(string memory); \\n    \\n    function getCollateralBalanceAndIndex(\\n        address _wNFTAddress, \\n        uint256 _wNFTTokenId,\\n        ETypes.AssetType _collateralType, \\n        address _erc,\\n        uint256 _tokenId\\n    ) external view returns (uint256, uint256);\\n   \\n}\"\r\n    },\r\n    \"IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"IAdvancedWhiteList.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\n//import \\\"IERC721Enumerable.sol\\\";\\nimport \\\"LibEnvelopTypes.sol\\\";\\n\\ninterface IAdvancedWhiteList  {\\n\\n\\n    event WhiteListItemChanged(\\n        address indexed asset,\\n        bool enabledForFee,\\n        bool enabledForCollateral,\\n        bool enabledRemoveFromCollateral,\\n        address transferFeeModel\\n    );\\n    event BlackListItemChanged(\\n        address indexed asset,\\n        bool isBlackListed\\n    );\\n    function getWLItem(address _asset) external view returns (ETypes.WhiteListItem memory);\\n    function getWLItemCount() external view returns (uint256);\\n    function getBLItem(address _asset) external view returns (bool);\\n    function getBLItemCount() external view returns (uint256);\\n    function enabledForCollateral(address _asset) external view returns (bool);\\n    function enabledForFee(address _asset) external view returns (bool);\\n    function enabledRemoveFromCollateral(address _asset) external view returns (bool);\\n    function rulesEnabled(address _asset, bytes2 _rules) external view returns (bool);\\n    function validateRules(address _asset, bytes2 _rules) external view returns (bytes2);\\n}\"\r\n    },\r\n    \"TokenService.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ENVELOP(NIFTSY) protocol V1 for NFT. Wrapper - main protocol contract\\npragma solidity 0.8.13;\\n\\nimport \\\"SafeERC20.sol\\\";\\nimport \\\"IERC20Extended.sol\\\";\\nimport \\\"LibEnvelopTypes.sol\\\";\\nimport \\\"IERC721Mintable.sol\\\";\\nimport \\\"IERC1155Mintable.sol\\\";\\n//import \\\"ITokenService.sol\\\";\\n\\nabstract contract TokenService {\\n\\tusing SafeERC20 for IERC20Extended;\\n    \\n    error UnSupportedAsset(ETypes.AssetItem asset);\\n\\t\\n    function _mintNFT(\\n        ETypes.AssetType _mint_type, \\n        address _contract, \\n        address _mintFor, \\n        uint256 _tokenId, \\n        uint256 _outBalance\\n    ) \\n        internal \\n        virtual\\n    {\\n        if (_mint_type == ETypes.AssetType.ERC721) {\\n            IERC721Mintable(_contract).mint(_mintFor, _tokenId);\\n        } else if (_mint_type == ETypes.AssetType.ERC1155) {\\n            IERC1155Mintable(_contract).mint(_mintFor, _tokenId, _outBalance);\\n        }\\n    }\\n\\n    function _burnNFT(\\n        ETypes.AssetType _burn_type, \\n        address _contract, \\n        address _burnFor, \\n        uint256 _tokenId, \\n        uint256 _balance\\n    ) \\n        internal\\n        virtual \\n    {\\n        if (_burn_type == ETypes.AssetType.ERC721) {\\n            IERC721Mintable(_contract).burn(_tokenId);\\n\\n        } else if (_burn_type == ETypes.AssetType.ERC1155) {\\n            IERC1155Mintable(_contract).burn(_burnFor, _tokenId, _balance);\\n        }\\n        \\n    }\\n\\n    function _transfer(\\n        ETypes.AssetItem memory _assetItem,\\n        address _from,\\n        address _to\\n    ) internal virtual returns (bool _transfered){\\n        if (_assetItem.asset.assetType == ETypes.AssetType.NATIVE) {\\n            (bool success, ) = _to.call{ value: _assetItem.amount}(\\\"\\\");\\n            require(success, \\\"transfer failed\\\");\\n            _transfered = true; \\n        } else if (_assetItem.asset.assetType == ETypes.AssetType.ERC20) {\\n            require(IERC20Extended(_assetItem.asset.contractAddress).balanceOf(_from) <= _assetItem.amount, \\\"UPS!!!!\\\");\\n            IERC20Extended(_assetItem.asset.contractAddress).safeTransferFrom(_from, _to, _assetItem.amount);\\n            _transfered = true;\\n        } else if (_assetItem.asset.assetType == ETypes.AssetType.ERC721) {\\n            IERC721Mintable(_assetItem.asset.contractAddress).transferFrom(_from, _to, _assetItem.tokenId);\\n            _transfered = true;\\n        } else if (_assetItem.asset.assetType == ETypes.AssetType.ERC1155) {\\n            IERC1155Mintable(_assetItem.asset.contractAddress).safeTransferFrom(_from, _to, _assetItem.tokenId, _assetItem.amount, \\\"\\\");\\n            _transfered = true;\\n        } else {\\n            revert UnSupportedAsset(_assetItem);\\n        }\\n        return _transfered;\\n    }\\n\\n    function _transferSafe(\\n        ETypes.AssetItem memory _assetItem,\\n        address _from,\\n        address _to\\n    ) internal virtual returns (uint256 _transferedValue){\\n        //TODO   think about try catch in transfers\\n        uint256 balanceBefore;\\n        if (_assetItem.asset.assetType == ETypes.AssetType.NATIVE) {\\n            balanceBefore = _to.balance;\\n            (bool success, ) = _to.call{ value: _assetItem.amount}(\\\"\\\");\\n            require(success, \\\"transfer failed\\\");\\n            _transferedValue = _to.balance - balanceBefore;\\n        \\n        } else if (_assetItem.asset.assetType == ETypes.AssetType.ERC20) {\\n            balanceBefore = IERC20Extended(_assetItem.asset.contractAddress).balanceOf(_to);\\n            if (_from == address(this)){\\n                IERC20Extended(_assetItem.asset.contractAddress).safeTransfer(_to, _assetItem.amount);\\n            } else {\\n                IERC20Extended(_assetItem.asset.contractAddress).safeTransferFrom(_from, _to, _assetItem.amount);\\n            }    \\n            _transferedValue = IERC20Extended(_assetItem.asset.contractAddress).balanceOf(_to) - balanceBefore;\\n        \\n        } else if (_assetItem.asset.assetType == ETypes.AssetType.ERC721 &&\\n            IERC721Mintable(_assetItem.asset.contractAddress).ownerOf(_assetItem.tokenId) == _from) {\\n            balanceBefore = IERC721Mintable(_assetItem.asset.contractAddress).balanceOf(_to); \\n            IERC721Mintable(_assetItem.asset.contractAddress).transferFrom(_from, _to, _assetItem.tokenId);\\n            if (IERC721Mintable(_assetItem.asset.contractAddress).ownerOf(_assetItem.tokenId) == _to &&\\n                IERC721Mintable(_assetItem.asset.contractAddress).balanceOf(_to) - balanceBefore == 1\\n                ) {\\n                _transferedValue = 1;\\n            }\\n        \\n        } else if (_assetItem.asset.assetType == ETypes.AssetType.ERC1155) {\\n            balanceBefore = IERC1155Mintable(_assetItem.asset.contractAddress).balanceOf(_to, _assetItem.tokenId);\\n            IERC1155Mintable(_assetItem.asset.contractAddress).safeTransferFrom(_from, _to, _assetItem.tokenId, _assetItem.amount, \\\"\\\");\\n            _transferedValue = IERC1155Mintable(_assetItem.asset.contractAddress).balanceOf(_to, _assetItem.tokenId) - balanceBefore;\\n        \\n        } else {\\n            revert UnSupportedAsset(_assetItem);\\n        }\\n        return _transferedValue;\\n    }\\n\\n    // This function must never revert. Use it for unwrap in case some \\n    // collateral transfers are revert\\n    function _transferEmergency(\\n        ETypes.AssetItem memory _assetItem,\\n        address _from,\\n        address _to\\n    ) internal virtual returns (uint256 _transferedValue){\\n        //TODO   think about try catch in transfers\\n        uint256 balanceBefore;\\n        if (_assetItem.asset.assetType == ETypes.AssetType.NATIVE) {\\n            balanceBefore = _to.balance;\\n            (bool success, ) = _to.call{ value: _assetItem.amount}(\\\"\\\");\\n            //require(success, \\\"transfer failed\\\");\\n            _transferedValue = _to.balance - balanceBefore;\\n        \\n        } else if (_assetItem.asset.assetType == ETypes.AssetType.ERC20) {\\n            if (_from == address(this)){\\n               (bool success, ) = _assetItem.asset.contractAddress.call(\\n                   abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", _to, _assetItem.amount)\\n               );\\n            } else {\\n                (bool success, ) = _assetItem.asset.contractAddress.call(\\n                    abi.encodeWithSignature(\\\"transferFrom(address,address,uint256)\\\", _from,  _to, _assetItem.amount)\\n                );\\n            }    \\n            _transferedValue = _assetItem.amount;\\n        \\n        } else if (_assetItem.asset.assetType == ETypes.AssetType.ERC721) {\\n            (bool success, ) = _assetItem.asset.contractAddress.call(\\n                abi.encodeWithSignature(\\\"transferFrom(address,address,uint256)\\\", _from,  _to, _assetItem.tokenId)\\n            );\\n            _transferedValue = 1;\\n        \\n        } else if (_assetItem.asset.assetType == ETypes.AssetType.ERC1155) {\\n            (bool success, ) = _assetItem.asset.contractAddress.call(\\n                abi.encodeWithSignature(\\\"safeTransferFrom(address,address,uint256,uint256,bytes)\\\", _from, _to, _assetItem.tokenId, _assetItem.amount, \\\"\\\")\\n            );\\n            _transferedValue = _assetItem.amount;\\n        \\n        } else {\\n            revert UnSupportedAsset(_assetItem);\\n        }\\n        return _transferedValue;\\n    }\\n}\"\r\n    },\r\n    \"SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC20Extended.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"IERC20.sol\\\";\\n\\ninterface IERC20Extended is  IERC20 {\\n     function mint(address _to, uint256 _value) external;\\n}\"\r\n    },\r\n    \"IERC721Mintable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"IERC721Metadata.sol\\\";\\n\\ninterface IERC721Mintable is  IERC721Metadata {\\n     function mint(address _to, uint256 _tokenId) external;\\n     function burn(uint256 _tokenId) external;\\n     function exists(uint256 _tokenId) external view returns(bool);\\n}\"\r\n    },\r\n    \"IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"IERC1155Mintable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"IERC1155MetadataURI.sol\\\";\\n\\ninterface IERC1155Mintable is  IERC1155MetadataURI {\\n     function mint(address _to, uint256 _tokenId, uint256 _amount) external;\\n     function burn(address _to, uint256 _tokenId, uint256 _amount) external;\\n     function totalSupply(uint256 _id) external view returns (uint256); \\n     function exists(uint256 _tokenId) external view returns(bool);\\n}\"\r\n    },\r\n    \"IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"ITokenService.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ENVELOP(NIFTSY) protocol V1 for NFT. \\npragma solidity 0.8.13;\\n\\nimport \\\"LibEnvelopTypes.sol\\\";\\n\\n\\ninterface ITokenService {\\n\\n    error UnSupportedAsset(ETypes.AssetItem asset);\\n\\t\\n\\tfunction mintNFT(\\n        ETypes.AssetType _mint_type, \\n        address _contract, \\n        address _mintFor, \\n        uint256 _tokenId, \\n        uint256 _outBalance\\n    ) \\n        external;\\n    \\n\\n    function burnNFT(\\n        ETypes.AssetType _burn_type, \\n        address _contract, \\n        address _burnFor, \\n        uint256 _tokenId, \\n        uint256 _balance\\n    ) \\n        external; \\n\\n    function transfer(\\n        ETypes.AssetItem memory _assetItem,\\n        address _from,\\n        address _to\\n    ) external  returns (bool _transfered);\\n\\n    function transferSafe(\\n        ETypes.AssetItem memory _assetItem,\\n        address _from,\\n        address _to\\n    ) external  returns (uint256 _transferedValue);\\n\\n    // This function must never revert. Use it for unwrap in case some \\n    // collateral transfers are revert\\n    function transferEmergency(\\n        ETypes.AssetItem memory _assetItem,\\n        address _from,\\n        address _to\\n    ) external  returns (uint256 _transferedValue);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"WrapperBaseV1.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ETypes.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ETypes.Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ETypes.AssetItem\",\"name\":\"asset\",\"type\":\"tuple\"}],\"name\":\"UnSupportedAsset\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wrappedAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"wrappedId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateralAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralBalance\",\"type\":\"uint256\"}],\"name\":\"CollateralAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wNFTConatract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"wNFTTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EnvelopFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wrappedAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"wrappedId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastCollateralIndex\",\"type\":\"uint256\"}],\"name\":\"PartialUnWrapp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wrappedAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"wrappedId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"failedContractAddress\",\"type\":\"address\"}],\"name\":\"SuspiciousFail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wrappedAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"originalAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"wrappedId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originalTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeCollateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes2\",\"name\":\"rules\",\"type\":\"bytes2\"}],\"name\":\"UnWrappedV1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inAssetAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"outAssetAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"inAssetTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wnftFirstOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeCollateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes2\",\"name\":\"rules\",\"type\":\"bytes2\"}],\"name\":\"WrappedV1\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_COLLATERAL_SLOTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wNFTAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_wNFTTokenId\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"enum ETypes.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ETypes.Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ETypes.AssetItem[]\",\"name\":\"_collateral\",\"type\":\"tuple[]\"}],\"name\":\"addCollateral\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wNFTAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_wNFTTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes1\",\"name\":\"_feeType\",\"type\":\"bytes1\"}],\"name\":\"chargeFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wNFTAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_wNFTTokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum ETypes.AssetType\",\"name\":\"_collateralType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_erc\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getCollateralBalanceAndIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wNFTAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_wNFTTokenId\",\"type\":\"uint256\"}],\"name\":\"getOriginalURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wNFTAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_wNFTTokenId\",\"type\":\"uint256\"}],\"name\":\"getWrappedToken\",\"outputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ETypes.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ETypes.Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ETypes.AssetItem\",\"name\":\"inAsset\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum ETypes.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ETypes.Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ETypes.AssetItem[]\",\"name\":\"collateral\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"unWrapDestination\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes1\",\"name\":\"feeType\",\"type\":\"bytes1\"},{\"internalType\":\"uint256\",\"name\":\"param\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct ETypes.Fee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes1\",\"name\":\"lockType\",\"type\":\"bytes1\"},{\"internalType\":\"uint256\",\"name\":\"param\",\"type\":\"uint256\"}],\"internalType\":\"struct ETypes.Lock[]\",\"name\":\"locks\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"percent\",\"type\":\"uint16\"}],\"internalType\":\"struct ETypes.Royalty[]\",\"name\":\"royalties\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes2\",\"name\":\"rules\",\"type\":\"bytes2\"}],\"internalType\":\"struct ETypes.WNFT\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ETypes.AssetType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"lastWNFTId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolTechToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolWhiteList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ETypes.AssetType\",\"name\":\"_assetOutType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_wnftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"setWNFTId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wlAddress\",\"type\":\"address\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ETypes.AssetType\",\"name\":\"_wNFTType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_wNFTAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_wNFTTokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isEmergency\",\"type\":\"bool\"}],\"name\":\"unWrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ETypes.AssetType\",\"name\":\"_wNFTType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_wNFTAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_wNFTTokenId\",\"type\":\"uint256\"}],\"name\":\"unWrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wNFTAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_wNFTTokenId\",\"type\":\"uint256\"}],\"name\":\"unWrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wnftTypes\",\"outputs\":[{\"internalType\":\"enum ETypes.AssetType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ETypes.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ETypes.Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ETypes.AssetItem\",\"name\":\"inAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"unWrapDestination\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes1\",\"name\":\"feeType\",\"type\":\"bytes1\"},{\"internalType\":\"uint256\",\"name\":\"param\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct ETypes.Fee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes1\",\"name\":\"lockType\",\"type\":\"bytes1\"},{\"internalType\":\"uint256\",\"name\":\"param\",\"type\":\"uint256\"}],\"internalType\":\"struct ETypes.Lock[]\",\"name\":\"locks\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"percent\",\"type\":\"uint16\"}],\"internalType\":\"struct ETypes.Royalty[]\",\"name\":\"royalties\",\"type\":\"tuple[]\"},{\"internalType\":\"enum ETypes.AssetType\",\"name\":\"outType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"outBalance\",\"type\":\"uint256\"},{\"internalType\":\"bytes2\",\"name\":\"rules\",\"type\":\"bytes2\"}],\"internalType\":\"struct ETypes.INData\",\"name\":\"_inData\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum ETypes.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ETypes.Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ETypes.AssetItem[]\",\"name\":\"_collateral\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_wrappFor\",\"type\":\"address\"}],\"name\":\"wrap\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"enum ETypes.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct ETypes.Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ETypes.AssetItem\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "WrapperBaseV1", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000041610ffa592eca61adbd72751c6681dec8eb041c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}