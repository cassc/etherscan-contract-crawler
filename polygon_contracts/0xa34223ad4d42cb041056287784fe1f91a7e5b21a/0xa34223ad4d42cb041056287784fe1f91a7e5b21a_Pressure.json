{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/game/Pressure.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Pooky Game Contracts (game/Pressure.sol)\\npragma solidity ^0.8.17;\\n\\nimport \\\"../interfaces/IPOK.sol\\\";\\n\\n/**\\n * @title Pressure\\n * @author Mathieu Bour\\n * @notice Gameplay contract that allow to inflate/repair Pookyball tokens by spending $POK tokens and native currency.\\n * @dev This contract has the POK.BURNER role.\\n */\\ncontract Pressure {\\n  // Constants\\n  uint8[] public floors = [10, 20, 30, 40, 50, 60, 75, 100];\\n  uint256[] public floorsNAT = [0.064e18, 0.0538e18, 0.0452e18, 0.0379e18, 0.0319e18, 0.0268e18, 0.0225e18, 0.0189e18];\\n  uint256[] public floorsPOK = [2.286e18, 1.92e18, 1.613e18, 1.355e18, 1.138e18, 0.956e18, 0.803e18, 0.674e18];\\n\\n  // Contracts\\n  IPOK immutable pok;\\n  address immutable treasury;\\n\\n  /// Emitted when the Pookyball has been inflated.\\n  event Inflated(uint256 indexed tokenId, uint8 current, uint8 amount);\\n\\n  /// Thrown when the inflate parameters greater than 100\\n  error InvalidParameters(uint256 current, uint256 amount);\\n  /// Thrown when the msg.value of the inflate function does not cover the inflate cost.\\n  error InsufficientValue(uint256 expected, uint256 actual);\\n  /// Thrown when the sender does own enough $POK tokens.\\n  error InsufficientPOK(uint256 expected, uint256 actual);\\n  /// Thrown when the native transfer has failed.\\n  error TransferFailed(address recipient, uint256 amount);\\n\\n  constructor(IPOK _pok, address _treasury) {\\n    pok = _pok;\\n    treasury = _treasury;\\n  }\\n\\n  /**\\n   * @notice Compute the cost using the floors.\\n   * @param current The current token pressure.\\n   * @param amount The desired pressure increase.\\n   * @param values The floor values.\\n   */\\n  function compute(uint8 current, uint8 amount, uint256[] memory values) internal view returns (uint256) {\\n    if (current + amount > 100) {\\n      revert InvalidParameters(current, amount);\\n    }\\n\\n    uint256 sum = 0;\\n\\n    for (uint i = 0; i < floors.length; i++) {\\n      if (amount == 0) break;\\n      if (current > floors[i]) continue;\\n\\n      uint8 size = floors[i] + 1 - current;\\n      uint8 delta = size > amount ? amount : size;\\n\\n      sum += values[i] * delta;\\n      current += delta;\\n      amount -= delta;\\n    }\\n\\n    return sum;\\n  }\\n\\n  /**\\n   * @notice Get the price to inflate a Pookyball token in native currency.\\n   * @param current The current token pressure.\\n   * @param amount The desired pressure increase.\\n   */\\n  function priceNAT(uint8 current, uint8 amount) public view returns (uint256) {\\n    return compute(current, amount, floorsNAT);\\n  }\\n\\n  /**\\n   * @notice Get the price to inflate a Pookyball token in $POK tokens.\\n   * @param current The current token pressure.\\n   * @param amount The desired pressure increase.\\n   */\\n  function pricePOK(uint8 current, uint8 amount) public view returns (uint256) {\\n    return compute(current, amount, floorsPOK);\\n  }\\n\\n  /**\\n   * @notice Compute the cost using the floors.\\n   * @param tokenId The Pookyball token id to inflate.\\n   * @param current The current token pressure.\\n   * @param amount The desired pressure increase.\\n   */\\n  function inflate(uint256 tokenId, uint8 current, uint8 amount) external payable {\\n    if (msg.value > 0) {\\n      // Sender is paying with native currency\\n      uint256 amountNAT = priceNAT(current, amount);\\n\\n      if (msg.value < amountNAT) {\\n        revert InsufficientValue(msg.value, amountNAT);\\n      }\\n\\n      (bool sent, ) = address(treasury).call{ value: amountNAT }(\\\"\\\");\\n      if (!sent) {\\n        revert TransferFailed(msg.sender, amountNAT);\\n      }\\n    } else {\\n      // Sender is paying with $POK tokens\\n      uint256 amountPOK = pricePOK(current, amount);\\n\\n      if (pok.balanceOf(msg.sender) < amountPOK) {\\n        revert InsufficientPOK(pok.balanceOf(msg.sender), amountPOK);\\n      }\\n\\n      pok.burn(msg.sender, amountPOK);\\n    }\\n\\n    emit Inflated(tokenId, current, amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPOK.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Pooky Game Contracts (interfaces/IPOK.sol)\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title IPOK\\n * @author Mathieu Bour\\n * @notice Minimal $POK ERC20 token interface.\\n */\\ninterface IPOK is IAccessControl, IERC20 {\\n  /**\\n   * @notice Mint an arbitrary amount of $POK to an account.\\n   * @dev Requirements:\\n   * - only MINTER role can mint $POK tokens\\n   */\\n  function mint(address to, uint256 amount) external;\\n\\n  /**\\n   * @notice Burn an arbitrary amount of $POK of an sender account.\\n   * It is acknowledged that burning directly from the user wallet is anti-pattern\\n   * but since $POK is soulbounded, this allow to skip the ERC20 approve call.\\n   * @dev Requirements:\\n   * - only BURNER role can burn $POK tokens\\n   */\\n  function burn(address to, uint256 amount) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IPOK\",\"name\":\"_pok\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"InsufficientPOK\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"InsufficientValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"current\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InvalidParameters\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"current\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"}],\"name\":\"Inflated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"floors\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"floorsNAT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"floorsPOK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"current\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"}],\"name\":\"inflate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"current\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"}],\"name\":\"priceNAT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"current\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"}],\"name\":\"pricePOK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Pressure", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007b7e3b03f34b17d70c276c4886467d58867bbc94000000000000000000000000703662853d7f9ad9d8c44128222266a736741437", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}