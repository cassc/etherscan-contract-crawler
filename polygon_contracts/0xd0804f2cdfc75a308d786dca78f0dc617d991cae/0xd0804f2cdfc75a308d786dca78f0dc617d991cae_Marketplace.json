{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/marketplace/Marketplace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.11;\\n\\n//  ==========  External imports    ==========\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol\\\";\\n\\n//  ==========  Internal imports    ==========\\n\\nimport { IMarketplace } from \\\"../interfaces/marketplace/IMarketplace.sol\\\";\\nimport { ITWFee } from \\\"../interfaces/ITWFee.sol\\\";\\n\\nimport \\\"../openzeppelin-presets/metatx/ERC2771ContextUpgradeable.sol\\\";\\n\\nimport \\\"../lib/CurrencyTransferLib.sol\\\";\\nimport \\\"../lib/FeeType.sol\\\";\\n\\ncontract Marketplace is\\n    Initializable,\\n    IMarketplace,\\n    ReentrancyGuardUpgradeable,\\n    ERC2771ContextUpgradeable,\\n    MulticallUpgradeable,\\n    AccessControlEnumerableUpgradeable,\\n    IERC721ReceiverUpgradeable,\\n    IERC1155ReceiverUpgradeable\\n{\\n    /*///////////////////////////////////////////////////////////////\\n                            State variables\\n    //////////////////////////////////////////////////////////////*/\\n\\n    bytes32 private constant MODULE_TYPE = bytes32(\\\"Marketplace\\\");\\n    uint256 private constant VERSION = 2;\\n\\n    /// @dev Only lister role holders can create listings, when listings are restricted by lister address.\\n    bytes32 private constant LISTER_ROLE = keccak256(\\\"LISTER_ROLE\\\");\\n    /// @dev Only assets from NFT contracts with asset role can be listed, when listings are restricted by asset address.\\n    bytes32 private constant ASSET_ROLE = keccak256(\\\"ASSET_ROLE\\\");\\n\\n    /// @dev The address of the native token wrapper contract.\\n    address private immutable nativeTokenWrapper;\\n\\n    /// @dev The thirdweb contract with fee related information.\\n    ITWFee public immutable thirdwebFee;\\n\\n    /// @dev Total number of listings ever created in the marketplace.\\n    uint256 public totalListings;\\n\\n    /// @dev Contract level metadata.\\n    string public contractURI;\\n\\n    /// @dev The address that receives all platform fees from all sales.\\n    address private platformFeeRecipient;\\n\\n    /// @dev The max bps of the contract. So, 10_000 == 100 %\\n    uint64 public constant MAX_BPS = 10_000;\\n\\n    /// @dev The % of primary sales collected as platform fees.\\n    uint64 private platformFeeBps;\\n\\n    /// @dev\\n    /**\\n     *  @dev The amount of time added to an auction's 'endTime', if a bid is made within `timeBuffer`\\n     *       seconds of the existing `endTime`. Default: 15 minutes.\\n     */\\n    uint64 public timeBuffer;\\n\\n    /// @dev The minimum % increase required from the previous winning bid. Default: 5%.\\n    uint64 public bidBufferBps;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Mappings\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Mapping from uid of listing => listing info.\\n    mapping(uint256 => Listing) public listings;\\n\\n    /// @dev Mapping from uid of a direct listing => offeror address => offer made to the direct listing by the respective offeror.\\n    mapping(uint256 => mapping(address => Offer)) public offers;\\n\\n    /// @dev Mapping from uid of an auction listing => current winning bid in an auction.\\n    mapping(uint256 => Offer) public winningBid;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Modifiers\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Checks whether caller is a listing creator.\\n    modifier onlyListingCreator(uint256 _listingId) {\\n        require(listings[_listingId].tokenOwner == _msgSender(), \\\"!OWNER\\\");\\n        _;\\n    }\\n\\n    /// @dev Checks whether a listing exists.\\n    modifier onlyExistingListing(uint256 _listingId) {\\n        require(listings[_listingId].assetContract != address(0), \\\"DNE\\\");\\n        _;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    Constructor + initializer logic\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _nativeTokenWrapper, address _thirdwebFee) initializer {\\n        thirdwebFee = ITWFee(_thirdwebFee);\\n        nativeTokenWrapper = _nativeTokenWrapper;\\n    }\\n\\n    /// @dev Initiliazes the contract, like a constructor.\\n    function initialize(\\n        address _defaultAdmin,\\n        string memory _contractURI,\\n        address[] memory _trustedForwarders,\\n        address _platformFeeRecipient,\\n        uint256 _platformFeeBps\\n    ) external initializer {\\n        // Initialize inherited contracts, most base-like -> most derived.\\n        __ReentrancyGuard_init();\\n        __ERC2771Context_init(_trustedForwarders);\\n\\n        // Initialize this contract's state.\\n        timeBuffer = 15 minutes;\\n        bidBufferBps = 500;\\n\\n        contractURI = _contractURI;\\n        platformFeeBps = uint64(_platformFeeBps);\\n        platformFeeRecipient = _platformFeeRecipient;\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, _defaultAdmin);\\n        _setupRole(LISTER_ROLE, address(0));\\n        _setupRole(ASSET_ROLE, address(0));\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        Generic contract logic\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Lets the contract receives native tokens from `nativeTokenWrapper` withdraw.\\n    receive() external payable {}\\n\\n    /// @dev Returns the type of the contract.\\n    function contractType() external pure returns (bytes32) {\\n        return MODULE_TYPE;\\n    }\\n\\n    /// @dev Returns the version of the contract.\\n    function contractVersion() external pure returns (uint8) {\\n        return uint8(VERSION);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        ERC 165 / 721 / 1155 logic\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(AccessControlEnumerableUpgradeable, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId ||\\n            interfaceId == type(IERC721ReceiverUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                Listing (create-update-delete) logic\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Lets a token owner list tokens for sale: Direct Listing or Auction.\\n    function createListing(ListingParameters memory _params) external override {\\n        // Get values to populate `Listing`.\\n        uint256 listingId = totalListings;\\n        totalListings += 1;\\n\\n        address tokenOwner = _msgSender();\\n        TokenType tokenTypeOfListing = getTokenType(_params.assetContract);\\n        uint256 tokenAmountToList = getSafeQuantity(tokenTypeOfListing, _params.quantityToList);\\n\\n        require(tokenAmountToList > 0, \\\"QUANTITY\\\");\\n        require(hasRole(LISTER_ROLE, address(0)) || hasRole(LISTER_ROLE, _msgSender()), \\\"!LISTER\\\");\\n        require(hasRole(ASSET_ROLE, address(0)) || hasRole(ASSET_ROLE, _params.assetContract), \\\"!ASSET\\\");\\n\\n        uint256 startTime = _params.startTime;\\n        if (startTime < block.timestamp) {\\n            // do not allow listing to start in the past (1 hour buffer)\\n            require(block.timestamp - startTime < 1 hours, \\\"ST\\\");\\n            startTime = block.timestamp;\\n        }\\n\\n        validateOwnershipAndApproval(\\n            tokenOwner,\\n            _params.assetContract,\\n            _params.tokenId,\\n            tokenAmountToList,\\n            tokenTypeOfListing\\n        );\\n\\n        Listing memory newListing = Listing({\\n            listingId: listingId,\\n            tokenOwner: tokenOwner,\\n            assetContract: _params.assetContract,\\n            tokenId: _params.tokenId,\\n            startTime: startTime,\\n            endTime: startTime + _params.secondsUntilEndTime,\\n            quantity: tokenAmountToList,\\n            currency: _params.currencyToAccept,\\n            reservePricePerToken: _params.reservePricePerToken,\\n            buyoutPricePerToken: _params.buyoutPricePerToken,\\n            tokenType: tokenTypeOfListing,\\n            listingType: _params.listingType\\n        });\\n\\n        listings[listingId] = newListing;\\n\\n        // Tokens listed for sale in an auction are escrowed in Marketplace.\\n        if (newListing.listingType == ListingType.Auction) {\\n            require(newListing.buyoutPricePerToken >= newListing.reservePricePerToken, \\\"RESERVE\\\");\\n            transferListingTokens(tokenOwner, address(this), tokenAmountToList, newListing);\\n        }\\n\\n        emit ListingAdded(listingId, _params.assetContract, tokenOwner, newListing);\\n    }\\n\\n    /// @dev Lets a listing's creator edit the listing's parameters.\\n    function updateListing(\\n        uint256 _listingId,\\n        uint256 _quantityToList,\\n        uint256 _reservePricePerToken,\\n        uint256 _buyoutPricePerToken,\\n        address _currencyToAccept,\\n        uint256 _startTime,\\n        uint256 _secondsUntilEndTime\\n    ) external override onlyListingCreator(_listingId) {\\n        Listing memory targetListing = listings[_listingId];\\n        uint256 safeNewQuantity = getSafeQuantity(targetListing.tokenType, _quantityToList);\\n        bool isAuction = targetListing.listingType == ListingType.Auction;\\n\\n        require(safeNewQuantity != 0, \\\"QUANTITY\\\");\\n\\n        // Can only edit auction listing before it starts.\\n        if (isAuction) {\\n            require(block.timestamp < targetListing.startTime, \\\"STARTED\\\");\\n            require(_buyoutPricePerToken >= _reservePricePerToken, \\\"RESERVE\\\");\\n        }\\n\\n        if (_startTime < block.timestamp) {\\n            // do not allow listing to start in the past (1 hour buffer)\\n            require(block.timestamp - _startTime < 1 hours, \\\"ST\\\");\\n            _startTime = block.timestamp;\\n        }\\n\\n        uint256 newStartTime = _startTime == 0 ? targetListing.startTime : _startTime;\\n        listings[_listingId] = Listing({\\n            listingId: _listingId,\\n            tokenOwner: _msgSender(),\\n            assetContract: targetListing.assetContract,\\n            tokenId: targetListing.tokenId,\\n            startTime: newStartTime,\\n            endTime: _secondsUntilEndTime == 0 ? targetListing.endTime : newStartTime + _secondsUntilEndTime,\\n            quantity: safeNewQuantity,\\n            currency: _currencyToAccept,\\n            reservePricePerToken: _reservePricePerToken,\\n            buyoutPricePerToken: _buyoutPricePerToken,\\n            tokenType: targetListing.tokenType,\\n            listingType: targetListing.listingType\\n        });\\n\\n        // Must validate ownership and approval of the new quantity of tokens for diret listing.\\n        if (targetListing.quantity != safeNewQuantity) {\\n            // Transfer all escrowed tokens back to the lister, to be reflected in the lister's\\n            // balance for the upcoming ownership and approval check.\\n            if (isAuction) {\\n                transferListingTokens(address(this), targetListing.tokenOwner, targetListing.quantity, targetListing);\\n            }\\n\\n            validateOwnershipAndApproval(\\n                targetListing.tokenOwner,\\n                targetListing.assetContract,\\n                targetListing.tokenId,\\n                safeNewQuantity,\\n                targetListing.tokenType\\n            );\\n\\n            // Escrow the new quantity of tokens to list in the auction.\\n            if (isAuction) {\\n                transferListingTokens(targetListing.tokenOwner, address(this), safeNewQuantity, targetListing);\\n            }\\n        }\\n\\n        emit ListingUpdated(_listingId, targetListing.tokenOwner);\\n    }\\n\\n    /// @dev Lets a direct listing creator cancel their listing.\\n    function cancelDirectListing(uint256 _listingId) external onlyListingCreator(_listingId) {\\n        Listing memory targetListing = listings[_listingId];\\n\\n        require(targetListing.listingType == ListingType.Direct, \\\"!DIRECT\\\");\\n\\n        delete listings[_listingId];\\n\\n        emit ListingRemoved(_listingId, targetListing.tokenOwner);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    Direct lisitngs sales logic\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Lets an account buy a given quantity of tokens from a listing.\\n    function buy(\\n        uint256 _listingId,\\n        address _buyFor,\\n        uint256 _quantityToBuy,\\n        address _currency,\\n        uint256 _totalPrice\\n    ) external payable override nonReentrant onlyExistingListing(_listingId) {\\n        Listing memory targetListing = listings[_listingId];\\n        address payer = _msgSender();\\n\\n        // Check whether the settled total price and currency to use are correct.\\n        require(\\n            _currency == targetListing.currency && _totalPrice == (targetListing.buyoutPricePerToken * _quantityToBuy),\\n            \\\"!PRICE\\\"\\n        );\\n\\n        executeSale(\\n            targetListing,\\n            payer,\\n            _buyFor,\\n            targetListing.currency,\\n            targetListing.buyoutPricePerToken * _quantityToBuy,\\n            _quantityToBuy\\n        );\\n    }\\n\\n    /// @dev Lets a listing's creator accept an offer for their direct listing.\\n    function acceptOffer(\\n        uint256 _listingId,\\n        address _offeror,\\n        address _currency,\\n        uint256 _pricePerToken\\n    ) external override nonReentrant onlyListingCreator(_listingId) onlyExistingListing(_listingId) {\\n        Offer memory targetOffer = offers[_listingId][_offeror];\\n        Listing memory targetListing = listings[_listingId];\\n\\n        require(_currency == targetOffer.currency && _pricePerToken == targetOffer.pricePerToken, \\\"!PRICE\\\");\\n        require(targetOffer.expirationTimestamp > block.timestamp, \\\"EXPIRED\\\");\\n\\n        delete offers[_listingId][_offeror];\\n\\n        executeSale(\\n            targetListing,\\n            _offeror,\\n            _offeror,\\n            targetOffer.currency,\\n            targetOffer.pricePerToken * targetOffer.quantityWanted,\\n            targetOffer.quantityWanted\\n        );\\n    }\\n\\n    /// @dev Performs a direct listing sale.\\n    function executeSale(\\n        Listing memory _targetListing,\\n        address _payer,\\n        address _receiver,\\n        address _currency,\\n        uint256 _currencyAmountToTransfer,\\n        uint256 _listingTokenAmountToTransfer\\n    ) internal {\\n        validateDirectListingSale(\\n            _targetListing,\\n            _payer,\\n            _listingTokenAmountToTransfer,\\n            _currency,\\n            _currencyAmountToTransfer\\n        );\\n\\n        _targetListing.quantity -= _listingTokenAmountToTransfer;\\n        listings[_targetListing.listingId] = _targetListing;\\n\\n        payout(_payer, _targetListing.tokenOwner, _currency, _currencyAmountToTransfer, _targetListing);\\n        transferListingTokens(_targetListing.tokenOwner, _receiver, _listingTokenAmountToTransfer, _targetListing);\\n\\n        emit NewSale(\\n            _targetListing.listingId,\\n            _targetListing.assetContract,\\n            _targetListing.tokenOwner,\\n            _receiver,\\n            _listingTokenAmountToTransfer,\\n            _currencyAmountToTransfer\\n        );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        Offer/bid logic\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Lets an account (1) make an offer to a direct listing, or (2) make a bid in an auction.\\n    function offer(\\n        uint256 _listingId,\\n        uint256 _quantityWanted,\\n        address _currency,\\n        uint256 _pricePerToken,\\n        uint256 _expirationTimestamp\\n    ) external payable override nonReentrant onlyExistingListing(_listingId) {\\n        Listing memory targetListing = listings[_listingId];\\n\\n        require(\\n            targetListing.endTime > block.timestamp && targetListing.startTime < block.timestamp,\\n            \\\"inactive listing.\\\"\\n        );\\n\\n        // Both - (1) offers to direct listings, and (2) bids to auctions - share the same structure.\\n        Offer memory newOffer = Offer({\\n            listingId: _listingId,\\n            offeror: _msgSender(),\\n            quantityWanted: _quantityWanted,\\n            currency: _currency,\\n            pricePerToken: _pricePerToken,\\n            expirationTimestamp: _expirationTimestamp\\n        });\\n\\n        if (targetListing.listingType == ListingType.Auction) {\\n            // A bid to an auction must be made in the auction's desired currency.\\n            require(newOffer.currency == targetListing.currency, \\\"must use approved currency to bid\\\");\\n\\n            // A bid must be made for all auction items.\\n            newOffer.quantityWanted = getSafeQuantity(targetListing.tokenType, targetListing.quantity);\\n\\n            handleBid(targetListing, newOffer);\\n        } else if (targetListing.listingType == ListingType.Direct) {\\n            // Prevent potentially lost/locked native token.\\n            require(msg.value == 0, \\\"no value needed\\\");\\n\\n            // Offers to direct listings cannot be made directly in native tokens.\\n            newOffer.currency = _currency == CurrencyTransferLib.NATIVE_TOKEN ? nativeTokenWrapper : _currency;\\n            newOffer.quantityWanted = getSafeQuantity(targetListing.tokenType, _quantityWanted);\\n\\n            handleOffer(targetListing, newOffer);\\n        }\\n    }\\n\\n    /// @dev Processes a new offer to a direct listing.\\n    function handleOffer(Listing memory _targetListing, Offer memory _newOffer) internal {\\n        require(\\n            _newOffer.quantityWanted <= _targetListing.quantity && _targetListing.quantity > 0,\\n            \\\"insufficient tokens in listing.\\\"\\n        );\\n\\n        validateERC20BalAndAllowance(\\n            _newOffer.offeror,\\n            _newOffer.currency,\\n            _newOffer.pricePerToken * _newOffer.quantityWanted\\n        );\\n\\n        offers[_targetListing.listingId][_newOffer.offeror] = _newOffer;\\n\\n        emit NewOffer(\\n            _targetListing.listingId,\\n            _newOffer.offeror,\\n            _targetListing.listingType,\\n            _newOffer.quantityWanted,\\n            _newOffer.pricePerToken * _newOffer.quantityWanted,\\n            _newOffer.currency\\n        );\\n    }\\n\\n    /// @dev Processes an incoming bid in an auction.\\n    function handleBid(Listing memory _targetListing, Offer memory _incomingBid) internal {\\n        Offer memory currentWinningBid = winningBid[_targetListing.listingId];\\n        uint256 currentOfferAmount = currentWinningBid.pricePerToken * currentWinningBid.quantityWanted;\\n        uint256 incomingOfferAmount = _incomingBid.pricePerToken * _incomingBid.quantityWanted;\\n        address _nativeTokenWrapper = nativeTokenWrapper;\\n\\n        // Close auction and execute sale if there's a buyout price and incoming offer amount is buyout price.\\n        if (\\n            _targetListing.buyoutPricePerToken > 0 &&\\n            incomingOfferAmount >= _targetListing.buyoutPricePerToken * _targetListing.quantity\\n        ) {\\n            _closeAuctionForBidder(_targetListing, _incomingBid);\\n        } else {\\n            /**\\n             *      If there's an exisitng winning bid, incoming bid amount must be bid buffer % greater.\\n             *      Else, bid amount must be at least as great as reserve price\\n             */\\n            require(\\n                isNewWinningBid(\\n                    _targetListing.reservePricePerToken * _targetListing.quantity,\\n                    currentOfferAmount,\\n                    incomingOfferAmount\\n                ),\\n                \\\"not winning bid.\\\"\\n            );\\n\\n            // Update the winning bid and listing's end time before external contract calls.\\n            winningBid[_targetListing.listingId] = _incomingBid;\\n\\n            if (_targetListing.endTime - block.timestamp <= timeBuffer) {\\n                _targetListing.endTime += timeBuffer;\\n                listings[_targetListing.listingId] = _targetListing;\\n            }\\n        }\\n\\n        // Payout previous highest bid.\\n        if (currentWinningBid.offeror != address(0) && currentOfferAmount > 0) {\\n            CurrencyTransferLib.transferCurrencyWithWrapper(\\n                _targetListing.currency,\\n                address(this),\\n                currentWinningBid.offeror,\\n                currentOfferAmount,\\n                _nativeTokenWrapper\\n            );\\n        }\\n\\n        // Collect incoming bid\\n        CurrencyTransferLib.transferCurrencyWithWrapper(\\n            _targetListing.currency,\\n            _incomingBid.offeror,\\n            address(this),\\n            incomingOfferAmount,\\n            _nativeTokenWrapper\\n        );\\n\\n        emit NewOffer(\\n            _targetListing.listingId,\\n            _incomingBid.offeror,\\n            _targetListing.listingType,\\n            _incomingBid.quantityWanted,\\n            _incomingBid.pricePerToken * _incomingBid.quantityWanted,\\n            _incomingBid.currency\\n        );\\n    }\\n\\n    /// @dev Checks whether an incoming bid is the new current highest bid.\\n    function isNewWinningBid(\\n        uint256 _reserveAmount,\\n        uint256 _currentWinningBidAmount,\\n        uint256 _incomingBidAmount\\n    ) internal view returns (bool isValidNewBid) {\\n        if (_currentWinningBidAmount == 0) {\\n            isValidNewBid = _incomingBidAmount >= _reserveAmount;\\n        } else {\\n            isValidNewBid = (_incomingBidAmount > _currentWinningBidAmount &&\\n                ((_incomingBidAmount - _currentWinningBidAmount) * MAX_BPS) / _currentWinningBidAmount >= bidBufferBps);\\n        }\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    Auction lisitngs sales logic\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Lets an account close an auction for either the (1) winning bidder, or (2) auction creator.\\n    function closeAuction(uint256 _listingId, address _closeFor)\\n        external\\n        override\\n        nonReentrant\\n        onlyExistingListing(_listingId)\\n    {\\n        Listing memory targetListing = listings[_listingId];\\n\\n        require(targetListing.listingType == ListingType.Auction, \\\"not an auction.\\\");\\n\\n        Offer memory targetBid = winningBid[_listingId];\\n\\n        // Cancel auction if (1) auction hasn't started, or (2) auction doesn't have any bids.\\n        bool toCancel = targetListing.startTime > block.timestamp || targetBid.offeror == address(0);\\n\\n        if (toCancel) {\\n            // cancel auction listing owner check\\n            _cancelAuction(targetListing);\\n        } else {\\n            require(targetListing.endTime < block.timestamp, \\\"cannot close auction before it has ended.\\\");\\n\\n            // No `else if` to let auction close in 1 tx when targetListing.tokenOwner == targetBid.offeror.\\n            if (_closeFor == targetListing.tokenOwner) {\\n                _closeAuctionForAuctionCreator(targetListing, targetBid);\\n            }\\n\\n            if (_closeFor == targetBid.offeror) {\\n                _closeAuctionForBidder(targetListing, targetBid);\\n            }\\n        }\\n    }\\n\\n    /// @dev Cancels an auction.\\n    function _cancelAuction(Listing memory _targetListing) internal {\\n        require(listings[_targetListing.listingId].tokenOwner == _msgSender(), \\\"caller is not the listing creator.\\\");\\n\\n        delete listings[_targetListing.listingId];\\n\\n        transferListingTokens(address(this), _targetListing.tokenOwner, _targetListing.quantity, _targetListing);\\n\\n        emit AuctionClosed(_targetListing.listingId, _msgSender(), true, _targetListing.tokenOwner, address(0));\\n    }\\n\\n    /// @dev Closes an auction for an auction creator; distributes winning bid amount to auction creator.\\n    function _closeAuctionForAuctionCreator(Listing memory _targetListing, Offer memory _winningBid) internal {\\n        uint256 payoutAmount = _winningBid.pricePerToken * _targetListing.quantity;\\n\\n        _targetListing.quantity = 0;\\n        _targetListing.endTime = block.timestamp;\\n        listings[_targetListing.listingId] = _targetListing;\\n\\n        _winningBid.pricePerToken = 0;\\n        winningBid[_targetListing.listingId] = _winningBid;\\n\\n        payout(address(this), _targetListing.tokenOwner, _targetListing.currency, payoutAmount, _targetListing);\\n\\n        emit AuctionClosed(\\n            _targetListing.listingId,\\n            _msgSender(),\\n            false,\\n            _targetListing.tokenOwner,\\n            _winningBid.offeror\\n        );\\n    }\\n\\n    /// @dev Closes an auction for the winning bidder; distributes auction items to the winning bidder.\\n    function _closeAuctionForBidder(Listing memory _targetListing, Offer memory _winningBid) internal {\\n        uint256 quantityToSend = _winningBid.quantityWanted;\\n\\n        _targetListing.endTime = block.timestamp;\\n        _winningBid.quantityWanted = 0;\\n\\n        winningBid[_targetListing.listingId] = _winningBid;\\n        listings[_targetListing.listingId] = _targetListing;\\n\\n        transferListingTokens(address(this), _winningBid.offeror, quantityToSend, _targetListing);\\n\\n        emit AuctionClosed(\\n            _targetListing.listingId,\\n            _msgSender(),\\n            false,\\n            _targetListing.tokenOwner,\\n            _winningBid.offeror\\n        );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n            Shared (direct+auction listings) internal functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Transfers tokens listed for sale in a direct or auction listing.\\n    function transferListingTokens(\\n        address _from,\\n        address _to,\\n        uint256 _quantity,\\n        Listing memory _listing\\n    ) internal {\\n        if (_listing.tokenType == TokenType.ERC1155) {\\n            IERC1155Upgradeable(_listing.assetContract).safeTransferFrom(_from, _to, _listing.tokenId, _quantity, \\\"\\\");\\n        } else if (_listing.tokenType == TokenType.ERC721) {\\n            IERC721Upgradeable(_listing.assetContract).safeTransferFrom(_from, _to, _listing.tokenId, \\\"\\\");\\n        }\\n    }\\n\\n    /// @dev Pays out stakeholders in a sale.\\n    function payout(\\n        address _payer,\\n        address _payee,\\n        address _currencyToUse,\\n        uint256 _totalPayoutAmount,\\n        Listing memory _listing\\n    ) internal {\\n        uint256 platformFeeCut = (_totalPayoutAmount * platformFeeBps) / MAX_BPS;\\n\\n        (address twFeeRecipient, uint256 twFeeBps) = thirdwebFee.getFeeInfo(address(this), FeeType.MARKET_SALE);\\n        uint256 twFeeCut = (_totalPayoutAmount * twFeeBps) / MAX_BPS;\\n\\n        uint256 royaltyCut;\\n        address royaltyRecipient;\\n\\n        // Distribute royalties. See Sushiswap's https://github.com/sushiswap/shoyu/blob/master/contracts/base/BaseExchange.sol#L296\\n        try IERC2981Upgradeable(_listing.assetContract).royaltyInfo(_listing.tokenId, _totalPayoutAmount) returns (\\n            address royaltyFeeRecipient,\\n            uint256 royaltyFeeAmount\\n        ) {\\n            if (royaltyFeeRecipient != address(0) && royaltyFeeAmount > 0) {\\n                require(royaltyFeeAmount + platformFeeCut + twFeeCut <= _totalPayoutAmount, \\\"fees exceed the price\\\");\\n                royaltyRecipient = royaltyFeeRecipient;\\n                royaltyCut = royaltyFeeAmount;\\n            }\\n        } catch {}\\n\\n        // Distribute price to token owner\\n        address _nativeTokenWrapper = nativeTokenWrapper;\\n\\n        CurrencyTransferLib.transferCurrencyWithWrapper(\\n            _currencyToUse,\\n            _payer,\\n            platformFeeRecipient,\\n            platformFeeCut,\\n            _nativeTokenWrapper\\n        );\\n        CurrencyTransferLib.transferCurrencyWithWrapper(\\n            _currencyToUse,\\n            _payer,\\n            royaltyRecipient,\\n            royaltyCut,\\n            _nativeTokenWrapper\\n        );\\n        CurrencyTransferLib.transferCurrencyWithWrapper(\\n            _currencyToUse,\\n            _payer,\\n            twFeeRecipient,\\n            twFeeCut,\\n            _nativeTokenWrapper\\n        );\\n        CurrencyTransferLib.transferCurrencyWithWrapper(\\n            _currencyToUse,\\n            _payer,\\n            _payee,\\n            _totalPayoutAmount - (platformFeeCut + royaltyCut + twFeeCut),\\n            _nativeTokenWrapper\\n        );\\n    }\\n\\n    /// @dev Validates that `_addrToCheck` owns and has approved markeplace to transfer the appropriate amount of currency\\n    function validateERC20BalAndAllowance(\\n        address _addrToCheck,\\n        address _currency,\\n        uint256 _currencyAmountToCheckAgainst\\n    ) internal view {\\n        require(\\n            IERC20Upgradeable(_currency).balanceOf(_addrToCheck) >= _currencyAmountToCheckAgainst &&\\n                IERC20Upgradeable(_currency).allowance(_addrToCheck, address(this)) >= _currencyAmountToCheckAgainst,\\n            \\\"!BAL20\\\"\\n        );\\n    }\\n\\n    /// @dev Validates that `_tokenOwner` owns and has approved Market to transfer NFTs.\\n    function validateOwnershipAndApproval(\\n        address _tokenOwner,\\n        address _assetContract,\\n        uint256 _tokenId,\\n        uint256 _quantity,\\n        TokenType _tokenType\\n    ) internal view {\\n        address market = address(this);\\n        bool isValid;\\n\\n        if (_tokenType == TokenType.ERC1155) {\\n            isValid =\\n                IERC1155Upgradeable(_assetContract).balanceOf(_tokenOwner, _tokenId) >= _quantity &&\\n                IERC1155Upgradeable(_assetContract).isApprovedForAll(_tokenOwner, market);\\n        } else if (_tokenType == TokenType.ERC721) {\\n            isValid =\\n                IERC721Upgradeable(_assetContract).ownerOf(_tokenId) == _tokenOwner &&\\n                (IERC721Upgradeable(_assetContract).getApproved(_tokenId) == market ||\\n                    IERC721Upgradeable(_assetContract).isApprovedForAll(_tokenOwner, market));\\n        }\\n\\n        require(isValid, \\\"!BALNFT\\\");\\n    }\\n\\n    /// @dev Validates conditions of a direct listing sale.\\n    function validateDirectListingSale(\\n        Listing memory _listing,\\n        address _payer,\\n        uint256 _quantityToBuy,\\n        address _currency,\\n        uint256 settledTotalPrice\\n    ) internal {\\n        require(_listing.listingType == ListingType.Direct, \\\"cannot buy from listing.\\\");\\n\\n        // Check whether a valid quantity of listed tokens is being bought.\\n        require(\\n            _listing.quantity > 0 && _quantityToBuy > 0 && _quantityToBuy <= _listing.quantity,\\n            \\\"invalid amount of tokens.\\\"\\n        );\\n\\n        // Check if sale is made within the listing window.\\n        require(block.timestamp < _listing.endTime && block.timestamp > _listing.startTime, \\\"not within sale window.\\\");\\n\\n        // Check: buyer owns and has approved sufficient currency for sale.\\n        if (_currency == CurrencyTransferLib.NATIVE_TOKEN) {\\n            require(msg.value == settledTotalPrice, \\\"msg.value != price\\\");\\n        } else {\\n            validateERC20BalAndAllowance(_payer, _currency, settledTotalPrice);\\n        }\\n\\n        // Check whether token owner owns and has approved `quantityToBuy` amount of listing tokens from the listing.\\n        validateOwnershipAndApproval(\\n            _listing.tokenOwner,\\n            _listing.assetContract,\\n            _listing.tokenId,\\n            _quantityToBuy,\\n            _listing.tokenType\\n        );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            Getter functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Enforces quantity == 1 if tokenType is TokenType.ERC721.\\n    function getSafeQuantity(TokenType _tokenType, uint256 _quantityToCheck)\\n        internal\\n        pure\\n        returns (uint256 safeQuantity)\\n    {\\n        if (_quantityToCheck == 0) {\\n            safeQuantity = 0;\\n        } else {\\n            safeQuantity = _tokenType == TokenType.ERC721 ? 1 : _quantityToCheck;\\n        }\\n    }\\n\\n    /// @dev Returns the interface supported by a contract.\\n    function getTokenType(address _assetContract) internal view returns (TokenType tokenType) {\\n        if (IERC165Upgradeable(_assetContract).supportsInterface(type(IERC1155Upgradeable).interfaceId)) {\\n            tokenType = TokenType.ERC1155;\\n        } else if (IERC165Upgradeable(_assetContract).supportsInterface(type(IERC721Upgradeable).interfaceId)) {\\n            tokenType = TokenType.ERC721;\\n        } else {\\n            revert(\\\"token must be ERC1155 or ERC721.\\\");\\n        }\\n    }\\n\\n    /// @dev Returns the platform fee recipient and bps.\\n    function getPlatformFeeInfo() external view returns (address, uint16) {\\n        return (platformFeeRecipient, uint16(platformFeeBps));\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            Setter functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Lets a contract admin update platform fee recipient and bps.\\n    function setPlatformFeeInfo(address _platformFeeRecipient, uint256 _platformFeeBps)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(_platformFeeBps <= MAX_BPS, \\\"bps <= 10000.\\\");\\n\\n        platformFeeBps = uint64(_platformFeeBps);\\n        platformFeeRecipient = _platformFeeRecipient;\\n\\n        emit PlatformFeeInfoUpdated(_platformFeeRecipient, _platformFeeBps);\\n    }\\n\\n    /// @dev Lets a contract admin set auction buffers.\\n    function setAuctionBuffers(uint256 _timeBuffer, uint256 _bidBufferBps) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(_bidBufferBps < MAX_BPS, \\\"invalid BPS.\\\");\\n\\n        timeBuffer = uint64(_timeBuffer);\\n        bidBufferBps = uint64(_bidBufferBps);\\n\\n        emit AuctionBuffersUpdated(_timeBuffer, _bidBufferBps);\\n    }\\n\\n    /// @dev Lets a contract admin set the URI for the contract-level metadata.\\n    function setContractURI(string calldata _uri) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        contractURI = _uri;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            Miscellaneous\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override(ContextUpgradeable, ERC2771ContextUpgradeable)\\n        returns (address sender)\\n    {\\n        return ERC2771ContextUpgradeable._msgSender();\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override(ContextUpgradeable, ERC2771ContextUpgradeable)\\n        returns (bytes calldata)\\n    {\\n        return ERC2771ContextUpgradeable._msgData();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AddressUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract MulticallUpgradeable is Initializable {\\n    function __Multicall_init() internal onlyInitializing {\\n    }\\n\\n    function __Multicall_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = _functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/marketplace/IMarketplace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.11;\\n\\nimport \\\"../IThirdwebContract.sol\\\";\\nimport \\\"../../feature/interface/IPlatformFee.sol\\\";\\n\\ninterface IMarketplace is IThirdwebContract, IPlatformFee {\\n    /// @notice Type of the tokens that can be listed for sale.\\n    enum TokenType {\\n        ERC1155,\\n        ERC721\\n    }\\n\\n    /**\\n     *  @notice The two types of listings.\\n     *          `Direct`: NFTs listed for sale at a fixed price.\\n     *          `Auction`: NFTs listed for sale in an auction.\\n     */\\n    enum ListingType {\\n        Direct,\\n        Auction\\n    }\\n\\n    /**\\n     *  @notice The information related to either (1) an offer on a direct listing, or (2) a bid in an auction.\\n     *\\n     *  @dev The type of the listing at ID `lisingId` determins how the `Offer` is interpreted.\\n     *      If the listing is of type `Direct`, the `Offer` is interpreted as an offer to a direct listing.\\n     *      If the listing is of type `Auction`, the `Offer` is interpreted as a bid in an auction.\\n     *\\n     *  @param listingId      The uid of the listing the offer is made to.\\n     *  @param offeror        The account making the offer.\\n     *  @param quantityWanted The quantity of tokens from the listing wanted by the offeror.\\n     *                        This is the entire listing quantity if the listing is an auction.\\n     *  @param currency       The currency in which the offer is made.\\n     *  @param pricePerToken  The price per token offered to the lister.\\n     *  @param expirationTimestamp The timestamp after which a seller cannot accept this offer.\\n     */\\n    struct Offer {\\n        uint256 listingId;\\n        address offeror;\\n        uint256 quantityWanted;\\n        address currency;\\n        uint256 pricePerToken;\\n        uint256 expirationTimestamp;\\n    }\\n\\n    /**\\n     *  @dev For use in `createListing` as a parameter type.\\n     *\\n     *  @param assetContract         The contract address of the NFT to list for sale.\\n\\n     *  @param tokenId               The tokenId on `assetContract` of the NFT to list for sale.\\n\\n     *  @param startTime             The unix timestamp after which the listing is active. For direct listings:\\n     *                               'active' means NFTs can be bought from the listing. For auctions,\\n     *                               'active' means bids can be made in the auction.\\n     *\\n     *  @param secondsUntilEndTime   No. of seconds after `startTime`, after which the listing is inactive.\\n     *                               For direct listings: 'inactive' means NFTs cannot be bought from the listing.\\n     *                               For auctions: 'inactive' means bids can no longer be made in the auction.\\n     *\\n     *  @param quantityToList        The quantity of NFT of ID `tokenId` on the given `assetContract` to list. For\\n     *                               ERC 721 tokens to list for sale, the contract strictly defaults this to `1`,\\n     *                               Regardless of the value of `quantityToList` passed.\\n     *\\n     *  @param currencyToAccept      For direct listings: the currency in which a buyer must pay the listing's fixed price\\n     *                               to buy the NFT(s). For auctions: the currency in which the bidders must make bids.\\n     *\\n     *  @param reservePricePerToken  For direct listings: this value is ignored. For auctions: the minimum bid amount of\\n     *                               the auction is `reservePricePerToken * quantityToList`\\n     *\\n     *  @param buyoutPricePerToken   For direct listings: interpreted as 'price per token' listed. For auctions: if\\n     *                               `buyoutPricePerToken` is greater than 0, and a bidder's bid is at least as great as\\n     *                               `buyoutPricePerToken * quantityToList`, the bidder wins the auction, and the auction\\n     *                               is closed.\\n     *\\n     *  @param listingType           The type of listing to create - a direct listing or an auction.\\n    **/\\n    struct ListingParameters {\\n        address assetContract;\\n        uint256 tokenId;\\n        uint256 startTime;\\n        uint256 secondsUntilEndTime;\\n        uint256 quantityToList;\\n        address currencyToAccept;\\n        uint256 reservePricePerToken;\\n        uint256 buyoutPricePerToken;\\n        ListingType listingType;\\n    }\\n\\n    /**\\n     *  @notice The information related to a listing; either (1) a direct listing, or (2) an auction listing.\\n     *\\n     *  @dev For direct listings:\\n     *          (1) `reservePricePerToken` is ignored.\\n     *          (2) `buyoutPricePerToken` is simply interpreted as 'price per token'.\\n     *\\n     *  @param listingId             The uid for the listing.\\n     *\\n     *  @param tokenOwner            The owner of the tokens listed for sale.  \\n     *\\n     *  @param assetContract         The contract address of the NFT to list for sale.\\n\\n     *  @param tokenId               The tokenId on `assetContract` of the NFT to list for sale.\\n\\n     *  @param startTime             The unix timestamp after which the listing is active. For direct listings:\\n     *                               'active' means NFTs can be bought from the listing. For auctions,\\n     *                               'active' means bids can be made in the auction.\\n     *\\n     *  @param endTime               The timestamp after which the listing is inactive.\\n     *                               For direct listings: 'inactive' means NFTs cannot be bought from the listing.\\n     *                               For auctions: 'inactive' means bids can no longer be made in the auction.\\n     *\\n     *  @param quantity              The quantity of NFT of ID `tokenId` on the given `assetContract` listed. For\\n     *                               ERC 721 tokens to list for sale, the contract strictly defaults this to `1`,\\n     *                               Regardless of the value of `quantityToList` passed.\\n     *\\n     *  @param currency              For direct listings: the currency in which a buyer must pay the listing's fixed price\\n     *                               to buy the NFT(s). For auctions: the currency in which the bidders must make bids.\\n     *\\n     *  @param reservePricePerToken  For direct listings: this value is ignored. For auctions: the minimum bid amount of\\n     *                               the auction is `reservePricePerToken * quantityToList`\\n     *\\n     *  @param buyoutPricePerToken   For direct listings: interpreted as 'price per token' listed. For auctions: if\\n     *                               `buyoutPricePerToken` is greater than 0, and a bidder's bid is at least as great as\\n     *                               `buyoutPricePerToken * quantityToList`, the bidder wins the auction, and the auction\\n     *                               is closed.\\n     *\\n     *  @param tokenType             The type of the token(s) listed for for sale -- ERC721 or ERC1155 \\n     *\\n     * @param listingType            The type of listing to create - a direct listing or an auction.\\n    **/\\n    struct Listing {\\n        uint256 listingId;\\n        address tokenOwner;\\n        address assetContract;\\n        uint256 tokenId;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 quantity;\\n        address currency;\\n        uint256 reservePricePerToken;\\n        uint256 buyoutPricePerToken;\\n        TokenType tokenType;\\n        ListingType listingType;\\n    }\\n\\n    /// @dev Emitted when a new listing is created.\\n    event ListingAdded(\\n        uint256 indexed listingId,\\n        address indexed assetContract,\\n        address indexed lister,\\n        Listing listing\\n    );\\n\\n    /// @dev Emitted when the parameters of a listing are updated.\\n    event ListingUpdated(uint256 indexed listingId, address indexed listingCreator);\\n\\n    /// @dev Emitted when a listing is cancelled.\\n    event ListingRemoved(uint256 indexed listingId, address indexed listingCreator);\\n\\n    /**\\n     * @dev Emitted when a buyer buys from a direct listing, or a lister accepts some\\n     *      buyer's offer to their direct listing.\\n     */\\n    event NewSale(\\n        uint256 indexed listingId,\\n        address indexed assetContract,\\n        address indexed lister,\\n        address buyer,\\n        uint256 quantityBought,\\n        uint256 totalPricePaid\\n    );\\n\\n    /// @dev Emitted when (1) a new offer is made to a direct listing, or (2) when a new bid is made in an auction.\\n    event NewOffer(\\n        uint256 indexed listingId,\\n        address indexed offeror,\\n        ListingType indexed listingType,\\n        uint256 quantityWanted,\\n        uint256 totalOfferAmount,\\n        address currency\\n    );\\n\\n    /// @dev Emitted when an auction is closed.\\n    event AuctionClosed(\\n        uint256 indexed listingId,\\n        address indexed closer,\\n        bool indexed cancelled,\\n        address auctionCreator,\\n        address winningBidder\\n    );\\n\\n    /// @dev Emitted when auction buffers are updated.\\n    event AuctionBuffersUpdated(uint256 timeBuffer, uint256 bidBufferBps);\\n\\n    /**\\n     *  @notice Lets a token owner list tokens (ERC 721 or ERC 1155) for sale in a direct listing, or an auction.\\n     *\\n     *  @dev NFTs to list for sale in an auction are escrowed in Marketplace. For direct listings, the contract\\n     *       only checks whether the listing's creator owns and has approved Marketplace to transfer the NFTs to list.\\n     *\\n     *  @param _params The parameters that govern the listing to be created.\\n     */\\n    function createListing(ListingParameters memory _params) external;\\n\\n    /**\\n     *  @notice Lets a listing's creator edit the listing's parameters. A direct listing can be edited whenever.\\n     *          An auction listing cannot be edited after the auction has started.\\n     *\\n     *  @param _listingId            The uid of the lisitng to edit.\\n     *\\n     *  @param _quantityToList       The amount of NFTs to list for sale in the listing. For direct lisitngs, the contract\\n     *                               only checks whether the listing creator owns and has approved Marketplace to transfer\\n     *                               `_quantityToList` amount of NFTs to list for sale. For auction listings, the contract\\n     *                               ensures that exactly `_quantityToList` amount of NFTs to list are escrowed.\\n     *\\n     *  @param _reservePricePerToken For direct listings: this value is ignored. For auctions: the minimum bid amount of\\n     *                               the auction is `reservePricePerToken * quantityToList`\\n     *\\n     *  @param _buyoutPricePerToken  For direct listings: interpreted as 'price per token' listed. For auctions: if\\n     *                               `buyoutPricePerToken` is greater than 0, and a bidder's bid is at least as great as\\n     *                               `buyoutPricePerToken * quantityToList`, the bidder wins the auction, and the auction\\n     *                               is closed.\\n     *\\n     *  @param _currencyToAccept     For direct listings: the currency in which a buyer must pay the listing's fixed price\\n     *                               to buy the NFT(s). For auctions: the currency in which the bidders must make bids.\\n     *\\n     *  @param _startTime            The unix timestamp after which listing is active. For direct listings:\\n     *                               'active' means NFTs can be bought from the listing. For auctions,\\n     *                               'active' means bids can be made in the auction.\\n     *\\n     *  @param _secondsUntilEndTime  No. of seconds after the provided `_startTime`, after which the listing is inactive.\\n     *                               For direct listings: 'inactive' means NFTs cannot be bought from the listing.\\n     *                               For auctions: 'inactive' means bids can no longer be made in the auction.\\n     */\\n    function updateListing(\\n        uint256 _listingId,\\n        uint256 _quantityToList,\\n        uint256 _reservePricePerToken,\\n        uint256 _buyoutPricePerToken,\\n        address _currencyToAccept,\\n        uint256 _startTime,\\n        uint256 _secondsUntilEndTime\\n    ) external;\\n\\n    /**\\n     *  @notice Lets a direct listing creator cancel their listing.\\n     *\\n     *  @param _listingId The unique Id of the lisitng to cancel.\\n     */\\n    function cancelDirectListing(uint256 _listingId) external;\\n\\n    /**\\n     *  @notice Lets someone buy a given quantity of tokens from a direct listing by paying the fixed price.\\n     *\\n     *  @param _listingId The uid of the direct lisitng to buy from.\\n     *  @param _buyFor The receiver of the NFT being bought.\\n     *  @param _quantity The amount of NFTs to buy from the direct listing.\\n     *  @param _currency The currency to pay the price in.\\n     *  @param _totalPrice The total price to pay for the tokens being bought.\\n     *\\n     *  @dev A sale will fail to execute if either:\\n     *          (1) buyer does not own or has not approved Marketplace to transfer the appropriate\\n     *              amount of currency (or hasn't sent the appropriate amount of native tokens)\\n     *\\n     *          (2) the lister does not own or has removed Markeplace's\\n     *              approval to transfer the tokens listed for sale.\\n     */\\n    function buy(\\n        uint256 _listingId,\\n        address _buyFor,\\n        uint256 _quantity,\\n        address _currency,\\n        uint256 _totalPrice\\n    ) external payable;\\n\\n    /**\\n     *  @notice Lets someone make an offer to a direct listing, or bid in an auction.\\n     *\\n     *  @dev Each (address, listing ID) pair maps to a single unique offer. So e.g. if a buyer makes\\n     *       makes two offers to the same direct listing, the last offer is counted as the buyer's\\n     *       offer to that listing.\\n     *\\n     *  @param _listingId        The unique ID of the lisitng to make an offer/bid to.\\n     *\\n     *  @param _quantityWanted   For auction listings: the 'quantity wanted' is the total amount of NFTs\\n     *                           being auctioned, regardless of the value of `_quantityWanted` passed.\\n     *                           For direct listings: `_quantityWanted` is the quantity of NFTs from the\\n     *                           listing, for which the offer is being made.\\n     *\\n     *  @param _currency         For auction listings: the 'currency of the bid' is the currency accepted\\n     *                           by the auction, regardless of the value of `_currency` passed. For direct\\n     *                           listings: this is the currency in which the offer is made.\\n     *\\n     *  @param _pricePerToken    For direct listings: offered price per token. For auction listings: the bid\\n     *                           amount per token. The total offer/bid amount is `_quantityWanted * _pricePerToken`.\\n     *\\n     *  @param _expirationTimestamp For aution listings: inapplicable. For direct listings: The timestamp after which\\n     *                              the seller can no longer accept the offer.\\n     */\\n    function offer(\\n        uint256 _listingId,\\n        uint256 _quantityWanted,\\n        address _currency,\\n        uint256 _pricePerToken,\\n        uint256 _expirationTimestamp\\n    ) external payable;\\n\\n    /**\\n     * @notice Lets a listing's creator accept an offer to their direct listing.\\n     * @param _listingId The unique ID of the listing for which to accept the offer.\\n     * @param _offeror The address of the buyer whose offer is to be accepted.\\n     * @param _currency The currency of the offer that is to be accepted.\\n     * @param _totalPrice The total price of the offer that is to be accepted.\\n     */\\n    function acceptOffer(\\n        uint256 _listingId,\\n        address _offeror,\\n        address _currency,\\n        uint256 _totalPrice\\n    ) external;\\n\\n    /**\\n     *  @notice Lets any account close an auction on behalf of either the (1) auction's creator, or (2) winning bidder.\\n     *              For (1): The auction creator is sent the the winning bid amount.\\n     *              For (2): The winning bidder is sent the auctioned NFTs.\\n     *\\n     *  @param _listingId The uid of the listing (the auction to close).\\n     *  @param _closeFor For whom the auction is being closed - the auction creator or winning bidder.\\n     */\\n    function closeAuction(uint256 _listingId, address _closeFor) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITWFee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.11;\\n\\ninterface ITWFee {\\n    function getFeeInfo(address _proxy, uint256 _type) external view returns (address recipient, uint256 bps);\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin-presets/metatx/ERC2771ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771ContextUpgradeable is Initializable, ContextUpgradeable {\\n    mapping(address => bool) private _trustedForwarder;\\n\\n    function __ERC2771Context_init(address[] memory trustedForwarder) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC2771Context_init_unchained(trustedForwarder);\\n    }\\n\\n    function __ERC2771Context_init_unchained(address[] memory trustedForwarder) internal onlyInitializing {\\n        for (uint256 i = 0; i < trustedForwarder.length; i++) {\\n            _trustedForwarder[trustedForwarder[i]] = true;\\n        }\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return _trustedForwarder[forwarder];\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/CurrencyTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.11;\\n\\n// Helper interfaces\\nimport { IWETH } from \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nlibrary CurrencyTransferLib {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    /// @dev The address interpreted as native token of the chain.\\n    address public constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /// @dev Transfers a given amount of currency.\\n    function transferCurrency(\\n        address _currency,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        if (_currency == NATIVE_TOKEN) {\\n            safeTransferNativeToken(_to, _amount);\\n        } else {\\n            safeTransferERC20(_currency, _from, _to, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfers a given amount of currency. (With native token wrapping)\\n    function transferCurrencyWithWrapper(\\n        address _currency,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        address _nativeTokenWrapper\\n    ) internal {\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        if (_currency == NATIVE_TOKEN) {\\n            if (_from == address(this)) {\\n                // withdraw from weth then transfer withdrawn native token to recipient\\n                IWETH(_nativeTokenWrapper).withdraw(_amount);\\n                safeTransferNativeTokenWithWrapper(_to, _amount, _nativeTokenWrapper);\\n            } else if (_to == address(this)) {\\n                // store native currency in weth\\n                require(_amount == msg.value, \\\"msg.value != amount\\\");\\n                IWETH(_nativeTokenWrapper).deposit{ value: _amount }();\\n            } else {\\n                safeTransferNativeTokenWithWrapper(_to, _amount, _nativeTokenWrapper);\\n            }\\n        } else {\\n            safeTransferERC20(_currency, _from, _to, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfer `amount` of ERC20 token from `from` to `to`.\\n    function safeTransferERC20(\\n        address _currency,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        if (_from == _to) {\\n            return;\\n        }\\n\\n        if (_from == address(this)) {\\n            IERC20Upgradeable(_currency).safeTransfer(_to, _amount);\\n        } else {\\n            IERC20Upgradeable(_currency).safeTransferFrom(_from, _to, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfers `amount` of native token to `to`.\\n    function safeTransferNativeToken(address to, uint256 value) internal {\\n        // solhint-disable avoid-low-level-calls\\n        // slither-disable-next-line low-level-calls\\n        (bool success, ) = to.call{ value: value }(\\\"\\\");\\n        require(success, \\\"native token transfer failed\\\");\\n    }\\n\\n    /// @dev Transfers `amount` of native token to `to`. (With native token wrapping)\\n    function safeTransferNativeTokenWithWrapper(\\n        address to,\\n        uint256 value,\\n        address _nativeTokenWrapper\\n    ) internal {\\n        // solhint-disable avoid-low-level-calls\\n        // slither-disable-next-line low-level-calls\\n        (bool success, ) = to.call{ value: value }(\\\"\\\");\\n        if (!success) {\\n            IWETH(_nativeTokenWrapper).deposit{ value: value }();\\n            IERC20Upgradeable(_nativeTokenWrapper).safeTransfer(to, value);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/FeeType.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.11;\\n\\nlibrary FeeType {\\n    uint256 internal constant PRIMARY_SALE = 0;\\n    uint256 internal constant MARKET_SALE = 1;\\n    uint256 internal constant SPLIT = 2;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IThirdwebContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.11;\\n\\ninterface IThirdwebContract {\\n    /// @dev Returns the module type of the contract.\\n    function contractType() external pure returns (bytes32);\\n\\n    /// @dev Returns the version of the contract.\\n    function contractVersion() external pure returns (uint8);\\n\\n    /// @dev Returns the metadata URI of the contract.\\n    function contractURI() external view returns (string memory);\\n\\n    /**\\n     *  @dev Sets contract URI for the storefront-level metadata of the contract.\\n     *       Only module admin can call this function.\\n     */\\n    function setContractURI(string calldata _uri) external;\\n}\\n\"\r\n    },\r\n    \"contracts/feature/interface/IPlatformFee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ninterface IPlatformFee {\\n    /// @dev Returns the platform fee bps and recipient.\\n    function getPlatformFeeInfo() external view returns (address, uint16);\\n\\n    /// @dev Lets a module admin update the fees on primary sales.\\n    function setPlatformFeeInfo(address _platformFeeRecipient, uint256 _platformFeeBps) external;\\n\\n    /// @dev Emitted when fee on primary sales is updated.\\n    event PlatformFeeInfoUpdated(address platformFeeRecipient, uint256 platformFeeBps);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.11;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nativeTokenWrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_thirdwebFee\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeBuffer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidBufferBps\",\"type\":\"uint256\"}],\"name\":\"AuctionBuffersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"closer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"cancelled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"auctionCreator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winningBidder\",\"type\":\"address\"}],\"name\":\"AuctionClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lister\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reservePricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyoutPricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"enum IMarketplace.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"enum IMarketplace.ListingType\",\"name\":\"listingType\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct IMarketplace.Listing\",\"name\":\"listing\",\"type\":\"tuple\"}],\"name\":\"ListingAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listingCreator\",\"type\":\"address\"}],\"name\":\"ListingRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listingCreator\",\"type\":\"address\"}],\"name\":\"ListingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"offeror\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum IMarketplace.ListingType\",\"name\":\"listingType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantityWanted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalOfferAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"NewOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lister\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantityBought\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPricePaid\",\"type\":\"uint256\"}],\"name\":\"NewSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"platformFeeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformFeeBps\",\"type\":\"uint256\"}],\"name\":\"PlatformFeeInfoUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BPS\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_listingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_offeror\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerToken\",\"type\":\"uint256\"}],\"name\":\"acceptOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidBufferBps\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_listingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_buyFor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantityToBuy\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalPrice\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_listingId\",\"type\":\"uint256\"}],\"name\":\"cancelDirectListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_listingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_closeFor\",\"type\":\"address\"}],\"name\":\"closeAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractType\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractVersion\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondsUntilEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityToList\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currencyToAccept\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reservePricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyoutPricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"enum IMarketplace.ListingType\",\"name\":\"listingType\",\"type\":\"uint8\"}],\"internalType\":\"struct IMarketplace.ListingParameters\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"createListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlatformFeeInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_contractURI\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_trustedForwarders\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_platformFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_platformFeeBps\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reservePricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyoutPricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"enum IMarketplace.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"enum IMarketplace.ListingType\",\"name\":\"listingType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_listingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantityWanted\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expirationTimestamp\",\"type\":\"uint256\"}],\"name\":\"offer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"offers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"offeror\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantityWanted\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeBuffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bidBufferBps\",\"type\":\"uint256\"}],\"name\":\"setAuctionBuffers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_platformFeeBps\",\"type\":\"uint256\"}],\"name\":\"setPlatformFeeInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thirdwebFee\",\"outputs\":[{\"internalType\":\"contract ITWFee\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeBuffer\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalListings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_listingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantityToList\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reservePricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyoutPricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currencyToAccept\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secondsUntilEndTime\",\"type\":\"uint256\"}],\"name\":\"updateListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winningBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"offeror\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantityWanted\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Marketplace", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "0000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000008c4b615040ebd2618e8fc3b20cefe9abafdeb0ea", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}