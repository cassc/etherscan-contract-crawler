{"SourceCode": "/**\r\n                           ...........\r\n                     ..kM\"\"\"7!~```~?7\"\"WNg., ..kMMMNg,\r\n     `    .gMMMa,..M\"^                     7MD`      ?M,\r\n        .#^    .M\"`                                    M[\r\n       JF     ?\"                                       -@\r\n      .#                                               JF\r\n   `  ,#              `  `      `       `             JF\r\n       Mx                    `     `           `  `  ,N.\r\n       .WMF                                           qb\r\n        .#     `  `                   `  `  `         .M.\r\n   `    M\\      .,   `  `       `    `dN.      `       d]\r\n       .#       H@         `          .!               ,N\r\n       .#           .74f(.....dMc(Be                    M.\r\n       .N           F._5J5..(\"\"~_~.d             `      M:\r\n        M,          ?,~..~(Jwa.-.(J^                    M:\r\n       .M!            7O-J&((JJd9W                     .M\r\n       d]                  J(,.d]j             `       -F\r\n       M}                  JJd~FDJ                    .M'\r\n       db         `          (JF                 `   .Mt\r\n        Wp                               `          .M^\r\n         TN,                                  `...JH\"\r\n           7WNJ.....                          ,\"\"!?N.\r\n                ?dD^              `                .N,\r\n                .@                      `            M,\r\n               .#         `                          .N.\r\n              .M` .,                                  -b\r\n             .M'  J]            `        `   .&        Wc\r\n             d%  .M                           W[       ,N\r\n\r\n        __________  ___ _______  __   ____  _________    ____  _____\r\n      / ____/ __ \\/   /__  /\\ \\/ /  / __ )/ ____/   |  / __ \\/ ___/\r\n     / /   / /_/ / /| | / /  \\  /  / __  / __/ / /| | / /_/ /\\__ \\ \r\n    / /___/ _, _/ ___ |/ /__ / /  / /_/ / /___/ ___ |/ _, _/___/ / \r\n    \\____/_/ |_/_/  |_/____//_/  /_____/_____/_/  |_/_/ |_|/____/  \r\n    \r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n    /**\r\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\r\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\r\n     *\r\n     * NOTE: To accept the transfer, this must return\r\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n     * (i.e. 0xf23a6e61, or its own function selector).\r\n     *\r\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\r\n     * @param from The address which previously owned the token\r\n     * @param id The ID of the token being transferred\r\n     * @param value The amount of tokens being transferred\r\n     * @param data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n     */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n\r\n    /**\r\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\r\n     * been updated.\r\n     *\r\n     * NOTE: To accept the transfer(s), this must return\r\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n     * (i.e. 0xbc197c81, or its own function selector).\r\n     *\r\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n     * @param from The address which previously owned the token\r\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n     * @param data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n     */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\r\n *\r\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\r\n * stuck.\r\n *\r\n * @dev _Available since v3.1._\r\n */\r\ncontract ERC1155Holder is ERC1155Receiver {\r\n    function onERC1155Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(\r\n        address,\r\n        address,\r\n        uint256[] memory,\r\n        uint256[] memory,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: contracts/CrazyBearsStaking.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface rewardInterface {\r\n    function mint(address _to, uint256 _tokenId, uint256 _amount) external;\r\n}\r\n\r\ninterface stakableInterface {\r\n    function walletOfOwner(address _owner) external view returns (uint256[] memory); \r\n}\r\n\r\ncontract CrazyBearsStakingV1 is ERC1155Holder, IERC721Receiver, Ownable, ReentrancyGuard {\r\n\r\n    // Staked Model\r\n    struct StakedToken {\r\n        uint tokenId;\r\n        address user;\r\n        uint since;\r\n        uint fieldId;\r\n    }\r\n\r\n    // Staking Field Model\r\n    struct StakingField {\r\n        uint fieldId;\r\n        bool active;\r\n        uint rewardId;\r\n        uint endTime;\r\n    }\r\n\r\n    // Reward Model\r\n    struct FieldReward {\r\n        uint rewardId;\r\n        address contractAddress;\r\n        uint tokenId;\r\n        uint common;\r\n        uint rare;\r\n        uint epic;\r\n        uint legendary;\r\n        uint special;\r\n    }\r\n\r\n    // Boost Item Model\r\n    struct BoostItem {\r\n        address contractAddress;\r\n        uint[] tokenIds;\r\n        uint boostPercent;\r\n    }\r\n\r\n    event Staked(address indexed user, uint256 tokenId, uint256 fieldId, uint timestamp);\r\n    event StakedAll(address indexed user, uint256[] tokenIds, uint256 fieldId, uint timestamp);\r\n    event Unstaked(address indexed user, uint256 tokenId, uint256 fieldId, uint timestamp);\r\n\r\n    using SafeMath for uint256;\r\n    address public stakableContractAddress;\r\n    IERC721 stakeableContract;\r\n    bool public paused = false;\r\n    mapping(uint => StakedToken) tokenById;\r\n    mapping(address => mapping(uint => uint[])) tokenByUser;\r\n    mapping(uint => StakingField) fields;\r\n    mapping(uint => FieldReward) rewards;\r\n    mapping(bytes32 => uint) tokenGrades;\r\n    uint hashLoop = 1;\r\n    BoostItem boostItem;\r\n\r\n    // Reward Boost.\r\n    uint public ogBoostPercent;\r\n    uint public balanceBoostCount1;\r\n    uint public balanceBoostPercent1;\r\n    uint public balanceBoostCount2;\r\n    uint public balanceBoostPercent2;\r\n    uint public balanceBoostCount3;\r\n    uint public balanceBoostPercent3;\r\n\r\n    constructor(address _stakableContractAddress) {\r\n        stakableContractAddress = _stakableContractAddress;\r\n        stakeableContract = IERC721(stakableContractAddress);\r\n    }\r\n\r\n    function pause() public onlyOwner {\r\n        paused = true;\r\n    }\r\n\r\n    function unpause() public onlyOwner {\r\n        paused = false;\r\n    }\r\n\r\n    function isValidField(uint _fieldId) public view returns (bool) {\r\n        return fields[_fieldId].fieldId > 0;\r\n    }\r\n\r\n    function isActiveField(uint _fieldId) public view returns (bool) {\r\n        return fields[_fieldId].active;\r\n    }\r\n\r\n    function toBytes(uint256 x) internal pure returns (bytes memory b) {\r\n        b = new bytes(32);\r\n        assembly { mstore(add(b, 32), x) }\r\n    }\r\n\r\n    function toBytes(bytes32 x) internal pure returns (bytes memory b) {\r\n        b = new bytes(32);\r\n        assembly { mstore(add(b, 32), x) }\r\n    }\r\n\r\n    function getTokenHash (uint256 _tokenId) internal view returns (bytes32) {\r\n        bytes memory tokenIdByte = toBytes(_tokenId);\r\n        bytes32 hash = keccak256(tokenIdByte);\r\n        for (uint i = 0; i < hashLoop; i++) {\r\n            bytes memory b = toBytes(hash);\r\n            hash = keccak256(b);\r\n        }\r\n        return hash;\r\n    }\r\n\r\n    function setTokenGrades(uint256[] memory _tokenIds, uint8[] memory _grade, uint256 _hashLoop) public onlyOwner {\r\n        require(_tokenIds.length == _grade.length, \"Array length does not match.\");\r\n        require(_hashLoop > 0, \"Invalid hash loop value.\");\r\n        hashLoop = _hashLoop;\r\n        uint index;\r\n        for (index = 0; index < _tokenIds.length; index ++) {\r\n            bytes32 hash = getTokenHash(_tokenIds[index]);\r\n            tokenGrades[hash] = _grade[index];\r\n        }\r\n    }\r\n\r\n    function getTokenGrade(uint256 _tokenId) internal view returns (uint) {\r\n        bytes32 hash = getTokenHash(_tokenId);\r\n        return tokenGrades[hash];\r\n    }\r\n\r\n    function setReward(uint256 _rewardId, address _contractAddress, uint256 _tokenId, uint _common, uint _rare, uint _epic, uint _legendary, uint _special) public onlyOwner {\r\n        FieldReward memory reward;\r\n        reward.rewardId = _rewardId;\r\n        reward.contractAddress = _contractAddress;\r\n        reward.tokenId = _tokenId;\r\n        reward.common = _common;\r\n        reward.rare = _rare;\r\n        reward.epic = _epic;\r\n        reward.legendary = _legendary;\r\n        reward.special = _special;\r\n        rewards[_rewardId] = reward;\r\n    }\r\n\r\n    function getRewardTokenId(uint256 _fieldId) public view returns (uint) {\r\n        uint rewardId = fields[_fieldId].rewardId;\r\n        if (rewardId == 0) {\r\n            return 0;\r\n        }\r\n        return rewards[rewardId].tokenId;\r\n    }\r\n\r\n    function getRewardAmount(uint256 _fieldId, uint _grade) public view returns (uint) {\r\n        uint rewardId = fields[_fieldId].rewardId;\r\n        if (rewardId == 0) {\r\n            return 0;\r\n        }\r\n        if (_grade == 4) {\r\n            return rewards[rewardId].special;\r\n        }\r\n        if (_grade == 3) {\r\n            return rewards[rewardId].legendary;\r\n        }\r\n        if (_grade == 2) {\r\n            return rewards[rewardId].epic;\r\n        }\r\n        if (_grade == 1) {\r\n            return rewards[rewardId].rare;\r\n        }\r\n        return rewards[rewardId].common;\r\n    }\r\n\r\n    function setField(uint256 _fieldId, bool _active, uint256 _rewardId) public onlyOwner {\r\n        require(_fieldId > 0, \"Invalid field ID.\");\r\n        StakingField memory field;\r\n        field.fieldId = _fieldId;\r\n        field.active = _active;\r\n        field.rewardId = _rewardId;\r\n        fields[_fieldId] = field;\r\n    }\r\n\r\n    function setFieldActive(uint256 _fieldId, bool _active) public onlyOwner {\r\n        require(fields[_fieldId].fieldId != 0, \"That staking field is not exists.\");\r\n        fields[_fieldId].active = _active;\r\n    }\r\n\r\n    function setStakable(address _contractAddress) public onlyOwner {\r\n        stakableContractAddress = _contractAddress;\r\n        stakeableContract = IERC721(stakableContractAddress);\r\n    }\r\n\r\n    function endField(uint _fieldId) public onlyOwner {\r\n        fields[_fieldId].endTime = block.timestamp;\r\n        fields[_fieldId].active = false;\r\n    }\r\n\r\n    function setEndTime(uint _fieldId, uint _endTime) public onlyOwner {\r\n        fields[_fieldId].endTime = _endTime;\r\n    }\r\n\r\n    function endTime(uint _fieldId) public view returns (uint) {\r\n        return fields[_fieldId].endTime;\r\n    }\r\n\r\n    function setBalanceBoost(uint _balanceBoostCount1, uint _balanceBoostPercent1, uint _balanceBoostCount2, uint _balanceBoostPercent2, uint _balanceBoostCount3, uint _balanceBoostPercent3) public onlyOwner {\r\n        balanceBoostCount1 = _balanceBoostCount1;\r\n        balanceBoostCount2 = _balanceBoostCount2;\r\n        balanceBoostCount3 = _balanceBoostCount3;\r\n        balanceBoostPercent1 = _balanceBoostPercent1;\r\n        balanceBoostPercent2 = _balanceBoostPercent2;\r\n        balanceBoostPercent3 = _balanceBoostPercent3;\r\n    }\r\n\r\n    function setOgBoost(uint _ogBoostPercent) public onlyOwner {\r\n        ogBoostPercent = _ogBoostPercent;\r\n    }\r\n\r\n    function setBoostItem(address _contractAddress, uint[] memory _tokenIds, uint _boostPercent) public onlyOwner {\r\n        boostItem.contractAddress = _contractAddress;\r\n        boostItem.tokenIds = _tokenIds;\r\n        boostItem.boostPercent = _boostPercent;\r\n    }\r\n\r\n    function getBoostItemPercent() public view returns (uint) {\r\n        return boostItem.boostPercent;\r\n    }\r\n\r\n    function _stake(address _from, uint256 _tokenId, uint256 _fieldId) internal returns (StakedToken memory) {\r\n        require(!paused, \"the contract is paused\");\r\n        require(isValidField(_fieldId), \"Invalid field\");\r\n        require(isActiveField(_fieldId), \"Inactive field\");\r\n        require(fields[_fieldId].endTime == 0 || fields[_fieldId].endTime > block.timestamp, \"Ended field\");\r\n        require(stakeableContract.ownerOf(_tokenId) != address(this), \"Token is already staked in this contract\");\r\n        stakeableContract.safeTransferFrom(_from, address(this), _tokenId);\r\n        require(stakeableContract.ownerOf(_tokenId) == address(this), \"Failed to take possession of NFT\");\r\n\r\n        StakedToken memory staking;\r\n        staking.tokenId = _tokenId;\r\n        staking.user = _from;\r\n        staking.since = block.timestamp;\r\n        staking.fieldId = _fieldId;\r\n\r\n        tokenById[_tokenId] = staking;\r\n        tokenByUser[_from][_fieldId].push(_tokenId);\r\n        return staking;\r\n    }\r\n\r\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n\r\n    function onERC1155Received(address, address, uint256, uint256, bytes calldata) public virtual override returns(bytes4) {\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(address, address, uint256[] calldata, uint256[] calldata, bytes calldata) public virtual override returns(bytes4) {\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n\r\n    function stake(uint256 _tokenId, uint256 _fieldId) public {\r\n        require(stakeableContract.isApprovedForAll(msg.sender, address(this)), \"You need to approval for all tokens.\");\r\n        StakedToken memory staked = _stake(msg.sender, _tokenId, _fieldId);\r\n        emit Staked(msg.sender, _tokenId, _fieldId, staked.since);\r\n    }\r\n\r\n    function stakeAll(uint256 _fieldId) public {\r\n        require(stakeableContract.isApprovedForAll(msg.sender, address(this)), \"You need to approval for all tokens.\");\r\n        uint[] memory _tokens = stakableInterface(stakableContractAddress).walletOfOwner(msg.sender);\r\n        uint _tNum = _tokens.length;\r\n        StakedToken memory staked;\r\n        for(uint i=0; i < _tNum; i++){\r\n            if (!isStaked(_tokens[i])) {\r\n                staked = _stake(msg.sender, _tokens[i], _fieldId);\r\n            }\r\n        }\r\n        emit StakedAll(msg.sender, _tokens, _fieldId, staked.since);\r\n    }\r\n\r\n    function batchStake(uint256[] memory _tokenIds, uint256[] memory _fieldIds) public {\r\n        require(stakeableContract.isApprovedForAll(msg.sender, address(this)), \"You need to approval for all tokens.\");\r\n        require(_tokenIds.length == _fieldIds.length, \"Array length does not match.\");\r\n        uint _tNum = _tokenIds.length;\r\n        StakedToken memory staked;\r\n        for(uint i=0; i < _tNum; i++){\r\n            if (!isStaked(_tokenIds[i])) {\r\n                staked = _stake(msg.sender, _tokenIds[i], _fieldIds[i]);\r\n                emit Staked(msg.sender, _tokenIds[i], _fieldIds[i], staked.since);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getOwner(uint256 _tokenID) public view returns (address){\r\n        return tokenById[_tokenID].user;\r\n    }\r\n\r\n    function isStaked(uint256 _tokenID) public view returns (bool){\r\n        return tokenById[_tokenID].user != address(0);\r\n    }\r\n\r\n    function isItemBoosted(address _owner) public view returns (bool) {\r\n        if (boostItem.contractAddress == address(0)) {\r\n            return false;\r\n        }\r\n        for (uint i = 0; i < boostItem.tokenIds.length; i ++){\r\n            if (IERC721(boostItem.contractAddress).ownerOf(boostItem.tokenIds[i]) == _owner) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function getTokenStakedField(uint256 _tokenID) public view returns (uint){\r\n        return tokenById[_tokenID].fieldId;\r\n    }\r\n\r\n    function getLastUpdated(uint256 _tokenID) public view returns (uint){\r\n        return tokenById[_tokenID].since;\r\n    }\r\n\r\n    function getTokensOfOwner(address _owner, uint _fieldId) public view returns ( uint [] memory){\r\n        uint[] memory ownersTokens;\r\n        ownersTokens = tokenByUser[_owner][_fieldId];      \r\n        return ownersTokens;\r\n    }\r\n\r\n    function getRewardFromTokenId(uint256 _tokenID) internal view returns (FieldReward memory) {\r\n        uint fieldId = tokenById[_tokenID].fieldId;\r\n        StakingField memory field = fields[fieldId];\r\n        uint rewardId = field.rewardId;\r\n        FieldReward memory reward = rewards[rewardId];\r\n        return reward;\r\n    }\r\n\r\n    function checkReward(uint256 _tokenId) public view returns (uint) {\r\n        address user = tokenById[_tokenId].user;\r\n        if (user == address(0)) {\r\n            return 0;\r\n        }\r\n        FieldReward memory reward = getRewardFromTokenId(_tokenId);\r\n        uint tokenGrade = getTokenGrade(_tokenId);\r\n        uint amountPerDay = reward.common;\r\n        if (tokenGrade == 1) {\r\n            amountPerDay = reward.rare;\r\n        } else if (tokenGrade == 2) {\r\n            amountPerDay = reward.epic;\r\n        } else if (tokenGrade == 3) {\r\n            amountPerDay = reward.legendary;\r\n        } else if (tokenGrade == 4) {\r\n            amountPerDay = reward.special;\r\n        }\r\n\r\n        uint fieldId = tokenById[_tokenId].fieldId;\r\n        uint timeNow = block.timestamp;\r\n        uint timeSince = tokenById[_tokenId].since;\r\n        if (fields[fieldId].endTime > 0) {\r\n            timeNow = fields[fieldId].endTime;\r\n            if (timeNow <= timeSince) {\r\n                return 0;\r\n            }\r\n        }\r\n        uint passedSec = timeNow.sub(timeSince);\r\n        uint passedDays = passedSec.div(86400);\r\n        uint tokenEarned = passedDays.mul(amountPerDay);\r\n\r\n        // OG Boost.\r\n        if (_tokenId <= 500 && ogBoostPercent > 0) {\r\n            tokenEarned = tokenEarned.mul(ogBoostPercent);\r\n            tokenEarned = tokenEarned.div(100);\r\n        }\r\n\r\n        // Balance Boost.\r\n        uint stakingCount = tokenByUser[user][fieldId].length;\r\n        if (stakingCount >= balanceBoostCount3) {\r\n            tokenEarned = tokenEarned.mul(balanceBoostPercent3);\r\n            tokenEarned = tokenEarned.div(100);\r\n        } else if (stakingCount >= balanceBoostCount2) {\r\n            tokenEarned = tokenEarned.mul(balanceBoostPercent2);\r\n            tokenEarned = tokenEarned.div(100);\r\n        } else if (stakingCount >= balanceBoostCount1) {\r\n            tokenEarned = tokenEarned.mul(balanceBoostPercent1);\r\n            tokenEarned = tokenEarned.div(100);\r\n        }\r\n\r\n        // Item Boost.\r\n        if (boostItem.contractAddress != address(0)) {\r\n            for (uint i = 0; i < boostItem.tokenIds.length; i ++){\r\n                if (IERC721(boostItem.contractAddress).ownerOf(boostItem.tokenIds[i]) == user) {\r\n                    tokenEarned = tokenEarned.mul(boostItem.boostPercent);\r\n                    tokenEarned = tokenEarned.div(100);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return tokenEarned;\r\n    }\r\n\r\n    function checkFieldReward(address _owner, uint256 _fieldId) public view returns (uint256) {\r\n        uint256[] memory tokenIds = tokenByUser[_owner][_fieldId];\r\n        uint256 total = 0;\r\n        for (uint i = 0; i < tokenIds.length; i ++){\r\n            uint256 tokenID = tokenIds[i];\r\n            total += checkReward(tokenID);\r\n        }\r\n        return total;\r\n    }\r\n\r\n    function receiveReward(uint256 _tokenID) nonReentrant public {\r\n        require(!paused, \"the contract is paused\");\r\n        require(tokenById[_tokenID].user == msg.sender, \"That NFT does not belong to you.\");\r\n        uint fieldId = tokenById[_tokenID].fieldId;\r\n        StakingField memory field = fields[fieldId];\r\n        uint rewardId = field.rewardId;\r\n        FieldReward memory reward = rewards[rewardId];\r\n        uint rewardTokenId = reward.tokenId;\r\n        IERC1155 rewardContract = IERC1155(reward.contractAddress);\r\n\r\n        uint earned = checkReward(_tokenID);\r\n        if (earned > 0) {\r\n            if (rewardContract.balanceOf(address(this), rewardTokenId) <= earned) {\r\n                rewardInterface(reward.contractAddress).mint(address(this), rewardTokenId, (earned + 1000));\r\n            }\r\n            rewardContract.safeTransferFrom(address(this), msg.sender, rewardTokenId, earned, '');\r\n        }\r\n        tokenById[_tokenID].since = block.timestamp;\r\n    }\r\n\r\n    function unstake(uint256 _tokenID) public {\r\n        require(!paused, \"the contract is paused\");\r\n        receiveReward(_tokenID);\r\n        _unstake(_tokenID);\r\n    }\r\n\r\n    function _unstake(uint256 _tokenID) internal {\r\n        address user = tokenById[_tokenID].user;\r\n        StakedToken storage staking = tokenById[_tokenID];\r\n        uint256 fieldId = staking.fieldId;\r\n        uint256[] storage stakedNFTs = tokenByUser[user][fieldId];\r\n        uint index;\r\n        for (index = 0; index < stakedNFTs.length; index ++){\r\n            if (stakedNFTs[index] == _tokenID) {\r\n                break;\r\n            }\r\n        }\r\n        require(index < stakedNFTs.length, \"NFT with that ID was not found.\");\r\n        stakedNFTs[index] = stakedNFTs[(stakedNFTs.length - 1)];\r\n        stakedNFTs.pop();\r\n        staking.user = address(0);\r\n        stakeableContract.safeTransferFrom(address(this), user, _tokenID);\r\n        emit Unstaked(user, _tokenID, fieldId, block.timestamp);\r\n    }\r\n\r\n    function batchReceiveReward(uint256[] memory _tokenIds) public {\r\n        for (uint i = 0; i < _tokenIds.length; i ++){\r\n            uint256 tokenID = _tokenIds[i];\r\n            receiveReward(tokenID);\r\n        }\r\n    }\r\n\r\n    function batchUnstake(uint256[] memory _tokenIds) public {\r\n        for (uint i = 0; i < _tokenIds.length; i ++){\r\n            receiveReward(_tokenIds[i]);\r\n        }\r\n        for (uint i = 0; i < _tokenIds.length; i ++){\r\n            _unstake(_tokenIds[i]);\r\n        }\r\n    }\r\n\r\n    function receiveRewardAll(address _owner, uint256 _fieldId) public {\r\n        uint256[] memory tokenIds = tokenByUser[_owner][_fieldId];\r\n        for (uint index = 0; index < tokenIds.length; index ++){\r\n            uint _tokenID = tokenIds[index]; \r\n            receiveReward(_tokenID);\r\n        }\r\n    }\r\n\r\n    function unstakeAll(uint256 _fieldId) public {\r\n        receiveRewardAll(msg.sender, _fieldId);\r\n        sendBackAllTokens(msg.sender, _fieldId);\r\n    }\r\n\r\n    function mintReward(uint256 rewardId, uint256 amount) public onlyOwner {\r\n        FieldReward memory reward = rewards[rewardId];\r\n        uint rewardTokenId = reward.tokenId;\r\n        rewardInterface(reward.contractAddress).mint(address(this), rewardTokenId, amount);\r\n    }\r\n\r\n    function emergencyReturn(address _owner, uint _fieldId) public onlyOwner {      \r\n        sendBackAllTokens(_owner, _fieldId);\r\n    }\r\n\r\n    function sendBackAllTokens(address _owner, uint _fieldId) internal {\r\n        uint256[] storage stakedNFTs = tokenByUser[_owner][_fieldId];\r\n        while (stakedNFTs.length > 0) {\r\n            uint index = stakedNFTs.length - 1;\r\n            uint _tokenID = stakedNFTs[index]; \r\n            StakedToken storage staking = tokenById[_tokenID];\r\n            stakedNFTs.pop();\r\n            staking.user = address(0);\r\n            stakeableContract.safeTransferFrom(address(this), msg.sender, _tokenID); \r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakableContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fieldId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fieldId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StakedAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fieldId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"balanceBoostCount1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceBoostCount2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceBoostCount3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceBoostPercent1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceBoostPercent2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceBoostPercent3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchReceiveReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_fieldIds\",\"type\":\"uint256[]\"}],\"name\":\"batchStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fieldId\",\"type\":\"uint256\"}],\"name\":\"checkFieldReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"checkReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fieldId\",\"type\":\"uint256\"}],\"name\":\"emergencyReturn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fieldId\",\"type\":\"uint256\"}],\"name\":\"endField\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fieldId\",\"type\":\"uint256\"}],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBoostItemPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"getLastUpdated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fieldId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_grade\",\"type\":\"uint256\"}],\"name\":\"getRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fieldId\",\"type\":\"uint256\"}],\"name\":\"getRewardTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"getTokenStakedField\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fieldId\",\"type\":\"uint256\"}],\"name\":\"getTokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fieldId\",\"type\":\"uint256\"}],\"name\":\"isActiveField\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isItemBoosted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"isStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fieldId\",\"type\":\"uint256\"}],\"name\":\"isValidField\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ogBoostPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"receiveReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fieldId\",\"type\":\"uint256\"}],\"name\":\"receiveRewardAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_balanceBoostCount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_balanceBoostPercent1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_balanceBoostCount2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_balanceBoostPercent2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_balanceBoostCount3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_balanceBoostPercent3\",\"type\":\"uint256\"}],\"name\":\"setBalanceBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_boostPercent\",\"type\":\"uint256\"}],\"name\":\"setBoostItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fieldId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fieldId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_rewardId\",\"type\":\"uint256\"}],\"name\":\"setField\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fieldId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setFieldActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ogBoostPercent\",\"type\":\"uint256\"}],\"name\":\"setOgBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_common\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_legendary\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_special\",\"type\":\"uint256\"}],\"name\":\"setReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"setStakable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_grade\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256\",\"name\":\"_hashLoop\",\"type\":\"uint256\"}],\"name\":\"setTokenGrades\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakableContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fieldId\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fieldId\",\"type\":\"uint256\"}],\"name\":\"stakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fieldId\",\"type\":\"uint256\"}],\"name\":\"unstakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CrazyBearsStakingV1", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a12a70950139090016423365031e48613927d8f5", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://685524bca4308b2d413a53ccdba51c5b3472a9193207581398c05fba22da37ed"}