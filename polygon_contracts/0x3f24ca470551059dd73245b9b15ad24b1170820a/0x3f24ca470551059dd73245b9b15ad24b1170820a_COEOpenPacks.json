{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/OpenPacks.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n// ----------------- INTERFACES -----------------\\n\\ninterface ICard {\\n  function packMint(address _to, uint256[] memory _types, bool _sb) external;\\n}\\n\\ninterface IPack {\\n  function burn(address _burner, uint256 _id, uint256 _amount) external;\\n}\\n\\n// ----------------- CONTRACT -----------------\\n\\ncontract COEOpenPacks is ReentrancyGuard {\\n  address public cardAddress;\\n  address public packAddress;\\n\\n  bool public isPaused;\\n\\n  // ----------------- EVENTS -----------------\\n\\n  event PackOpened(\\n    address indexed _opener,\\n    uint256 indexed _packId,\\n    uint256[] _cardIds\\n  );\\n\\n  // ----------------- CONSTRUCTOR -----------------\\n\\n  constructor(address _cardAddress, address _packAddress) {\\n    roles[OWNER][msg.sender] = true;\\n    roles[ADMIN][msg.sender] = true;\\n\\n    cardAddress = _cardAddress;\\n    packAddress = _packAddress;\\n  }\\n\\n  // ----------------- OPEN PACK -----------------\\n\\n  function openPack(\\n    address _to,\\n    uint256 _packId,\\n    uint256[] memory _cardIds\\n  ) public nonReentrant onlyRole(ADMIN) whenNotPaused {\\n    IPack(packAddress).burn(_to, _packId, 1);\\n\\n    ICard(cardAddress).packMint(_to, _cardIds, false);\\n\\n    emit PackOpened(_to, _packId, _cardIds);\\n  }\\n\\n  // ----------------- SETTERS -----------------\\n\\n  function setCardAddress(address _cardAddress) external onlyRole(OWNER) {\\n    cardAddress = _cardAddress;\\n  }\\n\\n  function setPackAddress(address _packAddress) external onlyRole(OWNER) {\\n    packAddress = _packAddress;\\n  }\\n\\n  // ----------------- PAUSE -----------------\\n\\n  function setIsPaused(bool _ispaused) public onlyRole(OWNER) {\\n    isPaused = _ispaused;\\n  }\\n\\n  modifier whenNotPaused() {\\n    require(!isPaused, \\\"Contract is paused.\\\");\\n    _;\\n  }\\n\\n  // ----------------- ACCESS CONTROL -----------------\\n\\n  mapping(bytes32 => mapping(address => bool)) private roles;\\n  bytes32 private constant ADMIN = keccak256(abi.encodePacked(\\\"ADMIN\\\"));\\n  bytes32 private constant OWNER = keccak256(abi.encodePacked(\\\"OWNER\\\"));\\n\\n  modifier onlyRole(bytes32 role) {\\n    require(roles[role][msg.sender], \\\"Not authorized to cards.\\\");\\n    _;\\n  }\\n\\n  function grantRole(bytes32 role, address account) public onlyRole(OWNER) {\\n    roles[role][account] = true;\\n  }\\n\\n  function revokeRole(bytes32 role, address account) public onlyRole(OWNER) {\\n    roles[role][account] = false;\\n  }\\n\\n  function transferOwnership(address newOwner) external onlyRole(OWNER) {\\n    grantRole(OWNER, newOwner);\\n    grantRole(ADMIN, newOwner);\\n    revokeRole(OWNER, msg.sender);\\n    revokeRole(ADMIN, msg.sender);\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cardAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_packAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_opener\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_packId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_cardIds\",\"type\":\"uint256[]\"}],\"name\":\"PackOpened\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"cardAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_packId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_cardIds\",\"type\":\"uint256[]\"}],\"name\":\"openPack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"packAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cardAddress\",\"type\":\"address\"}],\"name\":\"setCardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_ispaused\",\"type\":\"bool\"}],\"name\":\"setIsPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_packAddress\",\"type\":\"address\"}],\"name\":\"setPackAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "COEOpenPacks", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000a271d8a51170884bfce12c2bbc5c7b4047d9f72500000000000000000000000068ce5c94c8af54ee5abdefc3a17cddc45d025eeb", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}