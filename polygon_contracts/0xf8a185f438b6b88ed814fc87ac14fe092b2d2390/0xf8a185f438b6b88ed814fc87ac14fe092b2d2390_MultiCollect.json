{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\r\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\r\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: DataTypes.sol\r\n\r\n\r\n\r\npragma solidity 0.8.10;\r\n\r\n/**\r\n * @title DataTypes\r\n * @author Lens Protocol\r\n *\r\n * @notice A standard library of data types used throughout the Lens Protocol.\r\n */\r\nlibrary DataTypes {\r\n    /**\r\n     * @notice An enum containing the different states the protocol can be in, limiting certain actions.\r\n     *\r\n     * @param Unpaused The fully unpaused state.\r\n     * @param PublishingPaused The state where only publication creation functions are paused.\r\n     * @param Paused The fully paused state.\r\n     */\r\n    enum ProtocolState {\r\n        Unpaused,\r\n        PublishingPaused,\r\n        Paused\r\n    }\r\n\r\n    /**\r\n     * @notice An enum specifically used in a helper function to easily retrieve the publication type for integrations.\r\n     *\r\n     * @param Post A standard post, having a URI, a collect module but no pointer to another publication.\r\n     * @param Comment A comment, having a URI, a collect module and a pointer to another publication.\r\n     * @param Mirror A mirror, having a pointer to another publication, but no URI or collect module.\r\n     * @param Nonexistent An indicator showing the queried publication does not exist.\r\n     */\r\n    enum PubType {\r\n        Post,\r\n        Comment,\r\n        Mirror,\r\n        Nonexistent\r\n    }\r\n\r\n    /**\r\n     * @notice A struct containing the necessary information to reconstruct an EIP-712 typed data signature.\r\n     *\r\n     * @param v The signature's recovery parameter.\r\n     * @param r The signature's r parameter.\r\n     * @param s The signature's s parameter\r\n     * @param deadline The signature's deadline\r\n     */\r\n    struct EIP712Signature {\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint256 deadline;\r\n    }\r\n\r\n    /**\r\n     * @notice A struct containing profile data.\r\n     *\r\n     * @param pubCount The number of publications made to this profile.\r\n     * @param followModule The address of the current follow module in use by this profile, can be empty.\r\n     * @param followNFT The address of the followNFT associated with this profile, can be empty..\r\n     * @param handle The profile's associated handle.\r\n     * @param imageURI The URI to be used for the profile's image.\r\n     * @param followNFTURI The URI to be used for the follow NFT.\r\n     */\r\n    struct ProfileStruct {\r\n        uint256 pubCount;\r\n        address followModule;\r\n        address followNFT;\r\n        string handle;\r\n        string imageURI;\r\n        string followNFTURI;\r\n    }\r\n\r\n    /**\r\n     * @notice A struct containing data associated with each new publication.\r\n     *\r\n     * @param profileIdPointed The profile token ID this publication points to, for mirrors and comments.\r\n     * @param pubIdPointed The publication ID this publication points to, for mirrors and comments.\r\n     * @param contentURI The URI associated with this publication.\r\n     * @param referenceModule The address of the current reference module in use by this profile, can be empty.\r\n     * @param collectModule The address of the collect module associated with this publication, this exists for all publication.\r\n     * @param collectNFT The address of the collectNFT associated with this publication, if any.\r\n     */\r\n    struct PublicationStruct {\r\n        uint256 profileIdPointed;\r\n        uint256 pubIdPointed;\r\n        string contentURI;\r\n        address referenceModule;\r\n        address collectModule;\r\n        address collectNFT;\r\n    }\r\n\r\n    /**\r\n     * @notice A struct containing the parameters required for the `createProfile()` function.\r\n     *\r\n     * @param to The address receiving the profile.\r\n     * @param handle The handle to set for the profile, must be unique and non-empty.\r\n     * @param imageURI The URI to set for the profile image.\r\n     * @param followModule The follow module to use, can be the zero address.\r\n     * @param followModuleInitData The follow module initialization data, if any.\r\n     * @param followNFTURI The URI to use for the follow NFT.\r\n     */\r\n    struct CreateProfileData {\r\n        address to;\r\n        string handle;\r\n        string imageURI;\r\n        address followModule;\r\n        bytes followModuleInitData;\r\n        string followNFTURI;\r\n    }\r\n\r\n    /**\r\n     * @notice A struct containing the parameters required for the `setDefaultProfileWithSig()` function. Parameters are\r\n     * the same as the regular `setDefaultProfile()` function, with an added EIP712Signature.\r\n     *\r\n     * @param wallet The address of the wallet setting the default profile.\r\n     * @param profileId The token ID of the profile which will be set as default, or zero.\r\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\r\n     */\r\n    struct SetDefaultProfileWithSigData {\r\n        address wallet;\r\n        uint256 profileId;\r\n        EIP712Signature sig;\r\n    }\r\n\r\n    /**\r\n     * @notice A struct containing the parameters required for the `setFollowModuleWithSig()` function. Parameters are\r\n     * the same as the regular `setFollowModule()` function, with an added EIP712Signature.\r\n     *\r\n     * @param profileId The token ID of the profile to change the followModule for.\r\n     * @param followModule The followModule to set for the given profile, must be whitelisted.\r\n     * @param followModuleInitData The data to be passed to the followModule for initialization.\r\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\r\n     */\r\n    struct SetFollowModuleWithSigData {\r\n        uint256 profileId;\r\n        address followModule;\r\n        bytes followModuleInitData;\r\n        EIP712Signature sig;\r\n    }\r\n\r\n    /**\r\n     * @notice A struct containing the parameters required for the `setDispatcherWithSig()` function. Parameters are the same\r\n     * as the regular `setDispatcher()` function, with an added EIP712Signature.\r\n     *\r\n     * @param profileId The token ID of the profile to set the dispatcher for.\r\n     * @param dispatcher The dispatcher address to set for the profile.\r\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\r\n     */\r\n    struct SetDispatcherWithSigData {\r\n        uint256 profileId;\r\n        address dispatcher;\r\n        EIP712Signature sig;\r\n    }\r\n\r\n    /**\r\n     * @notice A struct containing the parameters required for the `setProfileImageURIWithSig()` function. Parameters are the same\r\n     * as the regular `setProfileImageURI()` function, with an added EIP712Signature.\r\n     *\r\n     * @param profileId The token ID of the profile to set the URI for.\r\n     * @param imageURI The URI to set for the given profile image.\r\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\r\n     */\r\n    struct SetProfileImageURIWithSigData {\r\n        uint256 profileId;\r\n        string imageURI;\r\n        EIP712Signature sig;\r\n    }\r\n\r\n    /**\r\n     * @notice A struct containing the parameters required for the `setFollowNFTURIWithSig()` function. Parameters are the same\r\n     * as the regular `setFollowNFTURI()` function, with an added EIP712Signature.\r\n     *\r\n     * @param profileId The token ID of the profile for which to set the followNFT URI.\r\n     * @param followNFTURI The follow NFT URI to set.\r\n     * @param sig The EIP712Signature struct containing the followNFT's associated profile owner's signature.\r\n     */\r\n    struct SetFollowNFTURIWithSigData {\r\n        uint256 profileId;\r\n        string followNFTURI;\r\n        EIP712Signature sig;\r\n    }\r\n\r\n    /**\r\n     * @notice A struct containing the parameters required for the `post()` function.\r\n     *\r\n     * @param profileId The token ID of the profile to publish to.\r\n     * @param contentURI The URI to set for this new publication.\r\n     * @param collectModule The collect module to set for this new publication.\r\n     * @param collectModuleInitData The data to pass to the collect module's initialization.\r\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\r\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\r\n     */\r\n    struct PostData {\r\n        uint256 profileId;\r\n        string contentURI;\r\n        address collectModule;\r\n        bytes collectModuleInitData;\r\n        address referenceModule;\r\n        bytes referenceModuleInitData;\r\n    }\r\n\r\n    /**\r\n     * @notice A struct containing the parameters required for the `postWithSig()` function. Parameters are the same as\r\n     * the regular `post()` function, with an added EIP712Signature.\r\n     *\r\n     * @param profileId The token ID of the profile to publish to.\r\n     * @param contentURI The URI to set for this new publication.\r\n     * @param collectModule The collectModule to set for this new publication.\r\n     * @param collectModuleInitData The data to pass to the collectModule's initialization.\r\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\r\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\r\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\r\n     */\r\n    struct PostWithSigData {\r\n        uint256 profileId;\r\n        string contentURI;\r\n        address collectModule;\r\n        bytes collectModuleInitData;\r\n        address referenceModule;\r\n        bytes referenceModuleInitData;\r\n        EIP712Signature sig;\r\n    }\r\n\r\n    /**\r\n     * @notice A struct containing the parameters required for the `comment()` function.\r\n     *\r\n     * @param profileId The token ID of the profile to publish to.\r\n     * @param contentURI The URI to set for this new publication.\r\n     * @param profileIdPointed The profile token ID to point the comment to.\r\n     * @param pubIdPointed The publication ID to point the comment to.\r\n     * @param referenceModuleData The data passed to the reference module.\r\n     * @param collectModule The collect module to set for this new publication.\r\n     * @param collectModuleInitData The data to pass to the collect module's initialization.\r\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\r\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\r\n     */\r\n    struct CommentData {\r\n        uint256 profileId;\r\n        string contentURI;\r\n        uint256 profileIdPointed;\r\n        uint256 pubIdPointed;\r\n        bytes referenceModuleData;\r\n        address collectModule;\r\n        bytes collectModuleInitData;\r\n        address referenceModule;\r\n        bytes referenceModuleInitData;\r\n    }\r\n\r\n    /**\r\n     * @notice A struct containing the parameters required for the `commentWithSig()` function. Parameters are the same as\r\n     * the regular `comment()` function, with an added EIP712Signature.\r\n     *\r\n     * @param profileId The token ID of the profile to publish to.\r\n     * @param contentURI The URI to set for this new publication.\r\n     * @param profileIdPointed The profile token ID to point the comment to.\r\n     * @param pubIdPointed The publication ID to point the comment to.\r\n     * @param referenceModuleData The data passed to the reference module.\r\n     * @param collectModule The collectModule to set for this new publication.\r\n     * @param collectModuleInitData The data to pass to the collectModule's initialization.\r\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\r\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\r\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\r\n     */\r\n    struct CommentWithSigData {\r\n        uint256 profileId;\r\n        string contentURI;\r\n        uint256 profileIdPointed;\r\n        uint256 pubIdPointed;\r\n        bytes referenceModuleData;\r\n        address collectModule;\r\n        bytes collectModuleInitData;\r\n        address referenceModule;\r\n        bytes referenceModuleInitData;\r\n        EIP712Signature sig;\r\n    }\r\n\r\n    /**\r\n     * @notice A struct containing the parameters required for the `mirror()` function.\r\n     *\r\n     * @param profileId The token ID of the profile to publish to.\r\n     * @param profileIdPointed The profile token ID to point the mirror to.\r\n     * @param pubIdPointed The publication ID to point the mirror to.\r\n     * @param referenceModuleData The data passed to the reference module.\r\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\r\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\r\n     */\r\n    struct MirrorData {\r\n        uint256 profileId;\r\n        uint256 profileIdPointed;\r\n        uint256 pubIdPointed;\r\n        bytes referenceModuleData;\r\n        address referenceModule;\r\n        bytes referenceModuleInitData;\r\n    }\r\n\r\n    /**\r\n     * @notice A struct containing the parameters required for the `mirrorWithSig()` function. Parameters are the same as\r\n     * the regular `mirror()` function, with an added EIP712Signature.\r\n     *\r\n     * @param profileId The token ID of the profile to publish to.\r\n     * @param profileIdPointed The profile token ID to point the mirror to.\r\n     * @param pubIdPointed The publication ID to point the mirror to.\r\n     * @param referenceModuleData The data passed to the reference module.\r\n     * @param referenceModule The reference module to set for the given publication, must be whitelisted.\r\n     * @param referenceModuleInitData The data to be passed to the reference module for initialization.\r\n     * @param sig The EIP712Signature struct containing the profile owner's signature.\r\n     */\r\n    struct MirrorWithSigData {\r\n        uint256 profileId;\r\n        uint256 profileIdPointed;\r\n        uint256 pubIdPointed;\r\n        bytes referenceModuleData;\r\n        address referenceModule;\r\n        bytes referenceModuleInitData;\r\n        EIP712Signature sig;\r\n    }\r\n\r\n    /**\r\n     * @notice A struct containing the parameters required for the `followWithSig()` function. Parameters are the same\r\n     * as the regular `follow()` function, with the follower's (signer) address and an EIP712Signature added.\r\n     *\r\n     * @param follower The follower which is the message signer.\r\n     * @param profileIds The array of token IDs of the profiles to follow.\r\n     * @param datas The array of arbitrary data to pass to the followModules if needed.\r\n     * @param sig The EIP712Signature struct containing the follower's signature.\r\n     */\r\n    struct FollowWithSigData {\r\n        address follower;\r\n        uint256[] profileIds;\r\n        bytes[] datas;\r\n        EIP712Signature sig;\r\n    }\r\n\r\n    /**\r\n     * @notice A struct containing the parameters required for the `collectWithSig()` function. Parameters are the same as\r\n     * the regular `collect()` function, with the collector's (signer) address and an EIP712Signature added.\r\n     *\r\n     * @param collector The collector which is the message signer.\r\n     * @param profileId The token ID of the profile that published the publication to collect.\r\n     * @param pubId The publication to collect's publication ID.\r\n     * @param data The arbitrary data to pass to the collectModule if needed.\r\n     * @param sig The EIP712Signature struct containing the collector's signature.\r\n     */\r\n    struct CollectWithSigData {\r\n        address collector;\r\n        uint256 profileId;\r\n        uint256 pubId;\r\n        bytes data;\r\n        EIP712Signature sig;\r\n    }\r\n\r\n    /**\r\n     * @notice A struct containing the parameters required for the `setProfileMetadataWithSig()` function.\r\n     *\r\n     * @param profileId The profile ID for which to set the metadata.\r\n     * @param metadata The metadata string to set for the profile and user.\r\n     * @param sig The EIP712Signature struct containing the user's signature.\r\n     */\r\n    struct SetProfileMetadataWithSigData {\r\n        uint256 profileId;\r\n        string metadata;\r\n        EIP712Signature sig;\r\n    }\r\n\r\n    /**\r\n     * @notice A struct containing the parameters required for the `toggleFollowWithSig()` function.\r\n     *\r\n     * @param follower The follower which is the message signer.\r\n     * @param profileIds The token ID array of the profiles.\r\n     * @param enables The array of booleans to enable/disable follows.\r\n     * @param sig The EIP712Signature struct containing the follower's signature.\r\n     */\r\n    struct ToggleFollowWithSigData {\r\n        address follower;\r\n        uint256[] profileIds;\r\n        bool[] enables;\r\n        EIP712Signature sig;\r\n    }\r\n}\r\n// File: ILensHub.sol\r\n\r\n\r\n\r\npragma solidity 0.8.10;\r\n\r\n\r\n/**\r\n * @title ILensHub\r\n * @author Lens Protocol\r\n *\r\n * @notice This is the interface for the LensHub contract, the main entry point for the Lens Protocol.\r\n * You'll find all the events and external functions, as well as the reasoning behind them here.\r\n */\r\ninterface ILensHub {\r\n    /**\r\n     * @notice Initializes the LensHub NFT, setting the initial governance address as well as the name and symbol in\r\n     * the LensNFTBase contract.\r\n     *\r\n     * @param name The name to set for the hub NFT.\r\n     * @param symbol The symbol to set for the hub NFT.\r\n     * @param newGovernance The governance address to set.\r\n     */\r\n    function initialize(\r\n        string calldata name,\r\n        string calldata symbol,\r\n        address newGovernance\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Sets the privileged governance role. This function can only be called by the current governance\r\n     * address.\r\n     *\r\n     * @param newGovernance The new governance address to set.\r\n     */\r\n    function setGovernance(address newGovernance) external;\r\n\r\n    /**\r\n     * @notice Sets the emergency admin, which is a permissioned role able to set the protocol state. This function\r\n     * can only be called by the governance address.\r\n     *\r\n     * @param newEmergencyAdmin The new emergency admin address to set.\r\n     */\r\n    function setEmergencyAdmin(address newEmergencyAdmin) external;\r\n\r\n    /**\r\n     * @notice Sets the protocol state to either a global pause, a publishing pause or an unpaused state. This function\r\n     * can only be called by the governance address or the emergency admin address.\r\n     *\r\n     * Note that this reverts if the emergency admin calls it if:\r\n     *      1. The emergency admin is attempting to unpause.\r\n     *      2. The emergency admin is calling while the protocol is already paused.\r\n     *\r\n     * @param newState The state to set, as a member of the ProtocolState enum.\r\n     */\r\n    function setState(DataTypes.ProtocolState newState) external;\r\n\r\n    /**\r\n     * @notice Adds or removes a profile creator from the whitelist. This function can only be called by the current\r\n     * governance address.\r\n     *\r\n     * @param profileCreator The profile creator address to add or remove from the whitelist.\r\n     * @param whitelist Whether or not the profile creator should be whitelisted.\r\n     */\r\n    function whitelistProfileCreator(address profileCreator, bool whitelist) external;\r\n\r\n    /**\r\n     * @notice Adds or removes a follow module from the whitelist. This function can only be called by the current\r\n     * governance address.\r\n     *\r\n     * @param followModule The follow module contract address to add or remove from the whitelist.\r\n     * @param whitelist Whether or not the follow module should be whitelisted.\r\n     */\r\n    function whitelistFollowModule(address followModule, bool whitelist) external;\r\n\r\n    /**\r\n     * @notice Adds or removes a reference module from the whitelist. This function can only be called by the current\r\n     * governance address.\r\n     *\r\n     * @param referenceModule The reference module contract to add or remove from the whitelist.\r\n     * @param whitelist Whether or not the reference module should be whitelisted.\r\n     */\r\n    function whitelistReferenceModule(address referenceModule, bool whitelist) external;\r\n\r\n    /**\r\n     * @notice Adds or removes a collect module from the whitelist. This function can only be called by the current\r\n     * governance address.\r\n     *\r\n     * @param collectModule The collect module contract address to add or remove from the whitelist.\r\n     * @param whitelist Whether or not the collect module should be whitelisted.\r\n     */\r\n    function whitelistCollectModule(address collectModule, bool whitelist) external;\r\n\r\n    /**\r\n     * @notice Creates a profile with the specified parameters, minting a profile NFT to the given recipient. This\r\n     * function must be called by a whitelisted profile creator.\r\n     *\r\n     * @param vars A CreateProfileData struct containing the following params:\r\n     *      to: The address receiving the profile.\r\n     *      handle: The handle to set for the profile, must be unique and non-empty.\r\n     *      imageURI: The URI to set for the profile image.\r\n     *      followModule: The follow module to use, can be the zero address.\r\n     *      followModuleInitData: The follow module initialization data, if any.\r\n     */\r\n    function createProfile(DataTypes.CreateProfileData calldata vars) external returns (uint256);\r\n\r\n    /**\r\n     * @notice Sets the mapping between wallet and its main profile identity.\r\n     *\r\n     * @param profileId The token ID of the profile to set as the main profile identity.\r\n     */\r\n    function setDefaultProfile(uint256 profileId) external;\r\n\r\n    /**\r\n     * @notice Sets the mapping between wallet and its main profile identity via signature with the specified parameters.\r\n     *\r\n     * @param vars A SetDefaultProfileWithSigData struct, including the regular parameters and an EIP712Signature struct.\r\n     */\r\n    function setDefaultProfileWithSig(DataTypes.SetDefaultProfileWithSigData calldata vars)\r\n        external;\r\n\r\n    /**\r\n     * @notice Sets a profile's follow module, must be called by the profile owner.\r\n     *\r\n     * @param profileId The token ID of the profile to set the follow module for.\r\n     * @param followModule The follow module to set for the given profile, must be whitelisted.\r\n     * @param followModuleInitData The data to be passed to the follow module for initialization.\r\n     */\r\n    function setFollowModule(\r\n        uint256 profileId,\r\n        address followModule,\r\n        bytes calldata followModuleInitData\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Sets a profile's follow module via signature with the specified parameters.\r\n     *\r\n     * @param vars A SetFollowModuleWithSigData struct, including the regular parameters and an EIP712Signature struct.\r\n     */\r\n    function setFollowModuleWithSig(DataTypes.SetFollowModuleWithSigData calldata vars) external;\r\n\r\n    /**\r\n     * @notice Sets a profile's dispatcher, giving that dispatcher rights to publish to that profile.\r\n     *\r\n     * @param profileId The token ID of the profile of the profile to set the dispatcher for.\r\n     * @param dispatcher The dispatcher address to set for the given profile ID.\r\n     */\r\n    function setDispatcher(uint256 profileId, address dispatcher) external;\r\n\r\n    /**\r\n     * @notice Sets a profile's dispatcher via signature with the specified parameters.\r\n     *\r\n     * @param vars A SetDispatcherWithSigData struct, including the regular parameters and an EIP712Signature struct.\r\n     */\r\n    function setDispatcherWithSig(DataTypes.SetDispatcherWithSigData calldata vars) external;\r\n\r\n    /**\r\n     * @notice Sets a profile's URI, which is reflected in the `tokenURI()` function.\r\n     *\r\n     * @param profileId The token ID of the profile of the profile to set the URI for.\r\n     * @param imageURI The URI to set for the given profile.\r\n     */\r\n    function setProfileImageURI(uint256 profileId, string calldata imageURI) external;\r\n\r\n    /**\r\n     * @notice Sets a profile's URI via signature with the specified parameters.\r\n     *\r\n     * @param vars A SetProfileImageURIWithSigData struct, including the regular parameters and an EIP712Signature struct.\r\n     */\r\n    function setProfileImageURIWithSig(DataTypes.SetProfileImageURIWithSigData calldata vars)\r\n        external;\r\n\r\n    /**\r\n     * @notice Sets a followNFT URI for a given profile's follow NFT.\r\n     *\r\n     * @param profileId The token ID of the profile for which to set the followNFT URI.\r\n     * @param followNFTURI The follow NFT URI to set.\r\n     */\r\n    function setFollowNFTURI(uint256 profileId, string calldata followNFTURI) external;\r\n\r\n    /**\r\n     * @notice Sets a followNFT URI via signature with the specified parameters.\r\n     *\r\n     * @param vars A SetFollowNFTURIWithSigData struct, including the regular parameters and an EIP712Signature struct.\r\n     */\r\n    function setFollowNFTURIWithSig(DataTypes.SetFollowNFTURIWithSigData calldata vars) external;\r\n\r\n    /**\r\n     * @notice Publishes a post to a given profile, must be called by the profile owner.\r\n     *\r\n     * @param vars A PostData struct containing the needed parameters.\r\n     *\r\n     * @return uint256 An integer representing the post's publication ID.\r\n     */\r\n    function post(DataTypes.PostData calldata vars) external returns (uint256);\r\n\r\n    /**\r\n     * @notice Publishes a post to a given profile via signature with the specified parameters.\r\n     *\r\n     * @param vars A PostWithSigData struct containing the regular parameters and an EIP712Signature struct.\r\n     *\r\n     * @return uint256 An integer representing the post's publication ID.\r\n     */\r\n    function postWithSig(DataTypes.PostWithSigData calldata vars) external returns (uint256);\r\n\r\n    /**\r\n     * @notice Publishes a comment to a given profile, must be called by the profile owner.\r\n     *\r\n     * @param vars A CommentData struct containing the needed parameters.\r\n     *\r\n     * @return uint256 An integer representing the comment's publication ID.\r\n     */\r\n    function comment(DataTypes.CommentData calldata vars) external returns (uint256);\r\n\r\n    /**\r\n     * @notice Publishes a comment to a given profile via signature with the specified parameters.\r\n     *\r\n     * @param vars A CommentWithSigData struct containing the regular parameters and an EIP712Signature struct.\r\n     *\r\n     * @return uint256 An integer representing the comment's publication ID.\r\n     */\r\n    function commentWithSig(DataTypes.CommentWithSigData calldata vars) external returns (uint256);\r\n\r\n    /**\r\n     * @notice Publishes a mirror to a given profile, must be called by the profile owner.\r\n     *\r\n     * @param vars A MirrorData struct containing the necessary parameters.\r\n     *\r\n     * @return uint256 An integer representing the mirror's publication ID.\r\n     */\r\n    function mirror(DataTypes.MirrorData calldata vars) external returns (uint256);\r\n\r\n    /**\r\n     * @notice Publishes a mirror to a given profile via signature with the specified parameters.\r\n     *\r\n     * @param vars A MirrorWithSigData struct containing the regular parameters and an EIP712Signature struct.\r\n     *\r\n     * @return uint256 An integer representing the mirror's publication ID.\r\n     */\r\n    function mirrorWithSig(DataTypes.MirrorWithSigData calldata vars) external returns (uint256);\r\n\r\n    /**\r\n     * @notice Follows the given profiles, executing each profile's follow module logic (if any) and minting followNFTs to the caller.\r\n     *\r\n     * NOTE: Both the `profileIds` and `datas` arrays must be of the same length, regardless if the profiles do not have a follow module set.\r\n     *\r\n     * @param profileIds The token ID array of the profiles to follow.\r\n     * @param datas The arbitrary data array to pass to the follow module for each profile if needed.\r\n     *\r\n     * @return uint256[] An array of integers representing the minted follow NFTs token IDs.\r\n     */\r\n    function follow(uint256[] calldata profileIds, bytes[] calldata datas)\r\n        external\r\n        returns (uint256[] memory);\r\n\r\n    /**\r\n     * @notice Follows a given profile via signature with the specified parameters.\r\n     *\r\n     * @param vars A FollowWithSigData struct containing the regular parameters as well as the signing follower's address\r\n     * and an EIP712Signature struct.\r\n     *\r\n     * @return uint256[] An array of integers representing the minted follow NFTs token IDs.\r\n     */\r\n    function followWithSig(DataTypes.FollowWithSigData calldata vars)\r\n        external\r\n        returns (uint256[] memory);\r\n\r\n    /**\r\n     * @notice Collects a given publication, executing collect module logic and minting a collectNFT to the caller.\r\n     *\r\n     * @param profileId The token ID of the profile that published the publication to collect.\r\n     * @param pubId The publication to collect's publication ID.\r\n     * @param data The arbitrary data to pass to the collect module if needed.\r\n     *\r\n     * @return uint256 An integer representing the minted token ID.\r\n     */\r\n    function collect(\r\n        uint256 profileId,\r\n        uint256 pubId,\r\n        bytes calldata data\r\n    ) external returns (uint256);\r\n\r\n    /**\r\n     * @notice Collects a given publication via signature with the specified parameters.\r\n     *\r\n     * @param vars A CollectWithSigData struct containing the regular parameters as well as the collector's address and\r\n     * an EIP712Signature struct.\r\n     *\r\n     * @return uint256 An integer representing the minted token ID.\r\n     */\r\n    function collectWithSig(DataTypes.CollectWithSigData calldata vars) external returns (uint256);\r\n\r\n    /**\r\n     * @dev Helper function to emit a detailed followNFT transfer event from the hub, to be consumed by frontends to track\r\n     * followNFT transfers.\r\n     *\r\n     * @param profileId The token ID of the profile associated with the followNFT being transferred.\r\n     * @param followNFTId The followNFT being transferred's token ID.\r\n     * @param from The address the followNFT is being transferred from.\r\n     * @param to The address the followNFT is being transferred to.\r\n     */\r\n    function emitFollowNFTTransferEvent(\r\n        uint256 profileId,\r\n        uint256 followNFTId,\r\n        address from,\r\n        address to\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Helper function to emit a detailed collectNFT transfer event from the hub, to be consumed by frontends to track\r\n     * collectNFT transfers.\r\n     *\r\n     * @param profileId The token ID of the profile associated with the collect NFT being transferred.\r\n     * @param pubId The publication ID associated with the collect NFT being transferred.\r\n     * @param collectNFTId The collectNFT being transferred's token ID.\r\n     * @param from The address the collectNFT is being transferred from.\r\n     * @param to The address the collectNFT is being transferred to.\r\n     */\r\n    function emitCollectNFTTransferEvent(\r\n        uint256 profileId,\r\n        uint256 pubId,\r\n        uint256 collectNFTId,\r\n        address from,\r\n        address to\r\n    ) external;\r\n\r\n    /// ************************\r\n    /// *****VIEW FUNCTIONS*****\r\n    /// ************************\r\n\r\n    /**\r\n     * @notice Returns whether or not a profile creator is whitelisted.\r\n     *\r\n     * @param profileCreator The address of the profile creator to check.\r\n     *\r\n     * @return bool True if the profile creator is whitelisted, false otherwise.\r\n     */\r\n    function isProfileCreatorWhitelisted(address profileCreator) external view returns (bool);\r\n\r\n    /**\r\n     * @notice Returns default profile for a given wallet address\r\n     *\r\n     * @param wallet The address to find the default mapping\r\n     *\r\n     * @return uint256 The default profile id, which will be 0 if not mapped.\r\n     */\r\n    function defaultProfile(address wallet) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Returns whether or not a follow module is whitelisted.\r\n     *\r\n     * @param followModule The address of the follow module to check.\r\n     *\r\n     * @return bool True if the the follow module is whitelisted, false otherwise.\r\n     */\r\n    function isFollowModuleWhitelisted(address followModule) external view returns (bool);\r\n\r\n    /**\r\n     * @notice Returns whether or not a reference module is whitelisted.\r\n     *\r\n     * @param referenceModule The address of the reference module to check.\r\n     *\r\n     * @return bool True if the the reference module is whitelisted, false otherwise.\r\n     */\r\n    function isReferenceModuleWhitelisted(address referenceModule) external view returns (bool);\r\n\r\n    /**\r\n     * @notice Returns whether or not a collect module is whitelisted.\r\n     *\r\n     * @param collectModule The address of the collect module to check.\r\n     *\r\n     * @return bool True if the the collect module is whitelisted, false otherwise.\r\n     */\r\n    function isCollectModuleWhitelisted(address collectModule) external view returns (bool);\r\n\r\n    /**\r\n     * @notice Returns the currently configured governance address.\r\n     *\r\n     * @return address The address of the currently configured governance.\r\n     */\r\n    function getGovernance() external view returns (address);\r\n\r\n    /**\r\n     * @notice Returns the dispatcher associated with a profile.\r\n     *\r\n     * @param profileId The token ID of the profile to query the dispatcher for.\r\n     *\r\n     * @return address The dispatcher address associated with the profile.\r\n     */\r\n    function getDispatcher(uint256 profileId) external view returns (address);\r\n\r\n    /**\r\n     * @notice Returns the publication count for a given profile.\r\n     *\r\n     * @param profileId The token ID of the profile to query.\r\n     *\r\n     * @return uint256 The number of publications associated with the queried profile.\r\n     */\r\n    function getPubCount(uint256 profileId) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Returns the followNFT associated with a given profile, if any.\r\n     *\r\n     * @param profileId The token ID of the profile to query the followNFT for.\r\n     *\r\n     * @return address The followNFT associated with the given profile.\r\n     */\r\n    function getFollowNFT(uint256 profileId) external view returns (address);\r\n\r\n    /**\r\n     * @notice Returns the followNFT URI associated with a given profile.\r\n     *\r\n     * @param profileId The token ID of the profile to query the followNFT URI for.\r\n     *\r\n     * @return string The followNFT URI associated with the given profile.\r\n     */\r\n    function getFollowNFTURI(uint256 profileId) external view returns (string memory);\r\n\r\n    /**\r\n     * @notice Returns the collectNFT associated with a given publication, if any.\r\n     *\r\n     * @param profileId The token ID of the profile that published the publication to query.\r\n     * @param pubId The publication ID of the publication to query.\r\n     *\r\n     * @return address The address of the collectNFT associated with the queried publication.\r\n     */\r\n    function getCollectNFT(uint256 profileId, uint256 pubId) external view returns (address);\r\n\r\n    /**\r\n     * @notice Returns the follow module associated witha  given profile, if any.\r\n     *\r\n     * @param profileId The token ID of the profile to query the follow module for.\r\n     *\r\n     * @return address The address of the follow module associated with the given profile.\r\n     */\r\n    function getFollowModule(uint256 profileId) external view returns (address);\r\n\r\n    /**\r\n     * @notice Returns the collect module associated with a given publication.\r\n     *\r\n     * @param profileId The token ID of the profile that published the publication to query.\r\n     * @param pubId The publication ID of the publication to query.\r\n     *\r\n     * @return address The address of the collect module associated with the queried publication.\r\n     */\r\n    function getCollectModule(uint256 profileId, uint256 pubId) external view returns (address);\r\n\r\n    /**\r\n     * @notice Returns the reference module associated witha  given profile, if any.\r\n     *\r\n     * @param profileId The token ID of the profile that published the publication to querythe reference module for.\r\n     * @param pubId The publication ID of the publication to query the reference module for.\r\n     *\r\n     * @return address The address of the reference module associated with the given profile.\r\n     */\r\n    function getReferenceModule(uint256 profileId, uint256 pubId) external view returns (address);\r\n\r\n    /**\r\n     * @notice Returns the handle associated with a profile.\r\n     *\r\n     * @param profileId The token ID of the profile to query the handle for.\r\n     *\r\n     * @return string The handle associated with the profile.\r\n     */\r\n    function getHandle(uint256 profileId) external view returns (string memory);\r\n\r\n    /**\r\n     * @notice Returns the publication pointer (profileId & pubId) associated with a given publication.\r\n     *\r\n     * @param profileId The token ID of the profile that published the publication to query the pointer for.\r\n     * @param pubId The publication ID of the publication to query the pointer for.\r\n     *\r\n     * @return tuple First, the profile ID of the profile the current publication is pointing to, second, the\r\n     * publication ID of the publication the current publication is pointing to.\r\n     */\r\n    function getPubPointer(uint256 profileId, uint256 pubId)\r\n        external\r\n        view\r\n        returns (uint256, uint256);\r\n\r\n    /**\r\n     * @notice Returns the URI associated with a given publication.\r\n     *\r\n     * @param profileId The token ID of the profile that published the publication to query.\r\n     * @param pubId The publication ID of the publication to query.\r\n     *\r\n     * @return string The URI associated with a given publication.\r\n     */\r\n    function getContentURI(uint256 profileId, uint256 pubId) external view returns (string memory);\r\n\r\n    /**\r\n     * @notice Returns the profile token ID according to a given handle.\r\n     *\r\n     * @param handle The handle to resolve the profile token ID with.\r\n     *\r\n     * @return uint256 The profile ID the passed handle points to.\r\n     */\r\n    function getProfileIdByHandle(string calldata handle) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Returns the full profile struct associated with a given profile token ID.\r\n     *\r\n     * @param profileId The token ID of the profile to query.\r\n     *\r\n     * @return ProfileStruct The profile struct of the given profile.\r\n     */\r\n    function getProfile(uint256 profileId) external view returns (DataTypes.ProfileStruct memory);\r\n\r\n    /**\r\n     * @notice Returns the full publication struct for a given publication.\r\n     *\r\n     * @param profileId The token ID of the profile that published the publication to query.\r\n     * @param pubId The publication ID of the publication to query.\r\n     *\r\n     * @return PublicationStruct The publication struct associated with the queried publication.\r\n     */\r\n    function getPub(uint256 profileId, uint256 pubId)\r\n        external\r\n        view\r\n        returns (DataTypes.PublicationStruct memory);\r\n\r\n    /**\r\n     * @notice Returns the publication type associated with a given publication.\r\n     *\r\n     * @param profileId The token ID of the profile that published the publication to query.\r\n     * @param pubId The publication ID of the publication to query.\r\n     *\r\n     * @return PubType The publication type, as a member of an enum (either \"post,\" \"comment\" or \"mirror\").\r\n     */\r\n    function getPubType(uint256 profileId, uint256 pubId) external view returns (DataTypes.PubType);\r\n\r\n    /**\r\n     * @notice Returns the follow NFT implementation address.\r\n     *\r\n     * @return address The follow NFT implementation address.\r\n     */\r\n    function getFollowNFTImpl() external view returns (address);\r\n\r\n    /**\r\n     * @notice Returns the collect NFT implementation address.\r\n     *\r\n     * @return address The collect NFT implementation address.\r\n     */\r\n    function getCollectNFTImpl() external view returns (address);\r\n}\r\n// File: collectMultiple.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IWmatic {\r\n    function deposit() external payable;\r\n}\r\n\r\ncontract MultiCollect is Ownable, IERC721Receiver {\r\n    address public lensHubAddress;\r\n    uint256 public maxCollectAmount;\r\n    address wMaticAddress = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;\r\n\r\n    constructor(address _lensHub) {\r\n        lensHubAddress = _lensHub;\r\n        maxCollectAmount = 50;\r\n    }\r\n\r\n    function setMaxCollectAmount(uint256 newAmount) public onlyOwner {\r\n        maxCollectAmount = newAmount;\r\n    }\r\n\r\n    function collectContractExists(uint256 profileId, uint256 pubId) internal view returns (bool) {\r\n        bool contractExists = true;\r\n        try ILensHub(lensHubAddress).getCollectNFT(profileId, pubId) returns (address) {\r\n            // Exists, do nothing\r\n        } catch {\r\n            // Does not exist, set contractExists to false\r\n            contractExists = false;\r\n        }\r\n        return contractExists;\r\n    }\r\n\r\n    function collectMultiple(uint256 profileId, uint256 pubId, bytes calldata data, address erc20Token, uint256 price, uint256 amount) public {\r\n        require(amount <= maxCollectAmount, \"Over the max amount allowed to mint\");\r\n\r\n        uint256 totalCost = price * amount;\r\n        require(IERC20(erc20Token).balanceOf(msg.sender) >= totalCost, \"Insufficient token balance\");\r\n\r\n        // Transfer the required ERC20 tokens from sender to this contract\r\n        IERC20(erc20Token).transferFrom(msg.sender, address(this), totalCost);\r\n\r\n        address collectModule = ILensHub(lensHubAddress).getCollectModule(profileId, pubId);\r\n        require(IERC20(erc20Token).approve(collectModule, totalCost), \"Approval failed\");\r\n\r\n        address tokenContract;\r\n        bool contractExists = collectContractExists(profileId, pubId);\r\n        if (contractExists) {\r\n            tokenContract = ILensHub(lensHubAddress).getCollectNFT(profileId, pubId);\r\n        }\r\n        for (uint256 i=0; i<amount; i++) {\r\n            // Collect contract is created after the first collect\r\n            uint256 tokenId = ILensHub(lensHubAddress).collect(profileId, pubId, data);\r\n            if (tokenContract == address(0)) {\r\n                tokenContract = ILensHub(lensHubAddress).getCollectNFT(profileId, pubId);\r\n            }\r\n            IERC721(tokenContract).safeTransferFrom(address(this), msg.sender, tokenId);\r\n        }\r\n    }\r\n\r\n    // This contract doesn't need to be approved if this is used\r\n    function collectMultipleWithMatic(uint256 profileId, uint256 pubId, bytes calldata data, address erc20Token, uint256 price, uint256 amount) public payable {\r\n        require(amount <= maxCollectAmount, \"Over the max amount allowed to mint\");\r\n\r\n        uint256 totalCost = price * amount;\r\n        require(msg.value == totalCost, \"Insufficient value\");\r\n        \r\n        IWmatic(wMaticAddress).deposit{value: msg.value}();\r\n\r\n        address collectModule = ILensHub(lensHubAddress).getCollectModule(profileId, pubId);\r\n        require(IERC20(erc20Token).approve(collectModule, totalCost), \"Approval failed\");\r\n\r\n        address tokenContract;\r\n        bool contractExists = collectContractExists(profileId, pubId);\r\n        if (contractExists) {\r\n            tokenContract = ILensHub(lensHubAddress).getCollectNFT(profileId, pubId);\r\n        }\r\n        for (uint256 i=0; i<amount; i++) {\r\n            // Collect contract is created after the first collect\r\n            uint256 tokenId = ILensHub(lensHubAddress).collect(profileId, pubId, data);\r\n            if (tokenContract == address(0)) {\r\n                tokenContract = ILensHub(lensHubAddress).getCollectNFT(profileId, pubId);\r\n            }\r\n            IERC721(tokenContract).safeTransferFrom(address(this), msg.sender, tokenId);\r\n        }\r\n    }\r\n\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external override (IERC721Receiver) returns (bytes4) {\r\n        // Return the function selector of onERC721Received to indicate successful handling of the NFT\r\n        return this.onERC721Received.selector;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lensHub\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pubId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"collectMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pubId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"collectMultipleWithMatic\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lensHubAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCollectAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxCollectAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MultiCollect", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000db46d1dc155634fbc732f92e853b10b288ad5a1d", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c6b91cb956a6413d3b366f6d8404961723d2f565ffd38810afe92a7c8f2d1c31"}