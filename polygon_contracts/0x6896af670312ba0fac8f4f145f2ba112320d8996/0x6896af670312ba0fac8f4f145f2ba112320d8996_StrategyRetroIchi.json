{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/common/DynamicFeeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\nabstract contract DynamicFeeManager is Initializable, OwnableUpgradeable {\\r\\n  uint256 public constant MAX_FEE = 1000;\\r\\n  uint256 public constant MAX_CALL_FEE = 111;\\r\\n\\r\\n  uint256 public constant WITHDRAWAL_FEE_CAP = 50;\\r\\n  uint256 public constant WITHDRAWAL_MAX = 10000;\\r\\n\\r\\n  uint256 public withdrawalFee;\\r\\n  uint256 public callFee;\\r\\n  uint256 public strategistFee;\\r\\n  uint256 public fee1;\\r\\n  uint256 public fee2;\\r\\n\\r\\n  function __DynamicFeeManager_init() internal  {\\r\\n    // __Ownable_init_unchained();\\r\\n    __DynamicFeeManager_init_unchained();\\r\\n  }\\r\\n\\r\\n  function __DynamicFeeManager_init_unchained() internal  {\\r\\n    withdrawalFee = 0;\\r\\n    callFee = 0;\\r\\n    strategistFee = 0;\\r\\n    fee1 = 350;\\r\\n    fee2 = 650;\\r\\n  }\\r\\n\\r\\n  function setFee(\\r\\n    uint256 _callFee,\\r\\n    uint256 _strategistFee,\\r\\n    uint256 _fee2\\r\\n  ) public onlyOwner {\\r\\n    require(_callFee <= MAX_CALL_FEE, \\\"!cap\\\");\\r\\n    uint256 sum = _callFee + _strategistFee + _fee2;\\r\\n    require(sum <= 1000, \\\"Invalid Fee Combination (Please add total fee less than 1000)\\\");\\r\\n\\r\\n    callFee = _callFee;\\r\\n    strategistFee = _strategistFee;\\r\\n    fee2 = _fee2;\\r\\n\\r\\n    fee1 = MAX_FEE - sum;\\r\\n  }\\r\\n\\r\\n  function setWithdrawalFee(uint256 _fee) public onlyOwner {\\r\\n    require(_fee <= WITHDRAWAL_FEE_CAP, \\\"!cap\\\");\\r\\n\\r\\n    withdrawalFee = _fee;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/common/StratManagerUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\r\\n\\r\\ncontract StratManagerUpgradeable is Initializable, OwnableUpgradeable, PausableUpgradeable {\\r\\n  /**\\r\\n   * @dev Beefy Contracts:\\r\\n   * {keeper} - Address to manage a few lower risk features of the strat\\r\\n   * {strategist} - Address of the strategy author/deployer where strategist fee will go.\\r\\n   * {vault} - Address of the vault that controls the strategy's funds.\\r\\n   * {dystRouter} - Address of exchange to execute swaps.\\r\\n   */\\r\\n  address public keeper;\\r\\n  address public strategist;\\r\\n  address public dystRouter;\\r\\n  address public vault;\\r\\n  address public feeRecipient1;\\r\\n  address public feeRecipient2;\\r\\n\\r\\n  /**\\r\\n   * @dev Initializes the base strategy.\\r\\n   * @param _keeper address to use as alternative owner.\\r\\n   * @param _strategist address where strategist fees go.\\r\\n   * @param _dystRouter router to use for swaps\\r\\n   * @param _vault address of parent vault.\\r\\n   * @param _feeRecipient address where to send Beefy's fees.\\r\\n   */\\r\\n  function __StratManager_init(\\r\\n    address _keeper,\\r\\n    address _strategist,\\r\\n    address _dystRouter,\\r\\n    address _vault,\\r\\n    address _feeRecipient\\r\\n  ) internal initializer {\\r\\n    __Ownable_init_unchained();\\r\\n    __Pausable_init_unchained();\\r\\n    __StratManager_init_unchained(_keeper, _strategist, _dystRouter, _vault, _feeRecipient);\\r\\n  }\\r\\n\\r\\n  function __StratManager_init_unchained(\\r\\n    address _keeper,\\r\\n    address _strategist,\\r\\n    address _dystRouter,\\r\\n    address _vault,\\r\\n    address _feeRecipient\\r\\n  ) internal {\\r\\n    keeper = _keeper;\\r\\n    strategist = _strategist;\\r\\n    dystRouter = _dystRouter;\\r\\n    vault = _vault;\\r\\n    feeRecipient1 = _feeRecipient;\\r\\n    feeRecipient2 = _feeRecipient;\\r\\n  }\\r\\n\\r\\n  // checks that caller is either owner or keeper.\\r\\n  modifier onlyManager() {\\r\\n    require(msg.sender == owner() || msg.sender == keeper, \\\"!manager\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Updates address of the strat keeper.\\r\\n   * @param _keeper new keeper address.\\r\\n   */\\r\\n  function setKeeper(address _keeper) external onlyManager {\\r\\n    keeper = _keeper;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Updates address where strategist fee earnings will go.\\r\\n   * @param _strategist new strategist address.\\r\\n   */\\r\\n  function setStrategist(address _strategist) external {\\r\\n    require(msg.sender == strategist, \\\"!strategist\\\");\\r\\n    strategist = _strategist;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Updates router that will be used for swaps.\\r\\n   * @param _dystRouter new dystRouter address.\\r\\n   */\\r\\n  function setDystRouter(address _dystRouter) external onlyOwner {\\r\\n    dystRouter = _dystRouter;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Updates parent vault.\\r\\n   * @param _vault new vault address.\\r\\n   */\\r\\n  function setVault(address _vault) external onlyOwner {\\r\\n    vault = _vault;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Updates beefy fee recipient.\\r\\n   * @param _feeRecipient new beefy fee recipient address.\\r\\n   */\\r\\n  function setFeeRecipient1(address _feeRecipient) external onlyOwner {\\r\\n    feeRecipient1 = _feeRecipient;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Updates beefy fee recipient 2.\\r\\n   * @param _feeRecipient2 new beefy fee recipient address.\\r\\n   */\\r\\n  function setFeeRecipient2(address _feeRecipient2) external onlyOwner {\\r\\n    feeRecipient2 = _feeRecipient2;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Function to synchronize balances before new user deposit.\\r\\n   * Can be overridden in the strategy.\\r\\n   */\\r\\n  function beforeDeposit() external virtual {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/common/IERC20Extended.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.9.0;\\r\\n\\r\\ninterface IERC20Extended {\\r\\n  function symbol() external view returns (string memory);\\r\\n\\r\\n  function decimals() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/common/ISolidlyPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.9.0;\\r\\n\\r\\ninterface ISolidlyPair {\\r\\n  function factory() external view returns (address);\\r\\n\\r\\n  function token0() external view returns (address);\\r\\n\\r\\n  function token1() external view returns (address);\\r\\n\\r\\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n  function getReserves()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint112 reserve0,\\r\\n      uint112 reserve1,\\r\\n      uint32 blockTimestampLast\\r\\n    );\\r\\n\\r\\n  function stable() external view returns (bool);\\r\\n\\r\\n  function getAmountOut(uint256 amountIn, address tokenIn) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/strategies/interfaces/common/IKyberElastic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IKyberElastic {\\r\\n  struct ExactInputSingleParams {\\r\\n    address tokenIn;\\r\\n    address tokenOut;\\r\\n    uint24 fee;\\r\\n    address recipient;\\r\\n    uint256 deadline;\\r\\n    uint256 amountIn;\\r\\n    uint256 minAmountOut;\\r\\n    uint160 limitSqrtP;\\r\\n  }\\r\\n\\r\\n  /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n  /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n  /// @return amountOut The amount of the received token\\r\\n  function swapExactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\r\\n\\r\\n  struct ExactInputParams {\\r\\n    bytes path;\\r\\n    address recipient;\\r\\n    uint256 deadline;\\r\\n    uint256 amountIn;\\r\\n    uint256 minAmountOut;\\r\\n  }\\r\\n\\r\\n  /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n  /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n  /// @return amountOut The amount of the received token\\r\\n  function swapExactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\r\\n\\r\\n  struct ExactOutputSingleParams {\\r\\n    address tokenIn;\\r\\n    address tokenOut;\\r\\n    uint24 fee;\\r\\n    address recipient;\\r\\n    uint256 deadline;\\r\\n    uint256 amountOut;\\r\\n    uint256 maxAmountIn;\\r\\n    uint160 limitSqrtP;\\r\\n  }\\r\\n\\r\\n  /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n  /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n  /// @return amountIn The amount of the input token\\r\\n  function swapExactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\r\\n\\r\\n  struct ExactOutputParams {\\r\\n    bytes path;\\r\\n    address recipient;\\r\\n    uint256 deadline;\\r\\n    uint256 amountOut;\\r\\n    uint256 maxAmountIn;\\r\\n  }\\r\\n\\r\\n  /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n  /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n  /// @return amountIn The amount of the input token\\r\\n  function swapExactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/strategies/interfaces/common/IUniswapRouterV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IUniswapRouterV3 {\\r\\n  struct ExactInputSingleParams {\\r\\n    address tokenIn;\\r\\n    address tokenOut;\\r\\n    uint24 fee;\\r\\n    address recipient;\\r\\n    uint256 amountIn;\\r\\n    uint256 amountOutMinimum;\\r\\n    uint160 sqrtPriceLimitX96;\\r\\n  }\\r\\n\\r\\n  /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n  /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n  /// @return amountOut The amount of the received token\\r\\n  function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\r\\n\\r\\n  struct ExactInputParams {\\r\\n    bytes path;\\r\\n    address recipient;\\r\\n    uint256 amountIn;\\r\\n    uint256 amountOutMinimum;\\r\\n  }\\r\\n\\r\\n  /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n  /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n  /// @return amountOut The amount of the received token\\r\\n  function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\r\\n\\r\\n  struct ExactOutputSingleParams {\\r\\n    address tokenIn;\\r\\n    address tokenOut;\\r\\n    uint24 fee;\\r\\n    address recipient;\\r\\n    uint256 amountOut;\\r\\n    uint256 amountInMaximum;\\r\\n    uint160 sqrtPriceLimitX96;\\r\\n  }\\r\\n\\r\\n  /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n  /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n  /// @return amountIn The amount of the input token\\r\\n  function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\r\\n\\r\\n  struct ExactOutputParams {\\r\\n    bytes path;\\r\\n    address recipient;\\r\\n    uint256 amountOut;\\r\\n    uint256 amountInMaximum;\\r\\n  }\\r\\n\\r\\n  /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n  /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n  /// @return amountIn The amount of the input token\\r\\n  function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/strategies/interfaces/common/IUniswapRouterV3WithDeadline.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface IUniswapRouterV3WithDeadline {\\r\\n  struct ExactInputSingleParams {\\r\\n    address tokenIn;\\r\\n    address tokenOut;\\r\\n    uint24 fee;\\r\\n    address recipient;\\r\\n    uint256 deadline;\\r\\n    uint256 amountIn;\\r\\n    uint256 amountOutMinimum;\\r\\n    uint160 sqrtPriceLimitX96;\\r\\n  }\\r\\n\\r\\n  /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n  /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n  /// @return amountOut The amount of the received token\\r\\n  function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\r\\n\\r\\n  struct ExactInputParams {\\r\\n    bytes path;\\r\\n    address recipient;\\r\\n    uint256 deadline;\\r\\n    uint256 amountIn;\\r\\n    uint256 amountOutMinimum;\\r\\n  }\\r\\n\\r\\n  /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n  /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n  /// @return amountOut The amount of the received token\\r\\n  function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\r\\n\\r\\n  struct ExactOutputSingleParams {\\r\\n    address tokenIn;\\r\\n    address tokenOut;\\r\\n    uint24 fee;\\r\\n    address recipient;\\r\\n    uint256 deadline;\\r\\n    uint256 amountOut;\\r\\n    uint256 amountInMaximum;\\r\\n    uint160 sqrtPriceLimitX96;\\r\\n  }\\r\\n\\r\\n  /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n  /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n  /// @return amountIn The amount of the input token\\r\\n  function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\r\\n\\r\\n  struct ExactOutputParams {\\r\\n    bytes path;\\r\\n    address recipient;\\r\\n    uint256 deadline;\\r\\n    uint256 amountOut;\\r\\n    uint256 amountInMaximum;\\r\\n  }\\r\\n\\r\\n  /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n  /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n  /// @return amountIn The amount of the input token\\r\\n  function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/strategies/polygon/retro/ichi/interfaces/IIchiVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.7.0 <0.9.0;\\r\\n\\r\\ninterface IIchiVault {\\r\\n  function allowToken0() external view returns (bool);\\r\\n\\r\\n  function allowToken1() external view returns (bool);\\r\\n\\r\\n  function baseLower() external view returns (int24);\\r\\n\\r\\n  function baseUpper() external view returns (int24);\\r\\n\\r\\n  function currentTick() external view returns (int24 tick);\\r\\n\\r\\n  function decimals() external view returns (uint8);\\r\\n\\r\\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\r\\n\\r\\n  function deposit(uint256 deposit0, uint256 deposit1, address to) external returns (uint256 shares);\\r\\n\\r\\n  function deposit0Max() external view returns (uint256);\\r\\n\\r\\n  function deposit1Max() external view returns (uint256);\\r\\n\\r\\n  function fee() external view returns (uint24);\\r\\n\\r\\n  function getBasePosition() external view returns (uint128 liquidity, uint256 amount0, uint256 amount1);\\r\\n\\r\\n  function getLimitPosition() external view returns (uint128 liquidity, uint256 amount0, uint256 amount1);\\r\\n\\r\\n  function getTotalAmounts() external view returns (uint256 total0, uint256 total1);\\r\\n\\r\\n  function hysteresis() external view returns (uint256);\\r\\n\\r\\n  function ichiVaultFactory() external view returns (address);\\r\\n\\r\\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\r\\n\\r\\n  function limitLower() external view returns (int24);\\r\\n\\r\\n  function limitUpper() external view returns (int24);\\r\\n\\r\\n  function maxTotalSupply() external view returns (uint256);\\r\\n\\r\\n  function name() external view returns (string memory);\\r\\n\\r\\n  function owner() external view returns (address);\\r\\n\\r\\n  function pool() external view returns (address);\\r\\n\\r\\n  function rebalance(\\r\\n    int24 _baseLower,\\r\\n    int24 _baseUpper,\\r\\n    int24 _limitLower,\\r\\n    int24 _limitUpper,\\r\\n    int256 swapQuantity\\r\\n  ) external;\\r\\n\\r\\n  function renounceOwnership() external;\\r\\n\\r\\n  function setAffiliate(address _affiliate) external;\\r\\n\\r\\n  function setDepositMax(uint256 _deposit0Max, uint256 _deposit1Max) external;\\r\\n\\r\\n  function setHysteresis(uint256 _hysteresis) external;\\r\\n\\r\\n  function setMaxTotalSupply(uint256 _maxTotalSupply) external;\\r\\n\\r\\n  function setTwapPeriod(uint32 newTwapPeriod) external;\\r\\n\\r\\n  function symbol() external view returns (string memory);\\r\\n\\r\\n  function tickSpacing() external view returns (int24);\\r\\n\\r\\n  function token0() external view returns (address);\\r\\n\\r\\n  function token1() external view returns (address);\\r\\n\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n  function transferOwnership(address newOwner) external;\\r\\n\\r\\n  function twapPeriod() external view returns (uint32);\\r\\n\\r\\n  function uniswapV3MintCallback(uint256 amount0, uint256 amount1, bytes memory data) external;\\r\\n\\r\\n  function uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes memory data) external;\\r\\n\\r\\n  function withdraw(uint256 shares, address to) external returns (uint256 amount0, uint256 amount1);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/strategies/polygon/retro/interfaces/IGammaUniProxy.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\r\\n\\r\\ninterface IGammaUniProxy {\\r\\n  function getDepositAmount(\\r\\n    address pos,\\r\\n    address token,\\r\\n    uint _deposit\\r\\n  ) external view returns (uint amountStart, uint amountEnd);\\r\\n\\r\\n  function deposit(\\r\\n    uint deposit0,\\r\\n    uint deposit1,\\r\\n    address to,\\r\\n    address pos,\\r\\n    uint[4] memory minIn\\r\\n  ) external returns (uint shares);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/strategies/polygon/retro/interfaces/IMerklClaimer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IMerklClaimer {\\r\\n  error InvalidDispute();\\r\\n  error InvalidLengths();\\r\\n  error InvalidProof();\\r\\n  error InvalidUninitializedRoot();\\r\\n  error NoDispute();\\r\\n  error NotGovernorOrGuardian();\\r\\n  error NotTrusted();\\r\\n  error NotWhitelisted();\\r\\n  error UnresolvedDispute();\\r\\n  error ZeroAddress();\\r\\n  event AdminChanged(address previousAdmin, address newAdmin);\\r\\n  event BeaconUpgraded(address indexed beacon);\\r\\n  event Claimed(address indexed user, address indexed token, uint256 amount);\\r\\n  event DisputeAmountUpdated(uint256 _disputeAmount);\\r\\n  event DisputePeriodUpdated(uint48 _disputePeriod);\\r\\n  event DisputeResolved(bool valid);\\r\\n  event DisputeTokenUpdated(address indexed _disputeToken);\\r\\n  event Disputed(string reason);\\r\\n  event Initialized(uint8 version);\\r\\n  event OperatorClaimingToggled(address indexed user, bool isEnabled);\\r\\n  event OperatorToggled(address indexed user, address indexed operator, bool isWhitelisted);\\r\\n  event Recovered(address indexed token, address indexed to, uint256 amount);\\r\\n  event Revoked();\\r\\n  event TreeUpdated(bytes32 merkleRoot, bytes32 ipfsHash, uint48 endOfDisputePeriod);\\r\\n  event TrustedToggled(address indexed eoa, bool trust);\\r\\n  event Upgraded(address indexed implementation);\\r\\n\\r\\n  function canUpdateMerkleRoot(address) external view returns (uint256);\\r\\n\\r\\n  function claim(\\r\\n    address[] memory users,\\r\\n    address[] memory tokens,\\r\\n    uint256[] memory amounts,\\r\\n    bytes32[][] memory proofs\\r\\n  ) external;\\r\\n\\r\\n  function claimed(address, address) external view returns (uint208 amount, uint48 timestamp, bytes32 merkleRoot);\\r\\n\\r\\n  function core() external view returns (address);\\r\\n\\r\\n  function disputeAmount() external view returns (uint256);\\r\\n\\r\\n  function disputePeriod() external view returns (uint48);\\r\\n\\r\\n  function disputeToken() external view returns (address);\\r\\n\\r\\n  function disputeTree(string memory reason) external;\\r\\n\\r\\n  function disputer() external view returns (address);\\r\\n\\r\\n  function endOfDisputePeriod() external view returns (uint48);\\r\\n\\r\\n  function getMerkleRoot() external view returns (bytes32);\\r\\n\\r\\n  function initialize(address _core) external;\\r\\n\\r\\n  function lastTree() external view returns (bytes32 merkleRoot, bytes32 ipfsHash);\\r\\n\\r\\n  function onlyOperatorCanClaim(address) external view returns (uint256);\\r\\n\\r\\n  function operators(address, address) external view returns (uint256);\\r\\n\\r\\n  function proxiableUUID() external view returns (bytes32);\\r\\n\\r\\n  function recoverERC20(address tokenAddress, address to, uint256 amountToRecover) external;\\r\\n\\r\\n  function resolveDispute(bool valid) external;\\r\\n\\r\\n  function revokeTree() external;\\r\\n\\r\\n  function setDisputeAmount(uint256 _disputeAmount) external;\\r\\n\\r\\n  function setDisputePeriod(uint48 _disputePeriod) external;\\r\\n\\r\\n  function setDisputeToken(address _disputeToken) external;\\r\\n\\r\\n  function toggleOnlyOperatorCanClaim(address user) external;\\r\\n\\r\\n  function toggleOperator(address user, address operator) external;\\r\\n\\r\\n  function toggleTrusted(address eoa) external;\\r\\n\\r\\n  function tree() external view returns (bytes32 merkleRoot, bytes32 ipfsHash);\\r\\n\\r\\n  function updateTree(MerkleTree memory _tree) external;\\r\\n\\r\\n  function upgradeTo(address newImplementation) external;\\r\\n\\r\\n  function upgradeToAndCall(address newImplementation, bytes memory data) external payable;\\r\\n}\\r\\n\\r\\nstruct MerkleTree {\\r\\n  bytes32 merkleRoot;\\r\\n  bytes32 ipfsHash;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/strategies/polygon/retro/interfaces/IRetroStaker.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\r\\n\\r\\ninterface IRetroStaker {\\r\\n  function deposit(uint256 amount) external;\\r\\n\\r\\n  function withdraw(uint256 amount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/strategies/polygon/retro/interfaces/IUniV3Interfaces.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\r\\n\\r\\ninterface IUniV3Pool {\\r\\n  function pool() external view returns (address);\\r\\n\\r\\n  function slot0()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      // the current price\\r\\n      uint160 sqrtPriceX96,\\r\\n      // the current tick\\r\\n      int24 tick,\\r\\n      // the most-recently updated index of the observations array\\r\\n      uint16 observationIndex,\\r\\n      // the current maximum number of observations that are being stored\\r\\n      uint16 observationCardinality,\\r\\n      // the next maximum number of observations to store, triggered in observations.write\\r\\n      uint16 observationCardinalityNext,\\r\\n      // the current protocol fee as a percentage of the swap fee taken on withdrawal\\r\\n      // represented as an integer denominator (1/x)%\\r\\n      uint8 feeProtocol,\\r\\n      // whether the pool is locked\\r\\n      bool unlocked\\r\\n    );\\r\\n\\r\\n  function flash(address recipient, uint256 amount0, uint256 amount1, bytes calldata data) external;\\r\\n\\r\\n  function fee() external view returns (uint24);\\r\\n}\\r\\n\\r\\ninterface IUniV3Quoter {\\r\\n  function quoteExactInput(bytes memory path, uint amountIn) external returns (uint amountOut);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/strategies/polygon/retro/StrategyRetroIchi.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\n\\r\\nimport \\\"../../../interfaces/common/ISolidlyPair.sol\\\";\\r\\nimport \\\"./interfaces/IRetroStaker.sol\\\";\\r\\nimport \\\"../../../interfaces/common/IERC20Extended.sol\\\";\\r\\nimport \\\"../../../common/StratManagerUpgradeable.sol\\\";\\r\\nimport \\\"../../../common/DynamicFeeManager.sol\\\";\\r\\nimport \\\"../../utils/UniV3Actions.sol\\\";\\r\\nimport \\\"../../utils/UniswapV3Utils.sol\\\";\\r\\nimport \\\"./interfaces/IGammaUniProxy.sol\\\";\\r\\nimport \\\"./interfaces/IUniV3Interfaces.sol\\\";\\r\\nimport \\\"./interfaces/IMerklClaimer.sol\\\";\\r\\nimport \\\"./ichi/interfaces/IIchiVault.sol\\\";\\r\\n\\r\\ninterface IOToken {\\r\\n  function exercise(uint256 _amount, uint256 _maxPaymentAmount, address _recipient) external returns (uint256);\\r\\n\\r\\n  function getDiscountedPrice(uint256 _amount) external view returns (uint256 amount);\\r\\n\\r\\n  function discount() external view returns (uint256);\\r\\n}\\r\\n\\r\\ncontract StrategyRetroIchi is StratManagerUpgradeable, DynamicFeeManager {\\r\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n\\r\\n  // Tokens used\\r\\n  address public native;\\r\\n  address public cash;\\r\\n  address public output;\\r\\n  address public want;\\r\\n  address public lpToken;\\r\\n  address public oRetro;\\r\\n  address public merklClaimer;\\r\\n\\r\\n  // Third party contracts\\r\\n  IUniV3Quoter public quoter;\\r\\n\\r\\n  address[] public rewards;\\r\\n\\r\\n  struct Flash {\\r\\n    address pool;\\r\\n    bytes outputToCash;\\r\\n    bytes cashToNative;\\r\\n    bool token0;\\r\\n    bool flashEntered;\\r\\n  }\\r\\n\\r\\n  Flash public flash;\\r\\n\\r\\n  bool public isFastQuote;\\r\\n  bool public flashQuote;\\r\\n  bool public harvestOnDeposit;\\r\\n  bool public spiritHarvest;\\r\\n  uint256 public lastHarvest;\\r\\n  uint256 public feeOnProfits;\\r\\n\\r\\n  bytes public outputToNativePath;\\r\\n  bytes public nativeToLpPath;\\r\\n  bytes public oRetroToRetroPath;\\r\\n\\r\\n  event StratHarvest(address indexed harvester, uint256 wantHarvested, uint256 tvl);\\r\\n  event Deposit(uint256 tvl);\\r\\n  event Withdraw(uint256 tvl);\\r\\n  event ChargedFees(uint256 callFees, uint256 beefyFees, uint256 strategistFees);\\r\\n\\r\\n  error NotPair();\\r\\n  error InvalidFlash();\\r\\n\\r\\n  function initialize(\\r\\n    address _want,\\r\\n    bytes calldata _outputToNativePath,\\r\\n    bytes calldata _nativeToLpPath,\\r\\n    Flash calldata _flash,\\r\\n    address[] memory _addresses\\r\\n  ) public virtual initializer {\\r\\n    __Ownable_init_unchained();\\r\\n    __Pausable_init_unchained();\\r\\n    __DynamicFeeManager_init();\\r\\n    __StratManager_init_unchained(_addresses[0], _addresses[1], _addresses[2], _addresses[3], _addresses[4]);\\r\\n    want = _want;\\r\\n    feeOnProfits = 200;\\r\\n\\r\\n    if (IIchiVault(want).allowToken0()) {\\r\\n      lpToken = ISolidlyPair(want).token0();\\r\\n    } else {\\r\\n      lpToken = ISolidlyPair(want).token1();\\r\\n    }\\r\\n\\r\\n    flash = _flash;\\r\\n    flash.flashEntered = false;\\r\\n    flashQuote = true;\\r\\n\\r\\n    uint24[] memory fee = new uint24[](1);\\r\\n    fee[0] = 10000;\\r\\n    oRetro = 0x3A29CAb2E124919d14a6F735b6033a3AaD2B260F;\\r\\n    native = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;\\r\\n    output = 0xBFA35599c7AEbb0dAcE9b5aa3ca5f2a79624D8Eb;\\r\\n    cash = 0x5D066D022EDE10eFa2717eD3D79f22F949F8C175;\\r\\n    merklClaimer = 0x3Ef3D8bA38EBe18DB133cEc108f4D14CE00Dd9Ae;\\r\\n    quoter = IUniV3Quoter(0xddc9Ef56c6bf83F7116Fad5Fbc41272B07ac70C1);\\r\\n    feeRecipient2 = 0x9304e0C089699d3883f112491fDB61F1c845b150;\\r\\n\\r\\n    setNativeToLp(_nativeToLpPath);\\r\\n    setOutputToNative(_outputToNativePath);\\r\\n\\r\\n    address[] memory path = new address[](2);\\r\\n    path[0] = oRetro;\\r\\n    path[1] = output;\\r\\n\\r\\n    oRetroToRetroPath = UniswapV3Utils.routeToPath(path, fee);\\r\\n\\r\\n    _giveAllowances();\\r\\n  }\\r\\n\\r\\n  function claim(address[] calldata _tokens, uint256[] calldata _amounts, bytes32[][] calldata _proofs) public {\\r\\n    address[] memory users = new address[](_tokens.length);\\r\\n\\r\\n    for(uint i = 0; i < _tokens.length; i++) {\\r\\n        users[i] = address(this);\\r\\n    }\\r\\n\\r\\n    IMerklClaimer(merklClaimer).claim(users, _tokens, _amounts, _proofs);\\r\\n  }\\r\\n\\r\\n  // puts the funds to work\\r\\n  function deposit() public whenNotPaused {\\r\\n    uint256 wantBal = IERC20Upgradeable(want).balanceOf(address(this));\\r\\n\\r\\n    if (wantBal > 0) {\\r\\n      emit Deposit(balanceOf());\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function withdraw(uint256 _amount) external {\\r\\n    require(msg.sender == vault, \\\"!vault\\\");\\r\\n\\r\\n    if (tx.origin != owner() && !paused()) {\\r\\n      uint256 withdrawalFeeAmount = (_amount * withdrawalFee) / WITHDRAWAL_MAX;\\r\\n      _amount = _amount - withdrawalFeeAmount;\\r\\n    }\\r\\n\\r\\n    IERC20Upgradeable(want).safeTransfer(vault, _amount);\\r\\n\\r\\n    emit Withdraw(balanceOf());\\r\\n  }\\r\\n\\r\\n  function beforeDeposit() external virtual override {\\r\\n    if (harvestOnDeposit) {\\r\\n      require(msg.sender == vault, \\\"!vault\\\");\\r\\n      _harvest();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function harvest(\\r\\n    address[] calldata _tokens,\\r\\n    uint256[] calldata _amounts,\\r\\n    bytes32[][] calldata _proofs\\r\\n  ) external {\\r\\n    claim(_tokens, _amounts, _proofs);\\r\\n    _harvest();\\r\\n  }\\r\\n\\r\\n  function harvest() external virtual {\\r\\n    _harvest();\\r\\n  }\\r\\n\\r\\n  function managerHarvest() external onlyManager {\\r\\n    _harvest();\\r\\n  }\\r\\n\\r\\n  // compounds earnings and charges performance fee\\r\\n  function _harvest() internal whenNotPaused virtual {\\r\\n    uint256 outputBal = IERC20Upgradeable(oRetro).balanceOf(address(this));\\r\\n    if (outputBal > 0) {\\r\\n      swapRewardsToNative();\\r\\n      chargeFees();\\r\\n      addLiquidity();\\r\\n      uint256 wantHarvested = balanceOfWant();\\r\\n      deposit();\\r\\n\\r\\n      lastHarvest = block.timestamp;\\r\\n      emit StratHarvest(msg.sender, wantHarvested, balanceOf());\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Charges performance fees.\\r\\n   */\\r\\n  function chargeFees() internal virtual {\\r\\n    uint256 generalFeeOnProfits = (IERC20Upgradeable(native).balanceOf(address(this)) * feeOnProfits) / 1000;\\r\\n\\r\\n    // Calculating the Fee to be distributed\\r\\n    uint256 feeAmount1 = (generalFeeOnProfits * fee1) / MAX_FEE;\\r\\n    uint256 feeAmount2 = (generalFeeOnProfits * fee2) / MAX_FEE;\\r\\n    uint256 strategistFeeAmount = (generalFeeOnProfits * strategistFee) / MAX_FEE;\\r\\n\\r\\n    // Transfer fees to recipients\\r\\n    if (feeAmount1 > 0) {\\r\\n      IERC20Upgradeable(native).safeTransfer(feeRecipient1, feeAmount1);\\r\\n    }\\r\\n    if (feeAmount2 > 0) {\\r\\n      IERC20Upgradeable(native).safeTransfer(feeRecipient2, feeAmount2);\\r\\n    }\\r\\n    if (strategistFeeAmount > 0) {\\r\\n      IERC20Upgradeable(native).safeTransfer(strategist, strategistFeeAmount);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function swapRewardsToNative() internal {\\r\\n    uint bal = IERC20Upgradeable(oRetro).balanceOf(address(this));\\r\\n    if (flashQuote) {\\r\\n      uint256 discount = 100 - IOToken(oRetro).discount();\\r\\n      uint expectedRetro = (bal * discount) / 100;\\r\\n      uint256 swappedRetro = quoter.quoteExactInput(oRetroToRetroPath, bal);\\r\\n\\r\\n      if (swappedRetro > expectedRetro) {\\r\\n        UniV3Actions.swapV3WithDeadline(dystRouter, oRetroToRetroPath, bal);\\r\\n        UniV3Actions.swapV3WithDeadline(\\r\\n          dystRouter,\\r\\n          outputToNativePath,\\r\\n          IERC20Upgradeable(output).balanceOf(address(this))\\r\\n        );\\r\\n      } else flashExercise(bal);\\r\\n    } else flashExercise(bal);\\r\\n  }\\r\\n\\r\\n  function flashExercise(uint256 _amount) internal {\\r\\n    uint256 amountNeeded = IOToken(oRetro).getDiscountedPrice(_amount);\\r\\n    uint256 token0Amt = flash.token0 ? amountNeeded : 0;\\r\\n    uint256 token1Amt = flash.token0 ? 0 : amountNeeded;\\r\\n    flash.flashEntered = true;\\r\\n    IUniV3Pool(flash.pool).flash(address(this), token0Amt, token1Amt, \\\"\\\");\\r\\n  }\\r\\n\\r\\n  function uniswapV3FlashCallback(uint256 _fee0, uint256 _fee1, bytes calldata) external {\\r\\n    if (msg.sender != flash.pool) revert NotPair();\\r\\n    if (!flash.flashEntered) revert InvalidFlash();\\r\\n\\r\\n    uint256 cashAmount = IERC20Upgradeable(cash).balanceOf(address(this));\\r\\n    uint256 oRetroAmt = IERC20Upgradeable(oRetro).balanceOf(address(this));\\r\\n    IOToken(oRetro).exercise(oRetroAmt, cashAmount, address(this));\\r\\n\\r\\n    UniV3Actions.swapV3WithDeadline(dystRouter, flash.outputToCash, IERC20Upgradeable(output).balanceOf(address(this)));\\r\\n\\r\\n    uint256 fee = flash.token0 ? _fee0 : _fee1;\\r\\n    uint256 pairDebt = cashAmount + fee;\\r\\n    IERC20Upgradeable(cash).transfer(flash.pool, pairDebt);\\r\\n    UniV3Actions.swapV3WithDeadline(dystRouter, flash.cashToNative, IERC20Upgradeable(cash).balanceOf(address(this)));\\r\\n    flash.flashEntered = false;\\r\\n  }\\r\\n\\r\\n  // Adds liquidity to AMM and gets more LP tokens.\\r\\n  function addLiquidity() internal virtual {\\r\\n    uint256 nativeBal = IERC20Upgradeable(native).balanceOf(address(this));\\r\\n\\r\\n    if (lpToken != native) {\\r\\n      UniV3Actions.swapV3WithDeadline(dystRouter, nativeToLpPath, nativeBal);\\r\\n    }\\r\\n\\r\\n    uint256 liquidityBal = IERC20Upgradeable(lpToken).balanceOf(address(this));\\r\\n\\r\\n    if (IIchiVault(want).allowToken0()) {\\r\\n      IIchiVault(want).deposit(liquidityBal, 0, address(this));\\r\\n    } else {\\r\\n      IIchiVault(want).deposit(0, liquidityBal, address(this));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  // calculate the total underlaying 'want' held by the strat.\\r\\n  function balanceOf() public view returns (uint256) {\\r\\n    return balanceOfWant() + balanceOfPool();\\r\\n  }\\r\\n\\r\\n  // it calculates how much 'want' this contract holds.\\r\\n  function balanceOfWant() public view returns (uint256) {\\r\\n    return IERC20Upgradeable(want).balanceOf(address(this));\\r\\n  }\\r\\n\\r\\n  // it calculates how much 'want' the strategy has working in the farm.\\r\\n  function balanceOfPool() public view returns (uint256) {\\r\\n    return 0;\\r\\n  }\\r\\n\\r\\n  // returns rewards unharvested\\r\\n  function rewardsAvailable() public view returns (uint256) {\\r\\n    return 0;\\r\\n  }\\r\\n\\r\\n  function setHarvestOnDeposit(bool _harvestOnDeposit) external onlyManager {\\r\\n    harvestOnDeposit = _harvestOnDeposit;\\r\\n\\r\\n    if (harvestOnDeposit) {\\r\\n      setWithdrawalFee(0);\\r\\n    } else {\\r\\n      setWithdrawalFee(10);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function setFastQuote(bool _isFastQuote) external onlyManager {\\r\\n    isFastQuote = _isFastQuote;\\r\\n  }\\r\\n\\r\\n  function setFlashQuote(bool _flashQuote) external onlyManager {\\r\\n    flashQuote = _flashQuote;\\r\\n  }\\r\\n\\r\\n  // called as part of strat migration. Sends all the available funds back to the vault.\\r\\n  function retireStrat() external {\\r\\n    require(msg.sender == vault, \\\"!vault\\\");\\r\\n\\r\\n    uint256 wantBal = IERC20Upgradeable(want).balanceOf(address(this));\\r\\n    IERC20Upgradeable(want).transfer(vault, wantBal);\\r\\n  }\\r\\n\\r\\n  // pauses deposits and withdraws all funds from third party systems.\\r\\n  function panic() public onlyManager {\\r\\n    pause();\\r\\n  }\\r\\n\\r\\n  function setMerklClaimer(address _merklClaimer) public onlyManager {\\r\\n    merklClaimer = _merklClaimer;\\r\\n  }\\r\\n\\r\\n  function pause() public onlyManager {\\r\\n    _pause();\\r\\n\\r\\n    _removeAllowances();\\r\\n  }\\r\\n\\r\\n  function unpause() public onlyManager {\\r\\n    _unpause();\\r\\n\\r\\n    _giveAllowances();\\r\\n\\r\\n    deposit();\\r\\n  }\\r\\n\\r\\n  function _giveAllowances() internal {\\r\\n    IERC20Upgradeable(output).approve(dystRouter, type(uint).max);\\r\\n    IERC20Upgradeable(oRetro).approve(dystRouter, type(uint).max);\\r\\n    IERC20Upgradeable(native).approve(dystRouter, type(uint).max);\\r\\n    IERC20Upgradeable(cash).approve(dystRouter, type(uint).max);\\r\\n    IERC20Upgradeable(cash).approve(oRetro, type(uint).max);\\r\\n    IERC20Upgradeable(lpToken).approve(want, 0);\\r\\n    IERC20Upgradeable(lpToken).approve(want, type(uint).max);\\r\\n  }\\r\\n\\r\\n  function _removeAllowances() internal {\\r\\n    IERC20Upgradeable(output).approve(dystRouter, 0);\\r\\n    IERC20Upgradeable(oRetro).approve(dystRouter, 0);\\r\\n    IERC20Upgradeable(native).approve(dystRouter, 0);\\r\\n    IERC20Upgradeable(cash).approve(dystRouter, 0);\\r\\n    IERC20Upgradeable(cash).approve(oRetro, 0);\\r\\n    IERC20Upgradeable(lpToken).approve(want, 0);\\r\\n  }\\r\\n\\r\\n  function setOutputToNative(bytes calldata _outputToNativePath) public onlyOwner {\\r\\n    if (_outputToNativePath.length > 0) {\\r\\n      address[] memory route = UniswapV3Utils.pathToRoute(_outputToNativePath);\\r\\n      require(route[0] == output, \\\"!output\\\");\\r\\n    }\\r\\n    outputToNativePath = _outputToNativePath;\\r\\n  }\\r\\n\\r\\n  function setNativeToLp(bytes calldata _nativeToLpPath) public onlyOwner {\\r\\n    if (_nativeToLpPath.length > 0) {\\r\\n      address[] memory route = UniswapV3Utils.pathToRoute(_nativeToLpPath);\\r\\n      require(route[0] == native, \\\"!native\\\");\\r\\n      require(route[route.length - 1] == lpToken, \\\"!lp\\\");\\r\\n    }\\r\\n    nativeToLpPath = _nativeToLpPath;\\r\\n  }\\r\\n\\r\\n  function outputToNative() external view returns (address[] memory) {\\r\\n    return UniswapV3Utils.pathToRoute(outputToNativePath);\\r\\n  }\\r\\n\\r\\n  function nativeToLp() external view returns (address[] memory) {\\r\\n    return UniswapV3Utils.pathToRoute(nativeToLpPath);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/strategies/utils/BytesLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\r\\n/*\\r\\n * @title Solidity Bytes Arrays Utils\\r\\n * @author Gon\u00e7alo S\u00e1 <goncalo.sa@consensys.net>\\r\\n *\\r\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\r\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\r\\n */\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nlibrary BytesLib {\\r\\n  function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\\r\\n    bytes memory tempBytes;\\r\\n\\r\\n    assembly {\\r\\n      // Get a location of some free memory and store it in tempBytes as\\r\\n      // Solidity does for memory variables.\\r\\n      tempBytes := mload(0x40)\\r\\n\\r\\n      // Store the length of the first bytes array at the beginning of\\r\\n      // the memory for tempBytes.\\r\\n      let length := mload(_preBytes)\\r\\n      mstore(tempBytes, length)\\r\\n\\r\\n      // Maintain a memory counter for the current write location in the\\r\\n      // temp bytes array by adding the 32 bytes for the array length to\\r\\n      // the starting location.\\r\\n      let mc := add(tempBytes, 0x20)\\r\\n      // Stop copying when the memory counter reaches the length of the\\r\\n      // first bytes array.\\r\\n      let end := add(mc, length)\\r\\n\\r\\n      for {\\r\\n        // Initialize a copy counter to the start of the _preBytes data,\\r\\n        // 32 bytes into its memory.\\r\\n        let cc := add(_preBytes, 0x20)\\r\\n      } lt(mc, end) {\\r\\n        // Increase both counters by 32 bytes each iteration.\\r\\n        mc := add(mc, 0x20)\\r\\n        cc := add(cc, 0x20)\\r\\n      } {\\r\\n        // Write the _preBytes data into the tempBytes memory 32 bytes\\r\\n        // at a time.\\r\\n        mstore(mc, mload(cc))\\r\\n      }\\r\\n\\r\\n      // Add the length of _postBytes to the current length of tempBytes\\r\\n      // and store it as the new length in the first 32 bytes of the\\r\\n      // tempBytes memory.\\r\\n      length := mload(_postBytes)\\r\\n      mstore(tempBytes, add(length, mload(tempBytes)))\\r\\n\\r\\n      // Move the memory counter back from a multiple of 0x20 to the\\r\\n      // actual end of the _preBytes data.\\r\\n      mc := end\\r\\n      // Stop copying when the memory counter reaches the new combined\\r\\n      // length of the arrays.\\r\\n      end := add(mc, length)\\r\\n\\r\\n      for {\\r\\n        let cc := add(_postBytes, 0x20)\\r\\n      } lt(mc, end) {\\r\\n        mc := add(mc, 0x20)\\r\\n        cc := add(cc, 0x20)\\r\\n      } {\\r\\n        mstore(mc, mload(cc))\\r\\n      }\\r\\n\\r\\n      // Update the free-memory pointer by padding our last write location\\r\\n      // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\r\\n      // next 32 byte block, then round down to the nearest multiple of\\r\\n      // 32. If the sum of the length of the two arrays is zero then add\\r\\n      // one before rounding down to leave a blank 32 bytes (the length block with 0).\\r\\n      mstore(\\r\\n        0x40,\\r\\n        and(\\r\\n          add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\r\\n          not(31) // Round down to the nearest 32 bytes.\\r\\n        )\\r\\n      )\\r\\n    }\\r\\n\\r\\n    return tempBytes;\\r\\n  }\\r\\n\\r\\n  function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\r\\n    assembly {\\r\\n      // Read the first 32 bytes of _preBytes storage, which is the length\\r\\n      // of the array. (We don't need to use the offset into the slot\\r\\n      // because arrays use the entire slot.)\\r\\n      let fslot := sload(_preBytes.slot)\\r\\n      // Arrays of 31 bytes or less have an even value in their slot,\\r\\n      // while longer arrays have an odd value. The actual length is\\r\\n      // the slot divided by two for odd values, and the lowest order\\r\\n      // byte divided by two for even values.\\r\\n      // If the slot is even, bitwise and the slot with 255 and divide by\\r\\n      // two to get the length. If the slot is odd, bitwise and the slot\\r\\n      // with -1 and divide by two.\\r\\n      let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\r\\n      let mlength := mload(_postBytes)\\r\\n      let newlength := add(slength, mlength)\\r\\n      // slength can contain both the length and contents of the array\\r\\n      // if length < 32 bytes so let's prepare for that\\r\\n      // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\r\\n      switch add(lt(slength, 32), lt(newlength, 32))\\r\\n      case 2 {\\r\\n        // Since the new array still fits in the slot, we just need to\\r\\n        // update the contents of the slot.\\r\\n        // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\r\\n        sstore(\\r\\n          _preBytes.slot,\\r\\n          // all the modifications to the slot are inside this\\r\\n          // next block\\r\\n          add(\\r\\n            // we can just add to the slot contents because the\\r\\n            // bytes we want to change are the LSBs\\r\\n            fslot,\\r\\n            add(\\r\\n              mul(\\r\\n                div(\\r\\n                  // load the bytes from memory\\r\\n                  mload(add(_postBytes, 0x20)),\\r\\n                  // zero all bytes to the right\\r\\n                  exp(0x100, sub(32, mlength))\\r\\n                ),\\r\\n                // and now shift left the number of bytes to\\r\\n                // leave space for the length in the slot\\r\\n                exp(0x100, sub(32, newlength))\\r\\n              ),\\r\\n              // increase length by the double of the memory\\r\\n              // bytes length\\r\\n              mul(mlength, 2)\\r\\n            )\\r\\n          )\\r\\n        )\\r\\n      }\\r\\n      case 1 {\\r\\n        // The stored value fits in the slot, but the combined value\\r\\n        // will exceed it.\\r\\n        // get the keccak hash to get the contents of the array\\r\\n        mstore(0x0, _preBytes.slot)\\r\\n        let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\r\\n\\r\\n        // save new length\\r\\n        sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\r\\n\\r\\n        // The contents of the _postBytes array start 32 bytes into\\r\\n        // the structure. Our first read should obtain the `submod`\\r\\n        // bytes that can fit into the unused space in the last word\\r\\n        // of the stored array. To get this, we read 32 bytes starting\\r\\n        // from `submod`, so the data we read overlaps with the array\\r\\n        // contents by `submod` bytes. Masking the lowest-order\\r\\n        // `submod` bytes allows us to add that value directly to the\\r\\n        // stored value.\\r\\n\\r\\n        let submod := sub(32, slength)\\r\\n        let mc := add(_postBytes, submod)\\r\\n        let end := add(_postBytes, mlength)\\r\\n        let mask := sub(exp(0x100, submod), 1)\\r\\n\\r\\n        sstore(\\r\\n          sc,\\r\\n          add(and(fslot, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00), and(mload(mc), mask))\\r\\n        )\\r\\n\\r\\n        for {\\r\\n          mc := add(mc, 0x20)\\r\\n          sc := add(sc, 1)\\r\\n        } lt(mc, end) {\\r\\n          sc := add(sc, 1)\\r\\n          mc := add(mc, 0x20)\\r\\n        } {\\r\\n          sstore(sc, mload(mc))\\r\\n        }\\r\\n\\r\\n        mask := exp(0x100, sub(mc, end))\\r\\n\\r\\n        sstore(sc, mul(div(mload(mc), mask), mask))\\r\\n      }\\r\\n      default {\\r\\n        // get the keccak hash to get the contents of the array\\r\\n        mstore(0x0, _preBytes.slot)\\r\\n        // Start copying to the last used word of the stored array.\\r\\n        let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\r\\n\\r\\n        // save new length\\r\\n        sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\r\\n\\r\\n        // Copy over the first `submod` bytes of the new data as in\\r\\n        // case 1 above.\\r\\n        let slengthmod := mod(slength, 32)\\r\\n        let mlengthmod := mod(mlength, 32)\\r\\n        let submod := sub(32, slengthmod)\\r\\n        let mc := add(_postBytes, submod)\\r\\n        let end := add(_postBytes, mlength)\\r\\n        let mask := sub(exp(0x100, submod), 1)\\r\\n\\r\\n        sstore(sc, add(sload(sc), and(mload(mc), mask)))\\r\\n\\r\\n        for {\\r\\n          sc := add(sc, 1)\\r\\n          mc := add(mc, 0x20)\\r\\n        } lt(mc, end) {\\r\\n          sc := add(sc, 1)\\r\\n          mc := add(mc, 0x20)\\r\\n        } {\\r\\n          sstore(sc, mload(mc))\\r\\n        }\\r\\n\\r\\n        mask := exp(0x100, sub(mc, end))\\r\\n\\r\\n        sstore(sc, mul(div(mload(mc), mask), mask))\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function slice(bytes memory _bytes, uint256 _start, uint256 _length) internal pure returns (bytes memory) {\\r\\n    require(_length + 31 >= _length, \\\"slice_overflow\\\");\\r\\n    require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\r\\n\\r\\n    bytes memory tempBytes;\\r\\n\\r\\n    assembly {\\r\\n      switch iszero(_length)\\r\\n      case 0 {\\r\\n        // Get a location of some free memory and store it in tempBytes as\\r\\n        // Solidity does for memory variables.\\r\\n        tempBytes := mload(0x40)\\r\\n\\r\\n        // The first word of the slice result is potentially a partial\\r\\n        // word read from the original array. To read it, we calculate\\r\\n        // the length of that partial word and start copying that many\\r\\n        // bytes into the array. The first word we copy will start with\\r\\n        // data we don't care about, but the last `lengthmod` bytes will\\r\\n        // land at the beginning of the contents of the new array. When\\r\\n        // we're done copying, we overwrite the full first word with\\r\\n        // the actual length of the slice.\\r\\n        let lengthmod := and(_length, 31)\\r\\n\\r\\n        // The multiplication in the next line is necessary\\r\\n        // because when slicing multiples of 32 bytes (lengthmod == 0)\\r\\n        // the following copy loop was copying the origin's length\\r\\n        // and then ending prematurely not copying everything it should.\\r\\n        let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\r\\n        let end := add(mc, _length)\\r\\n\\r\\n        for {\\r\\n          // The multiplication in the next line has the same exact purpose\\r\\n          // as the one above.\\r\\n          let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\r\\n        } lt(mc, end) {\\r\\n          mc := add(mc, 0x20)\\r\\n          cc := add(cc, 0x20)\\r\\n        } {\\r\\n          mstore(mc, mload(cc))\\r\\n        }\\r\\n\\r\\n        mstore(tempBytes, _length)\\r\\n\\r\\n        //update free-memory pointer\\r\\n        //allocating the array padded to 32 bytes like the compiler does now\\r\\n        mstore(0x40, and(add(mc, 31), not(31)))\\r\\n      }\\r\\n      //if we want a zero-length slice let's just return a zero-length array\\r\\n      default {\\r\\n        tempBytes := mload(0x40)\\r\\n        //zero out the 32 bytes slice we are about to return\\r\\n        //we need to do it because Solidity does not garbage collect\\r\\n        mstore(tempBytes, 0)\\r\\n\\r\\n        mstore(0x40, add(tempBytes, 0x20))\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return tempBytes;\\r\\n  }\\r\\n\\r\\n  function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\r\\n    require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\r\\n    address tempAddress;\\r\\n\\r\\n    assembly {\\r\\n      tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\r\\n    }\\r\\n\\r\\n    return tempAddress;\\r\\n  }\\r\\n\\r\\n  function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\r\\n    require(_bytes.length >= _start + 1, \\\"toUint8_outOfBounds\\\");\\r\\n    uint8 tempUint;\\r\\n\\r\\n    assembly {\\r\\n      tempUint := mload(add(add(_bytes, 0x1), _start))\\r\\n    }\\r\\n\\r\\n    return tempUint;\\r\\n  }\\r\\n\\r\\n  function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\r\\n    require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\r\\n    uint16 tempUint;\\r\\n\\r\\n    assembly {\\r\\n      tempUint := mload(add(add(_bytes, 0x2), _start))\\r\\n    }\\r\\n\\r\\n    return tempUint;\\r\\n  }\\r\\n\\r\\n  function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\\r\\n    require(_start + 3 >= _start, \\\"toUint24_overflow\\\");\\r\\n    require(_bytes.length >= _start + 3, \\\"toUint24_outOfBounds\\\");\\r\\n    uint24 tempUint;\\r\\n\\r\\n    assembly {\\r\\n      tempUint := mload(add(add(_bytes, 0x3), _start))\\r\\n    }\\r\\n\\r\\n    return tempUint;\\r\\n  }\\r\\n\\r\\n  function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\r\\n    require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\r\\n    uint32 tempUint;\\r\\n\\r\\n    assembly {\\r\\n      tempUint := mload(add(add(_bytes, 0x4), _start))\\r\\n    }\\r\\n\\r\\n    return tempUint;\\r\\n  }\\r\\n\\r\\n  function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\r\\n    require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\r\\n    uint64 tempUint;\\r\\n\\r\\n    assembly {\\r\\n      tempUint := mload(add(add(_bytes, 0x8), _start))\\r\\n    }\\r\\n\\r\\n    return tempUint;\\r\\n  }\\r\\n\\r\\n  function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\r\\n    require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\r\\n    uint96 tempUint;\\r\\n\\r\\n    assembly {\\r\\n      tempUint := mload(add(add(_bytes, 0xc), _start))\\r\\n    }\\r\\n\\r\\n    return tempUint;\\r\\n  }\\r\\n\\r\\n  function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\r\\n    require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\r\\n    uint128 tempUint;\\r\\n\\r\\n    assembly {\\r\\n      tempUint := mload(add(add(_bytes, 0x10), _start))\\r\\n    }\\r\\n\\r\\n    return tempUint;\\r\\n  }\\r\\n\\r\\n  function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\r\\n    require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\r\\n    uint256 tempUint;\\r\\n\\r\\n    assembly {\\r\\n      tempUint := mload(add(add(_bytes, 0x20), _start))\\r\\n    }\\r\\n\\r\\n    return tempUint;\\r\\n  }\\r\\n\\r\\n  function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\r\\n    require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\r\\n    bytes32 tempBytes32;\\r\\n\\r\\n    assembly {\\r\\n      tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\r\\n    }\\r\\n\\r\\n    return tempBytes32;\\r\\n  }\\r\\n\\r\\n  function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\r\\n    bool success = true;\\r\\n\\r\\n    assembly {\\r\\n      let length := mload(_preBytes)\\r\\n\\r\\n      // if lengths don't match the arrays are not equal\\r\\n      switch eq(length, mload(_postBytes))\\r\\n      case 1 {\\r\\n        // cb is a circuit breaker in the for loop since there's\\r\\n        //  no said feature for inline assembly loops\\r\\n        // cb = 1 - don't breaker\\r\\n        // cb = 0 - break\\r\\n        let cb := 1\\r\\n\\r\\n        let mc := add(_preBytes, 0x20)\\r\\n        let end := add(mc, length)\\r\\n\\r\\n        for {\\r\\n          let cc := add(_postBytes, 0x20)\\r\\n          // the next line is the loop condition:\\r\\n          // while(uint256(mc < end) + cb == 2)\\r\\n        } eq(add(lt(mc, end), cb), 2) {\\r\\n          mc := add(mc, 0x20)\\r\\n          cc := add(cc, 0x20)\\r\\n        } {\\r\\n          // if any of these checks fails then arrays are not equal\\r\\n          if iszero(eq(mload(mc), mload(cc))) {\\r\\n            // unsuccess:\\r\\n            success := 0\\r\\n            cb := 0\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n      default {\\r\\n        // unsuccess:\\r\\n        success := 0\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return success;\\r\\n  }\\r\\n\\r\\n  function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\\r\\n    bool success = true;\\r\\n\\r\\n    assembly {\\r\\n      // we know _preBytes_offset is 0\\r\\n      let fslot := sload(_preBytes.slot)\\r\\n      // Decode the length of the stored array like in concatStorage().\\r\\n      let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\r\\n      let mlength := mload(_postBytes)\\r\\n\\r\\n      // if lengths don't match the arrays are not equal\\r\\n      switch eq(slength, mlength)\\r\\n      case 1 {\\r\\n        // slength can contain both the length and contents of the array\\r\\n        // if length < 32 bytes so let's prepare for that\\r\\n        // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\r\\n        if iszero(iszero(slength)) {\\r\\n          switch lt(slength, 32)\\r\\n          case 1 {\\r\\n            // blank the last byte which is the length\\r\\n            fslot := mul(div(fslot, 0x100), 0x100)\\r\\n\\r\\n            if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\r\\n              // unsuccess:\\r\\n              success := 0\\r\\n            }\\r\\n          }\\r\\n          default {\\r\\n            // cb is a circuit breaker in the for loop since there's\\r\\n            //  no said feature for inline assembly loops\\r\\n            // cb = 1 - don't breaker\\r\\n            // cb = 0 - break\\r\\n            let cb := 1\\r\\n\\r\\n            // get the keccak hash to get the contents of the array\\r\\n            mstore(0x0, _preBytes.slot)\\r\\n            let sc := keccak256(0x0, 0x20)\\r\\n\\r\\n            let mc := add(_postBytes, 0x20)\\r\\n            let end := add(mc, mlength)\\r\\n\\r\\n            // the next line is the loop condition:\\r\\n            // while(uint256(mc < end) + cb == 2)\\r\\n            for {\\r\\n\\r\\n            } eq(add(lt(mc, end), cb), 2) {\\r\\n              sc := add(sc, 1)\\r\\n              mc := add(mc, 0x20)\\r\\n            } {\\r\\n              if iszero(eq(sload(sc), mload(mc))) {\\r\\n                // unsuccess:\\r\\n                success := 0\\r\\n                cb := 0\\r\\n              }\\r\\n            }\\r\\n          }\\r\\n        }\\r\\n      }\\r\\n      default {\\r\\n        // unsuccess:\\r\\n        success := 0\\r\\n      }\\r\\n    }\\r\\n\\r\\n    return success;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/strategies/utils/Path.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.6.0;\\r\\n\\r\\nimport \\\"./BytesLib.sol\\\";\\r\\n\\r\\n/// @title Functions for manipulating path data for multihop swaps\\r\\nlibrary Path {\\r\\n  using BytesLib for bytes;\\r\\n\\r\\n  /// @dev The length of the bytes encoded address\\r\\n  uint256 private constant ADDR_SIZE = 20;\\r\\n  /// @dev The length of the bytes encoded fee\\r\\n  uint256 private constant FEE_SIZE = 3;\\r\\n\\r\\n  /// @dev The offset of a single token address and pool fee\\r\\n  uint256 private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;\\r\\n  /// @dev The offset of an encoded pool key\\r\\n  uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\\r\\n  /// @dev The minimum length of an encoding that contains 2 or more pools\\r\\n  uint256 private constant MULTIPLE_POOLS_MIN_LENGTH = POP_OFFSET + NEXT_OFFSET;\\r\\n\\r\\n  /// @notice Returns true iff the path contains two or more pools\\r\\n  /// @param path The encoded swap path\\r\\n  /// @return True if path contains two or more pools, otherwise false\\r\\n  function hasMultiplePools(bytes memory path) internal pure returns (bool) {\\r\\n    return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\\r\\n  }\\r\\n\\r\\n  /// @notice Returns the number of pools in the path\\r\\n  /// @param path The encoded swap path\\r\\n  /// @return The number of pools in the path\\r\\n  function numPools(bytes memory path) internal pure returns (uint256) {\\r\\n    // Ignore the first token address. From then on every fee and token offset indicates a pool.\\r\\n    return ((path.length - ADDR_SIZE) / NEXT_OFFSET);\\r\\n  }\\r\\n\\r\\n  /// @notice Decodes the first pool in path\\r\\n  /// @param path The bytes encoded swap path\\r\\n  /// @return tokenA The first token of the given pool\\r\\n  /// @return tokenB The second token of the given pool\\r\\n  /// @return fee The fee level of the pool\\r\\n  function decodeFirstPool(bytes memory path) internal pure returns (address tokenA, address tokenB, uint24 fee) {\\r\\n    tokenA = path.toAddress(0);\\r\\n    fee = path.toUint24(ADDR_SIZE);\\r\\n    tokenB = path.toAddress(NEXT_OFFSET);\\r\\n  }\\r\\n\\r\\n  /// @notice Gets the segment corresponding to the first pool in the path\\r\\n  /// @param path The bytes encoded swap path\\r\\n  /// @return The segment containing all data necessary to target the first pool in the path\\r\\n  function getFirstPool(bytes memory path) internal pure returns (bytes memory) {\\r\\n    return path.slice(0, POP_OFFSET);\\r\\n  }\\r\\n\\r\\n  /// @notice Skips a token + fee element from the buffer and returns the remainder\\r\\n  /// @param path The swap path\\r\\n  /// @return The remaining token + fee elements in the path\\r\\n  function skipToken(bytes memory path) internal pure returns (bytes memory) {\\r\\n    return path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/strategies/utils/UniswapV3Utils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Path.sol\\\";\\r\\nimport \\\"../interfaces/common/IUniswapRouterV3WithDeadline.sol\\\";\\r\\n\\r\\nlibrary UniswapV3Utils {\\r\\n  using Path for bytes;\\r\\n\\r\\n  // Swap along an encoded path using known amountIn\\r\\n  function swap(address _router, bytes memory _path, uint256 _amountIn) internal returns (uint256 amountOut) {\\r\\n    IUniswapRouterV3WithDeadline.ExactInputParams memory params = IUniswapRouterV3WithDeadline.ExactInputParams({\\r\\n      path: _path,\\r\\n      recipient: address(this),\\r\\n      deadline: block.timestamp,\\r\\n      amountIn: _amountIn,\\r\\n      amountOutMinimum: 0\\r\\n    });\\r\\n    return IUniswapRouterV3WithDeadline(_router).exactInput(params);\\r\\n  }\\r\\n\\r\\n  // Swap along a token route using known fees and amountIn\\r\\n  function swap(\\r\\n    address _router,\\r\\n    address[] memory _route,\\r\\n    uint24[] memory _fee,\\r\\n    uint256 _amountIn\\r\\n  ) internal returns (uint256 amountOut) {\\r\\n    return swap(_router, routeToPath(_route, _fee), _amountIn);\\r\\n  }\\r\\n\\r\\n  // Convert encoded path to token route\\r\\n  function pathToRoute(bytes memory _path) internal pure returns (address[] memory) {\\r\\n    uint256 numPools = _path.numPools();\\r\\n    address[] memory route = new address[](numPools + 1);\\r\\n    for (uint256 i; i < numPools; i++) {\\r\\n      (address tokenA, address tokenB, ) = _path.decodeFirstPool();\\r\\n      route[i] = tokenA;\\r\\n      route[i + 1] = tokenB;\\r\\n      _path = _path.skipToken();\\r\\n    }\\r\\n    return route;\\r\\n  }\\r\\n\\r\\n  // Convert token route to encoded path\\r\\n  // uint24 type for fees so path is packed tightly\\r\\n  function routeToPath(address[] memory _route, uint24[] memory _fee) internal pure returns (bytes memory path) {\\r\\n    path = abi.encodePacked(_route[0]);\\r\\n    uint256 feeLength = _fee.length;\\r\\n    for (uint256 i = 0; i < feeLength; i++) {\\r\\n      path = abi.encodePacked(path, _fee[i], _route[i + 1]);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/strategies/utils/UniV3Actions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"../interfaces/common/IKyberElastic.sol\\\";\\r\\nimport \\\"../interfaces/common/IUniswapRouterV3.sol\\\";\\r\\nimport \\\"../interfaces/common/IUniswapRouterV3WithDeadline.sol\\\";\\r\\n\\r\\nlibrary UniV3Actions {\\r\\n  // kyber V3 swap\\r\\n  function kyberSwap(address _router, bytes memory _path, uint256 _amount) internal returns (uint256 amountOut) {\\r\\n    IKyberElastic.ExactInputParams memory swapParams = IKyberElastic.ExactInputParams({\\r\\n      path: _path,\\r\\n      recipient: address(this),\\r\\n      deadline: block.timestamp,\\r\\n      amountIn: _amount,\\r\\n      minAmountOut: 0\\r\\n    });\\r\\n    return IKyberElastic(_router).swapExactInput(swapParams);\\r\\n  }\\r\\n\\r\\n  // Uniswap V3 swap\\r\\n  function swapV3(address _router, bytes memory _path, uint256 _amount) internal returns (uint256 amountOut) {\\r\\n    IUniswapRouterV3.ExactInputParams memory swapParams = IUniswapRouterV3.ExactInputParams({\\r\\n      path: _path,\\r\\n      recipient: address(this),\\r\\n      amountIn: _amount,\\r\\n      amountOutMinimum: 0\\r\\n    });\\r\\n    return IUniswapRouterV3(_router).exactInput(swapParams);\\r\\n  }\\r\\n\\r\\n  // Uniswap V3 swap with deadline\\r\\n  function swapV3WithDeadline(\\r\\n    address _router,\\r\\n    bytes memory _path,\\r\\n    uint256 _amount\\r\\n  ) internal returns (uint256 amountOut) {\\r\\n    IUniswapRouterV3WithDeadline.ExactInputParams memory swapParams = IUniswapRouterV3WithDeadline.ExactInputParams({\\r\\n      path: _path,\\r\\n      recipient: address(this),\\r\\n      deadline: block.timestamp,\\r\\n      amountIn: _amount,\\r\\n      amountOutMinimum: 0\\r\\n    });\\r\\n    return IUniswapRouterV3WithDeadline(_router).exactInput(swapParams);\\r\\n  }\\r\\n\\r\\n  // Uniswap V3 swap with deadline\\r\\n  function swapV3WithDeadline(\\r\\n    address _router,\\r\\n    bytes memory _path,\\r\\n    uint256 _amount,\\r\\n    address _to\\r\\n  ) internal returns (uint256 amountOut) {\\r\\n    IUniswapRouterV3WithDeadline.ExactInputParams memory swapParams = IUniswapRouterV3WithDeadline.ExactInputParams({\\r\\n      path: _path,\\r\\n      recipient: _to,\\r\\n      deadline: block.timestamp,\\r\\n      amountIn: _amount,\\r\\n      amountOutMinimum: 0\\r\\n    });\\r\\n    return IUniswapRouterV3WithDeadline(_router).exactInput(swapParams);\\r\\n  }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"InvalidFlash\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPair\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"callFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beefyFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strategistFees\",\"type\":\"uint256\"}],\"name\":\"ChargedFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tvl\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"harvester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wantHarvested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tvl\",\"type\":\"uint256\"}],\"name\":\"StratHarvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tvl\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_CALL_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_FEE_CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beforeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cash\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"_proofs\",\"type\":\"bytes32[][]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dystRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeOnProfits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flash\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"outputToCash\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"cashToNative\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"token0\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"flashEntered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashQuote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"_proofs\",\"type\":\"bytes32[][]\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestOnDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_want\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_outputToNativePath\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_nativeToLpPath\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"outputToCash\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"cashToNative\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"token0\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"flashEntered\",\"type\":\"bool\"}],\"internalType\":\"struct StrategyRetroIchi.Flash\",\"name\":\"_flash\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFastQuote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastHarvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managerHarvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merklClaimer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"native\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeToLp\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeToLpPath\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oRetro\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oRetroToRetroPath\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"output\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outputToNative\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outputToNativePath\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"panic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoter\",\"outputs\":[{\"internalType\":\"contract IUniV3Quoter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retireStrat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dystRouter\",\"type\":\"address\"}],\"name\":\"setDystRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isFastQuote\",\"type\":\"bool\"}],\"name\":\"setFastQuote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_callFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_strategistFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee2\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient2\",\"type\":\"address\"}],\"name\":\"setFeeRecipient2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flashQuote\",\"type\":\"bool\"}],\"name\":\"setFlashQuote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_harvestOnDeposit\",\"type\":\"bool\"}],\"name\":\"setHarvestOnDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_merklClaimer\",\"type\":\"address\"}],\"name\":\"setMerklClaimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_nativeToLpPath\",\"type\":\"bytes\"}],\"name\":\"setNativeToLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_outputToNativePath\",\"type\":\"bytes\"}],\"name\":\"setOutputToNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spiritHarvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategistFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"uniswapV3FlashCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StrategyRetroIchi", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}