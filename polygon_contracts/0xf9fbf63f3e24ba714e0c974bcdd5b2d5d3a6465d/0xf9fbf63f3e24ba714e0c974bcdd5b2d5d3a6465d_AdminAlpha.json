{"SourceCode": "// File: contracts_ETH/main/libraries/Math.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a / b + (a % b == 0 ? 0 : 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the absolute unsigned value of a signed value.\r\n     */\r\n    function abs(int256 n) internal pure returns (uint256) {\r\n        unchecked {\r\n            // must be unchecked in order to support `n = type(int256).min`\r\n            return uint256(n >= 0 ? n : -n);\r\n        }\r\n    }\r\n}\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: contracts_ETH/main/libraries/SafeERC20.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\nlibrary SafeERC20 {\r\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(\r\n            abi.encodeWithSelector(0x95d89b41)\r\n        );\r\n        return success && data.length > 0 ? abi.decode(data, (string)) : \"???\";\r\n    }\r\n\r\n    function safeName(IERC20 token) internal view returns (string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(\r\n            abi.encodeWithSelector(0x06fdde03)\r\n        );\r\n        return success && data.length > 0 ? abi.decode(data, (string)) : \"???\";\r\n    }\r\n\r\n    function safeDecimals(IERC20 token) public view returns (uint8) {\r\n        (bool success, bytes memory data) = address(token).staticcall(\r\n            abi.encodeWithSelector(0x313ce567)\r\n        );\r\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\r\n    }\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory data) = address(token).call(\r\n            abi.encodeWithSelector(0xa9059cbb, to, amount)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"SafeERC20: Transfer failed\"\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory data) = address(token).call(\r\n            abi.encodeWithSelector(0x23b872dd, from, to, amount)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"SafeERC20: TransferFrom failed\"\r\n        );\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts_ETH/main/Token.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\n/** \r\n* @author Formation.Fi.\r\n* @notice  A common Implementation for tokens ALPHA, BETA and GAMMA.\r\n*/\r\n\r\ncontract Token is ERC20, Ownable {\r\n    struct Deposit{\r\n        uint256 amount;\r\n        uint256 time;\r\n    }\r\n    address public proxyInvestement;\r\n    address private proxyAdmin;\r\n\r\n    mapping(address => Deposit[]) public depositPerAddress;\r\n    mapping(address => bool) public  whitelist;\r\n    event SetProxyInvestement(address  _address);\r\n    constructor(string memory _name, string memory _symbol) \r\n    ERC20(_name,  _symbol) {\r\n    }\r\n\r\n    modifier onlyProxy() {\r\n        require(\r\n            (proxyInvestement != address(0)) && (proxyAdmin != address(0)),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        require(\r\n            (msg.sender == proxyInvestement) || (msg.sender == proxyAdmin),\r\n             \"Formation.Fi: not the proxy\"\r\n        );\r\n        _;\r\n    }\r\n    modifier onlyProxyInvestement() {\r\n        require(proxyInvestement != address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        require(msg.sender == proxyInvestement,\r\n             \"Formation.Fi: not the proxy\"\r\n        );\r\n        _;\r\n    }\r\n\r\n     /**\r\n     * @dev Update the proxyInvestement.\r\n     * @param _proxyInvestement.\r\n     * @notice Emits a {SetProxyInvestement} event with `_proxyInvestement`.\r\n     */\r\n    function setProxyInvestement(address _proxyInvestement) external onlyOwner {\r\n        require(\r\n            _proxyInvestement!= address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n         proxyInvestement = _proxyInvestement;\r\n\r\n        emit SetProxyInvestement( _proxyInvestement);\r\n\r\n    } \r\n\r\n    /**\r\n     * @dev Add a contract address to the whitelist\r\n     * @param _contract The address of the contract.\r\n     */\r\n    function addToWhitelist(address _contract) external onlyOwner {\r\n        require(\r\n            _contract!= address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        whitelist[_contract] = true;\r\n    } \r\n\r\n    /**\r\n     * @dev Remove a contract address from the whitelist\r\n     * @param _contract The address of the contract.\r\n     */\r\n    function removeFromWhitelist(address _contract) external onlyOwner {\r\n         require(\r\n            whitelist[_contract] == true,\r\n            \"Formation.Fi: no whitelist\"\r\n        );\r\n        require(\r\n            _contract!= address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        whitelist[_contract] = false;\r\n    } \r\n\r\n    /**\r\n     * @dev Update the proxyAdmin.\r\n     * @param _proxyAdmin.\r\n     */\r\n    function setAdmin(address _proxyAdmin) external onlyOwner {\r\n        require(\r\n            _proxyAdmin!= address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n        \r\n         proxyAdmin = _proxyAdmin;\r\n    } \r\n\r\n\r\n    \r\n    /**\r\n     * @dev add user's deposit.\r\n     * @param _account The user's address.\r\n     * @param _amount The user's deposit amount.\r\n     * @param _time The deposit time.\r\n     */\r\n    function addDeposit(address _account, uint256 _amount, uint256 _time) \r\n        external onlyProxyInvestement {\r\n        require(\r\n            _account!= address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        require(\r\n            _amount!= 0,\r\n            \"Formation.Fi: zero amount\"\r\n        );\r\n\r\n        require(\r\n            _time!= 0,\r\n            \"Formation.Fi: zero time\"\r\n        );\r\n        Deposit memory _deposit = Deposit(_amount, _time); \r\n        depositPerAddress[_account].push(_deposit);\r\n    } \r\n\r\n     /**\r\n     * @dev mint the token product for the user.\r\n     * @notice To receive the token product, the user has to deposit \r\n     * the required StableCoin in this product. \r\n     * @param _account The user's address.\r\n     * @param _amount The amount to be minted.\r\n     */\r\n    function mint(address _account, uint256 _amount) external onlyProxy {\r\n        require(\r\n          _account!= address(0),\r\n           \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        require(\r\n            _amount!= 0,\r\n            \"Formation.Fi: zero amount\"\r\n        );\r\n\r\n       _mint(_account,  _amount);\r\n   }\r\n\r\n    /**\r\n     * @dev burn the token product of the user.\r\n     * @notice When the user withdraws his Stablecoins, his tokens \r\n     * product are burned. \r\n     * @param _account The user's address.\r\n     * @param _amount The amount to be burned.\r\n     */\r\n    function burn(address _account, uint256 _amount) external onlyProxy {\r\n        require(\r\n            _account!= address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n         require(\r\n            _amount!= 0,\r\n            \"Formation.Fi: zero amount\"\r\n        );\r\n\r\n        _burn( _account, _amount);\r\n    }\r\n    \r\n     /**\r\n     * @dev Verify the lock up condition for a user's withdrawal request.\r\n     * @param _account The user's address.\r\n     * @param _amount The amount to be withdrawn.\r\n     * @param _period The lock up period.\r\n     * @return _success  is true if the lock up condition is satisfied.\r\n     */\r\n    function checklWithdrawalRequest(address _account, uint256 _amount, uint256 _period) \r\n        external view returns (bool _success){\r\n        require(\r\n            _account!= address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        require(\r\n           _amount!= 0,\r\n            \"Formation.Fi: zero amount\"\r\n        );\r\n\r\n        Deposit[] memory _deposit = depositPerAddress[_account];\r\n        uint256 _amountTotal = 0;\r\n        for (uint256 i = 0; i < _deposit.length; i++) {\r\n             require ((block.timestamp - _deposit[i].time) >= _period, \r\n            \"Formation.Fi:  position locked\");\r\n            if (_amount<= (_amountTotal + _deposit[i].amount)){\r\n                break; \r\n            }\r\n            _amountTotal = _amountTotal + _deposit[i].amount;\r\n        }\r\n        _success= true;\r\n    }\r\n\r\n\r\n     /**\r\n     * @dev update the user's token data.\r\n     * @notice this function is called after each desposit request \r\n     * validation by the manager.\r\n     * @param _account The user's address.\r\n     * @param _amount The deposit amount validated by the manager.\r\n     */\r\n    function updateTokenData( address _account,  uint256 _amount) \r\n        external onlyProxyInvestement {\r\n        _updateTokenData(_account,  _amount);\r\n    }\r\n\r\n    function _updateTokenData( address _account,  uint256 _amount) internal {\r\n        require(\r\n            _account!= address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        require(\r\n            _amount!= 0,\r\n            \"Formation.Fi: zero amount\"\r\n        );\r\n\r\n        Deposit[] memory _deposit = depositPerAddress[_account];\r\n        uint256 _amountlocal = 0;\r\n        uint256 _amountTotal = 0;\r\n        uint256 _newAmount;\r\n        uint256 k =0;\r\n        for (uint256 i = 0; i < _deposit.length; i++) {\r\n            _amountlocal  = Math.min(_deposit[i].amount, _amount -  _amountTotal);\r\n            _amountTotal = _amountTotal + _amountlocal;\r\n            _newAmount = _deposit[i].amount - _amountlocal;\r\n            depositPerAddress[_account][k].amount = _newAmount;\r\n            if (_newAmount == 0){\r\n               _deleteTokenData(_account, k);\r\n            }\r\n            else {\r\n                k = k+1;\r\n            }\r\n            if (_amountTotal == _amount){\r\n               break; \r\n            }\r\n        }\r\n    }\r\n    \r\n     /**\r\n     * @dev delete the user's token data.\r\n     * @notice This function is called when the user's withdrawal request is  \r\n     * validated by the manager.\r\n     * @param _account The user's address.\r\n     * @param _index The index of the user in 'amountDepositPerAddress'.\r\n     */\r\n    function _deleteTokenData(address _account, uint256 _index) internal {\r\n        require(\r\n            _account!= address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n        uint256 _size = depositPerAddress[_account].length - 1;\r\n        \r\n        require( _index <= _size,\r\n            \"Formation.Fi: index is out\"\r\n        );\r\n        for (uint256 i = _index; i< _size; i++){\r\n            depositPerAddress[ _account][i] = depositPerAddress[ _account][i+1];\r\n        }\r\n        depositPerAddress[ _account].pop();   \r\n    }\r\n   \r\n     /**\r\n     * @dev update the token data of both the sender and the receiver \r\n       when the product token is transferred.\r\n     * @param from The sender's address.\r\n     * @param to The receiver's address.\r\n     * @param amount The transferred amount.\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n      ) internal virtual override{\r\n      \r\n       if ((to != address(0)) && (to != proxyInvestement) \r\n       && (to != proxyAdmin) && (from != address(0)) && (!whitelist[to])){\r\n          _updateTokenData(from, amount);\r\n          Deposit memory _deposit = Deposit(amount, block.timestamp);\r\n          depositPerAddress[to].push(_deposit);\r\n         \r\n        }\r\n    }\r\n\r\n}\r\n\r\n// File: contracts_ETH/main/Admin.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\n\r\n/** \r\n* @author Formation.Fi.\r\n* @notice Implementation of the contract Admin.\r\n*/\r\n\r\ncontract Admin is Ownable {\r\n    using SafeERC20 for IERC20;\r\n    uint256 public constant FACTOR_FEES_DECIMALS = 1e4; \r\n    uint256 public constant FACTOR_PRICE_DECIMALS = 1e6;\r\n    uint256 public constant  SECONDES_PER_YEAR = 365 days; \r\n    uint256 public slippageTolerance = 200;\r\n    uint256 public  amountScaleDecimals = 1; \r\n    uint256 public depositFeeRate = 50;  \r\n    uint256 public depositFeeRateParity= 15; \r\n    uint256 public managementFeeRate = 200;\r\n    uint256 public performanceFeeRate = 2000;\r\n    uint256 public performanceFees;\r\n    uint256 public managementFees;\r\n    uint256 public managementFeesTime;\r\n    uint256 public tokenPrice = 1e6;\r\n    uint256 public tokenPriceMean = 1e6;\r\n    uint256 public minAmount= 100 * 1e18;\r\n    uint256 public lockupPeriodUser = 604800; \r\n    uint public netDepositInd;\r\n    uint256 public netAmountEvent;\r\n    address public manager;\r\n    address public treasury;\r\n    address public investement;\r\n    address private safeHouse;\r\n    bool public isCancel;\r\n    Token public token;\r\n    IERC20 public stableToken;\r\n\r\n\r\n    constructor( address _manager, address _treasury,  address _stableTokenAddress,\r\n     address _tokenAddress) {\r\n        require(\r\n            _manager != address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        require(\r\n           _treasury != address(0),\r\n            \"Formation.Fi:  zero address\"\r\n            );\r\n\r\n        require(\r\n            _stableTokenAddress != address(0),\r\n            \"Formation.Fi:  zero address\"\r\n        );\r\n\r\n        require(\r\n           _tokenAddress != address(0),\r\n            \"Formation.Fi:  zero address\"\r\n        );\r\n\r\n        manager = _manager;\r\n        treasury = _treasury; \r\n        stableToken = IERC20(_stableTokenAddress);\r\n        token = Token(_tokenAddress);\r\n        uint8 _stableTokenDecimals = ERC20( _stableTokenAddress).decimals();\r\n        if ( _stableTokenDecimals == 6) {\r\n            amountScaleDecimals= 1e12;\r\n        }\r\n    }\r\n\r\n    modifier onlyInvestement() {\r\n        require(investement != address(0),\r\n            \"Formation.Fi:  zero address\"\r\n        );\r\n\r\n        require(msg.sender == investement,\r\n             \"Formation.Fi:  not investement\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        require(msg.sender == manager, \r\n        \"Formation.Fi: not manager\");\r\n        _;\r\n    }\r\n\r\n     /**\r\n     * @dev Setter functions to update the Portfolio Parameters.\r\n     */\r\n    function setTreasury(address _treasury) external onlyOwner {\r\n        require(\r\n            _treasury != address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        treasury = _treasury;\r\n    }\r\n\r\n    function setManager(address _manager) external onlyOwner {\r\n        require(\r\n            _manager != address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        manager = _manager;\r\n    }\r\n\r\n    function setInvestement(address _investement) external onlyOwner {\r\n        require(\r\n            _investement!= address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        investement = _investement;\r\n    } \r\n\r\n    function setSafeHouse(address _safeHouse) external onlyOwner {\r\n        require(\r\n            _safeHouse!= address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n\r\n        safeHouse = _safeHouse;\r\n    } \r\n\r\n    function setCancel(bool _cancel) external onlyManager {\r\n        isCancel= _cancel;\r\n    }\r\n  \r\n    function setLockupPeriodUser(uint256 _lockupPeriodUser) external onlyManager {\r\n        lockupPeriodUser = _lockupPeriodUser;\r\n    }\r\n \r\n    function setDepositFeeRate(uint256 _rate) external onlyManager {\r\n        depositFeeRate= _rate;\r\n    }\r\n\r\n    function setDepositFeeRateParity(uint256 _rate) external onlyManager {\r\n        depositFeeRateParity= _rate;\r\n    }\r\n\r\n    function setManagementFeeRate(uint256 _rate) external onlyManager {\r\n        managementFeeRate = _rate;\r\n    }\r\n\r\n    function setPerformanceFeeRate(uint256 _rate) external onlyManager {\r\n        performanceFeeRate  = _rate;\r\n    }\r\n    function setMinAmount(uint256 _minAmount) external onlyManager {\r\n        minAmount= _minAmount;\r\n     }\r\n\r\n    function updateTokenPrice(uint256 _price) external onlyManager {\r\n        require(\r\n             _price > 0,\r\n            \"Formation.Fi: zero price\"\r\n        );\r\n\r\n        tokenPrice = _price;\r\n    }\r\n\r\n    function updateTokenPriceMean(uint256 _price) external onlyInvestement {\r\n        require(\r\n             _price > 0,\r\n            \"Formation.Fi: zero price\"\r\n        );\r\n        tokenPriceMean  = _price;\r\n    }\r\n\r\n    function updateManagementFeeTime(uint256 _time) external onlyInvestement {\r\n        managementFeesTime = _time;\r\n    }\r\n    \r\n\r\n     /**\r\n     * @dev Calculate performance Fees.\r\n     */\r\n    function calculatePerformanceFees() external onlyManager {\r\n        require(performanceFees == 0, \"Formation.Fi: fees on pending\");\r\n\r\n        uint256 _deltaPrice = 0;\r\n        if (tokenPrice > tokenPriceMean) {\r\n            _deltaPrice = tokenPrice - tokenPriceMean;\r\n            tokenPriceMean = tokenPrice;\r\n            performanceFees = (token.totalSupply() *\r\n            _deltaPrice * performanceFeeRate) / (tokenPrice * FACTOR_FEES_DECIMALS); \r\n        }\r\n    }\r\n\r\n    \r\n     /**\r\n     * @dev Calculate management Fees.\r\n     */\r\n    function calculateManagementFees() external onlyManager {\r\n        require(managementFees == 0, \"Formation.Fi: fees on pending\");\r\n        if (managementFeesTime!= 0){\r\n           uint256 _deltaTime;\r\n           _deltaTime = block.timestamp -  managementFeesTime; \r\n           managementFees = (token.totalSupply() * managementFeeRate * _deltaTime ) \r\n           /(FACTOR_FEES_DECIMALS * SECONDES_PER_YEAR);\r\n           managementFeesTime = block.timestamp; \r\n        }\r\n    }\r\n     \r\n    /**\r\n     * @dev Mint Fees.\r\n     */\r\n    function mintFees() external onlyManager {\r\n        require ((performanceFees + managementFees) > 0, \"Formation.Fi: zero fees\");\r\n\r\n        token.mint(treasury, performanceFees + managementFees);\r\n        performanceFees = 0;\r\n        managementFees = 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate net deposit indicator\r\n     * @param _depositAmountTotal the total requested deposit amount by users.\r\n     * @param  _withdrawalAmountTotal the total requested withdrawal amount by users.\r\n     * @param _maxDepositAmount the maximum accepted deposit amount by event.\r\n     * @param _maxWithdrawalAmount the maximum accepted withdrawal amount by event.\r\n     * @return net Deposit indicator: 1 if net deposit case, 0 otherwise (net withdrawal case).\r\n     */\r\n    function calculateNetDepositInd(uint256 _depositAmountTotal, \r\n        uint256 _withdrawalAmountTotal, uint256 _maxDepositAmount, \r\n        uint256 _maxWithdrawalAmount) external onlyInvestement returns( uint256) {\r\n        _depositAmountTotal = Math.min(  _depositAmountTotal,\r\n         _maxDepositAmount);\r\n        _withdrawalAmountTotal =  (_withdrawalAmountTotal * tokenPrice) / FACTOR_PRICE_DECIMALS;\r\n        _withdrawalAmountTotal= Math.min(_withdrawalAmountTotal,\r\n        _maxWithdrawalAmount);\r\n        uint256  _depositAmountTotalAfterFees = _depositAmountTotal - \r\n        ( _depositAmountTotal * depositFeeRate)/ FACTOR_FEES_DECIMALS;\r\n        if  ( _depositAmountTotalAfterFees >= _withdrawalAmountTotal) {\r\n            netDepositInd = 1 ;\r\n        }\r\n        else {\r\n            netDepositInd = 0;\r\n        }\r\n        return netDepositInd;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate net amount \r\n     * @param _depositAmountTotal the total requested deposit amount by users.\r\n     * @param _withdrawalAmountTotal the total requested withdrawal amount by users.\r\n     * @param _maxDepositAmount the maximum accepted deposit amount by event.\r\n     * @param _maxWithdrawalAmount the maximum accepted withdrawal amount by event.\r\n     * @return net amount.\r\n     */\r\n    function calculateNetAmountEvent(uint256 _depositAmountTotal, \r\n        uint256 _withdrawalAmountTotal, uint256 _maxDepositAmount, \r\n        uint256 _maxWithdrawalAmount) external onlyInvestement returns(uint256) {\r\n        _depositAmountTotal = Math.min(  _depositAmountTotal,\r\n         _maxDepositAmount);\r\n        _withdrawalAmountTotal =  (_withdrawalAmountTotal * tokenPrice) / FACTOR_PRICE_DECIMALS;\r\n        _withdrawalAmountTotal= Math.min(_withdrawalAmountTotal,\r\n        _maxWithdrawalAmount);\r\n         uint256  _depositAmountTotalAfterFees = _depositAmountTotal - \r\n        ( _depositAmountTotal * depositFeeRate)/ FACTOR_FEES_DECIMALS;\r\n        \r\n        if (netDepositInd == 1) {\r\n             netAmountEvent =  _depositAmountTotalAfterFees - _withdrawalAmountTotal;\r\n        }\r\n        else {\r\n             netAmountEvent = _withdrawalAmountTotal - _depositAmountTotalAfterFees;\r\n        \r\n        }\r\n        return netAmountEvent;\r\n    }\r\n\r\n    /**\r\n     * @dev Protect against slippage due to assets sale.\r\n     * @param _withdrawalAmount the value of sold assets in Stablecoin.\r\n     * _withdrawalAmount has to be sent to the contract.\r\n     * treasury has to approve the contract for both Stablecoin and token.\r\n     * @return Missed amount to send to the contract due to slippage.\r\n     */\r\n    function protectAgainstSlippage(uint256 _withdrawalAmount) external onlyManager \r\n        returns (uint256) {\r\n        require(_withdrawalAmount != 0, \"Formation.Fi: zero amount\");\r\n\r\n        require(netDepositInd == 0, \"Formation.Fi: no slippage\");\r\n       \r\n       uint256 _amount = 0; \r\n       uint256 _deltaAmount =0;\r\n       uint256 _slippage = 0;\r\n       uint256  _tokenAmount = 0;\r\n       uint256 _balanceTokenTreasury = token.balanceOf(treasury);\r\n       uint256 _balanceStableTreasury = stableToken.balanceOf(treasury) * amountScaleDecimals;\r\n      \r\n        if (_withdrawalAmount< netAmountEvent){\r\n            _amount = netAmountEvent - _withdrawalAmount;   \r\n            _slippage = (_amount * FACTOR_FEES_DECIMALS ) / netAmountEvent;\r\n            if (_slippage >= slippageTolerance) {\r\n                return netAmountEvent;\r\n            }\r\n            else {\r\n                 _deltaAmount = Math.min( _amount, _balanceStableTreasury);\r\n                if ( _deltaAmount  > 0){\r\n                    stableToken.safeTransferFrom(treasury, investement, _deltaAmount/amountScaleDecimals);\r\n                    _tokenAmount = (_deltaAmount * FACTOR_PRICE_DECIMALS)/tokenPrice;\r\n                    token.mint(treasury, _tokenAmount);\r\n                    return _amount - _deltaAmount;\r\n                }\r\n                else {\r\n                     return _amount; \r\n                }  \r\n            }    \r\n        \r\n        }\r\n        else  {\r\n           _amount = _withdrawalAmount - netAmountEvent;   \r\n          _tokenAmount = (_amount * FACTOR_PRICE_DECIMALS)/tokenPrice;\r\n          _tokenAmount = Math.min(_tokenAmount, _balanceTokenTreasury);\r\n          if (_tokenAmount >0) {\r\n              _deltaAmount = (_tokenAmount * tokenPrice)/FACTOR_PRICE_DECIMALS;\r\n              stableToken.safeTransfer(treasury, _deltaAmount/amountScaleDecimals);   \r\n              token.burn( treasury, _tokenAmount);\r\n            }\r\n           if ((_amount - _deltaAmount) > 0) {\r\n            \r\n              stableToken.safeTransfer(safeHouse, (_amount - _deltaAmount)/amountScaleDecimals); \r\n            }\r\n        }\r\n        return 0;\r\n\r\n    } \r\n\r\n     /**\r\n     * @dev Send Stablecoin from the manager to the contract.\r\n     * @param _amount  tha amount to send.\r\n     */\r\n    function sendStableTocontract(uint256 _amount) external \r\n     onlyManager {\r\n      require( _amount > 0,  \"Formation.Fi: zero amount\");\r\n\r\n      stableToken.safeTransferFrom(msg.sender, address(this),\r\n       _amount/amountScaleDecimals);\r\n    }\r\n\r\n   \r\n     /**\r\n     * @dev Send Stablecoin from the contract to the contract Investement.\r\n     */\r\n    function sendStableFromcontract() external \r\n        onlyManager {\r\n        require(investement != address(0),\r\n            \"Formation.Fi: zero address\"\r\n        );\r\n         stableToken.safeTransfer(investement, stableToken.balanceOf(address(this)));\r\n    }\r\n  \r\n}\r\n\r\n// File: contracts_ETH/Alpha/AdminAlpha.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n/** \r\n* @author Formation.Fi.\r\n* @notice Implementation of the contract AdminAlpha.\r\n*/\r\n\r\ncontract AdminAlpha is Admin {\r\n    constructor(address _manager, address _treasury, address _stableToken,\r\n     address _token) Admin( _manager,  _treasury,  _stableToken,\r\n     _token){\r\n   }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stableToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FACTOR_FEES_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FACTOR_PRICE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDES_PER_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountScaleDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateManagementFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositAmountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawalAmountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxWithdrawalAmount\",\"type\":\"uint256\"}],\"name\":\"calculateNetAmountEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositAmountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawalAmountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxWithdrawalAmount\",\"type\":\"uint256\"}],\"name\":\"calculateNetDepositInd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculatePerformanceFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFeeRateParity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investement\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCancel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockupPeriodUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementFeesTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netAmountEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netDepositInd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalAmount\",\"type\":\"uint256\"}],\"name\":\"protectAgainstSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendStableFromcontract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendStableTocontract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_cancel\",\"type\":\"bool\"}],\"name\":\"setCancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setDepositFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setDepositFeeRateParity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investement\",\"type\":\"address\"}],\"name\":\"setInvestement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockupPeriodUser\",\"type\":\"uint256\"}],\"name\":\"setLockupPeriodUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setManagementFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"}],\"name\":\"setMinAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_safeHouse\",\"type\":\"address\"}],\"name\":\"setSafeHouse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageTolerance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPriceMean\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"updateManagementFeeTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updateTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updateTokenPriceMean\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AdminAlpha", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000c1b81d7a0ca2fab108edc371207d903dd0cff322000000000000000000000000c1b81d7a0ca2fab108edc371207d903dd0cff322000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f000000000000000000000000f07ecacabb8de3a1aecf1505bb10966c3e763ec2", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://efe2ea5830fc0a884f7434dd0ddc80639e252146014c133a5cc644f4d9c3789f"}