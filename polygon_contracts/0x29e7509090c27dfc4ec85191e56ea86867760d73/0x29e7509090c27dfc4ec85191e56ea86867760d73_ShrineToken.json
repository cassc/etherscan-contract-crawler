{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ShrineToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport \\\"./FxBaseChildTunnel.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n/// @title ShrineToken\\n/// @author rektt (https://twitter.com/rekttdoteth)\\n\\ncontract ShrineToken is ERC20, FxBaseChildTunnel, Ownable {\\n    using ECDSA for bytes32;\\n\\n    struct StakeRecord {\\n        uint256 stakedOn;\\n        uint256 lockupDeltas;\\n        uint256 lastClaimed;\\n        uint256 lockupBoostTier;\\n    }\\n\\n    struct UserInfo {\\n        uint256 stakedBalance;\\n        address[] stakedContract;\\n        mapping(address => uint256[]) stakedIds;\\n    }\\n\\n    struct EcosystemBoost {\\n        uint256 numOne;\\n        uint256 numTwo;\\n        uint256 multiplierPercent;\\n    }\\n\\n    struct ContractIndex {\\n        uint256 index;\\n        address collection;\\n    }\\n\\n    //@dev struct to avoid too deep local vars\\n    struct BoostCalculator {\\n        uint256 deltaStakedDifference;\\n        uint256 deltaClaimedDifference;\\n        uint256 lockupBoostPercent;\\n        uint256 ecosystemBoostPercent;\\n        uint256 multipleStakedBoostPercent;\\n        uint256 lockupBonus;\\n        uint256 multipleStakedBonus;\\n        uint256 ecosystemBonus;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    //@dev Emitted when message from root is processed.\\n    event ProcessedMessage(address from, uint256 tokenId, bool stake);\\n\\n    /* ========== ERRORS ========== */\\n\\n    error NotStaker(address attemptedStaker, address actualStaker);\\n    error InsufficientBalance();\\n    error NotHarvester();\\n    error InputLengthMissmatch();\\n    error Paused();\\n\\n    /* ========== STORAGE ========== */\\n\\n    //user address => contract => tokenId => record mapping\\n    mapping(address => mapping(address => mapping(uint256 => StakeRecord)))\\n        private stakeRecord;\\n\\n    mapping(uint256 => uint256) public multipleStakedBoost;\\n    mapping(uint256 => uint256) public lockupBoost;\\n\\n    uint256[] public lockupThreshold;\\n    uint256[] public multipleStakedThreshold;\\n    EcosystemBoost[] public ecosystemThreshold;\\n\\n    mapping(address => UserInfo) private userInfo;\\n    mapping(address => bool) public harvester;\\n    mapping(bytes32 => bool) public usedMessage;\\n\\n    mapping(address => mapping(uint256 => uint256)) public contractToTokenIndex;\\n    mapping(address => mapping(address => ContractIndex))\\n        public addressToContractIndex;\\n\\n    //contract > tokenId > map\\n    mapping(address => mapping(uint256 => uint256)) public tokenRarity;\\n    mapping(address => mapping(uint256 => uint256)) public rarityRate;\\n\\n    bool public paused = true;\\n\\n    address public hakiERC721;\\n    address public sekiraERC721;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        address haki,\\n        address sekira,\\n        address _fxChild\\n    ) FxBaseChildTunnel(_fxChild) ERC20(\\\"Shrine Token\\\", \\\"SHRINE\\\", 18) {\\n        hakiERC721 = haki;\\n        sekiraERC721 = sekira;\\n\\n        //---init multi stake boost---//\\n        multipleStakedBoost[5] = 5;\\n        multipleStakedBoost[10] = 10;\\n        multipleStakedBoost[20] = 15;\\n        multipleStakedThreshold.push(5);\\n        multipleStakedThreshold.push(10);\\n        multipleStakedThreshold.push(20);\\n\\n        //---init lockup boost---//\\n        lockupBoost[14 days] = 5;\\n        lockupBoost[30 days] = 10;\\n        lockupThreshold.push(14 days);\\n        lockupThreshold.push(30 days);\\n\\n        //---init ecosystem boost---//\\n        EcosystemBoost memory _boost1 = EcosystemBoost(1, 1, 5);\\n        EcosystemBoost memory _boost2 = EcosystemBoost(5, 5, 10);\\n        EcosystemBoost memory _boost3 = EcosystemBoost(10, 10, 15);\\n        EcosystemBoost memory _boost4 = EcosystemBoost(20, 20, 20);\\n        ecosystemThreshold.push(_boost1);\\n        ecosystemThreshold.push(_boost2);\\n        ecosystemThreshold.push(_boost3);\\n        ecosystemThreshold.push(_boost4);\\n\\n        //---init rarity rate---//\\n        rarityRate[haki][0] = 10 ether;\\n        rarityRate[sekira][0] = 10 ether;\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier notPaused() {\\n        if (paused) revert Paused();\\n        _;\\n    }\\n\\n    modifier onlyHarvester() {\\n        if (!harvester[msg.sender]) revert NotHarvester();\\n        _;\\n    }\\n\\n    /* ========== OWNER FUNCTIONS ========== */\\n\\n    function togglePause() external onlyOwner {\\n        paused = !paused;\\n    }\\n\\n    function setLockupBoost(\\n        uint256[] calldata lockDays,\\n        uint256[] calldata multiplierPercents\\n    ) external onlyOwner {\\n        if (lockDays.length != multiplierPercents.length)\\n            revert InputLengthMissmatch();\\n\\n        for (uint256 i = 0; i < lockDays.length; i++) {\\n            uint256 daysToDelta = lockDays[i] * 1 days;\\n            lockupBoost[daysToDelta] = multiplierPercents[i];\\n            lockupThreshold.push(daysToDelta);\\n        }\\n    }\\n\\n    function setEcosystemBoost(\\n        uint256[] calldata numOnes,\\n        uint256[] calldata numTwos,\\n        uint256[] calldata multiplierPercents\\n    ) external onlyOwner {\\n        if (\\n            numTwos.length != numOnes.length ||\\n            numTwos.length != multiplierPercents.length ||\\n            numOnes.length != multiplierPercents.length\\n        ) revert InputLengthMissmatch();\\n\\n        for (uint256 i = 0; i < numOnes.length; i++) {\\n            EcosystemBoost memory _boost = EcosystemBoost(\\n                numOnes[i],\\n                numTwos[i],\\n                multiplierPercents[i]\\n            );\\n            ecosystemThreshold.push(_boost);\\n        }\\n    }\\n\\n    function setMultipleStakedBoost(\\n        uint256[] calldata numStaked,\\n        uint256[] calldata multiplierPercents\\n    ) external onlyOwner {\\n        if (numStaked.length != multiplierPercents.length)\\n            revert InputLengthMissmatch();\\n\\n        for (uint256 i = 0; i < numStaked.length; i++) {\\n            multipleStakedBoost[numStaked[i]] = multiplierPercents[i];\\n            multipleStakedThreshold.push(numStaked[i]);\\n        }\\n    }\\n\\n    function setRarities(\\n        address collection,\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata rarities\\n    ) external onlyOwner {\\n        if (tokenIds.length != rarities.length) revert InputLengthMissmatch();\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            tokenRarity[collection][tokenIds[i]] = rarities[i];\\n        }\\n    }\\n\\n    function setRaritiesRate(\\n        address collection,\\n        uint256[] memory rarities,\\n        uint256[] memory rates\\n    ) external onlyOwner {\\n        if (rarities.length != rates.length) revert InputLengthMissmatch();\\n        for (uint256 i = 0; i < rarities.length; i++) {\\n            rarityRate[collection][rarities[i]] = rates[i];\\n        }\\n    }\\n\\n    function setHarvester(address[] memory harvesters, bool state)\\n        external\\n        onlyOwner\\n    {\\n        for (uint256 i = 0; i < harvesters.length; i++) {\\n            harvester[harvesters[i]] = state;\\n        }\\n    }\\n\\n    function updateFxRootRunnel(address _fxRootTunnel) external onlyOwner {\\n        fxRootTunnel = _fxRootTunnel;\\n    }\\n\\n    function mint(uint256 amount, address receiver) external onlyOwner {\\n        _mint(receiver, amount);\\n    }\\n\\n    function burn(uint256 amount) external onlyOwner {\\n        _burn(address(this), amount);\\n    }\\n\\n    function withdraw(uint256 amount) external onlyOwner {\\n        if (balanceOf[address(this)] < amount) revert InsufficientBalance();\\n        transfer(msg.sender, amount);\\n    }\\n\\n    function airdrop(address[] calldata addresses, uint256[] calldata amounts)\\n        external\\n        onlyOwner\\n    {\\n        if (addresses.length != amounts.length) revert InputLengthMissmatch();\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            uint256 amount = amounts[i];\\n            _mint(addresses[i], amount);\\n        }\\n    }\\n\\n    /* ========== PUBLIC READ ========== */\\n\\n    function pendingRewards(address user) external view returns (uint256) {\\n        return _getPendingRewards(user);\\n    }\\n\\n    function pendingRewardsByNFT(\\n        address user,\\n        address collection,\\n        uint256 tokenId\\n    ) external view returns (uint256 boosted, uint256 nonboosted) {\\n        return (\\n            _getPendingRewardsByNFT(user, collection, tokenId),\\n            _getPendingRewardsByNFTNonBoosted(user, collection, tokenId)\\n        );\\n    }\\n\\n    function createMessage(address user, uint256 amount)\\n        external\\n        view\\n        returns (bytes32)\\n    {\\n        return _createMessage(user, amount);\\n    }\\n\\n    function getStakeRecord(\\n        address user,\\n        address collection,\\n        uint256 tokenId\\n    ) external view returns (StakeRecord memory) {\\n        StakeRecord memory _record = stakeRecord[user][collection][tokenId];\\n        _record.lockupBoostTier = _lockupBoostThreshold(_record.lockupDeltas);\\n\\n        return _record;\\n    }\\n\\n    function getUserInfo(address user, address collection)\\n        external\\n        view\\n        returns (\\n            uint256 stakedBalance,\\n            address[] memory stakedContracts,\\n            uint256 ecosystemBoostTier,\\n            uint256 multipleStakedBoostTier,\\n            uint256[] memory stakedIds\\n        )\\n    {\\n        UserInfo storage _info = userInfo[user];\\n\\n        return (\\n            _info.stakedBalance,\\n            _info.stakedContract,\\n            _ecosystemBoostThreshold(\\n                _info.stakedIds[hakiERC721].length,\\n                _info.stakedIds[sekiraERC721].length\\n            ),\\n            _multipleStakedBoostThreshold(_info.stakedBalance),\\n            _info.stakedIds[collection]\\n        );\\n    }\\n\\n    /* ========== PUBLIC MUTATIVE ========== */\\n\\n    function spend(\\n        address owner,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        _harvestReward(owner);\\n        permit(owner, msg.sender, value, deadline, v, r, s);\\n        transferFrom(owner, address(this), value);\\n    }\\n\\n    function totalBalance(address user) external view returns (uint256) {\\n        return balanceOf[user] + _getPendingRewards(user);\\n    }\\n\\n    /// @notice Harvest $SHRINE reward.\\n    function harvestReward() external {\\n        _harvestReward(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Harvest $SHRINE on behalf.\\n     * @param user user address to harvest reward on behalf\\n     * @param amount amount to be harvested\\n     * @param signature bytes message of signatures\\n     */\\n    function gaslessHarvest(\\n        address user,\\n        uint256 amount,\\n        bytes memory signature\\n    ) external onlyHarvester {\\n        _useMessage(user, amount, signature);\\n        _harvestReward(user);\\n    }\\n\\n    /**\\n     * @notice Harvest $SHRINE on behalf  by NFT.\\n     * @param user user address to harvest reward on behalf\\n     * @param amount amount to be harvested\\n     * @param tokenId tokenId to be harvested\\n     * @param signature bytes message of signatures\\n     */\\n    function gaslessHarvestByNFT(\\n        address user,\\n        address collection,\\n        uint256 amount,\\n        uint256 tokenId,\\n        bytes memory signature\\n    ) external onlyHarvester {\\n        _useMessage(user, amount, signature);\\n        _harvestRewardByNFT(user, collection, tokenId);\\n    }\\n\\n    /* ========== OVERRIDES ========== */\\n\\n    /**\\n     * @notice Process message received from FxChild\\n     * @param stateId unique state id\\n     * @param sender root message sender\\n     * @param message bytes message that was sent from Root Tunnel\\n     */\\n    function _processMessageFromRoot(\\n        uint256 stateId,\\n        address sender,\\n        bytes memory message\\n    ) internal override validateSender(sender) {\\n        (\\n            address from,\\n            address collection,\\n            uint256 tokenId,\\n            uint256 lockupDelta,\\n            bool stake\\n        ) = abi.decode(message, (address, address, uint256, uint256, bool));\\n\\n        UserInfo storage _userInfo = userInfo[from];\\n\\n        if (stake) {\\n            StakeRecord memory _record = StakeRecord(\\n                block.timestamp,\\n                lockupDelta,\\n                0,\\n                0\\n            );\\n            stakeRecord[from][collection][tokenId] = _record;\\n            contractToTokenIndex[collection][tokenId] = _userInfo\\n                .stakedIds[collection]\\n                .length;\\n            _userInfo.stakedIds[collection].push(tokenId);\\n            _userInfo.stakedBalance++;\\n\\n            if (\\n                addressToContractIndex[from][collection].collection ==\\n                address(0)\\n            ) {\\n                addressToContractIndex[from][collection].index = _userInfo\\n                    .stakedContract\\n                    .length;\\n                addressToContractIndex[from][collection]\\n                    .collection = collection;\\n                _userInfo.stakedContract.push(collection);\\n            }\\n        } else {\\n            _harvestRewardByNFT(from, collection, tokenId);\\n            delete stakeRecord[from][collection][tokenId];\\n            _userInfo.stakedBalance--;\\n            if (_userInfo.stakedIds[collection].length > 1) {\\n                uint256 lastTokenId = _userInfo.stakedIds[collection][\\n                    _userInfo.stakedIds[collection].length - 1\\n                ];\\n                uint256 lastTokenIndexNew = contractToTokenIndex[collection][\\n                    tokenId\\n                ];\\n\\n                _userInfo.stakedIds[collection][\\n                    lastTokenIndexNew\\n                ] = lastTokenId;\\n                _userInfo.stakedIds[collection].pop();\\n\\n                contractToTokenIndex[collection][\\n                    lastTokenId\\n                ] = lastTokenIndexNew;\\n            } else {\\n                _userInfo.stakedIds[collection].pop();\\n                if (_userInfo.stakedContract.length > 1) {\\n                    address lastContract = _userInfo.stakedContract[\\n                        _userInfo.stakedContract.length - 1\\n                    ];\\n                    uint256 lastContractIndexNew = addressToContractIndex[from][\\n                        collection\\n                    ].index;\\n\\n                    _userInfo.stakedContract[\\n                        lastContractIndexNew\\n                    ] = lastContract;\\n                    _userInfo.stakedContract.pop();\\n\\n                    addressToContractIndex[from][lastContract]\\n                        .index = lastContractIndexNew;\\n                } else {\\n                    _userInfo.stakedContract.pop();\\n                }\\n            }\\n\\n            delete contractToTokenIndex[collection][tokenId];\\n            delete addressToContractIndex[from][collection];\\n        }\\n\\n        emit ProcessedMessage(from, tokenId, stake);\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    /// @notice Helper that creates the message for gaslessHarvest\\n    /// @param user user address\\n    /// @param amount the amount\\n    /// @return the message to sign\\n    function _createMessage(address user, uint256 amount)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encode(user, amount, address(this)));\\n    }\\n\\n    /// @dev It ensures that signer signed a message containing (account, amount, address(this))\\n    ///      and that this message was not already used\\n    /// @param user the signer\\n    /// @param amount the amount associated to this allowance\\n    /// @param signature the signature by the allowance signer wallet\\n    /// @return the message to mark as used\\n    function _validateSignature(\\n        address user,\\n        uint256 amount,\\n        bytes memory signature\\n    ) internal view returns (bytes32) {\\n        bytes32 message = _createMessage(user, amount).toEthSignedMessageHash();\\n\\n        // verifies that the sha3(account, amount, address(this)) has been signed by user\\n        require(message.recover(signature) == user, \\\"!INVALID_SIGNATURE!\\\");\\n\\n        // verifies that the message was not already used\\n        require(usedMessage[message] == false, \\\"!ALREADY_USED!\\\");\\n\\n        return message;\\n    }\\n\\n    /// @notice internal function that verifies an allowance and marks it as used\\n    ///         this function throws if signature is wrong or this amount for this user has already been used\\n    /// @param user the account the allowance is associated to\\n    /// @param amount the amount\\n    /// @param signature the signature by the allowance wallet\\n    function _useMessage(\\n        address user,\\n        uint256 amount,\\n        bytes memory signature\\n    ) internal {\\n        bytes32 message = _validateSignature(user, amount, signature);\\n        usedMessage[message] = true;\\n    }\\n\\n    function _harvestReward(address user) internal notPaused {\\n        uint256 pendingReward = 0;\\n        uint256 ecosystemBonus = 0;\\n        uint256 multipleStakedBonus = 0;\\n\\n        UserInfo storage _userInfo = userInfo[user];\\n\\n        for (uint256 i = 0; i < _userInfo.stakedContract.length; i++) {\\n            for (\\n                uint256 index = 0;\\n                index < _userInfo.stakedIds[_userInfo.stakedContract[i]].length;\\n                index++\\n            ) {\\n                pendingReward += _pendingByNFTAndMarkClaim(\\n                    user,\\n                    _userInfo.stakedContract[i],\\n                    _userInfo.stakedIds[_userInfo.stakedContract[i]][index]\\n                );\\n            }\\n        }\\n\\n        uint256 multipleStakedBoostPercent = _multipleStakedBoostThreshold(\\n            _userInfo.stakedBalance\\n        ) * 10**16;\\n\\n        uint256 ecosystemBoostPercent = _ecosystemBoostThreshold(\\n            _userInfo.stakedIds[hakiERC721].length,\\n            _userInfo.stakedIds[sekiraERC721].length\\n        ) * 10**16;\\n\\n        if (multipleStakedBoostPercent > 0)\\n            multipleStakedBonus = ((pendingReward *\\n                multipleStakedBoostPercent) / 10**18);\\n\\n        if (ecosystemBoostPercent > 0)\\n            ecosystemBonus = ((pendingReward * ecosystemBoostPercent) / 10**18);\\n\\n        pendingReward += (ecosystemBonus + multipleStakedBonus);\\n\\n        _mint(user, pendingReward);\\n    }\\n\\n    function _harvestRewardByNFT(\\n        address user,\\n        address collection,\\n        uint256 tokenId\\n    ) internal notPaused {\\n        uint256 pendingReward = _getPendingRewardsByNFT(\\n            user,\\n            collection,\\n            tokenId\\n        );\\n\\n        StakeRecord storage _record = stakeRecord[user][collection][tokenId];\\n        _record.lastClaimed = block.timestamp;\\n\\n        _mint(user, pendingReward);\\n    }\\n\\n    function _ecosystemBoostThreshold(uint256 numOne, uint256 numTwo)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 boost = 0;\\n\\n        for (uint256 i = 0; i < ecosystemThreshold.length; i++) {\\n            if (\\n                numOne >= ecosystemThreshold[i].numOne &&\\n                numTwo >= ecosystemThreshold[i].numTwo\\n            ) {\\n                if (ecosystemThreshold[i].multiplierPercent > boost)\\n                    boost = ecosystemThreshold[i].multiplierPercent;\\n            }\\n        }\\n\\n        return boost;\\n    }\\n\\n    function _multipleStakedBoostThreshold(uint256 numStaked)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 boost = 0;\\n\\n        for (uint256 i = 0; i < multipleStakedThreshold.length; i++) {\\n            if (numStaked >= multipleStakedThreshold[i]) {\\n                if (multipleStakedBoost[multipleStakedThreshold[i]] > boost)\\n                    boost = multipleStakedBoost[multipleStakedThreshold[i]];\\n            }\\n        }\\n\\n        return boost;\\n    }\\n\\n    function _lockupBoostThreshold(uint256 lockupDeltas)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 boost = 0;\\n\\n        for (uint256 i = 0; i < lockupThreshold.length; i++) {\\n            if (lockupDeltas >= lockupThreshold[i]) {\\n                if (lockupBoost[lockupThreshold[i]] > boost)\\n                    boost = lockupBoost[lockupThreshold[i]];\\n            }\\n        }\\n\\n        return boost;\\n    }\\n\\n    function _pendingByNFTAndMarkClaim(\\n        address user,\\n        address collection,\\n        uint256 tokenId\\n    ) internal returns (uint256) {\\n        uint256 rewards = 0;\\n        uint256 lockupBonus = 0;\\n\\n        StakeRecord storage _record = stakeRecord[user][collection][tokenId];\\n\\n        BoostCalculator memory calculator = BoostCalculator(\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0\\n        );\\n\\n        calculator.deltaStakedDifference = _record.stakedOn > 0\\n            ? block.timestamp - _record.stakedOn\\n            : 0;\\n        calculator.deltaClaimedDifference = _record.lastClaimed > 0\\n            ? block.timestamp - _record.lastClaimed\\n            : calculator.deltaStakedDifference;\\n\\n        calculator.lockupBoostPercent =\\n            _lockupBoostThreshold(_record.lockupDeltas) *\\n            10**16;\\n\\n        uint256 rarityBasedRate = rarityRate[collection][\\n            tokenRarity[collection][tokenId]\\n        ];\\n\\n        if (calculator.lockupBoostPercent > 0)\\n            lockupBonus = ((rarityBasedRate * calculator.lockupBoostPercent) /\\n                10**18);\\n\\n        uint256 dayRate = (rarityBasedRate + lockupBonus);\\n\\n        if (dayRate > 0)\\n            rewards = ((dayRate * calculator.deltaClaimedDifference) / 86400);\\n\\n        _record.lastClaimed = block.timestamp;\\n        return rewards;\\n    }\\n\\n    function _getPendingRewardsByNFT(\\n        address user,\\n        address collection,\\n        uint256 tokenId\\n    ) internal view returns (uint256) {\\n        uint256 rewards = 0;\\n\\n        UserInfo storage _userInfo = userInfo[user];\\n        StakeRecord memory _record = stakeRecord[user][collection][tokenId];\\n        BoostCalculator memory calculator = BoostCalculator(\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0\\n        );\\n\\n        calculator.deltaStakedDifference = _record.stakedOn > 0\\n            ? block.timestamp - _record.stakedOn\\n            : 0;\\n        calculator.deltaClaimedDifference = _record.lastClaimed > 0\\n            ? block.timestamp - _record.lastClaimed\\n            : calculator.deltaStakedDifference;\\n\\n        calculator.lockupBoostPercent =\\n            _lockupBoostThreshold(_record.lockupDeltas) *\\n            10**16;\\n\\n        calculator.multipleStakedBoostPercent =\\n            _multipleStakedBoostThreshold(_userInfo.stakedBalance) *\\n            10**16;\\n\\n        calculator.ecosystemBoostPercent =\\n            _ecosystemBoostThreshold(\\n                _userInfo.stakedIds[hakiERC721].length,\\n                _userInfo.stakedIds[sekiraERC721].length\\n            ) *\\n            10**16;\\n\\n        uint256 rarityBasedRate = rarityRate[collection][\\n            tokenRarity[collection][tokenId]\\n        ];\\n\\n        if (calculator.lockupBoostPercent > 0)\\n            calculator.lockupBonus = ((rarityBasedRate *\\n                calculator.lockupBoostPercent) / 10**18);\\n\\n        if (calculator.multipleStakedBoostPercent > 0)\\n            calculator.multipleStakedBonus = ((rarityBasedRate *\\n                calculator.multipleStakedBoostPercent) / 10**18);\\n\\n        if (calculator.ecosystemBoostPercent > 0)\\n            calculator.ecosystemBonus = ((rarityBasedRate *\\n                calculator.ecosystemBoostPercent) / 10**18);\\n\\n        uint256 dayRate = (rarityBasedRate +\\n            calculator.lockupBonus +\\n            calculator.multipleStakedBonus +\\n            calculator.ecosystemBonus);\\n\\n        if (dayRate > 0)\\n            rewards = ((dayRate * calculator.deltaClaimedDifference) / 86400);\\n\\n        return rewards;\\n    }\\n\\n    function _getPendingRewardsByNFTNonBoosted(\\n        address user,\\n        address collection,\\n        uint256 tokenId\\n    ) internal view returns (uint256) {\\n        uint256 rewards = 0;\\n\\n        StakeRecord memory _record = stakeRecord[user][collection][tokenId];\\n\\n        uint256 deltaStakedDifference = _record.stakedOn > 0\\n            ? block.timestamp - _record.stakedOn\\n            : 0;\\n        uint256 deltaClaimedDifference = _record.lastClaimed > 0\\n            ? block.timestamp - _record.lastClaimed\\n            : deltaStakedDifference;\\n\\n        uint256 rarityBasedRate = rarityRate[collection][\\n            tokenRarity[collection][tokenId]\\n        ];\\n\\n        if (rarityBasedRate > 0)\\n            rewards = ((rarityBasedRate * deltaClaimedDifference) / 86400);\\n\\n        return rewards;\\n    }\\n\\n    function _getPendingRewards(address user) internal view returns (uint256) {\\n        UserInfo storage _userInfo = userInfo[user];\\n\\n        uint256 rewards = 0;\\n\\n        for (uint256 i = 0; i < _userInfo.stakedContract.length; i++) {\\n            for (\\n                uint256 index = 0;\\n                index < _userInfo.stakedIds[_userInfo.stakedContract[i]].length;\\n                index++\\n            ) {\\n                rewards += _getPendingRewardsByNFT(\\n                    user,\\n                    _userInfo.stakedContract[i],\\n                    _userInfo.stakedIds[_userInfo.stakedContract[i]][index]\\n                );\\n            }\\n        }\\n\\n        return rewards;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/FxBaseChildTunnel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// IFxMessageProcessor represents interface to process message\\ninterface IFxMessageProcessor {\\n    function processMessageFromRoot(\\n        uint256 stateId,\\n        address rootMessageSender,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n/**\\n * @notice Mock child tunnel contract to receive and send message from L2\\n */\\nabstract contract FxBaseChildTunnel is IFxMessageProcessor {\\n    // MessageTunnel on L1 will get data from this event\\n    event MessageSent(bytes message);\\n\\n    // fx child\\n    address public fxChild;\\n\\n    // fx root tunnel\\n    address public fxRootTunnel;\\n\\n    constructor(address _fxChild) {\\n        fxChild = _fxChild;\\n    }\\n\\n    // Sender must be fxRootTunnel in case of ERC20 tunnel\\n    modifier validateSender(address sender) {\\n        require(sender == fxRootTunnel, \\\"FxBaseChildTunnel: INVALID_SENDER_FROM_ROOT\\\");\\n        _;\\n    }\\n\\n    // set fxRootTunnel if not set already\\n    function setFxRootTunnel(address _fxRootTunnel) external {\\n        require(fxRootTunnel == address(0x0), \\\"FxBaseChildTunnel: ROOT_TUNNEL_ALREADY_SET\\\");\\n        fxRootTunnel = _fxRootTunnel;\\n    }\\n\\n    function processMessageFromRoot(\\n        uint256 stateId,\\n        address rootMessageSender,\\n        bytes calldata data\\n    ) external override {\\n        require(msg.sender == fxChild, \\\"FxBaseChildTunnel: INVALID_SENDER\\\");\\n        _processMessageFromRoot(stateId, rootMessageSender, data);\\n    }\\n\\n    /**\\n     * @notice Emit message that can be received on Root Tunnel\\n     * @dev Call the internal function when need to emit message\\n     * @param message bytes message that will be sent to Root Tunnel\\n     * some message examples -\\n     *   abi.encode(tokenId);\\n     *   abi.encode(tokenId, tokenMetadata);\\n     *   abi.encode(messageType, messageData);\\n     */\\n    function _sendMessageToRoot(bytes memory message) internal {\\n        emit MessageSent(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Root Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param stateId unique state id\\n     * @param sender root message sender\\n     * @param message bytes message that was sent from Root Tunnel\\n     */\\n    function _processMessageFromRoot(\\n        uint256 stateId,\\n        address sender,\\n        bytes memory message\\n    ) internal virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*///////////////////////////////////////////////////////////////\\n                                  EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n                )\\n            );\\n\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"haki\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sekira\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fxChild\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InputLengthMissmatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotHarvester\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"attemptedStaker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actualStaker\",\"type\":\"address\"}],\"name\":\"NotStaker\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Paused\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"stake\",\"type\":\"bool\"}],\"name\":\"ProcessedMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToContractIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contractToTokenIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"createMessage\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ecosystemThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numOne\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTwo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplierPercent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChild\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRootTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"gaslessHarvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"gaslessHarvestByNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getStakeRecord\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupDeltas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupBoostTier\",\"type\":\"uint256\"}],\"internalType\":\"struct ShrineToken.StakeRecord\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedBalance\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"stakedContracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"ecosystemBoostTier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multipleStakedBoostTier\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"stakedIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hakiERC721\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"harvester\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockupBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockupThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"multipleStakedBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"multipleStakedThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"pendingRewardsByNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"boosted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonboosted\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stateId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rootMessageSender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"processMessageFromRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rarityRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sekiraERC721\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"numOnes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"numTwos\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"multiplierPercents\",\"type\":\"uint256[]\"}],\"name\":\"setEcosystemBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxRootTunnel\",\"type\":\"address\"}],\"name\":\"setFxRootTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"harvesters\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setHarvester\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"lockDays\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"multiplierPercents\",\"type\":\"uint256[]\"}],\"name\":\"setLockupBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"numStaked\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"multiplierPercents\",\"type\":\"uint256[]\"}],\"name\":\"setMultipleStakedBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rarities\",\"type\":\"uint256[]\"}],\"name\":\"setRarities\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"rarities\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rates\",\"type\":\"uint256[]\"}],\"name\":\"setRaritiesRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"spend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenRarity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxRootTunnel\",\"type\":\"address\"}],\"name\":\"updateFxRootRunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedMessage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ShrineToken", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007887f40763ace5f0e8320181fd5b42776d35b1ff000000000000000000000000000000059619cdddc056910672abc90887136a950000000000000000000000008397259c983751daf40400790063935a11afa28a", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}