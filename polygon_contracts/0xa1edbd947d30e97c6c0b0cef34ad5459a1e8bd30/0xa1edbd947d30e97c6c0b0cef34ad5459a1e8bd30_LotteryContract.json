{"SourceCode": "// Sources flattened with hardhat v2.18.2 https://hardhat.org\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma abicoder v2;\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v5.0.0\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v5.0.0\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol@v5.0.0\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n *\r\n * ==== Security Considerations\r\n *\r\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\r\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\r\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\r\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\r\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\r\n * generally recommended is:\r\n *\r\n * ```solidity\r\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\r\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\r\n *     doThing(..., value);\r\n * }\r\n *\r\n * function doThing(..., uint256 value) public {\r\n *     token.safeTransferFrom(msg.sender, address(this), value);\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\r\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\r\n * {SafeERC20-safeTransferFrom}).\r\n *\r\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\r\n * contracts should have entry points that don't rely on permit.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     *\r\n     * CAUTION: See Security Considerations above.\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v5.0.0\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v5.0.0\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev The ETH balance of the account is not enough to perform the operation.\r\n     */\r\n    error AddressInsufficientBalance(address account);\r\n\r\n    /**\r\n     * @dev There's no code at `target` (it is not a contract).\r\n     */\r\n    error AddressEmptyCode(address target);\r\n\r\n    /**\r\n     * @dev A call to an address target failed. The target may have reverted.\r\n     */\r\n    error FailedInnerCall();\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        if (address(this).balance < amount) {\r\n            revert AddressInsufficientBalance(address(this));\r\n        }\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        if (!success) {\r\n            revert FailedInnerCall();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason or custom error, it is bubbled\r\n     * up by this function (like regular Solidity function calls). However, if\r\n     * the call reverted with no returned reason, this function reverts with a\r\n     * {FailedInnerCall} error.\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        if (address(this).balance < value) {\r\n            revert AddressInsufficientBalance(address(this));\r\n        }\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\r\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\r\n     * unsuccessful call.\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata\r\n    ) internal view returns (bytes memory) {\r\n        if (!success) {\r\n            _revert(returndata);\r\n        } else {\r\n            // only check if target is a contract if the call was successful and the return data is empty\r\n            // otherwise we already know that it was a contract\r\n            if (returndata.length == 0 && target.code.length == 0) {\r\n                revert AddressEmptyCode(target);\r\n            }\r\n            return returndata;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\r\n     * revert reason or with a default {FailedInnerCall} error.\r\n     */\r\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\r\n        if (!success) {\r\n            _revert(returndata);\r\n        } else {\r\n            return returndata;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\r\n     */\r\n    function _revert(bytes memory returndata) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert FailedInnerCall();\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v5.0.0\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev An operation with an ERC20 token failed.\r\n     */\r\n    error SafeERC20FailedOperation(address token);\r\n\r\n    /**\r\n     * @dev Indicates a failed `decreaseAllowance` request.\r\n     */\r\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        forceApprove(token, spender, oldAllowance + value);\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\r\n     * value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\r\n        unchecked {\r\n            uint256 currentAllowance = token.allowance(address(this), spender);\r\n            if (currentAllowance < requestedDecrease) {\r\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\r\n            }\r\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\r\n     * to be set to zero before setting it to a non-zero value, such as USDT.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data);\r\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\r\n            revert SafeERC20FailedOperation(address(token));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/ReentrancyGuard.sol@v5.0.0\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant NOT_ENTERED = 1;\r\n    uint256 private constant ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    /**\r\n     * @dev Unauthorized reentrant call.\r\n     */\r\n    error ReentrancyGuardReentrantCall();\r\n\r\n    constructor() {\r\n        _status = NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\r\n        if (_status == ENTERED) {\r\n            revert ReentrancyGuardReentrantCall();\r\n        }\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/contracts/interfaces/ILotteryContract.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\ninterface ILotteryContract {\r\n    /**\r\n     * @notice Buy tickets for the current lottery\r\n     * @param _lotteryId: lotteryId\r\n     * @param _numTickets: array of ticket numbers between 1,000,000 and 1,999,999\r\n     * @dev Callable by users\r\n     */\r\n    function buyTickets(uint256 _lotteryId, uint256 _numTickets) external;\r\n\r\n    /**\r\n     * @notice Claim a set of winning tickets for a lottery\r\n     * @param _lotteryId: lottery id\r\n     * @param _ticketIds: array of ticket ids\r\n     * @dev Callable by users only, not contract!\r\n     */\r\n    function claimTickets(\r\n        uint256 _lotteryId,\r\n        uint256[] calldata _ticketIds\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Close lottery\r\n     * @param _lotteryId: lottery id\r\n     * @dev Callable by operator\r\n     */\r\n    function closeLottery(uint256 _lotteryId) external;\r\n\r\n    /**\r\n     * @notice Draw the final number, calculate reward in USDC per group, and make lottery claimable\r\n     * @param _lotteryId: lottery id\r\n     * @dev Callable by operator\r\n     */\r\n    function drawFinalNumberAndMakeLotteryClaimable(uint256 _lotteryId) external;\r\n\r\n    /**\r\n     * @notice Inject funds\r\n     * @param _lotteryId: lottery id\r\n     * @param _amount: amount to inject in USDC token\r\n     * @dev Callable by operator\r\n     */\r\n    function injectFunds(uint256 _lotteryId, uint256 _amount) external;\r\n\r\n    /**\r\n     * @notice Start the lottery\r\n     * @dev Callable by operator\r\n     * @param _endTime: endTime of the lottery\r\n     * @param _priceTicketInUsdc: price of a ticket in USDC\r\n     * @param _discountDivisor: the divisor to calculate the discount magnitude for bulks\r\n     */\r\n    function startLottery(\r\n        uint256 _endTime,\r\n        uint256 _priceTicketInUsdc,\r\n        uint256 _discountDivisor,\r\n        uint256 _primaryWinnerCount,\r\n        uint256 _secondaryWinnerCount,\r\n        uint256 _tertiaryWinnerCount,\r\n        uint256 _primaryRewardPercentage,\r\n        uint256 _secondaryRewardPercentage,\r\n        uint256 _tertiaryRewardPercentage\r\n    ) external;\r\n\r\n     /**\r\n     * @notice Increase the lottery duration\r\n     * @dev Callable by operator\r\n     * @param _lotteryId: lottery id\r\n     * @param _seconds: number of seconds to increase the lottery\r\n     */\r\n    function increaseTime(\r\n        uint256 _lotteryId,\r\n        uint256 _seconds\r\n    ) external;\r\n\r\n    /**\r\n     * @notice View current lottery id\r\n     */\r\n    function viewCurrentLotteryId() external returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/contracts/interfaces/IRandomNumberGenerator.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\ninterface IRandomNumberGenerator {\r\n    /**\r\n     * Requests randomness from a user-provided seed\r\n     */\r\n    function getRandomNumber() external returns (bytes32);\r\n\r\n    /**\r\n     * View latest lotteryId numbers\r\n     */\r\n    function viewLatestLotteryId() external view returns (uint256);\r\n\r\n    /**\r\n     * Views random result\r\n     */\r\n    function viewRandomResult() external view returns (uint256);\r\n}\r\n\r\n\r\n// File hardhat/console.sol@v2.18.2\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity >=0.4.22 <0.9.0;\r\n\r\nlibrary console {\r\n    address constant CONSOLE_ADDRESS =\r\n        0x000000000000000000636F6e736F6c652e6c6f67;\r\n\r\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\r\n        address consoleAddress = CONSOLE_ADDRESS;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            pop(\r\n                staticcall(\r\n                    gas(),\r\n                    consoleAddress,\r\n                    add(payload, 32),\r\n                    mload(payload),\r\n                    0,\r\n                    0\r\n                )\r\n            )\r\n        }\r\n    }\r\n\r\n    function _castToPure(\r\n      function(bytes memory) internal view fnIn\r\n    ) internal pure returns (function(bytes memory) pure fnOut) {\r\n        assembly {\r\n            fnOut := fnIn\r\n        }\r\n    }\r\n\r\n    function _sendLogPayload(bytes memory payload) internal pure {\r\n        _castToPure(_sendLogPayloadImplementation)(payload);\r\n    }\r\n\r\n    function log() internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\r\n    }\r\n    function logInt(int256 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\r\n    }\r\n\r\n    function logUint(uint256 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\r\n    }\r\n\r\n    function logString(string memory p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\r\n    }\r\n\r\n    function logBool(bool p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\r\n    }\r\n\r\n    function logAddress(address p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\r\n    }\r\n\r\n    function logBytes(bytes memory p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\r\n    }\r\n\r\n    function logBytes1(bytes1 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\r\n    }\r\n\r\n    function logBytes2(bytes2 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\r\n    }\r\n\r\n    function logBytes3(bytes3 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\r\n    }\r\n\r\n    function logBytes4(bytes4 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\r\n    }\r\n\r\n    function logBytes5(bytes5 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\r\n    }\r\n\r\n    function logBytes6(bytes6 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\r\n    }\r\n\r\n    function logBytes7(bytes7 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\r\n    }\r\n\r\n    function logBytes8(bytes8 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\r\n    }\r\n\r\n    function logBytes9(bytes9 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\r\n    }\r\n\r\n    function logBytes10(bytes10 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\r\n    }\r\n\r\n    function logBytes11(bytes11 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\r\n    }\r\n\r\n    function logBytes12(bytes12 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\r\n    }\r\n\r\n    function logBytes13(bytes13 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\r\n    }\r\n\r\n    function logBytes14(bytes14 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\r\n    }\r\n\r\n    function logBytes15(bytes15 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\r\n    }\r\n\r\n    function logBytes16(bytes16 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\r\n    }\r\n\r\n    function logBytes17(bytes17 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\r\n    }\r\n\r\n    function logBytes18(bytes18 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\r\n    }\r\n\r\n    function logBytes19(bytes19 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\r\n    }\r\n\r\n    function logBytes20(bytes20 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\r\n    }\r\n\r\n    function logBytes21(bytes21 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\r\n    }\r\n\r\n    function logBytes22(bytes22 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\r\n    }\r\n\r\n    function logBytes23(bytes23 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\r\n    }\r\n\r\n    function logBytes24(bytes24 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\r\n    }\r\n\r\n    function logBytes25(bytes25 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\r\n    }\r\n\r\n    function logBytes26(bytes26 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\r\n    }\r\n\r\n    function logBytes27(bytes27 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\r\n    }\r\n\r\n    function logBytes28(bytes28 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\r\n    }\r\n\r\n    function logBytes29(bytes29 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\r\n    }\r\n\r\n    function logBytes30(bytes30 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\r\n    }\r\n\r\n    function logBytes31(bytes31 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\r\n    }\r\n\r\n    function logBytes32(bytes32 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\r\n    }\r\n\r\n    function log(uint256 p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\r\n    }\r\n\r\n    function log(string memory p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\r\n    }\r\n\r\n    function log(bool p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\r\n    }\r\n\r\n    function log(address p0) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(uint256 p0, address p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, bool p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, address p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, string memory p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, bool p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, address p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, uint256 p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, string memory p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, bool p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, address p1) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, address p1, uint256 p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, bool p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, address p3) internal pure {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n}\r\n\r\n\r\n// File contracts/contracts/LotteryContract.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity ^0.8.20;\r\n// Original pragma directive: pragma abicoder v2\r\n\r\n\r\n\r\n\r\n\r\n\r\n/** @title Lottery.\r\n * @notice It is a contract for a lottery system using\r\n * randomness provided externally.\r\n */\r\ncontract LotteryContract is\r\n    ReentrancyGuard,\r\n    ILotteryContract,\r\n    Ownable(msg.sender)\r\n{\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public injectorAddress;\r\n    address public operatorAddress;\r\n\r\n    uint256 public currentLotteryId;\r\n    uint256 public currentTicketId;\r\n\r\n    uint256 public maxNumberTicketsPerBuyOrClaim = 100;\r\n    uint256 public maxNumberTicketsPerLottery = 1000;\r\n\r\n    // uint256 public maxPriceTicketUsdc = 50 ether;\r\n    // uint256 public minPriceTicketInUsdc = 0.005 ether;\r\n\r\n    // handle max min price in terms of 1 to 100 usdc\r\n    uint256 public maxPriceTicketUsdc = 100 * 10**6;\r\n    uint256 public minPriceTicketInUsdc = 1 * 10**6;\r\n\r\n    // uint256 public totalPossibleWinners = 61;\r\n\r\n    uint256 public constant MIN_DISCOUNT_DIVISOR = 300;\r\n    // uint256 public constant MIN_LENGTH_LOTTERY = 4 hours - 5 minutes; // 4 hours\r\n    // uint256 public constant MAX_LENGTH_LOTTERY = 4 days + 5 minutes; // 4 days\r\n\r\n    uint256 public constant MIN_LENGTH_LOTTERY = 1 minutes;\r\n    uint256 public constant MAX_LENGTH_LOTTERY = 4 days + 5 minutes; // 4 days\r\n\r\n    uint256 public constant MAX_TREASURY_FEE = 3000; // 30%\r\n\r\n    IERC20 public usdcToken;\r\n    IRandomNumberGenerator public randomGenerator;\r\n\r\n    enum Status {\r\n        Pending,\r\n        Open,\r\n        Close,\r\n        Claimable\r\n    }\r\n\r\n    enum RewardBand {\r\n        Primary,\r\n        Secondary,\r\n        Tertiary,\r\n        Default\r\n    }\r\n\r\n    struct Lottery {\r\n        Status status;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        uint256 priceTicketInUsdc;\r\n        uint256 discountDivisor;\r\n        uint256 firstTicketId;\r\n        uint256 firstTicketIdNextLottery;\r\n        uint256 amountCollectedInUsdc;\r\n        uint256 finalNumber;\r\n\r\n        uint256 primaryWinnerCount;\r\n        uint256 secondaryWinnerCount;\r\n        uint256 tertiaryWinnerCount;\r\n        \r\n        uint256 primaryRewardPercentage;\r\n        uint256 secondaryRewardPercentage;\r\n        uint256 tertiaryRewardPercentage;\r\n    }\r\n\r\n    struct Ticket {\r\n        uint256 number;\r\n        address owner;\r\n    }\r\n\r\n    struct Winner {\r\n        uint256 number;\r\n        address winner;\r\n        uint256 amount;\r\n        RewardBand rewardBand;\r\n    }\r\n\r\n    // Mapping are cheaper than arrays\r\n    mapping(uint256 => Lottery) private _lotteries;\r\n    mapping(uint256 => Ticket) private _tickets;\r\n\r\n    // Keeps track of number of ticket per unique combination for each lotteryId\r\n    mapping(uint256 => uint256) private _numberTicketsPerLotteryId;\r\n\r\n    // Keeps the ticketIds for current lotteryId\r\n    mapping(uint256 => uint256) private _ticketIdsForCurrentLotteryId; // reinitialize every lottery\r\n\r\n    // Keep track of winning ticketIds and address for a given lotteryId\r\n    mapping(uint256 => Winner[]) private _winners;\r\n    // Keep track of winner for a given lotteryId, for easier claim\r\n    mapping(address => mapping(uint256 => Winner[]))\r\n        private _winnerPerLotteryId;\r\n\r\n    // Keep track of user ticket ids for a given lotteryId\r\n    mapping(address => mapping(uint256 => uint256[]))\r\n        private _userTicketIdsPerLotteryId;\r\n\r\n    modifier notContract() {\r\n        require(!_isContract(msg.sender), \"Contract not allowed\");\r\n        require(msg.sender == tx.origin, \"Proxy contract not allowed\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(msg.sender == operatorAddress, \"Not operator\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrInjector() {\r\n        require(\r\n            (msg.sender == owner()) || (msg.sender == injectorAddress),\r\n            \"Not owner or injector\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    event AdminTokenRecovery(address token, uint256 amount);\r\n    event LotteryClose(\r\n        uint256 indexed lotteryId,\r\n        uint256 firstTicketIdNextLottery\r\n    );\r\n    event Name();\r\n    event LotteryInjection(uint256 indexed lotteryId, uint256 injectedAmount);\r\n    event LotteryOpen(\r\n        uint256 indexed lotteryId,\r\n        uint256 startTime,\r\n        uint256 endTime,\r\n        uint256 priceTicketInUsdc,\r\n        uint256 firstTicketId\r\n    );\r\n    event LotteryNumberDrawn(\r\n        uint256 indexed lotteryId,\r\n        uint256 finalNumber,\r\n        uint256 countWinningTickets\r\n    );\r\n    event NewOperatorAndTreasuryAndInjectorAddresses(\r\n        address operator,\r\n        address injector\r\n    );\r\n    event NewRandomGenerator(address indexed randomGenerator);\r\n    event TicketsPurchase(\r\n        address indexed buyer,\r\n        uint256 indexed lotteryId,\r\n        uint256 ticketId\r\n    );\r\n    event TicketsClaim(\r\n        address indexed claimer,\r\n        uint256 amount,\r\n        uint256 indexed lotteryId,\r\n        uint256 numberTickets\r\n    );\r\n\r\n    event RequestedRandomness(bytes32 requestId);\r\n\r\n    event LotteryTimeIncrease(uint256 _lotteryId, uint256 _currentEndTime);\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @dev RandomNumberGenerator must be deployed prior to this contract\r\n     * @param _usdcTokenAddress: address of the USDC token\r\n     * @param _randomGeneratorAddress: address of the RandomGenerator contract used to work with ChainLink VRF\r\n     */\r\n    constructor(address _usdcTokenAddress, address _randomGeneratorAddress) {\r\n        usdcToken = IERC20(_usdcTokenAddress);\r\n        randomGenerator = IRandomNumberGenerator(_randomGeneratorAddress);\r\n\r\n        currentTicketId = 1;\r\n        // currentLotteryId = 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Buy tickets for the current lottery\r\n     * @param _lotteryId: lotteryId\r\n     * @param _numTickets: array of ticket numbers between 1,000,000 and 1,999,999\r\n     * @dev Callable by users\r\n     */\r\n    function buyTickets(\r\n        uint256 _lotteryId,\r\n        uint256 _numTickets\r\n    ) external override notContract nonReentrant {\r\n        require(_numTickets != 0, \"No ticket specified\");\r\n        require(\r\n            _numTickets <= maxNumberTicketsPerBuyOrClaim,\r\n            \"Too many tickets\"\r\n        );\r\n\r\n        require(\r\n            _lotteries[_lotteryId].status == Status.Open,\r\n            \"Lottery is not open\"\r\n        );\r\n        require(\r\n            block.timestamp < _lotteries[_lotteryId].endTime,\r\n            \"Lottery is over\"\r\n        );\r\n        require(\r\n            _numberTicketsPerLotteryId[_lotteryId] + _numTickets <=\r\n                maxNumberTicketsPerLottery,\r\n            \"Too many tickets\"\r\n        );\r\n\r\n        // Calculate number of USDC to this contract\r\n        uint256 amountUsdcToTransfer = _calculateTotalPriceForBulkTickets(\r\n            _lotteries[_lotteryId].discountDivisor,\r\n            _lotteries[_lotteryId].priceTicketInUsdc,\r\n            _numTickets\r\n        );\r\n\r\n        // Transfer usdc tokens to this contract\r\n        usdcToken.safeTransferFrom(\r\n            address(msg.sender),\r\n            address(this),\r\n            amountUsdcToTransfer\r\n        );\r\n\r\n        // Increment the total amount collected for the lottery round\r\n        _lotteries[_lotteryId].amountCollectedInUsdc += amountUsdcToTransfer;\r\n\r\n        for (uint256 i = 0; i < _numTickets; i++) {\r\n            // require((thisTicketNumber >= 1000000) && (thisTicketNumber <= 1999999), \"Outside range\");\r\n\r\n            _numberTicketsPerLotteryId[_lotteryId]++;\r\n\r\n            _userTicketIdsPerLotteryId[msg.sender][_lotteryId].push(\r\n                currentTicketId\r\n            );\r\n\r\n            _tickets[currentTicketId] = Ticket({\r\n                number: currentTicketId,\r\n                owner: msg.sender\r\n            });\r\n\r\n            _ticketIdsForCurrentLotteryId[currentTicketId] = 1;\r\n\r\n            // Increase lottery ticket number\r\n            emit TicketsPurchase(msg.sender, _lotteryId, currentTicketId );\r\n            currentTicketId++;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @notice Claim a set of winning tickets for a lottery\r\n     * @param _lotteryId: lottery id\r\n     * @param _ticketIds: array of ticket ids\r\n     * @dev Callable by users only, not contract!\r\n     */\r\n    function claimTickets(\r\n        uint256 _lotteryId,\r\n        uint256[] calldata _ticketIds\r\n    ) external override notContract nonReentrant {\r\n        require(_ticketIds.length != 0, \"Length must be >0\");\r\n        require(\r\n            _ticketIds.length <= maxNumberTicketsPerBuyOrClaim,\r\n            \"Too many tickets\"\r\n        );\r\n        require(\r\n            _lotteries[_lotteryId].status == Status.Claimable,\r\n            \"Lottery not claimable\"\r\n        );\r\n\r\n        // Initializes the rewardInUsdcToTransfer\r\n        uint256 rewardInUsdcToTransfer;\r\n\r\n        for (uint256 i = 0; i < _ticketIds.length; i++) {\r\n            uint256 thisTicketId = _ticketIds[i];\r\n\r\n            require(\r\n                _lotteries[_lotteryId].firstTicketIdNextLottery > thisTicketId,\r\n                \"TicketId too high\"\r\n            );\r\n            require(\r\n                _lotteries[_lotteryId].firstTicketId <= thisTicketId,\r\n                \"TicketId too low\"\r\n            );\r\n            require(\r\n                msg.sender == _tickets[thisTicketId].owner,\r\n                \"Not the owner\"\r\n            );\r\n\r\n            // Update the lottery ticket owner to 0x address\r\n            _tickets[thisTicketId].owner = address(0);\r\n\r\n            uint256 rewardForTicketId = _calculateRewardsForTicketId(\r\n                msg.sender,\r\n                _lotteryId,\r\n                thisTicketId\r\n            );\r\n\r\n            \r\n            if (rewardForTicketId == 0) {\r\n                continue;\r\n            }\r\n\r\n            // Increment the reward to transfer\r\n            rewardInUsdcToTransfer += rewardForTicketId;\r\n        }\r\n\r\n        // Transfer money to msg.sender\r\n        usdcToken.safeTransfer(msg.sender, rewardInUsdcToTransfer);\r\n\r\n        emit TicketsClaim(\r\n            msg.sender,\r\n            rewardInUsdcToTransfer,\r\n            _lotteryId,\r\n            _ticketIds.length\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Close lottery\r\n     * @param _lotteryId: lottery id\r\n     * @dev Callable by operator\r\n     */\r\n    function closeLottery(\r\n        uint256 _lotteryId\r\n    ) external override onlyOperator nonReentrant {\r\n        require(\r\n            _lotteries[_lotteryId].status == Status.Open,\r\n            \"Lottery not open\"\r\n        );\r\n        require(\r\n            block.timestamp > _lotteries[_lotteryId].endTime,\r\n            \"Lottery not over\"\r\n        );\r\n        // check if we have atleast 61 tickets\r\n        uint256 totalPossibleWinners = _lotteries[_lotteryId]\r\n            .primaryWinnerCount +\r\n            _lotteries[_lotteryId].secondaryWinnerCount +\r\n            _lotteries[_lotteryId].tertiaryWinnerCount;\r\n\r\n        require(\r\n            _numberTicketsPerLotteryId[_lotteryId] >= totalPossibleWinners ,\r\n            \"Not enough tickets\"\r\n        );\r\n\r\n        _lotteries[_lotteryId].firstTicketIdNextLottery = currentTicketId;\r\n\r\n        _lotteries[_lotteryId].status = Status.Close;\r\n        emit LotteryClose(_lotteryId, currentTicketId);\r\n\r\n        // Request a random number from the generator based on a seed\r\n        bytes32 randomRequestId = randomGenerator.getRandomNumber();\r\n\r\n        emit RequestedRandomness(randomRequestId);\r\n    }\r\n\r\n    /**\r\n     * @notice Draw the final number, calculate reward in USDC per group, and make lottery claimable\r\n     * @param _lotteryId: lottery id\r\n     * @dev Callable by operator\r\n     */\r\n    function drawFinalNumberAndMakeLotteryClaimable(\r\n        uint256 _lotteryId\r\n    ) external override onlyOperator nonReentrant {\r\n        require(\r\n            _lotteries[_lotteryId].status == Status.Close,\r\n            \"Lottery not close\"\r\n        );\r\n        require(\r\n            _lotteryId == randomGenerator.viewLatestLotteryId(),\r\n            \"Numbers not drawn\"\r\n        );\r\n\r\n        uint256 finalNumber = randomGenerator.viewRandomResult();\r\n\r\n        uint256 amountToShareToWinners = _lotteries[_lotteryId]\r\n            .amountCollectedInUsdc;\r\n\r\n        /**\r\n         * There would be a total of 61 winners per lottery:\r\n         * - 1 Ticket will get 50% of the reward pool amountToShareToWinners\r\n         * - 10 Tickets will get 30% of the reward pool amountToShareToWinners\r\n         * - 50 Tickets will get 20% of the reward pool amountToShareToWinners\r\n         *\r\n         *\r\n         *\r\n         * The range of eligible tickets is:\r\n         * _lotteries[_lotteryId].firstTicketId to _lotteries[_lotteryId].firstTicketIdNextLottery - 1\r\n         *\r\n         */\r\n\r\n        uint256 rangeStart = _lotteries[_lotteryId].firstTicketId;\r\n        uint256 rangeEnd = _lotteries[_lotteryId].firstTicketIdNextLottery - 1;\r\n\r\n        mapping(uint256 => uint256)\r\n            storage ticketIdsForCurrentLotteryId = _ticketIdsForCurrentLotteryId;\r\n\r\n        uint256 seed = 0;\r\n        uint256 winnerSelected = 0;\r\n\r\n        uint256 amountToShareToPrimaryWinner = (amountToShareToWinners *\r\n            _lotteries[_lotteryId].primaryRewardPercentage) /\r\n            100 /\r\n            _lotteries[_lotteryId].primaryWinnerCount;\r\n        uint256 amountToShareToSecondaryWinner = (amountToShareToWinners *\r\n            _lotteries[_lotteryId].secondaryRewardPercentage) /\r\n            100 /\r\n            _lotteries[_lotteryId].secondaryWinnerCount;\r\n        uint256 amountToShareToTertiaryWinner = (amountToShareToWinners *\r\n            _lotteries[_lotteryId].tertiaryRewardPercentage) /\r\n            100 /\r\n            _lotteries[_lotteryId].tertiaryWinnerCount;\r\n\r\n        {\r\n            while (winnerSelected < _lotteries[_lotteryId].primaryWinnerCount) {\r\n                uint256 randomNumberInRange = getRandomNumberInRange(\r\n                    finalNumber,\r\n                    seed,\r\n                    rangeStart,\r\n                    rangeEnd\r\n                );\r\n\r\n                // Check if the ticket is eligible for a prize\r\n                if (ticketIdsForCurrentLotteryId[randomNumberInRange] != 0) {\r\n                    if (_tickets[randomNumberInRange].owner != address(0)) {\r\n                        // Check if the ticket is eligible for a prize\r\n                        // 1 Ticket will get 50% of the reward pool amountToShareToWinners\r\n                        ticketIdsForCurrentLotteryId[randomNumberInRange] = 0;\r\n                        _winners[_lotteryId].push(\r\n                            Winner({\r\n                                number: randomNumberInRange,\r\n                                winner: _tickets[randomNumberInRange].owner,\r\n                                amount: amountToShareToPrimaryWinner,\r\n                                rewardBand: RewardBand.Primary\r\n                            })\r\n                        );\r\n\r\n                        _winnerPerLotteryId[\r\n                            _tickets[randomNumberInRange].owner\r\n                        ][_lotteryId].push(\r\n                                Winner({\r\n                                    number: randomNumberInRange,\r\n                                    winner: _tickets[randomNumberInRange].owner,\r\n                                    amount: amountToShareToPrimaryWinner,\r\n                                    rewardBand: RewardBand.Primary\r\n                                })\r\n                            );\r\n\r\n                        winnerSelected++;\r\n                    }\r\n                }\r\n\r\n                seed++;\r\n            }\r\n        }\r\n\r\n        winnerSelected = 0;\r\n\r\n        {\r\n            while (\r\n                winnerSelected < _lotteries[_lotteryId].secondaryWinnerCount\r\n            ) {\r\n                uint256 randomNumberInRange = getRandomNumberInRange(\r\n                    finalNumber,\r\n                    seed,\r\n                    rangeStart,\r\n                    rangeEnd\r\n                );\r\n\r\n                // Check if the ticket is eligible for a prize\r\n                if (ticketIdsForCurrentLotteryId[randomNumberInRange] != 0) {\r\n                    if (_tickets[randomNumberInRange].owner != address(0)) {\r\n                        // Check if the ticket is eligible for a prize\r\n                        // 1 Ticket will get 50% of the reward pool amountToShareToWinners\r\n                        ticketIdsForCurrentLotteryId[randomNumberInRange] = 0;\r\n                        _winners[_lotteryId].push(\r\n                            Winner({\r\n                                number: randomNumberInRange,\r\n                                winner: _tickets[randomNumberInRange].owner,\r\n                                amount: amountToShareToSecondaryWinner,\r\n                                rewardBand: RewardBand.Secondary\r\n                            })\r\n                        );\r\n\r\n                        _winnerPerLotteryId[\r\n                            _tickets[randomNumberInRange].owner\r\n                        ][_lotteryId].push(\r\n                                Winner({\r\n                                    number: randomNumberInRange,\r\n                                    winner: _tickets[randomNumberInRange].owner,\r\n                                    amount: amountToShareToSecondaryWinner,\r\n                                    rewardBand: RewardBand.Secondary\r\n                                })\r\n                            );\r\n\r\n                        winnerSelected++;\r\n                    }\r\n                }\r\n\r\n                seed++;\r\n            }\r\n        }\r\n\r\n        winnerSelected = 0;\r\n\r\n        {\r\n            while (\r\n                winnerSelected < _lotteries[_lotteryId].tertiaryWinnerCount\r\n            ) {\r\n                uint256 randomNumberInRange = getRandomNumberInRange(\r\n                    finalNumber,\r\n                    seed,\r\n                    rangeStart,\r\n                    rangeEnd\r\n                );\r\n\r\n                // Check if the ticket is eligible for a prize\r\n                if (ticketIdsForCurrentLotteryId[randomNumberInRange] != 0) {\r\n                    if (_tickets[randomNumberInRange].owner != address(0)) {\r\n                        // 1 Ticket will get 50% of the reward pool amountToShareToWinners\r\n                        ticketIdsForCurrentLotteryId[randomNumberInRange] = 0;\r\n                        _winners[_lotteryId].push(\r\n                            Winner({\r\n                                number: randomNumberInRange,\r\n                                winner: _tickets[randomNumberInRange].owner,\r\n                                amount: amountToShareToTertiaryWinner,\r\n                                rewardBand: RewardBand.Tertiary\r\n                            })\r\n                        );\r\n\r\n                        _winnerPerLotteryId[\r\n                            _tickets[randomNumberInRange].owner\r\n                        ][_lotteryId].push(\r\n                                Winner({\r\n                                    number: randomNumberInRange,\r\n                                    winner: _tickets[randomNumberInRange].owner,\r\n                                    amount: amountToShareToTertiaryWinner,\r\n                                    rewardBand: RewardBand.Tertiary\r\n                                })\r\n                            );\r\n\r\n                        winnerSelected++;\r\n                    }\r\n                }\r\n\r\n                seed++;\r\n            }\r\n        }\r\n\r\n        // Update internal statuses for lottery\r\n        _lotteries[_lotteryId].finalNumber = finalNumber;\r\n        _lotteries[_lotteryId].status = Status.Claimable;\r\n\r\n        emit LotteryNumberDrawn(\r\n            currentLotteryId,\r\n            finalNumber,\r\n            _winners[_lotteryId].length\r\n        );\r\n    }\r\n\r\n    function getRandomNumberInRange(\r\n        uint256 _finalNumber,\r\n        uint256 _seed,\r\n        uint256 _rangeStart,\r\n        uint256 _rangeEnd\r\n    ) internal pure returns (uint256) {\r\n        // uint256 randomNumberInRange = uint256(keccak256(abi.encodePacked(_finalNumber, _rangeStart, _rangeEnd, _seed))) % (_rangeEnd - _rangeStart + 1) + _rangeStart;\r\n        // use blocktime\r\n        // uint256 randomNumberInRange = uint256(keccak256(abi.encodePacked(_finalNumber, _seed, block.timestamp))) % (_rangeEnd - _rangeStart + 1) + _rangeStart;\r\n        uint256 randomNumberInRange = (uint256(\r\n            keccak256(abi.encodePacked(_finalNumber, _seed))\r\n        ) % (_rangeEnd - _rangeStart + 1)) + _rangeStart;\r\n        return randomNumberInRange;\r\n    }\r\n\r\n    /**\r\n     * @notice Change the random generator\r\n     * @dev The calls to functions are used to verify the new generator implements them properly.\r\n     * It is necessary to wait for the VRF response before starting a round.\r\n     * Callable only by the contract owner\r\n     * @param _randomGeneratorAddress: address of the random generator\r\n     */\r\n    function changeRandomGenerator(\r\n        address _randomGeneratorAddress\r\n    ) external onlyOwner {\r\n        require(\r\n            _lotteries[currentLotteryId].status == Status.Claimable,\r\n            \"Lottery not in claimable\"\r\n        );\r\n\r\n        // Request a random number from the generator based on a seed\r\n        IRandomNumberGenerator(_randomGeneratorAddress).getRandomNumber();\r\n\r\n        // Calculate the finalNumber based on the randomResult generated by ChainLink's fallback\r\n        IRandomNumberGenerator(_randomGeneratorAddress).viewRandomResult();\r\n\r\n        randomGenerator = IRandomNumberGenerator(_randomGeneratorAddress);\r\n\r\n        emit NewRandomGenerator(_randomGeneratorAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice Inject funds\r\n     * @param _lotteryId: lottery id\r\n     * @param _amount: amount to inject in USDC token\r\n     * @dev Callable by owner or injector address\r\n     */\r\n    function injectFunds(\r\n        uint256 _lotteryId,\r\n        uint256 _amount\r\n    ) external override onlyOwnerOrInjector {\r\n        require(\r\n            _lotteries[_lotteryId].status == Status.Open,\r\n            \"Lottery not open\"\r\n        );\r\n\r\n        usdcToken.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n        _lotteries[_lotteryId].amountCollectedInUsdc += _amount;\r\n\r\n        emit LotteryInjection(_lotteryId, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Start the lottery\r\n     * @dev Callable by operator\r\n     * @param _endTime: endTime of the lottery\r\n     * @param _priceTicketInUsdc: price of a ticket in USDC\r\n     * @param _discountDivisor: the divisor to calculate the discount magnitude for bulks\r\n     */\r\n    function startLottery(\r\n        uint256 _endTime,\r\n        uint256 _priceTicketInUsdc,\r\n        uint256 _discountDivisor,\r\n        uint256 _primaryWinnerCount,\r\n        uint256 _secondaryWinnerCount,\r\n        uint256 _tertiaryWinnerCount,\r\n        uint256 _primaryRewardPercentage,\r\n        uint256 _secondaryRewardPercentage,\r\n        uint256 _tertiaryRewardPercentage\r\n    ) external override onlyOperator {\r\n        require(\r\n            (currentLotteryId == 0) ||\r\n                (_lotteries[currentLotteryId].status == Status.Claimable),\r\n            \"Not time to start lottery\"\r\n        );\r\n\r\n        require(\r\n            ((_endTime - block.timestamp) > MIN_LENGTH_LOTTERY) &&\r\n                ((_endTime - block.timestamp) < MAX_LENGTH_LOTTERY),\r\n            \"Lottery length outside of range\"\r\n        );\r\n\r\n        require(\r\n            (_priceTicketInUsdc >= minPriceTicketInUsdc) &&\r\n                (_priceTicketInUsdc <= maxPriceTicketUsdc),\r\n            \"Outside of limits\"\r\n        );\r\n\r\n        require(\r\n            _discountDivisor >= MIN_DISCOUNT_DIVISOR,\r\n            \"Discount divisor too low\"\r\n        );\r\n        // require(_treasuryFee <= MAX_TREASURY_FEE, \"Treasury fee too high\");\r\n\r\n        require(_primaryWinnerCount > 0, \"Primary winner count must be > 0\");\r\n        require(\r\n            _secondaryWinnerCount > 0,\r\n            \"Secondary winner count must be > 0\"\r\n        );\r\n        require(_tertiaryWinnerCount > 0, \"Tertiary winner count must be > 0\");\r\n\r\n        // make sure primary reward percentage is the highest\r\n        // secondary reward percentage is the second highest\r\n        // tertiary reward percentage is the lowest\r\n        // and the sum of all three is 100\r\n\r\n        require(\r\n            _primaryRewardPercentage > _secondaryRewardPercentage,\r\n            \"Primary reward percentage must be higher than secondary\"\r\n        );\r\n        require(\r\n            _secondaryRewardPercentage > _tertiaryRewardPercentage,\r\n            \"Secondary reward percentage must be higher than tertiary\"\r\n        );\r\n        require(\r\n            _primaryRewardPercentage +\r\n                _secondaryRewardPercentage +\r\n                _tertiaryRewardPercentage ==\r\n                100,\r\n            \"Sum of all three must be 100\"\r\n        );\r\n\r\n        // total possible winners\r\n\r\n        currentLotteryId++;\r\n\r\n        _lotteries[currentLotteryId] = Lottery({\r\n            status: Status.Open,\r\n            startTime: block.timestamp,\r\n            endTime: _endTime,\r\n            priceTicketInUsdc: _priceTicketInUsdc,\r\n            discountDivisor: _discountDivisor,\r\n            firstTicketId: currentTicketId,\r\n            firstTicketIdNextLottery: currentTicketId,\r\n            amountCollectedInUsdc: 0,\r\n            finalNumber: 0,\r\n\r\n            primaryWinnerCount: _primaryWinnerCount,\r\n            secondaryWinnerCount: _secondaryWinnerCount,\r\n            tertiaryWinnerCount: _tertiaryWinnerCount,\r\n\r\n            primaryRewardPercentage: _primaryRewardPercentage,\r\n            secondaryRewardPercentage: _secondaryRewardPercentage,\r\n            tertiaryRewardPercentage: _tertiaryRewardPercentage\r\n        });\r\n\r\n        emit LotteryOpen(\r\n            currentLotteryId,\r\n            block.timestamp,\r\n            _endTime,\r\n            _priceTicketInUsdc,\r\n            currentTicketId\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Increase the lottery duration\r\n     * @dev Callable by operator\r\n     * @param _lotteryId: lottery id\r\n     * @param _seconds: number of seconds to increase the lottery\r\n     */\r\n    function increaseTime(\r\n        uint256 _lotteryId,\r\n        uint256 _seconds\r\n    ) external onlyOperator {\r\n        require(\r\n            _lotteries[_lotteryId].status == Status.Open,\r\n            \"Lottery not open\"\r\n        );\r\n\r\n        _lotteries[_lotteryId].endTime += _seconds;\r\n\r\n        emit LotteryTimeIncrease(_lotteryId, _lotteries[_lotteryId].endTime);\r\n    }\r\n\r\n    /**\r\n     * @notice It allows the admin to recover wrong tokens sent to the contract\r\n     * @param _tokenAddress: the address of the token to withdraw\r\n     * @param _tokenAmount: the number of token amount to withdraw\r\n     * @dev Only callable by owner.\r\n     */\r\n    function recoverWrongTokens(\r\n        address _tokenAddress,\r\n        uint256 _tokenAmount\r\n    ) external onlyOwner {\r\n        require(_tokenAddress != address(usdcToken), \"Cannot be USDC token\");\r\n\r\n        IERC20(_tokenAddress).safeTransfer(address(msg.sender), _tokenAmount);\r\n\r\n        emit AdminTokenRecovery(_tokenAddress, _tokenAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Set USDC price ticket upper/lower limit\r\n     * @dev Only callable by owner\r\n     * @param _minPriceTicketInUsdc: minimum price of a ticket in USDC\r\n     * @param _maxPriceTicketInUsdc: maximum price of a ticket in USDC\r\n     */\r\n    function setMinAndMaxTicketPriceInUsdc(\r\n        uint256 _minPriceTicketInUsdc,\r\n        uint256 _maxPriceTicketInUsdc\r\n    ) external onlyOwner {\r\n        require(\r\n            _minPriceTicketInUsdc <= _maxPriceTicketInUsdc,\r\n            \"minPrice must be < maxPrice\"\r\n        );\r\n\r\n        minPriceTicketInUsdc = _minPriceTicketInUsdc;\r\n        maxPriceTicketUsdc = _maxPriceTicketInUsdc;\r\n    }\r\n\r\n    /**\r\n     * @notice Set max number of tickets\r\n     * @dev Only callable by owner\r\n     */\r\n    function setMaxNumberTicketsPerBuy(\r\n        uint256 _maxNumberTicketsPerBuy\r\n    ) external onlyOwner {\r\n        require(_maxNumberTicketsPerBuy != 0, \"Must be > 0\");\r\n        maxNumberTicketsPerBuyOrClaim = _maxNumberTicketsPerBuy;\r\n    }\r\n\r\n    /**\r\n     * @notice Set max number of tickets per lottery\r\n     * @dev Only callable by owner\r\n     */\r\n    function setMaxNumberTicketsPerLottery(\r\n        uint256 _maxNumberTicketsPerLottery\r\n    ) external onlyOwner {\r\n        require(_maxNumberTicketsPerLottery != 0, \"Must be > 0\");\r\n        maxNumberTicketsPerLottery = _maxNumberTicketsPerLottery;\r\n    }\r\n\r\n    /**\r\n     * @notice Set operator, treasury, and injector addresses\r\n     * @dev Only callable by owner\r\n     * @param _operatorAddress: address of the operator\r\n     * @param _injectorAddress: address of the injector\r\n     */\r\n    function setOperatorAndInjectorAddresses(\r\n        address _operatorAddress,\r\n        address _injectorAddress\r\n    ) external onlyOwner {\r\n        require(_operatorAddress != address(0), \"Cannot be zero address\");\r\n        require(_injectorAddress != address(0), \"Cannot be zero address\");\r\n\r\n        operatorAddress = _operatorAddress;\r\n        injectorAddress = _injectorAddress;\r\n\r\n        emit NewOperatorAndTreasuryAndInjectorAddresses(\r\n            _operatorAddress,\r\n            _injectorAddress\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate price of a set of tickets\r\n     * @param _discountDivisor: divisor for the discount\r\n     * @param _priceTicket price of a ticket (in USDC)\r\n     * @param _numberTickets number of tickets to buy\r\n     */\r\n    function calculateTotalPriceForBulkTickets(\r\n        uint256 _discountDivisor,\r\n        uint256 _priceTicket,\r\n        uint256 _numberTickets\r\n    ) external pure returns (uint256) {\r\n        require(\r\n            _discountDivisor >= MIN_DISCOUNT_DIVISOR,\r\n            \"Must be >= MIN_DISCOUNT_DIVISOR\"\r\n        );\r\n        require(_numberTickets != 0, \"Number of tickets must be > 0\");\r\n\r\n        return\r\n            _calculateTotalPriceForBulkTickets(\r\n                _discountDivisor,\r\n                _priceTicket,\r\n                _numberTickets\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice View current lottery id\r\n     */\r\n    function viewCurrentLotteryId() external view override returns (uint256) {\r\n        return currentLotteryId;\r\n    }\r\n\r\n    /**\r\n     * @notice View lottery information\r\n     * @param _lotteryId: lottery id\r\n     */\r\n    function viewLottery(\r\n        uint256 _lotteryId\r\n    ) external view returns (Lottery memory) {\r\n        return _lotteries[_lotteryId];\r\n    }\r\n\r\n    /**\r\n     * @notice View lottery information for the current lottery\r\n     */\r\n    function viewWinnersForLotteryId(\r\n        uint256 _lotteryId\r\n    ) external view returns (Winner[] memory) {\r\n        return _winners[_lotteryId];\r\n    }\r\n\r\n    /**\r\n     * @notice View lottery information for the current lottery\r\n     */\r\n    function viewWinnersForLotteryWithCursor(\r\n        uint256 _lotteryId,\r\n        uint256 _cursor,\r\n        uint256 _size\r\n    ) external view returns (Winner[] memory, uint256) {\r\n        uint256 length = _size;\r\n        uint256 numberWinners = _winners[_lotteryId].length;\r\n\r\n        if (length > (numberWinners - _cursor)) {\r\n            length = numberWinners - _cursor;\r\n        }\r\n\r\n        Winner[] memory winners = new Winner[](length);\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            winners[i] = _winners[_lotteryId][i + _cursor];\r\n        }\r\n\r\n        return (winners, _cursor + length);\r\n    }\r\n\r\n    /**\r\n     * @notice View ticker statuses and numbers for an array of ticket ids\r\n     * @param _ticketIds: array of _ticketId\r\n     */\r\n    function viewNumbersAndStatusesForTicketIds(\r\n        uint256[] calldata _ticketIds\r\n    ) external view returns (uint256[] memory, bool[] memory) {\r\n        uint256 length = _ticketIds.length;\r\n        uint256[] memory ticketNumbers = new uint256[](length);\r\n        bool[] memory ticketStatuses = new bool[](length);\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            ticketNumbers[i] = _tickets[_ticketIds[i]].number;\r\n            if (_tickets[_ticketIds[i]].owner == address(0)) {\r\n                ticketStatuses[i] = true;\r\n            } else {\r\n                ticketStatuses[i] = false;\r\n            }\r\n        }\r\n\r\n        return (ticketNumbers, ticketStatuses);\r\n    }\r\n\r\n    /**\r\n     * @notice View rewards for a given ticket, providing a bracket, and lottery id\r\n     * @dev Computations are mostly offchain. This is used to verify a ticket!\r\n     * @param _user: user address\r\n     * @param _lotteryId: lottery id\r\n     * @param _ticketId: ticket id\r\n     */\r\n    function viewRewardsForTicketId(\r\n        address _user,\r\n        uint256 _lotteryId,\r\n        uint256 _ticketId\r\n    ) external view returns (uint256) {\r\n        // Check lottery is in claimable status\r\n        if (_lotteries[_lotteryId].status != Status.Claimable) {\r\n            return 0;\r\n        }\r\n\r\n        // Check ticketId is within range\r\n        if (\r\n            (_lotteries[_lotteryId].firstTicketIdNextLottery < _ticketId) &&\r\n            (_lotteries[_lotteryId].firstTicketId >= _ticketId)\r\n        ) {\r\n            return 0;\r\n        }\r\n\r\n        return _calculateRewardsForTicketId(_user, _lotteryId, _ticketId);\r\n    }\r\n\r\n    /**\r\n     * @notice View rewards for a given set of tickets, providing a bracket, and lottery id\r\n     * @dev Computations are mostly offchain. This is used to verify a ticket!\r\n     * @param _user: user address\r\n     * @param _lotteryId: lottery id\r\n     * @param _ticketId: array of ticket ids\r\n     */\r\n\r\n    function viewRewardsForTicketIds(\r\n        address _user,\r\n        uint256 _lotteryId,\r\n        uint256[] calldata _ticketId\r\n    ) external view returns (uint256) {\r\n        // Check lottery is in claimable status\r\n        if (_lotteries[_lotteryId].status != Status.Claimable) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 totalRewards = 0;\r\n\r\n        for (uint256 i = 0; i < _ticketId.length; i++) {\r\n            totalRewards += _calculateRewardsForTicketId(\r\n                _user,\r\n                _lotteryId,\r\n                _ticketId[i]\r\n            );\r\n        }\r\n\r\n        return totalRewards;\r\n    }\r\n\r\n    /**\r\n     * @notice View all user ticket ids for a given lotteryId\r\n     * @param _user: user address\r\n     * @param _lotteryId: lottery id\r\n     */\r\n\r\n    function viewRewardsForUser(\r\n        address _user,\r\n        uint256 _lotteryId\r\n    ) external view returns (uint256) {\r\n        // Check lottery is in claimable status\r\n        if (_lotteries[_lotteryId].status != Status.Claimable) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 totalRewards = 0;\r\n\r\n        for (\r\n            uint256 i = 0;\r\n            i < _userTicketIdsPerLotteryId[_user][_lotteryId].length;\r\n            i++\r\n        ) {\r\n            totalRewards += _calculateRewardsForTicketId(\r\n                _user,\r\n                _lotteryId,\r\n                _userTicketIdsPerLotteryId[_user][_lotteryId][i]\r\n            );\r\n        }\r\n\r\n        return totalRewards;\r\n    }\r\n\r\n    /**\r\n     * @notice View user ticket ids, numbers, and statuses of user for a given lottery\r\n     * @param _user: user address\r\n     * @param _lotteryId: lottery id\r\n     * @param _cursor: cursor to start where to retrieve the tickets\r\n     * @param _size: the number of tickets to retrieve\r\n     */\r\n    function viewUserInfoForLotteryId(\r\n        address _user,\r\n        uint256 _lotteryId,\r\n        uint256 _cursor,\r\n        uint256 _size\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256[] memory,\r\n            bool[] memory,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 length = _size;\r\n        uint256 numberTicketsBoughtAtLotteryId = _userTicketIdsPerLotteryId[\r\n            _user\r\n        ][_lotteryId].length;\r\n\r\n        if (length > (numberTicketsBoughtAtLotteryId - _cursor)) {\r\n            length = numberTicketsBoughtAtLotteryId - _cursor;\r\n        }\r\n\r\n        uint256[] memory lotteryTicketIds = new uint256[](length);\r\n        bool[] memory ticketStatuses = new bool[](length);\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            lotteryTicketIds[i] = _userTicketIdsPerLotteryId[_user][_lotteryId][\r\n                i + _cursor\r\n            ];\r\n            // True = ticket claimed\r\n            if (_tickets[lotteryTicketIds[i]].owner == address(0)) {\r\n                ticketStatuses[i] = true;\r\n            } else {\r\n                // ticket not claimed (includes the ones that cannot be claimed)\r\n                ticketStatuses[i] = false;\r\n            }\r\n        }\r\n\r\n        return (lotteryTicketIds, ticketStatuses, _cursor + length);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate rewards for a given ticket\r\n     * @param _lotteryId: lottery id\r\n     * @param _ticketId: ticket id\r\n     */\r\n    function _calculateRewardsForTicketId(\r\n        address _user,\r\n        uint256 _lotteryId,\r\n        uint256 _ticketId\r\n    ) internal view returns (uint256) {\r\n        bool isValidTicket = false;\r\n        uint256 winningAmount = 0;\r\n\r\n        if (_winnerPerLotteryId[_user][_lotteryId].length == 0) {\r\n            isValidTicket = false;\r\n        } else {\r\n            for (\r\n                uint256 i = 0;\r\n                i < _winnerPerLotteryId[_user][_lotteryId].length;\r\n                i++\r\n            ) {\r\n                if (\r\n                    _winnerPerLotteryId[_user][_lotteryId][i].number ==\r\n                    _ticketId\r\n                ) {\r\n                    isValidTicket = true;\r\n                    winningAmount = _winnerPerLotteryId[_user][_lotteryId][i]\r\n                        .amount;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!isValidTicket) {\r\n            return 0;\r\n        }\r\n\r\n        return winningAmount;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate final price for bulk of tickets\r\n     * @param _discountDivisor: divisor for the discount (the smaller it is, the greater the discount is)\r\n     * @param _priceTicket: price of a ticket\r\n     * @param _numberTickets: number of tickets purchased\r\n     */\r\n    function _calculateTotalPriceForBulkTickets(\r\n        uint256 _discountDivisor,\r\n        uint256 _priceTicket,\r\n        uint256 _numberTickets\r\n    ) internal pure returns (uint256) {\r\n        \r\n        return (_priceTicket *\r\n            _numberTickets *\r\n            (_discountDivisor + 1 - _numberTickets)) / _discountDivisor;\r\n    }\r\n\r\n    /**\r\n     * @notice Check if an address is a contract\r\n     */\r\n    function _isContract(address _addr) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw USDC from the contract (Callable by owner)\r\n     */\r\n    function withdrawAllUsdc() external onlyOwner {\r\n        uint256 balance = usdcToken.balanceOf(address(this));\r\n        usdcToken.safeTransfer(msg.sender, balance);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw native token from the contract (Callable by owner)\r\n     */\r\n    function withdrawAllNative() external onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        payable(msg.sender).transfer(balance);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdcTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_randomGeneratorAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminTokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"firstTicketIdNextLottery\",\"type\":\"uint256\"}],\"name\":\"LotteryClose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"injectedAmount\",\"type\":\"uint256\"}],\"name\":\"LotteryInjection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"countWinningTickets\",\"type\":\"uint256\"}],\"name\":\"LotteryNumberDrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceTicketInUsdc\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"firstTicketId\",\"type\":\"uint256\"}],\"name\":\"LotteryOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_currentEndTime\",\"type\":\"uint256\"}],\"name\":\"LotteryTimeIncrease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Name\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"injector\",\"type\":\"address\"}],\"name\":\"NewOperatorAndTreasuryAndInjectorAddresses\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"randomGenerator\",\"type\":\"address\"}],\"name\":\"NewRandomGenerator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"RequestedRandomness\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberTickets\",\"type\":\"uint256\"}],\"name\":\"TicketsClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"TicketsPurchase\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_LENGTH_LOTTERY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TREASURY_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_DISCOUNT_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_LENGTH_LOTTERY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numTickets\",\"type\":\"uint256\"}],\"name\":\"buyTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_discountDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceTicket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numberTickets\",\"type\":\"uint256\"}],\"name\":\"calculateTotalPriceForBulkTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_randomGeneratorAddress\",\"type\":\"address\"}],\"name\":\"changeRandomGenerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_ticketIds\",\"type\":\"uint256[]\"}],\"name\":\"claimTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"}],\"name\":\"closeLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentLotteryId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTicketId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"}],\"name\":\"drawFinalNumberAndMakeLotteryClaimable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"increaseTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"injectFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"injectorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNumberTicketsPerBuyOrClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNumberTicketsPerLottery\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPriceTicketUsdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPriceTicketInUsdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomGenerator\",\"outputs\":[{\"internalType\":\"contract IRandomNumberGenerator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverWrongTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxNumberTicketsPerBuy\",\"type\":\"uint256\"}],\"name\":\"setMaxNumberTicketsPerBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxNumberTicketsPerLottery\",\"type\":\"uint256\"}],\"name\":\"setMaxNumberTicketsPerLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPriceTicketInUsdc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPriceTicketInUsdc\",\"type\":\"uint256\"}],\"name\":\"setMinAndMaxTicketPriceInUsdc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_injectorAddress\",\"type\":\"address\"}],\"name\":\"setOperatorAndInjectorAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceTicketInUsdc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_discountDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_primaryWinnerCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secondaryWinnerCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tertiaryWinnerCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_primaryRewardPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secondaryRewardPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tertiaryRewardPercentage\",\"type\":\"uint256\"}],\"name\":\"startLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewCurrentLotteryId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"}],\"name\":\"viewLottery\",\"outputs\":[{\"components\":[{\"internalType\":\"enum LotteryContract.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceTicketInUsdc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstTicketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstTicketIdNextLottery\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCollectedInUsdc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"primaryWinnerCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryWinnerCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tertiaryWinnerCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"primaryRewardPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryRewardPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tertiaryRewardPercentage\",\"type\":\"uint256\"}],\"internalType\":\"struct LotteryContract.Lottery\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ticketIds\",\"type\":\"uint256[]\"}],\"name\":\"viewNumbersAndStatusesForTicketIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ticketId\",\"type\":\"uint256\"}],\"name\":\"viewRewardsForTicketId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_ticketId\",\"type\":\"uint256[]\"}],\"name\":\"viewRewardsForTicketIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"}],\"name\":\"viewRewardsForUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"viewUserInfoForLotteryId\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"}],\"name\":\"viewWinnersForLotteryId\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum LotteryContract.RewardBand\",\"name\":\"rewardBand\",\"type\":\"uint8\"}],\"internalType\":\"struct LotteryContract.Winner[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"viewWinnersForLotteryWithCursor\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum LotteryContract.RewardBand\",\"name\":\"rewardBand\",\"type\":\"uint8\"}],\"internalType\":\"struct LotteryContract.Winner[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllUsdc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LotteryContract", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000fcdcdf835d1137eef2c6d5c1b8f4d32476d649a7", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://85fa74503c58bfc0c56db9172aeac9aefb11100a95fd5f572b692d1595ad2dbd"}