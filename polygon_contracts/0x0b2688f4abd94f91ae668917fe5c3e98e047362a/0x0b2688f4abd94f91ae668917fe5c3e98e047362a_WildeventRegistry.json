{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/wildevents/WildeventRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {IWildfile} from \\\"../interfaces/IWildfile.sol\\\";\\nimport {IWildeventRegistry} from \\\"../interfaces/IWildeventRegistry.sol\\\";\\nimport {IWildevent} from \\\"../interfaces/IWildevent.sol\\\";\\nimport {IWildeventAuthHook} from \\\"../interfaces/IWildeventAuthHook.sol\\\";\\nimport {Ownable} from \\\"openzeppelin-contracts/access/Ownable.sol\\\";\\n\\ncontract WildeventRegistry is IWildeventRegistry, Ownable {\\n    /*//////////////////////////////////////////////////////////////\\n                            STATE VARIABLES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint64 public wildeventIdCounter;\\n    IWildfile public wildfile;\\n    IWildeventAuthHook public authHook;\\n    /// @notice list of registered events in the Wildcard Ecosystem\\n    string[] public wildeventTypes;\\n    /// @notice mapping from event type to whether it has been registered\\n    mapping(string => bool) public wildeventTypeToRegistered;\\n    /// @notice mapping from event type to the Wildfile Id that registered it\\n    mapping(string => uint256) public wildeventTypeToRegistrantWildfileId;\\n    /// @notice mapping from event type to the its schema\\n    mapping(string => string) public wildeventTypeToSchema;\\n    /// @notice mapping from event type to list of Wildevents\\n    mapping(string => Wildevent[]) public wildeventTypeToWildevents;\\n    /// @notice mapping from event type to implementation contract\\n    mapping(string => IWildevent) public wildeventTypeToImpl;\\n    /// @notice mapping from Wildfile Id to event type to boolean saying whether they are allowed to attest to events of that type (i.e. create events)\\n    mapping(uint32 => mapping(string => bool)) public wildfileIdToEventTypeToCanAttest;\\n\\n    constructor(address wildfileAddress, address authHookAddress) {\\n        wildfile = IWildfile(wildfileAddress);\\n        authHook = IWildeventAuthHook(authHookAddress);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            WILDEVENT ACTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function registerWildeventType(IWildevent wildeventImpl) public override {\\n        string memory wildeventType = wildeventImpl.getType();\\n        string memory schema = wildeventImpl.getSchema();\\n\\n        // make sure the event type has not already been registered\\n        if (wildeventTypeToRegistered[wildeventType]) {\\n            revert EventAlreadyRegistered();\\n        }\\n\\n        // authenticate registering the Wildevent type\\n        authHook.onRegisterWildeventType(msg.sender, wildeventImpl);\\n\\n        // register the Wildevent type\\n        wildeventTypes.push(wildeventType);\\n        wildeventTypeToRegistered[wildeventType] = true;\\n        wildeventTypeToRegistrantWildfileId[wildeventType] = wildfile.getWildfileId(msg.sender);\\n        wildeventTypeToSchema[wildeventType] = schema;\\n        wildeventTypeToImpl[wildeventType] = wildeventImpl;\\n        emit WildeventTypeRegistered(wildeventType, schema);\\n    }\\n\\n    function setWildeventAttestor(string calldata wildeventType, uint32 wildfileId, bool canAttest) public override {\\n        // make sure the event type has been registered\\n        if (!wildeventTypeToRegistered[wildeventType]) {\\n            revert UnknownEventType();\\n        }\\n\\n        // authenticate setting a Wildevent attestor\\n        authHook.onSetWildeventAttestor(msg.sender, wildeventType, wildfileId);\\n\\n        wildfileIdToEventTypeToCanAttest[wildfileId][wildeventType] = canAttest;\\n        emit WildeventAttestorUpdated(wildeventType, wildfileId, canAttest);\\n    }\\n\\n    function postWildevent(string calldata wildeventType, uint32[] calldata wildfileIds, bytes calldata data)\\n        public\\n        override\\n        returns (uint64)\\n    {\\n        // make sure the event type has been registered\\n        if (!wildeventTypeToRegistered[wildeventType]) {\\n            revert UnknownEventType();\\n        }\\n\\n        // authenticate posting a Wildevent\\n        authHook.onPostWildevent(msg.sender, wildeventType, wildfileIds, data);\\n\\n        uint64 _wildeventIdCounter = ++wildeventIdCounter;\\n\\n        // post the wildevent\\n        uint32 attestorWildfileId = uint32(wildfile.getWildfileId(msg.sender));\\n        Wildevent memory we = Wildevent(_wildeventIdCounter, attestorWildfileId, wildeventType, wildfileIds, data);\\n        wildeventTypeToWildevents[wildeventType].push(we);\\n\\n        wildeventTypeToImpl[wildeventType].onWildevent(wildfileIds, data);\\n\\n        emit WildeventPosted(_wildeventIdCounter, wildeventType, we);\\n        return wildeventIdCounter;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            VIEW FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function getWildeventTypes() public view override returns (string[] memory) {\\n        return wildeventTypes;\\n    }\\n\\n    function isWildeventTypeRegistered(string calldata wildeventType) public view override returns (bool) {\\n        return wildeventTypeToRegistered[wildeventType];\\n    }\\n\\n    function getWildeventSchema(string calldata wildeventType) public view override returns (string memory) {\\n        return wildeventTypeToSchema[wildeventType];\\n    }\\n\\n    function getNumWildevents(string calldata wildeventType) public view override returns (uint256) {\\n        return wildeventTypeToWildevents[wildeventType].length;\\n    }\\n\\n    function getWildevents(string calldata wildeventType) public view override returns (Wildevent[] memory) {\\n        return wildeventTypeToWildevents[wildeventType];\\n    }\\n\\n    function getWildeventsBatch(string calldata wildeventType, uint256 startIndex, uint256 endIndex)\\n        public\\n        view\\n        override\\n        returns (Wildevent[] memory)\\n    {\\n        if (startIndex > endIndex) {\\n            revert InvalidIndex();\\n        }\\n\\n        Wildevent[] memory allWildevents = wildeventTypeToWildevents[wildeventType];\\n        if (endIndex >= allWildevents.length) {\\n            revert IndexOutOfBounds();\\n        }\\n\\n        uint256 length = endIndex - startIndex + 1;\\n        Wildevent[] memory wildeventsBatch = new Wildevent[](length);\\n        for (uint256 i = 0; i < length; ++i) {\\n            wildeventsBatch[i] = allWildevents[i + startIndex];\\n        }\\n\\n        return wildeventsBatch;\\n    }\\n\\n    /**\\n     * @return whether the given wildfileId is authorized to attest to (post) Wildevents of the given type\\n     */\\n    function isWildeventAttestor(string calldata wildeventType, uint32 wildfileId)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return wildfileIdToEventTypeToCanAttest[wildfileId][wildeventType];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            OWNER FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setWildfile(address wildfileAddress) public onlyOwner {\\n        wildfile = IWildfile(wildfileAddress);\\n        emit WildfileAddressUpdated(wildfileAddress);\\n    }\\n\\n    function setWildeventAuthHook(address authHookAddress) public onlyOwner {\\n        authHook = IWildeventAuthHook(authHookAddress);\\n        emit WildeventAuthHookAddressUpdated(authHookAddress);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IWildfile.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IWildfile {\\n    function getWildfileId(address owner) external view returns (uint256);\\n    function ownerOf(uint256 wildfileId) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IWildeventRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {IWildevent} from \\\"./IWildevent.sol\\\";\\n\\ninterface IWildeventRegistry {\\n    struct Wildevent {\\n        uint64 wildeventId;\\n        uint32 attestorWildfileId;\\n        string wildeventType;\\n        uint32[] wildfileIds;\\n        bytes data;\\n    }\\n\\n    event WildeventTypeRegistered(string indexed wildeventType, string schema);\\n    event WildeventPosted(uint64 indexed wildeventId, string indexed wildeventType, Wildevent indexed we);\\n    event WildeventAttestorUpdated(string indexed wildeventType, uint32 wildfileId, bool canAttest);\\n    event WildfileAddressUpdated(address indexed wildfileAddress);\\n    event WildeventAuthHookAddressUpdated(address indexed authHookAddress);\\n\\n    error EventAlreadyRegistered();\\n    error UnknownEventType();\\n    error InvalidIndex();\\n    error IndexOutOfBounds();\\n\\n    // actions\\n    function registerWildeventType(IWildevent wildeventImpl) external;\\n    function setWildeventAttestor(string calldata wildeventType, uint32 wildfileId, bool canAttest) external;\\n    function postWildevent(string calldata wildeventType, uint32[] calldata wildfileIds, bytes calldata data)\\n        external\\n        returns (uint64);\\n\\n    // view functions\\n    function isWildeventAttestor(string calldata wildeventType, uint32 wildfileId) external view returns (bool);\\n    function getWildeventTypes() external view returns (string[] memory);\\n    function isWildeventTypeRegistered(string calldata wildeventType) external view returns (bool);\\n    function getWildeventSchema(string calldata wildeventType) external view returns (string memory);\\n    function getNumWildevents(string calldata wildeventType) external view returns (uint256);\\n    function getWildevents(string calldata wildeventType) external view returns (Wildevent[] memory);\\n    function getWildeventsBatch(string calldata wildeventType, uint256 startIndex, uint256 endIndex)\\n        external\\n        view\\n        returns (Wildevent[] memory);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IWildevent.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IWildevent {\\n    error OnlyWildeventRegistryContract();\\n    error ZeroAddressNotAllowed();\\n\\n    function getType() external pure returns (string memory);\\n    function getSchema() external pure returns (string memory);\\n    function onlyWildeventRegistryContract(address msgSender) external view;\\n    /// @dev each Wildevent implementation contract should check that the msgSender is the Wildevent Registry contract in onWildevent, and revert with OnlyWildeventRegistryContract if not\\n    function onWildevent(uint32[] calldata wildfileIds, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IWildeventAuthHook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {IWildevent} from \\\"./IWildevent.sol\\\";\\n\\ninterface IWildeventAuthHook {\\n    function onRegisterWildeventType(address msgSender, IWildevent wildeventImpl) external;\\n    function onSetWildeventAttestor(address msgSender, string calldata wildeventType, uint32 wildfileId) external;\\n    function onPostWildevent(\\n        address msgSender,\\n        string calldata wildeventType,\\n        uint32[] calldata wildfileIds,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wildfileAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"authHookAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EventAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnknownEventType\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"wildeventType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"wildfileId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"canAttest\",\"type\":\"bool\"}],\"name\":\"WildeventAttestorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authHookAddress\",\"type\":\"address\"}],\"name\":\"WildeventAuthHookAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"wildeventId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"wildeventType\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"wildeventId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"attestorWildfileId\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"wildeventType\",\"type\":\"string\"},{\"internalType\":\"uint32[]\",\"name\":\"wildfileIds\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":true,\"internalType\":\"struct IWildeventRegistry.Wildevent\",\"name\":\"we\",\"type\":\"tuple\"}],\"name\":\"WildeventPosted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"wildeventType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"schema\",\"type\":\"string\"}],\"name\":\"WildeventTypeRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wildfileAddress\",\"type\":\"address\"}],\"name\":\"WildfileAddressUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authHook\",\"outputs\":[{\"internalType\":\"contract IWildeventAuthHook\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"wildeventType\",\"type\":\"string\"}],\"name\":\"getNumWildevents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"wildeventType\",\"type\":\"string\"}],\"name\":\"getWildeventSchema\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWildeventTypes\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"wildeventType\",\"type\":\"string\"}],\"name\":\"getWildevents\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"wildeventId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"attestorWildfileId\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"wildeventType\",\"type\":\"string\"},{\"internalType\":\"uint32[]\",\"name\":\"wildfileIds\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IWildeventRegistry.Wildevent[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"wildeventType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"getWildeventsBatch\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"wildeventId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"attestorWildfileId\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"wildeventType\",\"type\":\"string\"},{\"internalType\":\"uint32[]\",\"name\":\"wildfileIds\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IWildeventRegistry.Wildevent[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"wildeventType\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"wildfileId\",\"type\":\"uint32\"}],\"name\":\"isWildeventAttestor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"wildeventType\",\"type\":\"string\"}],\"name\":\"isWildeventTypeRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"wildeventType\",\"type\":\"string\"},{\"internalType\":\"uint32[]\",\"name\":\"wildfileIds\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"postWildevent\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IWildevent\",\"name\":\"wildeventImpl\",\"type\":\"address\"}],\"name\":\"registerWildeventType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"wildeventType\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"wildfileId\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"canAttest\",\"type\":\"bool\"}],\"name\":\"setWildeventAttestor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authHookAddress\",\"type\":\"address\"}],\"name\":\"setWildeventAuthHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wildfileAddress\",\"type\":\"address\"}],\"name\":\"setWildfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wildeventIdCounter\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"wildeventTypeToImpl\",\"outputs\":[{\"internalType\":\"contract IWildevent\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"wildeventTypeToRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"wildeventTypeToRegistrantWildfileId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"wildeventTypeToSchema\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wildeventTypeToWildevents\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"wildeventId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"attestorWildfileId\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"wildeventType\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wildeventTypes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wildfile\",\"outputs\":[{\"internalType\":\"contract IWildfile\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"wildfileIdToEventTypeToCanAttest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "WildeventRegistry", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000003fecdcb640d82c626efba64ae64bcc15be14124a0000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}