{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Wiki.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.13;\\n\\nimport {Owned} from \\\"solmate/auth/Owned.sol\\\";\\nimport {IValidator} from \\\"./Validator/IValidator.sol\\\";\\n\\n/// @title Wiki\\n/// @author kesar.eth\\n/// @notice A contract to publish wikis\\ncontract Wiki is Owned {\\n\\n    /// -----------------------------------------------------------------------\\n    /// Errors\\n    /// -----------------------------------------------------------------------\\n\\n    error WikiNotValid();\\n    error InvalidSignature();\\n    error DeadlineExpired();\\n\\n    /// -----------------------------------------------------------------------\\n    /// Events\\n    /// -----------------------------------------------------------------------\\n\\n    event Posted(address indexed _from, string _ipfs);\\n\\n    /// -----------------------------------------------------------------------\\n    /// Storage variables\\n    /// -----------------------------------------------------------------------\\n\\n    /// @notice contract that validates if wiki should be pushed\\n    IValidator private validator;\\n\\n    /// -----------------------------------------------------------------------\\n    /// Immutable parameters\\n    /// -----------------------------------------------------------------------\\n\\n    /// @dev keccak256(\\\"SignedPost(string ipfs,address user,uint256 deadline)\\\")\\n    bytes32 private constant SIGNED_POST_TYPEHASH = 0x2786d465b1ae76a678938e05e206e58472f266dfa9f8534a71c3e35dc91efb45;\\n\\n    /// @notice the EIP-712 domain separator\\n    bytes32 private immutable EIP_712_DOMAIN_SEPARATOR =\\n    keccak256(\\n        abi.encode(\\n            keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n            keccak256(bytes(\\\"EP\\\")),\\n            keccak256(bytes(\\\"1\\\")),\\n            _chainID(),\\n            address(this)\\n        )\\n    );\\n\\n    /// -----------------------------------------------------------------------\\n    /// Constructor\\n    /// -----------------------------------------------------------------------\\n\\n    constructor(address _validator) Owned(msg.sender) {\\n        validator = IValidator(_validator);\\n    }\\n\\n    /// @notice Set a validator for wikis\\n    /// @param _validator validator contract address\\n    function setValidator(IValidator _validator) onlyOwner external {\\n        validator = _validator;\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// External functions\\n    /// -----------------------------------------------------------------------\\n\\n    /// @notice Post IPFS hash\\n    /// @param ipfs The IPFS Hash\\n    function post(string calldata ipfs) external {\\n        if (validator.validate(msg.sender, ipfs) == false) {\\n            revert WikiNotValid();\\n        }\\n        emit Posted(msg.sender, ipfs);\\n    }\\n\\n    /// @notice Post IPFS hash given an EIP-712 signature\\n    /// @param ipfs The IPFS Hash\\n    /// @param _user The user to approve the module for\\n    /// @param _deadline The deadline at which point the given signature expires\\n    /// @param _v The 129th byte and chain ID of the signature\\n    /// @param _r The first 64 bytes of the signature\\n    /// @param _s Bytes 64-128 of the signature\\n    function postBySig(\\n        string calldata ipfs,\\n        address _user,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external {\\n        if (_deadline < block.timestamp) {\\n            revert DeadlineExpired();\\n        }\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                EIP_712_DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(SIGNED_POST_TYPEHASH, keccak256(bytes(ipfs)), _user, _deadline))\\n            )\\n        );\\n\\n        address recoveredAddress = ecrecover(digest, _v, _r, _s);\\n\\n        if (recoveredAddress == address(0) || recoveredAddress != _user) {\\n            revert InvalidSignature();\\n        }\\n\\n        if (validator.validate(_user, ipfs) == false) {\\n            revert WikiNotValid();\\n        }\\n\\n        emit Posted(recoveredAddress, ipfs);\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// Internal functions\\n    /// -----------------------------------------------------------------------\\n\\n    function _chainID() private view returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// Getters\\n    /// -----------------------------------------------------------------------\\n\\n    /// @notice DOMAIN_SEPARATOR to generate signatures\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return EIP_712_DOMAIN_SEPARATOR;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/auth/Owned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/auth/Owned.sol)\\nabstract contract Owned {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event OwnerUpdated(address indexed user, address indexed newOwner);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            OWNERSHIP STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public owner;\\n\\n    modifier onlyOwner() virtual {\\n        require(msg.sender == owner, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n\\n        emit OwnerUpdated(address(0), _owner);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             OWNERSHIP LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setOwner(address newOwner) public virtual onlyOwner {\\n        owner = newOwner;\\n\\n        emit OwnerUpdated(msg.sender, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Validator/IValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IValidator {\\r\\n    function validate(address _user, string calldata _ipfs) external returns (bool);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/solmate/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"script/=script/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"src/=src/\",\r\n      \"test/=test/\",\r\n      \"src/=src/\",\r\n      \"test/=test/\",\r\n      \"script/=script/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20000\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DeadlineExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WikiNotValid\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_ipfs\",\"type\":\"string\"}],\"name\":\"Posted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ipfs\",\"type\":\"string\"}],\"name\":\"post\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ipfs\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"postBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IValidator\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"setValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Wiki", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "00000000000000000000000078b2ddef6d2530523d85c3ad20ee1c556d08d2ef", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}