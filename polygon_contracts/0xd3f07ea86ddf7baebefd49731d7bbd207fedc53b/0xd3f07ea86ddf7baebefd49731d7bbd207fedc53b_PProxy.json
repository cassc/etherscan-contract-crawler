{"SourceCode": "/**\r\n *Submitted for verification at polygonscan.com on 2021-08-29\r\n*/\r\n\r\n// File: Interfaces/ICallFacet.sol\r\n\r\n\r\npragma solidity ^0.7.1;\r\n\r\ninterface ICallFacet {\r\n\r\n    event CallerAdded(address indexed caller);\r\n    event CallerRemoved(address indexed caller);\r\n    event Call(address indexed caller, address indexed target, bytes data, uint256 value);\r\n\r\n    /**\r\n        @notice Lets whitelisted callers execute a batch of arbitrary calls from the pool. Reverts if one of the calls fails\r\n        @param _targets Array of addresses of targets to call\r\n        @param _calldata Array of calldata for each call\r\n        @param _values Array of amounts of ETH to send with the call\r\n    */\r\n    function call(\r\n        address[] memory _targets,\r\n        bytes[] memory _calldata,\r\n        uint256[] memory _values\r\n    ) external;\r\n\r\n    /**\r\n        @notice Lets whitelisted callers execute a batch of arbitrary calls from the pool without sending any Ether. Reverts if one of the calls fail\r\n        @param _targets Array of addresses of targets to call\r\n        @param _calldata Array of calldata for each call\r\n    */\r\n    function callNoValue(\r\n        address[] memory _targets,\r\n        bytes[] memory _calldata\r\n    ) external;\r\n\r\n    /**\r\n        @notice Lets whitelisted callers execute a single arbitrary call from the pool. Reverts if the call fails\r\n        @param _target Address of the target to call\r\n        @param _calldata Calldata of the call\r\n        @param _value Amount of ETH to send with the call\r\n    */\r\n    function singleCall(\r\n        address _target,\r\n        bytes calldata _calldata,\r\n        uint256 _value\r\n    ) external;\r\n\r\n    /**\r\n        @notice Add a whitelisted caller. Can only be called by the contract owner\r\n        @param _caller Caller to add\r\n    */\r\n    function addCaller(address _caller) external;\r\n\r\n    /**\r\n        @notice Remove a whitelisted caller. Can only be called by the contract owner\r\n    */\r\n    function removeCaller(address _caller) external;\r\n\r\n    /**\r\n        @notice Checks if an address is a whitelisted caller\r\n        @param _caller Address to check\r\n        @return If the address is whitelisted\r\n    */\r\n    function canCall(address _caller) external view returns (bool);\r\n\r\n    /**\r\n        @notice Get all whitelisted callers\r\n        @return Array of whitelisted callers\r\n    */\r\n    function getCallers() external view returns (address[] memory);\r\n}\r\n// File: Interfaces/IERC20Facet.sol\r\n\r\n\r\npragma solidity ^0.7.1;\r\n\r\ninterface IERC20Facet {\r\n    \r\n    /**\r\n        @notice Get the token name\r\n        @return The token name\r\n    */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n        @notice Get the token symbol\r\n        @return The token symbol \r\n    */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n        @notice Get the amount of decimals\r\n        @return Amount of decimals\r\n    */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n        @notice Mints tokens. Can only be called by the contract owner or the contract itself\r\n        @param _receiver Address receiving the tokens\r\n        @param _amount Amount to mint\r\n    */\r\n    function mint(address _receiver, uint256 _amount) external;\r\n\r\n    /**\r\n        @notice Burns tokens. Can only be called by the contract owner or the contract itself\r\n        @param _from Address to burn from\r\n        @param _amount Amount to burn\r\n    */\r\n    function burn(address _from, uint256 _amount) external;\r\n\r\n    /**\r\n        @notice Sets up the metadata and initial supply. Can be called by the contract owner\r\n        @param _initialSupply Initial supply of the token\r\n        @param _name Name of the token\r\n        @param _symbol Symbol of the token\r\n    */\r\n    function initialize(\r\n        uint256 _initialSupply,\r\n        string memory _name,\r\n        string memory _symbol\r\n    ) external;\r\n\r\n    /**\r\n        @notice Set the token name of the contract. Can only be called by the contract owner or the contract itself\r\n        @param _name New token name\r\n    */\r\n    function setName(string calldata _name) external;\r\n\r\n    /**\r\n        @notice Set the token symbol of the contract. Can only be called by the contract owner or the contract itself\r\n        @param _symbol New token symbol\r\n    */\r\n    function setSymbol(string calldata _symbol) external;\r\n    \r\n    /**\r\n        @notice Increase the amount of tokens another address can spend\r\n        @param _spender Spender\r\n        @param _amount Amount to increase by\r\n    */\r\n    function increaseApproval(address _spender, uint256 _amount) external returns (bool);\r\n\r\n    /**\r\n        @notice Decrease the amount of tokens another address can spend\r\n        @param _spender Spender\r\n        @param _amount Amount to decrease by\r\n    */\r\n    function decreaseApproval(address _spender, uint256 _amount) external returns (bool);\r\n\r\n}\r\n// File: Interfaces/IBasketFacet.sol\r\n\r\n\r\npragma solidity ^0.7.1;\r\n\r\ninterface IBasketFacet {\r\n\r\n    event TokenAdded(address indexed _token);\r\n    event TokenRemoved(address indexed _token);\r\n    event EntryFeeSet(uint256 fee);\r\n    event ExitFeeSet(uint256 fee);\r\n    event AnnualizedFeeSet(uint256 fee);\r\n    event FeeBeneficiarySet(address indexed beneficiary);\r\n    event EntryFeeBeneficiaryShareSet(uint256 share);\r\n    event ExitFeeBeneficiaryShareSet(uint256 share);\r\n\r\n    event PoolJoined(address indexed who, uint256 amount);\r\n    event PoolExited(address indexed who, uint256 amount);\r\n    event FeeCharged(uint256 amount);\r\n    event LockSet(uint256 lockBlock);\r\n    event CapSet(uint256 cap);\r\n\r\n    /** \r\n        @notice Sets entry fee paid when minting\r\n        @param _fee Amount of fee. 1e18 == 100%, capped at 10%\r\n    */\r\n    function setEntryFee(uint256 _fee) external;\r\n\r\n    /**\r\n        @notice Get the entry fee\r\n        @return Current entry fee\r\n    */\r\n    function getEntryFee() external view returns(uint256);\r\n\r\n    /**\r\n        @notice Set the exit fee paid when exiting\r\n        @param _fee Amount of fee. 1e18 == 100%, capped at 10%\r\n    */\r\n    function setExitFee(uint256 _fee) external;\r\n\r\n    /**\r\n        @notice Get the exit fee\r\n        @return Current exit fee\r\n    */\r\n    function getExitFee() external view returns(uint256);\r\n\r\n    /**\r\n        @notice Set the annualized fee. Often referred to as streaming fee\r\n        @param _fee Amount of fee. 1e18 == 100%, capped at 10%\r\n    */\r\n    function setAnnualizedFee(uint256 _fee) external;\r\n\r\n    /**\r\n        @notice Get the annualized fee.\r\n        @return Current annualized fee.\r\n    */\r\n    function getAnnualizedFee() external view returns(uint256);\r\n\r\n    /**\r\n        @notice Set the address receiving the fees.\r\n    */\r\n    function setFeeBeneficiary(address _beneficiary) external;\r\n\r\n    /**\r\n        @notice Get the fee benificiary\r\n        @return The current fee beneficiary\r\n    */\r\n    function getFeeBeneficiary() external view returns(address);\r\n\r\n    /**\r\n        @notice Set the fee beneficiaries share of the entry fee\r\n        @notice _share Share of the fee. 1e18 == 100%. Capped at 100% \r\n    */\r\n    function setEntryFeeBeneficiaryShare(uint256 _share) external;\r\n\r\n    /**\r\n        @notice Get the entry fee beneficiary share\r\n        @return Feeshare amount\r\n    */\r\n    function getEntryFeeBeneficiaryShare() external view returns(uint256);\r\n\r\n    /**\r\n        @notice Set the fee beneficiaries share of the exit fee\r\n        @notice _share Share of the fee. 1e18 == 100%. Capped at 100% \r\n    */\r\n    function setExitFeeBeneficiaryShare(uint256 _share) external;\r\n\r\n    /**\r\n        @notice Get the exit fee beneficiary share\r\n        @return Feeshare amount\r\n    */\r\n    function getExitFeeBeneficiaryShare() external view returns(uint256);\r\n\r\n    /**\r\n        @notice Calculate the oustanding annualized fee\r\n        @return Amount of pool tokens to be minted to charge the annualized fee\r\n    */\r\n    function calcOutStandingAnnualizedFee() external view returns(uint256);\r\n\r\n    /**\r\n        @notice Charges the annualized fee\r\n    */\r\n    function chargeOutstandingAnnualizedFee() external;\r\n\r\n    /**\r\n        @notice Pulls underlying from caller and mints the pool token\r\n        @param _amount Amount of pool tokens to mint\r\n    */\r\n    function joinPool(uint256 _amount) external;\r\n\r\n    /**\r\n        @notice Burns pool tokens from the caller and returns underlying assets\r\n    */\r\n    function exitPool(uint256 _amount) external;\r\n\r\n    /**\r\n        @notice Get if the pool is locked or not. (not accepting exit and entry)\r\n        @return Boolean indicating if the pool is locked\r\n    */\r\n    function getLock() external view returns (bool);\r\n\r\n    /**\r\n        @notice Get the block until which the pool is locked\r\n        @return The lock block\r\n    */\r\n    function getLockBlock() external view returns (uint256);\r\n\r\n    /**\r\n        @notice Set the lock block\r\n        @param _lock Block height of the lock\r\n    */\r\n    function setLock(uint256 _lock) external;\r\n\r\n    /**\r\n        @notice Get the maximum of pool tokens that can be minted\r\n        @return Cap\r\n    */\r\n    function getCap() external view returns (uint256);\r\n\r\n    /**\r\n        @notice Set the maximum of pool tokens that can be minted\r\n        @param _maxCap Max cap \r\n    */\r\n    function setCap(uint256 _maxCap) external;\r\n\r\n    /**\r\n        @notice Get the amount of tokens owned by the pool\r\n        @param _token Addres of the token\r\n        @return Amount owned by the contract\r\n    */\r\n    function balance(address _token) external view returns (uint256);\r\n\r\n    /**\r\n        @notice Get the tokens in the pool\r\n        @return Array of tokens in the pool\r\n    */\r\n    function getTokens() external view returns (address[] memory);\r\n\r\n    /**\r\n        @notice Add a token to the pool. Should have at least a balance of 10**6\r\n        @param _token Address of the token to add\r\n    */\r\n    function addToken(address _token) external;\r\n\r\n    /**\r\n        @notice Removes a token from the pool\r\n        @param _token Address of the token to remove\r\n    */\r\n    function removeToken(address _token) external;\r\n\r\n    /**\r\n        @notice Checks if a token was added to the pool\r\n        @param _token address of the token\r\n        @return If token is in the pool or not\r\n    */\r\n    function getTokenInPool(address _token) external view returns (bool);\r\n\r\n    /**\r\n        @notice Calculate the amounts of underlying needed to mint that pool amount.\r\n        @param _amount Amount of pool tokens to mint\r\n        @return tokens Tokens needed\r\n        @return amounts Amounts of underlying needed\r\n    */\r\n    function calcTokensForAmount(uint256 _amount)\r\n        external\r\n        view\r\n        returns (address[] memory tokens, uint256[] memory amounts);\r\n\r\n    /**\r\n        @notice Calculate the amounts of underlying to receive when burning that pool amount\r\n        @param _amount Amount of pool tokens to burn\r\n        @return tokens Tokens returned\r\n        @return amounts Amounts of underlying returned\r\n    */\r\n    function calcTokensForAmountExit(uint256 _amount)\r\n        external\r\n        view\r\n        returns (address[] memory tokens, uint256[] memory amounts);\r\n}\r\n\r\n// File: Interfaces/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: Interfaces/IERC173.sol\r\n\r\n\r\npragma solidity ^0.7.1;\r\n\r\n/// @title ERC-173 Contract Ownership Standard\r\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\r\n/* is ERC165 */\r\ninterface IERC173 {\r\n    /// @dev This emits when ownership of a contract changes.\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /// @notice Get the address of the owner\r\n    /// @return owner_ The address of the owner.\r\n    function owner() external view returns (address owner_);\r\n\r\n    /// @notice Set the address of the new owner of the contract\r\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\r\n    /// @param _newOwner The address of the new owner of the contract\r\n    function transferOwnership(address _newOwner) external;\r\n}\r\n\r\n// File: Interfaces/IExperiPie.sol\r\n\r\n\r\npragma solidity ^0.7.1;\r\n\r\n\r\n/**\r\n    @title ExperiPie Interface\r\n    @dev Combines all ExperiPie facet interfaces into one\r\n*/\r\ninterface IExperiPie is IERC20, IBasketFacet, IERC20Facet, IERC173, ICallFacet {\r\n}\r\n// File: Diamond/PProxyStorage.sol\r\n\r\npragma solidity ^0.7.1;\r\n\r\ncontract PProxyStorage {\r\n\r\n    function readBool(bytes32 _key) public view returns(bool) {\r\n        return storageRead(_key) == bytes32(uint256(1));\r\n    }\r\n\r\n    function setBool(bytes32 _key, bool _value) internal {\r\n        if(_value) {\r\n            storageSet(_key, bytes32(uint256(1)));\r\n        } else {\r\n            storageSet(_key, bytes32(uint256(0)));\r\n        }\r\n    }\r\n\r\n    function readAddress(bytes32 _key) public view returns(address) {\r\n        return bytes32ToAddress(storageRead(_key));\r\n    }\r\n\r\n    function setAddress(bytes32 _key, address _value) internal {\r\n        storageSet(_key, addressToBytes32(_value));\r\n    }\r\n\r\n    function storageRead(bytes32 _key) public view returns(bytes32) {\r\n        bytes32 value;\r\n        //solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            value := sload(_key)\r\n        }\r\n        return value;\r\n    }\r\n\r\n    function storageSet(bytes32 _key, bytes32 _value) internal {\r\n        // targetAddress = _address;  // No!\r\n        bytes32 implAddressStorageKey = _key;\r\n        //solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            sstore(implAddressStorageKey, _value)\r\n        }\r\n    }\r\n\r\n    function bytes32ToAddress(bytes32 _value) public pure returns(address) {\r\n        return address(uint160(uint256(_value)));\r\n    }\r\n\r\n    function addressToBytes32(address _value) public pure returns(bytes32) {\r\n        return bytes32(uint256(_value));\r\n    }\r\n\r\n}\r\n// File: Diamond/PProxy.sol\r\n\r\npragma solidity ^0.7.1;\r\n\r\n\r\ncontract PProxy is PProxyStorage {\r\n\r\n    bytes32 constant IMPLEMENTATION_SLOT = keccak256(abi.encodePacked(\"IMPLEMENTATION_SLOT\"));\r\n    bytes32 constant OWNER_SLOT = keccak256(abi.encodePacked(\"OWNER_SLOT\"));\r\n\r\n    modifier onlyProxyOwner() {\r\n        require(msg.sender == readAddress(OWNER_SLOT), \"PProxy.onlyProxyOwner: msg sender not owner\");\r\n        _;\r\n    }\r\n\r\n    constructor () public {\r\n        setAddress(OWNER_SLOT, msg.sender);\r\n    }\r\n\r\n    function getProxyOwner() public view returns (address) {\r\n       return readAddress(OWNER_SLOT);\r\n    }\r\n\r\n    function setProxyOwner(address _newOwner) onlyProxyOwner public {\r\n        setAddress(OWNER_SLOT, _newOwner);\r\n    }\r\n\r\n    function getImplementation() public view returns (address) {\r\n        return readAddress(IMPLEMENTATION_SLOT);\r\n    }\r\n\r\n    function setImplementation(address _newImplementation) onlyProxyOwner public {\r\n        setAddress(IMPLEMENTATION_SLOT, _newImplementation);\r\n    }\r\n\r\n\r\n    fallback () external payable {\r\n       return internalFallback();\r\n    }\r\n\r\n    function internalFallback() internal virtual {\r\n        address contractAddr = readAddress(IMPLEMENTATION_SLOT);\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            calldatacopy(ptr, 0, calldatasize())\r\n            let result := delegatecall(gas(), contractAddr, ptr, calldatasize(), 0, 0)\r\n            let size := returndatasize()\r\n            returndatacopy(ptr, 0, size)\r\n\r\n            switch result\r\n            case 0 { revert(ptr, size) }\r\n            default { return(ptr, size) }\r\n        }\r\n    }\r\n\r\n}\r\n// File: OpenZeppelin/Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n// File: OpenZeppelin/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: OpenZeppelin/SafeERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n// File: OpenZeppelin/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n// File: OpenZeppelin/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n// File: Interfaces/IERC165.sol\r\n\r\n\r\npragma solidity ^0.7.1;\r\n\r\ninterface IERC165 {\r\n    /// @notice Query if a contract implements an interface\r\n    /// @param interfaceId The interface identifier, as specified in ERC-165\r\n    /// @dev Interface identification is specified in ERC-165. This function\r\n    ///  uses less than 30,000 gas.\r\n    /// @return `true` if the contract implements `interfaceID` and\r\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: Interfaces/IDiamondLoupe.sol\r\n\r\n\r\npragma solidity ^0.7.1;\r\n\r\n// A loupe is a small magnifying glass used to look at diamonds.\r\n// These functions look at diamonds\r\ninterface IDiamondLoupe {\r\n    /// These functions are expected to be called frequently\r\n    /// by tools.\r\n\r\n    struct Facet {\r\n        address facetAddress;\r\n        bytes4[] functionSelectors;\r\n    }\r\n\r\n    /// @notice Gets all facet addresses and their four byte function selectors.\r\n    /// @return facets_ Facet\r\n    function facets() external view returns (Facet[] memory facets_);\r\n\r\n    /// @notice Gets all the function selectors supported by a specific facet.\r\n    /// @param _facet The facet address.\r\n    /// @return facetFunctionSelectors_\r\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\r\n\r\n    /// @notice Get all the facet addresses used by a diamond.\r\n    /// @return facetAddresses_\r\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\r\n\r\n    /// @notice Gets the facet that supports the given selector.\r\n    /// @dev If facet is not found return address(0).\r\n    /// @param _functionSelector The function selector.\r\n    /// @return facetAddress_ The facet address.\r\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\r\n}\r\n// File: Diamond/LibDiamondInitialize.sol\r\n\r\n\r\npragma solidity ^0.7.1;\r\n\r\n/******************************************************************************\\\r\n* Author: Mick de Graaf\r\n*\r\n* Tracks if the contract is already intialized or not\r\n/******************************************************************************/\r\n\r\n\r\nlibrary LibDiamondInitialize {\r\n    bytes32 constant DIAMOND_INITIALIZE_STORAGE_POSITION = keccak256(\"diamond.standard.initialize.diamond.storage\");\r\n\r\n    struct InitializedStorage {\r\n        bool initialized;\r\n    }\r\n\r\n    function diamondInitializeStorage() internal pure returns (InitializedStorage storage ids) {\r\n        bytes32 position = DIAMOND_INITIALIZE_STORAGE_POSITION;\r\n        assembly {\r\n            ids.slot := position\r\n        }\r\n    }\r\n\r\n}\r\n// File: Interfaces/IDiamondCut.sol\r\n\r\n\r\npragma solidity ^0.7.1;\r\n\r\n/******************************************************************************\\\r\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\r\n/******************************************************************************/\r\n\r\ninterface IDiamondCut {\r\n    enum FacetCutAction {Add, Replace, Remove}\r\n\r\n    struct FacetCut {\r\n        address facetAddress;\r\n        FacetCutAction action;\r\n        bytes4[] functionSelectors;\r\n    }\r\n\r\n    /// @notice Add/replace/remove any number of functions and optionally execute\r\n    ///         a function with delegatecall\r\n    /// @param _diamondCut Contains the facet addresses and function selectors\r\n    /// @param _init The address of the contract or facet to execute _calldata\r\n    /// @param _calldata A function call, including function selector and arguments\r\n    ///                  _calldata is executed with delegatecall on _init\r\n    function diamondCut(\r\n        FacetCut[] calldata _diamondCut,\r\n        address _init,\r\n        bytes calldata _calldata\r\n    ) external;\r\n\r\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\r\n}\r\n// File: Diamond/LibDiamond.sol\r\n\r\n\r\npragma solidity ^0.7.1;\r\n\r\n/******************************************************************************\\\r\n* Author: Nick Mudge\r\n*\r\n* Implementation of Diamond facet.\r\n* This is gas optimized by reducing storage reads and storage writes.\r\n* This code is as complex as it is to reduce gas costs.\r\n/******************************************************************************/\r\n\r\n\r\nlibrary LibDiamond {\r\n        bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\"diamond.standard.diamond.storage\");\r\n\r\n    struct DiamondStorage {\r\n        // maps function selectors to the facets that execute the functions.\r\n        // and maps the selectors to their position in the selectorSlots array.        \r\n        // func selector => address facet, selector position\r\n        mapping(bytes4 => bytes32) facets;\r\n        // array of slots of function selectors.\r\n        // each slot holds 8 function selectors.\r\n        mapping(uint256 => bytes32) selectorSlots;\r\n        // The number of function selectors in selectorSlots\r\n        uint16 selectorCount;\r\n        // owner of the contract\r\n        // Used to query if a contract implements an interface.\r\n        // Used to implement ERC-165.\r\n        mapping(bytes4 => bool) supportedInterfaces;\r\n        // owner of the contract\r\n        address contractOwner;\r\n    }\r\n\r\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\r\n        bytes32 position = DIAMOND_STORAGE_POSITION;\r\n        assembly {\r\n            ds.slot := position\r\n        }\r\n    }\r\n   \r\n   event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n   function setContractOwner(address _newOwner) internal {\r\n        DiamondStorage storage ds = diamondStorage();\r\n        address previousOwner = ds.contractOwner;\r\n        ds.contractOwner = _newOwner;\r\n        emit OwnershipTransferred(previousOwner, _newOwner);\r\n    }\r\n\r\n    function contractOwner() internal view returns (address contractOwner_) {\r\n        contractOwner_ = diamondStorage().contractOwner;\r\n    }\r\n\r\n    function enforceIsContractOwner() view internal {\r\n        require(msg.sender == diamondStorage().contractOwner, \"LibDiamond: Must be contract owner\");\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == diamondStorage().contractOwner, \"LibDiamond: Must be contract owner\");\r\n        _;\r\n    }\r\n\r\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\r\n\r\n    bytes32 constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));\r\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\r\n\r\n    // Internal function version of diamondCut\r\n    // This code is almost the same as the external diamondCut,\r\n    // except it is using 'Facet[] memory _diamondCut' instead of\r\n    // 'Facet[] calldata _diamondCut'.\r\n    // The code is duplicated to prevent copying calldata to memory which\r\n    // causes an error for a two dimensional array.\r\n    function diamondCut(\r\n        IDiamondCut.FacetCut[] memory _diamondCut,\r\n        address _init,\r\n        bytes memory _calldata\r\n    ) internal {\r\n        DiamondStorage storage ds = diamondStorage();\r\n        uint256 originalSelectorCount = ds.selectorCount;\r\n        uint256 selectorCount = originalSelectorCount;\r\n        bytes32 selectorSlot;\r\n        // Check if last selector slot is not full\r\n        if (selectorCount % 8 > 0) {\r\n            // get last selectorSlot\r\n            selectorSlot = ds.selectorSlots[selectorCount / 8];\r\n        }\r\n        // loop through diamond cut\r\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\r\n            (selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\r\n                selectorCount,\r\n                selectorSlot,\r\n                _diamondCut[facetIndex].facetAddress,\r\n                _diamondCut[facetIndex].action,\r\n                _diamondCut[facetIndex].functionSelectors\r\n            );\r\n        }\r\n        if (selectorCount != originalSelectorCount) {\r\n            ds.selectorCount = uint16(selectorCount);\r\n        }\r\n        // If last selector slot is not full\r\n        if (selectorCount % 8 > 0) {\r\n            ds.selectorSlots[selectorCount / 8] = selectorSlot;\r\n        }\r\n        emit DiamondCut(_diamondCut, _init, _calldata);\r\n        initializeDiamondCut(_init, _calldata);\r\n    }\r\n\r\n    function addReplaceRemoveFacetSelectors(\r\n        uint256 _selectorCount,\r\n        bytes32 _selectorSlot,\r\n        address _newFacetAddress,\r\n        IDiamondCut.FacetCutAction _action,\r\n        bytes4[] memory _selectors\r\n    ) internal returns (uint256, bytes32) {\r\n        DiamondStorage storage ds = diamondStorage();\r\n        require(_selectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");        \r\n        if (_action == IDiamondCut.FacetCutAction.Add) {\r\n            require(_newFacetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\r\n            enforceHasContractCode(_newFacetAddress, \"LibDiamondCut: Add facet has no code\");\r\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\r\n                bytes4 selector = _selectors[selectorIndex];\r\n                bytes32 oldFacet = ds.facets[selector];                \r\n                require(address(bytes20(oldFacet)) == address(0), \"LibDiamondCut: Can't add function that already exists\");\r\n                // add facet for selector                                \r\n                ds.facets[selector] = bytes20(_newFacetAddress) | bytes32(_selectorCount);                \r\n                uint256 selectorInSlotPosition = (_selectorCount % 8) * 32;\r\n                // clear selector position in slot and add selector\r\n                _selectorSlot =\r\n                    (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) |\r\n                    (bytes32(selector) >> selectorInSlotPosition);\r\n                // if slot is full then write it to storage\r\n                if (selectorInSlotPosition == 224) {\r\n                    ds.selectorSlots[_selectorCount / 8] = _selectorSlot;\r\n                    _selectorSlot = 0;\r\n                }\r\n                _selectorCount++;\r\n            }\r\n        } else if(_action == IDiamondCut.FacetCutAction.Replace) {\r\n            require(_newFacetAddress != address(0), \"LibDiamondCut: Replace facet can't be address(0)\");\r\n            enforceHasContractCode(_newFacetAddress, \"LibDiamondCut: Replace facet has no code\");\r\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\r\n                bytes4 selector = _selectors[selectorIndex];\r\n                bytes32 oldFacet = ds.facets[selector];  \r\n                address oldFacetAddress = address(bytes20(oldFacet));\r\n                // only useful if immutable functions exist\r\n                require(oldFacetAddress != address(this), \"LibDiamondCut: Can't replace immutable function\");\r\n                require(oldFacetAddress != _newFacetAddress, \"LibDiamondCut: Can't replace function with same function\");\r\n                require(oldFacetAddress != address(0), \"LibDiamondCut: Can't replace function that doesn't exist\");\r\n                // replace old facet address\r\n                ds.facets[selector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(_newFacetAddress);\r\n            }\r\n        } else if(_action == IDiamondCut.FacetCutAction.Remove) {\r\n            require(_newFacetAddress == address(0), \"LibDiamondCut: Remove facet address must be address(0)\");\r\n            uint256 selectorSlotCount = _selectorCount / 8;\r\n            uint256 selectorInSlotIndex = (_selectorCount % 8) - 1;\r\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\r\n                if (_selectorSlot == 0) {\r\n                    // get last selectorSlot\r\n                    selectorSlotCount--;\r\n                    _selectorSlot = ds.selectorSlots[selectorSlotCount];\r\n                    selectorInSlotIndex = 7;\r\n                }\r\n                bytes4 lastSelector;\r\n                uint256 oldSelectorsSlotCount;\r\n                uint256 oldSelectorInSlotPosition;\r\n                // adding a block here prevents stack too deep error\r\n                {\r\n                    bytes4 selector = _selectors[selectorIndex];\r\n                    bytes32 oldFacet = ds.facets[selector];\r\n                    require(address(bytes20(oldFacet)) != address(0), \"LibDiamondCut: Can't remove function that doesn't exist\");\r\n                    // only useful if immutable functions exist\r\n                    require(address(bytes20(oldFacet)) != address(this), \"LibDiamondCut: Can't remove immutable function\");\r\n                    // replace selector with last selector in ds.facets\r\n                    // gets the last selector\r\n                    lastSelector = bytes4(_selectorSlot << (selectorInSlotIndex * 32));\r\n                    if (lastSelector != selector) {\r\n                        // update last selector slot position info\r\n                        ds.facets[lastSelector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(ds.facets[lastSelector]);\r\n                    }\r\n                    delete ds.facets[selector];\r\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\r\n                    oldSelectorsSlotCount = oldSelectorCount / 8;\r\n                    oldSelectorInSlotPosition = (oldSelectorCount % 8) * 32;\r\n                }\r\n                if (oldSelectorsSlotCount != selectorSlotCount) {\r\n                    bytes32 oldSelectorSlot = ds.selectorSlots[oldSelectorsSlotCount];\r\n                    // clears the selector we are deleting and puts the last selector in its place.\r\n                    oldSelectorSlot =\r\n                        (oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\r\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\r\n                    // update storage with the modified slot\r\n                    ds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\r\n                } else {\r\n                    // clears the selector we are deleting and puts the last selector in its place.\r\n                    _selectorSlot =\r\n                        (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\r\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\r\n                }\r\n                if (selectorInSlotIndex == 0) {\r\n                    delete ds.selectorSlots[selectorSlotCount];\r\n                    _selectorSlot = 0;\r\n                }\r\n                selectorInSlotIndex--;\r\n            }\r\n            _selectorCount = selectorSlotCount * 8 + selectorInSlotIndex + 1;\r\n        } else {\r\n            revert(\"LibDiamondCut: Incorrect FacetCutAction\");\r\n        }       \r\n        return (_selectorCount, _selectorSlot);\r\n    }\r\n\r\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\r\n        if (_init == address(0)) {\r\n            require(_calldata.length == 0, \"LibDiamondCut: _init is address(0) but_calldata is not empty\");\r\n        } else {\r\n            require(_calldata.length > 0, \"LibDiamondCut: _calldata is empty but _init is not address(0)\");\r\n            if (_init != address(this)) {\r\n                enforceHasContractCode(_init, \"LibDiamondCut: _init address has no code\");\r\n            }\r\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\r\n            if (!success) {\r\n                if (error.length > 0) {\r\n                    // bubble up the error\r\n                    revert(string(error));\r\n                } else {\r\n                    revert(\"LibDiamondCut: _init function reverted\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\r\n        uint256 contractSize;\r\n        assembly {\r\n            contractSize := extcodesize(_contract)\r\n        }\r\n        require(contractSize > 0, _errorMessage);\r\n    }\r\n}\r\n// File: Diamond/Diamond.sol\r\n\r\n\r\npragma solidity ^0.7.1;\r\n\r\n/******************************************************************************\\\r\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\r\n*\r\n* Implementation of a diamond.\r\n/******************************************************************************/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Diamond {\r\n    function initialize(IDiamondCut.FacetCut[] memory _diamondCut, address _owner) external payable {\r\n        require(LibDiamondInitialize.diamondInitializeStorage().initialized == false, \"ALREADY_INITIALIZED\");\r\n        LibDiamondInitialize.diamondInitializeStorage().initialized = true;\r\n        LibDiamond.diamondCut(_diamondCut, address(0), new bytes(0));\r\n        LibDiamond.setContractOwner(_owner);\r\n\r\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\r\n\r\n        // adding ERC165 data\r\n        ds.supportedInterfaces[type(IERC165).interfaceId] = true;\r\n        ds.supportedInterfaces[type(IDiamondCut).interfaceId] = true;\r\n        ds.supportedInterfaces[type(IDiamondLoupe).interfaceId] = true;\r\n        ds.supportedInterfaces[type(IERC173).interfaceId] = true;\r\n    }\r\n\r\n    // Find facet for function that is called and execute the\r\n    // function if a facet is found and return any value.\r\n    fallback() external payable {\r\n        LibDiamond.DiamondStorage storage ds;\r\n        bytes32 position = LibDiamond.DIAMOND_STORAGE_POSITION;\r\n        assembly {\r\n            ds.slot := position\r\n        }\r\n        address facet = address(bytes20(ds.facets[msg.sig]));\r\n        require(facet != address(0), \"Diamond: Function does not exist\");\r\n        assembly {\r\n            calldatacopy(0, 0, calldatasize())\r\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            switch result\r\n                case 0 {\r\n                    revert(0, returndatasize())\r\n                }\r\n                default {\r\n                    return(0, returndatasize())\r\n                }\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n// File: PieFactoryContract.sol\r\n\r\n\r\npragma solidity ^0.7.1;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract PieFactoryContract is Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    address[] public pies;\r\n    mapping(address => bool) public isPie;\r\n    address public defaultController;\r\n    address public diamondImplementation;\r\n\r\n    IDiamondCut.FacetCut[] public defaultCut;\r\n\r\n    event PieCreated(\r\n        address indexed pieAddress,\r\n        address indexed deployer,\r\n        uint256 indexed index\r\n    );\r\n\r\n    event DefaultControllerSet(address indexed controller);\r\n    event FacetAdded(IDiamondCut.FacetCut);\r\n    event FacetRemoved(IDiamondCut.FacetCut);\r\n\r\n    constructor() {\r\n        defaultController = msg.sender;\r\n    }\r\n\r\n    function setDefaultController(address _controller) external onlyOwner {\r\n        defaultController = _controller;\r\n        emit DefaultControllerSet(_controller);\r\n    }\r\n\r\n    function removeFacet(uint256 _index) external onlyOwner {\r\n        require(_index < defaultCut.length, \"INVALID_INDEX\");\r\n        emit FacetRemoved(defaultCut[_index]);\r\n        defaultCut[_index] = defaultCut[defaultCut.length - 1];\r\n        defaultCut.pop();\r\n    }\r\n\r\n    function addFacet(IDiamondCut.FacetCut memory _facet) external onlyOwner {\r\n        defaultCut.push(_facet);\r\n        emit FacetAdded(_facet);\r\n    }\r\n\r\n    // Diamond should be Initialized to prevent it from being selfdestructed\r\n    function setDiamondImplementation(address _diamondImplementation) external onlyOwner {\r\n        diamondImplementation = _diamondImplementation;\r\n    }\r\n\r\n    function bakePie(\r\n        address[] memory _tokens,\r\n        uint256[] memory _amounts,\r\n        uint256 _initialSupply,\r\n        string memory _symbol,\r\n        string memory _name\r\n    ) external {\r\n        PProxy proxy = new PProxy();\r\n        Diamond d = Diamond(address(proxy));\r\n\r\n        proxy.setImplementation(diamondImplementation);\r\n\r\n        d.initialize(defaultCut, address(this));\r\n\r\n        pies.push(address(d));\r\n        isPie[address(d)] = true;\r\n\r\n        // emit DiamondCreated(address(d));\r\n        require(_tokens.length != 0, \"CANNOT_CREATE_ZERO_TOKEN_LENGTH_PIE\");\r\n        require(_tokens.length == _amounts.length, \"ARRAY_LENGTH_MISMATCH\");\r\n\r\n        IExperiPie pie = IExperiPie(address(d));\r\n\r\n        // Init erc20 facet\r\n        pie.initialize(_initialSupply, _name, _symbol);\r\n\r\n        // Transfer and add tokens\r\n        for (uint256 i = 0; i < _tokens.length; i++) {\r\n            IERC20 token = IERC20(_tokens[i]);\r\n            token.safeTransferFrom(msg.sender, address(pie), _amounts[i]);\r\n            pie.addToken(_tokens[i]);\r\n        }\r\n\r\n        // Unlock pool\r\n        pie.setLock(1);\r\n\r\n        // Uncap pool\r\n        pie.setCap(uint256(-1));\r\n\r\n        // Send minted pie to msg.sender\r\n        pie.transfer(msg.sender, _initialSupply);\r\n        pie.transferOwnership(defaultController);\r\n        proxy.setProxyOwner(defaultController);\r\n\r\n        emit PieCreated(address(d), msg.sender, pies.length - 1);\r\n    }\r\n\r\n    function getDefaultCut()\r\n        external\r\n        view\r\n        returns (IDiamondCut.FacetCut[] memory)\r\n    {\r\n        return defaultCut;\r\n    }\r\n\r\n    function getDefaultCutCount() external view returns (uint256) {\r\n        return defaultCut.length;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"addressToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_value\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProxyOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"readAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"readBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newImplementation\",\"type\":\"address\"}],\"name\":\"setImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setProxyOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"storageRead\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PProxy", "CompilerVersion": "v0.7.1+commit.f4a555be", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "1", "Implementation": "0x0589c472c35fc7cae089dbbaefb050dd642ce481", "SwarmSource": "ipfs://810edba9763a45c8204f37a92a980125557b939dac5d4fc9fe892fa42ca7de37"}