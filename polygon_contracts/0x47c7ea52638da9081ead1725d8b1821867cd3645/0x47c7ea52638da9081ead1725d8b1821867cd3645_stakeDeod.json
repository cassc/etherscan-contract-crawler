{"SourceCode": "// SPDX-License-Identifier: MIT\r\n    // OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\r\n\r\n    pragma solidity ^0.8.0;\r\n\r\n    // CAUTION\r\n    // This version of SafeMath should only be used with Solidity 0.8 or later,\r\n    // because it relies on the compiler's built in overflow checks.\r\n\r\n    /**\r\n    * @dev Wrappers over Solidity's arithmetic operations.\r\n    *\r\n    * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n    * now has built in overflow checking.\r\n    */\r\n    library SafeMath {\r\n        /**\r\n        * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n        *\r\n        * _Available since v3.4._\r\n        */\r\n        function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n            unchecked {\r\n                uint256 c = a + b;\r\n                if (c < a) return (false, 0);\r\n                return (true, c);\r\n            }\r\n        }\r\n\r\n        /**\r\n        * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n        *\r\n        * _Available since v3.4._\r\n        */\r\n        function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n            unchecked {\r\n                if (b > a) return (false, 0);\r\n                return (true, a - b);\r\n            }\r\n        }\r\n\r\n        /**\r\n        * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n        *\r\n        * _Available since v3.4._\r\n        */\r\n        function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n            unchecked {\r\n                // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n                // benefit is lost if 'b' is also tested.\r\n                // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n                if (a == 0) return (true, 0);\r\n                uint256 c = a * b;\r\n                if (c / a != b) return (false, 0);\r\n                return (true, c);\r\n            }\r\n        }\r\n\r\n        /**\r\n        * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n        *\r\n        * _Available since v3.4._\r\n        */\r\n        function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n            unchecked {\r\n                if (b == 0) return (false, 0);\r\n                return (true, a / b);\r\n            }\r\n        }\r\n\r\n        /**\r\n        * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n        *\r\n        * _Available since v3.4._\r\n        */\r\n        function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n            unchecked {\r\n                if (b == 0) return (false, 0);\r\n                return (true, a % b);\r\n            }\r\n        }\r\n\r\n        /**\r\n        * @dev Returns the addition of two unsigned integers, reverting on\r\n        * overflow.\r\n        *\r\n        * Counterpart to Solidity's `+` operator.\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - Addition cannot overflow.\r\n        */\r\n        function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            return a + b;\r\n        }\r\n\r\n        /**\r\n        * @dev Returns the subtraction of two unsigned integers, reverting on\r\n        * overflow (when the result is negative).\r\n        *\r\n        * Counterpart to Solidity's `-` operator.\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - Subtraction cannot overflow.\r\n        */\r\n        function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            return a - b;\r\n        }\r\n\r\n        /**\r\n        * @dev Returns the multiplication of two unsigned integers, reverting on\r\n        * overflow.\r\n        *\r\n        * Counterpart to Solidity's `*` operator.\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - Multiplication cannot overflow.\r\n        */\r\n        function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            return a * b;\r\n        }\r\n\r\n        /**\r\n        * @dev Returns the integer division of two unsigned integers, reverting on\r\n        * division by zero. The result is rounded towards zero.\r\n        *\r\n        * Counterpart to Solidity's `/` operator.\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - The divisor cannot be zero.\r\n        */\r\n        function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            return a / b;\r\n        }\r\n\r\n        /**\r\n        * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n        * reverting when dividing by zero.\r\n        *\r\n        * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n        * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n        * invalid opcode to revert (consuming all remaining gas).\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - The divisor cannot be zero.\r\n        */\r\n        function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            return a % b;\r\n        }\r\n\r\n        /**\r\n        * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n        * overflow (when the result is negative).\r\n        *\r\n        * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n        * message unnecessarily. For custom revert reasons use {trySub}.\r\n        *\r\n        * Counterpart to Solidity's `-` operator.\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - Subtraction cannot overflow.\r\n        */\r\n        function sub(\r\n            uint256 a,\r\n            uint256 b,\r\n            string memory errorMessage\r\n        ) internal pure returns (uint256) {\r\n            unchecked {\r\n                require(b <= a, errorMessage);\r\n                return a - b;\r\n            }\r\n        }\r\n\r\n        /**\r\n        * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n        * division by zero. The result is rounded towards zero.\r\n        *\r\n        * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n        * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n        * uses an invalid opcode to revert (consuming all remaining gas).\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - The divisor cannot be zero.\r\n        */\r\n        function div(\r\n            uint256 a,\r\n            uint256 b,\r\n            string memory errorMessage\r\n        ) internal pure returns (uint256) {\r\n            unchecked {\r\n                require(b > 0, errorMessage);\r\n                return a / b;\r\n            }\r\n        }\r\n\r\n        /**\r\n        * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n        * reverting with custom message when dividing by zero.\r\n        *\r\n        * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n        * message unnecessarily. For custom revert reasons use {tryMod}.\r\n        *\r\n        * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n        * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n        * invalid opcode to revert (consuming all remaining gas).\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - The divisor cannot be zero.\r\n        */\r\n        function mod(\r\n            uint256 a,\r\n            uint256 b,\r\n            string memory errorMessage\r\n        ) internal pure returns (uint256) {\r\n            unchecked {\r\n                require(b > 0, errorMessage);\r\n                return a % b;\r\n            }\r\n        }\r\n    }\r\n    pragma solidity ^0.8.0;\r\n\r\n    /**\r\n    * @dev Provides information about the current execution context, including the\r\n    * sender of the transaction and its data. While these are generally available\r\n    * via msg.sender and msg.data, they should not be accessed in such a direct\r\n    * manner, since when dealing with meta-transactions the account sending and\r\n    * paying for execution may not be the actual sender (as far as an application\r\n    * is concerned).\r\n    *\r\n    * This contract is only required for intermediate, library-like contracts.\r\n    */\r\n    abstract contract Context {\r\n        function _msgSender() internal view virtual returns (address) {\r\n            return msg.sender;\r\n        }\r\n\r\n        function _msgData() internal view virtual returns (bytes calldata) {\r\n            return msg.data;\r\n        }\r\n    }\r\n\r\n    pragma solidity ^0.8.0;\r\n\r\n    // import \"../utils/Context.sol\";\r\n\r\n    /**\r\n    * @dev Contract module which provides a basic access control mechanism, where\r\n    * there is an account (an owner) that can be granted exclusive access to\r\n    * specific functions.\r\n    *\r\n    * By default, the owner account will be the one that deploys the contract. This\r\n    * can later be changed with {transferOwnership}.\r\n    *\r\n    * This module is used through inheritance. It will make available the modifier\r\n    * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n    * the owner.\r\n    */\r\n    abstract contract Ownable is Context {\r\n        address private _owner;\r\n\r\n        event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n        /**\r\n        * @dev Initializes the contract setting the deployer as the initial owner.\r\n        */\r\n        constructor() {\r\n            _transferOwnership(_msgSender());\r\n        }\r\n\r\n        /**\r\n        * @dev Throws if called by any account other than the owner.\r\n        */\r\n        modifier onlyOwner() {\r\n            _checkOwner();\r\n            _;\r\n        }\r\n\r\n        /**\r\n        * @dev Returns the address of the current owner.\r\n        */\r\n        function owner() public view virtual returns (address) {\r\n            return _owner;\r\n        }\r\n\r\n        /**\r\n        * @dev Throws if the sender is not the owner.\r\n        */\r\n        function _checkOwner() internal view virtual {\r\n            require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        }\r\n\r\n        /**\r\n        * @dev Leaves the contract without owner. It will not be possible to call\r\n        * `onlyOwner` functions. Can only be called by the current owner.\r\n        *\r\n        * NOTE: Renouncing ownership will leave the contract without an owner,\r\n        * thereby disabling any functionality that is only available to the owner.\r\n        */\r\n        function renounceOwnership() public virtual onlyOwner {\r\n            _transferOwnership(address(0));\r\n        }\r\n\r\n        /**\r\n        * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n        * Can only be called by the current owner.\r\n        */\r\n        function transferOwnership(address newOwner) public virtual onlyOwner {\r\n            require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n            _transferOwnership(newOwner);\r\n        }\r\n\r\n        /**\r\n        * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n        * Internal function without access restriction.\r\n        */\r\n        function _transferOwnership(address newOwner) internal virtual {\r\n            address oldOwner = _owner;\r\n            _owner = newOwner;\r\n            emit OwnershipTransferred(oldOwner, newOwner);\r\n        }\r\n    }\r\n\r\n    interface IERC20 {\r\n        /**\r\n        * @dev Returns the amount of tokens in existence.\r\n        */\r\n        function totalSupply() external view returns (uint256);\r\n\r\n        /**\r\n        * @dev Returns the amount of tokens owned by `account`.\r\n        */\r\n        function balanceOf(address account) external view returns (uint256);\r\n\r\n        /**\r\n        * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n        *\r\n        * Returns a boolean value indicating whether the operation succeeded.\r\n        *\r\n        * Emits a {Transfer} event.\r\n        */\r\n        function transfer(address recipient, uint256 amount)\r\n            external\r\n            returns (bool);\r\n\r\n        /**\r\n        * @dev Returns the remaining number of tokens that `spender` will be\r\n        * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n        * zero by default.\r\n        *\r\n        * This value changes when {approve} or {transferFrom} are called.\r\n        */\r\n        function allowance(address owner, address spender)\r\n            external\r\n            view\r\n            returns (uint256);\r\n\r\n        /**\r\n        * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n        *\r\n        * Returns a boolean value indicating whether the operation succeeded.\r\n        *\r\n        * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n        * that someone may use both the old and the new allowance by unfortunate\r\n        * transaction ordering. One possible solution to mitigate this race\r\n        * condition is to first reduce the spender's allowance to 0 and set the\r\n        * desired value afterwards:\r\n        * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        *\r\n        * Emits an {Approval} event.\r\n        */\r\n        function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n        /**\r\n        * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n        * allowance mechanism. `amount` is then deducted from the caller's\r\n        * allowance.\r\n        *\r\n        * Returns a boolean value indicating whether the operation succeeded.\r\n        *\r\n        * Emits a {Transfer} event.\r\n        */\r\n        function transferFrom(\r\n            address sender,\r\n            address recipient,\r\n            uint256 amount\r\n        ) external returns (bool);\r\n\r\n        /**\r\n        * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n        * another (`to`).\r\n        *\r\n        * Note that `value` may be zero.\r\n        */\r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n        /**\r\n        * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n        * a call to {approve}. `value` is the new allowance.\r\n        */\r\n        event Approval(\r\n            address indexed owner,\r\n            address indexed spender,\r\n            uint256 value\r\n        );\r\n    }\r\n\r\n\r\n    pragma solidity ^0.8.0;\r\n\r\n\r\n    contract stakeDeod is Ownable{\r\n\r\n        using SafeMath for uint256;\r\n        uint256 public allotmentCount;\r\n        address public admin ;\r\n        uint256 public totalTokensAllotedTillDate;\r\n        IERC20 public tokenAddress;\r\n\r\n        mapping (uint256 => Allotment) public allotments;\r\n        mapping (address => uint256) public totalTokensAlloted;\r\n        mapping (address => uint256[]) public userAllotmentIds;\r\n        mapping (address => uint256) public userAllotmentCounts;\r\n        mapping (address => uint256) public userClaimedTokens;\r\n        mapping (address => uint256) public userClaimCounts;\r\n        mapping (address => bool) public checkAllotedUser;\r\n        mapping (address => uint256) public getDays;\r\n\r\n        constructor(IERC20 _token,address _admin) {\r\n            tokenAddress = _token;\r\n            admin = _admin;\r\n        }\r\n\r\n        struct Allotment {\r\n            uint256 allotmentID;\r\n            address userAddress;\r\n            uint256 startTime;\r\n            uint256 tokenAlloted;\r\n            uint256 endTime;\r\n            uint256 percentage;\r\n        }\r\n\r\n        modifier onlyAdmin() {\r\n            require(admin == msg.sender, \"Only ADMIN can allot tokens\");\r\n            _;\r\n        }\r\n\r\n\r\n        function adminAllotment(address _address, uint256 _amount, uint256 duration, uint256 _percentage) public onlyAdmin{\r\n            require(!checkAllotedUser[_address], \"The admin allotted the user only one time.\");\r\n            allotmentCount = allotmentCount + 1;\r\n            uint256 timeStamps = block.timestamp + (duration * 1 days);\r\n            Allotment memory alt = Allotment(allotmentCount, _address, block.timestamp, _amount,timeStamps,_percentage);\r\n            allotments[allotmentCount] = alt;\r\n            userAllotmentCounts[_address] += 1;\r\n            checkAllotedUser[_address] = true;\r\n            totalTokensAlloted[_address] = totalTokensAlloted[_address].add(_amount);\r\n            totalTokensAllotedTillDate = totalTokensAllotedTillDate.add(_amount);\r\n            userAllotmentIds[_address].push(allotmentCount);\r\n            uint256 getTotalDaysAfterLockingPeriod = ceilDiv(_amount,_amount.mul(_percentage).div(100000));\r\n            getDays[_address] = timeStamps + (getTotalDaysAfterLockingPeriod * 1 days) - 1 days;\r\n            IERC20(tokenAddress).transferFrom(msg.sender,address(this),_amount);\r\n        }\r\n\r\n\r\n        function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            if (b == 0) {\r\n                return a / b;\r\n            }\r\n            return a == 0 ? 0 : (a - 1) / b + 1;\r\n        }\r\n\r\n        function availableForCollect(address _userAddress) public view returns(uint256) {\r\n            uint256 balances = 0;\r\n\r\n            for(uint256 i = 0; i < userAllotmentIds[_userAddress].length; i++) {   \r\n\r\n                if(allotments[userAllotmentIds[_userAddress][i]].endTime >= block.timestamp){\r\n                    return balances;\r\n                }\r\n                \r\n                uint256 perDayAllotment = (allotments[userAllotmentIds[_userAddress][i]].tokenAlloted).mul(allotments[userAllotmentIds[_userAddress][i]].percentage).div(100000);\r\n                uint256 maxDays = ceilDiv(allotments[userAllotmentIds[_userAddress][i]].tokenAlloted,perDayAllotment);\r\n                uint256 tokenAllotment = allotments[userAllotmentIds[_userAddress][i]].tokenAlloted;\r\n                uint256 numberOfDays = (\r\n                    block.timestamp - (\r\n                        allotments[userAllotmentIds[_userAddress][i]].endTime\r\n                    )\r\n                ).div(1 days);\r\n\r\n                if (block.timestamp >= allotments[userAllotmentIds[_userAddress][i]].endTime && block.timestamp <= allotments[userAllotmentIds[_userAddress][i]].endTime + 1 days){\r\n                    balances = perDayAllotment;\r\n                }else if(numberOfDays > 0 && numberOfDays < maxDays -1){\r\n                    balances = balances + perDayAllotment + (numberOfDays.mul(perDayAllotment));\r\n                }else{\r\n                    balances = balances + tokenAllotment;\r\n                }\r\n            } \r\n            return balances - (userClaimedTokens[_userAddress]);\r\n        }\r\n\r\n        function collectTokens() public {\r\n            tokenAddress.transfer(msg.sender,availableForCollect(msg.sender));\r\n            userClaimedTokens[msg.sender] = userClaimedTokens[msg.sender] +  availableForCollect(msg.sender);\r\n            userClaimCounts[msg.sender] = userClaimCounts[msg.sender] + 1;\r\n        }\r\n\r\n\r\n        function balance() public view returns(uint256){\r\n            return IERC20(tokenAddress).balanceOf(address(this));\r\n        }\r\n\r\n        function setAdmin(address _admin) public onlyOwner {\r\n            admin = _admin;\r\n        }   \r\n\r\n    }", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"adminAllotment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allotmentCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allotments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allotmentID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAlloted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"availableForCollect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"checkAllotedUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalTokensAlloted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensAllotedTillDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userAllotmentCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userAllotmentIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userClaimCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userClaimedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "stakeDeod", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000e77abb1e75d2913b2076dd16049992ffeaca523500000000000000000000000065c0cb0e58d0a45d294bc0d1c37ee8c714e1372d", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0c5fc8d35abd710ecb03eb75b3542a5a8dd0f48b4213039c0bc6e9d9958a77bb"}