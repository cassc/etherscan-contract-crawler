{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/swapGateway/SwapRouterQuickV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\r\\nimport \\\"./SwapRouterBase.sol\\\";\\r\\nimport \\\"./SwapRouterLib.sol\\\";\\r\\nimport \\\"../interfaces/IAlgebra.sol\\\";\\r\\nimport \\\"../interfaces/IQuickswap.sol\\\";\\r\\nimport \\\"../interfaces/IWETH.sol\\\";\\r\\n\\r\\ncontract SwapRouterQuickV3 is SwapRouterBase {\\r\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n\\r\\n    /**\\r\\n     * @notice Receive an as many output tokens as possible for an exact amount of input tokens.\\r\\n     * @param amountIn TPayable amount of input tokens.\\r\\n     * @param amountOutMin The minimum amount tokens to receive.\\r\\n     * @param path (address[]) An array of token addresses. path.length must be >= 2.\\r\\n     * Pools for each consecutive pair of addresses must exist and have liquidity.\\r\\n     * address(0) will be used for wrapped ETH\\r\\n     * @param fees fees of pool\\r\\n     * @param deadline Unix timestamp deadline by which the transaction must confirm.\\r\\n     */\\r\\n    function swapExactIn(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] memory path,\\r\\n        uint24[] memory fees,\\r\\n        uint256 deadline\\r\\n    ) external payable override returns (uint256[] memory amounts) {\\r\\n        uint256 length = path.length;\\r\\n        address recipient = msg.sender;\\r\\n        address _wETH = wETH;\\r\\n        address _swapRouter = swapRouter;\\r\\n        amounts = new uint256[](1);\\r\\n\\r\\n        if (path[0] == _wETH) {\\r\\n            require(msg.value >= amountIn, \\\"SG0\\\");\\r\\n\\r\\n            // If too much ETH has been sent, send it back to sender\\r\\n            if (msg.value > amountIn) {\\r\\n                _send(payable(msg.sender), msg.value - amountIn);\\r\\n            }\\r\\n        } else {\\r\\n            IERC20Upgradeable(path[0]).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                amountIn\\r\\n            );\\r\\n            _approveTokenForSwapRouter(path[0], _swapRouter, amountIn);\\r\\n        }\\r\\n\\r\\n        if (path[length - 1] == _wETH) {\\r\\n            recipient = address(this);\\r\\n        }\\r\\n\\r\\n        // Single\\r\\n        if (length == 2) {\\r\\n            // Check pool and fee\\r\\n            _findQuickswapV3Pool(path[0], path[1], fees[0]);\\r\\n\\r\\n            IAlgebraSwapRouter.ExactInputSingleParams\\r\\n                memory params = IAlgebraSwapRouter.ExactInputSingleParams({\\r\\n                    tokenIn: path[0],\\r\\n                    tokenOut: path[1],\\r\\n                    recipient: recipient,\\r\\n                    deadline: deadline,\\r\\n                    amountIn: amountIn,\\r\\n                    amountOutMinimum: amountOutMin,\\r\\n                    limitSqrtPrice: 0\\r\\n                });\\r\\n\\r\\n            if (path[0] == _wETH) {\\r\\n                amounts[0] = IAlgebraSwapRouter(_swapRouter).exactInputSingle{\\r\\n                    value: amountIn\\r\\n                }(params);\\r\\n            } else {\\r\\n                amounts[0] = IAlgebraSwapRouter(_swapRouter).exactInputSingle(\\r\\n                    params\\r\\n                );\\r\\n            }\\r\\n        } else {\\r\\n            // Multihop\\r\\n            // Check pool and fee\\r\\n            for (uint256 i = 0; i < length - 1; ) {\\r\\n                _findQuickswapV3Pool(path[i], path[i + 1], fees[i]);\\r\\n\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            IAlgebraSwapRouter.ExactInputParams\\r\\n                memory params = IAlgebraSwapRouter.ExactInputParams({\\r\\n                    path: SwapRouterLib.generateEncodedPath(path),\\r\\n                    recipient: recipient,\\r\\n                    deadline: deadline,\\r\\n                    amountIn: amountIn,\\r\\n                    amountOutMinimum: amountOutMin\\r\\n                });\\r\\n\\r\\n            if (path[0] == _wETH) {\\r\\n                amounts[0] = IAlgebraSwapRouter(_swapRouter).exactInput{\\r\\n                    value: amountIn\\r\\n                }(params);\\r\\n            } else {\\r\\n                amounts[0] = IAlgebraSwapRouter(_swapRouter).exactInput(params);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // If receive ETH, unWrap it\\r\\n        if (path[length - 1] == _wETH) {\\r\\n            IWETH(_wETH).withdraw(\\r\\n                IERC20Upgradeable(_wETH).balanceOf(address(this))\\r\\n            );\\r\\n            _send(payable(msg.sender), address(this).balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Receive an exact amount of output tokens for as few input tokens as possible.\\r\\n     * @param amountOut Payable amount of input tokens.\\r\\n     * @param amountInMax The minimum amount tokens to input.\\r\\n     * @param path (address[]) An array of token addresses. path.length must be >= 2.\\r\\n     * Pools for each consecutive pair of addresses must exist and have liquidity.\\r\\n     * address(0) will be used for wrapped ETH\\r\\n     * @param fees fees of pool\\r\\n     * @param deadline Unix timestamp deadline by which the transaction must confirm.\\r\\n     */\\r\\n    function swapExactOut(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] memory path,\\r\\n        uint24[] memory fees,\\r\\n        uint256 deadline\\r\\n    ) external payable override returns (uint256[] memory amounts) {\\r\\n        uint256 remainedToken;\\r\\n        uint256 length = path.length;\\r\\n        address recipient = msg.sender;\\r\\n        address _wETH = wETH;\\r\\n        address _swapRouter = swapRouter;\\r\\n        amounts = new uint256[](1);\\r\\n\\r\\n        if (path[0] == _wETH) {\\r\\n            require(msg.value >= amountInMax, \\\"SG0\\\");\\r\\n\\r\\n            // If too much ETH has been sent, send it back to sender\\r\\n            if (msg.value > amountInMax) {\\r\\n                _send(payable(msg.sender), msg.value - amountInMax);\\r\\n            }\\r\\n        } else {\\r\\n            IERC20Upgradeable(path[0]).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                amountInMax\\r\\n            );\\r\\n            _approveTokenForSwapRouter(path[0], _swapRouter, amountInMax);\\r\\n        }\\r\\n\\r\\n        if (path[length - 1] == _wETH) {\\r\\n            recipient = address(this);\\r\\n        }\\r\\n\\r\\n        // Single Swap\\r\\n        if (length == 2) {\\r\\n            // Check pool and fee\\r\\n            (, uint24 fee) = _findQuickswapV3Pool(path[0], path[1], fees[0]);\\r\\n\\r\\n            IAlgebraSwapRouter.ExactOutputSingleParams\\r\\n                memory params = IAlgebraSwapRouter.ExactOutputSingleParams({\\r\\n                    tokenIn: path[0],\\r\\n                    tokenOut: path[1],\\r\\n                    fee: fee,\\r\\n                    recipient: recipient,\\r\\n                    deadline: deadline,\\r\\n                    amountOut: amountOut,\\r\\n                    amountInMaximum: amountInMax,\\r\\n                    limitSqrtPrice: 0\\r\\n                });\\r\\n\\r\\n            if (path[0] == _wETH) {\\r\\n                amounts[0] = IAlgebraSwapRouter(_swapRouter).exactOutputSingle{\\r\\n                    value: amountInMax\\r\\n                }(params);\\r\\n            } else {\\r\\n                amounts[0] = IAlgebraSwapRouter(_swapRouter).exactOutputSingle(\\r\\n                    params\\r\\n                );\\r\\n            }\\r\\n        } else {\\r\\n            // Multihop\\r\\n\\r\\n            // Get reverse path\\r\\n            address[] memory reversePath = new address[](length);\\r\\n            uint24[] memory reverseFees = new uint24[](length - 1);\\r\\n            for (uint256 i = 0; i < length; ) {\\r\\n                reversePath[i] = path[length - 1 - i];\\r\\n                if (i < length - 1) reverseFees[i] = fees[length - 2 - i];\\r\\n\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // Check pool, fee\\r\\n            for (uint256 i = 0; i < length - 1; ) {\\r\\n                _findQuickswapV3Pool(\\r\\n                    reversePath[i],\\r\\n                    reversePath[i + 1],\\r\\n                    reverseFees[i]\\r\\n                );\\r\\n\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            IAlgebraSwapRouter.ExactOutputParams\\r\\n                memory params = IAlgebraSwapRouter.ExactOutputParams({\\r\\n                    path: SwapRouterLib.generateEncodedPath(reversePath),\\r\\n                    recipient: recipient,\\r\\n                    deadline: deadline,\\r\\n                    amountOut: amountOut,\\r\\n                    amountInMaximum: amountInMax\\r\\n                });\\r\\n\\r\\n            if (path[0] == _wETH) {\\r\\n                amounts[0] = IAlgebraSwapRouter(_swapRouter).exactOutput{\\r\\n                    value: amountInMax\\r\\n                }(params);\\r\\n            } else {\\r\\n                amounts[0] = IAlgebraSwapRouter(_swapRouter).exactOutput(\\r\\n                    params\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // send back remained token\\r\\n        if (path[0] == _wETH) {\\r\\n            IQuickswapV3Router(_swapRouter).refundNativeToken(); // Take back leftover ETH\\r\\n            remainedToken = address(this).balance;\\r\\n            if (remainedToken > 0) {\\r\\n                _send(payable(msg.sender), remainedToken);\\r\\n            }\\r\\n        } else {\\r\\n            remainedToken = IERC20Upgradeable(path[0]).balanceOf(address(this));\\r\\n            if (remainedToken > 0) {\\r\\n                IERC20Upgradeable(path[0]).safeTransfer(\\r\\n                    msg.sender,\\r\\n                    remainedToken\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // If receive ETH, unWrap it\\r\\n        if (path[length - 1] == _wETH) {\\r\\n            IWETH(_wETH).withdraw(\\r\\n                IERC20Upgradeable(_wETH).balanceOf(address(this))\\r\\n            );\\r\\n            _send(payable(msg.sender), address(this).balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function quoteExactInput(\\r\\n        uint256 amountIn,\\r\\n        address[] memory path,\\r\\n        uint24[] memory fees\\r\\n    ) public view override returns (uint256 amountOut) {\\r\\n        if (amountIn > 0) {\\r\\n            amountOut = amountIn;\\r\\n\\r\\n            for (uint256 i = 0; i < path.length - 1; ) {\\r\\n                uint256 quote = _getQuickswapV3Quote(\\r\\n                    path[i],\\r\\n                    path[i + 1],\\r\\n                    fees[i]\\r\\n                );\\r\\n                amountOut = (amountOut * quote) / BASE;\\r\\n\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function quoteExactOutput(\\r\\n        uint256 amountOut,\\r\\n        address[] memory path,\\r\\n        uint24[] memory fees\\r\\n    ) public view override returns (uint256 amountIn) {\\r\\n        if (amountOut > 0) {\\r\\n            amountIn = amountOut;\\r\\n\\r\\n            for (uint256 i = path.length - 1; i > 0; ) {\\r\\n                uint256 quote = _getQuickswapV3Quote(\\r\\n                    path[i],\\r\\n                    path[i - 1],\\r\\n                    fees[i - 1]\\r\\n                );\\r\\n                amountIn = (amountIn * quote) / BASE;\\r\\n\\r\\n                unchecked {\\r\\n                    --i;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice get QuickswapV3 amount out for 1 decimal\\r\\n     * if token 1 = wBNB (deciaml = 18, price = 331USD), token 2 = USDC(decmail = 6), amountOut = 331000000\\r\\n     * @param tokenIn Address of token input\\r\\n     * @param tokenOut Address of token output\\r\\n     * @param _fee target fee\\r\\n     * @return amountOut amount of tokenOut : decimal = tokenOut.decimals + 18 - tokenIn.decimals;\\r\\n     */\\r\\n    function _getQuickswapV3Quote(\\r\\n        address tokenIn,\\r\\n        address tokenOut,\\r\\n        uint24 _fee\\r\\n    ) private view returns (uint256 amountOut) {\\r\\n        // Find Pool\\r\\n        (address pool, ) = _findQuickswapV3Pool(tokenIn, tokenOut, _fee);\\r\\n\\r\\n        // Calulate Quote\\r\\n        (uint160 price, , , , , , ) = IAlgebraPool(pool).globalState();\\r\\n\\r\\n        amountOut = SwapRouterLib.calcUniswapV3Quote(\\r\\n            tokenIn,\\r\\n            IAlgebraPool(pool).token0(),\\r\\n            price\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get pool, fee of QuickswapV3\\r\\n     * @param tokenA Address of TokenA\\r\\n     * @param tokenB Address of TokenB\\r\\n     * @param _fee target fee\\r\\n     * @return pool address of pool, address(0) if pool isn't exist\\r\\n     * @return fee fee\\r\\n     */\\r\\n    function _findQuickswapV3Pool(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint24 _fee\\r\\n    ) private view returns (address pool, uint24 fee) {\\r\\n        pool = IQuickswapV3Factory(IQuickswapV3Router(swapRouter).factory())\\r\\n            .poolByPair(tokenA, tokenB);\\r\\n\\r\\n        if (pool != ZERO_ADDRESS) {\\r\\n            (, , uint16 fee16, , , , ) = IAlgebraPool(pool).globalState();\\r\\n            fee = uint24(fee16);\\r\\n\\r\\n            if (_fee != 0 && fee != _fee) revert(\\\"SG2\\\");\\r\\n        } else {\\r\\n            revert(\\\"SG2\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/swapGateway/SwapRouterBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\nimport \\\"../utils/UpgradeableBase.sol\\\";\\r\\nimport \\\"../interfaces/ISwap.sol\\\";\\r\\nimport \\\"../interfaces/IUniswapV3.sol\\\";\\r\\n\\r\\nabstract contract SwapRouterBase is ISwapGatewayBase, UpgradeableBase {\\r\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n\\r\\n    address internal constant ZERO_ADDRESS = address(0);\\r\\n    uint256 internal constant BASE = 10**18;\\r\\n    address public swapRouter;\\r\\n    address public wETH;\\r\\n\\r\\n    event SetWETH(address wETH);\\r\\n    event SetSwapRouter(address swapRouter);\\r\\n\\r\\n    function __SwapRouterBase_init(address _swapRouter, address _wETH)\\r\\n        public\\r\\n        initializer\\r\\n    {\\r\\n        wETH = _wETH;\\r\\n        swapRouter = _swapRouter;\\r\\n\\r\\n        UpgradeableBase.initialize();\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n\\r\\n    /*** Owner function ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Set wETH\\r\\n     * @param _wETH Address of Wrapped ETH\\r\\n     */\\r\\n    function setWETH(address _wETH) external onlyOwnerAndAdmin {\\r\\n        require(_wETH != ZERO_ADDRESS, \\\"SG8\\\");\\r\\n\\r\\n        wETH = _wETH;\\r\\n        emit SetWETH(_wETH);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set SwapRouter\\r\\n     * @param _swapRouter Address of swapRouter\\r\\n     */\\r\\n    function setSwapRouter(address _swapRouter) external onlyOwnerAndAdmin {\\r\\n        require(swapRouter != ZERO_ADDRESS, \\\"SG8\\\");\\r\\n\\r\\n        swapRouter = _swapRouter;\\r\\n\\r\\n        emit SetSwapRouter(swapRouter);\\r\\n    }\\r\\n\\r\\n    /*** Internal Function ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Send ETH to address\\r\\n     * @param _to target address to receive ETH\\r\\n     * @param amount ETH amount (wei) to be sent\\r\\n     */\\r\\n    function _send(address payable _to, uint256 amount) internal {\\r\\n        (bool sent, ) = _to.call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"SR1\\\");\\r\\n    }\\r\\n\\r\\n    function _approveTokenForSwapRouter(\\r\\n        address token,\\r\\n        address _swapRouter,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        uint256 allowance = IERC20Upgradeable(token).allowance(\\r\\n            address(this),\\r\\n            _swapRouter\\r\\n        );\\r\\n\\r\\n        if (allowance == 0) {\\r\\n            IERC20Upgradeable(token).safeApprove(_swapRouter, amount);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (allowance < amount) {\\r\\n            IERC20Upgradeable(token).safeIncreaseAllowance(\\r\\n                _swapRouter,\\r\\n                amount - allowance\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _findSwapPool(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint24 _fee,\\r\\n        uint24[] memory fees\\r\\n    ) internal view returns (address pool, uint24 fee) {\\r\\n        if (_fee != 0) {\\r\\n            pool = IUniswapV3Factory(IUniswapV3Router(swapRouter).factory())\\r\\n                .getPool(tokenA, tokenB, _fee);\\r\\n\\r\\n            require(pool != ZERO_ADDRESS, \\\"SG2\\\");\\r\\n            fee = _fee;\\r\\n        } else {\\r\\n            uint256 length = fees.length;\\r\\n            uint256 liquidity = 0;\\r\\n            address factory = IUniswapV3Router(swapRouter).factory();\\r\\n\\r\\n            for (uint8 i = 0; i < length; ) {\\r\\n                address _pool = IUniswapV3Factory(factory).getPool(\\r\\n                    tokenA,\\r\\n                    tokenB,\\r\\n                    fees[i]\\r\\n                );\\r\\n                if (_pool != ZERO_ADDRESS) {\\r\\n                    uint256 _liquidity = _getPoolLiquidity(_pool);\\r\\n                    if (_liquidity > liquidity) {\\r\\n                        liquidity = _liquidity;\\r\\n                        fee = fees[i];\\r\\n                        pool = _pool;\\r\\n                    }\\r\\n                }\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            require(fee > 0, \\\"SG2\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getPoolLiquidity(address pool)\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (uint256)\\r\\n    {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IQuickswap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IQuickswapV3Router {\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function refundNativeToken() external payable;\\r\\n}\\r\\n\\r\\ninterface IQuickswapV3Factory {\\r\\n    function poolByPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        view\\r\\n        returns (address pool);\\r\\n}\\r\\n\\r\\ninterface IQuickswapV3Pool {\\r\\n    function globalState()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint160 price,\\r\\n            int24 tick,\\r\\n            uint16 fee,\\r\\n            uint16 timepointIndex,\\r\\n            uint8 communityFeeToken0,\\r\\n            uint8 communityFeeToken1,\\r\\n            bool unlocked\\r\\n        );\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IAlgebra.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.7.5;\\r\\npragma abicoder v2;\\r\\n\\r\\n/// @title Router token swapping functionality\\r\\n/// @notice Functions for swapping tokens via\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-periphery\\r\\ninterface IAlgebraSwapRouter {\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 limitSqrtPrice;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingle(ExactInputSingleParams calldata params)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInput(ExactInputParams calldata params)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 limitSqrtPrice;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutputSingle(ExactOutputSingleParams calldata params)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint256 amountIn);\\r\\n\\r\\n    struct ExactOutputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutput(ExactOutputParams calldata params)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint256 amountIn);\\r\\n}\\r\\n\\r\\ninterface IAlgebraFactory {\\r\\n    /**\\r\\n     *  @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\r\\n     *  @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\r\\n     *  @param tokenA The contract address of either token0 or token1\\r\\n     *  @param tokenB The contract address of the other token\\r\\n     *  @return pool The pool address\\r\\n     */\\r\\n    function poolByPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        view\\r\\n        returns (address pool);\\r\\n}\\r\\n\\r\\ninterface IAlgebraPool {\\r\\n    struct Position {\\r\\n        uint128 liquidity; // The amount of liquidity concentrated in the range\\r\\n        uint32 lastLiquidityAddTimestamp; // Timestamp of last adding of liquidity\\r\\n        uint256 innerFeeGrowth0Token; // The last updated fee growth per unit of liquidity\\r\\n        uint256 innerFeeGrowth1Token;\\r\\n        uint128 fees0; // The amount of token0 owed to a LP\\r\\n        uint128 fees1; // The amount of token1 owed to a LP\\r\\n    }\\r\\n\\r\\n    function globalState()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint160 price,\\r\\n            int24 tick,\\r\\n            uint16 fee,\\r\\n            uint16 timepointIndex,\\r\\n            uint8 communityFeeToken0,\\r\\n            uint8 communityFeeToken1,\\r\\n            bool unlocked\\r\\n        );\\r\\n\\r\\n    function totalFeeGrowth0X128() external view returns (uint256);\\r\\n\\r\\n    function totalFeeGrowth1X128() external view returns (uint256);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function positions(bytes32) external view returns (Position memory);\\r\\n\\r\\n    function ticks(int24)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint128 liquidityTotal,\\r\\n            int128 liquidityDelta,\\r\\n            uint256 outerFeeGrowth0Token,\\r\\n            uint256 outerFeeGrowth1Token,\\r\\n            int56 outerTickCumulative,\\r\\n            uint160 outerSecondsPerLiquidity,\\r\\n            uint32 outerSecondsSpent,\\r\\n            bool initialized\\r\\n        );\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/swapGateway/SwapRouterLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\npragma abicoder v2;\\r\\n\\r\\nlibrary SwapRouterLib {\\r\\n    uint256 private constant BASE = 10**18;\\r\\n\\r\\n    /**\\r\\n     * @notice Generate abi.encodePacked path for UniswapV3/PcsV3 multihop swap\\r\\n     * @param tokens list of tokens\\r\\n     * @param fees list of pool fees\\r\\n     */\\r\\n    function generateEncodedPathWithFee(\\r\\n        address[] memory tokens,\\r\\n        uint24[] memory fees\\r\\n    ) public pure returns (bytes memory) {\\r\\n        require(tokens.length == fees.length + 1, \\\"SG3\\\");\\r\\n\\r\\n        bytes memory path = new bytes(0);\\r\\n\\r\\n        for (uint256 i = 0; i < fees.length; i++) {\\r\\n            path = abi.encodePacked(path, tokens[i], fees[i]);\\r\\n        }\\r\\n\\r\\n        path = abi.encodePacked(path, tokens[tokens.length - 1]);\\r\\n\\r\\n        return path;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Generate abi.encodePacked path for QuickswapV3 multihop swap\\r\\n     * @param tokens list of tokens\\r\\n     */\\r\\n    function generateEncodedPath(address[] memory tokens)\\r\\n        public\\r\\n        pure\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        bytes memory path = new bytes(0);\\r\\n\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            path = abi.encodePacked(path, tokens[i]);\\r\\n        }\\r\\n\\r\\n        return path;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate UniswapV3 price quote\\r\\n     * @param tokenIn Address of token input\\r\\n     * @param baseToken Base token of pool\\r\\n     * @param price slot0 of pool\\r\\n     * @return amountOut calculated result\\r\\n     */\\r\\n    function calcUniswapV3Quote(\\r\\n        address tokenIn,\\r\\n        address baseToken,\\r\\n        uint160 price\\r\\n    ) public pure returns (uint256 amountOut) {\\r\\n        if (tokenIn == baseToken) {\\r\\n            if (price > 10**29) {\\r\\n                amountOut = ((price * 10**9) / 2**96)**2;\\r\\n            } else {\\r\\n                amountOut = (uint256(price)**2 * BASE) / (2**192);\\r\\n            }\\r\\n        } else {\\r\\n            if (price > 10**35) {\\r\\n                amountOut = ((2**96 * 10**9) / (price))**2;\\r\\n            } else {\\r\\n                amountOut = (2**192 * BASE) / (uint256(price)**2);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function withdraw(uint256 wad) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/UpgradeableBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.13;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"./OwnableUpgradeableVersionable.sol\\\";\\r\\nimport \\\"./OwnableUpgradeableAdminable.sol\\\";\\r\\n\\r\\nabstract contract UpgradeableBase is\\r\\n    Initializable,\\r\\n    OwnableUpgradeableVersionable,\\r\\n    OwnableUpgradeableAdminable,\\r\\n    UUPSUpgradeable\\r\\n{\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    function initialize() public virtual onlyInitializing {\\r\\n        __Ownable_init();\\r\\n        __UUPSUpgradeable_init();\\r\\n    }\\r\\n\\r\\n    function _authorizeUpgrade(address newImplementation)\\r\\n        internal\\r\\n        virtual\\r\\n        override\\r\\n        onlyOwner\\r\\n    {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IUniswapV3Router {\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function refundETH() external payable;\\r\\n}\\r\\n\\r\\ninterface IUniswapV3Factory {\\r\\n    function getPool(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint24 fee\\r\\n    ) external view returns (address pool);\\r\\n}\\r\\n\\r\\nstruct Slot0 {\\r\\n    // the current price\\r\\n    uint160 sqrtPriceX96;\\r\\n    // the current tick\\r\\n    int24 tick;\\r\\n    // the most-recently updated index of the observations array\\r\\n    uint16 observationIndex;\\r\\n    // the current maximum number of observations that are being stored\\r\\n    uint16 observationCardinality;\\r\\n    // the next maximum number of observations to store, triggered in observations.write\\r\\n    uint16 observationCardinalityNext;\\r\\n    // the current protocol fee as a percentage of the swap fee taken on withdrawal\\r\\n    // represented as an integer denominator (1/x)%\\r\\n    uint8 feeProtocol;\\r\\n    // whether the pool is locked\\r\\n    bool unlocked;\\r\\n}\\r\\n\\r\\ninterface IUniswapV3Pool {\\r\\n    function slot0() external view returns (Slot0 memory);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function liquidity() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ISwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface ISwapGatewayBase {\\r\\n    function swapExactIn(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] memory path,\\r\\n        uint24[] memory fees,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactOut(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] memory path,\\r\\n        uint24[] memory fees,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function quoteExactInput(\\r\\n        uint256 amountIn,\\r\\n        address[] memory path,\\r\\n        uint24[] memory fees\\r\\n    ) external view returns (uint256 amountOut);\\r\\n\\r\\n    function quoteExactOutput(\\r\\n        uint256 amountOut,\\r\\n        address[] memory path,\\r\\n        uint24[] memory fees\\r\\n    ) external view returns (uint256 amountIn);\\r\\n}\\r\\n\\r\\ninterface ISwapGateway {\\r\\n    function swap(\\r\\n        address swapRouter,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOut,\\r\\n        address[] memory path,\\r\\n        bool isExactInput\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swap(\\r\\n        address swapRouter,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOut,\\r\\n        address[] memory path,\\r\\n        bool isExactInput,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swap(\\r\\n        address swapRouter,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOut,\\r\\n        address[] memory path,\\r\\n        uint24[] memory fees,\\r\\n        bool isExactInput\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swap(\\r\\n        address swapRouter,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOut,\\r\\n        address[] memory path,\\r\\n        uint24[] memory fees,\\r\\n        bool isExactInput,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function quoteExactInput(\\r\\n        address swapRouter,\\r\\n        uint256 amountIn,\\r\\n        address[] memory path\\r\\n    ) external view returns (uint256 amountOut);\\r\\n\\r\\n    function quoteExactInput(\\r\\n        address swapRouter,\\r\\n        uint256 amountIn,\\r\\n        address[] memory path,\\r\\n        uint24[] memory fees\\r\\n    ) external view returns (uint256 amountOut);\\r\\n\\r\\n    function quoteExactOutput(\\r\\n        address swapRouter,\\r\\n        uint256 amountOut,\\r\\n        address[] memory path\\r\\n    ) external view returns (uint256 amountIn);\\r\\n\\r\\n    function quoteExactOutput(\\r\\n        address swapRouter,\\r\\n        uint256 amountOut,\\r\\n        address[] memory path,\\r\\n        uint24[] memory fees\\r\\n    ) external view returns (uint256 amountIn);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/OwnableUpgradeableVersionable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.13;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\nabstract contract OwnableUpgradeableVersionable is OwnableUpgradeable {\\r\\n    string private _version;\\r\\n    string private _purpose;\\r\\n\\r\\n    event UpgradeVersion(string version, string purpose);\\r\\n\\r\\n    function getVersion() external view returns (string memory) {\\r\\n        return _version;\\r\\n    }\\r\\n\\r\\n    function getPurpose() external view returns (string memory) {\\r\\n        return _purpose;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set version and purpose\\r\\n     * @param version Version string, ex : 1.2.0\\r\\n     * @param purpose Purpose string\\r\\n     */\\r\\n    function upgradeVersion(string memory version, string memory purpose)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(bytes(version).length != 0, \\\"OV1\\\");\\r\\n\\r\\n        _version = version;\\r\\n        _purpose = purpose;\\r\\n\\r\\n        emit UpgradeVersion(version, purpose);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/OwnableUpgradeableAdminable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.13;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\nabstract contract OwnableUpgradeableAdminable is OwnableUpgradeable {\\r\\n    address private _admin;\\r\\n\\r\\n    event SetAdmin(address admin);\\r\\n\\r\\n    modifier onlyAdmin() virtual {\\r\\n        require(msg.sender == _admin, \\\"OA1\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwnerAndAdmin() virtual {\\r\\n        require(msg.sender == owner() || msg.sender == _admin, \\\"OA2\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set admin\\r\\n     * @param newAdmin Addres of new admin\\r\\n     */\\r\\n    function setAdmin(address newAdmin) external onlyOwner {\\r\\n        _admin = newAdmin;\\r\\n        emit SetAdmin(newAdmin);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.3) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.3) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.9._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/swapGateway/SwapRouterLib.sol\": {\r\n        \"SwapRouterLib\": \"0x10d38eaa8b4bf43f90bfa66b6886f9b256c5e068\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"}],\"name\":\"SetSwapRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wETH\",\"type\":\"address\"}],\"name\":\"SetWETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"purpose\",\"type\":\"string\"}],\"name\":\"UpgradeVersion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wETH\",\"type\":\"address\"}],\"name\":\"__SwapRouterBase_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPurpose\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint24[]\",\"name\":\"fees\",\"type\":\"uint24[]\"}],\"name\":\"quoteExactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint24[]\",\"name\":\"fees\",\"type\":\"uint24[]\"}],\"name\":\"quoteExactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"}],\"name\":\"setSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wETH\",\"type\":\"address\"}],\"name\":\"setWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint24[]\",\"name\":\"fees\",\"type\":\"uint24[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint24[]\",\"name\":\"fees\",\"type\":\"uint24[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"purpose\",\"type\":\"string\"}],\"name\":\"upgradeVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SwapRouterQuickV3", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}