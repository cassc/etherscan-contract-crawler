{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    // function sendValue(address payable recipient, uint256 amount) internal {\\n    //     require(\\n    //         address(this).balance >= amount,\\n    //         \\\"Address: insufficient balance\\\"\\n    //     );\\n\\n    //     (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    //     require(\\n    //         success,\\n    //         \\\"Address: unable to send value, recipient may have reverted\\\"\\n    //     );\\n    // }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    // function functionCall(\\n    //     address target,\\n    //     bytes memory data\\n    // ) internal returns (bytes memory) {\\n    //     return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    // }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\n            data\\n        );\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    // function functionStaticCall(\\n    //     address target,\\n    //     bytes memory data\\n    // ) internal view returns (bytes memory) {\\n    //     return\\n    //         functionStaticCall(\\n    //             target,\\n    //             data,\\n    //             \\\"Address: low-level static call failed\\\"\\n    //         );\\n    // }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    // function functionStaticCall(\\n    //     address target,\\n    //     bytes memory data,\\n    //     string memory errorMessage\\n    // ) internal view returns (bytes memory) {\\n    //     require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n    //     (bool success, bytes memory returndata) = target.staticcall(data);\\n    //     return verifyCallResult(success, returndata, errorMessage);\\n    // }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    // function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    //     return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    // }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    // function functionDelegateCall(\\n    //     address target,\\n    //     bytes memory data,\\n    //     string memory errorMessage\\n    // ) internal returns (bytes memory) {\\n    //     require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n    //     (bool success, bytes memory returndata) = target.delegatecall(data);\\n    //     return verifyCallResult(success, returndata, errorMessage);\\n    // }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/Context.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    // function _msgData() internal view virtual returns (bytes calldata) {\\n    //     return msg.data;\\n    // }\\n}\"\r\n    },\r\n    \"contracts/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n}\"\r\n    },\r\n    \"contracts/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport './Context.sol';\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\"\r\n    },\r\n    \"contracts/PaydeceEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport './IERC20.sol';\\nimport './Address.sol';\\nimport './SafeERC20.sol';\\nimport './ReentrancyGuard.sol';\\nimport './Context.sol';\\nimport './Ownable.sol';\\n\\ncontract PaydeceEscrow is ReentrancyGuard, Ownable {\\n    // 0.1 es 100 porque se multiplico por mil => 0.1 X 1000 = 100\\n    uint256 public feeTaker;\\n    uint256 public feeMaker;\\n    uint256 public feesAvailableNativeCoin;\\n    uint256 public timeProcess; //Tiempo que tienen para completar la transaccion\\n\\n    using SafeERC20 for IERC20;\\n    mapping(uint => Escrow) public escrows;\\n    mapping(address => bool) whitelistedStablesAddresses;\\n    mapping(IERC20 => uint) public feesAvailable;\\n\\n    event EscrowDeposit(uint indexed orderId, Escrow escrow);\\n    event EscrowComplete(uint indexed orderId, Escrow escrow);\\n    event EscrowDisputeResolved(uint indexed orderId);\\n    event EscrowCancelMaker(uint indexed orderId, Escrow escrow);\\n    event EscrowCancelMakerOwner(uint indexed orderId, Escrow escrow);\\n    event EscrowCancelTaker(uint indexed orderId, Escrow escrow);\\n    event EscrowCancelTakerOwner(uint indexed orderId, Escrow escrow);\\n    event EscrowMarkAsPaid(uint indexed orderId, Escrow escrow);\\n    event EscrowMarkAsPaidOwner(uint indexed orderId, Escrow escrow);\\n\\n    // Maker defined as who buys usdt\\n    modifier onlyMaker(uint _orderId) {\\n        require(\\n            msg.sender == escrows[_orderId].maker,\\n            \\\"Only Maker can call this\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyTaker(uint _orderId) {\\n        require(\\n            msg.sender == escrows[_orderId].taker,\\n            \\\"Only Taker can call this\\\"\\n        );\\n        _;\\n    }\\n\\n    // modifier onlyTakerOrOwner(uint _orderId) {\\n    //     require(\\n    //         msg.sender == escrows[_orderId].taker || owner() == _msgSender() ,\\n    //         \\\"Only Taker can call this\\\"\\n    //     );\\n    //     // require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    //     _;\\n    // }\\n\\n    enum EscrowStatus {\\n        Unknown, //0\\n        ACTIVE, // 1,\\n        CRYPTOS_IN_CUSTODY, // 2,\\n        FIATCOIN_TRANSFERED, // 3, dev un metodo publico owner y taker\\n        COMPLETED, // 4,\\n        DELETED, // 5,\\n        APPEALED, // 6,\\n        REFUND, // 7,\\n        RELEASE, // 8\\n        CANCEL_MAKER, //9\\n        CANCEL_TAKER  //10\\n    }\\n\\n    struct Escrow {\\n        address payable maker; //Comprador\\n        address payable taker; //Vendedor\\n        bool maker_premium;\\n        bool taker_premium;\\n        uint256 value; //Monto compra\\n        uint256 takerfee; //Comision vendedor\\n        uint256 makerfee; //Comision comprador\\n        IERC20 currency; //Moneda\\n        EscrowStatus status; //Estado\\n        uint256 created;\\n    }\\n\\n    //uint256 private feesAvailable;  // summation of fees that can be withdrawn\\n\\n    constructor() {\\n        feeTaker = 0;\\n        feeMaker = 0;\\n    }\\n\\n    // ================== Begin External functions ==================\\n    function setFeeTaker(uint256 _feeTaker) external onlyOwner {\\n        require(\\n            _feeTaker >= 0 && _feeTaker <= (1 * 1000),\\n            \\\"The fee can be from 0% to 1%\\\"\\n        );\\n        feeTaker = _feeTaker;\\n    }\\n\\n    function setFeeMaker(uint256 _feeMaker) external onlyOwner {\\n        require(\\n            _feeMaker >= 0 && _feeMaker <= (1 * 1000),\\n            \\\"The fee can be from 0% to 1%\\\"\\n        );\\n        feeMaker = _feeMaker;\\n    }\\n    \\n    function setTimeProcess(uint256 _timeProcess) external onlyOwner {\\n        require(\\n            _timeProcess > 0 ,\\n            \\\"The timeProcess can be 0\\\"\\n        );\\n        timeProcess = _timeProcess;\\n    }\\n\\n    /* This is called by the server / contract owner */\\n    function createEscrow(\\n        uint _orderId,\\n        address payable _taker,\\n        uint256 _value,\\n        IERC20 _currency,\\n        bool _maker_premium,\\n        bool _taker_premium\\n    ) external virtual {\\n        require(\\n            escrows[_orderId].status == EscrowStatus.Unknown,\\n            \\\"Escrow already exists\\\"\\n        );\\n\\n        require(\\n            whitelistedStablesAddresses[address(_currency)],\\n            \\\"Address Stable to be whitelisted\\\"\\n        );\\n\\n        require(msg.sender != _taker, \\\"taker cannot be the same as maker\\\");\\n\\n        uint8 _decimals = _currency.decimals();\\n        //Obtiene el monto a transferir desde el comprador al contrato\\n        uint256 _amountFeeMaker = ((_value * (feeMaker * 10 ** _decimals)) /\\n            (100 * 10 ** _decimals)) / 1000;\\n\\n        if(_maker_premium){\\n            _amountFeeMaker = 0;\\n        }    \\n\\n        //Valida el Allowance\\n        uint256 _allowance = _currency.allowance(msg.sender, address(this));\\n        require(\\n            _allowance >= (_value + _amountFeeMaker),\\n            \\\"Taker approve to Escrow first\\\"\\n        );\\n\\n        //Transfer USDT to contract\\n        _currency.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            (_value + _amountFeeMaker)\\n        );\\n\\n        escrows[_orderId] = Escrow(\\n            payable(msg.sender),\\n            _taker,\\n            _maker_premium,\\n            _taker_premium,\\n            _value,\\n            feeTaker,\\n            feeMaker,\\n            _currency,\\n            EscrowStatus.CRYPTOS_IN_CUSTODY,\\n            block.timestamp\\n        );\\n\\n        emit EscrowDeposit(_orderId, escrows[_orderId]);\\n    }\\n\\n    function createEscrowNativeCoin(\\n        uint _orderId,\\n        address payable _taker,\\n        uint256 _value,        \\n        bool _maker_premium,\\n        bool _taker_premium\\n    ) external payable virtual {\\n        require(\\n            escrows[_orderId].status == EscrowStatus.Unknown,\\n            \\\"Escrow already exists\\\"\\n        );\\n\\n        require(msg.sender != _taker, \\\"Taker cannot be the same as maker\\\");\\n\\n        uint8 _decimals = 18;\\n        //Obtiene el monto a transferir desde el comprador al contrato\\n        uint256 _amountFeeMaker = ((_value * (feeMaker * 10 ** _decimals)) /\\n            (100 * 10 ** _decimals)) / 1000;\\n\\n        if(_maker_premium){\\n            _amountFeeMaker = 0;\\n        }    \\n\\n        require((_value + _amountFeeMaker) <= msg.value, \\\"Incorrect amount\\\");\\n\\n        escrows[_orderId] = Escrow(\\n            payable(msg.sender),\\n            _taker,\\n            _maker_premium,\\n            _taker_premium,\\n            _value,\\n            feeTaker,\\n            feeMaker,\\n            IERC20(address(0)),\\n            EscrowStatus.CRYPTOS_IN_CUSTODY,\\n            block.timestamp\\n        );\\n\\n        emit EscrowDeposit(_orderId, escrows[_orderId]);\\n    }\\n\\n    function releaseEscrowOwner(uint _orderId) external onlyOwner {\\n        _releaseEscrow(_orderId);\\n    }\\n\\n    function releaseEscrowOwnerNativeCoin(uint _orderId) external onlyOwner {\\n        _releaseEscrowNativeCoin(_orderId);\\n    }\\n\\n    /* This is called by the maker wallet */\\n    function releaseEscrow(uint _orderId) external onlyMaker(_orderId) {\\n        _releaseEscrow(_orderId);\\n    }\\n\\n    function releaseEscrowNativeCoin(\\n        uint _orderId\\n    ) external onlyMaker(_orderId) {\\n        _releaseEscrowNativeCoin(_orderId);\\n    }\\n\\n    /// release funds to the maker - cancelled contract\\n    function refundMaker(uint _orderId) external nonReentrant onlyOwner {\\n        //require(escrows[_orderId].status == EscrowStatus.Refund,\\\"Refund not approved\\\");\\n\\n        uint256 _value = escrows[_orderId].value;\\n        address _maker = escrows[_orderId].maker;\\n        IERC20 _currency = escrows[_orderId].currency;        \\n\\n        _currency.safeTransfer(_maker, _value);\\n\\n        emit EscrowDisputeResolved(_orderId);\\n    }\\n\\n    function refundMakerNativeCoin(\\n        uint _orderId\\n    ) external nonReentrant onlyOwner {\\n        //require(escrows[_orderId].status == EscrowStatus.Refund,\\\"Refund not approved\\\");\\n\\n        uint256 _value = escrows[_orderId].value;\\n        address _maker = escrows[_orderId].maker;\\n\\n\\n        //Transfer call\\n        (bool sent, ) = payable(address(_maker)).call{value: _value}(\\\"\\\");\\n        require(sent, \\\"Transfer failed.\\\");\\n\\n        emit EscrowDisputeResolved(_orderId);\\n    }\\n\\n    function withdrawFees(IERC20 _currency) external onlyOwner {\\n        uint _amount;\\n\\n        // This check also prevents underflow\\n        require(feesAvailable[_currency] > 0, \\\"Amount > feesAvailable\\\");\\n\\n        _amount = feesAvailable[_currency];\\n\\n        feesAvailable[_currency] -= _amount;\\n\\n        _currency.safeTransfer(owner(), _amount);\\n    }\\n\\n    function withdrawFeesNativeCoin() external onlyOwner {\\n        uint256 _amount;\\n\\n        // This check also prevents underflow\\n        require(feesAvailableNativeCoin > 0, \\\"Amount > feesAvailable\\\");\\n\\n        //_amount = feesAvailable[_currency];\\n        _amount = feesAvailableNativeCoin;\\n\\n        feesAvailableNativeCoin -= _amount;\\n\\n        //Transfer\\n        (bool sent, ) = payable(msg.sender).call{value: _amount}(\\\"\\\");\\n        require(sent, \\\"Transfer failed.\\\");\\n    }\\n\\n    // ================== End External functions ==================\\n\\n    // ================== Begin External functions that are pure ==================\\n    function version() external pure virtual returns (string memory) {\\n        return \\\"4.1.0\\\";\\n    }\\n\\n    // ================== End External functions that are pure ==================\\n\\n    /// ================== Begin Public functions ==================\\n    function getState(uint _orderId) public view returns (EscrowStatus) {\\n        Escrow memory _escrow = escrows[_orderId];\\n        return _escrow.status;\\n    }\\n    \\n    function addStablesAddresses(\\n        address _addressStableToWhitelist\\n    ) public onlyOwner {\\n        whitelistedStablesAddresses[_addressStableToWhitelist] = true;\\n    }\\n\\n    function delStablesAddresses(\\n        address _addressStableToWhitelist\\n    ) public onlyOwner {\\n        whitelistedStablesAddresses[_addressStableToWhitelist] = false;\\n    }\\n\\n    function CancelMaker(uint256 _orderId) public nonReentrant onlyMaker(_orderId){\\n        // Valida el estado de la Escrow\\n        require( escrows[_orderId].status == EscrowStatus.CRYPTOS_IN_CUSTODY , \\\"El estado tiene que ser CRYPTOS_IN_CUSTODY\\\" );\\n\\n        uint256 _timeDiff = block.timestamp - escrows[_orderId].created;\\n\\n        // validaci\u00f3m de tiempo de proceso\\n        require(_timeDiff > timeProcess, \\\"El tiempo todavia llego a su termino\\\" );\\n\\n        // cambio de estado\\n        escrows[_orderId].status = EscrowStatus.CANCEL_MAKER;\\n\\n        //Transfer to maker\\n        escrows[_orderId].currency.safeTransfer(\\n            escrows[_orderId].maker,\\n            escrows[_orderId].value\\n        );\\n\\n        // emite evento\\n        emit EscrowCancelMaker(_orderId, escrows[_orderId]);\\n    }\\n\\n    function CancelMakerOwner(uint256 _orderId) public nonReentrant onlyOwner{\\n        // Valida el estado de la Escrow\\n        require( escrows[_orderId].status == EscrowStatus.CRYPTOS_IN_CUSTODY , \\\"El estado tiene que ser CRYPTOS_IN_CUSTODY\\\" );\\n\\n        uint256 _timeDiff = block.timestamp - escrows[_orderId].created;\\n\\n        // validaci\u00f3m de tiempo de proceso\\n        require(_timeDiff > timeProcess, \\\"El tiempo todavia llego a su termino\\\" );\\n\\n        // cambio de estado\\n        escrows[_orderId].status = EscrowStatus.CANCEL_MAKER;\\n\\n        //Transfer to maker\\n        escrows[_orderId].currency.safeTransfer(\\n            escrows[_orderId].maker,\\n            escrows[_orderId].value\\n        );\\n\\n        // emite evento\\n        emit EscrowCancelMakerOwner(_orderId, escrows[_orderId]);\\n    }\\n\\n    function CancelTaker(uint256 _orderId) public nonReentrant onlyTaker(_orderId){\\n        // Valida el estado de la Escrow\\n        require( escrows[_orderId].status == EscrowStatus.CRYPTOS_IN_CUSTODY , \\\"El estado tiene que ser CRYPTOS_IN_CUSTODY\\\" );\\n\\n        // cambio de estado\\n        escrows[_orderId].status = EscrowStatus.CANCEL_TAKER;\\n\\n        //Transfer to maker\\n        escrows[_orderId].currency.safeTransfer(\\n            escrows[_orderId].maker,\\n            escrows[_orderId].value\\n        );\\n\\n        // emite evento\\n        emit EscrowCancelTaker(_orderId, escrows[_orderId]);\\n    }\\n\\n    function CancelTakerOwner(uint256 _orderId) public nonReentrant onlyOwner(){\\n        // Valida el estado de la Escrow\\n        require( escrows[_orderId].status == EscrowStatus.CRYPTOS_IN_CUSTODY , \\\"El estado tiene que ser CRYPTOS_IN_CUSTODY\\\" );\\n\\n        // cambio de estado\\n        escrows[_orderId].status = EscrowStatus.CANCEL_TAKER;\\n\\n        //Transfer to maker\\n        escrows[_orderId].currency.safeTransfer(\\n            escrows[_orderId].maker,\\n            escrows[_orderId].value\\n        );\\n\\n        // emite evento\\n        emit EscrowCancelTakerOwner(_orderId, escrows[_orderId]);\\n    }\\n\\n    function setMarkAsPaid(uint256 _orderId) public onlyTaker(_orderId){\\n        // Valida el estado de la Escrow\\n        require( escrows[_orderId].status == EscrowStatus.CRYPTOS_IN_CUSTODY , \\\"El estado tiene que ser CRYPTOS_IN_CUSTODY\\\" );\\n\\n        escrows[_orderId].status = EscrowStatus.FIATCOIN_TRANSFERED;\\n\\n        // emite evento\\n        emit EscrowMarkAsPaid(_orderId, escrows[_orderId]);\\n    }\\n\\n    function setMarkAsPaidOwner(uint256 _orderId) public onlyOwner(){\\n        // Valida el estado de la Escrow\\n        require( escrows[_orderId].status == EscrowStatus.CRYPTOS_IN_CUSTODY , \\\"El estado tiene que ser CRYPTOS_IN_CUSTODY\\\" );\\n\\n        escrows[_orderId].status = EscrowStatus.FIATCOIN_TRANSFERED;\\n\\n        // emite evento\\n        emit EscrowMarkAsPaidOwner(_orderId, escrows[_orderId]);\\n    }\\n\\n    /// ================== End Public functions ==================\\n\\n    // ================== Begin Private functions ==================\\n    function _releaseEscrow(uint _orderId) private nonReentrant {\\n        require(\\n            escrows[_orderId].status == EscrowStatus.FIATCOIN_TRANSFERED,\\n            \\\"El estado tiene que estar en FIATCOIN_TRANSFERED\\\"\\n        );\\n\\n        uint8 _decimals = escrows[_orderId].currency.decimals();\\n\\n        //Obtiene el monto a transferir desde el comprador al contrato        //takerfee //makerfee\\n        uint256 _amountFeeMaker = ((escrows[_orderId].value *\\n            (escrows[_orderId].makerfee * 10 ** _decimals)) /\\n            (100 * 10 ** _decimals)) / 1000;\\n        uint256 _amountFeeTaker = ((escrows[_orderId].value *\\n            (escrows[_orderId].takerfee * 10 ** _decimals)) /\\n            (100 * 10 ** _decimals)) / 1000;\\n\\n        // Validaciones Premium\\n        if(escrows[_orderId].maker_premium){\\n            _amountFeeMaker = 0;\\n        }\\n        if(escrows[_orderId].taker_premium){\\n            _amountFeeTaker = 0;\\n        }\\n\\n        //feesAvailable += _amountFeeMaker + _amountFeeTaker;\\n        feesAvailable[escrows[_orderId].currency] +=\\n            _amountFeeMaker +\\n            _amountFeeTaker;\\n\\n        // write as complete, in case transfer fails\\n        escrows[_orderId].status = EscrowStatus.COMPLETED;\\n\\n        //Transfer to taker Price Asset - FeeTaker\\n        escrows[_orderId].currency.safeTransfer(\\n            escrows[_orderId].taker,\\n            escrows[_orderId].value - _amountFeeTaker\\n        );\\n\\n        emit EscrowComplete(_orderId, escrows[_orderId]);\\n        \\n    }\\n\\n    function _releaseEscrowNativeCoin(uint _orderId) private nonReentrant {\\n        require(\\n            escrows[_orderId].status == EscrowStatus.CRYPTOS_IN_CUSTODY,\\n            \\\"USDT has not been deposited\\\"\\n        );\\n\\n        uint8 _decimals = 18; //Wei\\n\\n        //Obtiene el monto a transferir desde el comprador al contrato        //takerfee //makerfee\\n        uint256 _amountFeeMaker = ((escrows[_orderId].value *\\n            (escrows[_orderId].makerfee * 10 ** _decimals)) /\\n            (100 * 10 ** _decimals)) / 1000;\\n        uint256 _amountFeeTaker = ((escrows[_orderId].value *\\n            (escrows[_orderId].takerfee * 10 ** _decimals)) /\\n            (100 * 10 ** _decimals)) / 1000;\\n\\n        // Validaciones Premium\\n        if(escrows[_orderId].maker_premium){\\n            _amountFeeMaker = 0;\\n        }\\n        if(escrows[_orderId].taker_premium){\\n            _amountFeeTaker = 0;\\n        }\\n\\n        //Registra los fees obtenidos para Paydece\\n        feesAvailableNativeCoin += _amountFeeMaker + _amountFeeTaker;\\n\\n        // write as complete, in case transfer fails\\n        escrows[_orderId].status = EscrowStatus.COMPLETED;\\n\\n        //Transfer to taker Price Asset - FeeTaker\\n        (bool sent, ) = escrows[_orderId].taker.call{\\n            value: escrows[_orderId].value - _amountFeeTaker\\n        }(\\\"\\\");\\n        require(sent, \\\"Transfer failed.\\\");\\n\\n        emit EscrowComplete(_orderId, escrows[_orderId]);\\n        \\n    }\\n    // ================== End Private functions ==================\\n}\\n\"\r\n    },\r\n    \"contracts/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\"\r\n    },\r\n    \"contracts/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport './Address.sol';\\nimport './IERC20.sol';\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    // function safeApprove(\\n    //     IERC20 token,\\n    //     address spender,\\n    //     uint256 value\\n    // ) internal {\\n    //     // safeApprove should only be called when setting an initial allowance,\\n    //     // or when resetting it to zero. To increase and decrease it, use\\n    //     // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n    //     require(\\n    //         (value == 0) || (token.allowance(address(this), spender) == 0),\\n    //         \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n    //     );\\n    //     _callOptionalReturn(\\n    //         token,\\n    //         abi.encodeWithSelector(token.approve.selector, spender, value)\\n    //     );\\n    // }\\n\\n    // function safeIncreaseAllowance(\\n    //     IERC20 token,\\n    //     address spender,\\n    //     uint256 value\\n    // ) internal {\\n    //     uint256 newAllowance = token.allowance(address(this), spender) + value;\\n    //     _callOptionalReturn(\\n    //         token,\\n    //         abi.encodeWithSelector(\\n    //             token.approve.selector,\\n    //             spender,\\n    //             newAllowance\\n    //         )\\n    //     );\\n    // }\\n\\n    // function safeDecreaseAllowance(\\n    //     IERC20 token,\\n    //     address spender,\\n    //     uint256 value\\n    // ) internal {\\n    //     unchecked {\\n    //         uint256 oldAllowance = token.allowance(address(this), spender);\\n    //         require(\\n    //             oldAllowance >= value,\\n    //             \\\"SafeERC20: decreased allowance below zero\\\"\\n    //         );\\n    //         uint256 newAllowance = oldAllowance - value;\\n    //         _callOptionalReturn(\\n    //             token,\\n    //             abi.encodeWithSelector(\\n    //                 token.approve.selector,\\n    //                 spender,\\n    //                 newAllowance\\n    //             )\\n    //         );\\n    //     }\\n    // }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"maker_premium\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"taker_premium\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerfee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makerfee\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"enum PaydeceEscrow.EscrowStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct PaydeceEscrow.Escrow\",\"name\":\"escrow\",\"type\":\"tuple\"}],\"name\":\"EscrowCancelMaker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"maker_premium\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"taker_premium\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerfee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makerfee\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"enum PaydeceEscrow.EscrowStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct PaydeceEscrow.Escrow\",\"name\":\"escrow\",\"type\":\"tuple\"}],\"name\":\"EscrowCancelMakerOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"maker_premium\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"taker_premium\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerfee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makerfee\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"enum PaydeceEscrow.EscrowStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct PaydeceEscrow.Escrow\",\"name\":\"escrow\",\"type\":\"tuple\"}],\"name\":\"EscrowCancelTaker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"maker_premium\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"taker_premium\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerfee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makerfee\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"enum PaydeceEscrow.EscrowStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct PaydeceEscrow.Escrow\",\"name\":\"escrow\",\"type\":\"tuple\"}],\"name\":\"EscrowCancelTakerOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"maker_premium\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"taker_premium\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerfee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makerfee\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"enum PaydeceEscrow.EscrowStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct PaydeceEscrow.Escrow\",\"name\":\"escrow\",\"type\":\"tuple\"}],\"name\":\"EscrowComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"maker_premium\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"taker_premium\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerfee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makerfee\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"enum PaydeceEscrow.EscrowStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct PaydeceEscrow.Escrow\",\"name\":\"escrow\",\"type\":\"tuple\"}],\"name\":\"EscrowDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"EscrowDisputeResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"maker_premium\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"taker_premium\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerfee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makerfee\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"enum PaydeceEscrow.EscrowStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct PaydeceEscrow.Escrow\",\"name\":\"escrow\",\"type\":\"tuple\"}],\"name\":\"EscrowMarkAsPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"maker_premium\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"taker_premium\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerfee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makerfee\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"enum PaydeceEscrow.EscrowStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct PaydeceEscrow.Escrow\",\"name\":\"escrow\",\"type\":\"tuple\"}],\"name\":\"EscrowMarkAsPaidOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"CancelMaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"CancelMakerOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"CancelTaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"CancelTakerOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressStableToWhitelist\",\"type\":\"address\"}],\"name\":\"addStablesAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_maker_premium\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_taker_premium\",\"type\":\"bool\"}],\"name\":\"createEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_maker_premium\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_taker_premium\",\"type\":\"bool\"}],\"name\":\"createEscrowNativeCoin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressStableToWhitelist\",\"type\":\"address\"}],\"name\":\"delStablesAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"escrows\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"maker_premium\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"taker_premium\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerfee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makerfee\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"enum PaydeceEscrow.EscrowStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMaker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTaker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feesAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesAvailableNativeCoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"enum PaydeceEscrow.EscrowStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"refundMaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"refundMakerNativeCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"releaseEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"releaseEscrowNativeCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"releaseEscrowOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"releaseEscrowOwnerNativeCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeMaker\",\"type\":\"uint256\"}],\"name\":\"setFeeMaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeTaker\",\"type\":\"uint256\"}],\"name\":\"setFeeTaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"setMarkAsPaid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"setMarkAsPaidOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeProcess\",\"type\":\"uint256\"}],\"name\":\"setTimeProcess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeProcess\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeesNativeCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PaydeceEscrow", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}