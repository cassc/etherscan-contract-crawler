{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n//For whitelist, \r\ninterface IWhiteList {\r\n    function Check(address _Subject, uint256 _Id) external view returns(uint);\r\n    function Register(address _Subject,uint256 _Id,uint256 _Amount) external;\r\n    function LastRoundRegister(address _Subject,uint256 _Id) external;\r\n    function CreateManualWhiteList(uint256 _ChangeUntil, address _Contract) external payable returns(uint256 Id);\r\n    function ChangeCreator(uint256 _Id, address _NewCreator) external;\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\ncontract ERC20Helper {\r\n    event TransferOut(uint256 Amount, address To, address Token);\r\n    event TransferIn(uint256 Amount, address From, address Token);\r\n    modifier TestAllownce(\r\n        address _token,\r\n        address _owner,\r\n        uint256 _amount\r\n    ) {\r\n        require(\r\n            ERC20(_token).allowance(_owner, address(this)) >= _amount,\r\n            \"no allowance\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function TransferToken(\r\n        address _Token,\r\n        address _Reciver,\r\n        uint256 _Amount\r\n    ) internal {\r\n        uint256 OldBalance = CheckBalance(_Token, address(this));\r\n        emit TransferOut(_Amount, _Reciver, _Token);\r\n        ERC20(_Token).transfer(_Reciver, _Amount);\r\n        require(\r\n            (CheckBalance(_Token, address(this)) + _Amount) == OldBalance,\r\n            \"recive wrong amount of tokens\"\r\n        );\r\n    }\r\n\r\n    function CheckBalance(address _Token, address _Subject)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return ERC20(_Token).balanceOf(_Subject);\r\n    }\r\n\r\n    function TransferInToken(\r\n        address _Token,\r\n        address _Subject,\r\n        uint256 _Amount\r\n    ) internal TestAllownce(_Token, _Subject, _Amount) {\r\n        require(_Amount > 0);\r\n        uint256 OldBalance = CheckBalance(_Token, address(this));\r\n        ERC20(_Token).transferFrom(_Subject, address(this), _Amount);\r\n        emit TransferIn(_Amount, _Subject, _Token);\r\n        require(\r\n            (OldBalance + _Amount) == CheckBalance(_Token, address(this)),\r\n            \"recive wrong amount of tokens\"\r\n        );\r\n    }\r\n\r\n    function ApproveAllowanceERC20(\r\n        address _Token,\r\n        address _Subject,\r\n        uint256 _Amount\r\n    ) internal {\r\n        require(_Amount > 0);\r\n        ERC20(_Token).approve(_Subject, _Amount);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract GovManager is Ownable {\r\n    address public GovernerContract;\r\n\r\n    modifier onlyOwnerOrGov() {\r\n        require(\r\n            msg.sender == owner() || msg.sender == GovernerContract,\r\n            \"Authorization Error\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function setGovernerContract(address _address) external onlyOwnerOrGov {\r\n        GovernerContract = _address;\r\n    }\r\n\r\n    constructor() {\r\n        GovernerContract = address(0);\r\n    }\r\n}\r\n\r\ncontract FeeBaseHelper is ERC20Helper, GovManager {\r\n    event TransferInETH(uint256 Amount, address From);\r\n    event NewFeeAmount(uint256 NewFeeAmount, uint256 OldFeeAmount);\r\n    event NewFeeToken(address NewFeeToken, address OldFeeToken);\r\n\r\n    uint256 public Fee;\r\n    address public FeeToken;\r\n    mapping(address => uint256) public Reserve;\r\n\r\n    function PayFee(uint256 _fee) public payable {\r\n        if (_fee == 0) return;\r\n        if (FeeToken == address(0)) {\r\n            require(msg.value >= _fee, \"Not Enough Fee Provided\");\r\n            emit TransferInETH(msg.value, msg.sender);\r\n        } else {\r\n            TransferInToken(FeeToken, msg.sender, _fee);\r\n        }\r\n        Reserve[FeeToken] += _fee;\r\n    }\r\n\r\n    function SetFeeAmount(uint256 _amount) public onlyOwnerOrGov {\r\n        require(Fee != _amount, \"Can't swap to same fee value\");\r\n        emit NewFeeAmount(_amount, Fee);\r\n        Fee = _amount;\r\n    }\r\n\r\n    function SetFeeToken(address _token) public onlyOwnerOrGov {\r\n        require(FeeToken != _token, \"Can't swap to same token\");\r\n        emit NewFeeToken(_token, FeeToken);\r\n        FeeToken = _token; // set address(0) to use ETH/BNB as main coin\r\n    }\r\n\r\n    function WithdrawFee(address _token, address _to) public onlyOwnerOrGov {\r\n        require(Reserve[_token] > 0, \"Fee amount is zero\");\r\n        if (_token == address(0)) {\r\n            payable(_to).transfer(Reserve[_token]);\r\n        } else {\r\n            TransferToken(_token, _to, Reserve[_token]);\r\n        }\r\n        Reserve[_token] = 0;\r\n    }\r\n}\r\n\r\ncontract LockedDealEvents {\r\n    event TokenWithdrawn(\r\n        uint256 PoolId,\r\n        address indexed Recipient,\r\n        uint256 Amount,\r\n        uint256 LeftAmount\r\n    );\r\n    event MassPoolsCreated(uint256 FirstPoolId, uint256 LastPoolId);\r\n    event NewPoolCreated(\r\n        uint256 PoolId,\r\n        address indexed Token,\r\n        uint256 StartTime,\r\n        uint256 CliffTime,\r\n        uint256 FinishTime,\r\n        uint256 StartAmount,\r\n        uint256 DebitedAmount,\r\n        address indexed Owner\r\n    );\r\n    event PoolApproval(uint256 PoolId, address indexed Spender, uint256 Amount);\r\n    event PoolSplit(\r\n        uint256 OldPoolId,\r\n        uint256 NewPoolId,\r\n        uint256 OriginalLeftAmount,\r\n        uint256 NewAmount,\r\n        address indexed OldOwner,\r\n        address indexed NewOwner\r\n    );\r\n}\r\n\r\n/// @title contains modifiers and stores variables.\r\ncontract LockedDealModifiers {\r\n    mapping(uint256 => mapping(address => uint256)) public Allowance;\r\n    mapping(uint256 => Pool) public AllPoolz;\r\n    mapping(address => uint256[]) public MyPoolz;\r\n    uint256 public Index;\r\n\r\n    address public WhiteList_Address;\r\n    bool public isTokenFilterOn; // use to enable/disable token filter\r\n    uint256 public TokenFeeWhiteListId;\r\n    uint256 public TokenFilterWhiteListId;\r\n    uint256 public UserWhiteListId;\r\n    uint256 public maxTransactionLimit;\r\n\r\n    struct Pool {\r\n        uint256 StartTime;\r\n        uint256 CliffTime;\r\n        uint256 FinishTime;\r\n        uint256 StartAmount;\r\n        uint256 DebitedAmount; // withdrawn amount\r\n        address Owner;\r\n        address Token;\r\n    }\r\n\r\n    modifier notZeroAddress(address _address) {\r\n        require(_address != address(0x0), \"Zero Address is not allowed\");\r\n        _;\r\n    }\r\n\r\n    modifier isPoolValid(uint256 _PoolId) {\r\n        require(_PoolId < Index, \"Pool does not exist\");\r\n        _;\r\n    }\r\n\r\n    modifier notZeroValue(uint256 _Amount) {\r\n        require(_Amount > 0, \"Amount must be greater than zero\");\r\n        _;\r\n    }\r\n\r\n    modifier isPoolOwner(uint256 _PoolId) {\r\n        require(\r\n            AllPoolz[_PoolId].Owner == msg.sender,\r\n            \"You are not Pool Owner\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier isAllowed(uint256 _PoolId, uint256 _amount) {\r\n        require(\r\n            _amount <= Allowance[_PoolId][msg.sender],\r\n            \"Not enough Allowance\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier isBelowLimit(uint256 _num) {\r\n        require(\r\n            _num > 0 && _num <= maxTransactionLimit,\r\n            \"Invalid array length limit\"\r\n        );\r\n        _;\r\n    }\r\n}\r\n\r\ncontract LockedManageable is\r\n    FeeBaseHelper,\r\n    LockedDealEvents,\r\n    LockedDealModifiers\r\n{\r\n    constructor() {\r\n        maxTransactionLimit = 400;\r\n        isTokenFilterOn = false; // disable token filter whitelist\r\n    }\r\n\r\n    function setWhiteListAddress(address _address) external onlyOwner {\r\n        WhiteList_Address = _address;\r\n    }\r\n\r\n    function setTokenFeeWhiteListId(uint256 _id) external onlyOwner {\r\n        TokenFeeWhiteListId = _id;\r\n    }\r\n\r\n    function setTokenFilterWhiteListId(uint256 _id) external onlyOwner {\r\n        TokenFilterWhiteListId = _id;\r\n    }\r\n\r\n    function setUserWhiteListId(uint256 _id) external onlyOwner {\r\n        UserWhiteListId = _id;\r\n    }\r\n\r\n    function swapTokenFilter() external onlyOwner {\r\n        isTokenFilterOn = !isTokenFilterOn;\r\n    }\r\n\r\n    function isTokenWithFee(address _tokenAddress) public view returns (bool) {\r\n        return\r\n            WhiteList_Address == address(0) ||\r\n            !(IWhiteList(WhiteList_Address).Check(\r\n                _tokenAddress,\r\n                TokenFeeWhiteListId\r\n            ) > 0);\r\n    }\r\n\r\n    function isTokenWhiteListed(address _tokenAddress)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return\r\n            WhiteList_Address == address(0) ||\r\n            !isTokenFilterOn ||\r\n            IWhiteList(WhiteList_Address).Check(\r\n                _tokenAddress,\r\n                TokenFilterWhiteListId\r\n            ) >\r\n            0;\r\n    }\r\n\r\n    function isUserPaysFee(address _UserAddress) public view returns (bool) {\r\n        return\r\n            WhiteList_Address == address(0) ||\r\n            !(IWhiteList(WhiteList_Address).Check(\r\n                _UserAddress,\r\n                UserWhiteListId\r\n            ) > 0);\r\n    }\r\n\r\n    function setMaxTransactionLimit(uint256 _newLimit) external onlyOwner {\r\n        maxTransactionLimit = _newLimit;\r\n    }\r\n}\r\n\r\ncontract LockedPoolz is LockedManageable {\r\n    modifier isTokenValid(address _Token) {\r\n        require(isTokenWhiteListed(_Token), \"Need Valid ERC20 Token\"); //check if _Token is ERC20\r\n        _;\r\n    }\r\n\r\n    function SplitPool(\r\n        uint256 _PoolId,\r\n        uint256 _NewAmount,\r\n        address _NewOwner\r\n    ) internal returns (uint256 newPoolId) {\r\n        uint256 leftAmount = remainingAmount(_PoolId);\r\n        require(leftAmount > 0, \"Pool is Empty\");\r\n        require(leftAmount >= _NewAmount, \"Not Enough Amount Balance\");\r\n        assert(_NewAmount * 10**18 > _NewAmount);\r\n        Pool storage pool = AllPoolz[_PoolId];\r\n        uint256 _Ratio = (_NewAmount * 10**18) / leftAmount;\r\n        uint256 newPoolDebitedAmount = (pool.DebitedAmount * _Ratio) / 10**18;\r\n        uint256 newPoolStartAmount = (pool.StartAmount * _Ratio) / 10**18;\r\n        pool.StartAmount -= newPoolStartAmount;\r\n        pool.DebitedAmount -= newPoolDebitedAmount;\r\n        newPoolId = CreatePool(\r\n            pool.Token,\r\n            pool.StartTime,\r\n            pool.CliffTime,\r\n            pool.FinishTime,\r\n            newPoolStartAmount,\r\n            newPoolDebitedAmount,\r\n            _NewOwner\r\n        );\r\n        emit PoolSplit(\r\n            _PoolId,\r\n            newPoolId,\r\n            remainingAmount(_PoolId),\r\n            _NewAmount,\r\n            msg.sender,\r\n            _NewOwner\r\n        );\r\n    }\r\n\r\n    //create a new pool\r\n    function CreatePool(\r\n        address _Token, // token to lock address\r\n        uint256 _StartTime, // Until what time the pool will Start\r\n        uint256 _CliffTime, // Before CliffTime can't withdraw tokens\r\n        uint256 _FinishTime, // Until what time the pool will end\r\n        uint256 _StartAmount, // Total amount of the tokens to sell in the pool\r\n        uint256 _DebitedAmount, // Withdrawn amount\r\n        address _Owner // Who the tokens belong to\r\n    ) internal isTokenValid(_Token) returns (uint256 poolId) {\r\n        require(\r\n            _StartTime <= _FinishTime,\r\n            \"StartTime is greater than FinishTime\"\r\n        );\r\n        //register the pool\r\n        AllPoolz[Index] = Pool(\r\n            _StartTime,\r\n            _CliffTime,\r\n            _FinishTime,\r\n            _StartAmount,\r\n            _DebitedAmount,\r\n            _Owner,\r\n            _Token\r\n        );\r\n        MyPoolz[_Owner].push(Index);\r\n        emit NewPoolCreated(\r\n            Index,\r\n            _Token,\r\n            _StartTime,\r\n            _CliffTime,\r\n            _FinishTime,\r\n            _StartAmount,\r\n            _DebitedAmount,\r\n            _Owner\r\n        );\r\n        poolId = Index;\r\n        Index++;\r\n    }\r\n\r\n    function remainingAmount(uint256 _PoolId)\r\n        internal\r\n        view\r\n        returns (uint256 amount)\r\n    {\r\n        amount =\r\n            AllPoolz[_PoolId].StartAmount -\r\n            AllPoolz[_PoolId].DebitedAmount;\r\n    }\r\n}\r\n\r\n/// @title contains array utility functions\r\nlibrary Array {\r\n    /// @dev returns a new slice of the array\r\n    function KeepNElementsInArray(uint256[] memory _arr, uint256 _n)\r\n        internal\r\n        pure\r\n        returns (uint256[] memory newArray)\r\n    {\r\n        if (_arr.length == _n) return _arr;\r\n        require(_arr.length > _n, \"can't cut more then got\");\r\n        newArray = new uint256[](_n);\r\n        for (uint256 i = 0; i < _n; i++) {\r\n            newArray[i] = _arr[i];\r\n        }\r\n        return newArray;\r\n    }\r\n\r\n    function KeepNElementsInArray(address[] memory _arr, uint256 _n)\r\n        internal\r\n        pure\r\n        returns (address[] memory newArray)\r\n    {\r\n        if (_arr.length == _n) return _arr;\r\n        require(_arr.length > _n, \"can't cut more then got\");\r\n        newArray = new address[](_n);\r\n        for (uint256 i = 0; i < _n; i++) {\r\n            newArray[i] = _arr[i];\r\n        }\r\n        return newArray;\r\n    }\r\n\r\n    /// @return true if the array is ordered\r\n    function isArrayOrdered(uint256[] memory _arr)\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        require(_arr.length > 0, \"array should be greater than zero\");\r\n        uint256 temp = _arr[0];\r\n        for (uint256 i = 1; i < _arr.length; i++) {\r\n            if (temp > _arr[i]) {\r\n                return false;\r\n            }\r\n            temp = _arr[i];\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @return sum of the array elements\r\n    function getArraySum(uint256[] memory _array)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 sum = 0;\r\n        for (uint256 i = 0; i < _array.length; i++) {\r\n            sum = sum + _array[i];\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    /// @return true if the element exists in the array\r\n    function isInArray(address[] memory _arr, address _elem)\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        for (uint256 i = 0; i < _arr.length; i++) {\r\n            if (_arr[i] == _elem) return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\ncontract LockedCreation is LockedPoolz {\r\n    function CreateNewPool(\r\n        address _Token, //token to lock address\r\n        uint256 _StartTime, //Until what time the pool will start\r\n        uint256 _CliffTime, //Before CliffTime can't withdraw tokens\r\n        uint256 _FinishTime, //Until what time the pool will end\r\n        uint256 _StartAmount, //Total amount of the tokens to sell in the pool\r\n        address _Owner // Who the tokens belong to\r\n    ) external payable notZeroAddress(_Owner) notZeroValue(_StartAmount) {\r\n        TransferInToken(_Token, msg.sender, _StartAmount);\r\n        payFee(_Token, Fee);\r\n        CreatePool(\r\n            _Token,\r\n            _StartTime,\r\n            _CliffTime,\r\n            _FinishTime,\r\n            _StartAmount,\r\n            0,\r\n            _Owner\r\n        );\r\n    }\r\n\r\n    function CreateMassPools(\r\n        address _Token,\r\n        uint256[] calldata _StartTime,\r\n        uint256[] calldata _CliffTime,\r\n        uint256[] calldata _FinishTime,\r\n        uint256[] calldata _StartAmount,\r\n        address[] calldata _Owner\r\n    ) external payable isBelowLimit(_Owner.length) {\r\n        require(_Owner.length == _FinishTime.length, \"Date Array Invalid\");\r\n        require(_StartTime.length == _FinishTime.length, \"Date Array Invalid\");\r\n        require(_Owner.length == _StartAmount.length, \"Amount Array Invalid\");\r\n        require(_CliffTime.length == _FinishTime.length,\"CliffTime Array Invalid\");\r\n        TransferInToken(_Token, msg.sender, Array.getArraySum(_StartAmount));\r\n        payFee(_Token, Fee * _Owner.length);\r\n        uint256 firstPoolId = Index;\r\n        for (uint256 i = 0; i < _Owner.length; i++) {\r\n            CreatePool(\r\n                _Token,\r\n                _StartTime[i],\r\n                _CliffTime[i],\r\n                _FinishTime[i],\r\n                _StartAmount[i],\r\n                0,\r\n                _Owner[i]\r\n            );\r\n        }\r\n        uint256 lastPoolId = Index - 1;\r\n        emit MassPoolsCreated(firstPoolId, lastPoolId);\r\n    }\r\n\r\n    // create pools with respect to finish time\r\n    function CreatePoolsWrtTime(\r\n        address _Token,\r\n        uint256[] calldata _StartTime,\r\n        uint256[] calldata _CliffTime,\r\n        uint256[] calldata _FinishTime,\r\n        uint256[] calldata _StartAmount,\r\n        address[] calldata _Owner\r\n    ) external payable isBelowLimit(_Owner.length * _FinishTime.length) {\r\n        require(_Owner.length == _StartAmount.length, \"Amount Array Invalid\");\r\n        require(_FinishTime.length == _StartTime.length, \"Date Array Invalid\");\r\n        require(_CliffTime.length == _FinishTime.length, \"CliffTime Array Invalid\");\r\n        TransferInToken(\r\n            _Token,\r\n            msg.sender,\r\n            Array.getArraySum(_StartAmount) * _FinishTime.length\r\n        );\r\n        uint256 firstPoolId = Index;\r\n        payFee(_Token, Fee * _Owner.length * _FinishTime.length);\r\n        for (uint256 i = 0; i < _FinishTime.length; i++) {\r\n            for (uint256 j = 0; j < _Owner.length; j++) {\r\n                CreatePool(\r\n                    _Token,\r\n                    _StartTime[i],\r\n                    _CliffTime[i],\r\n                    _FinishTime[i],\r\n                    _StartAmount[j],\r\n                    0,\r\n                    _Owner[j]\r\n                );\r\n            }\r\n        }\r\n        uint256 lastPoolId = Index - 1;\r\n        emit MassPoolsCreated(firstPoolId, lastPoolId);\r\n    }\r\n\r\n    function payFee(address _token, uint256 _amount) internal {\r\n        if (isTokenWithFee(_token) && isUserPaysFee(msg.sender)) {\r\n            PayFee(_amount);\r\n        }\r\n    }\r\n}\r\n\r\ncontract LockedControl is LockedCreation {\r\n    function TransferPoolOwnership(uint256 _PoolId, address _NewOwner)\r\n        external\r\n        isPoolValid(_PoolId)\r\n        isPoolOwner(_PoolId)\r\n        notZeroAddress(_NewOwner)\r\n        returns (uint256 newPoolId)\r\n    {\r\n        Pool storage pool = AllPoolz[_PoolId];\r\n        require(_NewOwner != pool.Owner, \"Can't be the same owner\");\r\n        uint256 _remainingAmount = remainingAmount(_PoolId);\r\n        newPoolId = SplitPool(_PoolId, _remainingAmount, _NewOwner);\r\n    }\r\n\r\n    function SplitPoolAmount(\r\n        uint256 _PoolId,\r\n        uint256 _NewAmount,\r\n        address _NewOwner\r\n    )\r\n        external\r\n        isPoolValid(_PoolId)\r\n        isPoolOwner(_PoolId)\r\n        notZeroValue(_NewAmount)\r\n        notZeroAddress(_NewOwner)\r\n        returns (uint256)\r\n    {\r\n        return SplitPool(_PoolId, _NewAmount, _NewOwner);\r\n    }\r\n\r\n    function ApproveAllowance(\r\n        uint256 _PoolId,\r\n        uint256 _Amount,\r\n        address _Spender\r\n    )\r\n        external\r\n        isPoolValid(_PoolId)\r\n        isPoolOwner(_PoolId)\r\n        notZeroAddress(_Spender)\r\n    {\r\n        Allowance[_PoolId][_Spender] = _Amount;\r\n        emit PoolApproval(_PoolId, _Spender, _Amount);\r\n    }\r\n\r\n    function SplitPoolAmountFrom(\r\n        uint256 _PoolId,\r\n        uint256 _Amount,\r\n        address _Address\r\n    )\r\n        external\r\n        isPoolValid(_PoolId)\r\n        isAllowed(_PoolId, _Amount)\r\n        notZeroValue(_Amount)\r\n        notZeroAddress(_Address)\r\n        returns (uint256 poolId)\r\n    {\r\n        poolId = SplitPool(_PoolId, _Amount, _Address);\r\n        uint256 _NewAmount = Allowance[_PoolId][msg.sender] - _Amount;\r\n        Allowance[_PoolId][msg.sender] = _NewAmount;\r\n    }\r\n}\r\n\r\n\r\ncontract LockedPoolzData is LockedControl {\r\n    function GetAllMyPoolsId(address _UserAddress)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        return MyPoolz[_UserAddress];\r\n    }\r\n\r\n    // function GetMyPoolzwithBalance\r\n    function GetMyPoolsId(address _UserAddress)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        uint256[] storage allIds = MyPoolz[_UserAddress];\r\n        uint256[] memory ids = new uint256[](allIds.length);\r\n        uint256 index;\r\n        for (uint256 i = 0; i < allIds.length; i++) {\r\n            if (\r\n                AllPoolz[allIds[i]].StartAmount >\r\n                AllPoolz[allIds[i]].DebitedAmount\r\n            ) {\r\n                ids[index++] = allIds[i];\r\n            }\r\n        }\r\n        return Array.KeepNElementsInArray(ids, index);\r\n    }\r\n\r\n    function GetPoolsData(uint256[] memory _ids)\r\n        public\r\n        view\r\n        returns (Pool[] memory data)\r\n    {\r\n        data = new Pool[](_ids.length);\r\n        for (uint256 i = 0; i < _ids.length; i++) {\r\n            require(_ids[i] < Index, \"Pool does not exist\");\r\n            data[i] = Pool(\r\n                AllPoolz[_ids[i]].StartTime,\r\n                AllPoolz[_ids[i]].CliffTime,\r\n                AllPoolz[_ids[i]].FinishTime,\r\n                AllPoolz[_ids[i]].StartAmount,\r\n                AllPoolz[_ids[i]].DebitedAmount,\r\n                AllPoolz[_ids[i]].Owner,\r\n                AllPoolz[_ids[i]].Token\r\n            );\r\n        }\r\n    }\r\n\r\n    function GetMyPoolsIdByToken(address _UserAddress, address[] memory _Tokens)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        uint256[] storage allIds = MyPoolz[_UserAddress];\r\n        uint256[] memory ids = new uint256[](allIds.length);\r\n        uint256 index;\r\n        for (uint256 i = 0; i < allIds.length; i++) {\r\n            if (Array.isInArray(_Tokens, AllPoolz[allIds[i]].Token)) {\r\n                ids[index++] = allIds[i];\r\n            }\r\n        }\r\n        return Array.KeepNElementsInArray(ids, index);\r\n    }\r\n\r\n    function GetMyPoolDataByToken(\r\n        address _UserAddress,\r\n        address[] memory _Tokens\r\n    ) external view returns (Pool[] memory pools, uint256[] memory poolIds) {\r\n        poolIds = GetMyPoolsIdByToken(_UserAddress, _Tokens);\r\n        pools = GetPoolsData(poolIds);\r\n    }\r\n\r\n    function GetMyPoolsData(address _UserAddress)\r\n        external\r\n        view\r\n        returns (Pool[] memory data)\r\n    {\r\n        data = GetPoolsData(GetMyPoolsId(_UserAddress));\r\n    }\r\n\r\n    function GetAllMyPoolsData(address _UserAddress)\r\n        external\r\n        view\r\n        returns (Pool[] memory data)\r\n    {\r\n        data = GetPoolsData(GetAllMyPoolsId(_UserAddress));\r\n    }\r\n}\r\n\r\ncontract LockedDealV2 is LockedPoolzData {\r\n    function getWithdrawableAmount(uint256 _PoolId)\r\n        public\r\n        view\r\n        isPoolValid(_PoolId)\r\n        returns (uint256)\r\n    {\r\n        Pool memory pool = AllPoolz[_PoolId];\r\n        if (block.timestamp < pool.StartTime) return 0;\r\n        if (pool.FinishTime < block.timestamp) return remainingAmount(_PoolId);\r\n        uint256 totalPoolDuration = pool.FinishTime - pool.StartTime;\r\n        uint256 timePassed = block.timestamp - pool.StartTime;\r\n        uint256 timePassedPermille = timePassed * 1000;\r\n        uint256 ratioPermille = timePassedPermille / totalPoolDuration;\r\n        uint256 debitableAmount = (pool.StartAmount * ratioPermille) / 1000;\r\n        return debitableAmount - pool.DebitedAmount;\r\n    }\r\n\r\n    //@dev no use of revert to make sure the loop will work\r\n    function WithdrawToken(uint256 _PoolId)\r\n        external\r\n        returns (uint256 withdrawnAmount)\r\n    {\r\n        //pool is finished + got left overs + did not took them\r\n        Pool storage pool = AllPoolz[_PoolId];\r\n        if (\r\n            _PoolId < Index &&\r\n            pool.CliffTime <= block.timestamp &&\r\n            remainingAmount(_PoolId) > 0\r\n        ) {\r\n            withdrawnAmount = getWithdrawableAmount(_PoolId);\r\n            uint256 tempDebitAmount = withdrawnAmount + pool.DebitedAmount;\r\n            pool.DebitedAmount = tempDebitAmount;\r\n            TransferToken(pool.Token, pool.Owner, withdrawnAmount);\r\n            emit TokenWithdrawn(\r\n                _PoolId,\r\n                pool.Owner,\r\n                withdrawnAmount,\r\n                remainingAmount(_PoolId)\r\n            );\r\n        }\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"FirstPoolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"LastPoolId\",\"type\":\"uint256\"}],\"name\":\"MassPoolsCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"NewFeeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"OldFeeAmount\",\"type\":\"uint256\"}],\"name\":\"NewFeeAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NewFeeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"OldFeeToken\",\"type\":\"address\"}],\"name\":\"NewFeeToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"PoolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"StartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"CliffTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"FinishTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"StartAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"DebitedAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Owner\",\"type\":\"address\"}],\"name\":\"NewPoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"PoolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"PoolApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"OldPoolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"NewPoolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"OriginalLeftAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"NewAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"OldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"NewOwner\",\"type\":\"address\"}],\"name\":\"PoolSplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"PoolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"LeftAmount\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"From\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Token\",\"type\":\"address\"}],\"name\":\"TransferIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"From\",\"type\":\"address\"}],\"name\":\"TransferInETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"To\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Token\",\"type\":\"address\"}],\"name\":\"TransferOut\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"AllPoolz\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"StartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"CliffTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"FinishTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"StartAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DebitedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"Owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"Token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_PoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_Spender\",\"type\":\"address\"}],\"name\":\"ApproveAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_StartTime\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_CliffTime\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_FinishTime\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_StartAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_Owner\",\"type\":\"address[]\"}],\"name\":\"CreateMassPools\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_StartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_CliffTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_FinishTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_StartAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_Owner\",\"type\":\"address\"}],\"name\":\"CreateNewPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_StartTime\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_CliffTime\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_FinishTime\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_StartAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_Owner\",\"type\":\"address[]\"}],\"name\":\"CreatePoolsWrtTime\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FeeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_UserAddress\",\"type\":\"address\"}],\"name\":\"GetAllMyPoolsData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"StartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"CliffTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"FinishTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"StartAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DebitedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"Owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"Token\",\"type\":\"address\"}],\"internalType\":\"struct LockedDealModifiers.Pool[]\",\"name\":\"data\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_UserAddress\",\"type\":\"address\"}],\"name\":\"GetAllMyPoolsId\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_UserAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_Tokens\",\"type\":\"address[]\"}],\"name\":\"GetMyPoolDataByToken\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"StartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"CliffTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"FinishTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"StartAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DebitedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"Owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"Token\",\"type\":\"address\"}],\"internalType\":\"struct LockedDealModifiers.Pool[]\",\"name\":\"pools\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"poolIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_UserAddress\",\"type\":\"address\"}],\"name\":\"GetMyPoolsData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"StartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"CliffTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"FinishTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"StartAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DebitedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"Owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"Token\",\"type\":\"address\"}],\"internalType\":\"struct LockedDealModifiers.Pool[]\",\"name\":\"data\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_UserAddress\",\"type\":\"address\"}],\"name\":\"GetMyPoolsId\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_UserAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_Tokens\",\"type\":\"address[]\"}],\"name\":\"GetMyPoolsIdByToken\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"GetPoolsData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"StartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"CliffTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"FinishTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"StartAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DebitedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"Owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"Token\",\"type\":\"address\"}],\"internalType\":\"struct LockedDealModifiers.Pool[]\",\"name\":\"data\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GovernerContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MyPoolz\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"PayFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Reserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"SetFeeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"SetFeeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_PoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_NewAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_NewOwner\",\"type\":\"address\"}],\"name\":\"SplitPoolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_PoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_Address\",\"type\":\"address\"}],\"name\":\"SplitPoolAmountFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TokenFeeWhiteListId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TokenFilterWhiteListId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_PoolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_NewOwner\",\"type\":\"address\"}],\"name\":\"TransferPoolOwnership\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newPoolId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UserWhiteListId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WhiteList_Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"WithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_PoolId\",\"type\":\"uint256\"}],\"name\":\"WithdrawToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_PoolId\",\"type\":\"uint256\"}],\"name\":\"getWithdrawableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTokenFilterOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"isTokenWhiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"isTokenWithFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_UserAddress\",\"type\":\"address\"}],\"name\":\"isUserPaysFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setGovernerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"setMaxTransactionLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"setTokenFeeWhiteListId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"setTokenFilterWhiteListId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"setUserWhiteListId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setWhiteListAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokenFilter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LockedDealV2", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "9999999", "ConstructorArguments": "", "EVMVersion": "istanbul", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bdcc7da990c7aaa04bba809e8e04013ff7016a5e76cf8e89dfc90884b5eb4a2b"}