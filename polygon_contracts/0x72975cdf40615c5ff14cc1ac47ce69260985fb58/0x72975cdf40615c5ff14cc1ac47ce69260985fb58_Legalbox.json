{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract Legalbox {\r\n    address public owner;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the owner can call this function.\");\r\n        _;\r\n    }\r\n    struct LegalDocument { \r\n        string ownerUsername; // owner's username in Legalbox\r\n        string title;\r\n        string description;\r\n        string ipfsHash;\r\n        uint256 timestamp; //timestamp of the current block in seconds since the epoch\r\n    }\r\n\r\n    uint256 public legalDocumentCount;\r\n    uint256 public legalDocumentIDCount;\r\n\r\n    // string[] public ownerUsernameArray;\r\n    // uint256[] public legalDocumentIDs;\r\n    LegalDocument[] public legalDocumentArray;\r\n\r\n    mapping(string => uint256[]) public ownerUsernameToLegalDocumentIDs;\r\n    mapping(string => uint256[]) public ipfsHashToLegalDocumentIDs;\r\n    // mapping (uint256 => LegalDocument) public legalDocumentIDToLegalDocument;\r\n\r\n    event LegalDocumentIPFSHashStored(uint256 legalDocumentID, string ownerUsername, string title, string description, string ipfsHash, uint256 timestamp);\r\n    // event RetrieveLegalDocumentIDsByOwnerUsername(string ownerUsername, uint256[] legalDocumentIDs);\r\n    // event RetrieveLegalDocumentIDsByIPFSHash(string ipfsHash, uint256[] legalDocumentIDs);\r\n    // event RetrieveLegalDocumentIDsByTitle(string title, uint256[] legalDocumentIDs);\r\n    // event RetrieveLegalDocumentIDsByDescription(string description, uint256[] legalDocumentIDs);\r\n    // event RetrieveLegalDocumentIDsByTimestamp(uint256 timestamp, uint256[] legalDocumentIDs);\r\n    // event RetrieveLegalDocumentCount(uint256 legalDocumentCount);\r\n    // event RetrieveLegalDocumentByLegalDocumentID(uint256 legalDocumentID, string ownerUsername, string title, string description, string ipfsHash, uint256 timestamp);\r\n   \r\n   function storeLegalDocumentIPFSHash(string memory _ownerUsername, string memory _title, string memory _description, string memory _ipfsHash) public onlyOwner \r\n    returns(uint256, string memory, string memory, string memory, string memory, uint256){\r\n        require(bytes(_ipfsHash).length > 0, \"Invalid IPFS hash\");\r\n\r\n        // store legalDocument in mapping legalDocumentIDToLegalDocument\r\n        legalDocumentIDCount += 1;\r\n        LegalDocument memory newLegalDocument = LegalDocument(_ownerUsername, _title, _description, _ipfsHash, block.timestamp);\r\n        // legalDocumentIDs.push(legalDocumentIDCount);\r\n        legalDocumentArray.push(newLegalDocument);\r\n        // legalDocumentIDToLegalDocument[legalDocumentIDCount] = newLegalDocument;\r\n        \r\n        // store legalDocument in mapping ownerUsernameToLegalDocument\r\n        // ownerUsernameArray.push(_ownerUsername);\r\n        ownerUsernameToLegalDocumentIDs[_ownerUsername].push(legalDocumentIDCount);\r\n\r\n        // increment legalDocumentCount tracker\r\n        ipfsHashToLegalDocumentIDs[_ipfsHash].push(legalDocumentIDCount);\r\n        legalDocumentCount += 1;\r\n\r\n        emit LegalDocumentIPFSHashStored(legalDocumentIDCount, _ownerUsername, _title, _description, _ipfsHash, block.timestamp);\r\n        return (legalDocumentIDCount, _ownerUsername, _title, _description, _ipfsHash, block.timestamp);\r\n    }\r\n\r\n    function getLegalDocumentIDsByOwnerUsername(string memory _ownerUsername) public view returns(uint256[] memory){\r\n        return ownerUsernameToLegalDocumentIDs[_ownerUsername];\r\n    }\r\n\r\n    // function getLegalDocumentCount() public returns(uint256) {\r\n    //     emit RetrieveLegalDocumentCount(legalDocumentCount);\r\n    //     return (legalDocumentCount);\r\n    // }\r\n\r\n        function getLegalDocumentByLegalDocumentID(uint256 _legalDocumentID)\r\n    public view returns(uint256, string memory, string memory, string memory, string memory, uint256){\r\n        LegalDocument memory tempLegalDocument = legalDocumentArray[_legalDocumentID - 1];\r\n        return (_legalDocumentID, tempLegalDocument.ownerUsername, tempLegalDocument.title, tempLegalDocument.description, \r\n        tempLegalDocument.ipfsHash, tempLegalDocument.timestamp);\r\n    }\r\n\r\n    // function getLegalDocumentIDsByOwnerUsername(string memory _ownerUsername) public returns(string memory, uint256[] memory){\r\n    //    uint256[] memory tempLegalDocumentIDs = ownerUsernameToLegalDocumentIDs[_ownerUsername];\r\n     \r\n    //    emit RetrieveLegalDocumentIDsByOwnerUsername(_ownerUsername, tempLegalDocumentIDs);\r\n    //    return(_ownerUsername, tempLegalDocumentIDs);\r\n    // }\r\n\r\n    function getLegalDocumentIDsByIPFSHash(string memory _ipfsHash) public view returns(uint256[] memory){\r\n         return ipfsHashToLegalDocumentIDs[_ipfsHash];\r\n    }\r\n\r\n    // function getLegalDocumentByLegalDocumentID(uint256 _legalDocumentID) public returns(uint256, string memory, string memory, string memory,\r\n    // string memory, uint256){\r\n    //    LegalDocument memory tempLegalDocument = legalDocumentIDToLegalDocument[_legalDocumentID];\r\n\r\n\r\n    //     emit RetrieveLegalDocumentByLegalDocumentID(_legalDocumentID, tempLegalDocument.ownerUsername, tempLegalDocument.title,\r\n    //     tempLegalDocument.description, tempLegalDocument.ipfsHash, tempLegalDocument.timestamp);\r\n    //     return (_legalDocumentID, tempLegalDocument.ownerUsername, tempLegalDocument.title,\r\n    //     tempLegalDocument.description, tempLegalDocument.ipfsHash, tempLegalDocument.timestamp);\r\n    // }\r\n\r\n    // function getLegalDocumentIDsByIPFSHash(string memory _ipfsHash) public returns(string memory, uint256[] memory){\r\n    //     uint256[] memory tempLegalDocumentIDs = new uint256[](legalDocumentIDCount);\r\n    //     uint256 tempLegalDocumentIDsArrayIndex = 0;\r\n\r\n    //    for(uint256 i = 1; i <= legalDocumentIDCount; i++) {\r\n    //         if(keccak256(abi.encodePacked(legalDocumentIDToLegalDocument[i].ipfsHash)) == keccak256(abi.encodePacked(_ipfsHash))) {\r\n    //             tempLegalDocumentIDs[tempLegalDocumentIDsArrayIndex] = i;\r\n    //             tempLegalDocumentIDsArrayIndex += 1;\r\n    //         }\r\n    //    }\r\n\r\n    //    emit RetrieveLegalDocumentIDsByIPFSHash(_ipfsHash, tempLegalDocumentIDs);\r\n    //    return (_ipfsHash, tempLegalDocumentIDs);\r\n    // }\r\n\r\n    //  function getLegalDocumentIDsByTitle(string memory _title) public returns(string memory, uint256[] memory){\r\n    //     uint256[] memory tempLegalDocumentIDs = new uint256[](legalDocumentIDCount);\r\n    //     uint256 tempLegalDocumentIDsArrayIndex = 0;\r\n\r\n    //    for(uint256 i = 1; i <= legalDocumentIDCount; i++) {\r\n    //         if(keccak256(abi.encodePacked(legalDocumentIDToLegalDocument[i].title)) == keccak256(abi.encodePacked(_title))) {\r\n    //             tempLegalDocumentIDs[tempLegalDocumentIDsArrayIndex] = i;\r\n    //             tempLegalDocumentIDsArrayIndex += 1;\r\n    //         }\r\n    //    }\r\n\r\n    //    emit RetrieveLegalDocumentIDsByTitle(_title, tempLegalDocumentIDs);\r\n    //    return (_title, tempLegalDocumentIDs);\r\n    // }\r\n\r\n    // function getLegalDocumentIDsByDescription(string memory _description) public returns(string memory, uint256[] memory){\r\n    //     uint256[] memory tempLegalDocumentIDs = new uint256[](legalDocumentIDCount);\r\n    //     uint256 tempLegalDocumentIDsArrayIndex = 0;\r\n\r\n    //    for(uint256 i = 1; i <= legalDocumentIDCount; i++) {\r\n    //         if(keccak256(abi.encodePacked(legalDocumentIDToLegalDocument[i].description)) == keccak256(abi.encodePacked(_description))) {\r\n    //             tempLegalDocumentIDs[tempLegalDocumentIDsArrayIndex] = i;\r\n    //             tempLegalDocumentIDsArrayIndex += 1;\r\n    //         }\r\n    //    }\r\n\r\n    //    emit RetrieveLegalDocumentIDsByDescription(_description, tempLegalDocumentIDs);\r\n    //    return (_description, tempLegalDocumentIDs);\r\n    // }\r\n\r\n    // function getLegalDocumentIDsByTimestamp(uint256 _timestamp) public returns(uint256, uint256[] memory){\r\n    //     uint256[] memory tempLegalDocumentIDs = new uint256[](legalDocumentIDCount);\r\n    //     uint256 tempLegalDocumentIDsArrayIndex = 0;\r\n\r\n    //    for(uint256 i = 1; i <= legalDocumentIDCount; i++) {\r\n    //         if(keccak256(abi.encodePacked(legalDocumentIDToLegalDocument[i].timestamp)) == keccak256(abi.encodePacked(_timestamp))) {\r\n    //             tempLegalDocumentIDs[tempLegalDocumentIDsArrayIndex] = i;\r\n    //             tempLegalDocumentIDsArrayIndex += 1;\r\n    //         }\r\n    //    }\r\n\r\n    //    emit RetrieveLegalDocumentIDsByTimestamp(_timestamp, tempLegalDocumentIDs);\r\n    //    return (_timestamp, tempLegalDocumentIDs);\r\n    // }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"legalDocumentID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ownerUsername\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LegalDocumentIPFSHashStored\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_legalDocumentID\",\"type\":\"uint256\"}],\"name\":\"getLegalDocumentByLegalDocumentID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ipfsHash\",\"type\":\"string\"}],\"name\":\"getLegalDocumentIDsByIPFSHash\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ownerUsername\",\"type\":\"string\"}],\"name\":\"getLegalDocumentIDsByOwnerUsername\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ipfsHashToLegalDocumentIDs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"legalDocumentArray\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"ownerUsername\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"legalDocumentCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"legalDocumentIDCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerUsernameToLegalDocumentIDs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ownerUsername\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_ipfsHash\",\"type\":\"string\"}],\"name\":\"storeLegalDocumentIPFSHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Legalbox", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3124f43c198588217dcbdd4353467b339ea285620226c814d2b9a71fdd0a5ba7"}