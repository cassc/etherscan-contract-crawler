{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"BYOPillGFC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ERC1155.sol\\\";\\nimport \\\"./Strings.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\ncontract BYOPillGFC is ERC1155, Ownable {\\n    using Strings for uint256;\\n\\n    address private GFCAdmin;\\n    uint256 private pillCount;\\n\\n    mapping(uint256 =\\u003e bool) public validPillIDs;\\n    \\n    string private baseURI;\\n\\n    constructor(string memory _baseURI) ERC1155(_baseURI) {\\n        baseURI = _baseURI;\\n        addConsumablePills(5);\\n    }\\n\\n    function setURI(string memory newuri) public onlyOwner {\\n        _setURI(newuri);\\n    }\\n\\n    function updateGFCAddress(address _gfcAddress) public onlyOwner {\\n        GFCAdmin = _gfcAddress;\\n    }\\n\\n    function addConsumablePills (uint _count) public onlyOwner {\\n        for (uint256 index = 0; index \\u003c _count; index++) {\\n            validPillIDs[pillCount] = true;\\n            pillCount++;\\n        }\\n    }\\n\\n    function mint(address account, uint256 id, uint256 amount) public onlyOwner\\n    {\\n        require (validPillIDs[id], \\\"Minting unavailable pill ID.\\\");\\n        _mint(account, id, amount, \\\"\\\");\\n    }\\n\\n    function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts) public onlyOwner\\n    {\\n        for (uint256 index = 0; index \\u003c ids.length; index++) {\\n            require (validPillIDs[ids[index]], \\\"Minting unavailable pill ID.\\\");\\n        }\\n        _mintBatch(to, ids, amounts, \\\"\\\");\\n    }\\n\\n    function randomMint(address account, uint256 amount, uint256 randNum) public onlyAdmins returns (uint256)\\n    {\\n        uint256 rndId = simpleRandom(randNum, pillCount);\\n        require (validPillIDs[rndId], \\\"Minting unavailable pill ID.\\\");\\n        _mint(account, rndId, amount, \\\"\\\");\\n        return rndId;\\n    }\\n\\n    function uri(uint256 _id) public view override returns (string memory) {\\n        require(validPillIDs[_id], \\\"URI requested for invalid pill id.\\\");    \\n        return string(abi.encodePacked(baseURI, _id.toString()));\\n    }   \\n\\n    /*\\n        Helper functions\\n    */    \\n\\n    function simpleRandom(uint256 randNum, uint max) internal pure returns (uint) {\\n        return randNum % max;\\n    }  \\n    \\n    /*\\n        Modifiers\\n    */   \\n\\n    modifier onlyAdmins {\\n      require(msg.sender == GFCAdmin \\n      || msg.sender == owner());\\n      _;\\n    }\\n\\n}   \"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./IERC1155MetadataURI.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./Context.sol\\\";\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 =\\u003e mapping(address =\\u003e uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address =\\u003e mapping(address =\\u003e bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i \\u003c accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance \\u003e= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i \\u003c ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance \\u003e= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i \\u003c ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance \\u003e= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i \\u003c ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance \\u003e= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][account] = accountBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"},\"ERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Burnable is ERC1155 {\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\"},\"ERC1155Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155.sol\\\";\\nimport \\\"./Pausable.sol\\\";\\n\\n/**\\n * @dev ERC1155 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Pausable is ERC1155, Pausable {\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        require(!paused(), \\\"ERC1155Pausable: token transfer while paused\\\");\\n    }\\n}\\n\"},\"ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"},\"GFCGenesisKey_Polygon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ERC1155Burnable.sol\\\";\\n\\nimport \\\"./Ownable.sol\\\";\\n\\nimport \\\"./Strings.sol\\\";\\n\\nimport \\\"./VRFConsumerBase.sol\\\";\\n\\nimport \\\"./Whitelist.sol\\\";\\n\\ncontract GFCGenesisKeyPoly is ERC1155Burnable, Ownable, Whitelist, VRFConsumerBase{\\n    using Strings for uint256;\\n    \\n    uint256 private constant ROLL_IN_PROGRESS = 42;\\n\\n    //Number of KEYS\\n    uint256 public TOTAL_KEYS;\\n\\n    //constant for VRF function\\n    bytes32 internal keyHash;\\n    uint256 internal fee;\\n\\n    //probability arrays\\n    uint16[] PROBs;\\n\\n    //number of addresses in the airdrop address array\\n    uint256 public SEED_NOUNCE;\\n    \\n    //OpenSea\\u0027s Proxy contract for ERC1155 on Polygon\\n    address public OPEN_SEA = 0x207Fa8Df3a17D96Ca7EA4f2893fcdCb78a304101;\\n    \\n    mapping(bytes32 =\\u003e address) private s_rollers;\\n    mapping(address =\\u003e uint256) private s_results;\\n\\n    event DiceRolled(bytes32 indexed requestId, address indexed roller);\\n    event DiceLanded(bytes32 indexed requestId, uint256 indexed result);\\n\\n    constructor(string memory path) ERC1155(path) \\n        VRFConsumerBase(\\n                0x3d2341ADb2D31f1c5530cDC622016af293177AE0, \\n                0xb0897686c545045aFc77CF20eC7A532E3120E0F1\\n        ) \\n    {\\n        keyHash = 0xf86195cf7690c55907b2b611ebb7343a6f649bff128701cc542f0569e2c549da;\\n        fee = 1 * 10 ** 14; //0.0001 Link as fee on Polygon\\n        \\n        //Initialise the probabilities\\n        //Probability for getting different tier keys\\n        //tokenId 1:tier 1, 2:tier 2, 3:tier 3\\n        PROBs = [0, 2000, 4000, 4000];\\n    }\\n\\n    function getRanNum4Airdrop() public onlyOwner {\\n        require(LINK.balanceOf(address(this)) \\u003e= fee, \\\"Not enough LINK to pay fee\\\");\\n        require(s_results[msg.sender] == 0, \\\"Already rolled\\\");\\n        bytes32 requestId = requestRandomness(keyHash, fee);\\n        s_rollers[requestId] = msg.sender;\\n        s_results[msg.sender] = ROLL_IN_PROGRESS;\\n        emit DiceRolled(requestId, msg.sender);\\n    }\\n\\n    /** \\n     * Requests randomness \\n     */\\n    function airdrop1155(address[] calldata addrs, uint256[] calldata amount) public onlyOwner {\\n        uint256 randNum = getResult(msg.sender);\\n        for(uint256 i; i \\u003c addrs.length; i++){\\n            uint256[] memory randomNums = expand(randNum, amount[i], TOTAL_KEYS);\\n            TOTAL_KEYS += amount[i];\\n            for(uint256 j = 0; j \\u003c randomNums.length; j++) {\\n                _mint(addrs[i], rarityGen(randomNums[j]), 1, \\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Callback function used by VRF Coordinator\\n     */\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\\n        s_results[s_rollers[requestId]] = randomness;\\n        emit DiceLanded(requestId, randomness);\\n    }\\n\\n    /**\\n     * @dev Converts a digit from 0 - 10000 into its corresponding rarity based on the given rarity tier.\\n     * @param _randinput The input from 0 - 10000 to use for rarity gen.\\n     */\\n    function rarityGen(uint256 _randinput) internal view returns (uint8)\\n    {\\n        uint16 currentLowerBound = 0;\\n        for (uint8 i = 1; i \\u003c PROBs.length; i++) {\\n            uint16 thisPercentage = PROBs[i];\\n            if (\\n                _randinput \\u003e= currentLowerBound \\u0026\\u0026\\n                _randinput \\u003c currentLowerBound + thisPercentage\\n            ) return i;\\n            currentLowerBound = currentLowerBound + thisPercentage;\\n        }\\n        return 3;\\n    }\\n\\n    function expand(uint256 randomValue, uint256 n, uint256 seed) public pure returns (uint256[] memory expandedValues) {\\n        expandedValues = new uint256[](n);\\n        for (uint256 i = 0; i \\u003c n; i++) {\\n            expandedValues[i] = uint256(keccak256(abi.encode(randomValue, seed+i))) % 10000;\\n        }\\n        return expandedValues;\\n    }\\n\\n    /*\\n     * Only the owner can do these things\\n     */\\n    function setURI(string memory newURI) public onlyOwner {\\n      _setURI(newURI);\\n    }\\n    \\n    function setOpenSea(address addr) public onlyOwner {\\n      OPEN_SEA = addr;\\n    }\\n    \\n    /*\\n     * Override burn and burnBatch function to allow for whitelisted addresses to call on these two functions\\n     */\\n    function burn(address account, uint256 id, uint256 value) public override isWhitelisted {\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) public override isWhitelisted {\\n        _burnBatch(account, ids, values);\\n    }\\n\\n    //VIEW FUNCTIONS\\n    function uri(uint256 tokenId) public view override returns (string memory) {\\n        string memory baseURI = ERC1155.uri(tokenId);\\n        return string(abi.encodePacked(baseURI, Strings.toString(tokenId)));\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view returns (string memory)\\n    {\\n        return uri(tokenId);\\n    }\\n\\n    function name() external pure returns (string memory) {\\n        return \\\"GFCGenesisKey\\\";\\n    }\\n\\n    function symbol() external pure returns (string memory) {\\n        return \\\"GFCGK\\\";\\n    }\\n    \\n    /**\\n     * @notice Get the random number if VRF callback on the fulfillRandomness function\\n     * @param addr address\\n     * @return the random number generated by chainlink VRF\\n     */\\n    function getResult(address addr) public view returns (uint256) {\\n        require(s_results[addr] != 0, \\\"Dice not rolled\\\");\\n        require(s_results[addr] != ROLL_IN_PROGRESS, \\\"Roll in progress\\\");\\n        return s_results[addr];\\n    }\\n    \\n    /**\\n     * Override isApprovedForAll to auto-approve OS\\u0027s proxy contract\\n     */\\n    function isApprovedForAll(\\n        address _owner,\\n        address _operator\\n    ) public override view returns (bool isOperator) {\\n        // if OpenSea\\u0027s ERC1155 Proxy Address is detected, auto-return true\\n       if (_operator == OPEN_SEA) {\\n            return true;\\n        }\\n        // otherwise, use the default ERC1155.isApprovedForAll()\\n        return ERC1155.isApprovedForAll(_owner, _operator);\\n    }\\n}\"},\"GFCGenesisWeapon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ERC1155Burnable.sol\\\";\\n\\nimport \\\"./Ownable.sol\\\";\\n\\nimport \\\"./Strings.sol\\\";\\n\\nimport \\\"./Whitelist.sol\\\";\\n\\ncontract GFCGenesisWeapon is ERC1155Burnable, Ownable, Whitelist {\\n    using Strings for uint256;\\n\\n    //OpenSea\\u0027s Proxy contract for ERC1155 on Polygon\\n    address public OPEN_SEA = 0x207Fa8Df3a17D96Ca7EA4f2893fcdCb78a304101;\\n\\n    //probability arrays\\n    uint16[][2] public PROBs;\\n\\n    //arrays of total number of melee weapons in each tier\\n    uint16[] public meleeWeaponCount;\\n\\n    //arrays of total number of ranged weapons in each tier\\n    uint16[] public rangedWeaponCount;\\n\\n    constructor(string memory path) ERC1155(path){\\n      //Initialise the probabilities\\n      //Probability for Tiers with Tier 1 keys\\n      PROBs[0] = [0, 0, 44, 35, 15, 6];\\n      //Probability for Tiers with Tier 2/3 keys\\n      PROBs[1] = [0, 45, 30, 18, 6, 1];\\n\\n      //Initalise the total number of weapons\\n      meleeWeaponCount =    [0, 3, 2, 1, 2, 1];\\n      rangedWeaponCount =   [0, 2, 4, 11, 5, 6];\\n    }\\n\\n    function mintWeapon(address account, uint256 weaponId, uint256 amount) public isWhitelisted returns (uint256){\\n      _mint(account, weaponId, amount, \\\"\\\");\\n      return weaponId;\\n    }\\n\\n    function MintTier1KeyMeleeWeapon(address account, uint256 amount, uint256 ranNum) external isWhitelisted returns (uint256){\\n      uint256[] memory ranNums = expand(ranNum, 2);\\n      uint8 weaponTier = rarityGen(ranNums[0] % 100, 0);\\n      uint256 weaponType = ranNums[1] % meleeWeaponCount[weaponTier];\\n      uint256 weaponId = 1*10000 + weaponTier*1000 + weaponType; \\n      _mint(account, weaponId, amount, \\\"\\\");\\n      return weaponId;\\n    }\\n\\n    function MintTier1KeyRangedWeapon(address account, uint256 amount, uint256 ranNum) external isWhitelisted returns (uint256){\\n      uint256[] memory ranNums = expand(ranNum, 2);\\n      uint8 weaponTier = rarityGen(ranNums[0] % 100, 0);\\n      uint256 weaponType = ranNums[1] % rangedWeaponCount[weaponTier];\\n      uint256 weaponId = 1*20000 + weaponTier*1000 + weaponType;\\n      _mint(account, weaponId, amount, \\\"\\\");\\n      return weaponId;\\n    }\\n\\n    function MintTier2KeyRangedWeapon(address account, uint256 amount, uint256 ranNum) external isWhitelisted returns (uint256){\\n      uint256[] memory ranNums = expand(ranNum, 2);\\n      uint8 weaponTier = rarityGen(ranNums[0] % 100, 1);\\n      uint256 weaponType = ranNums[1] % rangedWeaponCount[weaponTier];\\n      uint256 weaponId = 1*20000 + weaponTier*1000 + weaponType;\\n      _mint(account, weaponId, amount, \\\"\\\");\\n      return weaponId;\\n    }\\n\\n    function MintTier3KeyMeleeWeapon(address account, uint256 amount, uint256 ranNum) external isWhitelisted returns (uint256){\\n      uint256[] memory ranNums = expand(ranNum, 2);\\n      uint8 weaponTier = rarityGen(ranNums[0] % 100, 1);\\n      uint256 weaponType = ranNums[1] % meleeWeaponCount[weaponTier];\\n      uint256 weaponId = 1*10000 + weaponTier*1000 + weaponType;\\n      _mint(account, weaponId, amount, \\\"\\\");\\n      return weaponId;\\n    }\\n\\n    function expand(uint256 randomValue, uint256 n) public pure returns (uint256[] memory expandedValues) {\\n      expandedValues = new uint256[](n);\\n      for (uint256 i = 0; i \\u003c n; i++) {\\n          expandedValues[i] = uint256(keccak256(abi.encode(randomValue, i)));\\n      }\\n      return expandedValues;\\n    }\\n\\n    /**\\n     * @dev Converts a digit from 0 - 10000 into its corresponding rarity based on the given rarity tier.\\n     * @param _randinput The input from 0 - 10000 to use for rarity gen.\\n     */\\n    function rarityGen(uint256 _randinput, uint256 number) internal view returns (uint8)\\n    {\\n        uint16 currentLowerBound = 0;\\n        for (uint8 i = 0; i \\u003c PROBs[number].length; i++) {\\n          uint16 thisPercentage = PROBs[number][i];\\n          if(thisPercentage == 0){\\n            continue;\\n          }\\n          if (\\n              _randinput \\u003e= currentLowerBound \\u0026\\u0026\\n              _randinput \\u003c currentLowerBound + thisPercentage\\n          ) return i;\\n          currentLowerBound = currentLowerBound + thisPercentage;\\n        }\\n        return 1;\\n    }\\n\\n    function setProbability(uint256 index, uint16[] calldata array) public onlyOwner{\\n      PROBs[index] = array;\\n    }\\n\\n    function setMeleeCount(uint16[] calldata array) public onlyOwner{\\n      meleeWeaponCount = array;\\n    }\\n\\n    function setRangedCount(uint16[] calldata array) public onlyOwner{\\n      rangedWeaponCount = array;\\n    }\\n\\n    function setOpenSea(address addr) public onlyOwner {\\n      OPEN_SEA = addr;\\n    }\\n\\n    function setURI(string memory newURI) public onlyOwner {\\n      _setURI(newURI);\\n    }\\n\\n    function name() external pure returns (string memory) {\\n        return \\\"GFCGenesisWeapon\\\";\\n    }\\n\\n    function symbol() external pure returns (string memory) {\\n        return \\\"GFCGW\\\";\\n    }\\n\\n    function uri(uint256 tokenId) public view override returns (string memory) {\\n      string memory baseURI = ERC1155.uri(tokenId);\\n      return string(abi.encodePacked(baseURI, Strings.toString(tokenId)));\\n    }\\n\\n    /**\\n     * Override isApprovedForAll to auto-approve OS\\u0027s proxy contract\\n     */\\n    function isApprovedForAll(\\n        address _owner,\\n        address _operator\\n    ) public override view returns (bool isOperator) {\\n        // if OpenSea\\u0027s ERC1155 Proxy Address is detected, auto-return true\\n       if (_operator == OPEN_SEA) {\\n            return true;\\n        }\\n        // otherwise, use the default ERC1155.isApprovedForAll()\\n        return ERC1155.isApprovedForAll(_owner, _operator);\\n    }\\n\\n    /*\\n    * Override burn and burnBatch function to allow for whitelisted addresses to call on these two functions\\n    */\\n    function burn(address account, uint256 id, uint256 value) public override isWhitelisted {\\n      _burn(account, id, value);\\n    }\\n\\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) public override isWhitelisted {\\n      _burnBatch(account, ids, values);\\n    }\\n}\"},\"GFCMysteryItem.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ERC1155Pausable.sol\\\";\\n\\nimport \\\"./Ownable.sol\\\";\\n\\nimport \\\"./Strings.sol\\\";\\n\\nimport \\\"./Whitelist.sol\\\";\\n\\ncontract GFCMysteryItem is ERC1155Pausable, Ownable, Whitelist {\\n    using Strings for uint256;\\n\\n    //OpenSea\\u0027s Proxy contract for ERC1155 on Polygon\\n    address public OPEN_SEA = 0x207Fa8Df3a17D96Ca7EA4f2893fcdCb78a304101;\\n\\n    //probability arrays\\n    uint16[] public PROBs;\\n\\n    constructor(string memory path) ERC1155(path){\\n      //Initialise the probabilities\\n      //65% chance to get the battle pass\\n      //35% chance to get the cosmetic item\\n      PROBs = [65, 35];\\n    }\\n\\n    function devMint(address account, uint256 itemId, uint256 amount) public isWhitelisted returns (uint256){\\n      _mint(account, itemId, amount, \\\"\\\");\\n      return itemId;\\n    }\\n\\n    function mintMysteryItem(address account, uint256 amount, uint256 ranNum) external isWhitelisted returns (uint256){\\n      uint8 itemId = itemIdGen(ranNum % 100);  \\n      _mint(account, itemId, amount, \\\"\\\");\\n      return itemId;\\n    }\\n\\n    /**\\n     * determine itemId according to the random number input\\n     */\\n    function itemIdGen(uint256 _randinput) internal view returns (uint8)\\n    {\\n        uint16 currentLowerBound = 0;\\n        for (uint8 i = 0; i \\u003c PROBs.length; i++) {\\n          uint16 thisPercentage = PROBs[i];\\n          if (\\n              _randinput \\u003e= currentLowerBound \\u0026\\u0026\\n              _randinput \\u003c currentLowerBound + thisPercentage\\n          ) return i;\\n          currentLowerBound = currentLowerBound + thisPercentage;\\n        }\\n        return 1;\\n    }\\n\\n    function setProbability(uint16[] calldata array) public onlyOwner{\\n      PROBs = array;\\n    }\\n\\n    function setOpenSea(address addr) public onlyOwner {\\n      OPEN_SEA = addr;\\n    }\\n\\n    function setURI(string memory newURI) public onlyOwner {\\n      _setURI(newURI);\\n    }\\n\\n    function name() external pure returns (string memory) {\\n        return \\\"GFCGenesisMysteryItems\\\";\\n    }\\n\\n    function symbol() external pure returns (string memory) {\\n        return \\\"GFCGMI\\\";\\n    }\\n\\n    function uri(uint256 tokenId) public view override returns (string memory) {\\n      string memory baseURI = ERC1155.uri(tokenId);\\n      return string(abi.encodePacked(baseURI, Strings.toString(tokenId)));\\n    }\\n\\n    /**\\n     * Override isApprovedForAll to auto-approve OS\\u0027s proxy contract\\n     */\\n    function isApprovedForAll(\\n        address _owner,\\n        address _operator\\n    ) public override view returns (bool isOperator) {\\n        // if OpenSea\\u0027s ERC1155 Proxy Address is detected, auto-return true\\n       if (_operator == OPEN_SEA) {\\n            return true;\\n        }\\n        // otherwise, use the default ERC1155.isApprovedForAll()\\n        return ERC1155.isApprovedForAll(_owner, _operator);\\n    }\\n\\n    /**\\n     * Pause trading on this collection\\n     * Implemented for taking snapshot\\n     */\\n    function pause() public isWhitelisted {\\n        super._pause();\\n    }\\n\\n    /**\\n     * Unpause trading on this collection\\n     */\\n    function unpause() public isWhitelisted {\\n        super._unpause();\\n    }\\n\\n        /*\\n    * Override burn and burnBatch function to allow for whitelisted addresses to call on these two functions\\n    */\\n    function burn(address account, uint256 id, uint256 value) public isWhitelisted {\\n      _burn(account, id, value);\\n    }\\n\\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) public isWhitelisted {\\n      _burnBatch(account, ids, values);\\n    }\\n}\"},\"IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller\\u0027s tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``\\u0027s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``\\u0027s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"},\"IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"},\"IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\"},\"IKeyNft.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface IKeyNft {\\n  function mint(address to, uint256 _type, uint256 amount, bytes memory data) external;\\n  function burn(address from, uint256 _type, uint256 amount) external;\\n  function balanceOf(address account, uint256 id) external returns(uint256);\\n}\"},\"IVRFCoordinatorV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash\\u0027s have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you\\u0027d like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you\\u0027d like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you\\u0027d like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\"},\"LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 remaining\\n    );\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 balance\\n    );\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8 decimalPlaces\\n    );\\n\\n  function decreaseApproval(\\n    address spender,\\n    uint256 addedValue\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function increaseApproval(\\n    address spender,\\n    uint256 subtractedValue\\n  ) external;\\n\\n  function name()\\n    external\\n    view\\n    returns (\\n      string memory tokenName\\n    );\\n\\n  function symbol()\\n    external\\n    view\\n    returns (\\n      string memory tokenSymbol\\n    );\\n\\n  function totalSupply()\\n    external\\n    view\\n    returns (\\n      uint256 totalTokensIssued\\n    );\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n}\\n\"},\"LootBox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ERC1155Burnable.sol\\\";\\n\\nimport \\\"./Ownable.sol\\\";\\n\\nimport \\\"./Strings.sol\\\";\\n\\nimport \\\"./VRFConsumerBaseV2.sol\\\";\\n\\nimport \\\"./IVRFCoordinatorV2.sol\\\";\\n\\nimport \\\"./Whitelist.sol\\\";\\n\\nimport \\\"./GFCGenesisKey_Polygon.sol\\\";\\n\\nimport \\\"./GFCGenesisWeapon.sol\\\";\\n\\nimport \\\"./BYOPillGFC.sol\\\";\\n\\nimport \\\"./GFCMysteryItem.sol\\\";\\n\\nimport \\\"./IKeyNft.sol\\\";\\n\\nimport \\\"./ReentrancyGuard.sol\\\";\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ncontract GFCLootBox_v2 is Ownable, Whitelist, ReentrancyGuard, VRFConsumerBaseV2 {\\n    using Strings for uint256;\\n\\n    VRFCoordinatorV2Interface COORDINATOR;\\n    GFCGenesisKeyPoly public genesisKey;\\n    GFCGenesisWeapon public genesisWeapon;\\n    BYOPillGFC public byoPill;\\n    IKeyNft public key;\\n    GFCMysteryItem public mysteryItem;\\n    \\n    uint256 private constant ROLL_IN_PROGRESS = 42;\\n\\n    address vrfCoordinator = 0xAE975071Be8F8eE67addBC1A82488F1C24858067;\\n\\n    address gCoin = 0x071AC29d569a47EbfFB9e57517F855Cb577DCc4C;\\n\\n    bytes32 keyHash = 0xcc294a196eeeb44da2888d17c0625cc88d70d9760a69d58d853ba6581a9ab0cd;\\n\\n    uint64 s_subscriptionId;\\n\\n    uint16 requestConfirmations = 3;\\n\\n    uint32 callbackGasLimit = 2400000;\\n\\n    uint256 public gCoinPayAmount = 140 ether;\\n\\n    //Number of burnt keys\\n    uint256 public BURNT_KEYS;\\n\\n    //In case we need to pause opening\\n    bool public paused;\\n    //In case we need to pause P2E Keys opening\\n    bool public keyPaused;\\n\\n    uint256[][2] public PROBs;\\n    uint16[] public meleeWeaponCount;\\n\\n    //arrays of total number of ranged weapons in each tier\\n    uint16[] public rangedWeaponCount;\\n\\n    struct KeyInfo{\\n        uint256 tier; //1-3\\n        uint256 amount;\\n    }\\n    \\n    mapping(uint256 =\\u003e address) private s_rollers;\\n    mapping(address =\\u003e uint256[]) private s_results;\\n    mapping(address =\\u003e uint256) private s_pending_status;\\n    mapping(address =\\u003e KeyInfo) public addressGenesisKeyInfo;\\n    mapping(address =\\u003e KeyInfo) public addressKeyInfo;\\n\\n    event DiceRolled(uint256 indexed requestId, address indexed roller);\\n    event DiceLanded(uint256 indexed requestId, uint256[] indexed result);\\n    event WeaponMinted(uint256 indexed transactionId, uint256 weaponId, uint256 amount);\\n    event BYOPillMinted(uint256 indexed transactionId, uint256 pillId, uint256 amount);\\n    event MysterItemMinted(uint256 indexed transactionId, uint256 ItemId, uint256 amount);\\n    event LootBoxesOpened(uint256 indexed transactionId);\\n\\n    constructor(uint64 subscriptionId) VRFConsumerBaseV2(vrfCoordinator)\\n    {\\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\\n        s_subscriptionId = subscriptionId;\\n        //fill in the addresses for the corresponding contract addresses before deployment\\n        genesisKey = GFCGenesisKeyPoly(address(0x3702f4C46785BbD947d59A2516ac1ea30F2BAbF2));\\n        genesisWeapon = GFCGenesisWeapon(address(0xCbc964dd716F07b4965B4526E30541a66F414ccF));\\n        byoPill = BYOPillGFC(address(0xB581Cc7a3211674D6484a11C8663b9011B600EEE));\\n        mysteryItem = GFCMysteryItem(address(0xFd24D200C6715f3C0a2DdF8a8b128952eFed7724));\\n        key = IKeyNft(address(0x67a7aE8E3B3e1E58e2a105B4C7413a5506169476));\\n\\n        //Probability for Tiers with gold key\\n        PROBs[0] = [0, 70000, 20000, 6000, 3000, 1000, 5, 2, 1];\\n        //Probability for Tiers with silver key\\n        PROBs[1] = [0, 83000, 12000, 3000, 2000];\\n        meleeWeaponCount =    [0, 7, 7, 1, 1, 1, 1, 1, 1];\\n        rangedWeaponCount =   [0, 3, 2, 1, 1, 1, 1, 1, 1];\\n    }\\n\\n    function setGCoinPayAmount(uint256 _amount) external onlyOwner {\\n        gCoinPayAmount = _amount;\\n    }\\n\\n    function _transferGCoin(uint256 amount) internal {\\n        require(IERC20(gCoin).balanceOf(msg.sender) \\u003e= gCoinPayAmount * amount, \\\"Insufficient gcoin amount\\\");\\n        require(IERC20(gCoin).allowance(msg.sender, address(this)) \\u003e= gCoinPayAmount * amount, \\\"Insufficient gcoin allowance amount\\\");\\n\\n        IERC20(gCoin).transferFrom(msg.sender, address(this), gCoinPayAmount * amount);\\n    }\\n\\n    /**\\n        First Step on opening loot bxo\\n        Burn keys and request random number from Chainlink\\n     */\\n    function getRandom(uint256 tier, uint256 amount) external {\\n        require(!paused, \\\"The contract have been paused\\\");\\n        require(tier \\u003e 0 \\u0026\\u0026 tier \\u003c 4, \\\"invalid tier input (must be 1,2 or 3)\\\");\\n        require(genesisKey.balanceOf(msg.sender, tier) \\u003e= amount, \\\"You don\\u0027t have enough keys to open this many loot boxes\\\");\\n        genesisKey.burn(msg.sender, tier, amount);\\n        getRandNum4LootBox(amount);\\n        addressGenesisKeyInfo[msg.sender] = KeyInfo(tier, amount);\\n    }\\n\\n    function getKeyRandom(uint256 keyId, uint256 amount) external {\\n        require(!keyPaused, \\\"The contract have been paused\\\");\\n        require(key.balanceOf(msg.sender, keyId) \\u003e= amount, \\\"You don\\u0027t have enough keys to open this many loot boxes\\\");\\n        _transferGCoin(amount);\\n        key.burn(msg.sender, keyId, amount);\\n        getRandNum4LootBox(amount * 3);\\n        addressKeyInfo[msg.sender] = KeyInfo(keyId, amount);\\n    }\\n\\n    /**\\n        Second Step on opening loot box\\n        Check if the random number has been generated\\n        if so, continute to mint the loot box content for the user\\n     */\\n    function openLootBox(uint256 transactionId) nonReentrant external {\\n        require(!paused, \\\"The contract have been paused\\\");\\n        uint256[] memory randNums = getResult(msg.sender);\\n        KeyInfo storage kInfo = addressGenesisKeyInfo[msg.sender];\\n        BURNT_KEYS += kInfo.amount;\\n        //Reset the random number for next time\\n        s_results[msg.sender] = new uint256[](0);\\n        if(kInfo.tier == 1) {\\n            openTier1LootBox(transactionId, kInfo.amount, randNums);\\n        }else if(kInfo.tier == 2) {\\n            openTier2LootBox(transactionId, kInfo.amount, randNums);\\n        }else if(kInfo.tier == 3) {\\n            openTier3LootBox(transactionId, kInfo.amount, randNums);\\n        }\\n    }\\n\\n    function openGoldSilverLootBox(uint256 transactionId) external nonReentrant {\\n        require(!keyPaused, \\\"The contract have been paused\\\");\\n        uint256[] memory randNums = getResult(msg.sender);\\n        KeyInfo storage kInfo = addressKeyInfo[msg.sender];\\n        BURNT_KEYS += kInfo.amount;\\n        //Reset the random number for next time\\n        s_results[msg.sender] = new uint256[](0);\\n        if(kInfo.tier == 0) {\\n            openGoldKeyLootBox(transactionId, kInfo.amount, randNums);\\n        }else if(kInfo.tier == 1) {\\n            openSilverKeyLootBox(transactionId, kInfo.amount, randNums);\\n        }\\n    }\\n\\n    function rarityGen(uint256 _randinput, uint256 number) internal view returns (uint8)\\n    {\\n        uint256 currentLowerBound = 0;\\n        for (uint8 i = 0; i \\u003c PROBs[number].length; i++) {\\n          uint256 thisPercentage = PROBs[number][i];\\n          if(thisPercentage == 0){\\n            continue;\\n          }\\n          if (\\n              _randinput \\u003e= currentLowerBound \\u0026\\u0026\\n              _randinput \\u003c currentLowerBound + thisPercentage\\n          ) return i;\\n          currentLowerBound = currentLowerBound + thisPercentage;\\n        }\\n        return 1;\\n    }\\n    function getGoldSiverKeyRangedOrMaleeWeaponId(uint256 index, uint256[] memory randNums, uint256 keyType) internal view returns(uint256) {\\n        uint256 weaponCategory = randNums[index * 3 + 1] % 2 == 0 ? 3 : 4;\\n        uint8 weaponTier = rarityGen(randNums[index * 3] % 100000, keyType);\\n        uint256 weaponSubId = randNums[index * 3 + 2] % (weaponCategory == 3 ? meleeWeaponCount[weaponTier] : rangedWeaponCount[weaponTier]);\\n        uint256 weaponId = weaponCategory * 10000 + weaponTier * 1000 + weaponSubId;\\n        return weaponId;\\n    }\\n\\n    function openGoldKeyLootBox(uint256 transactionId, uint256 amount, uint256[] memory randomNums) internal {\\n        for (uint256 i = 0; i \\u003c amount; i += 1) {\\n            uint256 weaponId = getGoldSiverKeyRangedOrMaleeWeaponId(i, randomNums, 0);\\n            genesisWeapon.mintWeapon(msg.sender, weaponId, 1);\\n            emit WeaponMinted(transactionId, weaponId, 1);\\n        }\\n    }\\n\\n    function openSilverKeyLootBox(uint256 transactionId, uint256 amount, uint256[] memory randomNums) internal {\\n        for (uint256 i = 0; i \\u003c amount; i += 1) {\\n            uint256 weaponId = getGoldSiverKeyRangedOrMaleeWeaponId(i, randomNums, 1);\\n            genesisWeapon.mintWeapon(msg.sender, weaponId, 1);\\n            emit WeaponMinted(transactionId, weaponId, 1);\\n        }\\n    }\\n\\n    function openTier1LootBox(uint256 transactionId, uint256 amount, uint256[] memory randomNums) internal{\\n        for(uint256 j = 0; j \\u003c amount; j++) {\\n            uint256 weaponId = genesisWeapon.MintTier1KeyMeleeWeapon(msg.sender, 1, randomNums[j]);\\n            emit WeaponMinted(transactionId, weaponId, 1);\\n            weaponId = genesisWeapon.MintTier1KeyRangedWeapon(msg.sender, 1, randomNums[j]);\\n            emit WeaponMinted(transactionId, weaponId, 1);\\n            mintByoPill(transactionId, randomNums[j]);\\n            if(randomNums[j]%10000 \\u003c= 4000) {\\n                uint256 itemId = mysteryItem.mintMysteryItem(msg.sender, 1, randomNums[j]);\\n                emit MysterItemMinted(transactionId, itemId, 1);\\n            }\\n        }\\n        emit LootBoxesOpened(transactionId);\\n    }\\n\\n    function openTier2LootBox(uint256 transactionId, uint256 amount, uint256[] memory randomNums) internal{\\n        for(uint256 j = 0; j \\u003c amount; j++) {\\n            uint256 weaponId = genesisWeapon.MintTier2KeyRangedWeapon(msg.sender, 1, randomNums[j]);\\n            emit WeaponMinted(transactionId, weaponId, 1);\\n            mintByoPill(transactionId, randomNums[j]);\\n        }\\n        emit LootBoxesOpened(transactionId);\\n    }\\n\\n    function openTier3LootBox(uint256 transactionId, uint256 amount, uint256[] memory randomNums) internal{\\n        for(uint256 j = 0; j \\u003c amount; j++) {\\n            uint256 weaponId = genesisWeapon.MintTier3KeyMeleeWeapon(msg.sender, 1, randomNums[j]);\\n            emit WeaponMinted(transactionId, weaponId, 1);\\n            mintByoPill(transactionId, randomNums[j]);\\n        }\\n        emit LootBoxesOpened(transactionId);\\n    }\\n\\n    /**\\n     * Requests randomwords (Chainlink VRF V2)\\n     */\\n    function getRandNum4LootBox(uint256 amount) internal {\\n        require(s_results[msg.sender].length == 0, \\\"Already rolled\\\");\\n        uint256 s_requestId = COORDINATOR.requestRandomWords(keyHash, s_subscriptionId, requestConfirmations, callbackGasLimit, uint32(amount));\\n        s_rollers[s_requestId] = msg.sender;\\n        s_pending_status[msg.sender] = ROLL_IN_PROGRESS;\\n        emit DiceRolled(s_requestId, msg.sender);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 requestId, /* requestId */\\n        uint256[] memory randomWords\\n    ) internal override {\\n        s_results[s_rollers[requestId]] = randomWords;\\n        s_pending_status[s_rollers[requestId]] = 0;\\n        emit DiceLanded(requestId, randomWords);\\n    }\\n\\n    function mintByoPill(uint256 transactionId, uint256 randNum) internal{\\n        uint256 pillId = byoPill.randomMint(msg.sender, 1, randNum);\\n        emit BYOPillMinted(transactionId, pillId, 1);\\n    }\\n\\n    function setGenesisKey(address _genesisKey) external onlyOwner {\\n\\t\\tgenesisKey = GFCGenesisKeyPoly(_genesisKey);\\n\\t}\\n\\n    function setGenesisWeapon(address _weapon) external onlyOwner {\\n\\t\\tgenesisWeapon = GFCGenesisWeapon(_weapon);\\n\\t}\\n\\n    function setBYOPill(address _pill) external onlyOwner {\\n\\t\\tbyoPill = BYOPillGFC(_pill);\\n\\t}\\n\\n    function setMysteryItem(address _item) external onlyOwner {\\n\\t\\tmysteryItem = GFCMysteryItem(_item);\\n\\t}\\n\\n    function setKey(address _key) external onlyOwner {\\n\\t\\tkey = IKeyNft(_key);\\n\\t}\\n\\n    function setProbs(uint16 index, uint256[] memory PROBsArray) external onlyOwner {\\n        PROBs[index] = PROBsArray;\\n    }\\n\\n    function togglePaused() external onlyOwner {\\n        paused = !paused;\\n    }\\n\\n    function toggleKeyPaused() external onlyOwner {\\n        keyPaused = !keyPaused;\\n    }\\n\\n    function withdrawMatic() external onlyOwner {\\n        require(payable(msg.sender).send(address(this).balance), \\\"Unable to withdraw MATIC\\\");\\n    }\\n    \\n    /**\\n     * @notice Get the random number if VRF callback on the fulfillRandomness function\\n     * @return the random number generated by chainlink VRF\\n     */\\n    function getResult(address addr) public view returns (uint256[] memory) {\\n        require(s_results[addr].length != 0, \\\"Dice not rolled\\\");\\n        require(s_pending_status[addr] != ROLL_IN_PROGRESS, \\\"Roll in progress\\\");\\n        return s_results[addr];\\n    }\\n\\n    function withdrawGCoin() external onlyOwner {\\n        IERC20(gCoin).transfer(msg.sender, IERC20(gCoin).balanceOf(address(this)));\\n    }\\n}\"},\"Migrations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.4.22 \\u003c0.9.0;\\n\\ncontract Migrations {\\n  address public owner = msg.sender;\\n  uint public last_completed_migration;\\n\\n  modifier restricted() {\\n    require(\\n      msg.sender == owner,\\n      \\\"This function is restricted to the contract\\u0027s owner\\\"\\n    );\\n    _;\\n  }\\n\\n  function setCompleted(uint completed) public restricted {\\n    last_completed_migration = completed;\\n  }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"},\"Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI\\u0027s implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp \\u003e\\u003e= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i \\u003e 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value \\u0026 0xf];\\n            value \\u003e\\u003e= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"},\"VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he\\u0027s not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase\\u0027s attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(\\u003cother arguments\\u003e, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         \\u003cinitialization with other arguments goes here\\u003e\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let\\u0027s call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle\\u0027s response\\n * @dev to your request, it will call your contract\\u0027s fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it\\u0027s critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract\\u0027s random behavior is free\\n * @dev from malicious interference, it\\u0027s best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract\\u0027s user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    internal\\n    virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 constant private USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it\\u0027s provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can\\u0027t *hurt* to mix in some of\\n   * @dev your own randomness, here, but it\\u0027s not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(\\n    bytes32 _keyHash,\\n    uint256 _fee\\n  )\\n    internal\\n    returns (\\n      bytes32 requestId\\n    )\\n  {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface immutable internal LINK;\\n  address immutable private vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 /* keyHash */ =\\u003e uint256 /* nonce */) private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(\\n    address _vrfCoordinator,\\n    address _link\\n  ) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    external\\n  {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\"},\"VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he\\u0027s not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase\\u0027s attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(\\u003cother arguments\\u003e, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         \\u003cinitialization with other arguments goes here\\u003e\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let\\u0027s call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle\\u0027s response\\n * @dev to your request, it will call your contract\\u0027s fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it\\u0027s critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract\\u0027s random behavior is free\\n * @dev from malicious interference, it\\u0027s best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract\\u0027s user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you\\u0027d like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\"},\"VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  )\\n    internal\\n    pure\\n    returns (\\n      uint256\\n    )\\n  {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(\\n    bytes32 _keyHash,\\n    uint256 _vRFInputSeed\\n  )\\n    internal\\n    pure\\n    returns (\\n      bytes32\\n    )\\n  {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\"},\"Whitelist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\ncontract Whitelist is Ownable {\\n  // address[] private whitelisted;\\n  mapping(address =\\u003e bool) private whitelisted;\\n\\n  function addWhitelistedAddress(address addr) public onlyOwner {\\n    whitelisted[addr] = true;\\n  }\\n\\n  function removeWhitelistedAddress(address addr) public onlyOwner {\\n    whitelisted[addr] = false;\\n  }\\n\\n  function checkWhitelist(address addr) internal view returns (bool) {\\n    return msg.sender == owner() || whitelisted[addr];    \\n  }\\n\\n  modifier isWhitelisted {\\n    require(checkWhitelist(msg.sender), \\\"Only whitelisted address can call this\\\");\\n    _;\\n  }\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pillId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BYOPillMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"result\",\"type\":\"uint256[]\"}],\"name\":\"DiceLanded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"roller\",\"type\":\"address\"}],\"name\":\"DiceRolled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"LootBoxesOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ItemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MysterItemMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weaponId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WeaponMinted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURNT_KEYS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PROBs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addWhitelistedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressGenesisKeyInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressKeyInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"byoPill\",\"outputs\":[{\"internalType\":\"contract BYOPillGFC\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gCoinPayAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisKey\",\"outputs\":[{\"internalType\":\"contract GFCGenesisKeyPoly\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisWeapon\",\"outputs\":[{\"internalType\":\"contract GFCGenesisWeapon\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"keyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getKeyRandom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getRandom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getResult\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"key\",\"outputs\":[{\"internalType\":\"contract IKeyNft\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keyPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"meleeWeaponCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mysteryItem\",\"outputs\":[{\"internalType\":\"contract GFCMysteryItem\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"openGoldSilverLootBox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"openLootBox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rangedWeaponCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeWhitelistedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pill\",\"type\":\"address\"}],\"name\":\"setBYOPill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setGCoinPayAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_genesisKey\",\"type\":\"address\"}],\"name\":\"setGenesisKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weapon\",\"type\":\"address\"}],\"name\":\"setGenesisWeapon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_key\",\"type\":\"address\"}],\"name\":\"setKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_item\",\"type\":\"address\"}],\"name\":\"setMysteryItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\"},{\"internalType\":\"uint256[]\",\"name\":\"PROBsArray\",\"type\":\"uint256[]\"}],\"name\":\"setProbs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleKeyPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawGCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawMatic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GFCLootBox_v2", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000004d", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a8fc063f75f3d8878f0b28fbac48f05f860f7c8b36526f1e35bedbc802144af8"}