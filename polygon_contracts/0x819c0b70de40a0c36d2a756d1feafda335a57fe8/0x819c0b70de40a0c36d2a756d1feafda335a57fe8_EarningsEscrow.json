{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.2 \\u003c0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"EarningsEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.6.8;\\npragma experimental ABIEncoderV2;\\n\\nimport { Address } from \\u0027./Address.sol\\u0027;\\nimport { ECDSA } from \\u0027./ECDSA.sol\\u0027;\\nimport { IERC20 } from \\u0027./IERC20.sol\\u0027;\\nimport {\\n  SafeMath as SafeMath256\\n} from \\u0027./SafeMath.sol\\u0027;\\n\\nimport { UUID } from \\u0027./UUID.sol\\u0027;\\nimport { Owned } from \\u0027./Owned.sol\\u0027;\\n\\n/**\\n * @notice The EarningsEscrow contract. Holds custody of assets deposited into escrow\\n * and distributes current earnings.\\n */\\ncontract EarningsEscrow is Owned {\\n  using SafeMath256 for uint256;\\n\\n  /**\\n   * @notice Emitted when an admin withdraws assets from escrow with `withdrawEscrow`\\n   */\\n  event EscrowWithdrawn(uint256 quantity, uint256 newEscrowBalance);\\n  /**\\n   * @notice Emitted when an admin changes the Exchange wallet tunable parameter with `setExchange`\\n   */\\n  event ExchangeChanged(address previousValue, address newValue);\\n  /**\\n   * @notice Emitted when an earnings distribution is paid by calling `distribute`\\n   */\\n  event AssetsDistributed(\\n    address indexed wallet,\\n    uint256 quantity,\\n    uint256 totalQuantity,\\n    uint128 nonce\\n  );\\n\\n  /**\\n   * @notice Emitted when this contract receives native asset for escrow\\n   */\\n  event NativeAssetEscrowed(address indexed from, uint256 quantity);\\n\\n  /**\\n   * @notice Argument type for `distribute`\\n   */\\n  struct AssetDistribution {\\n    uint128 nonce;\\n    uint128 parentNonce;\\n    address walletAddress;\\n    address assetAddress;\\n    uint256 quantity;\\n    bytes exchangeSignature;\\n  }\\n\\n  // The wallet currently whitelisted to sign earnings distributions\\n  address _exchangeWallet;\\n  // Mapping of wallet =\\u003e nonce of last distribution\\n  mapping(address =\\u003e uint128) _lastNonce;\\n  mapping(address =\\u003e uint256) _totalDistributed;\\n\\n  // Immutable constants //\\n  address public immutable _assetAddress;\\n\\n  /**\\n   * @notice Instantiate a new EarningsEscrow\\n   *\\n   * @dev Sets `owner` and `admin` to `msg.sender` as well as the escrow asset address,\\n   * after which they cannot be changed\\n   *\\n   * @param distributionAssetAddress Address of the escrow asset\\n   */\\n  constructor(address distributionAssetAddress, address initialExchangeWallet)\\n    public\\n    Owned()\\n  {\\n    require(\\n      Address.isContract(address(distributionAssetAddress)) ||\\n        address(distributionAssetAddress) == address(0x0),\\n      \\u0027Invalid asset address\\u0027\\n    );\\n\\n    _assetAddress = distributionAssetAddress;\\n    _exchangeWallet = initialExchangeWallet;\\n  }\\n\\n  receive() external payable {\\n    emit NativeAssetEscrowed(msg.sender, msg.value);\\n  }\\n\\n  /**\\n   * @notice Distribute earnings as authorized by the Exchange wallet\\n   *\\n   * @param distribution The distribution request data\\n   */\\n  function distribute(AssetDistribution memory distribution) public {\\n    require(distribution.walletAddress == msg.sender, \\u0027Invalid caller\\u0027);\\n    require(\\n      distribution.parentNonce != distribution.nonce,\\n      \\u0027Nonce must be different from parent\\u0027\\n    );\\n    require(\\n      distribution.parentNonce == _lastNonce[msg.sender],\\n      \\u0027Invalidated nonce\\u0027\\n    );\\n    require(\\n      distribution.parentNonce == 0 ||\\n        UUID.getTimestampInMsFromUuidV1(distribution.parentNonce) \\u003c\\n        UUID.getTimestampInMsFromUuidV1(distribution.nonce),\\n      \\u0027Nonce timestamp must be later than parent\\u0027\\n    );\\n    require(distribution.assetAddress == _assetAddress, \\u0027Invalid asset address\\u0027);\\n\\n    bytes32 hash = getDistributionHash(distribution);\\n    require(\\n      isSignatureValid(hash, distribution.exchangeSignature, _exchangeWallet),\\n      \\u0027Invalid exchange signature\\u0027\\n    );\\n\\n    _lastNonce[msg.sender] = distribution.nonce;\\n    transferTo(msg.sender, _assetAddress, distribution.quantity);\\n    _totalDistributed[msg.sender] = _totalDistributed[msg.sender].add(\\n      distribution.quantity\\n    );\\n\\n    emit AssetsDistributed(\\n      msg.sender,\\n      distribution.quantity,\\n      _totalDistributed[msg.sender],\\n      distribution.nonce\\n    );\\n  }\\n\\n  /**\\n   * @notice Load a wallet\\u0027s last used distribution nonce\\n   *\\n   * @param wallet The wallet address to load the nonce for. Can be different from `msg.sender`\\n   *\\n   * @return The nonce of the last succesful distribution request for this wallet; 0 if no distributions have been made\\n   */\\n  function loadLastNonce(address wallet) external view returns (uint128) {\\n    require(wallet != address(0x0), \\u0027Invalid wallet address\\u0027);\\n\\n    return _lastNonce[wallet];\\n  }\\n\\n  /**\\n   * @notice Load a wallet\\u0027s total cumulative distributions\\n   *\\n   * @param wallet The wallet address to load the total for. Can be different from `msg.sender`\\n   *\\n   * @return The total amount of distributions made to this wallet; 0 if no distributions have been made\\n   */\\n  function loadTotalDistributed(address wallet)\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    require(wallet != address(0x0), \\u0027Invalid wallet address\\u0027);\\n\\n    return _totalDistributed[wallet];\\n  }\\n\\n  /**\\n   * @notice Withdraw assets previously assigned to escrow in this contract\\n   *\\n   * @param quantity The quantity of assets to withdraw\\n   */\\n  function withdrawEscrow(uint256 quantity) external onlyAdmin {\\n    transferTo(msg.sender, _assetAddress, quantity);\\n    if (_assetAddress == address(0x0)) {\\n      emit EscrowWithdrawn(quantity, address(this).balance);\\n    } else {\\n      emit EscrowWithdrawn(\\n        quantity,\\n        IERC20(_assetAddress).balanceOf(address(this))\\n      );\\n    }\\n  }\\n\\n  // Exchange whitelisting //\\n\\n  /**\\n   * @notice Sets the wallet whitelisted to sign earning distributions\\n   *\\n   * @param newExchangeWallet The new whitelisted Exchage wallet. Must be different from the current one\\n   */\\n  function setExchange(address newExchangeWallet) external onlyAdmin {\\n    require(newExchangeWallet != address(0x0), \\u0027Invalid wallet address\\u0027);\\n    require(\\n      newExchangeWallet != _exchangeWallet,\\n      \\u0027Must be different from current exchange\\u0027\\n    );\\n    address oldExchangeWallet = _exchangeWallet;\\n    _exchangeWallet = newExchangeWallet;\\n\\n    emit ExchangeChanged(oldExchangeWallet, newExchangeWallet);\\n  }\\n\\n  /**\\n   * @notice Clears the currently whitelisted Exchange wallet, effectively disabling the\\n   * `distribute` function until a new wallet is set with `setExchange`\\n   */\\n  function removeExchange() external onlyAdmin {\\n    emit ExchangeChanged(_exchangeWallet, address(0x0));\\n    _exchangeWallet = address(0x0);\\n  }\\n\\n  function transferTo(\\n    address payable walletOrContract,\\n    address asset,\\n    uint256 quantityInAssetUnits\\n  ) internal {\\n    if (asset == address(0x0)) {\\n      require(\\n        walletOrContract.send(quantityInAssetUnits),\\n        \\u0027ETH transfer failed\\u0027\\n      );\\n    } else {\\n      uint256 balanceBefore = IERC20(asset).balanceOf(walletOrContract);\\n\\n      // Because we check for the expected balance change we can safely ignore the return value of transfer\\n      IERC20(asset).transfer(walletOrContract, quantityInAssetUnits);\\n\\n      uint256 balanceAfter = IERC20(asset).balanceOf(walletOrContract);\\n      require(\\n        balanceAfter.sub(balanceBefore) == quantityInAssetUnits,\\n        \\u0027Token contract returned transfer success without expected balance change\\u0027\\n      );\\n    }\\n  }\\n\\n  function getDistributionHash(AssetDistribution memory distribution)\\n    internal\\n    view\\n    returns (bytes32)\\n  {\\n    return\\n      keccak256(\\n        abi.encodePacked(\\n          address(this),\\n          distribution.nonce,\\n          distribution.parentNonce,\\n          distribution.walletAddress,\\n          distribution.assetAddress,\\n          distribution.quantity\\n        )\\n      );\\n  }\\n\\n  function getAssetAddress() external view returns (address) {\\n    return _assetAddress;\\n  }\\n\\n  function isSignatureValid(\\n    bytes32 hash,\\n    bytes memory signature,\\n    address signer\\n  ) internal pure returns (bool) {\\n    return\\n      ECDSA.recover(ECDSA.toEthSignedMessageHash(hash), signature) == signer;\\n  }\\n}\\n\"},\"ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 \\u003c s \\u003c secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) \\u003c= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature \\u0027s\\u0027 value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature \\u0027v\\u0027 value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"Migrations.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n\\n// IGNORE This is generated by Truffle\\n// https://www.trufflesuite.com/docs/truffle/getting-started/running-migrations#initial-migration\\n\\npragma solidity 0.6.8;\\n\\ncontract Migrations {\\n  address public owner;\\n  uint256 public last_completed_migration;\\n\\n  constructor() public {\\n    owner = msg.sender;\\n  }\\n\\n  modifier restricted() {\\n    if (msg.sender == owner) _;\\n  }\\n\\n  function setCompleted(uint256 completed) public restricted {\\n    last_completed_migration = completed;\\n  }\\n}\\n\"},\"Owned.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.6.8;\\n\\n/**\\n * @notice Mixin that provide separate owner and admin roles for RBAC\\n */\\nabstract contract Owned {\\n  address immutable _owner;\\n  address _admin;\\n\\n  modifier onlyOwner {\\n    require(msg.sender == _owner, \\u0027Caller must be owner\\u0027);\\n    _;\\n  }\\n  modifier onlyAdmin {\\n    require(msg.sender == _admin, \\u0027Caller must be admin\\u0027);\\n    _;\\n  }\\n\\n  /**\\n   * @notice Sets both the owner and admin roles to the contract creator\\n   */\\n  constructor() public {\\n    _owner = msg.sender;\\n    _admin = msg.sender;\\n  }\\n\\n  /**\\n   * @notice Sets a new whitelisted admin wallet\\n   *\\n   * @param newAdmin The new whitelisted admin wallet. Must be different from the current one\\n   */\\n  function setAdmin(address newAdmin) external onlyOwner {\\n    require(newAdmin != address(0x0), \\u0027Invalid wallet address\\u0027);\\n    require(newAdmin != _admin, \\u0027Must be different from current admin\\u0027);\\n\\n    _admin = newAdmin;\\n  }\\n\\n  /**\\n   * @notice Clears the currently whitelisted admin wallet, effectively disabling any functions requiring\\n   * the admin role\\n   */\\n  function removeAdmin() external onlyOwner {\\n    _admin = address(0x0);\\n  }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"},\"SafeMath64.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.6.8;\\n\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath64 {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity\\u0027s `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint64 a, uint64 b) internal pure returns (uint64) {\\n    uint64 c = a + b;\\n    require(c \\u003e= a, \\u0027SafeMath: addition overflow\\u0027);\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity\\u0027s `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint64 a, uint64 b) internal pure returns (uint64) {\\n    return sub(a, b, \\u0027SafeMath: subtraction overflow\\u0027);\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity\\u0027s `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   *\\n   * _Available since v2.4.0._\\n   */\\n  function sub(\\n    uint64 a,\\n    uint64 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint64) {\\n    require(b \\u003c= a, errorMessage);\\n    uint64 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity\\u0027s `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint64 a, uint64 b) internal pure returns (uint64) {\\n    // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n    // benefit is lost if \\u0027b\\u0027 is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint64 c = a * b;\\n    require(c / a == b, \\u0027SafeMath: multiplication overflow\\u0027);\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint64 a, uint64 b) internal pure returns (uint64) {\\n    return div(a, b, \\u0027SafeMath: division by zero\\u0027);\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   *\\n   * _Available since v2.4.0._\\n   */\\n  function div(\\n    uint64 a,\\n    uint64 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint64) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b \\u003e 0, errorMessage);\\n    uint64 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n    return c;\\n  }\\n}\\n\"},\"UUID.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n\\npragma solidity 0.6.8;\\n\\nimport { SafeMath64 } from \\u0027./SafeMath64.sol\\u0027;\\n\\n\\n/**\\n * Library helper for extracting timestamp component of Version 1 UUIDs\\n */\\nlibrary UUID {\\n  using SafeMath64 for uint64;\\n\\n  /**\\n   * Extracts the timestamp component of a Version 1 UUID. Used to make time-based assertions\\n   * against a wallet-privided nonce\\n   */\\n  function getTimestampInMsFromUuidV1(uint128 uuid)\\n    internal\\n    pure\\n    returns (uint64 msSinceUnixEpoch)\\n  {\\n    // https://tools.ietf.org/html/rfc4122#section-4.1.2\\n    uint128 version = (uuid \\u003e\\u003e 76) \\u0026 0x0000000000000000000000000000000F;\\n    require(version == 1, \\u0027Must be v1 UUID\\u0027);\\n\\n    // Time components are in reverse order so shift+mask each to reassemble\\n    uint128 timeHigh = (uuid \\u003e\\u003e 16) \\u0026 0x00000000000000000FFF000000000000;\\n    uint128 timeMid = (uuid \\u003e\\u003e 48) \\u0026 0x00000000000000000000FFFF00000000;\\n    uint128 timeLow = (uuid \\u003e\\u003e 96) \\u0026 0x000000000000000000000000FFFFFFFF;\\n    uint128 nsSinceGregorianEpoch = (timeHigh | timeMid | timeLow);\\n    // Gregorian offset given in seconds by https://www.wolframalpha.com/input/?i=convert+1582-10-15+UTC+to+unix+time\\n    msSinceUnixEpoch = uint64(nsSinceGregorianEpoch / 10000).sub(\\n      12219292800000\\n    );\\n\\n    return msSinceUnixEpoch;\\n  }\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"distributionAssetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialExchangeWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalQuantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"nonce\",\"type\":\"uint128\"}],\"name\":\"AssetsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEscrowBalance\",\"type\":\"uint256\"}],\"name\":\"EscrowWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ExchangeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"NativeAssetEscrowed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_assetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"nonce\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"parentNonce\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"exchangeSignature\",\"type\":\"bytes\"}],\"internalType\":\"struct EarningsEscrow.AssetDistribution\",\"name\":\"distribution\",\"type\":\"tuple\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"loadLastNonce\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"loadTotalDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newExchangeWallet\",\"type\":\"address\"}],\"name\":\"setExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"withdrawEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EarningsEscrow", "CompilerVersion": "v0.6.8+commit.0bbfe453", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "0000000000000000000000009cb74c8032b007466865f060ad2c46145d45553d000000000000000000000000e85d05b3773bc855c8472a5ec11b9a668a2088c7", "EVMVersion": "constantinople", "Library": "", "LicenseType": "GNU LGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f559c2580cb79312263a05056b50e667afe1f58cc4e57fd5657c57d19e1050ab"}