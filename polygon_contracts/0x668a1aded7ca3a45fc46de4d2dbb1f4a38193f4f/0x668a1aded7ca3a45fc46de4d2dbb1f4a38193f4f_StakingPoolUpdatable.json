{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/stakingpool/StakingPoolUpdatableFixedAPRWhitelisting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// File contracts/StakingPool.sol\\npragma solidity 0.7.6;\\n\\nimport \\\"./stakingPoolFixedAPR/MerkleWhitelisting.sol\\\";\\nimport \\\"../library/TransferHelper.sol\\\";\\nimport \\\"../library/Ownable.sol\\\";\\nimport \\\"../Metadata.sol\\\";\\nimport \\\"../Interface/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ncontract StakingPoolUpdatableFixedAPRWhitelisting is\\n    Ownable,\\n    ReentrancyGuard,\\n    Metadata,\\n    MerkleWhitelisting\\n{\\n    using SafeMath for uint256;\\n    using SafeMath for uint16;\\n    using Address for address;\\n\\n    /// @notice information stuct on each user than stakes LP tokens.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 nextHarvestUntil; // When can the user harvest again.\\n        mapping(IERC20 => uint256) rewardDebt; // Reward debt.\\n        mapping(IERC20 => uint256) rewardLockedUp; // Reward locked up.\\n        mapping(address => bool) whiteListedHandlers;\\n    }\\n\\n    // Info of each pool.\\n    struct RewardInfo {\\n        uint256 startTimestamp;\\n        uint256 endTimestamp;\\n        uint256 accRewardPerShare;\\n        uint256 lastRewardBlockTimestamp; // Last block timestamp that rewards distribution occurs.\\n        uint256 blockRewardPerSec;\\n        IERC20 rewardToken; // Address of reward token contract.\\n        uint256 expectedAPR; // if target APR is 20%, then expectedAPR =  ( 20 / 100 ) * 1e18. Percentage APR is scaled up by e18.\\n    }\\n\\n    /// @notice all the settings for this farm in one struct\\n    struct FarmInfo {\\n        uint256 numFarmers;\\n        uint256 harvestInterval; // Harvest interval in seconds\\n        IERC20 inputToken;\\n        uint16 withdrawalFeeBP; // Withdrawal fee in basis points\\n        uint256 endTimestamp;\\n    }\\n\\n    // Withdrawal Fee address\\n    address public feeAddress;\\n    // Max harvest interval: 14 days.\\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\\n    uint256 public constant SECONDS_IN_YEAR = 365 * 86400;\\n\\n    // Max withdrawal fee: 10%. This number is later divided by 10000 for calculations.\\n    uint16 public constant MAXIMUM_WITHDRAWAL_FEE_BP = 1000;\\n\\n    uint256 public totalInputTokensStaked;\\n\\n    // Total locked up rewards\\n    mapping(IERC20 => uint256) public totalLockedUpRewards;\\n\\n    FarmInfo public farmInfo;\\n\\n    mapping(address => bool) public activeRewardTokens;\\n\\n    /// @notice information on each user than stakes LP tokens\\n    mapping(address => UserInfo) public userInfo;\\n\\n    RewardInfo[] public rewardPool;\\n\\n    bool public initialized;\\n\\n    uint256 public maxAllowedDeposit;\\n\\n    event Deposit(address indexed user, uint256 amount);\\n    event Withdraw(address indexed user, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 amount);\\n    event RewardLockedUp(address indexed user, uint256 amountLockedUp);\\n    event RewardTokenAdded(IERC20 _rewardToken);\\n    event FeeAddressChanged(address _feeAddress);\\n    event RewardPoolUpdated(uint256 _rewardInfoIndex);\\n    event UserWhitelisted(address _primaryUser, address _whitelistedUser);\\n    event UserBlacklisted(address _primaryUser, address _blacklistedUser);\\n    event ExpectedAprUpdated(uint256 _expectedApr, uint256 _rewardPoolIndex);\\n    event RewardTokenURLUpdated(string _url, uint256 _rewardPoolIndex);\\n    event WithdrawalFeeChanged(uint16 _withdrawalFee);\\n    event HarvestIntervalChanged(uint256 _harvestInterval);\\n    event MaxAllowedDepositUpdated(uint256 _maxAllowedDeposit);\\n\\n    struct LocalVars {\\n        uint256 _amount;\\n        uint256 _startTimestamp;\\n        uint256 _endTimestamp;\\n        IERC20 _rewardToken;\\n    }\\n\\n    LocalVars private _localVars;\\n\\n    /**\\n     * @notice initialize the staking pool contract.\\n     * This is called only once and state is initialized.\\n     */\\n    function init(bytes memory extraData) external {\\n        require(initialized == false, \\\"Contract already initialized\\\");\\n\\n        // Decoding is done in two parts due to stack too deep issue.\\n        (\\n            _localVars._rewardToken,\\n            _localVars._amount,\\n            farmInfo.inputToken,\\n            _localVars._startTimestamp,\\n            _localVars._endTimestamp\\n        ) = abi.decode(extraData, (IERC20, uint256, IERC20, uint256, uint256));\\n\\n        uint256 expectedAPR;\\n        string memory _rewardTokenUrl;\\n        (\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            expectedAPR,\\n            farmInfo.harvestInterval,\\n            feeAddress,\\n            farmInfo.withdrawalFeeBP,\\n            owner\\n        ) = abi.decode(\\n            extraData,\\n            (\\n                IERC20,\\n                uint256,\\n                IERC20,\\n                uint256,\\n                uint256,\\n                uint256,\\n                uint256,\\n                address,\\n                uint16,\\n                address\\n            )\\n        );\\n        address routerAddress;\\n        string memory inputTokenUrl;\\n\\n        (\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            _rewardTokenUrl,\\n            inputTokenUrl,\\n            routerAddress,\\n            farmInfo.endTimestamp,\\n            root,\\n            maxAllowedDeposit\\n        ) = abi.decode(\\n            extraData,\\n            (\\n                IERC20,\\n                uint256,\\n                IERC20,\\n                uint256,\\n                uint256,\\n                uint256,\\n                uint256,\\n                address,\\n                uint16,\\n                address,\\n                string,\\n                string,\\n                address,\\n                uint256,\\n                bytes32,\\n                uint256\\n            )\\n        );\\n\\n        _initMetaOwner(owner);\\n        _updateMeta(address(farmInfo.inputToken), routerAddress, inputTokenUrl);\\n        _updateMeta(\\n            address(_localVars._rewardToken),\\n            address(0),\\n            _rewardTokenUrl\\n        );\\n\\n        require(\\n            farmInfo.withdrawalFeeBP <= MAXIMUM_WITHDRAWAL_FEE_BP,\\n            \\\"add: invalid withdrawal fee basis points\\\"\\n        );\\n        require(\\n            farmInfo.harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\\n            \\\"add: invalid harvest interval\\\"\\n        );\\n\\n        TransferHelper.safeTransferFrom(\\n            address(_localVars._rewardToken),\\n            msg.sender,\\n            address(this),\\n            _localVars._amount\\n        );\\n\\n        require(\\n            farmInfo.endTimestamp >= block.timestamp,\\n            \\\"End block timestamp must be greater than current timestamp\\\"\\n        );\\n        require(\\n            farmInfo.endTimestamp > _localVars._startTimestamp,\\n            \\\"Invalid start timestamp\\\"\\n        );\\n        require(\\n            farmInfo.endTimestamp >= _localVars._endTimestamp,\\n            \\\"Invalid end timestamp\\\"\\n        );\\n        require(\\n            _localVars._endTimestamp > _localVars._startTimestamp,\\n            \\\"Invalid start and end timestamp\\\"\\n        );\\n\\n        rewardPool.push(\\n            RewardInfo({\\n                startTimestamp: _localVars._startTimestamp,\\n                endTimestamp: _localVars._endTimestamp,\\n                rewardToken: _localVars._rewardToken,\\n                lastRewardBlockTimestamp: block.timestamp >\\n                    _localVars._startTimestamp\\n                    ? block.timestamp\\n                    : _localVars._startTimestamp,\\n                blockRewardPerSec: 0,\\n                accRewardPerShare: 0,\\n                expectedAPR: expectedAPR\\n            })\\n        );\\n\\n        activeRewardTokens[address(_localVars._rewardToken)] = true;\\n        initialized = true;\\n    }\\n\\n    /**\\n     * @notice Updates the merkle root which helps to update whitelisting of users.\\n     *         It can only be done by owner.\\n     * @param _root New root\\n     */\\n    function updateMerkleRoot(bytes32 _root) external onlyOwner {\\n        root = _root;\\n    }\\n\\n    function updateMaxAllowedDeposit(uint256 _maxAllowedDeposit)\\n        external\\n        onlyOwner\\n    {\\n        maxAllowedDeposit = _maxAllowedDeposit;\\n        emit MaxAllowedDepositUpdated(_maxAllowedDeposit);\\n    }\\n\\n    function updateWithdrawalFee(uint16 _withdrawalFee, bool _massUpdate)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            _withdrawalFee <= MAXIMUM_WITHDRAWAL_FEE_BP,\\n            \\\"invalid withdrawal fee basis points\\\"\\n        );\\n\\n        if (_massUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        farmInfo.withdrawalFeeBP = _withdrawalFee;\\n        emit WithdrawalFeeChanged(_withdrawalFee);\\n    }\\n\\n    function updateHarvestInterval(uint256 _harvestInterval, bool _massUpdate)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            _harvestInterval <= MAXIMUM_HARVEST_INTERVAL,\\n            \\\"invalid harvest intervals\\\"\\n        );\\n\\n        if (_massUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        farmInfo.harvestInterval = _harvestInterval;\\n        emit HarvestIntervalChanged(_harvestInterval);\\n    }\\n\\n    function rescueFunds(IERC20 _token, address _recipient) external onlyOwner {\\n        TransferHelper.safeTransfer(\\n            address(_token),\\n            _recipient,\\n            _token.balanceOf(address(this))\\n        );\\n    }\\n\\n    function addRewardToken(\\n        uint256 _startTimestamp,\\n        uint256 _endTimestamp,\\n        IERC20 _rewardToken, // Address of reward token contract.\\n        uint256 _lastRewardTimestamp,\\n        uint256 _amount,\\n        string memory _tokenUrl,\\n        bool _massUpdate,\\n        uint256 _expectedAPR\\n    ) external onlyOwner nonReentrant {\\n        require(\\n            farmInfo.endTimestamp > _startTimestamp,\\n            \\\"Invalid start end timestamp\\\"\\n        );\\n        require(\\n            farmInfo.endTimestamp >= _endTimestamp,\\n            \\\"Invalid end timestamp\\\"\\n        );\\n        require(_endTimestamp > _startTimestamp, \\\"Invalid end timestamp\\\");\\n        require(address(_rewardToken) != address(0), \\\"Invalid reward token\\\");\\n        require(\\n            activeRewardTokens[address(_rewardToken)] == false,\\n            \\\"Reward Token already added\\\"\\n        );\\n\\n        require(\\n            _lastRewardTimestamp >= block.timestamp,\\n            \\\"Last RewardBlock must be greater than currentBlock\\\"\\n        );\\n\\n        if (_massUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        rewardPool.push(\\n            RewardInfo({\\n                startTimestamp: _startTimestamp,\\n                endTimestamp: _endTimestamp,\\n                rewardToken: _rewardToken,\\n                lastRewardBlockTimestamp: _lastRewardTimestamp,\\n                blockRewardPerSec: 0,\\n                accRewardPerShare: 0,\\n                expectedAPR: _expectedAPR\\n            })\\n        );\\n\\n        activeRewardTokens[address(_rewardToken)] = true;\\n\\n        TransferHelper.safeTransferFrom(\\n            address(_rewardToken),\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n\\n        _updateMeta(address(_rewardToken), address(0), _tokenUrl);\\n        _updateRewardPerSecond();\\n        emit RewardTokenAdded(_rewardToken);\\n    }\\n\\n    function deposit(uint256 _amount, bytes32[] memory _proof)\\n        external\\n        nonReentrant\\n    {\\n        _deposit(_amount, msg.sender, _calculateLeaf(msg.sender), _proof);\\n    }\\n\\n    function depositFor(\\n        uint256 _amount,\\n        address _user,\\n        bytes32[] memory _proof\\n    ) external nonReentrant {\\n        _deposit(_amount, _user, _calculateLeaf(_user), _proof);\\n    }\\n\\n    /**\\n     * @notice withdraw LP token function for msg.sender\\n     * @param _amount the total withdrawable amount\\n     */\\n    function withdraw(uint256 _amount) external nonReentrant {\\n        _withdraw(_amount, msg.sender, msg.sender);\\n    }\\n\\n    function withdrawFor(uint256 _amount, address _user) external nonReentrant {\\n        UserInfo storage user = userInfo[_user];\\n        require(\\n            user.whiteListedHandlers[msg.sender],\\n            \\\"Handler not whitelisted to withdraw\\\"\\n        );\\n        _withdraw(_amount, _user, msg.sender);\\n    }\\n\\n    /**\\n     * @notice emergency function to withdraw LP tokens and forego harvest rewards. Important to protect users LP tokens\\n     */\\n    function emergencyWithdraw() external nonReentrant {\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        if (user.amount > 0) {\\n            farmInfo.numFarmers--;\\n        }\\n        totalInputTokensStaked = totalInputTokensStaked.sub(user.amount);\\n        uint256 amount = user.amount;\\n        user.amount = 0;\\n\\n        uint256 totalRewardPools = rewardPool.length;\\n        for (uint256 i = 0; i < totalRewardPools; i++) {\\n            user.rewardDebt[rewardPool[i].rewardToken] = 0;\\n            totalLockedUpRewards[\\n                rewardPool[i].rewardToken\\n            ] = totalLockedUpRewards[rewardPool[i].rewardToken].sub(\\n                user.rewardLockedUp[rewardPool[i].rewardToken]\\n            );\\n            user.rewardLockedUp[rewardPool[i].rewardToken] = 0;\\n        }\\n        _updateRewardPerSecond();\\n        TransferHelper.safeTransfer(\\n            address(farmInfo.inputToken),\\n            address(msg.sender),\\n            amount\\n        );\\n        emit EmergencyWithdraw(msg.sender, amount);\\n    }\\n\\n    function whitelistHandler(address _handler) external {\\n        UserInfo storage user = userInfo[msg.sender];\\n        user.whiteListedHandlers[_handler] = true;\\n        emit UserWhitelisted(msg.sender, _handler);\\n    }\\n\\n    function removeWhitelistedHandler(address _handler) external {\\n        UserInfo storage user = userInfo[msg.sender];\\n        user.whiteListedHandlers[_handler] = false;\\n        emit UserBlacklisted(msg.sender, _handler);\\n    }\\n\\n    // Update fee address by the previous fee address.\\n    function setFeeAddress(address _feeAddress) external onlyOwner {\\n        require(_feeAddress != address(0), \\\"setFeeAddress: invalid address\\\");\\n        feeAddress = _feeAddress;\\n        emit FeeAddressChanged(feeAddress);\\n    }\\n\\n    function updateExpectedAPR(uint256 _expectedAPR, uint256 _rewardTokenIndex)\\n        external\\n        onlyOwner\\n    {\\n        massUpdatePools();\\n        RewardInfo storage reward = rewardPool[_rewardTokenIndex];\\n        reward.expectedAPR = _expectedAPR;\\n        _updateRewardPerSecond();\\n        emit ExpectedAprUpdated(_expectedAPR, _rewardTokenIndex);\\n    }\\n\\n    function transferRewardToken(uint256 _rewardTokenIndex, uint256 _amount)\\n        external\\n        onlyOwner\\n    {\\n        RewardInfo storage rewardInfo = rewardPool[_rewardTokenIndex];\\n        require(\\n            rewardInfo.rewardToken.balanceOf(address(this)) >= _amount,\\n            \\\"Insufficient reward token balance\\\"\\n        );\\n\\n        TransferHelper.safeTransfer(\\n            address(rewardInfo.rewardToken),\\n            msg.sender,\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @notice function to see accumulated balance of reward token for specified user\\n     * @param _user the user for whom unclaimed tokens will be shown\\n     * @param _rewardInfoIndex reward token's index.\\n     * @return total amount of withdrawable reward tokens\\n     */\\n    function pendingReward(address _user, uint256 _rewardInfoIndex)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        UserInfo storage user = userInfo[_user];\\n        RewardInfo memory rewardInfo = rewardPool[_rewardInfoIndex];\\n        uint256 accRewardPerShare = rewardInfo.accRewardPerShare;\\n        uint256 lpSupply = totalInputTokensStaked;\\n\\n        if (\\n            block.timestamp > rewardInfo.lastRewardBlockTimestamp &&\\n            lpSupply != 0\\n        ) {\\n            uint256 multiplier = getMultiplier(\\n                rewardInfo.lastRewardBlockTimestamp,\\n                _rewardInfoIndex,\\n                block.timestamp\\n            );\\n            uint256 tokenReward = multiplier.mul(rewardInfo.blockRewardPerSec);\\n            accRewardPerShare = accRewardPerShare.add(\\n                tokenReward.div(lpSupply)\\n            );\\n        }\\n\\n        uint256 pending = user.amount.mul(accRewardPerShare).div(1e18).sub(\\n            user.rewardDebt[rewardInfo.rewardToken]\\n        );\\n        return pending.add(user.rewardLockedUp[rewardInfo.rewardToken]);\\n    }\\n\\n    function isUserWhiteListed(address _owner, address _user)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        UserInfo storage user = userInfo[_owner];\\n        return user.whiteListedHandlers[_user];\\n    }\\n\\n    // View function to see if user harvest until time.\\n    function getHarvestUntil(address _user) external view returns (uint256) {\\n        UserInfo storage user = userInfo[_user];\\n        return user.nextHarvestUntil;\\n    }\\n\\n    /**\\n     * @notice updates pool information to be up to date to the current block timestamp\\n     */\\n    function updatePool(uint256 _rewardInfoIndex) public {\\n        RewardInfo storage rewardInfo = rewardPool[_rewardInfoIndex];\\n        if (block.timestamp <= rewardInfo.lastRewardBlockTimestamp) {\\n            return;\\n        }\\n        uint256 lpSupply = totalInputTokensStaked;\\n\\n        if (lpSupply == 0) {\\n            rewardInfo.lastRewardBlockTimestamp = block.timestamp;\\n            return;\\n        }\\n        uint256 multiplier = getMultiplier(\\n            rewardInfo.lastRewardBlockTimestamp,\\n            _rewardInfoIndex,\\n            block.timestamp\\n        );\\n        uint256 tokenReward = multiplier.mul(rewardInfo.blockRewardPerSec);\\n        rewardInfo.accRewardPerShare = rewardInfo.accRewardPerShare.add(\\n            tokenReward.div(lpSupply)\\n        );\\n        rewardInfo.lastRewardBlockTimestamp = block.timestamp <\\n            rewardInfo.endTimestamp\\n            ? block.timestamp\\n            : rewardInfo.endTimestamp;\\n\\n        emit RewardPoolUpdated(_rewardInfoIndex);\\n    }\\n\\n    function massUpdatePools() public {\\n        uint256 totalRewardPool = rewardPool.length;\\n        for (uint256 i = 0; i < totalRewardPool; i++) {\\n            updatePool(i);\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the reward multiplier over the given _fromTimestamp until _toTimestamp\\n     * @param _fromTimestamp the start of the period to measure rewards for\\n     * @param _rewardInfoIndex RewardPool Id number\\n     * @param _toTimestamp the end of the period to measure rewards for\\n     * @return The weighted multiplier for the given period\\n     */\\n    function getMultiplier(\\n        uint256 _fromTimestamp,\\n        uint256 _rewardInfoIndex,\\n        uint256 _toTimestamp\\n    ) public view returns (uint256) {\\n        RewardInfo memory rewardInfo = rewardPool[_rewardInfoIndex];\\n        uint256 _from = _fromTimestamp >= rewardInfo.startTimestamp\\n            ? _fromTimestamp\\n            : rewardInfo.startTimestamp;\\n        uint256 to = rewardInfo.endTimestamp > _toTimestamp\\n            ? _toTimestamp\\n            : rewardInfo.endTimestamp;\\n        if (_from > to) {\\n            return 0;\\n        }\\n\\n        return to.sub(_from, \\\"from getMultiplier\\\");\\n    }\\n\\n    // View function to see if user can harvest tokens.\\n    function canHarvest(address _user) public view returns (bool) {\\n        UserInfo storage user = userInfo[_user];\\n        return ((block.timestamp >= user.nextHarvestUntil));\\n    }\\n\\n    function _updateRewardPerSecond() internal {\\n        /* \\n            APR = ( SECONDS_IN_YEAR * RewardPerSecond * 100 ) / Total deposited\\n            RewardPerSecond = ( APR * Total deposited ) / ( SECONDS_IN_YEAR )\\n        */\\n        uint256 totalRewardPools = rewardPool.length;\\n        uint256 inputTokenDecimals = farmInfo.inputToken.decimals();\\n\\n        for (uint256 i = 0; i < totalRewardPools; i++) {\\n            RewardInfo storage rewardInfo = rewardPool[i];\\n            uint256 rewardTokenDecimals = rewardInfo.rewardToken.decimals();\\n            uint256 expectedAPR = rewardInfo.expectedAPR;\\n            uint256 effectiveRewardPerSecond = (\\n                expectedAPR\\n                    .mul(totalInputTokensStaked)\\n                    .mul(10**rewardTokenDecimals)\\n                    .mul(1e18)\\n            ).div((10**inputTokenDecimals).mul(SECONDS_IN_YEAR * 1e18));\\n            rewardInfo.blockRewardPerSec = effectiveRewardPerSecond;\\n        }\\n    }\\n\\n    function _deposit(\\n        uint256 _amount,\\n        address _user,\\n        bytes32 _leaf,\\n        bytes32[] memory _proof\\n    ) internal {\\n        // merkle verification of whether account is whitelisted or not.\\n        require(_verify(_leaf, _proof), \\\"Account not whitelisted\\\");\\n        require(\\n            totalInputTokensStaked.add(_amount) <= maxAllowedDeposit,\\n            \\\"Max allowed deposit exceeded\\\"\\n        );\\n        UserInfo storage user = userInfo[_user];\\n        payOrLockupPendingReward(_user, _user);\\n        if (user.amount == 0 && _amount > 0) {\\n            farmInfo.numFarmers++;\\n        }\\n        if (_amount > 0) {\\n            TransferHelper.safeTransferFrom(\\n                address(farmInfo.inputToken),\\n                address(msg.sender),\\n                address(this),\\n                _amount\\n            );\\n            user.amount = user.amount.add(_amount);\\n        }\\n        totalInputTokensStaked = totalInputTokensStaked.add(_amount);\\n        updateRewardDebt(_user);\\n        _updateRewardPerSecond();\\n        emit Deposit(_user, _amount);\\n    }\\n\\n    function _withdraw(\\n        uint256 _amount,\\n        address _user,\\n        address _withdrawer\\n    ) internal {\\n        UserInfo storage user = userInfo[_user];\\n        require(user.amount >= _amount, \\\"INSUFFICIENT\\\");\\n        payOrLockupPendingReward(_user, _withdrawer);\\n        if (_amount > 0) {\\n            if (user.amount == _amount) {\\n                farmInfo.numFarmers--;\\n            }\\n            user.amount = user.amount.sub(_amount);\\n            if (farmInfo.withdrawalFeeBP > 0) {\\n                uint256 withdrawalFee = _amount\\n                    .mul(farmInfo.withdrawalFeeBP)\\n                    .div(10000);\\n                TransferHelper.safeTransfer(\\n                    address(farmInfo.inputToken),\\n                    feeAddress,\\n                    withdrawalFee\\n                );\\n                TransferHelper.safeTransfer(\\n                    address(farmInfo.inputToken),\\n                    address(_withdrawer),\\n                    _amount.sub(withdrawalFee)\\n                );\\n            } else {\\n                TransferHelper.safeTransfer(\\n                    address(farmInfo.inputToken),\\n                    address(_withdrawer),\\n                    _amount\\n                );\\n            }\\n        }\\n        totalInputTokensStaked = totalInputTokensStaked.sub(_amount);\\n        updateRewardDebt(_user);\\n        _updateRewardPerSecond();\\n        emit Withdraw(_user, _amount);\\n    }\\n\\n    function payOrLockupPendingReward(address _user, address _withdrawer)\\n        internal\\n    {\\n        UserInfo storage user = userInfo[_user];\\n        if (user.nextHarvestUntil == 0) {\\n            user.nextHarvestUntil = block.timestamp.add(\\n                farmInfo.harvestInterval\\n            );\\n        }\\n\\n        bool canUserHarvest = canHarvest(_user);\\n\\n        uint256 totalRewardPools = rewardPool.length;\\n        for (uint256 i = 0; i < totalRewardPools; i++) {\\n            RewardInfo storage rewardInfo = rewardPool[i];\\n\\n            updatePool(i);\\n\\n            uint256 userRewardDebt = user.rewardDebt[rewardInfo.rewardToken];\\n            uint256 userRewardLockedUp = user.rewardLockedUp[\\n                rewardInfo.rewardToken\\n            ];\\n            uint256 pending = user\\n                .amount\\n                .mul(rewardInfo.accRewardPerShare)\\n                .div(1e18)\\n                .sub(userRewardDebt);\\n\\n            if (canUserHarvest) {\\n                if (pending > 0 || userRewardLockedUp > 0) {\\n                    uint256 totalRewards = pending.add(userRewardLockedUp);\\n                    // reset lockup\\n                    totalLockedUpRewards[\\n                        rewardInfo.rewardToken\\n                    ] = totalLockedUpRewards[rewardInfo.rewardToken].sub(\\n                        userRewardLockedUp\\n                    );\\n                    user.rewardLockedUp[rewardInfo.rewardToken] = 0;\\n                    user.nextHarvestUntil = block.timestamp.add(\\n                        farmInfo.harvestInterval\\n                    );\\n                    // send rewards\\n                    _safeRewardTransfer(\\n                        _withdrawer,\\n                        totalRewards,\\n                        rewardInfo.rewardToken\\n                    );\\n                }\\n            } else if (pending > 0) {\\n                user.rewardLockedUp[rewardInfo.rewardToken] = user\\n                    .rewardLockedUp[rewardInfo.rewardToken]\\n                    .add(pending);\\n                totalLockedUpRewards[\\n                    rewardInfo.rewardToken\\n                ] = totalLockedUpRewards[rewardInfo.rewardToken].add(pending);\\n                emit RewardLockedUp(_user, pending);\\n            }\\n        }\\n    }\\n\\n    function updateRewardDebt(address _user) internal {\\n        UserInfo storage user = userInfo[_user];\\n        uint256 totalRewardPools = rewardPool.length;\\n        for (uint256 i = 0; i < totalRewardPools; i++) {\\n            RewardInfo storage rewardInfo = rewardPool[i];\\n\\n            user.rewardDebt[rewardInfo.rewardToken] = user\\n                .amount\\n                .mul(rewardInfo.accRewardPerShare)\\n                .div(1e18);\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe reward transfer function, just in case a rounding error causes pool to not have enough reward tokens\\n     * @param _amount the total amount of tokens to transfer\\n     * @param _rewardToken token address for transferring tokens\\n     */\\n    function _safeRewardTransfer(\\n        address _to,\\n        uint256 _amount,\\n        IERC20 _rewardToken\\n    ) private {\\n        require(\\n            _rewardToken.balanceOf(address(this)) >= _amount,\\n            \\\"Insufficient reward token balance\\\"\\n        );\\n        TransferHelper.safeTransfer(address(_rewardToken), _to, _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"./library/Ownable.sol\\\";\\n\\ncontract Metadata is Ownable, Initializable {\\n    function _initMetaOwner(address _owner) internal initializer {\\n        owner = _owner;\\n    }\\n\\n    struct TokenMetadata {\\n        address routerAddress;\\n        string imageUrl;\\n        bool isAdded;\\n    }\\n\\n    mapping(address => TokenMetadata) public tokenMeta;\\n\\n    event URLUpdated(address _tokenAddress, string _tokenUrl);\\n\\n    function updateMeta(\\n        address _tokenAddress,\\n        address _routerAddress,\\n        string memory _imageUrl\\n    ) external onlyOwner {\\n        _updateMeta(_tokenAddress, _routerAddress, _imageUrl);\\n    }\\n\\n    function _updateMeta(\\n        address _tokenAddress,\\n        address _routerAddress,\\n        string memory _imageUrl\\n    ) internal {\\n        if (_tokenAddress != address(0)) {\\n            tokenMeta[_tokenAddress] = TokenMetadata({\\n                routerAddress: _routerAddress,\\n                imageUrl: _imageUrl,\\n                isAdded: true\\n            });\\n        }\\n    }\\n\\n    function updateMetaURL(address _tokenAddress, string memory _imageUrl)\\n        external\\n        onlyOwner\\n    {\\n        _updateMetaURL(_tokenAddress, _imageUrl);\\n    }\\n\\n    function _updateMetaURL(address _tokenAddress, string memory _tokenUrl)\\n        internal\\n    {\\n        TokenMetadata storage meta = tokenMeta[_tokenAddress];\\n        require(meta.isAdded, \\\"Invalid token address\\\");\\n\\n        meta.imageUrl = _tokenUrl;\\n\\n        emit URLUpdated(_tokenAddress, _tokenUrl);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/library/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\n// helper methods for interacting with ERC20 tokens that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH transfer failed');\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/library/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address public owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(owner, address(0));\\n        owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Interface/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    \\n \\n}\"\r\n    },\r\n    \"contracts/stakingpool/stakingPoolFixedAPR/MerkleWhitelisting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// File contracts/MerkleWhitelisting.sol\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/cryptography/MerkleProof.sol\\\";\\n\\ncontract MerkleWhitelisting {\\n    // Merkle root which consists of whitelisted users.\\n    bytes32 public root;\\n\\n    /**\\n     * @notice Merkle verification is done.\\n     *\\n     * @param _leaf Leaf in the merkle tree.\\n     * @param _proof Merkle Proof which includes `_leaf`.\\n     */\\n    function _verify(bytes32 _leaf, bytes32[] memory _proof)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return MerkleProof.verify(_proof, root, _leaf);\\n    }\\n\\n    /**\\n     * @notice Does hashing of the account.\\n     *\\n     * @param _account Address of user.\\n     */\\n    function _calculateLeaf(address _account) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_account));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle trees (hash trees),\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_expectedApr\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewardPoolIndex\",\"type\":\"uint256\"}],\"name\":\"ExpectedAprUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"FeeAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_harvestInterval\",\"type\":\"uint256\"}],\"name\":\"HarvestIntervalChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxAllowedDeposit\",\"type\":\"uint256\"}],\"name\":\"MaxAllowedDepositUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLockedUp\",\"type\":\"uint256\"}],\"name\":\"RewardLockedUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewardInfoIndex\",\"type\":\"uint256\"}],\"name\":\"RewardPoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"RewardTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewardPoolIndex\",\"type\":\"uint256\"}],\"name\":\"RewardTokenURLUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_tokenUrl\",\"type\":\"string\"}],\"name\":\"URLUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_primaryUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_blacklistedUser\",\"type\":\"address\"}],\"name\":\"UserBlacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_primaryUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_whitelistedUser\",\"type\":\"address\"}],\"name\":\"UserWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_withdrawalFee\",\"type\":\"uint16\"}],\"name\":\"WithdrawalFeeChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAXIMUM_HARVEST_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_WITHDRAWAL_FEE_BP\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_IN_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"activeRewardTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenUrl\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_massUpdate\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_expectedAPR\",\"type\":\"uint256\"}],\"name\":\"addRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canHarvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numFarmers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"withdrawalFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getHarvestUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardInfoIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toTimestamp\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isUserWhiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAllowedDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardInfoIndex\",\"type\":\"uint256\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_handler\",\"type\":\"address\"}],\"name\":\"removeWhitelistedHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"rescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockRewardPerSec\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expectedAPR\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenMeta\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isAdded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInputTokensStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalLockedUpRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardTokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expectedAPR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardTokenIndex\",\"type\":\"uint256\"}],\"name\":\"updateExpectedAPR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_massUpdate\",\"type\":\"bool\"}],\"name\":\"updateHarvestInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxAllowedDeposit\",\"type\":\"uint256\"}],\"name\":\"updateMaxAllowedDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"updateMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_imageUrl\",\"type\":\"string\"}],\"name\":\"updateMeta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_imageUrl\",\"type\":\"string\"}],\"name\":\"updateMetaURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardInfoIndex\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_withdrawalFee\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_massUpdate\",\"type\":\"bool\"}],\"name\":\"updateWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextHarvestUntil\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_handler\",\"type\":\"address\"}],\"name\":\"whitelistHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"withdrawFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingPoolUpdatableFixedAPRWhitelisting", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}