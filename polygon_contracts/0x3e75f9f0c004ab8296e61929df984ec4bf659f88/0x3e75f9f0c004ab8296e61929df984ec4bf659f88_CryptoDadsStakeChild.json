{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CryptoDadsStakeChild.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/metatx/ERC2771Context.sol\\\";\\nimport \\\"./interfaces/IERC20Rewards.sol\\\";\\nimport \\\"./tunnel/FxBaseChildTunnel.sol\\\";\\n\\n/**\\n * Cross-bridge staking contract via fx-portal\\n * CHILD CONTRACT\\n *\\n * Ethereum: source chain\\n * Polygon: destination chain\\n *\\n * Supports gasless claims thru ERC2771\\n *\\n * @title CryptoDadsStakeChild\\n * @author @ScottMitchell18\\n */\\ncontract CryptoDadsStakeChild is FxBaseChildTunnel, ERC2771Context, Ownable {\\n    uint256 public yieldPeriod = 1 days;\\n    IERC20Rewards public rewardsToken;\\n\\n    // 25 tokens for first stake bonus\\n    uint256 public firstStakeBonus = 25000000000000000000;\\n\\n    struct Reward {\\n        uint256 amount;\\n        uint256 nextTier;\\n    }\\n\\n    struct Stake {\\n        uint256 amount;\\n        uint256 momAmount;\\n        uint120 claimedAt;\\n        uint256[] dadIds;\\n        uint256[] momIds;\\n        bool hasClaimed;\\n    }\\n\\n    /// @dev A linked list of reward tiers based on holdings\\n    mapping(uint256 => Reward) public rewards;\\n    mapping(uint256 => Reward) public momRewards;\\n\\n    /// @dev Users' stakes mapped from their address\\n    mapping(address => Stake) public stakes;\\n\\n    constructor(\\n        address _fxChild,\\n        address _tokenAddress,\\n        address _trustedForwarder\\n    ) FxBaseChildTunnel(_fxChild) ERC2771Context(_trustedForwarder) {\\n        rewardsToken = IERC20Rewards(_tokenAddress);\\n\\n        uint256[] memory amounts = new uint256[](5);\\n        uint256[] memory newRewards = new uint256[](5);\\n\\n        /*\\n            Dads\\n            1-2: 5 per day per token\\n            3-5: 6 per day per token\\n            6-10: 7 per day per token\\n            10-25: 8 per day per token\\n            25+: 10 per day per token\\n        */\\n\\n        // 1-2: 5 tokens per day\\n        amounts[0] = 1;\\n        newRewards[0] = 5000000000000000000;\\n\\n        // 3-5: 6 tokens per day\\n        amounts[1] = 3;\\n        newRewards[1] = 6000000000000000000;\\n\\n        // 6-10: 7 tokens per day\\n        amounts[2] = 6;\\n        newRewards[2] = 7000000000000000000;\\n\\n        // 10-25: 8 tokens per day\\n        amounts[3] = 10;\\n        newRewards[3] = 8000000000000000000;\\n\\n        // 25+: 10 tokens per day\\n        amounts[4] = 25;\\n        newRewards[4] = 10000000000000000000;\\n\\n        setRewards(amounts, newRewards, false);\\n\\n        /*\\n            Moms\\n            1-2: 2 per day per token\\n            3-5: 3 per day per token\\n            6-10: 4 per day per token\\n            10-25: 5 per day per token\\n            25+: 7 per day per token\\n        */\\n        uint256[] memory momAmounts = new uint256[](5);\\n        uint256[] memory newMomRewards = new uint256[](5);\\n\\n        // 1-2: 2 tokens per day\\n        momAmounts[0] = 1;\\n        newMomRewards[0] = 2000000000000000000;\\n\\n        // 3-5: 3 tokens per day\\n        momAmounts[1] = 3;\\n        newMomRewards[1] = 3000000000000000000;\\n\\n        // 6-10: 4 tokens per day\\n        momAmounts[2] = 6;\\n        newMomRewards[2] = 4000000000000000000;\\n\\n        // 10-25: 5 tokens per day\\n        momAmounts[3] = 10;\\n        newMomRewards[3] = 5000000000000000000;\\n\\n        // 25+: 7 tokens per day\\n        momAmounts[4] = 25;\\n        newMomRewards[4] = 7000000000000000000;\\n\\n        setRewards(momAmounts, newMomRewards, true);\\n    }\\n\\n    /**\\n     * Sets/updates the address for the root tunnel\\n     * @param _fxRootTunnel - the fxRootTunnel address\\n     */\\n    function setFxRootTunnel(address _fxRootTunnel)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        fxRootTunnel = _fxRootTunnel;\\n    }\\n\\n    /**\\n     * Resets the reward calculation schema.\\n     * @param amounts - a list of held amounts in increasing order.\\n     * @param newRewards - a parallel list to amounts containing the per period for the respective amount.\\n     * @param isMom - If this is rewards for moms or not\\n     */\\n    function setRewards(\\n        uint256[] memory amounts,\\n        uint256[] memory newRewards,\\n        bool isMom\\n    ) public onlyOwner {\\n        require(amounts.length == newRewards.length, \\\"Length mismatch\\\");\\n        require(amounts.length > 0, \\\"Too few rewards\\\");\\n        require(amounts[0] == 1, \\\"Must begin with one\\\");\\n\\n        uint256 lastAmount;\\n        for (uint256 i; i < amounts.length; i++) {\\n            require(amounts[i] > lastAmount, \\\"Not in order\\\");\\n            lastAmount = amounts[i];\\n\\n            Reward memory currentReward;\\n            currentReward.amount = newRewards[i];\\n            if (amounts.length > i + 1) currentReward.nextTier = amounts[i + 1];\\n\\n            if (isMom) {\\n                momRewards[amounts[i]] = currentReward;\\n            } else {\\n                rewards[amounts[i]] = currentReward;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Updates the bonus for claiming for the first time.\\n     * @param _bonus - the new bonus in wei\\n     */\\n    function setFirstStakeBonus(uint256 _bonus) external onlyOwner {\\n        firstStakeBonus = _bonus;\\n    }\\n\\n    /**\\n     * Claims the pending reward for the transaction sender.\\n     */\\n    function claimReward() external {\\n        _updateBalance(_msgSender());\\n    }\\n\\n    /**\\n     * Gets the pending reward for the provided user.\\n     * @param user - the user whose reward is being sought.\\n     */\\n    function getReward(address user) external view returns (uint256) {\\n        return _currentReward(stakes[user]);\\n    }\\n\\n    /**\\n     * Tricks collab.land and other ERC721 balance checkers into believing that the user has a balance.\\n     * @dev a duplicate stakes(user).amount.\\n     * @param user - the user to get the balance of.\\n     */\\n    function balanceOf(address user) external view returns (uint256) {\\n        return stakes[user].amount + stakes[user].momAmount;\\n    }\\n\\n    /**\\n     * Dumps the rewards currently programmed in per tier as two parallel arrays\\n     * defining (amount, yield) pairs.\\n     *\\n     * @return (uint256[] holdingAmounts, uint256[] rewardAmounts)\\n     * @param isMom - If this is rewards for moms or not\\n     */\\n    function dumpRewards(bool isMom)\\n        external\\n        view\\n        returns (uint256[] memory, uint256[] memory)\\n    {\\n        uint256 numTiers = _countRewardsTiers(isMom);\\n\\n        uint256[] memory holdingAmounts = new uint256[](numTiers);\\n        uint256[] memory rewardAmounts = new uint256[](numTiers);\\n\\n        uint256 nextTier = 1;\\n        uint256 index = 0;\\n\\n        while (nextTier != 0) {\\n            holdingAmounts[index] = nextTier;\\n\\n            if (isMom) {\\n                rewardAmounts[index] = momRewards[nextTier].amount;\\n                nextTier = momRewards[nextTier].nextTier;\\n            } else {\\n                rewardAmounts[index] = rewards[nextTier].amount;\\n                nextTier = rewards[nextTier].nextTier;\\n            }\\n\\n            index++;\\n        }\\n\\n        return (holdingAmounts, rewardAmounts);\\n    }\\n\\n    /*\\n     * @dev Counts the number of rewards tiers in the linked list starting at 1.\\n     * @param isMom for mom contract or not\\n     */\\n    function _countRewardsTiers(bool isMom) internal view returns (uint256) {\\n        uint256 count = 0;\\n        uint256 nextTier = 1;\\n\\n        while (nextTier != 0) {\\n            count++;\\n            if (isMom) {\\n                nextTier = momRewards[nextTier].nextTier;\\n            } else {\\n                nextTier = rewards[nextTier].nextTier;\\n            }\\n        }\\n\\n        return count;\\n    }\\n\\n    /**\\n     * @notice Process message received from FxChild\\n     * @param sender root message sender\\n     * @param message bytes message that was sent from Root Tunnel\\n     */\\n    function _processMessageFromRoot(\\n        uint256,\\n        address sender,\\n        bytes memory message\\n    ) internal override validateSender(sender) {\\n        (\\n            address from,\\n            uint256[] memory dadIds,\\n            uint256[] memory momIds,\\n            bool isInbound\\n        ) = abi.decode(message, (address, uint256[], uint256[], bool));\\n        if (isInbound) _stake(from, dadIds, momIds);\\n        else _unstake(from, dadIds, momIds);\\n    }\\n\\n    /**\\n     * @notice Process message manually for testing\\n     * @param sender root message sender\\n     * @param message bytes message that was sent from Root Tunnel\\n     */\\n    function processMessage(\\n        uint256,\\n        address sender,\\n        bytes memory message\\n    ) external onlyOwner {\\n        (\\n            address from,\\n            uint256[] memory dadIds,\\n            uint256[] memory momIds,\\n            bool isInbound\\n        ) = abi.decode(message, (address, uint256[], uint256[], bool));\\n        if (isInbound) _stake(from, dadIds, momIds);\\n        else _unstake(from, dadIds, momIds);\\n    }\\n\\n    /**\\n     * Updates the yield period\\n     */\\n    function setYield(uint256 _yieldPeriod) external onlyOwner {\\n        yieldPeriod = _yieldPeriod;\\n    }\\n\\n    /**\\n     * Updates the stake to represent new tokens, starts over the current period.\\n     */\\n    function _stake(\\n        address user,\\n        uint256[] memory dadIds,\\n        uint256[] memory momIds\\n    ) internal {\\n        _updateBalance(user);\\n\\n        stakes[user].amount += dadIds.length;\\n        stakes[user].momAmount += momIds.length;\\n\\n        // Dads\\n        for (uint256 i = 0; i < dadIds.length; i++) {\\n            stakes[user].dadIds.push(dadIds[i]);\\n        }\\n\\n        // Moms\\n        for (uint256 i = 0; i < momIds.length; i++) {\\n            stakes[user].momIds.push(momIds[i]);\\n        }\\n    }\\n\\n    function findDad(address user, uint256 value) internal returns (uint256) {\\n        uint256 i = 0;\\n        while (stakes[user].dadIds[i] != value) {\\n            i++;\\n        }\\n        return i;\\n    }\\n\\n    function removeDadByIndex(address user, uint256 i) internal {\\n        while (i < stakes[user].dadIds.length - 1) {\\n            stakes[user].dadIds[i] = stakes[user].dadIds[i + 1];\\n            i++;\\n        }\\n    }\\n\\n    function removeDadByValue(address user, uint256 value) internal {\\n        uint256 i = findDad(user, value);\\n        removeDadByIndex(user, i);\\n    }\\n\\n    function findMom(address user, uint256 value) internal returns (uint256) {\\n        uint256 i = 0;\\n        while (stakes[user].momIds[i] != value) {\\n            i++;\\n        }\\n        return i;\\n    }\\n\\n    function removeMomByIndex(address user, uint256 i) internal {\\n        while (i < stakes[user].momIds.length - 1) {\\n            stakes[user].momIds[i] = stakes[user].momIds[i + 1];\\n            i++;\\n        }\\n    }\\n\\n    function removeMomByValue(address user, uint256 value) internal {\\n        uint256 i = findMom(user, value);\\n        removeMomByIndex(user, i);\\n    }\\n\\n    /**\\n     * Updates the stake to represent new tokens, starts over the current period.\\n     */\\n    function _unstake(\\n        address user,\\n        uint256[] memory dadIds,\\n        uint256[] memory momIds\\n    ) internal {\\n        _updateBalance(user);\\n\\n        stakes[user].amount -= dadIds.length;\\n        stakes[user].momAmount -= momIds.length;\\n\\n        // Dads\\n        for (uint256 i = 0; i < dadIds.length; i++) {\\n            removeDadByValue(user, dadIds[i]);\\n        }\\n\\n        // Moms\\n        for (uint256 i = 0; i < momIds.length; i++) {\\n            removeMomByValue(user, momIds[i]);\\n        }\\n    }\\n\\n    function getStakedDads(address _owner)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return stakes[_owner].dadIds;\\n    }\\n\\n    function getStakedMoms(address _owner)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return stakes[_owner].momIds;\\n    }\\n\\n    /**\\n     * To be called on stake/unstake, evaluates the user's current balance\\n     * and resets any timers.\\n     * @param user - the user to update for.\\n     */\\n    function _updateBalance(address user) internal {\\n        Stake storage stake = stakes[user];\\n\\n        uint256 reward = _currentReward(stake);\\n        stake.claimedAt = uint120(block.timestamp);\\n\\n        if (reward > 0) {\\n            if (!stake.hasClaimed) stake.hasClaimed = true;\\n            rewardsToken.mint(reward, user);\\n        }\\n    }\\n\\n    /**\\n     * Calculates the current pending reward based on the inputted stake struct.\\n     * @param stake - the stake for the user to calculate upon.\\n     */\\n    function _currentReward(Stake memory stake)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 periodsPassed = (block.timestamp - stake.claimedAt) /\\n            yieldPeriod;\\n\\n        uint256 dadRewardsValue = _calculateReward(\\n            stake.amount,\\n            periodsPassed,\\n            false\\n        );\\n\\n        uint256 momRewardsValue = _calculateReward(\\n            stake.momAmount,\\n            periodsPassed,\\n            true\\n        );\\n\\n        uint256 reward = dadRewardsValue + momRewardsValue;\\n\\n        if (reward != 0 && !stake.hasClaimed) reward += firstStakeBonus;\\n\\n        return reward;\\n    }\\n\\n    /**\\n     * Evaluates the current reward for having staked the given amount of tokens.\\n     * @param amount - the amount of tokens staked.\\n     * @param isMom - whether the values are for mom tokens\\n     * @return reward - the dividend per day.\\n     */\\n    function _calculateReward(\\n        uint256 amount,\\n        uint256 periodsPassed,\\n        bool isMom\\n    ) internal view returns (uint256) {\\n        if (amount == 0) return 0;\\n\\n        uint256 reward;\\n        uint256 next = 1;\\n\\n        do {\\n            Reward memory currentReward;\\n\\n            if (isMom) {\\n                currentReward = momRewards[next];\\n            } else {\\n                currentReward = rewards[next];\\n            }\\n\\n            reward = currentReward.amount;\\n            next = currentReward.nextTier;\\n        } while (next != 0 && next <= amount);\\n\\n        return reward * amount * periodsPassed;\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override(ERC2771Context, Context)\\n        returns (address)\\n    {\\n        return ERC2771Context._msgSender();\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override(ERC2771Context, Context)\\n        returns (bytes calldata)\\n    {\\n        return ERC2771Context._msgData();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/metatx/ERC2771Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771Context is Context {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _trustedForwarder;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Rewards.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Rewards is IERC20 {\\n    /**\\n     * Mints to the given account from the sender provided the sender is authorized.\\n     */\\n    function mint(uint256 amount, address to) external;\\n\\n    /**\\n     * Mints to the given accounts from the sender provided the sender is authorized.\\n     */\\n    function bulkMint(uint256[] calldata amounts, address[] calldata to)\\n        external;\\n\\n    /**\\n     * Burns the given amount for the user provided the sender is authorized.\\n     */\\n    function burn(address from, uint256 amount) external;\\n\\n    /**\\n     * Gets the amount of mints the user is entitled to.\\n     */\\n    function getMintAllowance(address user) external view returns (uint256);\\n\\n    /**\\n     * Updates the allowance for the given user to mint. Set to zero to revoke.\\n     *\\n     * @dev This functionality programatically enables allowing other platforms to\\n     *      distribute the token on our behalf.\\n     */\\n    function updateMintAllowance(address user, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/tunnel/FxBaseChildTunnel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// IFxMessageProcessor represents interface to process message\\ninterface IFxMessageProcessor {\\n    function processMessageFromRoot(\\n        uint256 stateId,\\n        address rootMessageSender,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n/**\\n * @notice Mock child tunnel contract to receive and send message from L2\\n */\\nabstract contract FxBaseChildTunnel is IFxMessageProcessor {\\n    // MessageTunnel on L1 will get data from this event\\n    event MessageSent(bytes message);\\n\\n    // fx child\\n    address public fxChild;\\n\\n    // fx root tunnel\\n    address public fxRootTunnel;\\n\\n    constructor(address _fxChild) {\\n        fxChild = _fxChild;\\n    }\\n\\n    // Sender must be fxRootTunnel in case of ERC20 tunnel\\n    modifier validateSender(address sender) {\\n        require(\\n            sender == fxRootTunnel,\\n            \\\"FxBaseChildTunnel: INVALID_SENDER_FROM_ROOT\\\"\\n        );\\n        _;\\n    }\\n\\n    // set fxRootTunnel if not set already\\n    function setFxRootTunnel(address _fxRootTunnel) external virtual {\\n        require(\\n            fxRootTunnel == address(0x0),\\n            \\\"FxBaseChildTunnel: ROOT_TUNNEL_ALREADY_SET\\\"\\n        );\\n        fxRootTunnel = _fxRootTunnel;\\n    }\\n\\n    function processMessageFromRoot(\\n        uint256 stateId,\\n        address rootMessageSender,\\n        bytes calldata data\\n    ) external override {\\n        require(msg.sender == fxChild, \\\"FxBaseChildTunnel: INVALID_SENDER\\\");\\n        _processMessageFromRoot(stateId, rootMessageSender, data);\\n    }\\n\\n    /**\\n     * @notice Emit message that can be received on Root Tunnel\\n     * @dev Call the internal function when need to emit message\\n     * @param message bytes message that will be sent to Root Tunnel\\n     * some message examples -\\n     *   abi.encode(tokenId);\\n     *   abi.encode(tokenId, tokenMetadata);\\n     *   abi.encode(messageType, messageData);\\n     */\\n    function _sendMessageToRoot(bytes memory message) internal {\\n        emit MessageSent(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Root Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param stateId unique state id\\n     * @param sender root message sender\\n     * @param message bytes message that was sent from Root Tunnel\\n     */\\n    function _processMessageFromRoot(\\n        uint256 stateId,\\n        address sender,\\n        bytes memory message\\n    ) internal virtual;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000,\r\n      \"details\": {\r\n        \"yul\": false\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxChild\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isMom\",\"type\":\"bool\"}],\"name\":\"dumpRewards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstStakeBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChild\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRootTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getStakedDads\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getStakedMoms\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"momRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextTier\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"processMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stateId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rootMessageSender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"processMessageFromRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextTier\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20Rewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bonus\",\"type\":\"uint256\"}],\"name\":\"setFirstStakeBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxRootTunnel\",\"type\":\"address\"}],\"name\":\"setFxRootTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newRewards\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"isMom\",\"type\":\"bool\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_yieldPeriod\",\"type\":\"uint256\"}],\"name\":\"setYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"momAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint120\",\"name\":\"claimedAt\",\"type\":\"uint120\"},{\"internalType\":\"bool\",\"name\":\"hasClaimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CryptoDadsStakeChild", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "0000000000000000000000008397259c983751daf40400790063935a11afa28a0000000000000000000000009d4314efe6dae51c1543bab8f1e861f9800f680200000000000000000000000086c80a8aa58e0a4fa09a69624c31ab2a6cad56b8", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}