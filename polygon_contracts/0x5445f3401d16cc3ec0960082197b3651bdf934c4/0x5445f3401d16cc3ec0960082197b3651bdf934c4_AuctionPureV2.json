{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAuctionStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"../library/AuctionLibrary.sol\\\";\\nimport \\\"../library/AuctionStructure.sol\\\";\\n\\ninterface IAuctionStorage {\\n    function getInforAuction(bytes calldata _auctionId)\\n        external\\n        view\\n        returns (AuctionStructure.infoAuction memory);\\n\\n    function getInforSubOffer(\\n        bytes calldata _auctionId,\\n        bytes calldata _subOfferId\\n    )\\n        external\\n        view\\n        returns (\\n            address,\\n            uint256,\\n            uint256,\\n            AuctionStructure.Currency\\n        );\\n\\n    function getInforOfferAuction(\\n        bytes memory _indexId,\\n        bytes memory _subOfferId\\n    ) external view returns (AuctionStructure.infoOfferAuction memory);\\n\\n    function backFeeToUserFund(bytes memory _auctionId)\\n        external\\n        view\\n        returns (AuctionStructure.userFund[] memory);\\n\\n    function changeStateOffers(bytes memory _auctionId, address _exceptionist)\\n        external;\\n\\n    function listingNFTAuction(\\n        bytes memory _auctionId,\\n        uint256 _tokenId,\\n        address _ownerOfListing,\\n        AuctionStructure.Currency _currency\\n    ) external;\\n\\n    function placeBidAuction(AuctionStructure.paramOffer memory _params)\\n        external;\\n\\n    function acceptOfferAuction(\\n        bytes memory _auctionId,\\n        bytes memory _subOfferId\\n    ) external;\\n\\n    function cancelOfferAuction(\\n        bytes memory _auctionId,\\n        bytes calldata _subOfferId\\n    ) external;\\n\\n    function expiredOffer(\\n        bytes memory _indexId,\\n        bytes[] calldata subOffersIdParam\\n    ) external;\\n\\n    function expiredListing(bytes[] memory listingIds) external;\\n\\n    function finishAuction(bytes memory _auctionId)\\n        external\\n        returns (address, bytes memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IListing.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"../library/AuctionLibrary.sol\\\";\\n\\ninterface IListing {\\n    function listingNFTAuction(\\n        AuctionStructure.paramListing calldata _paramListing,\\n        address _stanNFT\\n    ) external returns (address);\\n\\n    function listingNFTFixedPrice(\\n        AuctionStructure.paramListing calldata paramListing,\\n        address _stanNFT\\n    ) external;\\n\\n    function cancelListingFixedPrice(bytes calldata _listingId) external;\\n\\n    function cancelListingAuction(bytes calldata _listingId) external;\\n\\n    function getInforListing(bytes calldata _listing)\\n        external\\n        view\\n        returns (AuctionStructure.Listing memory);\\n\\n    function expiredListing(bytes[] calldata listingIds) external;\\n\\n    function updateListing(\\n        bytes calldata _listingId,\\n        AuctionStructure.StateOfListing state\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOffer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"../library/AuctionLibrary.sol\\\";\\n\\ninterface IOffer {\\n    function makeOfferFixedPrice(\\n        AuctionStructure.paramOffer memory _paramOffer,\\n        AuctionStructure.Currency _currency\\n    ) external;\\n\\n    function acceptOfferPvP(bytes calldata _nftId, bytes calldata _subOfferId)\\n        external\\n        returns (address);\\n\\n    function cancelOfferPvP(\\n        bytes calldata _nftId,\\n        bytes calldata _subOfferId,\\n        address _sender,\\n        bool isWhiteList\\n    ) external returns (uint256);\\n\\n    function getInforOffer(bytes calldata _indexId, bytes calldata _subOfferId)\\n        external\\n        view\\n        returns (AuctionStructure.infoOffer memory);\\n\\n    function expiredOffer(\\n        bytes calldata _indexId,\\n        bytes[] calldata subOffersIdParam\\n    ) external;\\n\\n    function updateOwnerOfNFT(bytes calldata _indexId, address _user) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStanFund.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"../library/AuctionLibrary.sol\\\";\\nimport \\\"../library/AuctionStructure.sol\\\";\\n\\ninterface IStanFund {\\n    function purchaseProcessing(AuctionStructure.puchasing memory params)\\n        external\\n        returns (AuctionStructure.totalFee memory);\\n\\n    function handleBackFeeToUser(AuctionStructure.userFund[] memory _users)\\n        external;\\n\\n    function set(\\n        uint256 _amount,\\n        AuctionStructure.Operator _operator,\\n        address _user\\n    ) external;\\n\\n    function get(address _user)\\n        external\\n        view\\n        returns (AuctionStructure.stanFundParams memory);\\n\\n    function getInforStanFund()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function setSupply(uint256 _amount, AuctionStructure.Operator _operator)\\n        external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStanNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"../library/AuctionLibrary.sol\\\";\\n\\ninterface IStanNFT {\\n    event STAN_EVENT(\\n        bytes requestId,\\n        string nameFunction,\\n        bool platForm,\\n        uint256 tokenId\\n    );\\n\\n    event STAN_BATCH_TRANSFER(\\n        bytes requestId,\\n        AuctionLibrary.FunctionName nameFunction,\\n        bool platForm,\\n        uint256 indexed fromTokenId,\\n        uint256 toTokenId\\n    );\\n\\n    function createNFT(\\n        bytes calldata _requestId,\\n        bytes calldata _collectionId,\\n        uint256 _quantity,\\n        bool _isWeb\\n    ) external;\\n\\n    function createNFTByStan(\\n        bytes calldata _requestId,\\n        bytes calldata _collectionId,\\n        uint256 _quantity,\\n        address _to,\\n        bytes[] calldata _nftIds,\\n        bool _isWeb\\n    ) external;\\n\\n    function updateTokenToListing(bytes calldata _listing, uint256 _tokenId)\\n        external;\\n\\n    function getTokenToListing(uint256 _tokenId)\\n        external\\n        view\\n        returns (bytes memory);\\n\\n    function deleteTokenToListing(uint256 _tokenId) external;\\n\\n    function getListingResult(uint256 _tokenId) external view returns (bool);\\n\\n    function setPriceNFT(uint256 _tokenId, uint256 _amount) external;\\n\\n    function getPriceNFT(uint256 _tokenId) external view returns (uint256);\\n\\n    function updateOwnerNFTAndTransferNFT(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) external;\\n\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\n\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external view returns (bytes4);\\n\\n    function moveBatchNFTToCollection(\\n        bytes calldata _requestId,\\n        bytes calldata _oldIdCollection,\\n        bytes calldata _newIdCollection,\\n        address _creator,\\n        uint256 _quantity,\\n        uint256[] calldata _tokenIds,\\n        bool _isWeb\\n    ) external;\\n\\n    function approveForAll(address _operator, bool _approved) external;\\n\\n    function approveForAuction(\\n        address _owner,\\n        address _operator,\\n        bool _approved\\n    ) external;\\n\\n    function getIsApprovedForAll(address _owner, address _operator)\\n        external\\n        view\\n        returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/library/AuctionLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./AuctionStructure.sol\\\";\\n\\nlibrary AuctionLibrary {\\n    enum FunctionName {\\n        LIST_FIXED_PRICE,\\n        LIST_AUCTION,\\n        BUY_NFT,\\n        CANCEL_LISTING_FIX_PRICE,\\n        CANCEL_LISTING_AUCTION,\\n        MAKE_OFFER_WITH_NFT,\\n        RE_OFFER,\\n        MAKE_OFFER_WITH_AUCTION,\\n        ACCEPT_OFFER_WITH_NFT,\\n        ACCEPT_OFFER_WITH_AUCTION,\\n        CANCEL_OFFER_WITH_NFT,\\n        CANCEL_OFFER_WITH_AUCTION,\\n        EXPIRED_FIX_PRICE,\\n        EXPIRED_LISTING,\\n        TRANSFER_NFT_PVP,\\n        DEPOSIT,\\n        WITHDRAW,\\n        WITHDRAW_BY_STAN,\\n        CLAIM_NFT,\\n        DEPOSIT_NFT,\\n        FINISH_AUCTION,\\n        CREATE_NFT_BY_STAN,\\n        CREATE_NFT,\\n        CREATE_COLLECTION,\\n        ADD_NFT_TO_COLLECTION,\\n        MOVE_BATCH_NFT,\\n        SET_ROYALTY_FEE,\\n        SET_SERVICE_FEE,\\n        SET_MAX_COLLECTION,\\n        SET_STAN_FIXED,\\n        DEPOSIT_BY_STAN\\n    }\\n\\n    function saveOffer(\\n        AuctionStructure.Offer storage _offerInstance,\\n        AuctionStructure.paramOffer memory _params\\n    ) internal {\\n        _offerInstance.tokenId = _params.tokenId;\\n        if (_params.indexId.length != 0) {\\n            _offerInstance.nftID = _params.indexId;\\n        }\\n        _offerInstance.subOffers[_params.subOfferId].subOfferId = _params\\n            .subOfferId;\\n        _offerInstance.owner = _params.owner;\\n        _offerInstance.subOffers[_params.subOfferId].maker = _params.maker;\\n        _offerInstance.subOffers[_params.subOfferId].amount = _params.amount;\\n        _offerInstance.subOffers[_params.subOfferId].expirationTime = _params\\n            .expiTime;\\n        _offerInstance.subOffers[_params.subOfferId].state = AuctionStructure\\n            .StateOfOffer\\n            .ACTIVE;\\n        _offerInstance.subOffers[_params.subOfferId].currency = _params\\n            .currency;\\n    }\\n\\n    function processCancel(\\n        AuctionStructure.Offer storage _offerInstance,\\n        bytes calldata _subOfferId\\n    ) internal {\\n        AuctionStructure.StateOfOffer stateOfOffer = _offerInstance\\n            .subOffers[_subOfferId]\\n            .state;\\n\\n        require(\\n            stateOfOffer != AuctionStructure.StateOfOffer.CANCELLED &&\\n                stateOfOffer != AuctionStructure.StateOfOffer.INACTIVE,\\n            \\\"AlreadyInActive\\\"\\n        );\\n        _offerInstance.subOffers[_subOfferId].state = AuctionStructure\\n            .StateOfOffer\\n            .INACTIVE;\\n    }\\n\\n    function findTheBestFitWinner(\\n        AuctionStructure.auctionStruct storage _auction\\n    ) internal view returns (uint256) {\\n        uint256 max = 0;\\n        uint256 winnerIndex = 0;\\n\\n        for (uint256 i = 0; i < _auction.offerIds.length; ) {\\n            uint256 _amount = _auction\\n                .offers\\n                .subOffers[_auction.offerIds[i]]\\n                .amount;\\n            if (_amount > max) {\\n                max = _amount;\\n                winnerIndex = i;\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return winnerIndex;\\n    }\\n\\n    function processChangeExpired(\\n        AuctionStructure.Offer storage _offerInstance,\\n        bytes[] calldata subOffersIdParam\\n    ) internal {\\n        for (uint256 i = 0; i < subOffersIdParam.length; ) {\\n            _offerInstance\\n                .subOffers[subOffersIdParam[i]]\\n                .state = AuctionStructure.StateOfOffer.CANCELLED;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function getPaymentMethod(\\n        AuctionStructure.Currency _from,\\n        AuctionStructure.Currency _to\\n    ) internal pure returns (AuctionStructure.MethodToPayment) {\\n        if (\\n            _from == AuctionStructure.Currency.POINT &&\\n            _to == AuctionStructure.Currency.CRYPTO\\n        ) {\\n            return AuctionStructure.MethodToPayment.POINT_TO_CRYPTO;\\n        } else if (\\n            _from == AuctionStructure.Currency.CRYPTO &&\\n            _to == AuctionStructure.Currency.POINT\\n        ) {\\n            return AuctionStructure.MethodToPayment.CRYPTO_TO_POINT;\\n        } else if (\\n            _from == AuctionStructure.Currency.CRYPTO &&\\n            _to == AuctionStructure.Currency.CRYPTO\\n        ) {\\n            return AuctionStructure.MethodToPayment.CRYPTO_TO_CRYPTO;\\n        } else {\\n            return AuctionStructure.MethodToPayment.POINT_TO_POINT;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/library/AuctionStructure.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nlibrary AuctionStructure {\\n    struct auctionStruct {\\n        bytes autionId;\\n        uint256 tokenId;\\n        StateOfAution state;\\n        address owner;\\n        address winner;\\n        bytes[] offerIds;\\n        Currency currency;\\n        Offer offers;\\n        mapping(bytes => uint256) offerIdToIndex;\\n        mapping(address => uint256) userToBidnumber;\\n    }\\n\\n    struct Offer {\\n        uint256 tokenId;\\n        mapping(bytes => subOffer) subOffers;\\n        address owner;\\n        bytes nftID;\\n    }\\n\\n    struct subOffer {\\n        bytes subOfferId;\\n        address maker;\\n        uint256 amount;\\n        uint256 expirationTime;\\n        StateOfOffer state;\\n        Currency currency;\\n    }\\n\\n    struct Listing {\\n        bytes ListingID;\\n        address Owner;\\n        address ownerOfNFT;\\n        bool isAuction;\\n        uint256 ExpirationTime;\\n        uint256 Amount;\\n        uint256 tokenId;\\n        StateOfListing state;\\n        bytes AuctionId;\\n        bytes nftId;\\n        Currency currency;\\n    }\\n\\n    struct stateCollection {\\n        bytes id;\\n        uint128 currentNumber;\\n        uint128 maxNumber;\\n        uint128 ratioCreatorVal;\\n        uint128 ratioCreatorDenomination;\\n        uint128 ratioStanVal;\\n        uint128 ratioStanDenomination;\\n        address owner;\\n        mapping(uint256 => uint256) NFT;\\n        mapping(address => address) currentOwnerNFT;\\n        mapping(uint256 => address) creator;\\n    }\\n\\n    struct participant {\\n        address user;\\n        uint256 index;\\n    }\\n\\n    struct paramOffer {\\n        bytes subOfferId;\\n        bytes indexId;\\n        uint256 tokenId;\\n        address owner;\\n        address maker;\\n        uint256 expiTime;\\n        uint256 amount;\\n        bool isAuction;\\n        Currency currency;\\n    }\\n\\n    struct paramListing {\\n        bytes indexId;\\n        uint256 amount;\\n        uint256 tokenId;\\n        uint256 expirationTime;\\n        address maker;\\n        bytes nftId;\\n        Currency currency;\\n    }\\n\\n    struct puchasing {\\n        address seller;\\n        address buyer;\\n        uint256 amount;\\n        uint256 feeStanVal;\\n        uint256 feeStanValDenomination;\\n        uint256 tokenId;\\n        Method method;\\n        MethodToPayment methodToPayment;\\n    }\\n\\n    struct userFund {\\n        address maker;\\n        uint256 bidnumber;\\n    }\\n\\n    struct infoOffer {\\n        uint256 tokenId;\\n        address owner;\\n        address maker;\\n        uint256 amount;\\n        uint256 expirationTime;\\n        bytes nftId;\\n        StateOfOffer state;\\n        Currency currency;\\n    }\\n\\n    struct infoOfferAuction {\\n        uint256 tokenId;\\n        address owner;\\n        address maker;\\n        uint256 amount;\\n        uint256 expirationTime;\\n        StateOfOffer state;\\n        Currency currency;\\n    }\\n\\n    struct infoAuction {\\n        bytes auctionId;\\n        uint256 tokenId;\\n        StateOfAution state;\\n        address owner;\\n        address winner;\\n        bytes[] offerIds;\\n        Currency currency;\\n    }\\n\\n    struct infoCollection {\\n        uint256 ratioCreatorVal;\\n        uint256 ratioCreatorDenomination;\\n        uint256 ratioStanVal;\\n        uint256 ratioStanDenomination;\\n        address creator;\\n        address _owner;\\n        uint256 nft;\\n        address currentOwnerNFT;\\n    }\\n\\n    struct paramReOffer {\\n        bytes subOfferId;\\n        bytes auctionId;\\n        uint256 amount;\\n    }\\n\\n    struct stanFundParams {\\n        uint256 userStanFund;\\n        bool result;\\n    }\\n\\n        struct feeStanSystem {\\n        uint128 ratioCreatorVal;\\n        uint128 ratioCreatorDenomination;\\n        uint128 ratioStanVal;\\n        uint128 ratioStanDenomination;\\n        uint128 maxCollectionNumber;\\n    }\\n\\n    struct abilityToWithdraw {\\n        uint256 val;\\n        uint256 valDenomination;\\n    }\\n\\n    struct feeStanFixed {\\n        uint256 feeTransferNFTPvP;\\n        uint256 feeListingNFTAuction;\\n        uint256 feeCancelListingAuction;\\n        uint256 feePlaceBidAuction;\\n        uint256 feeMintingNFT;\\n        uint256 feeCreateCollection;\\n    }\\n\\n    struct totalFee {\\n        uint256 royalty;\\n        uint256 stanFee;\\n        uint256 exchangeWeb;\\n    }\\n\\n    struct feeStanService {\\n        uint128 ratioBuyFixedPriceVal;\\n        uint128 ratioBuyFixedPriceDenomination;\\n        uint128 ratioAcceptOfferPvPVal;\\n        uint128 ratioAcceptOfferPvPDenomination;\\n        uint128 ratioAcceptOfferAuctionVal;\\n        uint128 ratioAcceptOfferAuctionDenomination;\\n        uint128 ratioFinishAuctionVal;\\n        uint128 ratioFinishAuctionDenomination;\\n        uint128 ratioCancelOfferPvPVal;\\n        uint128 ratioCancelOfferPvPDenomination;\\n    }\\n\\n    enum StateOfListing {\\n        INACTIVE,\\n        ACTIVE,\\n        EXPIRED\\n    }\\n\\n    enum Method {\\n        BUY,\\n        AUCTION,\\n        OTHER\\n    }\\n\\n    enum Currency {\\n        POINT,\\n        CRYPTO\\n    }\\n\\n    enum Operator {\\n        PLUS,\\n        MINUS\\n    }\\n\\n    enum StateOfOffer {\\n        INACTIVE,\\n        ACTIVE,\\n        EXPIRED,\\n        DONE,\\n        CANCELLED\\n    }\\n\\n    enum StateOfAution {\\n        ACTIVE,\\n        DONE,\\n        CANCEL,\\n        EXPIRED\\n    }\\n\\n    enum MethodToPayment {\\n        POINT_TO_POINT,\\n        POINT_TO_CRYPTO,\\n        CRYPTO_TO_POINT,\\n        CRYPTO_TO_CRYPTO\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/V2/AuctionPureV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IStanNFT.sol\\\";\\nimport \\\"../interfaces/IListing.sol\\\";\\nimport \\\"../interfaces/IOffer.sol\\\";\\nimport \\\"../interfaces/IAuctionStorage.sol\\\";\\nimport \\\"../interfaces/IStanFund.sol\\\";\\nimport \\\"../library/AuctionLibrary.sol\\\";\\nimport \\\"../library/AuctionStructure.sol\\\";\\n\\ncontract AuctionPureV2 is Initializable {\\n    using AuctionLibrary for AuctionStructure.Offer;\\n    using AuctionLibrary for AuctionStructure.auctionStruct;\\n    using AuctionLibrary for AuctionStructure.Currency;\\n\\n    IStanNFT public stanNFT;\\n    IListing public listing;\\n    IOffer public offer;\\n    IStanFund public stanFund;\\n    IAuctionStorage public auctionStorage;\\n\\n    address private owner;\\n    address public auctionAddress;\\n\\n    function initialize(\\n        address _stanNFT,\\n        address _listing,\\n        address _offer,\\n        address _auctionStorage,\\n        address _stanFund\\n    ) public initializer {\\n        owner = msg.sender;\\n        stanNFT = IStanNFT(_stanNFT);\\n        listing = IListing(_listing);\\n        offer = IOffer(_offer);\\n        stanFund = IStanFund(_stanFund);\\n        auctionStorage = IAuctionStorage(_auctionStorage);\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"InvalidOwner\\\");\\n        _;\\n    }\\n\\n    modifier onlyAuction() {\\n        require(auctionAddress == msg.sender, \\\"InvalidOwner\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwnerNFTOrAuction(uint256 _tokenId) {\\n        require(\\n            msg.sender == stanNFT.ownerOf(_tokenId) ||\\n                msg.sender == auctionAddress,\\n            \\\"InvalidOwnerNFT\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier checkStateOfAution(bytes memory _auctionId) {\\n        AuctionStructure.infoAuction memory _auctionInstance = auctionStorage\\n            .getInforAuction(_auctionId);\\n\\n        require(\\n            _auctionInstance.state == AuctionStructure.StateOfAution.ACTIVE,\\n            \\\"InvalidState\\\"\\n        );\\n        _;\\n    }\\n\\n    function setAuction(address _auction) external onlyOwner {\\n        auctionAddress = _auction;\\n    }\\n\\n    function setStanFund(address _stanFundAddress) external onlyOwner {\\n        stanFund = IStanFund(_stanFundAddress);\\n    }\\n\\n    function listingNFTAuction(\\n        AuctionStructure.paramListing calldata _paramListing,\\n        bool _isWhiteList,\\n        AuctionStructure.feeStanFixed calldata _feeStanFixed\\n    ) external onlyOwnerNFTOrAuction(_paramListing.tokenId) {\\n        require(\\n            stanNFT.getIsApprovedForAll(_paramListing.maker, address(this)),\\n            \\\"NotYetApproved\\\"\\n        );\\n\\n        AuctionStructure.stanFundParams memory paramStanFund = stanFund.get(\\n            _paramListing.maker\\n        );\\n\\n        require(\\n            (paramStanFund.result &&\\n                paramStanFund.userStanFund >=\\n                _feeStanFixed.feeListingNFTAuction) || _isWhiteList,\\n            \\\"InvalidBalance\\\"\\n        );\\n\\n        if (\\n            !_isWhiteList ||\\n            _paramListing.currency == AuctionStructure.Currency.CRYPTO\\n        ) {\\n            stanFund.set(\\n                _feeStanFixed.feeListingNFTAuction,\\n                AuctionStructure.Operator.MINUS,\\n                _paramListing.maker\\n            );\\n\\n            stanFund.setSupply(\\n                _feeStanFixed.feeListingNFTAuction,\\n                AuctionStructure.Operator.MINUS\\n            );\\n        }\\n\\n        address ownerOfListing = listing.listingNFTAuction(\\n            _paramListing,\\n            address(stanNFT)\\n        );\\n\\n        stanNFT.updateOwnerNFTAndTransferNFT(\\n            _paramListing.maker,\\n            address(stanNFT),\\n            _paramListing.tokenId\\n        );\\n        auctionStorage.listingNFTAuction(\\n            _paramListing.indexId,\\n            _paramListing.tokenId,\\n            ownerOfListing,\\n            _paramListing.currency\\n        );\\n    }\\n\\n    function cancelListingAuction(\\n        bytes memory _listingId,\\n        bool _isWhiteList,\\n        AuctionStructure.feeStanFixed calldata _feeStanFixed,\\n        AuctionStructure.Currency _currency\\n    ) external onlyAuction returns (uint256) {\\n        AuctionStructure.Listing memory listingInstance = listing\\n            .getInforListing(_listingId);\\n\\n        AuctionStructure.stanFundParams memory paramStanFund = stanFund.get(\\n            listingInstance.Owner\\n        );\\n\\n        require(\\n            (paramStanFund.result &&\\n                paramStanFund.userStanFund >=\\n                _feeStanFixed.feeCancelListingAuction) || _isWhiteList,\\n            \\\"InvalidBalance\\\"\\n        );\\n\\n        stanFund.handleBackFeeToUser(\\n            auctionStorage.backFeeToUserFund(listingInstance.AuctionId)\\n        );\\n\\n        if (_currency == AuctionStructure.Currency.CRYPTO) {\\n            stanFund.set(\\n                _feeStanFixed.feeCancelListingAuction,\\n                AuctionStructure.Operator.MINUS,\\n                listingInstance.Owner\\n            );\\n\\n            stanFund.setSupply(\\n                _feeStanFixed.feeCancelListingAuction,\\n                AuctionStructure.Operator.MINUS\\n            );\\n        }\\n\\n        auctionStorage.changeStateOffers(listingInstance.AuctionId, address(0));\\n        listing.cancelListingAuction(_listingId);\\n\\n        stanNFT.updateOwnerNFTAndTransferNFT(\\n            address(stanNFT),\\n            listingInstance.Owner,\\n            listingInstance.tokenId\\n        );\\n\\n        return listingInstance.tokenId;\\n    }\\n\\n    function _reOffer(\\n        AuctionStructure.paramReOffer memory params\\n    ) private view returns (uint256) {\\n        AuctionStructure.infoOfferAuction memory infoInstance = auctionStorage\\n            .getInforOfferAuction(params.auctionId, params.subOfferId);\\n\\n        if (\\n            infoInstance.owner == address(0) &&\\n            infoInstance.state == AuctionStructure.StateOfOffer.INACTIVE\\n        ) return params.amount;\\n\\n        require(infoInstance.amount < params.amount, \\\"ReOfferFailed\\\");\\n\\n        return params.amount - infoInstance.amount;\\n    }\\n\\n    function placeBidAuction(\\n        bytes memory _subOfferId,\\n        bytes memory _auctionId,\\n        uint256 _amount,\\n        address _maker,\\n        bool _isWhiteList,\\n        AuctionStructure.feeStanFixed calldata _feeStanFixed,\\n        AuctionStructure.Currency _currency\\n    ) external checkStateOfAution(_auctionId) onlyAuction returns (uint256) {\\n        AuctionStructure.stanFundParams memory paramStanFund = stanFund.get(\\n            _maker\\n        );\\n\\n        require(\\n            (paramStanFund.result &&\\n                paramStanFund.userStanFund >=\\n                (_amount + _feeStanFixed.feePlaceBidAuction)) || _isWhiteList,\\n            \\\"InvalidBalance\\\"\\n        );\\n        AuctionStructure.Listing memory listingInstance = listing\\n            .getInforListing(_auctionId);\\n\\n        require(\\n            listingInstance.ExpirationTime >= block.timestamp,\\n            \\\"InvalidTimestamp\\\"\\n        );\\n\\n        require(\\n            listingInstance.Amount <= _amount || _isWhiteList,\\n            \\\"InvalidOffer\\\"\\n        );\\n\\n        AuctionStructure.paramReOffer memory paramsReOffer = AuctionStructure\\n            .paramReOffer(_subOfferId, _auctionId, _amount);\\n\\n        if (!_isWhiteList) {\\n            stanFund.set(\\n                (_reOffer(paramsReOffer) + _feeStanFixed.feePlaceBidAuction),\\n                AuctionStructure.Operator.MINUS,\\n                _maker\\n            );\\n\\n            stanFund.setSupply(\\n                _feeStanFixed.feePlaceBidAuction,\\n                AuctionStructure.Operator.MINUS\\n            );\\n        }\\n\\n        AuctionStructure.paramOffer memory params = AuctionStructure.paramOffer(\\n            _subOfferId,\\n            listingInstance.AuctionId,\\n            listingInstance.tokenId,\\n            listingInstance.Owner,\\n            _maker,\\n            listingInstance.ExpirationTime,\\n            _amount,\\n            listingInstance.isAuction,\\n            _currency\\n        );\\n\\n        auctionStorage.placeBidAuction(params);\\n\\n        return listingInstance.tokenId;\\n    }\\n\\n    function acceptOfferAuction(\\n        bytes memory _auctionId,\\n        bytes memory _subOfferId,\\n        bytes memory _nftId,\\n        AuctionStructure.feeStanService calldata _feeStanService\\n    ) external onlyAuction returns (uint256, AuctionStructure.totalFee memory) {\\n        AuctionStructure.infoOfferAuction memory infoInstance = auctionStorage\\n            .getInforOfferAuction(_auctionId, _subOfferId);\\n\\n        AuctionStructure.Listing memory listingInstance = listing\\n            .getInforListing(_auctionId);\\n\\n        address ownerOfNFT = stanNFT.ownerOf(infoInstance.tokenId);\\n\\n        require(ownerOfNFT == address(stanNFT), \\\"InvalidOwner\\\");\\n        require(\\n            infoInstance.state == AuctionStructure.StateOfOffer.ACTIVE &&\\n                listingInstance.state == AuctionStructure.StateOfListing.ACTIVE,\\n            \\\"InvalidState\\\"\\n        );\\n        require(\\n            block.timestamp < listingInstance.ExpirationTime,\\n            \\\"InvalidTimestamp\\\"\\n        );\\n\\n        auctionStorage.acceptOfferAuction(_auctionId, _subOfferId);\\n\\n        AuctionStructure.puchasing memory params = AuctionStructure.puchasing(\\n            infoInstance.owner,\\n            infoInstance.maker,\\n            infoInstance.amount,\\n            _feeStanService.ratioAcceptOfferAuctionVal,\\n            _feeStanService.ratioAcceptOfferAuctionDenomination,\\n            infoInstance.tokenId,\\n            AuctionStructure.Method.AUCTION,\\n            listingInstance.currency.getPaymentMethod(infoInstance.currency)\\n        );\\n\\n        AuctionStructure.totalFee memory totalFee = stanFund.purchaseProcessing(\\n            params\\n        );\\n\\n        if (totalFee.royalty > 0)\\n            stanFund.setSupply(\\n                totalFee.royalty + totalFee.stanFee,\\n                AuctionStructure.Operator.MINUS\\n            );\\n\\n        if (totalFee.exchangeWeb > 0)\\n            stanFund.setSupply(\\n                totalFee.exchangeWeb,\\n                AuctionStructure.Operator.PLUS\\n            );\\n\\n        stanNFT.updateOwnerNFTAndTransferNFT(\\n            ownerOfNFT,\\n            infoInstance.maker,\\n            infoInstance.tokenId\\n        );\\n\\n        offer.updateOwnerOfNFT(_nftId, infoInstance.maker);\\n\\n        return (infoInstance.tokenId, totalFee);\\n    }\\n\\n    function cancelOfferAuction(\\n        bytes memory _auctionId,\\n        bytes calldata _subOfferId,\\n        bool _isWhiteList,\\n        address _sender\\n    ) external onlyAuction returns (uint256) {\\n        (\\n            address maker,\\n            uint256 tokenId,\\n            uint256 subOfferAmount,\\n            AuctionStructure.Currency currency\\n        ) = auctionStorage.getInforSubOffer(_auctionId, _subOfferId);\\n\\n        require(_isWhiteList || _sender == maker, \\\"InvalidOwner\\\");\\n\\n        if (currency == AuctionStructure.Currency.CRYPTO) {\\n            stanFund.set(subOfferAmount, AuctionStructure.Operator.PLUS, maker);\\n        }\\n\\n        auctionStorage.cancelOfferAuction(_auctionId, _subOfferId);\\n\\n        return tokenId;\\n    }\\n\\n    function expiredOffer(\\n        bytes memory _indexId,\\n        bytes[] calldata _subOffersIdParam\\n    ) external onlyAuction returns (uint256) {\\n        AuctionStructure.Listing memory listingInstance = listing\\n            .getInforListing(_indexId);\\n\\n        if (listingInstance.AuctionId.length != 0) {\\n            auctionStorage.expiredOffer(_indexId, _subOffersIdParam);\\n            stanFund.handleBackFeeToUser(\\n                auctionStorage.backFeeToUserFund(_indexId)\\n            );\\n        } else {\\n            offer.expiredOffer(_indexId, _subOffersIdParam);\\n        }\\n\\n        return listingInstance.tokenId;\\n    }\\n\\n    function expiredListing(\\n        bytes[] memory _listingIds,\\n        bool _isAuction\\n    ) external onlyAuction {\\n        listing.expiredListing(_listingIds);\\n        for (uint256 i = 0; i < _listingIds.length; ) {\\n            AuctionStructure.Listing memory listingAuction = listing\\n                .getInforListing(_listingIds[i]);\\n            stanNFT.updateOwnerNFTAndTransferNFT(\\n                address(stanNFT),\\n                listingAuction.Owner,\\n                listingAuction.tokenId\\n            );\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        if (_isAuction) {\\n            auctionStorage.expiredListing(_listingIds);\\n        }\\n    }\\n\\n    function _processFinishAuction(\\n        bytes memory _auctionId,\\n        bytes memory _winnerSubOfferId,\\n        AuctionStructure.Currency _currencyListing,\\n        AuctionStructure.feeStanService calldata _feeStanService\\n    ) private returns (uint256, AuctionStructure.totalFee memory) {\\n        AuctionStructure.infoOfferAuction memory infoInstance = auctionStorage\\n            .getInforOfferAuction(_auctionId, _winnerSubOfferId);\\n\\n        require(\\n            infoInstance.state == AuctionStructure.StateOfOffer.ACTIVE,\\n            \\\"InvalidState\\\"\\n        );\\n\\n        address ownerNFT = stanNFT.ownerOf(infoInstance.tokenId);\\n\\n        AuctionStructure.puchasing memory params = AuctionStructure.puchasing(\\n            infoInstance.owner,\\n            infoInstance.maker,\\n            infoInstance.amount,\\n            _feeStanService.ratioFinishAuctionVal,\\n            _feeStanService.ratioFinishAuctionDenomination,\\n            infoInstance.tokenId,\\n            AuctionStructure.Method.AUCTION,\\n            _currencyListing.getPaymentMethod(infoInstance.currency)\\n        );\\n\\n        AuctionStructure.totalFee memory totalFee = stanFund.purchaseProcessing(\\n            params\\n        );\\n\\n        if (totalFee.royalty > 0)\\n            stanFund.setSupply(\\n                totalFee.royalty + totalFee.stanFee,\\n                AuctionStructure.Operator.MINUS\\n            );\\n\\n        if (totalFee.exchangeWeb > 0)\\n            stanFund.setSupply(\\n                totalFee.exchangeWeb,\\n                AuctionStructure.Operator.PLUS\\n            );\\n\\n        stanNFT.updateOwnerNFTAndTransferNFT(\\n            ownerNFT,\\n            infoInstance.maker,\\n            infoInstance.tokenId\\n        );\\n        return (infoInstance.tokenId, totalFee);\\n    }\\n\\n    function finishAuction(\\n        bytes memory _auctionId,\\n        bytes memory _nftId,\\n        AuctionStructure.feeStanService calldata _feeStanService\\n    )\\n        external\\n        onlyAuction\\n        checkStateOfAution(_auctionId)\\n        returns (uint256, AuctionStructure.totalFee memory)\\n    {\\n        AuctionStructure.Listing memory listingInstance = listing\\n            .getInforListing(_auctionId);\\n\\n        require(\\n            listingInstance.state == AuctionStructure.StateOfListing.ACTIVE,\\n            \\\"InvalidState\\\"\\n        );\\n        (address winner, bytes memory winnerSubOfferId) = auctionStorage\\n            .finishAuction(_auctionId);\\n        auctionStorage.changeStateOffers(_auctionId, winner);\\n\\n        listing.updateListing(\\n            _auctionId,\\n            AuctionStructure.StateOfListing.INACTIVE\\n        );\\n\\n        if (_nftId.length > 0) offer.updateOwnerOfNFT(_nftId, winner);\\n        stanFund.handleBackFeeToUser(\\n            auctionStorage.backFeeToUserFund(_auctionId)\\n        );\\n\\n        (\\n            uint256 tokenId,\\n            AuctionStructure.totalFee memory totalFee\\n        ) = _processFinishAuction(\\n                _auctionId,\\n                winnerSubOfferId,\\n                listingInstance.currency,\\n                _feeStanService\\n            );\\n\\n        return (tokenId, totalFee);\\n    }\\n\\n    function testing() public pure returns (bool) {\\n        return true;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_auctionId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_subOfferId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_nftId\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"ratioBuyFixedPriceVal\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"ratioBuyFixedPriceDenomination\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"ratioAcceptOfferPvPVal\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"ratioAcceptOfferPvPDenomination\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"ratioAcceptOfferAuctionVal\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"ratioAcceptOfferAuctionDenomination\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"ratioFinishAuctionVal\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"ratioFinishAuctionDenomination\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"ratioCancelOfferPvPVal\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"ratioCancelOfferPvPDenomination\",\"type\":\"uint128\"}],\"internalType\":\"struct AuctionStructure.feeStanService\",\"name\":\"_feeStanService\",\"type\":\"tuple\"}],\"name\":\"acceptOfferAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"royalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stanFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeWeb\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionStructure.totalFee\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionStorage\",\"outputs\":[{\"internalType\":\"contract IAuctionStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_listingId\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_isWhiteList\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"feeTransferNFTPvP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeListingNFTAuction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeCancelListingAuction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feePlaceBidAuction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeMintingNFT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeCreateCollection\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionStructure.feeStanFixed\",\"name\":\"_feeStanFixed\",\"type\":\"tuple\"},{\"internalType\":\"enum AuctionStructure.Currency\",\"name\":\"_currency\",\"type\":\"uint8\"}],\"name\":\"cancelListingAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_auctionId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_subOfferId\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_isWhiteList\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"cancelOfferAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_listingIds\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"_isAuction\",\"type\":\"bool\"}],\"name\":\"expiredListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_indexId\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"_subOffersIdParam\",\"type\":\"bytes[]\"}],\"name\":\"expiredOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_auctionId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_nftId\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"ratioBuyFixedPriceVal\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"ratioBuyFixedPriceDenomination\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"ratioAcceptOfferPvPVal\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"ratioAcceptOfferPvPDenomination\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"ratioAcceptOfferAuctionVal\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"ratioAcceptOfferAuctionDenomination\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"ratioFinishAuctionVal\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"ratioFinishAuctionDenomination\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"ratioCancelOfferPvPVal\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"ratioCancelOfferPvPDenomination\",\"type\":\"uint128\"}],\"internalType\":\"struct AuctionStructure.feeStanService\",\"name\":\"_feeStanService\",\"type\":\"tuple\"}],\"name\":\"finishAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"royalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stanFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeWeb\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionStructure.totalFee\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stanNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_listing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_offer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_auctionStorage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stanFund\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listing\",\"outputs\":[{\"internalType\":\"contract IListing\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"indexId\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"nftId\",\"type\":\"bytes\"},{\"internalType\":\"enum AuctionStructure.Currency\",\"name\":\"currency\",\"type\":\"uint8\"}],\"internalType\":\"struct AuctionStructure.paramListing\",\"name\":\"_paramListing\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"_isWhiteList\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"feeTransferNFTPvP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeListingNFTAuction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeCancelListingAuction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feePlaceBidAuction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeMintingNFT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeCreateCollection\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionStructure.feeStanFixed\",\"name\":\"_feeStanFixed\",\"type\":\"tuple\"}],\"name\":\"listingNFTAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offer\",\"outputs\":[{\"internalType\":\"contract IOffer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_subOfferId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_auctionId\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_maker\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isWhiteList\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"feeTransferNFTPvP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeListingNFTAuction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeCancelListingAuction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feePlaceBidAuction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeMintingNFT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeCreateCollection\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionStructure.feeStanFixed\",\"name\":\"_feeStanFixed\",\"type\":\"tuple\"},{\"internalType\":\"enum AuctionStructure.Currency\",\"name\":\"_currency\",\"type\":\"uint8\"}],\"name\":\"placeBidAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auction\",\"type\":\"address\"}],\"name\":\"setAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stanFundAddress\",\"type\":\"address\"}],\"name\":\"setStanFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stanFund\",\"outputs\":[{\"internalType\":\"contract IStanFund\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stanNFT\",\"outputs\":[{\"internalType\":\"contract IStanNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "AuctionPureV2", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}