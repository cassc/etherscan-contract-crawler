{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/wav3sFunctions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport {Errors} from \\\"./wav3sErrors.sol\\\";\\nimport './RaffleStateLibrary.sol';\\n\\ncontract wav3sFunctions {\\n    using RaffleStateLibrary for RaffleStateLibrary.RaffleState; // Import the enum\\n\\n\\n    struct ActionDataBase {\\n        bool initiatedAction;\\n        uint256 budget;\\n        address currency;\\n    }\\n\\n    struct ActionDataFilters {\\n        uint256 raffleDuration;\\n        address pubOwner;\\n    }\\n\\n    enum RaffleState {\\n        OPEN,\\n        CLOSED\\n    }\\n\\n      function checkWithdrawalReqs(\\n        bool initiatedAction,\\n        address sender,\\n        address pubOwner,\\n        uint256 raffleEnd,\\n        uint256 withdrawalTime,\\n        uint256 budget,\\n        uint256 zurfersCount,\\n        uint256 winners ) external view {\\n        require(initiatedAction == true, \\\"PostNotInitiated\\\");\\n        require(pubOwner == sender, \\\"NotSenderProfile\\\");\\n        if(raffleEnd > 0 ){\\n            require(block.timestamp > raffleEnd, \\\"RaffleTime not over\\\");\\n            require(\\n            zurfersCount < winners,\\n            \\\"EnoughRetwittersMustExecute\\\"\\n        );\\n        }\\n        require(block.timestamp > withdrawalTime, \\\"withdrawalTime not over\\\");\\n        require(budget > 0, \\\"BudgetEmpty\\\");\\n    }\\n\\n        function checkRaffleReqs( \\n        RaffleStateLibrary.RaffleState raffleState,\\n        uint256 raffleEnd,\\n        uint256 zurfersCount,\\n        uint256 winners\\n    ) external view {\\n        require(\\n            raffleState != RaffleStateLibrary.RaffleState.CLOSED,\\n            \\\"RaffleClosed\\\"\\n        );\\n        require(\\n            block.timestamp > raffleEnd,\\n            \\\"RaffleTimeNotOver\\\"\\n        );\\n        require(\\n            zurfersCount >= winners,\\n            \\\"NotEnoughRetwitters\\\"\\n        );\\n    }\\n\\n    function requireValidValues1(\\n        uint256 reward_,\\n        uint256 budget_\\n    ) external pure {\\n        require(reward_ >= 0, \\\"RewardLessThanZero\\\");\\n        require(budget_ >= 0, \\\"BudgetLessThanZero\\\");\\n    }\\n        function requireValidValues2(\\n        uint256 raffleDuration_,\\n        uint256 minFollowers_\\n    ) external pure {\\n        require(raffleDuration_ >= 0, \\\"RaffleDurationLessThanZero\\\");\\n        require(minFollowers_ >= 0, \\\"MinimumFollowersLessThanZero\\\");\\n    }\\n        function requireValidValues3(\\n        uint256 _consumerAppFee\\n    ) external pure {\\n        require(_consumerAppFee >= 0, \\\"ConsumerAppFeeLessThanZero\\\");\\n    }\\n    \\n    function checkValidity(\\n        bool initiatedAction,\\n        bool UserHasActed,\\n        uint256 followersCount,\\n        uint256 minFollowers,\\n        uint256 reward,\\n        uint256 budget,\\n        string memory pubId\\n    )external returns(bool){\\n        require(initiatedAction, \\\"ActionNotInitiated\\\");\\n        require(!UserHasActed, \\\"ZurferAlreadyActed\\\");\\n        require(followersCount >= minFollowers, \\\"NeedMoreFollowers\\\");      \\n        require(reward <= budget, \\\"NotEnoughBudget\\\");\\n        require(bytes(pubId).length != 0, \\\"InvalidpubID\\\");\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/wav3sErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nlibrary Errors {\\n    // Errors\\n    event wav3s__process__ArrayLengthMismatch(string error);\\n    event wav3s__process__PostNotInitiated(uint256 index, string error);\\n    event wav3s__process__ZurferAlreadyActed();\\n    event wav3s__process__NeedMoreFollowers(uint256 index, string error);\\n    event wav3s__process__RewardHigherThanbudget(uint256 index, string error);\\n    event wav3s__process__InvalidUserAddress(uint256 index, address user);\\n    event wav3s__process__InvalidAppAddress(uint256 index, string error);\\n    event wav3s__process__InvalidPubId(uint256 index, string error);\\n    event wav3s__process__AppAddressNotWhitelisted(uint256 index, string error);\\n    event wav3s__process__InvalidpubOwnerAddress(uint256 index, string error);\\n    //\\n}\"\r\n    },\r\n    \"contracts/RaffleStateLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n// Define the RaffleState enum in a separate library\\nlibrary RaffleStateLibrary {\\n    enum RaffleState {\\n        OPEN,\\n        CLOSED\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@chainlink/=node_modules/@chainlink/\",\r\n      \"@eth-optimism/=node_modules/@eth-optimism/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"eth-gas-reporter/=node_modules/eth-gas-reporter/\",\r\n      \"hardhat/=node_modules/hardhat/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"enum RaffleStateLibrary.RaffleState\",\"name\":\"raffleState\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"raffleEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zurfersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winners\",\"type\":\"uint256\"}],\"name\":\"checkRaffleReqs\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"initiatedAction\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"UserHasActed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"followersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minFollowers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"}],\"name\":\"checkValidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"initiatedAction\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pubOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"raffleEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zurfersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winners\",\"type\":\"uint256\"}],\"name\":\"checkWithdrawalReqs\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"budget_\",\"type\":\"uint256\"}],\"name\":\"requireValidValues1\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raffleDuration_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minFollowers_\",\"type\":\"uint256\"}],\"name\":\"requireValidValues2\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_consumerAppFee\",\"type\":\"uint256\"}],\"name\":\"requireValidValues3\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "wav3sFunctions", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}