{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/token-bridge-relayer/TokenBridgeRelayer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2\\npragma solidity ^0.8.17;\\n\\nimport {IWormhole} from \\\"../interfaces/IWormhole.sol\\\";\\nimport {ITokenBridge} from \\\"../interfaces/ITokenBridge.sol\\\";\\n\\nimport \\\"../libraries/BytesLib.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./TokenBridgeRelayerGovernance.sol\\\";\\nimport \\\"./TokenBridgeRelayerMessages.sol\\\";\\n\\n/**\\n * @title Wormhole Token Bridge Relayer\\n * @notice This contract composes on Wormhole's Token Bridge contracts to faciliate\\n * one-click transfers of Token Bridge supported assets cross chain.\\n */\\ncontract TokenBridgeRelayer is TokenBridgeRelayerGovernance, TokenBridgeRelayerMessages, ReentrancyGuard {\\n    using BytesLib for bytes;\\n\\n    // contract version\\n    string public constant VERSION = \\\"0.2.0\\\";\\n\\n    constructor(\\n        address tokenBridge_,\\n        address wethAddress,\\n        address feeRecipient_,\\n        address ownerAssistant_,\\n        bool unwrapWeth_\\n    ) {\\n        require(tokenBridge_ != address(0), \\\"invalid token bridge address\\\");\\n        require(wethAddress != address(0), \\\"invalid weth address\\\");\\n        require(feeRecipient_ != address(0), \\\"invalid fee recipient\\\");\\n        require(ownerAssistant_ != address(0), \\\"invalid owner assistant\\\");\\n\\n        // set initial state\\n        setOwner(msg.sender);\\n        setFeeRecipient(feeRecipient_);\\n        setTokenBridge(tokenBridge_);\\n        setWethAddress(wethAddress);\\n        setOwnerAssistant(ownerAssistant_);\\n        setUnwrapWethFlag(unwrapWeth_);\\n\\n        // fetch wormhole info from token bridge\\n        ITokenBridge bridge = ITokenBridge(tokenBridge_);\\n        setChainId(bridge.chainId());\\n        setWormhole(address(bridge.wormhole()));\\n\\n        // set the initial swapRate/relayer precisions to 1e8\\n        setSwapRatePrecision(1e8);\\n        setRelayerFeePrecision(1e8);\\n    }\\n\\n    /**\\n     * @notice Emitted when a transfer is completed by the Wormhole token bridge\\n     * @param emitterChainId Wormhole chain ID of emitter contract on the source chain\\n     * @param emitterAddress Address (bytes32 zero-left-padded) of emitter on the source chain\\n     * @param sequence Sequence of the Wormhole message\\n     */\\n    event TransferRedeemed(\\n        uint16 indexed emitterChainId,\\n        bytes32 indexed emitterAddress,\\n        uint64 indexed sequence\\n    );\\n\\n    /**\\n     * @notice Emitted when a swap is executed with an off-chain relayer\\n     * @param recipient Address of the recipient of the native assets\\n     * @param relayer Address of the relayer that performed the swap\\n     * @param token Address of the token being swapped\\n     * @param tokenAmount Amount of token being swapped\\n     * @param nativeAmount Amount of native assets swapped for tokens\\n     */\\n    event SwapExecuted(\\n        address indexed recipient,\\n        address indexed relayer,\\n        address indexed token,\\n        uint256 tokenAmount,\\n        uint256 nativeAmount\\n    );\\n\\n    /**\\n     * @notice Calls Wormhole's Token Bridge contract to emit a contract-controlled\\n     * transfer. The transfer message includes an arbitrary payload with instructions\\n     * for how to handle relayer payments on the target contract and the quantity of\\n     * tokens to convert into native assets for the user.\\n     * @param token ERC20 token address to transfer cross chain.\\n     * @param amount Quantity of tokens to be transferred.\\n     * @param toNativeTokenAmount Amount of tokens to swap into native assets on\\n     * the target chain.\\n     * @param targetChain Wormhole chain ID of the target blockchain.\\n     * @param targetRecipient User's wallet address on the target blockchain in bytes32 format\\n     * (zero-left-padded).\\n     * @param batchId ID for Wormhole message batching\\n     * @return messageSequence Wormhole sequence for emitted TransferTokensWithRelay message.\\n     */\\n    function transferTokensWithRelay(\\n        address token,\\n        uint256 amount,\\n        uint256 toNativeTokenAmount,\\n        uint16 targetChain,\\n        bytes32 targetRecipient,\\n        uint32 batchId\\n    ) public payable nonReentrant notPaused returns (uint64 messageSequence) {\\n        // Cache wormhole fee and confirm that the user has passed enough\\n        // value to cover the wormhole protocol fee.\\n        uint256 wormholeFee = wormhole().messageFee();\\n        require(msg.value == wormholeFee, \\\"insufficient value\\\");\\n\\n        // Cache token decimals, and remove dust from the amount argument. This\\n        // ensures that the dust is never transferred to this contract.\\n        uint8 tokenDecimals = getDecimals(token);\\n        amount = denormalizeAmount(\\n            normalizeAmount(amount, tokenDecimals),\\n            tokenDecimals\\n        );\\n\\n        // Transfer tokens from user to the this contract, and\\n        // override amount with actual amount received.\\n        amount = custodyTokens(token, amount);\\n\\n        // call the internal _transferTokensWithRelay function\\n        messageSequence = _transferTokensWithRelay(\\n            InternalTransferParams({\\n                token: token,\\n                amount: amount,\\n                tokenDecimals: tokenDecimals,\\n                toNativeTokenAmount: toNativeTokenAmount,\\n                targetChain: targetChain,\\n                targetRecipient: targetRecipient\\n            }),\\n            batchId,\\n            wormholeFee\\n        );\\n    }\\n\\n    /**\\n     * @notice Wraps Ether and calls Wormhole's Token Bridge contract to emit\\n     * a contract-controlled transfer. The transfer message includes an arbitrary\\n     * payload with instructions for how to handle relayer payments on the target\\n     * contract and the quantity of tokens to convert into native assets for the user.\\n     * @param toNativeTokenAmount Amount of tokens to swap into native assets on\\n     * the target chain.\\n     * @param targetChain Wormhole chain ID of the target blockchain.\\n     * @param targetRecipient User's wallet address on the target blockchain in bytes32 format\\n     * (zero-left-padded).\\n     * @param batchId ID for Wormhole message batching\\n     * @return messageSequence Wormhole sequence for emitted TransferTokensWithRelay message.\\n     */\\n    function wrapAndTransferEthWithRelay(\\n        uint256 toNativeTokenAmount,\\n        uint16 targetChain,\\n        bytes32 targetRecipient,\\n        uint32 batchId\\n    ) public payable notPaused returns (uint64 messageSequence) {\\n        require(unwrapWeth(), \\\"WETH functionality not supported\\\");\\n\\n        // Cache wormhole fee and confirm that the user has passed enough\\n        // value to cover the wormhole protocol fee.\\n        uint256 wormholeFee = wormhole().messageFee();\\n        require(msg.value > wormholeFee, \\\"insufficient value\\\");\\n\\n        // remove the wormhole protocol fee from the amount\\n        uint256 amount = msg.value - wormholeFee;\\n\\n        // refund dust\\n        uint256 dust = amount - denormalizeAmount(normalizeAmount(amount, 18), 18);\\n        if (dust > 0) {\\n            payable(msg.sender).transfer(dust);\\n        }\\n\\n        // remove dust from amount and cache WETH\\n        uint256 amountLessDust = amount - dust;\\n        IWETH weth = WETH();\\n\\n        // deposit into the WETH contract\\n        weth.deposit{\\n            value : amountLessDust\\n        }();\\n\\n        // call the internal _transferTokensWithRelay function\\n        messageSequence = _transferTokensWithRelay(\\n            InternalTransferParams({\\n                token: address(weth),\\n                tokenDecimals: 18,\\n                amount: amountLessDust,\\n                toNativeTokenAmount: toNativeTokenAmount,\\n                targetChain: targetChain,\\n                targetRecipient: targetRecipient\\n            }),\\n            batchId,\\n            wormholeFee\\n        );\\n    }\\n\\n    function _transferTokensWithRelay(\\n        InternalTransferParams memory params,\\n        uint32 batchId,\\n        uint256 wormholeFee\\n    ) internal returns (uint64 messageSequence) {\\n        // sanity check function arguments\\n        require(isAcceptedToken(params.token), \\\"token not accepted\\\");\\n        require(\\n            params.targetRecipient != bytes32(0),\\n            \\\"targetRecipient cannot be bytes32(0)\\\"\\n        );\\n\\n        /**\\n         * Cache the normalized amount and verify that it's nonzero.\\n         * The token bridge peforms the same operation before encoding\\n         * the amount in the `TransferWithPayload` message.\\n         */\\n        uint256 normalizedAmount = normalizeAmount(\\n            params.amount,\\n            params.tokenDecimals\\n        );\\n        require(normalizedAmount > 0, \\\"normalized amount must be > 0\\\");\\n\\n        // normalized toNativeTokenAmount should be nonzero\\n        uint256 normalizedToNativeTokenAmount = normalizeAmount(\\n            params.toNativeTokenAmount,\\n            params.tokenDecimals\\n        );\\n        require(\\n            params.toNativeTokenAmount == 0 || normalizedToNativeTokenAmount > 0,\\n            \\\"invalid toNativeTokenAmount\\\"\\n        );\\n\\n        // Cache the target contract address and verify that there\\n        // is a registered contract for the specified targetChain.\\n        bytes32 targetContract = getRegisteredContract(params.targetChain);\\n        require(targetContract != bytes32(0), \\\"target not registered\\\");\\n\\n        // Confirm that the user has sent enough tokens to cover the native swap\\n        // on the target chain and to pay the relayer fee.\\n        uint256 normalizedRelayerFee = normalizeAmount(\\n            calculateRelayerFee(\\n                params.targetChain,\\n                params.token,\\n                params.tokenDecimals\\n            ),\\n            params.tokenDecimals\\n        );\\n        require(\\n            normalizedAmount > normalizedRelayerFee + normalizedToNativeTokenAmount,\\n            \\\"insufficient amount\\\"\\n        );\\n\\n        /**\\n         * Encode instructions (TransferWithRelay) to send with the token transfer.\\n         * The `targetRecipient` address is in bytes32 format (zero-left-padded) to\\n         * support non-evm smart contracts that have addresses that are longer\\n         * than 20 bytes.\\n         *\\n         * We normalize the relayerFee and toNativeTokenAmount to support\\n         * non-evm smart contracts that can only handle uint64.max values.\\n         */\\n        bytes memory messagePayload = encodeTransferWithRelay(\\n            TransferWithRelay({\\n                payloadId: 1,\\n                targetRelayerFee: normalizedRelayerFee,\\n                toNativeTokenAmount: normalizedToNativeTokenAmount,\\n                targetRecipient: params.targetRecipient\\n            })\\n        );\\n\\n        // cache TokenBridge instance\\n        ITokenBridge bridge = tokenBridge();\\n\\n        // approve the token bridge to spend the specified tokens\\n        SafeERC20.safeApprove(\\n            IERC20(params.token),\\n            address(bridge),\\n            params.amount\\n        );\\n\\n        /**\\n         * Call `transferTokensWithPayload` method on the token bridge and pay\\n         * the Wormhole network fee. The token bridge will emit a Wormhole\\n         * message with an encoded `TransferWithPayload` struct (see the\\n         * ITokenBridge.sol interface file in this repo).\\n         */\\n        messageSequence = bridge.transferTokensWithPayload{value: wormholeFee}(\\n            params.token,\\n            params.amount,\\n            params.targetChain,\\n            targetContract,\\n            batchId,\\n            messagePayload\\n        );\\n    }\\n\\n    /**\\n     * @notice Calls Wormhole's Token Bridge contract to complete token transfers. Takes\\n     * custody of the wrapped (or released) tokens and sends the tokens to the target recipient.\\n     * It pays the fee recipient in the minted token denomination. If requested by the user,\\n     * it will perform a swap with the off-chain relayer to provide the user with native assets.\\n     * If the `token` being transferred is WETH, the contract will unwrap native assets and send\\n     * the transferred amount to the recipient and pay the fee recipient in native assets.\\n     * @dev reverts if:\\n     * - the transferred token is not accepted by this contract\\n     * - the transffered token is not attested on this blockchain's Token Bridge contract\\n     * - the emitter of the transfer message is not registered with this contract\\n     * - the relayer fails to provide enough native assets to faciliate a native swap\\n     * - the recipient attempts to swap native assets when performing a self redemption\\n     * @param encodedTransferMessage Attested `TransferWithPayload` wormhole message.\\n     */\\n    function completeTransferWithRelay(bytes calldata encodedTransferMessage) public payable {\\n        // complete the transfer by calling the token bridge\\n        (bytes memory payload, uint256 amount, address token) =\\n             _completeTransfer(encodedTransferMessage);\\n\\n        // parse the payload into the `TransferWithRelay` struct\\n        TransferWithRelay memory transferWithRelay = decodeTransferWithRelay(\\n            payload\\n        );\\n\\n        // cache the recipient address and unwrap weth flag\\n        address recipient = bytes32ToAddress(transferWithRelay.targetRecipient);\\n        bool unwrapWeth = unwrapWeth();\\n\\n        // handle self redemptions\\n        if (msg.sender == recipient) {\\n            _completeSelfRedemption(\\n                token,\\n                recipient,\\n                amount,\\n                unwrapWeth\\n            );\\n\\n            // bail out\\n            return;\\n        }\\n\\n        // cache token decimals\\n        uint8 tokenDecimals = getDecimals(token);\\n\\n        // denormalize the encoded relayerFee\\n        transferWithRelay.targetRelayerFee = denormalizeAmount(\\n            transferWithRelay.targetRelayerFee,\\n            tokenDecimals\\n        );\\n\\n        // unwrap and transfer ETH\\n        if (token == address(WETH())) {\\n            _completeWethTransfer(\\n                amount,\\n                recipient,\\n                transferWithRelay.targetRelayerFee,\\n                unwrapWeth\\n            );\\n\\n            // bail out\\n            return;\\n        }\\n\\n        // handle native asset payments and refunds\\n        if (transferWithRelay.toNativeTokenAmount > 0) {\\n            // denormalize the toNativeTokenAmount\\n            transferWithRelay.toNativeTokenAmount = denormalizeAmount(\\n                transferWithRelay.toNativeTokenAmount,\\n                tokenDecimals\\n            );\\n\\n            /**\\n             * Compute the maximum amount of tokens that the user is allowed\\n             * to swap for native assets.\\n             *\\n             * Override the toNativeTokenAmount in transferWithRelay if the\\n             * toNativeTokenAmount is greater than the maxToNativeAllowed.\\n             *\\n             * Compute the amount of native assets to send the recipient.\\n             */\\n            uint256 maxToNativeAllowed = calculateMaxSwapAmountIn(token);\\n            if (transferWithRelay.toNativeTokenAmount > maxToNativeAllowed) {\\n                transferWithRelay.toNativeTokenAmount = maxToNativeAllowed;\\n            }\\n            // compute amount of native asset to pay the recipient\\n            uint256 nativeAmountForRecipient = calculateNativeSwapAmountOut(\\n                token,\\n                transferWithRelay.toNativeTokenAmount\\n            );\\n\\n            /**\\n             * The nativeAmountForRecipient can be zero if the user specifed\\n             * a toNativeTokenAmount that is too little to convert to native\\n             * asset. We need to override the toNativeTokenAmount to be zero\\n             * if that is the case, that way the user receives the full amount\\n             * of transferred tokens.\\n             */\\n            if (nativeAmountForRecipient > 0) {\\n                // check to see if the relayer sent enough value\\n                require(\\n                    msg.value >= nativeAmountForRecipient,\\n                    \\\"insufficient native asset amount\\\"\\n                );\\n\\n                // refund excess native asset to relayer if applicable\\n                uint256 relayerRefund = msg.value - nativeAmountForRecipient;\\n                if (relayerRefund > 0) {\\n                    payable(msg.sender).transfer(relayerRefund);\\n                }\\n\\n                // send requested native asset to target recipient\\n                payable(recipient).transfer(nativeAmountForRecipient);\\n\\n                // emit swap event\\n                emit SwapExecuted(\\n                    recipient,\\n                    msg.sender,\\n                    token,\\n                    transferWithRelay.toNativeTokenAmount,\\n                    nativeAmountForRecipient\\n                );\\n            } else {\\n                // override the toNativeTokenAmount in transferWithRelay\\n                transferWithRelay.toNativeTokenAmount = 0;\\n\\n                // refund the relayer any native asset sent to this contract\\n                if (msg.value > 0) {\\n                    payable(msg.sender).transfer(msg.value);\\n                }\\n            }\\n        }\\n\\n        // add the token swap amount to the relayer fee\\n        uint256 amountForRelayer =\\n            transferWithRelay.targetRelayerFee + transferWithRelay.toNativeTokenAmount;\\n\\n        // pay the fee recipient if amountForRelayer > 0\\n        if (amountForRelayer > 0) {\\n            SafeERC20.safeTransfer(\\n                IERC20(token),\\n                feeRecipient(),\\n                amountForRelayer\\n            );\\n        }\\n\\n        // pay the target recipient the remaining tokens\\n        SafeERC20.safeTransfer(\\n            IERC20(token),\\n            recipient,\\n            amount - amountForRelayer\\n        );\\n    }\\n\\n    function _completeTransfer(\\n        bytes memory encodedTransferMessage\\n    ) internal returns (bytes memory, uint256, address) {\\n        /**\\n         * parse the encoded Wormhole message\\n         *\\n         * SECURITY: This message not been verified by the Wormhole core layer yet.\\n         * The encoded payload can only be trusted once the message has been verified\\n         * by the Wormhole core contract. In this case, the message will be verified\\n         * by a call to the token bridge contract in subsequent actions.\\n         */\\n        IWormhole.VM memory parsedMessage = wormhole().parseVM(\\n            encodedTransferMessage\\n        );\\n\\n        /**\\n         * The amount encoded in the payload could be incorrect,\\n         * since fee-on-transfer tokens are supported by the token bridge.\\n         *\\n         * NOTE: The token bridge truncates the encoded amount for any token\\n         * with decimals greater than 8. This is to support blockchains that\\n         * cannot handle transfer amounts exceeding max(uint64).\\n         */\\n        address localTokenAddress = fetchLocalAddressFromTransferMessage(\\n            parsedMessage.payload\\n        );\\n        require(isAcceptedToken(localTokenAddress), \\\"token not registered\\\");\\n\\n        // check balance before completing the transfer\\n        uint256 balanceBefore = getBalance(localTokenAddress);\\n\\n        // cache the token bridge instance\\n        ITokenBridge bridge = tokenBridge();\\n\\n        /**\\n         * Call `completeTransferWithPayload` on the token bridge. This\\n         * method acts as a reentrancy protection since it does not allow\\n         * transfers to be redeemed more than once.\\n         */\\n        bytes memory transferPayload = bridge.completeTransferWithPayload(\\n            encodedTransferMessage\\n        );\\n\\n        // compute and save the balance difference after completing the transfer\\n        uint256 amountReceived = getBalance(localTokenAddress) - balanceBefore;\\n\\n        // parse the wormhole message payload into the `TransferWithPayload` struct\\n        ITokenBridge.TransferWithPayload memory transfer =\\n            bridge.parseTransferWithPayload(transferPayload);\\n\\n        // confirm that the message sender is a registered TokenBridgeRelayer contract\\n        require(\\n            transfer.fromAddress == getRegisteredContract(parsedMessage.emitterChainId),\\n            \\\"contract not registered\\\"\\n        );\\n\\n        // emit event with information about the TransferWithPayload message\\n        emit TransferRedeemed(\\n            parsedMessage.emitterChainId,\\n            parsedMessage.emitterAddress,\\n            parsedMessage.sequence\\n        );\\n\\n        return (\\n            transfer.payload,\\n            amountReceived,\\n            localTokenAddress\\n        );\\n    }\\n\\n    function _completeSelfRedemption(\\n        address token,\\n        address recipient,\\n        uint256 amount,\\n        bool unwrapWeth\\n    ) internal {\\n        // revert if the caller sends ether to this contract\\n        require(msg.value == 0, \\\"recipient cannot swap native assets\\\");\\n\\n        // cache WETH instance\\n        IWETH weth = WETH();\\n\\n        // transfer the full amount to the recipient\\n        if (token == address(weth) && unwrapWeth) {\\n            // withdraw weth and send to the recipient\\n            weth.withdraw(amount);\\n            payable(recipient).transfer(amount);\\n        } else {\\n            SafeERC20.safeTransfer(\\n                IERC20(token),\\n                recipient,\\n                amount\\n            );\\n        }\\n    }\\n\\n    function _completeWethTransfer(\\n        uint256 amount,\\n        address recipient,\\n        uint256 relayerFee,\\n        bool unwrapWeth\\n    ) internal {\\n        // revert if the relayer sends ether to this contract\\n        require(msg.value == 0, \\\"value must be zero\\\");\\n\\n        /**\\n         * Check if the weth is unwrappable. Some wrapped native assets\\n         * are not unwrappable (e.g. CELO) and must be transferred via\\n         * the ERC20 interface.\\n         */\\n        if (unwrapWeth) {\\n            // withdraw eth\\n            WETH().withdraw(amount);\\n\\n            // transfer eth to recipient\\n            payable(recipient).transfer(amount - relayerFee);\\n\\n            // transfer relayer fee to the fee recipient\\n            if (relayerFee > 0) {\\n                payable(feeRecipient()).transfer(relayerFee);\\n            }\\n        } else {\\n            // cache WETH instance\\n            IWETH weth = WETH();\\n\\n            // transfer the native asset to the caller\\n            SafeERC20.safeTransfer(\\n                IERC20(address(weth)),\\n                recipient,\\n                amount - relayerFee\\n            );\\n\\n            // transfer relayer fee to the fee recipient\\n            if (relayerFee > 0) {\\n                SafeERC20.safeTransfer(\\n                    IERC20(address(weth)),\\n                    feeRecipient(),\\n                    relayerFee\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Parses the encoded address and chainId from a `TransferWithPayload`\\n     * message. Finds the address of the wrapped token contract if the token is not\\n     * native to this chain.\\n     * @param payload Encoded `TransferWithPayload` message\\n     * @return localAddress Address of the encoded (bytes32 format) token address on\\n     * this chain.\\n     */\\n    function fetchLocalAddressFromTransferMessage(\\n        bytes memory payload\\n    ) public view returns (address localAddress) {\\n        // parse the source token address and chainId\\n        bytes32 sourceAddress = payload.toBytes32(33);\\n        uint16 tokenChain = payload.toUint16(65);\\n\\n        // Fetch the wrapped address from the token bridge if the token\\n        // is not from this chain.\\n        if (tokenChain != chainId()) {\\n            // identify wormhole token bridge wrapper\\n            localAddress = tokenBridge().wrappedAsset(tokenChain, sourceAddress);\\n            require(localAddress != address(0), \\\"token not attested\\\");\\n        } else {\\n            // return the encoded address if the token is native to this chain\\n            localAddress = bytes32ToAddress(sourceAddress);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the max amount of tokens the user can convert to\\n     * native assets on this chain.\\n     * @dev The max amount of native assets the contract will swap with the user\\n     * is governed by the `maxNativeSwapAmount` state variable.\\n     * @param token Address of token being transferred.\\n     * @return maxAllowed The maximum number of tokens the user is allowed to\\n     * swap for native assets.\\n     */\\n    function calculateMaxSwapAmountIn(\\n        address token\\n    ) public view returns (uint256 maxAllowed) {\\n        // fetch the decimals for the token and native token\\n        uint8 tokenDecimals = getDecimals(token);\\n        uint8 nativeDecimals = getDecimals(address(WETH()));\\n\\n        if (tokenDecimals > nativeDecimals) {\\n            maxAllowed =\\n                maxNativeSwapAmount(token) * nativeSwapRate(token) *\\n                10 ** (tokenDecimals - nativeDecimals) / swapRatePrecision();\\n        } else {\\n            maxAllowed =\\n                (maxNativeSwapAmount(token) * nativeSwapRate(token)) /\\n                (10 ** (nativeDecimals - tokenDecimals) * swapRatePrecision());\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the amount of native assets that a user will receive\\n     * when swapping transferred tokens for native assets.\\n     * @param token Address of token being transferred.\\n     * @param toNativeAmount Quantity of tokens to be converted to native assets.\\n     * @return nativeAmount The exchange rate between native assets and the `toNativeAmount`\\n     * of transferred tokens.\\n     */\\n    function calculateNativeSwapAmountOut(\\n        address token,\\n        uint256 toNativeAmount\\n    ) public view returns (uint256 nativeAmount) {\\n        // fetch the decimals for the token and native token\\n        uint8 tokenDecimals = getDecimals(token);\\n        uint8 nativeDecimals = getDecimals(address(WETH()));\\n\\n        if (tokenDecimals > nativeDecimals) {\\n            nativeAmount =\\n                swapRatePrecision() * toNativeAmount /\\n                (nativeSwapRate(token) * 10 ** (tokenDecimals - nativeDecimals));\\n        } else {\\n            nativeAmount =\\n                swapRatePrecision() * toNativeAmount *\\n                10 ** (nativeDecimals - tokenDecimals) /\\n                nativeSwapRate(token);\\n        }\\n    }\\n\\n    /**\\n     * @notice Converts the USD denominated relayer fee into the specified token\\n     * denomination.\\n     * @param targetChainId Wormhole chain ID of the target blockchain.\\n     * @param token Address of token being transferred.\\n     * @param decimals Token decimals of token being transferred.\\n     * @return feeInTokenDenomination Relayer fee denominated in tokens.\\n     */\\n    function calculateRelayerFee(\\n        uint16 targetChainId,\\n        address token,\\n        uint8 decimals\\n    ) public view returns (uint256 feeInTokenDenomination) {\\n        // cache swap rate\\n        uint256 tokenSwapRate = swapRate(token);\\n        require(tokenSwapRate != 0, \\\"swap rate not set\\\");\\n        feeInTokenDenomination =\\n            10 ** decimals * relayerFee(targetChainId) * swapRatePrecision() /\\n            (tokenSwapRate * relayerFeePrecision());\\n    }\\n\\n    function custodyTokens(\\n        address token,\\n        uint256 amount\\n    ) internal returns (uint256) {\\n        // query own token balance before transfer\\n        uint256 balanceBefore = getBalance(token);\\n\\n        // deposit tokens\\n        SafeERC20.safeTransferFrom(\\n            IERC20(token),\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n\\n        // return the balance difference\\n        return getBalance(token) - balanceBefore;\\n    }\\n\\n    function bytes32ToAddress(bytes32 address_) internal pure returns (address) {\\n        require(bytes12(address_) == 0, \\\"invalid EVM address\\\");\\n        return address(uint160(uint256(address_)));\\n    }\\n\\n    // necessary for receiving native assets\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IWormhole.sol\": {\r\n      \"content\": \"// contracts/Messages.sol\\n// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.17;\\n\\ninterface IWormhole {\\n    struct GuardianSet {\\n        address[] keys;\\n        uint32 expirationTime;\\n    }\\n\\n    struct Signature {\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n        uint8 guardianIndex;\\n    }\\n\\n    struct VM {\\n        uint8 version;\\n        uint32 timestamp;\\n        uint32 nonce;\\n        uint16 emitterChainId;\\n        bytes32 emitterAddress;\\n        uint64 sequence;\\n        uint8 consistencyLevel;\\n        bytes payload;\\n\\n        uint32 guardianSetIndex;\\n        Signature[] signatures;\\n\\n        bytes32 hash;\\n    }\\n\\n    event LogMessagePublished(address indexed sender, uint64 sequence, uint32 nonce, bytes payload, uint8 consistencyLevel);\\n\\n    function publishMessage(\\n        uint32 nonce,\\n        bytes memory payload,\\n        uint8 consistencyLevel\\n    ) external payable returns (uint64 sequence);\\n\\n    function parseAndVerifyVM(bytes calldata encodedVM) external view returns (VM memory vm, bool valid, string memory reason);\\n\\n    function verifyVM(VM memory vm) external view returns (bool valid, string memory reason);\\n\\n    function verifySignatures(bytes32 hash, Signature[] memory signatures, GuardianSet memory guardianSet) external pure returns (bool valid, string memory reason);\\n\\n    function parseVM(bytes memory encodedVM) external pure returns (VM memory vm);\\n\\n    function getGuardianSet(uint32 index) external view returns (GuardianSet memory);\\n\\n    function getCurrentGuardianSetIndex() external view returns (uint32);\\n\\n    function getGuardianSetExpiry() external view returns (uint32);\\n\\n    function governanceActionIsConsumed(bytes32 hash) external view returns (bool);\\n\\n    function isInitialized(address impl) external view returns (bool);\\n\\n    function chainId() external view returns (uint16);\\n\\n    function governanceChainId() external view returns (uint16);\\n\\n    function governanceContract() external view returns (bytes32);\\n\\n    function messageFee() external view returns (uint256);\\n\\n    function evmChainId() external view returns (uint256);\\n\\n    function nextSequence(address emitter) external view returns (uint64);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ITokenBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./IWETH.sol\\\";\\nimport \\\"./IWormhole.sol\\\";\\n\\ninterface ITokenBridge {\\n    struct Transfer {\\n        uint8 payloadID;\\n        uint256 amount;\\n        bytes32 tokenAddress;\\n        uint16 tokenChain;\\n        bytes32 to;\\n        uint16 toChain;\\n        uint256 fee;\\n    }\\n\\n    struct TransferWithPayload {\\n        uint8 payloadID;\\n        uint256 amount;\\n        bytes32 tokenAddress;\\n        uint16 tokenChain;\\n        bytes32 to;\\n        uint16 toChain;\\n        bytes32 fromAddress;\\n        bytes payload;\\n    }\\n\\n    struct AssetMeta {\\n        uint8 payloadID;\\n        bytes32 tokenAddress;\\n        uint16 tokenChain;\\n        uint8 decimals;\\n        bytes32 symbol;\\n        bytes32 name;\\n    }\\n\\n    struct RegisterChain {\\n        bytes32 module;\\n        uint8 action;\\n        uint16 chainId;\\n\\n        uint16 emitterChainID;\\n        bytes32 emitterAddress;\\n    }\\n\\n     struct UpgradeContract {\\n        bytes32 module;\\n        uint8 action;\\n        uint16 chainId;\\n\\n        bytes32 newContract;\\n    }\\n\\n    struct RecoverChainId {\\n        bytes32 module;\\n        uint8 action;\\n\\n        uint256 evmChainId;\\n        uint16 newChainId;\\n    }\\n\\n    event ContractUpgraded(address indexed oldContract, address indexed newContract);\\n\\n    function _parseTransferCommon(bytes memory encoded) external pure returns (Transfer memory transfer);\\n\\n    function attestToken(address tokenAddress, uint32 nonce) external payable returns (uint64 sequence);\\n\\n    function wrapAndTransferETH(uint16 recipientChain, bytes32 recipient, uint256 arbiterFee, uint32 nonce) external payable returns (uint64 sequence);\\n\\n    function wrapAndTransferETHWithPayload(uint16 recipientChain, bytes32 recipient, uint32 nonce, bytes memory payload) external payable returns (uint64 sequence);\\n\\n    function transferTokens(address token, uint256 amount, uint16 recipientChain, bytes32 recipient, uint256 arbiterFee, uint32 nonce) external payable returns (uint64 sequence);\\n\\n    function transferTokensWithPayload(address token, uint256 amount, uint16 recipientChain, bytes32 recipient, uint32 nonce, bytes memory payload) external payable returns (uint64 sequence);\\n\\n    function updateWrapped(bytes memory encodedVm) external returns (address token);\\n\\n    function createWrapped(bytes memory encodedVm) external returns (address token);\\n\\n    function completeTransferWithPayload(bytes memory encodedVm) external returns (bytes memory);\\n\\n    function completeTransferAndUnwrapETHWithPayload(bytes memory encodedVm) external returns (bytes memory);\\n\\n    function completeTransfer(bytes memory encodedVm) external;\\n\\n    function completeTransferAndUnwrapETH(bytes memory encodedVm) external;\\n\\n    function encodeAssetMeta(AssetMeta memory meta) external pure returns (bytes memory encoded);\\n\\n    function encodeTransfer(Transfer memory transfer) external pure returns (bytes memory encoded);\\n\\n    function encodeTransferWithPayload(TransferWithPayload memory transfer) external pure returns (bytes memory encoded);\\n\\n    function parsePayloadID(bytes memory encoded) external pure returns (uint8 payloadID);\\n\\n    function parseAssetMeta(bytes memory encoded) external pure returns (AssetMeta memory meta);\\n\\n    function parseTransfer(bytes memory encoded) external pure returns (Transfer memory transfer);\\n\\n    function parseTransferWithPayload(bytes memory encoded) external pure returns (TransferWithPayload memory transfer);\\n\\n    function governanceActionIsConsumed(bytes32 hash) external view returns (bool);\\n\\n    function isInitialized(address impl) external view returns (bool);\\n\\n    function isTransferCompleted(bytes32 hash) external view returns (bool);\\n\\n    function wormhole() external view returns (IWormhole);\\n\\n    function chainId() external view returns (uint16);\\n\\n    function evmChainId() external view returns (uint256);\\n\\n    function isFork() external view returns (bool);\\n\\n    function governanceChainId() external view returns (uint16);\\n\\n    function governanceContract() external view returns (bytes32);\\n\\n    function wrappedAsset(uint16 tokenChainId, bytes32 tokenAddress) external view returns (address);\\n\\n    function bridgeContracts(uint16 chainId_) external view returns (bytes32);\\n\\n    function tokenImplementation() external view returns (address);\\n\\n    function WETH() external view returns (IWETH);\\n\\n    function outstandingBridged(address token) external view returns (uint256);\\n\\n    function isWrappedAsset(address token) external view returns (bool);\\n\\n    function finality() external view returns (uint8);\\n\\n    function implementation() external view returns (address);\\n\\n    function initialize() external;\\n\\n    function registerChain(bytes memory encodedVM) external;\\n\\n    function upgrade(bytes memory encodedVM) external;\\n\\n    function submitRecoverChainId(bytes memory encodedVM) external;\\n\\n    function parseRegisterChain(bytes memory encoded) external pure returns (RegisterChain memory chain);\\n\\n    function parseUpgrade(bytes memory encoded) external pure returns (UpgradeContract memory chain);\\n\\n    function parseRecoverChainId(bytes memory encodedRecoverChainId) external pure returns (RecoverChainId memory rci);\\n}\\n\"\r\n    },\r\n    \"src/libraries/BytesLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\u00e7alo S\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/token-bridge-relayer/TokenBridgeRelayerGovernance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2\\npragma solidity ^0.8.17;\\n\\nimport {IWormhole} from \\\"../interfaces/IWormhole.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./TokenBridgeRelayerGetters.sol\\\";\\nimport \\\"./TokenBridgeRelayerStructs.sol\\\";\\n\\nabstract contract TokenBridgeRelayerGovernance is TokenBridgeRelayerGetters {\\n    event OwnershipTransfered(address indexed oldOwner, address indexed newOwner);\\n    event FeeRecipientUpdated(address indexed oldRecipient, address indexed newRecipient);\\n    event SwapRateUpdated(TokenBridgeRelayerStructs.SwapRateUpdate[] indexed swapRates);\\n\\n    /**\\n     * @notice Starts the ownership transfer process of the contracts. It saves\\n     * an address in the pending owner state variable.\\n     * @param chainId_ Wormhole chain ID.\\n     * @param newOwner Address of the pending owner.\\n     */\\n    function submitOwnershipTransferRequest(\\n        uint16 chainId_,\\n        address newOwner\\n    ) public onlyOwner onlyCurrentChain(chainId_) {\\n        require(newOwner != address(0), \\\"newOwner cannot equal address(0)\\\");\\n\\n        setPendingOwner(newOwner);\\n    }\\n\\n    /**\\n     * @notice Cancels the ownership transfer process.\\n     * @dev Sets the pending owner state variable to the zero address.\\n     */\\n    function cancelOwnershipTransferRequest(\\n        uint16 chainId_\\n    ) public onlyOwner onlyCurrentChain(chainId_) {\\n        setPendingOwner(address(0));\\n    }\\n\\n    /**\\n     * @notice Finalizes the ownership transfer to the pending owner.\\n     * @dev It checks that the caller is the pendingOwner to validate the wallet\\n     * address. It updates the owner state variable with the pendingOwner state\\n     * variable.\\n     */\\n    function confirmOwnershipTransferRequest() public {\\n        // cache the new owner address\\n        address newOwner = pendingOwner();\\n\\n        require(msg.sender == newOwner, \\\"caller must be pendingOwner\\\");\\n\\n        // cache currentOwner for Event\\n        address currentOwner = owner();\\n\\n        // update the owner in the contract state and reset the pending owner\\n        setOwner(newOwner);\\n        setPendingOwner(address(0));\\n\\n        emit OwnershipTransfered(currentOwner, newOwner);\\n    }\\n\\n    /**\\n     * @notice Updates the `ownerAssistant` state variable. This method can\\n     * only be executed by the owner.\\n     * @param chainId_ Wormhole chain ID.\\n     * @param newAssistant Address of the new `ownerAssistant`.\\n     */\\n    function updateOwnerAssistant(\\n        uint16 chainId_,\\n        address newAssistant\\n    ) public onlyOwner onlyCurrentChain(chainId_) {\\n        require(\\n            newAssistant != address(0),\\n            \\\"newAssistant cannot equal address(0)\\\"\\n        );\\n\\n        // update the owner assistant\\n        setOwnerAssistant(newAssistant);\\n    }\\n\\n    /**\\n     * @notice Updates the `feeRecipient` state variable. This method can\\n     * only be executed by the owner.\\n     * @param chainId_ Wormhole chain ID.\\n     * @param newFeeRecipient Address of the new `feeRecipient`.\\n     */\\n    function updateFeeRecipient(\\n        uint16 chainId_,\\n        address newFeeRecipient\\n    ) public onlyOwner onlyCurrentChain(chainId_) {\\n        require(\\n            newFeeRecipient != address(0),\\n            \\\"newFeeRecipient cannot equal address(0)\\\"\\n        );\\n\\n        // cache current fee recipient\\n        address currentFeeRecipient = feeRecipient();\\n\\n        // update the fee recipient\\n        setFeeRecipient(newFeeRecipient);\\n\\n        emit FeeRecipientUpdated(currentFeeRecipient, newFeeRecipient);\\n    }\\n\\n    /**\\n     * @notice Updates the unwrapWeth state variable.\\n     * @dev This variable should only be set to true for chains that\\n     * support a WETH contract. Some chains (e.g. Celo, Karura, Acala)\\n     * do not support a WETH contract, and the address is set as a placeholder\\n     * for the native asset address for swapRate lookups.\\n     * @param chainId_ Wormhole chain ID.\\n     * @param unwrapWeth_ Boolean that determines if WETH is unwrapped\\n     * when transferred back to its native blockchain.\\n     */\\n    function updateUnwrapWethFlag(\\n        uint16 chainId_,\\n        bool unwrapWeth_\\n    ) public onlyOwner onlyCurrentChain(chainId_) {\\n        setUnwrapWethFlag(unwrapWeth_);\\n    }\\n\\n    /**\\n     * @notice Registers foreign Token Bridge Relayer contracts.\\n     * @param chainId_ Wormhole chain ID of the foreign contract.\\n     * @param contractAddress Address of the foreign contract in bytes32 format\\n     * (zero-left-padded address).\\n     */\\n    function registerContract(\\n        uint16 chainId_,\\n        bytes32 contractAddress\\n    ) public onlyOwner {\\n        // sanity check both input arguments\\n        require(\\n            contractAddress != bytes32(0),\\n            \\\"contractAddress cannot equal bytes32(0)\\\"\\n        );\\n        require(\\n            chainId_ != 0 && chainId_ != chainId(),\\n            \\\"chainId_ cannot equal 0 or this chainId\\\"\\n        );\\n\\n        // update the registeredContracts state variable\\n        _registerContract(chainId_, contractAddress);\\n    }\\n\\n    /**\\n     * @notice Register tokens accepted by this contract.\\n     * @param chainId_ Wormhole chain ID.\\n     * @param token Address of the token.\\n     */\\n    function registerToken(\\n        uint16 chainId_,\\n        address token\\n    ) public onlyOwner onlyCurrentChain(chainId_) {\\n        require(token != address(0), \\\"invalid token\\\");\\n\\n        addAcceptedToken(token);\\n    }\\n\\n    /**\\n     * @notice Deregister tokens accepted by this contract.\\n     * @dev The `removeAcceptedToken` function will revert\\n     * if the token is not registered.\\n     * @param chainId_ Wormhole chain ID.\\n     * @param token Address of the token.\\n     */\\n    function deregisterToken(\\n        uint16 chainId_,\\n        address token\\n    ) public onlyOwner onlyCurrentChain(chainId_) {\\n        require(token != address(0), \\\"invalid token\\\");\\n\\n        removeAcceptedToken(token);\\n    }\\n\\n    /**\\n     * @notice Updates the fee for relaying transfers to foreign contracts.\\n     * @param chainId_ Wormhole chain ID.\\n     * @param amount Amount of USD to pay the relayer upon redemption.\\n     * @dev The relayerFee is scaled by the relayerFeePrecision. For example,\\n     * if the relayerFee is $15 and the relayerFeePrecision is 1000000, the\\n     * relayerFee should be set to 15000000.\\n     */\\n    function updateRelayerFee(\\n        uint16 chainId_,\\n        uint256 amount\\n    ) public onlyOwnerOrAssistant {\\n        require(chainId_ != chainId(), \\\"invalid chain\\\");\\n        require(\\n            getRegisteredContract(chainId_) != bytes32(0),\\n            \\\"contract doesn't exist\\\"\\n        );\\n\\n        setRelayerFee(chainId_, amount);\\n    }\\n\\n    /**\\n     * @notice Updates the precision of the relayer fee.\\n     * @param chainId_ Wormhole chain ID.\\n     * @param relayerFeePrecision_ Precision of relayer fee.\\n     */\\n    function updateRelayerFeePrecision(\\n        uint16 chainId_,\\n        uint256 relayerFeePrecision_\\n    ) public onlyOwner onlyCurrentChain(chainId_) {\\n        require(relayerFeePrecision_ > 0, \\\"precision must be > 0\\\");\\n\\n        setRelayerFeePrecision(relayerFeePrecision_);\\n    }\\n\\n    /**\\n     * @notice Updates the swap rates for a batch of tokens.\\n     * @param chainId_ Wormhole chain ID.\\n     * @param swapRateUpdate Array of structs with token -> swap rate pairs.\\n     * @dev The swapRate is the conversion rate using asset prices denominated in\\n     * USD multiplied by the swapRatePrecision. For example, if the conversion\\n     * rate is $15 and the swapRatePrecision is 1000000, the swapRate should be set\\n     * to 15000000.\\n     *\\n     * NOTE: This function does NOT check if a token is specified twice. It is up to the\\n     * owner to correctly construct the `SwapRateUpdate` struct.\\n     */\\n    function updateSwapRate(\\n        uint16 chainId_,\\n        TokenBridgeRelayerStructs.SwapRateUpdate[] calldata swapRateUpdate\\n    ) public onlyOwnerOrAssistant onlyCurrentChain(chainId_) {\\n        // cache length of swapRateUpdate array\\n        uint256 numTokens = swapRateUpdate.length;\\n        require(numTokens > 0, \\\"invalid array size\\\");\\n\\n        // set the swap rate for each token\\n        for (uint256 i = 0; i < numTokens;) {\\n            require(\\n                isAcceptedToken(swapRateUpdate[i].token),\\n                \\\"token not accepted\\\"\\n            );\\n            require(\\n                swapRateUpdate[i].value > 0,\\n                \\\"swap rate must be nonzero\\\"\\n            );\\n\\n            setSwapRate(swapRateUpdate[i].token, swapRateUpdate[i].value);\\n\\n            unchecked { i += 1; }\\n        }\\n\\n        emit SwapRateUpdated(swapRateUpdate);\\n    }\\n\\n    /**\\n     * @notice Updates the precision of the swap rate.\\n     * @param chainId_ Wormhole chain ID.\\n     * @param swapRatePrecision_ Precision of swap rate.\\n     */\\n    function updateSwapRatePrecision(\\n        uint16 chainId_,\\n        uint256 swapRatePrecision_\\n    ) public onlyOwner onlyCurrentChain(chainId_) {\\n        require(swapRatePrecision_ > 0, \\\"precision must be > 0\\\");\\n\\n        setSwapRatePrecision(swapRatePrecision_);\\n    }\\n\\n    /**\\n     * @notice Updates the max amount of native assets the contract will pay\\n     * to the target recipient.\\n     * @param chainId_ Wormhole chain ID.\\n     * @param token Address of the token to update the max native swap amount for.\\n     * @param maxAmount Max amount of native assets.\\n     */\\n    function updateMaxNativeSwapAmount(\\n        uint16 chainId_,\\n        address token,\\n        uint256 maxAmount\\n    ) public onlyOwner onlyCurrentChain(chainId_) {\\n        require(isAcceptedToken(token), \\\"token not accepted\\\");\\n\\n        setMaxNativeSwapAmount(token, maxAmount);\\n    }\\n\\n    /**\\n     * @notice Sets the pause state of the relayer. If paused, token transfer\\n     * requests are blocked. In flight transfers, i.e. those that have a VAA\\n     * emitted, can still be processed if paused.\\n     * @param chainId_ Wormhole chain ID\\n     * @param paused If true, requests for token transfers will be blocked\\n     * and no VAAs will be generated.\\n     */\\n    function setPauseForTransfers(\\n        uint16 chainId_,\\n        bool paused\\n    ) public onlyOwner onlyCurrentChain(chainId_) {\\n        setPaused(paused);\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"caller not the owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwnerOrAssistant() {\\n        require(\\n            owner() == msg.sender ||\\n            ownerAssistant() == msg.sender,\\n            \\\"caller not the owner or assistant\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyCurrentChain(uint16 chainId_) {\\n        require(chainId() == chainId_, \\\"wrong chain\\\");\\n        _;\\n    }\\n\\n    modifier notPaused() {\\n        require(!getPaused(), \\\"relayer is paused\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/token-bridge-relayer/TokenBridgeRelayerMessages.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2\\npragma solidity ^0.8.17;\\n\\nimport \\\"../libraries/BytesLib.sol\\\";\\n\\nimport \\\"./TokenBridgeRelayerStructs.sol\\\";\\n\\nabstract contract TokenBridgeRelayerMessages is TokenBridgeRelayerStructs {\\n    using BytesLib for bytes;\\n\\n    /**\\n     * @notice Encodes the TransferWithRelay struct into bytes.\\n     * @param transfer TransferWithRelay struct.\\n     * @return encoded TransferWithRelay struct encoded into bytes.\\n     */\\n    function encodeTransferWithRelay(\\n        TransferWithRelay memory transfer\\n    ) public pure returns (bytes memory encoded) {\\n       require(transfer.payloadId == 1, \\\"invalid payloadId\\\");\\n        encoded = abi.encodePacked(\\n            transfer.payloadId,\\n            transfer.targetRelayerFee,\\n            transfer.toNativeTokenAmount,\\n            transfer.targetRecipient\\n        );\\n    }\\n\\n    /**\\n     * @notice Decodes an encoded `TransferWithRelay` struct.\\n     * @dev reverts if:\\n     * - the first byte (payloadId) does not equal 1\\n     * - the length of the payload has an unexpected length\\n     * @param encoded Encoded `TransferWithRelay` struct.\\n     * @return transfer `TransferTokenRelay` struct.\\n     */\\n    function decodeTransferWithRelay(\\n        bytes memory encoded\\n    ) public pure returns (TransferWithRelay memory transfer) {\\n        uint256 index = 0;\\n\\n        // parse the payloadId\\n        transfer.payloadId = encoded.toUint8(index);\\n        index += 1;\\n\\n        require(transfer.payloadId == 1, \\\"invalid payloadId\\\");\\n\\n        // target relayer fee\\n        transfer.targetRelayerFee = encoded.toUint256(index);\\n        index += 32;\\n\\n        // amount of tokens to convert to native assets\\n        transfer.toNativeTokenAmount = encoded.toUint256(index);\\n        index += 32;\\n\\n        // recipient of the transfered tokens and native assets\\n        transfer.targetRecipient = encoded.toBytes32(index);\\n        index += 32;\\n\\n        require(index == encoded.length, \\\"invalid message length\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IWETH.sol\": {\r\n      \"content\": \"// contracts/Bridge.sol\\n// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n    function withdraw(uint amount) external;\\n    function balanceOf() external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/token-bridge-relayer/TokenBridgeRelayerGetters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2\\npragma solidity ^0.8.17;\\n\\nimport {IWormhole} from \\\"../interfaces/IWormhole.sol\\\";\\nimport {ITokenBridge} from \\\"../interfaces/ITokenBridge.sol\\\";\\nimport {IWETH} from \\\"../interfaces/IWETH.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./TokenBridgeRelayerSetters.sol\\\";\\n\\nabstract contract TokenBridgeRelayerGetters is TokenBridgeRelayerSetters {\\n    function owner() public view returns (address) {\\n        return _state.owner;\\n    }\\n\\n    function pendingOwner() public view returns (address) {\\n        return _state.pendingOwner;\\n    }\\n\\n    function ownerAssistant() public view returns (address) {\\n        return _state.ownerAssistant;\\n    }\\n\\n    function feeRecipient() public view returns (address) {\\n        return _state.feeRecipient;\\n    }\\n\\n    function wormhole() public view returns (IWormhole) {\\n        return IWormhole(_state.wormhole);\\n    }\\n\\n    function tokenBridge() public view returns (ITokenBridge) {\\n        return ITokenBridge(payable(_state.tokenBridge));\\n    }\\n\\n    function WETH() public view returns (IWETH) {\\n        return IWETH(_state.wethAddress);\\n    }\\n\\n    function unwrapWeth() public view returns (bool) {\\n        return _state.unwrapWeth;\\n    }\\n\\n    function chainId() public view returns (uint16) {\\n        return _state.chainId;\\n    }\\n\\n    function getPaused() public view returns (bool) {\\n        return _state.paused;\\n    }\\n\\n    function getRegisteredContract(uint16 emitterChainId) public view returns (bytes32) {\\n        return _state.registeredContracts[emitterChainId];\\n    }\\n\\n    function swapRatePrecision() public view returns (uint256) {\\n        return _state.swapRatePrecision;\\n    }\\n\\n    function isAcceptedToken(address token) public view returns (bool) {\\n        return _state.acceptedTokens[token];\\n    }\\n\\n    function getAcceptedTokensList() public view returns (address[] memory) {\\n        return _state.acceptedTokensList;\\n    }\\n\\n    function relayerFeePrecision() public view returns (uint256) {\\n        return _state.relayerFeePrecision;\\n    }\\n\\n    function relayerFee(uint16 chainId_) public view returns (uint256) {\\n        return _state.relayerFees[chainId_];\\n    }\\n\\n    function maxNativeSwapAmount(address token) public view returns (uint256) {\\n        return _state.maxNativeSwapAmount[token];\\n    }\\n\\n    function swapRate(address token) public view returns (uint256) {\\n        return _state.swapRates[token];\\n    }\\n\\n    function nativeSwapRate(address token) public view returns (uint256) {\\n        uint256 nativeSwapRate_ = swapRate(_state.wethAddress);\\n        uint256 tokenSwapRate = swapRate(token);\\n\\n        require(\\n            nativeSwapRate_ > 0 && tokenSwapRate > 0,\\n            \\\"swap rate not set\\\"\\n        );\\n\\n        return swapRatePrecision() * nativeSwapRate_ / tokenSwapRate;\\n    }\\n\\n    function normalizeAmount(\\n        uint256 amount,\\n        uint8 decimals\\n    ) public pure returns (uint256) {\\n        if (decimals > 8) {\\n            amount /= 10 ** (decimals - 8);\\n        }\\n        return amount;\\n    }\\n\\n    function denormalizeAmount(\\n        uint256 amount,\\n        uint8 decimals\\n    ) public pure returns (uint256) {\\n        if (decimals > 8) {\\n            amount *= 10 ** (decimals - 8);\\n        }\\n        return amount;\\n    }\\n\\n    function getDecimals(address token) internal view returns (uint8) {\\n        (,bytes memory queriedDecimals) = token.staticcall(\\n            abi.encodeWithSignature(\\\"decimals()\\\")\\n        );\\n        return abi.decode(queriedDecimals, (uint8));\\n    }\\n\\n    function getBalance(address token) internal view returns (uint256 balance) {\\n        // fetch the specified token balance for this contract\\n        (, bytes memory queriedBalance) =\\n            token.staticcall(\\n                abi.encodeWithSelector(IERC20.balanceOf.selector, address(this))\\n            );\\n        balance = abi.decode(queriedBalance, (uint256));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/token-bridge-relayer/TokenBridgeRelayerStructs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2\\npragma solidity ^0.8.17;\\n\\nabstract contract TokenBridgeRelayerStructs {\\n    struct TransferWithRelay {\\n        uint8 payloadId; // == 1\\n        uint256 targetRelayerFee;\\n        uint256 toNativeTokenAmount;\\n        bytes32 targetRecipient;\\n    }\\n\\n    struct InternalTransferParams {\\n        address token;\\n        uint8 tokenDecimals;\\n        uint256 amount;\\n        uint256 toNativeTokenAmount;\\n        uint16 targetChain;\\n        bytes32 targetRecipient;\\n    }\\n\\n    struct SwapRateUpdate {\\n        address token;\\n        uint256 value;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/token-bridge-relayer/TokenBridgeRelayerSetters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2\\npragma solidity ^0.8.17;\\n\\nimport \\\"./TokenBridgeRelayerState.sol\\\";\\n\\nabstract contract TokenBridgeRelayerSetters is TokenBridgeRelayerState {\\n    function setOwner(address owner_) internal {\\n        _state.owner = owner_;\\n    }\\n\\n    function setPendingOwner(address pendingOwner_) internal {\\n        _state.pendingOwner = pendingOwner_;\\n    }\\n\\n    function setOwnerAssistant(address ownerAssistant_) internal {\\n        _state.ownerAssistant = ownerAssistant_;\\n    }\\n\\n    function setFeeRecipient(address feeRecipient_) internal {\\n        _state.feeRecipient = feeRecipient_;\\n    }\\n\\n    function setWormhole(address wormhole_) internal {\\n        _state.wormhole = payable(wormhole_);\\n    }\\n\\n    function setTokenBridge(address tokenBridge_) internal {\\n        _state.tokenBridge = payable(tokenBridge_);\\n    }\\n\\n    function setUnwrapWethFlag(bool unwrapWeth_) internal {\\n        _state.unwrapWeth = unwrapWeth_;\\n    }\\n\\n    function setWethAddress(address weth_) internal {\\n        _state.wethAddress = weth_;\\n    }\\n\\n    function setChainId(uint16 chainId_) internal {\\n        _state.chainId = chainId_;\\n    }\\n\\n    function setPaused(bool paused) internal {\\n        _state.paused = paused;\\n    }\\n\\n    function _registerContract(uint16 chainId_, bytes32 contract_) internal {\\n        _state.registeredContracts[chainId_] = contract_;\\n    }\\n\\n    function setSwapRatePrecision(uint256 precision) internal {\\n        _state.swapRatePrecision = precision;\\n    }\\n\\n    function setRelayerFeePrecision(uint256 precision) internal {\\n        _state.relayerFeePrecision = precision;\\n    }\\n\\n    function addAcceptedToken(address token) internal {\\n        require(\\n            _state.acceptedTokens[token] == false,\\n            \\\"token already registered\\\"\\n        );\\n        _state.acceptedTokens[token] = true;\\n        _state.acceptedTokensList.push(token);\\n    }\\n\\n    function removeAcceptedToken(address token) internal {\\n        require(\\n            _state.acceptedTokens[token],\\n            \\\"token not registered\\\"\\n        );\\n\\n        // Remove the token from the acceptedTokens mapping, and\\n        // clear the token's swapRate and maxNativeSwapAmount.\\n        _state.acceptedTokens[token] = false;\\n        _state.swapRates[token] = 0;\\n        _state.maxNativeSwapAmount[token] = 0;\\n\\n        // cache array length\\n        uint256 length_ = _state.acceptedTokensList.length;\\n\\n        // Replace `token` in the acceptedTokensList with the last\\n        // element in the acceptedTokensList array.\\n        uint256 i = 0;\\n        for (; i < length_;) {\\n            if (_state.acceptedTokensList[i] == token) {\\n                break;\\n            }\\n            unchecked { i += 1; }\\n        }\\n\\n        if (i != length_) {\\n            if (length_ > 1) {\\n                _state.acceptedTokensList[i] = _state.acceptedTokensList[length_ - 1];\\n            }\\n            _state.acceptedTokensList.pop();\\n        }\\n    }\\n\\n    function setRelayerFee(uint16 chainId_, uint256 fee) internal {\\n        _state.relayerFees[chainId_] = fee;\\n    }\\n\\n    function setSwapRate(address token, uint256 swapRate) internal {\\n        _state.swapRates[token] = swapRate;\\n    }\\n\\n    function setMaxNativeSwapAmount(address token, uint256 maximum) internal {\\n        _state.maxNativeSwapAmount[token] = maximum;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/token-bridge-relayer/TokenBridgeRelayerState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2\\npragma solidity ^0.8.17;\\n\\nimport {IWormhole} from \\\"../interfaces/IWormhole.sol\\\";\\n\\nabstract contract TokenBridgeRelayerStorage {\\n    struct State {\\n        // Wormhole chain ID of this contract\\n        uint16 chainId;\\n\\n        // boolean to determine if weth is unwrappable\\n        bool unwrapWeth;\\n\\n        // if true, token transfer requests are blocked\\n        bool paused;\\n\\n        // address of WETH on this chain\\n        address wethAddress;\\n\\n        // owner of this contract\\n        address owner;\\n\\n        // address that can update swap rates and relayer fees\\n        address ownerAssistant;\\n\\n        // recipient of relayer fees\\n        address feeRecipient;\\n\\n        // intermediate state when transfering contract ownership\\n        address pendingOwner;\\n\\n        // address of the Wormhole contract on this chain\\n        address wormhole;\\n\\n        // address of the Wormhole TokenBridge contract on this chain\\n        address tokenBridge;\\n\\n        // precision of the nativeSwapRates, this value should NEVER be set to zero\\n        uint256 swapRatePrecision;\\n\\n        // precision of the relayerFee, this value should NEVER be set to zero\\n        uint256 relayerFeePrecision;\\n\\n        // Wormhole chain ID to known relayer contract address mapping\\n        mapping(uint16 => bytes32) registeredContracts;\\n\\n        // token swap rate in USD terms\\n        mapping(address => uint256) swapRates;\\n\\n        /**\\n         * Mapping of source token address to maximum native asset swap amount\\n         * allowed.\\n         */\\n        mapping(address => uint256) maxNativeSwapAmount;\\n\\n        // mapping of chainId to relayerFee in USD\\n        mapping(uint16 => uint256) relayerFees;\\n\\n        // accepted token to bool mapping\\n        mapping(address => bool) acceptedTokens;\\n\\n        // list of accepted token addresses\\n        address[] acceptedTokensList;\\n    }\\n}\\n\\nabstract contract TokenBridgeRelayerState {\\n    TokenBridgeRelayerStorage.State _state;\\n}\\n\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"@solidity-parser/=node_modules/@solidity-parser/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"wormhole-solidity/=modules/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenBridge_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wethAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ownerAssistant_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"unwrapWeth_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRecipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRecipient\",\"type\":\"address\"}],\"name\":\"FeeRecipientUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeAmount\",\"type\":\"uint256\"}],\"name\":\"SwapExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"indexed\":true,\"internalType\":\"struct TokenBridgeRelayerStructs.SwapRateUpdate[]\",\"name\":\"swapRates\",\"type\":\"tuple[]\"}],\"name\":\"SwapRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"emitterChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"emitterAddress\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"name\":\"TransferRedeemed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"calculateMaxSwapAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAllowed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toNativeAmount\",\"type\":\"uint256\"}],\"name\":\"calculateNativeSwapAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"targetChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"calculateRelayerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feeInTokenDenomination\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId_\",\"type\":\"uint16\"}],\"name\":\"cancelOwnershipTransferRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedTransferMessage\",\"type\":\"bytes\"}],\"name\":\"completeTransferWithRelay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmOwnershipTransferRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encoded\",\"type\":\"bytes\"}],\"name\":\"decodeTransferWithRelay\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"payloadId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"targetRelayerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toNativeTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"targetRecipient\",\"type\":\"bytes32\"}],\"internalType\":\"struct TokenBridgeRelayerStructs.TransferWithRelay\",\"name\":\"transfer\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"denormalizeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId_\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"deregisterToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"payloadId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"targetRelayerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toNativeTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"targetRecipient\",\"type\":\"bytes32\"}],\"internalType\":\"struct TokenBridgeRelayerStructs.TransferWithRelay\",\"name\":\"transfer\",\"type\":\"tuple\"}],\"name\":\"encodeTransferWithRelay\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"encoded\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"fetchLocalAddressFromTransferMessage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"localAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAcceptedTokensList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"emitterChainId\",\"type\":\"uint16\"}],\"name\":\"getRegisteredContract\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isAcceptedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"maxNativeSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"nativeSwapRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"normalizeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerAssistant\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId_\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"contractAddress\",\"type\":\"bytes32\"}],\"name\":\"registerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId_\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"registerToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId_\",\"type\":\"uint16\"}],\"name\":\"relayerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayerFeePrecision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId_\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"setPauseForTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId_\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"submitOwnershipTransferRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"swapRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRatePrecision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBridge\",\"outputs\":[{\"internalType\":\"contract ITokenBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toNativeTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"targetRecipient\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"batchId\",\"type\":\"uint32\"}],\"name\":\"transferTokensWithRelay\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"messageSequence\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unwrapWeth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId_\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"newFeeRecipient\",\"type\":\"address\"}],\"name\":\"updateFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId_\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"updateMaxNativeSwapAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId_\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"newAssistant\",\"type\":\"address\"}],\"name\":\"updateOwnerAssistant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId_\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateRelayerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId_\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"relayerFeePrecision_\",\"type\":\"uint256\"}],\"name\":\"updateRelayerFeePrecision\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId_\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenBridgeRelayerStructs.SwapRateUpdate[]\",\"name\":\"swapRateUpdate\",\"type\":\"tuple[]\"}],\"name\":\"updateSwapRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId_\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"swapRatePrecision_\",\"type\":\"uint256\"}],\"name\":\"updateSwapRatePrecision\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId_\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"unwrapWeth_\",\"type\":\"bool\"}],\"name\":\"updateUnwrapWethFlag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wormhole\",\"outputs\":[{\"internalType\":\"contract IWormhole\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toNativeTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"targetChain\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"targetRecipient\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"batchId\",\"type\":\"uint32\"}],\"name\":\"wrapAndTransferEthWithRelay\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"messageSequence\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TokenBridgeRelayer", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005a58505a96d1dbf8df91cb21b54419fc36e93fde0000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf127000000000000000000000000053cd7442fee1ad9edfd43fe469efa26721b969ed000000000000000000000000f285bd23217ae02779e11b7e822e603f31bbe6690000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}