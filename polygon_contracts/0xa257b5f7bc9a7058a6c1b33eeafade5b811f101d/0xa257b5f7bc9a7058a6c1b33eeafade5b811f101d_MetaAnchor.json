{"SourceCode": "// SPDX-License-Identifier: MIT AND UNLICENSED AND CC0-1.0\r\n//\r\n// OpenZeppelin and ERC-6956 are licensed under MIT\r\n//   Note ERC-6956 is authored by us (authenticvision.com)\r\n// IERC6454 is licensed under CC0-1.0\r\n//\r\n// All other contracts are UNLICENSED, visit metaanchor.io for licensing information\r\n//\r\n// Meta Anchor (TM), Authentic Vision (TM) and Digital Soul (TM) are Registered Trademarks \r\n// and will be denoted as MetaAnchor, AuthenticVision and DigitalSoul subsequently.\r\n\r\n\r\n// Sources flattened with hardhat v2.12.6 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/access/IAccessControl.sol@v4.8.3\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {AccessControl-_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.8.3\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.8.3\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/ERC165.sol@v4.8.3\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/math/Math.sol@v4.8.3\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    enum Rounding {\r\n        Down, // Toward negative infinity\r\n        Up, // Toward infinity\r\n        Zero // Toward zero\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a == 0 ? 0 : (a - 1) / b + 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\r\n     * with further edits by Uniswap Labs also under MIT license.\r\n     */\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n            // variables such that product = prod1 * 2^256 + prod0.\r\n            uint256 prod0; // Least significant 256 bits of the product\r\n            uint256 prod1; // Most significant 256 bits of the product\r\n            assembly {\r\n                let mm := mulmod(x, y, not(0))\r\n                prod0 := mul(x, y)\r\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n            }\r\n\r\n            // Handle non-overflow cases, 256 by 256 division.\r\n            if (prod1 == 0) {\r\n                return prod0 / denominator;\r\n            }\r\n\r\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n            require(denominator > prod1);\r\n\r\n            ///////////////////////////////////////////////\r\n            // 512 by 256 division.\r\n            ///////////////////////////////////////////////\r\n\r\n            // Make division exact by subtracting the remainder from [prod1 prod0].\r\n            uint256 remainder;\r\n            assembly {\r\n                // Compute remainder using mulmod.\r\n                remainder := mulmod(x, y, denominator)\r\n\r\n                // Subtract 256 bit number from 512 bit number.\r\n                prod1 := sub(prod1, gt(remainder, prod0))\r\n                prod0 := sub(prod0, remainder)\r\n            }\r\n\r\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\r\n            // See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\r\n            uint256 twos = denominator & (~denominator + 1);\r\n            assembly {\r\n                // Divide denominator by twos.\r\n                denominator := div(denominator, twos)\r\n\r\n                // Divide [prod1 prod0] by twos.\r\n                prod0 := div(prod0, twos)\r\n\r\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n\r\n            // Shift in bits from prod1 into prod0.\r\n            prod0 |= prod1 * twos;\r\n\r\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n            // four bits. That is, denominator * inv = 1 mod 2^4.\r\n            uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\r\n            // in modular arithmetic, doubling the correct bits in each step.\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inverse;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n     */\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator,\r\n        Rounding rounding\r\n    ) internal pure returns (uint256) {\r\n        uint256 result = mulDiv(x, y, denominator);\r\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\r\n     *\r\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n     */\r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n        //\r\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\r\n        //\r\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\r\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\r\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\r\n        //\r\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\r\n        uint256 result = 1 << (log2(a) >> 1);\r\n\r\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n        // into the expected uint128 result.\r\n        unchecked {\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            return min(result, a / result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates sqrt(a), following the selected rounding direction.\r\n     */\r\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = sqrt(a);\r\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 128;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 64;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 32;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 16;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                value >>= 8;\r\n                result += 8;\r\n            }\r\n            if (value >> 4 > 0) {\r\n                value >>= 4;\r\n                result += 4;\r\n            }\r\n            if (value >> 2 > 0) {\r\n                value >>= 2;\r\n                result += 2;\r\n            }\r\n            if (value >> 1 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log2(value);\r\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >= 10**64) {\r\n                value /= 10**64;\r\n                result += 64;\r\n            }\r\n            if (value >= 10**32) {\r\n                value /= 10**32;\r\n                result += 32;\r\n            }\r\n            if (value >= 10**16) {\r\n                value /= 10**16;\r\n                result += 16;\r\n            }\r\n            if (value >= 10**8) {\r\n                value /= 10**8;\r\n                result += 8;\r\n            }\r\n            if (value >= 10**4) {\r\n                value /= 10**4;\r\n                result += 4;\r\n            }\r\n            if (value >= 10**2) {\r\n                value /= 10**2;\r\n                result += 2;\r\n            }\r\n            if (value >= 10**1) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log10(value);\r\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     *\r\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\r\n     */\r\n    function log256(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 16;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 8;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 4;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 2;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log256(value);\r\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Strings.sol@v4.8.3\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            uint256 length = Math.log10(value) + 1;\r\n            string memory buffer = new string(length);\r\n            uint256 ptr;\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                ptr := add(buffer, add(32, length))\r\n            }\r\n            while (true) {\r\n                ptr--;\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\r\n                }\r\n                value /= 10;\r\n                if (value == 0) break;\r\n            }\r\n            return buffer;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            return toHexString(value, Math.log256(value) + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/AccessControl.sol@v4.8.3\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\r\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\r\n     *\r\n     * Format of the revert message is described in {_checkRole}.\r\n     *\r\n     * _Available since v4.6._\r\n     */\r\n    function _checkRole(bytes32 role) internal view virtual {\r\n        _checkRole(role, _msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view virtual {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        Strings.toHexString(account),\r\n                        \" is missing role \",\r\n                        Strings.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     *\r\n     * NOTE: This function is deprecated in favor of {_grantRole}.\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     */\r\n    function _grantRole(bytes32 role, address account) internal virtual {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function _revokeRole(bytes32 role, address account) internal virtual {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.8.3\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/Pausable.sol@v4.8.3\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721.sol@v4.8.3\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\r\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\r\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol@v4.8.3\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol@v4.8.3\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.8.3\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/ERC721.sol@v4.8.3\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _ownerOf(tokenId);\r\n        require(owner != address(0), \"ERC721: invalid token ID\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        _requireMinted(tokenId);\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overridden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not token owner or approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        _requireMinted(tokenId);\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\r\n        _safeTransfer(from, to, tokenId, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\r\n     */\r\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\r\n        return _owners[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _ownerOf(tokenId) != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\r\n\r\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        unchecked {\r\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\r\n            // Given that tokens are minted one by one, it is impossible in practice that\r\n            // this ever happens. Might change if we allow batch minting.\r\n            // The ERC fails to describe this case.\r\n            _balances[to] += 1;\r\n        }\r\n\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n\r\n        _afterTokenTransfer(address(0), to, tokenId, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\r\n\r\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\r\n        owner = ERC721.ownerOf(tokenId);\r\n\r\n        // Clear approvals\r\n        delete _tokenApprovals[tokenId];\r\n\r\n        unchecked {\r\n            // Cannot overflow, as that would require more tokens to be burned/transferred\r\n            // out than the owner initially received through minting and transferring in.\r\n            _balances[owner] -= 1;\r\n        }\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n\r\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId, 1);\r\n\r\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\r\n\r\n        // Clear approvals from the previous owner\r\n        delete _tokenApprovals[tokenId];\r\n\r\n        unchecked {\r\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\r\n            // `from`'s balance is the number of token held, which is at least one before the current\r\n            // transfer.\r\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\r\n            // all 2**256 token ids to be minted, which in practice is impossible.\r\n            _balances[from] -= 1;\r\n            _balances[to] += 1;\r\n        }\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n\r\n        _afterTokenTransfer(from, to, tokenId, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `operator` to operate on all of `owner` tokens\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function _setApprovalForAll(\r\n        address owner,\r\n        address operator,\r\n        bool approved\r\n    ) internal virtual {\r\n        require(owner != operator, \"ERC721: approve to caller\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if the `tokenId` has not been minted yet.\r\n     */\r\n    function _requireMinted(uint256 tokenId) internal view virtual {\r\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    /// @solidity memory-safe-assembly\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\r\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\r\n     * - When `from` is zero, the tokens will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     * - `batchSize` is non-zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 firstTokenId,\r\n        uint256 batchSize\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\r\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\r\n     * - When `from` is zero, the tokens were minted for `to`.\r\n     * - When `to` is zero, ``from``'s tokens were burned.\r\n     * - `from` and `to` are never both zero.\r\n     * - `batchSize` is non-zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 firstTokenId,\r\n        uint256 batchSize\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\r\n     *\r\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\r\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\r\n     * that `ownerOf(tokenId)` is `a`.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\r\n        _balances[account] += amount;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol@v4.8.3\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Burnable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC721 Burnable Token\r\n * @dev ERC721 Token that can be burned (destroyed).\r\n */\r\nabstract contract ERC721Burnable is Context, ERC721 {\r\n    /**\r\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own `tokenId` or be an approved operator.\r\n     */\r\n    function burn(uint256 tokenId) public virtual {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\r\n        _burn(tokenId);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol@v4.8.3\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol@v4.8.3\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\r\n * enumerability of all the token ids in the contract as well as all token ids owned by each\r\n * account.\r\n */\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] private _allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC721-_beforeTokenTransfer}.\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 firstTokenId,\r\n        uint256 batchSize\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\r\n\r\n        if (batchSize > 1) {\r\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\r\n            revert(\"ERC721Enumerable: consecutive transfers not supported\");\r\n        }\r\n\r\n        uint256 tokenId = firstTokenId;\r\n\r\n        if (from == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n        if (to == address(0)) {\r\n            _removeTokenFromAllTokensEnumeration(tokenId);\r\n        } else if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n     * @param to address representing the new owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = ERC721.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's token tracking data structures.\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list\r\n     */\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's token tracking data structures.\r\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n     */\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/ERC165Checker.sol@v4.8.3\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.2) (utils/introspection/ERC165Checker.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library used to query support of an interface declared via {IERC165}.\r\n *\r\n * Note that these functions return the actual result of the query: they do not\r\n * `revert` if an interface is not supported. It is up to the caller to decide\r\n * what to do in these cases.\r\n */\r\nlibrary ERC165Checker {\r\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\r\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports the {IERC165} interface.\r\n     */\r\n    function supportsERC165(address account) internal view returns (bool) {\r\n        // Any contract that implements ERC165 must explicitly indicate support of\r\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\r\n        return\r\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\r\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports the interface defined by\r\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\r\n        // query support of both ERC165 as per the spec and support of _interfaceId\r\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns a boolean array where each value corresponds to the\r\n     * interfaces passed in and whether they're supported or not. This allows\r\n     * you to batch check interfaces for a contract where your expectation\r\n     * is that some interfaces may not be supported.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\r\n        internal\r\n        view\r\n        returns (bool[] memory)\r\n    {\r\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\r\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\r\n\r\n        // query support of ERC165 itself\r\n        if (supportsERC165(account)) {\r\n            // query support of each interface in interfaceIds\r\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\r\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\r\n            }\r\n        }\r\n\r\n        return interfaceIdsSupported;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports all the interfaces defined in\r\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\r\n     *\r\n     * Batch-querying can lead to gas savings by skipping repeated checks for\r\n     * {IERC165} support.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\r\n        // query support of ERC165 itself\r\n        if (!supportsERC165(account)) {\r\n            return false;\r\n        }\r\n\r\n        // query support of each interface in interfaceIds\r\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\r\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // all interfaces supported\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Query if a contract implements an interface, does not check ERC165 support\r\n     * @param account The address of the contract to query for support of an interface\r\n     * @param interfaceId The interface identifier, as specified in ERC-165\r\n     * @return true if the contract at account indicates support of the interface with\r\n     * identifier interfaceId, false otherwise\r\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\r\n     * the behavior of this method is undefined. This precondition can be checked\r\n     * with {supportsERC165}.\r\n     *\r\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\r\n     * should be exercised when using this function.\r\n     *\r\n     * Interface identification is specified in ERC-165.\r\n     */\r\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\r\n        // prepare call\r\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\r\n\r\n        // perform static call\r\n        bool success;\r\n        uint256 returnSize;\r\n        uint256 returnValue;\r\n        assembly {\r\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\r\n            returnSize := returndatasize()\r\n            returnValue := mload(0x00)\r\n        }\r\n\r\n        return success && returnSize >= 0x20 && returnValue > 0;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/DeployerContract.sol\r\n\r\n\r\npragma solidity ^0.8.18;\r\n\r\n/**\r\n * @title Interface for contracts featuring cascade-verification of the deployment origination\r\n * @author tb@authenticvision.com \r\n * @notice Allows cascade-verification of a deployment origination across multiple DeployerContracts\r\n * @dev Contracts implementing this interface must take as the first constructor-parameter the address of the\r\n * `DeployerContract`\r\n */\r\ninterface IDeployedContract {\r\n    /**\r\n     * @notice Indicates whether addr has been directly or indirectly deployed by this contract\r\n     * @dev Indirect deployment means e.g. by deploying through a contract that has been deployed by this contract\r\n     * \r\n     * @param addr Address of the deployed contract requesting initArgs\r\n     * @return hasDeployedAddr abi-encoded init args\r\n     */\r\n    function hasDeployed(address addr) external view returns (bool hasDeployedAddr);\r\n\r\n    /**\r\n     * Returns the deployer of a particular contract. Can be EOA or Contract Account \r\n     */\r\n    function deployedBy() external view returns (address deployer);\r\n}\r\n\r\n/**\r\n * @title Predictable-Deployment contract of origin-verifyable contracts\r\n * @author tb@authenticvision.com\r\n * @notice Deploys contracts implementing IDeployedContract based on passed bytecode and constructorArgs and allows to trace their origin\r\n * across multiple Deployercontracts\r\n * \r\n * @dev Has a static deployment salt, which shall only be changed in absolute emergencies.\r\n * The root contract is typically deployed by the Nonce=0 of an account on different blockchains.\r\n * This ensures that all contracts can be cascade-verified to originate from one well-known and trusted\r\n * source, e.g. an AppHub for a company. \r\n * \r\n */\r\nabstract contract DeployerContract is IDeployedContract {\r\n    mapping (address => address) private _deployedContractsWithOperator;\r\n    IDeployedContract[] public deployedContracts;\r\n\r\n    address public deployedBy;\r\n    bytes32 private _salt;\r\n\r\n    /**\r\n     * @notice Emits when a contract is deployed through `deploy()`\r\n     * @param deployedAddress Address of the just deployed contract\r\n     * @param operator The operator initiating the deployment\r\n     */\r\n    event ContractDeployed(address deployedAddress, address operator);\r\n\r\n    /**\r\n     * @notice Emits (in emergencies), when salt is updated.\r\n     * @param newSalt The new salt used for new deployments\r\n     * @param oldSalt The old salt, has been used for previous deployments\r\n     * @param maintainer Initiator of the salt update\r\n     */\r\n    event DeploymentSaltUpdate(bytes32 newSalt, bytes32 oldSalt, address maintainer);\r\n\r\n    /**\r\n     * @notice Indicates whether `addr` can use the `deploy()` function.\r\n     * @dev To be overwritten by extending contracts, typically by only authorizing a specific role.\r\n     * @param addr The address in question\r\n     */\r\n    function canDeploy(address addr) public virtual returns (bool);\r\n\r\n    modifier onlyDeployer() {\r\n        require(canDeploy(msg.sender), \"msg.sender must be deployer\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Returns the predicted address (with the current `_salt`) for a provided bytecode and constructorArgs\r\n     * @param bytecode The bytecode to be deployed\r\n     * @param constructorArgs abi-encoded constructor args, accepted by the constructor of the contract in bytecode\r\n     */\r\n    function getAddress(\r\n        bytes memory bytecode,\r\n        bytes memory constructorArgs\r\n    ) public view returns (address) {\r\n        uint actualSalt = uint(_salt);\r\n        bytes32 hash = keccak256(\r\n            abi.encodePacked(bytes1(0xff), address(this), actualSalt, keccak256(_assembleByteCodeAndArgs(bytecode, constructorArgs)))\r\n        );\r\n\r\n        // NOTE: cast last 20 bytes of hash to address\r\n        return address(uint160(uint(hash)));\r\n    }\r\n\r\n    /**\r\n     * @notice Like `getAddress(bytes,bytes)`, but for constructors not taking additional arguments (additional to deployer address)\r\n     * @param bytecode Bytecode to be deployed\r\n     */\r\n    function getAddress(\r\n        bytes memory bytecode\r\n    ) public view returns (address) {\r\n        return getAddress(bytecode, abi.encode(address(this)));\r\n    }\r\n\r\n    /**\r\n     * @notice Indicates whether a contract at `addr` directly or indirectly has been deployed through this contract\r\n     * @param addr Address of the contract in question\r\n     * @dev This function is typically cascade-called from parent DeployerContracts\r\n     */\r\n    function hasDeployed(address addr) public view returns (bool hasDeployedAddr) {\r\n        if(_deployedContractsWithOperator[addr] != address(0)) {\r\n            return true;\r\n        }\r\n\r\n        for(uint i=0; i<deployedContracts.length; i++) {\r\n            if(deployedContracts[i].hasDeployed(addr)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev Internhal helper to pack bytecode and constructor args. Ensurs the first constructor argument is the deployer, i.e. address(this)\r\n     * @param byteCode Bytecode excl constructor args\r\n     * @param constructorArgs ABI-encoded, expected to have the address of this contract encoded as first argument\r\n     */\r\n    function _assembleByteCodeAndArgs(bytes memory byteCode, bytes memory constructorArgs) internal view returns (bytes memory bytecodeWithArgs) {\r\n        (address deployerAddress) = abi.decode(constructorArgs, (address));\r\n        require(deployerAddress == address(this), \"First constructor arg must be address of this contract\");\r\n        return abi.encodePacked(byteCode, constructorArgs);\r\n    }\r\n    \r\n    /**\r\n     * @notice Deploys bytecode of IDeployedContract-implementing contract with constructor args\r\n     * @param byteCode Bytecode of contract implementing IDeployedContract\r\n     * @param constructorArgs ABI-encoded constructor args, first argument must be address of this contract\r\n     * @dev Emits ContractDeployed\r\n     *      Throws if bytecode does not implement IDeployedContract\r\n     *      Throws if `deployedBy()` of the deployed contract does not indicate this contract as deployer, \r\n     *      hence `hasDeployed()` mechanism would fail\r\n     */\r\n    function deploy(bytes memory byteCode, bytes memory constructorArgs) public onlyDeployer() {\r\n        // verify first argument of constructorArgs is address(this)\r\n        address addr = _deployBinary(_assembleByteCodeAndArgs(byteCode, constructorArgs), _salt);\r\n\r\n        // verify the contract implements IDeployedContract\r\n        require(ERC165Checker.supportsInterface(addr, type(IDeployedContract).interfaceId), \"Can only deploy contracts implementing IDeployedContract interface\");\r\n\r\n        // verify contract claims this contract as deployer\r\n        require(IDeployedContract(addr).deployedBy() == address(this), \"Deployed contract must return this contract in getDeployer()\");\r\n\r\n        emit ContractDeployed(addr, msg.sender);\r\n        _deployedContractsWithOperator[addr] = msg.sender;\r\n        deployedContracts.push(IDeployedContract(addr));\r\n    }\r\n\r\n    /**\r\n     * @notice Like deploy(bytes,bytes), but adds address(this) as only constructor argument\r\n     * @param byteCode Bytecode of contract implementing IDeployedContract\r\n     */\r\n    function deploy(bytes memory byteCode) public onlyDeployer() {\r\n        deploy(byteCode, abi.encode(address(this)));        \r\n    }\r\n         \r\n    /**\r\n     * @notice Updates the deployment salt - do only use in absolut emergencies!\r\n     * @dev This shall not be used at all and is just for emergencies and major fuckups. As soon \r\n     * as the salt is updated, it can happen that the same contract / same version / same constructorArgs\r\n     * can be re-deployed to a different address. \r\n     */\r\n    function updateDeploymentSalt(bytes32 newSalt) public onlyDeployer()  {\r\n        emit DeploymentSaltUpdate(_salt, newSalt, msg.sender);\r\n        _salt = newSalt;\r\n    }\r\n\r\n    /**\r\n     * @param bytecode Bytecode + packed constructorArgs of contract implementing IDeployedContract\r\n     * @param salt The deployment salt.\r\n     * @dev Isolated function to actually deploy contracts (can be used by extending contracts)\r\n     *      inspired by https://solidity-by-example.org/app/create2/\r\n     *      Salt is taken as parameter to also allow deploying contracts with an \"old\" salt in case of\r\n     *      emergency salt-upgrade.\r\n     */\r\n    function _deployBinary(bytes memory bytecode, bytes32 salt) internal virtual onlyDeployer() returns (address) {\r\n        address addr;\r\n\r\n        uint actualSalt = uint(salt);\r\n        /*\r\n        NOTE: How to call create2\r\n\r\n        create2(v, p, n, s)\r\n        create new contract with code at memory p to p + n\r\n        and send v wei\r\n        and return the new address\r\n        where new address = first 20 bytes of keccak256(0xff + address(this) + s + keccak256(mem[p\u2026(p+n)))\r\n              s = big-endian 256-bit value\r\n        */\r\n        assembly {\r\n            addr := create2(\r\n                callvalue(), // wei sent with current call\r\n                // Actual code starts after skipping the first 32 bytes\r\n                add(bytecode, 0x20),\r\n                mload(bytecode), // Load the size of code contained in the first 32 bytes\r\n                actualSalt // Salt from function arguments\r\n            )\r\n\r\n            if iszero(extcodesize(addr)) {\r\n                revert(0, 0)\r\n            }\r\n        }\r\n\r\n        return addr;\r\n    }\r\n\r\n    constructor() {\r\n        deployedBy = msg.sender;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/AppHub.sol\r\n\r\n\r\npragma solidity ^0.8.18;\r\n/**\r\n * @title AuthenticVision MetaAnchor AppHub\r\n * @author tb@authenticvision.com\r\n * @notice Used to manage roles and verify a deployed contract originates directly or indirectly from this AppHub.\r\n * @dev This can be seen as the \"AuthenticVision root certificate\". All contracts deployed by Authentic Vision\r\n *      will have `hasDeployed(address)==true`. Only these contracts originate from Authentic Vision.\r\n *      \r\n *      This AppHub will be deployed at the same address in all Blockchains we support. \r\n * \r\n *      Visit authenticvision.com for contact and further information\r\n */\r\ncontract AppHub is AccessControl, DeployerContract {\r\n\r\n  /**\r\n   * @notice DEPLOYER_ROLE can deploy new MetaAnchor-Contracts from MetaAnchorFactory\r\n   * @return Role hash, as should be passed to hasRole(), grantRole()\r\n   */\r\n  bytes32 public constant DEPLOYER_ROLE = keccak256(\"DEPLOYER_ROLE\");\r\n  \r\n  /**\r\n   * @notice FACTORY_DEPLOYER_ROLE can deploy factories (via AppHub)\r\n   */\r\n  bytes32 public constant FACTORY_DEPLOYER_ROLE = keccak256(\"FACTORY_DEPLOYER_ROLE\");\r\n\r\n  /**\r\n   * @notice FACTORY_MAINTAINER_ROLE can maintain factories, e.g. add providers, remove registrations, ..\r\n   */\r\n  bytes32 public constant FACTORY_MAINTAINER_ROLE = keccak256(\"FACTORY_MAINTAINER_ROLE\");\r\n\r\n  /**\r\n   * @notice MAINTAINER_ROLE can maintain MetaAnchor-Contracts, e.g. updateValidAnchors(), configurations, owners, etc.\r\n   */\r\n  bytes32 public constant MAINTAINER_ROLE = keccak256(\"MAINTAINER_ROLE\");\r\n\r\n  /**\r\n   * @notice Signatures for ORACLE_ROLE will be accepted for ERC-6956 attestations\r\n   */\r\n  bytes32 public constant ORACLE_ROLE = keccak256(\"ORACLE_ROLE\");\r\n\r\n  /**\r\n   * @notice PAUSER_ROLE has permission to pause contracts\r\n   */\r\n  bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\r\n\r\n  /**\r\n   * @notice REGISTRAR_ROLE can register (and unregister their own) contracts for deployment\r\n   */\r\n  bytes32 public constant REGISTRAR_ROLE = keccak256(\"REGISTRAR_ROLE\");\r\n\r\n  /**\r\n   * @notice Overrides authorization functionality from `DeployerContract` to allow only FACTORY_DEPLOYER_ROLE accounts\r\n   * @param addr Account address in equestion\r\n   * @return addrIsDeployer true indicates this account can deploy contracts via `deploy()` method\r\n   */\r\n  function canDeploy(address addr) public view override(DeployerContract) returns (bool addrIsDeployer) {\r\n    return hasRole(FACTORY_DEPLOYER_ROLE, addr);\r\n  }  \r\n\r\n  constructor() {\r\n    _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n  }\r\n}\r\n\r\n\r\n// File contracts/AppContract.sol\r\n\r\n\r\npragma solidity ^0.8.18;\r\n/**\r\n * @title AppContract for access control. Base-class for actual contracts controlled by AppHub\r\n * @author tb@authenticvision.com\r\n */\r\ncontract AppContract is AccessControl {\r\n  AppHub internal _hub;\r\n\r\n constructor(address hub) {\r\n    _hub = AppHub(hub);\r\n  }\r\n\r\n  /**\r\n    * @dev Returns `true` if `account` has been granted `role`.\r\n    * @notice Check whether a specific account has a certain role. This role is also set in all linked contracts.\r\n    */\r\n  function hasRole(bytes32 role, address account) public view virtual override(AccessControl) returns (bool) {\r\n      return (super.hasRole(role, account) || _hub.hasRole(role, account));\r\n  }\r\n\r\n  /**\r\n   * @dev Updates the address of app_hub.\r\n   * @param hub Address of the app-hub\r\n   */\r\n  function updateAppHub(address hub) public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n    address prevHubAddr = address(_hub);\r\n    _hub = AppHub(hub);\r\n    // after update, I still need to have the default admin role from appHub\r\n    require(ERC165Checker.supportsInterface(hub, type(IDeployedContract).interfaceId), \"AppHub must implement IDeployedContract\");\r\n    require(_hub.hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"Account has no admin role in AppHub\");\r\n    emit AppHubUpdate(hub, prevHubAddr, msg.sender);\r\n  }\r\n\r\n  event AppHubUpdate(address hub, address oldHub, address maintainer);\r\n\r\n\r\n  // The following functions are overrides required by Solidity, EIP-165.\r\n  function supportsInterface(bytes4 interfaceId)\r\n    public\r\n    view\r\n    virtual\r\n    override(AccessControl)\r\n    returns (bool)\r\n  {\r\n    return super.supportsInterface(interfaceId);\r\n  }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Counters.sol@v4.8.3\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/eip-6956/IERC6956.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.18;\r\n\r\n/**\r\n * @title IERC6956 Asset-Bound Non-Fungible Tokens \r\n * @notice Asset-bound Non-Fungible Tokens anchor a token 1:1 to a (physical or digital) asset and token transfers are authorized through attestation of control over the asset\r\n * @dev See https://eips.ethereum.org/EIPS/eip-6956\r\n *      Note: The ERC-165 identifier for this interface is 0xa9cf7635\r\n */\r\ninterface IERC6956 {\r\n   \r\n    /** @dev Authorization, typically mapped to authorizationMaps, where each bit indicates whether a particular ERC6956Role is authorized \r\n     *      Typically used in constructor (hardcoded or params) to set burnAuthorization and approveAuthorization\r\n     *      Also used in optional updateBurnAuthorization, updateApproveAuthorization, I\r\n     */ \r\n    enum Authorization {\r\n        NONE,               // = 0,      // None of the above\r\n        OWNER,              // = (1<<OWNER), // The owner of the token, i.e. the digital representation\r\n        ISSUER,             // = (1<<ISSUER), // The issuer of the tokens, i.e. this smart contract\r\n        ASSET,              // = (1<<ASSET), // The asset, i.e. via attestation\r\n        OWNER_AND_ISSUER,   // = (1<<OWNER) | (1<<ISSUER),\r\n        OWNER_AND_ASSET,    // = (1<<OWNER) | (1<<ASSET),\r\n        ASSET_AND_ISSUER,   // = (1<<ASSET) | (1<<ISSUER),\r\n        ALL                 // = (1<<OWNER) | (1<<ISSUER) | (1<<ASSET) // Owner + Issuer + Asset\r\n    }\r\n    \r\n    /**\r\n     * @notice This emits when approved address for an anchored tokenId is changed or reaffirmed via attestation\r\n     * @dev This emits when approveAnchor() is called and corresponds to ERC-721 behavior\r\n     * @param owner The owner of the anchored tokenId\r\n     * @param approved The approved address, address(0) indicates there is no approved address\r\n     * @param anchor The anchor, for which approval has been chagned\r\n     * @param tokenId ID (>0) of the anchored token\r\n     */\r\n    event AnchorApproval(address indexed owner, address approved, bytes32 indexed anchor, uint256 tokenId);\r\n\r\n    /**\r\n     * @notice This emits when the ownership of any anchored NFT changes by any mechanism\r\n     * @dev This emits together with tokenId-based ERC-721.Transfer and provides an anchor-perspective on transfers\r\n     * @param from The previous owner, address(0) indicate there was none.\r\n     * @param to The new owner, address(0) indicates the token is burned\r\n     * @param anchor The anchor which is bound to tokenId\r\n     * @param tokenId ID (>0) of the anchored token\r\n     */\r\n    event AnchorTransfer(address indexed from, address indexed to, bytes32 indexed anchor, uint256 tokenId);\r\n    /**\r\n     * @notice This emits when an attestation has been used indicating no second attestation with the same attestationHash will be accepted\r\n     * @param to The to address specified in the attestation\r\n     * @param anchor The anchor specificed in the attestation\r\n     * @param attestationHash The hash of the attestation, see ERC-6956 for details\r\n     * @param totalUsedAttestationsForAnchor The total number of attestations already used for the particular anchor\r\n     */\r\n    event AttestationUse(address indexed to, bytes32 indexed anchor, bytes32 indexed attestationHash, uint256 totalUsedAttestationsForAnchor);\r\n\r\n    /**\r\n     * @notice This emits when the trust-status of an oracle changes. \r\n     * @dev Trusted oracles must explicitely be specified. \r\n     *      If the last event for a particular oracle-address indicates it's trusted, attestations from this oracle are valid.\r\n     * @param oracle Address of the oracle signing attestations\r\n     * @param trusted indicating whether this address is trusted (true). Use (false) to no longer trust from an oracle.\r\n     */\r\n    event OracleUpdate(address indexed oracle, bool indexed trusted);\r\n\r\n    /**\r\n     * @notice Returns the 1:1 mapped anchor for a tokenId\r\n     * @param tokenId ID (>0) of the anchored token\r\n     * @return anchor The anchor bound to tokenId, 0x0 if tokenId does not represent an anchor\r\n     */\r\n    function anchorByToken(uint256 tokenId) external view returns (bytes32 anchor);\r\n    /**\r\n     * @notice Returns the ID of the 1:1 mapped token of an anchor.\r\n     * @param anchor The anchor (>0x0)\r\n     * @return tokenId ID of the anchored token, 0 if no anchored token exists\r\n     */\r\n    function tokenByAnchor(bytes32 anchor) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @notice The number of attestations already used to modify the state of an anchor or its bound tokens\r\n     * @param anchor The anchor(>0)\r\n     * @return attestationUses The number of attestation uses for a particular anchor, 0 if anchor is invalid.\r\n     */\r\n    function attestationsUsedByAnchor(bytes32 anchor) view external returns (uint256 attestationUses);\r\n    /**\r\n     * @notice Decodes and returns to-address, anchor and the attestation hash, if the attestation is valid\r\n     * @dev MUST throw when\r\n     *  - Attestation has already been used (an AttestationUse-Event with matching attestationHash was emitted)\r\n     *  - Attestation is not signed by trusted oracle (the last OracleUpdate-Event for the signer-address does not indicate trust)\r\n     *  - Attestation is not valid yet or expired\r\n     *  - [if IERC6956AttestationLimited is implemented] attestationUsagesLeft(attestation.anchor) <= 0\r\n     *  - [if IERC6956ValidAnchors is implemented] validAnchors(data) does not return true. \r\n     * @param attestation The attestation subject to the format specified in ERC-6956\r\n     * @param data Optional additional data, may contain proof as the first abi-encoded argument when IERC6956ValidAnchors is implemented\r\n     * @return to Address where the ownership of an anchored token or approval shall be changed to\r\n     * @return anchor The anchor (>0)\r\n     * @return attestationHash The attestation hash computed on-chain as `keccak256(attestation)`\r\n     */\r\n    function decodeAttestationIfValid(bytes memory attestation, bytes memory data) external view returns (address to, bytes32 anchor, bytes32 attestationHash);\r\n\r\n    /**\r\n     * @notice Indicates whether any of ASSET, OWNER, ISSUER is authorized to burn\r\n     */\r\n    function burnAuthorization() external view returns(Authorization burnAuth);\r\n\r\n    /**\r\n     * @notice Indicates whether any of ASSET, OWNER, ISSUER is authorized to approve\r\n     */\r\n    function approveAuthorization() external view returns(Authorization approveAuth);\r\n\r\n    /**\r\n     * @notice Corresponds to transferAnchor(bytes,bytes) without additional data\r\n     * @param attestation Attestation, refer ERC-6956 for details\r\n     */\r\n    function transferAnchor(bytes memory attestation) external;\r\n\r\n    /**\r\n     * @notice Changes the ownership of an NFT mapped to attestation.anchor to attestation.to address.\r\n     * @dev Permissionless, i.e. anybody invoke and sign a transaction. The transfer is authorized through the oracle-signed attestation.\r\n     *  - Uses decodeAttestationIfValid()\r\n     *  - When using a centralized \"gas-payer\" recommended to implement IERC6956AttestationLimited.\r\n     *  - Matches the behavior of ERC-721.safeTransferFrom(ownerOf[tokenByAnchor(attestation.anchor)], attestation.to, tokenByAnchor(attestation.anchor), ..) and mint an NFT if `tokenByAnchor(anchor)==0`.\r\n     *  - Throws when attestation.to == ownerOf(tokenByAnchor(attestation.anchor))\r\n     *  - Emits AnchorTransfer  \r\n     *  \r\n     * @param attestation Attestation, refer EIP-6956 for details\r\n     * @param data Additional data, may be used for additional transfer-conditions, may be sent partly or in full in a call to safeTransferFrom\r\n     * \r\n     */\r\n    function transferAnchor(bytes memory attestation, bytes memory data) external;\r\n\r\n     /**\r\n     * @notice Corresponds to approveAnchor(bytes,bytes) without additional data\r\n     * @param attestation Attestation, refer ERC-6956 for details\r\n     */\r\n    function approveAnchor(bytes memory attestation) external;\r\n\r\n     /**\r\n     * @notice Approves attestation.to the token bound to attestation.anchor. .\r\n     * @dev Permissionless, i.e. anybody invoke and sign a transaction. The transfer is authorized through the oracle-signed attestation.\r\n     *  - Uses decodeAttestationIfValid()\r\n     *  - When using a centralized \"gas-payer\" recommended to implement IERC6956AttestationLimited.\r\n     *  - Matches the behavior of ERC-721.approve(attestation.to, tokenByAnchor(attestation.anchor)).\r\n     *  - Throws when ASSET is not authorized to approve.\r\n     * \r\n     * @param attestation Attestation, refer EIP-6956 for details \r\n     */\r\n    function approveAnchor(bytes memory attestation, bytes memory data) external;\r\n\r\n    /**\r\n     * @notice Corresponds to burnAnchor(bytes,bytes) without additional data\r\n     * @param attestation Attestation, refer ERC-6956 for details\r\n     */\r\n    function burnAnchor(bytes memory attestation) external;\r\n   \r\n    /**\r\n     * @notice Burns the token mapped to attestation.anchor. Uses ERC-721._burn.\r\n     * @dev Permissionless, i.e. anybody invoke and sign a transaction. The transfer is authorized through the oracle-signed attestation.\r\n     *  - Uses decodeAttestationIfValid()\r\n     *  - When using a centralized \"gas-payer\" recommended to implement IERC6956AttestationLimited.\r\n     *  - Throws when ASSET is not authorized to burn\r\n     * \r\n     * @param attestation Attestation, refer EIP-6956 for details\r\n     */\r\n    function burnAnchor(bytes memory attestation, bytes memory data) external;\r\n}\r\n\r\n\r\n// File contracts/eip-6956/ERC6956.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.18;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/** Used for several authorization mechansims, e.g. who can burn, who can set approval, ... \r\n * @dev Specifying the role in the ecosystem. Used in conjunction with IERC6956.Authorization\r\n */\r\nenum Role {\r\n    OWNER,  // =0, The owner of the digital token\r\n    ISSUER, // =1, The issuer (contract) of the tokens, typically represented through a MAINTAINER_ROLE, the contract owner etc.\r\n    ASSET,  // =2, The asset identified by the anchor\r\n    INVALID // =3, Reserved, do not use.\r\n}\r\n\r\n/**\r\n * @title ASSET-BOUND NFT minimal reference implementation \r\n * @author Thomas Bergmueller (@tbergmueller)\r\n * \r\n * @dev Error messages\r\n * ```\r\n * ERROR | Message\r\n * ------|-------------------------------------------------------------------\r\n * E1    | Only maintainer allowed\r\n * E2    | No permission to burn\r\n * E3    | Token does not exist, call transferAnchor first to mint\r\n * E4    | batchSize must be 1\r\n * E5    | Token not transferable\r\n * E6    | Token already owned\r\n * E7    | Not authorized based on ERC6956Authorization\r\n * E8    | Attestation not signed by trusted oracle\r\n * E9    | Attestation already used\r\n * E10   | Attestation not valid yet\r\n * E11   | Attestation expired \r\n * E12   | Attestation expired (contract limit)\r\n * E13   | Invalid signature length\r\n * E14-20| Reserved for future use\r\n * ```\r\n */\r\ncontract ERC6956 is\r\n    ERC721,\r\n    ERC721Enumerable,\r\n    ERC721Burnable,\r\n    IERC6956 \r\n{\r\n    using Counters for Counters.Counter;\r\n\r\n    mapping(bytes32 => bool) internal _anchorIsReleased; // currently released anchors. Per default, all anchors are dropped, i.e. 1:1 bound\r\n    \r\n    mapping(address => bool) public maintainers;\r\n\r\n    /// @notice Resolves tokenID to anchor. Inverse of tokenByAnchor\r\n    mapping(uint256 => bytes32) public anchorByToken;\r\n\r\n    /// @notice Resolves Anchor to tokenID. Inverse of anchorByToken\r\n    mapping(bytes32 => uint256) public tokenByAnchor;\r\n\r\n    mapping(address => bool) private _trustedOracles;\r\n\r\n    /// @dev stores the anchors for each attestation\r\n    mapping(bytes32 => bytes32) private _anchorByUsedAttestation;\r\n\r\n    /// @dev stores handed-back tokens (via burn)\r\n    mapping (bytes32 => uint256) private _burnedTokensByAnchor;\r\n\r\n\r\n     /**\r\n     * @dev Counter to keep track of issued tokens\r\n     */\r\n    Counters.Counter private _tokenIdCounter;\r\n\r\n    /// @dev Default validity timespan of attestation. In validateAttestation the attestationTime is checked for MIN(defaultAttestationvalidity, attestation.expiry)\r\n    uint256 public maxAttestationExpireTime = 5*60; // 5min valid per default\r\n\r\n    Authorization public burnAuthorization;\r\n    Authorization public approveAuthorization;\r\n\r\n\r\n    /// @dev Records the number of transfers done for each attestation\r\n    mapping(bytes32 => uint256) public attestationsUsedByAnchor;\r\n\r\n    modifier onlyMaintainer() {\r\n        require(isMaintainer(msg.sender), \"ERC6956-E1\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Behaves like ERC721 burn() for wallet-cleaning purposes. Note only the tokenId (as a wrapper) is burned, not the ASSET represented by the ANCHOR.\r\n     * @dev \r\n     * - tokenId is remembered for the anchor, to ensure a later transferAnchor(), which would mint, assigns the same tokenId. This ensures strict 1:1 relation\r\n     * - For burning, the anchor needs to be released. This forced release FOR BURNING ONLY is allowed for owner() or approvedOwner().\r\n     * \r\n     * @param tokenId The token that shall be burned\r\n     */\r\n    function burn(uint256 tokenId) public override\r\n    {\r\n        // remember the tokenId of burned tokens, s.t. one can issue the token with the same number again\r\n        bytes32 anchor = anchorByToken[tokenId];\r\n        require(_roleBasedAuthorization(anchor, createAuthorizationMap(burnAuthorization)), \"ERC6956-E2\");\r\n        _burn(tokenId);\r\n    }\r\n\r\n    function burnAnchor(bytes memory attestation, bytes memory data) public virtual\r\n        authorized(Role.ASSET, createAuthorizationMap(burnAuthorization))\r\n     {\r\n        address to;\r\n        bytes32 anchor;\r\n        bytes32 attestationHash;\r\n        (to, anchor, attestationHash) = decodeAttestationIfValid(attestation, data);\r\n        _commitAttestation(to, anchor, attestationHash);\r\n        uint256 tokenId = tokenByAnchor[anchor];\r\n        // remember the tokenId of burned tokens, s.t. one can issue the token with the same number again\r\n        _burn(tokenId);\r\n    }\r\n\r\n    function burnAnchor(bytes memory attestation) public virtual {\r\n        return burnAnchor(attestation, \"\");\r\n    }\r\n\r\n    function approveAnchor(bytes memory attestation, bytes memory data) public virtual \r\n        authorized(Role.ASSET, createAuthorizationMap(approveAuthorization))\r\n    {\r\n        address to;\r\n        bytes32 anchor;\r\n        bytes32 attestationHash;\r\n        (to, anchor, attestationHash) = decodeAttestationIfValid(attestation, data);\r\n        _commitAttestation(to, anchor, attestationHash);\r\n        require(tokenByAnchor[anchor]>0, \"ERC6956-E3\");\r\n        _approve(to, tokenByAnchor[anchor]);\r\n    }\r\n\r\n    // approveAuth == ISSUER does not really make sense.. so no separate implementation, since ERC-721.approve already implies owner...\r\n\r\n    function approve(address to, uint256 tokenId) public virtual override(ERC721,IERC721)\r\n        authorized(Role.OWNER, createAuthorizationMap(approveAuthorization))\r\n    {\r\n        super.approve(to, tokenId);\r\n    }\r\n\r\n    function approveAnchor(bytes memory attestation) public virtual {\r\n        return approveAnchor(attestation, \"\");\r\n    }\r\n    \r\n    /**\r\n     * @notice Adds or removes a trusted oracle, used when verifying signatures in `decodeAttestationIfValid()`\r\n     * @dev Emits OracleUpdate\r\n     * @param oracle address of oracle\r\n     * @param doTrust true to add, false to remove\r\n     */\r\n    function updateOracle(address oracle, bool doTrust) public\r\n        onlyMaintainer() \r\n    {\r\n        _trustedOracles[oracle] = doTrust;\r\n        emit OracleUpdate(oracle, doTrust);\r\n    }\r\n\r\n    /**\r\n     * @dev A very simple function wich MUST return false, when `a` is not a maintainer\r\n     *      When derived contracts extend ERC6956 contract, this function may be overridden\r\n     *      e.g. by using AccessControl, onlyOwner or other common mechanisms\r\n     * \r\n     *      Having this simple mechanism in the reference implementation ensures that the reference\r\n     *      implementation is fully ERC-6956 compatible \r\n     */\r\n    function isMaintainer(address a) public virtual view returns (bool) {\r\n        return maintainers[a];\r\n    } \r\n      \r\n\r\n    function createAuthorizationMap(Authorization _auth) public pure returns (uint256)  {\r\n       uint256 authMap = 0;\r\n       if(_auth == Authorization.OWNER \r\n            || _auth == Authorization.OWNER_AND_ASSET \r\n            || _auth == Authorization.OWNER_AND_ISSUER \r\n            || _auth == Authorization.ALL) {\r\n        authMap |= uint256(1<<uint256(Role.OWNER));\r\n       } \r\n       \r\n       if(_auth == Authorization.ISSUER \r\n            || _auth == Authorization.ASSET_AND_ISSUER \r\n            || _auth == Authorization.OWNER_AND_ISSUER \r\n            || _auth == Authorization.ALL) {\r\n        authMap |= uint256(1<<uint256(Role.ISSUER));\r\n       }\r\n\r\n       if(_auth == Authorization.ASSET \r\n            || _auth == Authorization.ASSET_AND_ISSUER \r\n            || _auth == Authorization.OWNER_AND_ASSET \r\n            || _auth == Authorization.ALL) {\r\n        authMap |= uint256(1<<uint256(Role.ASSET));\r\n       }\r\n\r\n       return authMap;\r\n    }\r\n\r\n    function _roleBasedAuthorization(bytes32 anchor, uint256 authorizationMap) internal view returns (bool) {\r\n        uint256 tokenId = tokenByAnchor[anchor];        \r\n        Role myRole = Role.INVALID;\r\n        Role alternateRole = Role.INVALID;\r\n        \r\n        if(_isApprovedOrOwner(_msgSender(), tokenId)) {\r\n            myRole = Role.OWNER;\r\n        }\r\n\r\n        if(isMaintainer(msg.sender)) {\r\n            alternateRole = Role.ISSUER;\r\n        }\r\n\r\n        return hasAuthorization(myRole, authorizationMap) \r\n                    || hasAuthorization(alternateRole, authorizationMap);\r\n    }\r\n   \r\n    ///@dev Hook executed before decodeAttestationIfValid returns. Override in derived contracts\r\n    function _beforeAttestationUse(bytes32 anchor, address to, bytes memory data) internal view virtual {}\r\n    \r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId, uint256 batchSize)\r\n        internal virtual\r\n        override(ERC721, ERC721Enumerable)\r\n    {\r\n        require(batchSize == 1, \"ERC6956-E4\");\r\n        bytes32 anchor = anchorByToken[tokenId];\r\n        emit AnchorTransfer(from, to, anchor, tokenId);\r\n\r\n        if(to == address(0)) {\r\n            // we are burning, ensure the mapping is deleted BEFORE the transfer\r\n            // to avoid reentrant-attacks\r\n            _burnedTokensByAnchor[anchor] = tokenId; // Remember tokenId for a potential re-mint\r\n            delete tokenByAnchor[anchor];\r\n            delete anchorByToken[tokenId]; \r\n        }        \r\n        else {\r\n            require(_anchorIsReleased[anchor], \"ERC6956-E5\");\r\n        }\r\n\r\n        delete _anchorIsReleased[anchor]; // make sure anchor is non-released after the transfer again\r\n   }\r\n\r\n    /// @dev hook called after an anchor is minted\r\n    function _afterAnchorMint(address to, bytes32 anchor, uint256 tokenId) internal virtual {}\r\n\r\n    /**\r\n     * @notice Add (_add=true) or remove (_add=false) a maintainer\r\n     * @dev Note this is a trivial implementation, which can leave the contract without a maintainer.\r\n     * Since the function is access-controlled via onlyMaintainer, this results in the contract\r\n     * becoming unmaintainable. \r\n     * This may be desired behavior, for example if the contract shall become immutable until \r\n     * all eternity, therefore making a project truly trustless. \r\n     */\r\n    function updateMaintainer(address _maintainer, bool _add) public onlyMaintainer() {\r\n        maintainers[_maintainer] = _add;\r\n    }\r\n\r\n    /// @dev Verifies a anchor is valid and mints a token to the target address.\r\n    /// Internal function to be called whenever minting is needed.\r\n    /// Parameters:\r\n    /// @param to Beneficiary account address\r\n    /// @param anchor The anchor (from Merkle tree)\r\n    function _safeMint(address to, bytes32 anchor) internal virtual {\r\n        assert(tokenByAnchor[anchor] <= 0); // saftey for contract-internal errors\r\n        uint256 tokenId = _burnedTokensByAnchor[anchor];\r\n\r\n        if(tokenId < 1) {\r\n            _tokenIdCounter.increment();\r\n            tokenId = _tokenIdCounter.current();\r\n        }\r\n\r\n        assert(anchorByToken[tokenId] <= 0); // saftey for contract-internal errors\r\n        anchorByToken[tokenId] = anchor;\r\n        tokenByAnchor[anchor] = tokenId;\r\n        super._safeMint(to, tokenId);\r\n\r\n        _afterAnchorMint(to, anchor, tokenId);\r\n    }\r\n\r\n    function _commitAttestation(address to, bytes32 anchor, bytes32 attestationHash) internal {\r\n        _anchorByUsedAttestation[attestationHash] = anchor;\r\n        uint256 totalAttestationsByAnchor = attestationsUsedByAnchor[anchor] +1;\r\n        attestationsUsedByAnchor[anchor] = totalAttestationsByAnchor;\r\n        emit AttestationUse(to, anchor, attestationHash, totalAttestationsByAnchor );\r\n    }\r\n\r\n    function transferAnchor(bytes memory attestation, bytes memory data) public virtual\r\n    {      \r\n        bytes32 anchor;\r\n        address to;\r\n        bytes32 attestationHash;\r\n        (to, anchor, attestationHash) = decodeAttestationIfValid(attestation, data);\r\n        _commitAttestation(to, anchor, attestationHash); // commit already here, will be reverted in error case anyway\r\n\r\n        uint256 fromToken = tokenByAnchor[anchor]; // tokenID, null if not exists\r\n        address from = address(0); // owneraddress or 0x00, if not exists\r\n        \r\n        _anchorIsReleased[anchor] = true; // Attestation always temporarily releases the anchor       \r\n\r\n        if(fromToken > 0) {\r\n            from = ownerOf(fromToken);\r\n            require(from != to, \"ERC6956-E6\");\r\n            _safeTransfer(from, to, fromToken, \"\");\r\n        } else {\r\n            _safeMint(to, anchor);\r\n        }\r\n    }\r\n\r\n    function transferAnchor(bytes memory attestation) public virtual {\r\n        return transferAnchor(attestation, \"\");\r\n    }\r\n    \r\n\r\n    function hasAuthorization(Role _role, uint256 _auth ) public pure returns (bool) {\r\n        uint256 result = uint256(_auth & (1 << uint256(_role)));\r\n        return result > 0;\r\n    }\r\n\r\n    modifier authorized(Role _role, uint256 _authMap) {\r\n        require(hasAuthorization(_role, _authMap), \"ERC6956-E7\");\r\n        _;\r\n    }\r\n\r\n    // The following functions are overrides required by Solidity, EIP-165.\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override(ERC721, ERC721Enumerable)\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceId == type(IERC6956).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns whether a certain address is registered as trusted oracle, i.e. attestations signed by this address are accepted in `decodeAttestationIfValid`\r\n     * @dev This function may be overwritten when extending ERC-6956, e.g. when other oracle-registration mechanics are used\r\n     * @param oracleAddress Address of the oracle in question\r\n     * @return isTrusted True, if oracle is trusted\r\n     */\r\n    function isTrustedOracle(address oracleAddress) public virtual view returns (bool isTrusted) {\r\n        return _trustedOracles[oracleAddress];\r\n    }\r\n    \r\n\r\n    function decodeAttestationIfValid(bytes memory attestation, bytes memory data) public view returns (address to, bytes32 anchor, bytes32 attestationHash) {\r\n        uint256 attestationTime;\r\n        uint256 validStartTime;\r\n        uint256 validEndTime;\r\n        bytes memory signature;\r\n        bytes32[] memory proof;\r\n\r\n        attestationHash = keccak256(attestation);\r\n        (to, anchor, attestationTime, validStartTime, validEndTime, signature) = abi.decode(attestation, (address, bytes32, uint256, uint256, uint256, bytes));\r\n                \r\n        bytes32 messageHash = keccak256(abi.encodePacked(to, anchor, attestationTime, validStartTime, validEndTime, proof));\r\n        address signer = _extractSigner(messageHash, signature);\r\n\r\n        // Check if from trusted oracle\r\n        require(isTrustedOracle(signer), \"ERC6956-E8\");\r\n        require(_anchorByUsedAttestation[attestationHash] <= 0, \"ERC6956-E9\");\r\n\r\n        // Check expiry\r\n        uint256 timestamp = block.timestamp;\r\n        require(timestamp > validStartTime, \"ERC6956-E10\");\r\n        require(attestationTime + maxAttestationExpireTime > block.timestamp, \"ERC6956-E11\");\r\n        require(validEndTime > block.timestamp, \"ERC6956-E112\");\r\n\r\n        \r\n        // Calling hook!\r\n        _beforeAttestationUse(anchor, to, data);\r\n        return(to,  anchor, attestationHash);\r\n    }\r\n\r\n    /// @notice Compatible with ERC721.tokenURI(). Returns {baseURI}{anchor}\r\n    /// @dev Returns when called for tokenId=5, baseURI=https://myurl.com/collection/ and anchorByToken[5] =  0x12345\r\n    /// Example:  https://myurl.com/collection/0x12345\r\n    /// Works for non-burned tokens / active-Anchors only.\r\n    /// Anchor-based tokenURIs are needed as an anchor's corresponding tokenId is only known after mint. \r\n    /// @param tokenId TokenID\r\n    /// @return tokenURI Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {        \r\n        bytes32 anchor = anchorByToken[tokenId];\r\n        string memory anchorString = Strings.toHexString(uint256(anchor));\r\n        return bytes(_baseURI()).length > 0 ? string(abi.encodePacked(_baseURI(), anchorString)) : \"\";\r\n    }\r\n\r\n    function _baseURI() internal view virtual override(ERC721) returns (string memory) {\r\n        return _baseUri;\r\n    }\r\n\r\n    /**\r\n    * @dev Base URI, MUST end with a slash. Will be used as `{baseURI}{tokenId}` in tokenURI() function\r\n    */\r\n    string internal _baseUri = \"\"; // needs to end with '/'\r\n\r\n    /// @notice Set a new BaseURI. Can be used with dynamic NFTs that have server APIs, IPFS-buckets\r\n    /// or any other suitable system. Refer tokenURI(tokenId) for anchor-based or tokenId-based format.\r\n    /// @param tokenBaseURI The token base-URI. Must end with slash '/'.\r\n    function updateBaseURI(string calldata tokenBaseURI) public onlyMaintainer() {\r\n        _baseUri = tokenBaseURI;\r\n    }\r\n    event BurnAuthorizationChange(Authorization burnAuth, address indexed maintainer);\r\n\r\n    function updateBurnAuthorization(Authorization burnAuth) public onlyMaintainer() {\r\n        burnAuthorization = burnAuth;\r\n        emit BurnAuthorizationChange(burnAuth, msg.sender);\r\n        // TODO event\r\n    }\r\n    \r\n    event ApproveAuthorizationChange(Authorization approveAuth, address indexed maintainer);\r\n\r\n    function updateApproveAuthorization(Authorization approveAuth) public onlyMaintainer() {\r\n        approveAuthorization = approveAuth;\r\n        emit ApproveAuthorizationChange(approveAuth, msg.sender);\r\n\r\n        // TODO event\r\n    }\r\n\r\n    constructor(string memory _name, string memory _symbol)\r\n        ERC721(_name, _symbol) {            \r\n            maintainers[msg.sender] = true; // deployer is automatically maintainer\r\n            // Indicates general float-ability, i.e. whether anchors can be digitally dropped and released\r\n\r\n            // OWNER and ASSET shall normally be in sync anyway, so this is reasonable default \r\n            // authorization for approve and burn, as it mimicks ERC-721 behavior\r\n            burnAuthorization = Authorization.OWNER_AND_ASSET;\r\n            approveAuthorization = Authorization.OWNER_AND_ASSET;\r\n    }\r\n  \r\n    /*\r\n     ########################## SIGNATURE MAGIC, \r\n     ########################## adapted from https://solidity-by-example.org/signature/\r\n    */\r\n   /**\r\n    * Returns the signer of a message.\r\n    *  \r\n    *   OFF-CHAIN: \r\n    *   const [alice] = ethers.getSigners(); // = 0x3c44...\r\n    *   const messageHash = ethers.utils.solidityKeccak256([\"address\", \"bytes32\"], [a, b]);\r\n        const sig = await alice.signMessage(ethers.utils.arrayify(messageHash));\r\n\r\n        ONCHAIN In this contract, call from \r\n        ```\r\n        function (address a, bytes32 b, bytes memory sig) {\r\n            messageHash = keccak256(abi.encodePacked(to, b));\r\n            signer = extractSigner(messageHash, sig); // signer will be 0x3c44...\r\n        }\r\n        ```    * \r\n    * @param messageHash A keccak25(abi.encodePacked(...)) hash\r\n    * @param sig Signature (length 65 bytes)\r\n    * \r\n    * @return The signer\r\n    */\r\n   function _extractSigner(bytes32 messageHash, bytes memory sig) internal pure returns (address) {\r\n        require(sig.length == 65, \"ERC6956-E13\");\r\n        /*\r\n        Signature is produced by signing a keccak256 hash with the following format:\r\n        \"\\x19Ethereum Signed Message\\n\" + len(msg) + msg\r\n        */\r\n        bytes32 ethSignedMessageHash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", messageHash));\r\n\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // Extract the r, s, and v parameters from the signature\r\n        assembly {\r\n            r := mload(add(sig, 32))\r\n            s := mload(add(sig, 64))\r\n            v := byte(0, mload(add(sig, 96)))\r\n        }\r\n\r\n        // Ensure the v parameter is either 27 or 28\r\n        // TODO is this needed?\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n\r\n        // Recover the public key from the signature and message hash\r\n        // and convert it to an address\r\n        address signer = ecrecover(ethSignedMessageHash, v, r, s);       \r\n        return signer;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/cryptography/MerkleProof.sol@v4.8.3\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev These functions deal with verification of Merkle Tree proofs.\r\n *\r\n * The tree and the proofs can be generated using our\r\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\r\n * You will find a quickstart guide in the readme.\r\n *\r\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\r\n * hashing, or use a hash function other than keccak256 for hashing leaves.\r\n * This is because the concatenation of a sorted pair of internal nodes in\r\n * the merkle tree could be reinterpreted as a leaf value.\r\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\r\n * against this attack out of the box.\r\n */\r\nlibrary MerkleProof {\r\n    /**\r\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\r\n     * defined by `root`. For this, a `proof` must be provided, containing\r\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n     */\r\n    function verify(\r\n        bytes32[] memory proof,\r\n        bytes32 root,\r\n        bytes32 leaf\r\n    ) internal pure returns (bool) {\r\n        return processProof(proof, leaf) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Calldata version of {verify}\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function verifyCalldata(\r\n        bytes32[] calldata proof,\r\n        bytes32 root,\r\n        bytes32 leaf\r\n    ) internal pure returns (bool) {\r\n        return processProofCalldata(proof, leaf) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\r\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\r\n     * hash matches the root of the tree. When processing the proof, the pairs\r\n     * of leafs & pre-images are assumed to be sorted.\r\n     *\r\n     * _Available since v4.4._\r\n     */\r\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            computedHash = _hashPair(computedHash, proof[i]);\r\n        }\r\n        return computedHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Calldata version of {processProof}\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\r\n        bytes32 computedHash = leaf;\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            computedHash = _hashPair(computedHash, proof[i]);\r\n        }\r\n        return computedHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\r\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\r\n     *\r\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function multiProofVerify(\r\n        bytes32[] memory proof,\r\n        bool[] memory proofFlags,\r\n        bytes32 root,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bool) {\r\n        return processMultiProof(proof, proofFlags, leaves) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Calldata version of {multiProofVerify}\r\n     *\r\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function multiProofVerifyCalldata(\r\n        bytes32[] calldata proof,\r\n        bool[] calldata proofFlags,\r\n        bytes32 root,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bool) {\r\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\r\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\r\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\r\n     * respectively.\r\n     *\r\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\r\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\r\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function processMultiProof(\r\n        bytes32[] memory proof,\r\n        bool[] memory proofFlags,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bytes32 merkleRoot) {\r\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\r\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\r\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\r\n        // the merkle tree.\r\n        uint256 leavesLen = leaves.length;\r\n        uint256 totalHashes = proofFlags.length;\r\n\r\n        // Check proof validity.\r\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\r\n\r\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\r\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\r\n        bytes32[] memory hashes = new bytes32[](totalHashes);\r\n        uint256 leafPos = 0;\r\n        uint256 hashPos = 0;\r\n        uint256 proofPos = 0;\r\n        // At each step, we compute the next hash using two values:\r\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\r\n        //   get the next hash.\r\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\r\n        //   `proof` array.\r\n        for (uint256 i = 0; i < totalHashes; i++) {\r\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\r\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\r\n            hashes[i] = _hashPair(a, b);\r\n        }\r\n\r\n        if (totalHashes > 0) {\r\n            return hashes[totalHashes - 1];\r\n        } else if (leavesLen > 0) {\r\n            return leaves[0];\r\n        } else {\r\n            return proof[0];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calldata version of {processMultiProof}.\r\n     *\r\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function processMultiProofCalldata(\r\n        bytes32[] calldata proof,\r\n        bool[] calldata proofFlags,\r\n        bytes32[] memory leaves\r\n    ) internal pure returns (bytes32 merkleRoot) {\r\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\r\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\r\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\r\n        // the merkle tree.\r\n        uint256 leavesLen = leaves.length;\r\n        uint256 totalHashes = proofFlags.length;\r\n\r\n        // Check proof validity.\r\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\r\n\r\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\r\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\r\n        bytes32[] memory hashes = new bytes32[](totalHashes);\r\n        uint256 leafPos = 0;\r\n        uint256 hashPos = 0;\r\n        uint256 proofPos = 0;\r\n        // At each step, we compute the next hash using two values:\r\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\r\n        //   get the next hash.\r\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\r\n        //   `proof` array.\r\n        for (uint256 i = 0; i < totalHashes; i++) {\r\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\r\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\r\n            hashes[i] = _hashPair(a, b);\r\n        }\r\n\r\n        if (totalHashes > 0) {\r\n            return hashes[totalHashes - 1];\r\n        } else if (leavesLen > 0) {\r\n            return leaves[0];\r\n        } else {\r\n            return proof[0];\r\n        }\r\n    }\r\n\r\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\r\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\r\n    }\r\n\r\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(0x00, a)\r\n            mstore(0x20, b)\r\n            value := keccak256(0x00, 0x40)\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/eip-6956/IERC6956AttestationLimited.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.18;\r\n\r\n/**\r\n * @title Attestation-limited Asset-Bound NFT\r\n * @dev See https://eips.ethereum.org/EIPS/eip-6956\r\n *      Note: The ERC-165 identifier for this interface is 0x75a2e933\r\n */\r\ninterface IERC6956AttestationLimited is IERC6956 {\r\n    enum AttestationLimitPolicy {\r\n        IMMUTABLE,\r\n        INCREASE_ONLY,\r\n        DECREASE_ONLY,\r\n        FLEXIBLE\r\n    }\r\n        \r\n    /// @notice Returns the attestation limit for a particular anchor\r\n    /// @dev MUST return the global attestation limit per default\r\n    ///      and override the global attestation limit in case an anchor-based limit is set\r\n    function attestationLimit(bytes32 anchor) external view returns (uint256 limit);\r\n\r\n    /// @notice Returns number of attestations left for a particular anchor\r\n    /// @dev Is computed by comparing the attestationsUsedByAnchor(anchor) and the current attestation limit \r\n    ///      (current limited emitted via GlobalAttestationLimitUpdate or AttestationLimt events)\r\n    function attestationUsagesLeft(bytes32 anchor) external view returns (uint256 nrTransfersLeft);\r\n\r\n    /// @notice Indicates the policy, in which direction attestation limits can be updated (globally or per anchor)\r\n    function attestationLimitPolicy() external view returns (AttestationLimitPolicy policy);\r\n\r\n    /// @notice This emits when the global attestation limt is updated\r\n    event GlobalAttestationLimitUpdate(uint256 indexed transferLimit, address updatedBy);\r\n\r\n    /// @notice This emits when an anchor-specific attestation limit is updated\r\n    event AttestationLimitUpdate(bytes32 indexed anchor, uint256 indexed tokenId, uint256 indexed transferLimit, address updatedBy);\r\n\r\n    /// @dev This emits in the transaction, where attestationUsagesLeft becomes 0\r\n    event AttestationLimitReached(bytes32 indexed anchor, uint256 indexed tokenId, uint256 indexed transferLimit);\r\n}\r\n\r\n\r\n// File contracts/eip-6956/IERC6956Floatable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.18;\r\n\r\n/**\r\n * @title Floatable Asset-Bound NFT\r\n * @notice A floatable Asset-Bound NFT can (temporarily) be transferred without attestation\r\n * @dev See https://eips.ethereum.org/EIPS/eip-6956\r\n *      Note: The ERC-165 identifier for this interface is 0xf82773f7\r\n */\r\ninterface IERC6956Floatable is IERC6956 {\r\n    enum FloatState {\r\n        Default, // 0, inherits from floatAll\r\n        Floating, // 1\r\n        Anchored // 2\r\n    }\r\n\r\n    /// @notice Indicates that an anchor-specific floating state changed\r\n    event FloatingStateChange(bytes32 indexed anchor, uint256 indexed tokenId, FloatState isFloating, address operator);\r\n    /// @notice Emits when FloatingAuthorization is changed.\r\n    event FloatingAuthorizationChange(Authorization startAuthorization, Authorization stopAuthorization, address maintainer);\r\n    /// @notice Emits, when the default floating state is changed\r\n    event FloatingAllStateChange(bool areFloating, address operator);\r\n\r\n    /// @notice Indicates whether an anchored token is floating, namely can be transferred without attestation\r\n    function floating(bytes32 anchor) external view returns (bool);\r\n    \r\n    /// @notice Indicates whether any of OWNER, ISSUER, (ASSET) is allowed to start floating\r\n    function floatStartAuthorization() external view returns (Authorization canStartFloating);\r\n    \r\n    /// @notice Indicates whether any of OWNER, ISSUER, (ASSET) is allowed to stop floating\r\n    function floatStopAuthorization() external view returns (Authorization canStartFloating);\r\n\r\n    /**\r\n     * @notice Allows to override or reset to floatAll-behavior per anchor\r\n     * @dev Must throw when newState == Floating and floatStartAuthorization does not authorize msg.sender\r\n     * @dev Must throw when newState == Anchored and floatStopAuthorization does not authorize msg.sender\r\n     * @param anchor The anchor, whose anchored token shall override default behavior\r\n     * @param newState Override-State. If set to Default, the anchor will behave like floatAll\r\n     */\r\n    function float(bytes32 anchor, FloatState newState) external;    \r\n}\r\n\r\n\r\n// File contracts/eip-6956/IERC6956ValidAnchors.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.18;\r\n\r\n/**\r\n * @title Anchor-validating Asset-Bound NFT\r\n * @dev See https://eips.ethereum.org/EIPS/eip-6956\r\n *      Note: The ERC-165 identifier for this interface is 0x051c9bd8\r\n */\r\ninterface IERC6956ValidAnchors is IERC6956 {\r\n    /**\r\n     * @notice Emits when the valid anchors for the contract are updated.\r\n     * @param validAnchorHash Hash representing all valid anchors. Typically Root of MerkleTree\r\n     * @param maintainer msg.sender updating the hash\r\n     */\r\n    event ValidAnchorsUpdate(bytes32 indexed validAnchorHash, address indexed maintainer);\r\n\r\n    /**\r\n     * @notice Indicates whether an anchor is valid in the present contract\r\n     * @dev Typically implemented via MerkleTrees, where proof is used to verify anchor is part of the MerkleTree \r\n     *      MUST return false when no ValidAnchorsUpdate-event has been emitted yet\r\n     * @param anchor The anchor in question\r\n     * @param proof Proof that the anchor is valid, typically MerkleProof\r\n     * @return isValid True, when anchor and proof can be verified against validAnchorHash (emitted via ValidAnchorsUpdate-event)\r\n     */\r\n    function anchorValid(bytes32 anchor, bytes32[] memory proof) external view returns (bool isValid);        \r\n}\r\n\r\n\r\n// File contracts/eip-6956/ERC6956Full.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.18;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ASSET-BOUND NFT implementation with all interfaces\r\n * @author Thomas Bergmueller (@tbergmueller)\r\n * @notice Extends ERC6956.sol with additional interfaces and functionality\r\n * \r\n * @dev Error-codes\r\n * ERROR | Message\r\n * ------|-------------------------------------------------------------------\r\n * E1-20 | See ERC6956.sol\r\n * E21   | No permission to start floating\r\n * E22   | No permission to stop floating\r\n * E23   | allowFloating can only be called when changing floating state\r\n * E24   | No attested transfers left\r\n * E25   | data must contain merkle-proof\r\n * E26   | Anchor not valid\r\n * E27   | Updating attestedTransferLimit violates policy\r\n */\r\ncontract ERC6956Full is ERC6956, IERC6956AttestationLimited, IERC6956Floatable, IERC6956ValidAnchors {\r\n    Authorization public floatStartAuthorization;\r\n    Authorization public floatStopAuthorization;\r\n\r\n    /// ###############################################################################################################################\r\n    /// ##############################################################################################  IERC6956AttestedTransferLimited\r\n    /// ###############################################################################################################################\r\n    \r\n    mapping(bytes32 => uint256) public attestedTransferLimitByAnchor;\r\n    mapping(bytes32 => FloatState) public floatingStateByAnchor;\r\n\r\n    uint256 public globalAttestedTransferLimitByAnchor;\r\n    AttestationLimitPolicy public attestationLimitPolicy;\r\n\r\n    bool public allFloating;\r\n\r\n    /// @dev The merkle-tree root node, where proof is validated against. Update via updateValidAnchors(). Use salt-leafs in merkle-trees!\r\n    bytes32 private _validAnchorsMerkleRoot;\r\n\r\n    function _requireValidLimitUpdate(uint256 oldValue, uint256 newValue) internal view {\r\n        if(newValue > oldValue) {\r\n            require(attestationLimitPolicy == AttestationLimitPolicy.FLEXIBLE || attestationLimitPolicy == AttestationLimitPolicy.INCREASE_ONLY, \"ERC6956-E27\");\r\n        } else {\r\n            require(attestationLimitPolicy == AttestationLimitPolicy.FLEXIBLE || attestationLimitPolicy == AttestationLimitPolicy.DECREASE_ONLY, \"ERC6956-E27\");\r\n        }\r\n    }\r\n\r\n    function updateGlobalAttestationLimit(uint256 _nrTransfers) \r\n        public \r\n        onlyMaintainer() \r\n    {\r\n       _requireValidLimitUpdate(globalAttestedTransferLimitByAnchor, _nrTransfers);\r\n       globalAttestedTransferLimitByAnchor = _nrTransfers;\r\n       emit GlobalAttestationLimitUpdate(_nrTransfers, msg.sender);\r\n    }\r\n\r\n    function updateAttestationLimit(bytes32 anchor, uint256 _nrTransfers) \r\n        public \r\n        onlyMaintainer() \r\n    {\r\n       uint256 currentLimit = attestationLimit(anchor);\r\n       _requireValidLimitUpdate(currentLimit, _nrTransfers);\r\n       attestedTransferLimitByAnchor[anchor] = _nrTransfers;\r\n       emit AttestationLimitUpdate(anchor, tokenByAnchor[anchor], _nrTransfers, msg.sender);\r\n    }\r\n\r\n    function attestationLimit(bytes32 anchor) public view returns (uint256 limit) {\r\n        if(attestedTransferLimitByAnchor[anchor] > 0) { // Per anchor overwrites always, even if smaller than globalAttestedTransferLimit\r\n            return attestedTransferLimitByAnchor[anchor];\r\n        } \r\n        return globalAttestedTransferLimitByAnchor;\r\n    }\r\n\r\n    function attestationUsagesLeft(bytes32 anchor) public view returns (uint256 nrTransfersLeft) {\r\n        // FIXME panics when attestationsUsedByAnchor > attestedTransferLimit \r\n        // since this should never happen, maybe ok?\r\n        return attestationLimit(anchor) - attestationsUsedByAnchor[anchor];\r\n    }\r\n\r\n    /// ###############################################################################################################################\r\n    /// ##############################################################################################  FLOATABILITY\r\n    /// ###############################################################################################################################\r\n    \r\n    function updateFloatingAuthorization(Authorization startAuthorization, Authorization stopAuthorization) public\r\n        onlyMaintainer() {\r\n            floatStartAuthorization = startAuthorization;\r\n            floatStopAuthorization = stopAuthorization;\r\n            emit FloatingAuthorizationChange(startAuthorization, stopAuthorization, msg.sender);\r\n    }\r\n\r\n    function floatAll(bool doFloatAll) public onlyMaintainer() {\r\n        require(doFloatAll != allFloating, \"ERC6956-E23\");\r\n        allFloating = doFloatAll;\r\n        emit FloatingAllStateChange(doFloatAll, msg.sender);\r\n    }\r\n\r\n\r\n    function _floating(bool defaultFloatState, FloatState anchorFloatState) internal pure returns (bool floats) {\r\n        if(anchorFloatState == FloatState.Default) {\r\n            return defaultFloatState;\r\n        }\r\n        return anchorFloatState == FloatState.Floating; \r\n    }\r\n\r\n    function float(bytes32 anchor, FloatState newFloatState) public \r\n    {\r\n        bool currentFloatState = floating(anchor);\r\n        bool willFloat = _floating(allFloating, newFloatState);\r\n\r\n        require(willFloat != currentFloatState, \"ERC6956-E23\");\r\n\r\n        if(willFloat) {\r\n            require(_roleBasedAuthorization(anchor, createAuthorizationMap(floatStartAuthorization)), \"ERC6956-E21\");\r\n        } else {\r\n            require(_roleBasedAuthorization(anchor, createAuthorizationMap(floatStopAuthorization)), \"ERC6956-E22\");\r\n        }\r\n\r\n        floatingStateByAnchor[anchor] = newFloatState;\r\n        emit FloatingStateChange(anchor, tokenByAnchor[anchor], newFloatState, msg.sender);\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId, uint256 batchSize)\r\n        internal virtual\r\n        override(ERC6956)  {\r\n            bytes32 anchor = anchorByToken[tokenId];\r\n                    \r\n            if(!_anchorIsReleased[anchor]) {\r\n                // Only write when not already released - this saves gas, as memory-write is quite expensive compared to IF\r\n                if(floating(anchor)) {\r\n                    _anchorIsReleased[anchor] = true; // FIXME OPTIMIZATION, we do not need \r\n                }\r\n            }\r\n             \r\n            super._beforeTokenTransfer(from, to, tokenId, batchSize);\r\n        }\r\n    function _beforeAttestationUse(bytes32 anchor, address to, bytes memory data) internal view virtual override(ERC6956) {\r\n        // empty, can be overwritten by derived conctracts.\r\n        require(attestationUsagesLeft(anchor) > 0, \"ERC6956-E24\");\r\n\r\n        // IERC6956ValidAnchors check anchor is indeed valid in contract\r\n        require(data.length > 0, \"ERC6956-E25\");\r\n        bytes32[] memory proof;\r\n        (proof) = abi.decode(data, (bytes32[])); // Decode it with potentially more data following. If there is more data, this may be passed on to safeTransfer\r\n        require(anchorValid(anchor, proof), \"ERC6956-E26\");\r\n\r\n        super._beforeAttestationUse(anchor, to, data);\r\n    }\r\n\r\n\r\n    /// @notice Update the Merkle root containing the valid anchors. Consider salt-leaves!\r\n    /// @dev Proof (transferAnchor) needs to be provided from this tree. \r\n    /// @dev The merkle-tree needs to contain at least one \"salt leaf\" in order to not publish the complete merkle-tree when all anchors should have been dropped at least once. \r\n    /// @param merkleRootNode The root, containing all anchors we want validated.\r\n    function updateValidAnchors(bytes32 merkleRootNode) public onlyMaintainer() {\r\n        _validAnchorsMerkleRoot = merkleRootNode;\r\n        emit ValidAnchorsUpdate(merkleRootNode, msg.sender);\r\n    }\r\n\r\n    function anchorValid(bytes32 anchor, bytes32[] memory proof) public virtual view returns (bool) {\r\n        return MerkleProof.verify(\r\n            proof,\r\n            _validAnchorsMerkleRoot,\r\n            keccak256(bytes.concat(keccak256(abi.encode(anchor)))));\r\n    }\r\n\r\n    function floating(bytes32 anchor) public view returns (bool){\r\n        return _floating(allFloating, floatingStateByAnchor[anchor]);\r\n    }    \r\n\r\n    constructor(\r\n        string memory _name, \r\n        string memory _symbol, \r\n        AttestationLimitPolicy _limitUpdatePolicy)\r\n        ERC6956(_name, _symbol) {          \r\n            attestationLimitPolicy = _limitUpdatePolicy;\r\n\r\n        // Note per default no-one change floatability. canStartFloating and canStopFloating needs to be configured first!        \r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override(ERC6956)\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceId == type(IERC6956AttestationLimited).interfaceId ||\r\n            interfaceId == type(IERC6956Floatable).interfaceId ||\r\n            interfaceId == type(IERC6956ValidAnchors).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/factory/BaseProvider.sol\r\n\r\n\r\npragma solidity ^0.8.18;\r\n\r\n/**\r\n * @title InitArgsProvider, typically implemented by factories\r\n * @author tb@authenticvision.com\r\n * @dev Provides initArgs for a deployed contract's address, that can be passed to that deployed contract's `initialize()` function.\r\n *      The deployed contract typically implements `ProvideableContract`. The constructor of `ProvideableContract` checks for this interface\r\n *      and calls usually calls `getInitArgs(address(this))`\r\n */\r\ninterface IInitArgsProvider {\r\n    /**\r\n     * @notice Provides initArgs (typically from a factory) for a particular deployed smart-contract address.\r\n     * @dev is called from `ProvidableContract`-constructor at deploy-time. Main reason for this implementation\r\n     *   is that Contracts are deployed via create2, so any constructor-parameter is address defining. This allows \r\n     *   at deploy time to set additional parameters, which are not address-defining.\r\n     * @param deployedContract Address of the deployed contract requesting initArgs\r\n     * @return initArgs abi-encoded init args\r\n     */\r\n    function getInitArgs(address deployedContract) external view returns (bytes memory initArgs);\r\n}\r\n\r\n/**\r\n * @title ProvidableContract (to be extended by actual contracts)\r\n * @author tb@authenticvision.com\r\n * @notice Abstract ProvidableContract defining the `initialize()` function, which is called at deploy-time, if the deployer implements IInitArgsProvider\r\n * @dev Any contract deployed through SlimFactory must extend `ProvidableContract`.\r\n */\r\nabstract contract ProvidableContract {\r\n    /**\r\n     * @notice Indicates the deployer of this contract.\r\n     */\r\n    address public deployedBy;\r\n    /**\r\n     * @notice Returns the Version in format X.Y.Z\r\n     * @dev Needs to match `BaseProvider.getVersion()`\r\n     */\r\n    function getVersion() public virtual pure returns (string memory);\r\n    /**\r\n     * @notice Initializer called at deploytime or manually afterwards.\r\n     * @dev MUST ensure it can only be executed once, typically by setting a notInitialized bool and saying require(notInitialized)\r\n     * @param initArgs abi-encoded init args provided by `IInitArgsProvider`\r\n     */\r\n    function initialize(bytes memory initArgs) public virtual;\r\n\r\n    /**\r\n     * @dev Stores the deployer-address and - if the deployer supports the IInitArgsProvider interface - requests initArgs and calls `initialize()`\r\n     */\r\n    constructor() {\r\n        // saftey feature, lets people easily verifiy it has been deployed through a trusted factory\r\n        deployedBy = msg.sender; \r\n\r\n        // Callback to the factory\r\n        if(ERC165Checker.supportsInterface(deployedBy, type(IInitArgsProvider).interfaceId)) {\r\n            IInitArgsProvider factory = IInitArgsProvider(msg.sender);\r\n            initialize(factory.getInitArgs(address(this)));  \r\n        }  \r\n    }\r\n}\r\n\r\n/**\r\n * @title BaseProvider (to be extended by actual providers)\r\n * @author tb@authenticvision.com \r\n * @notice Abstract BaseProvider contract to deliver a `ProvidableContract`, must be extended by actual SlimFactory-Providers \r\n * @dev A provider is a contract, which provides the bytecode of a particular `ProvidableContract`, a function to encode deployArgs (constructorArgs) and a function to encode initArgs\r\n */\r\nabstract contract BaseProvider {\r\n    /**\r\n     * Returns bytecode with constructor args. Needs to be implemented by actual provider contract.abi\r\n     * Typical implementation:\r\n     * ```\r\n     *  bytes memory bytecode = type(DemoContract).creationCode; // DemoContract is ProvidableContract        \r\n     *  return abi.encodePacked(bytecode, args);\r\n     * ```\r\n     */\r\n    function getBytecode(bytes memory args) public virtual pure returns (bytes memory);\r\n\r\n    /**\r\n     * Returns the version as string in format X.Y.Z\r\n     * Needs to match `BaseProvider.getVersion()`\r\n     */\r\n    function getVersion() public virtual pure returns (string memory);\r\n\r\n    function getVersionHash() public pure returns (bytes32) {\r\n        return keccak256(abi.encode(getVersion()));\r\n    }\r\n\r\n    function getDefaultInitArgs() public virtual view returns (bytes memory);\r\n\r\n    function getDefaultArgs(address appHub, string memory name, string memory symbol) public virtual view returns (bytes memory);\r\n\r\n    // ############################### NOT sure whether to keep the below (currently not used)\r\n    // TODO or remove\r\n    function getBytecodeHash(bytes memory bytecode) public pure returns (bytes32) {\r\n        return keccak256(abi.encode(bytecode, getVersionHash()));\r\n    }\r\n\r\n    /**\r\n     * @dev Verifies via hashing that the bytecode is indeed suitable to be deployed with this contract\r\n     * @param byteCode The bytecode, typically the creationCode + args\r\n     * @param byteCodeHash The bytecode hash, computed typically by calling getBytecodeHash() at some point\r\n     */\r\n    function verifyByteCode(bytes memory byteCode, bytes32 byteCodeHash) public virtual pure returns (bool) {\r\n        return byteCodeHash == getBytecodeHash(byteCode);\r\n    }\r\n  }\r\n\r\n\r\n// File contracts/IERC6454.sol\r\n\r\n\r\n\r\n/// @title EIP-6454 Minimalistic Non-Transferable interface for NFTs\r\n/// @dev See https://eips.ethereum.org/EIPS/eip-6454\r\n/// @dev Note: the ERC-165 identifier for this interface is 0x91a6262f.\r\n\r\npragma solidity ^0.8.18;\r\n\r\ninterface IERC6454 /* is IERC165 */ {\r\n    /**\r\n     * @notice Used to check whether the given token is transferable or not.\r\n     * @dev If this function returns `false`, the transfer of the token MUST revert execution.\r\n     * @dev If the tokenId does not exist, this method MUST revert execution, unless the token is being checked for\r\n     *  minting.\r\n     * @dev The `from` parameter MAY be used to also validate the approval of the token for transfer, but anyone\r\n     *  interacting with this function SHOULD NOT rely on it as it is not mandated by the proposal.\r\n     * @param tokenId ID of the token being checked\r\n     * @param from Address from which the token is being transferred\r\n     * @param to Address to which the token is being transferred\r\n     * @return Boolean value indicating whether the given token is transferable\r\n     */\r\n    function isTransferable(uint256 tokenId, address from, address to) external view returns (bool);\r\n}\r\n\r\n\r\n// File contracts/MetaAnchor.sol\r\n\r\n\r\npragma solidity ^0.8.18;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Meta Anchor (TM) Digital Soul (TM) contract\r\n * @author metaanchor.io\r\n * @notice This contract anchors DigitalSoul-NFTs to Physical Objects. They're called\r\n * DigitalSoul-NFTs because as they anchor 1:1 and inseperably to a specific physical object \r\n * over its entire lifecycle. Whoever posesses/controls the physical object has the \r\n * authorization to control the corresponding DigitalSoul-NFT, e.g. can transfer or mint. \r\n * Note that neither from- nor to-account need to sign transfers, authorization is solely \r\n * provided through access to the physical object!\r\n * \r\n * ~~ OWNER OF THIS CONTRACT ~~\r\n * The owner is indicated through `owner()`. The owner issues the collection and physical objects,\r\n * manages the contract and it's appearance on marketplaces/platforms and \r\n * is the issuer of any meta data, assets or perks associated with the DigitalSoul-NFTs.\r\n *  \r\n *  ~~ SYSTEM DESCRIPTION ~~\r\n * A Physical Object is equipped with a uniquely identifiable MetaAnchor security tag (\"anchor\"). \r\n * A user optically authenticates the MetaAnchor security tag with a smartphone and specifies the \r\n * to`-account, which shall receive the DigitalSoul-NFT.\r\n * Upon the authenticated presence of the Physical Object through the MetaAnchor technology,\r\n * `transferAnchor` is invoked. The DigitalSoul-NFT gets minted or transfered to the \r\n * `to`-account, irregardless whether an eventual previous owner approves or not.\r\n * Using the well-known `tokenURI()`, the DigitalSoul (metadata) of the Physical Object can be resolved.\r\n * Metadata is stored off-chain (IPFS, centralized server, ...) by the owner of this contract, hence the\r\n * producer/issuer of the Physical Objects.\r\n * Metadata is linked to the anchor (not the tokenID!), hence anchored 1:1 to the physical object. \r\n * \r\n * ~~ SMART CONTRACT TLDR ~~ \r\n * a) DigitalSoul-NFTs are technically ERC-6956 Asset-Bound NFTs, fully compatible with ERC-721.\r\n * b) When an account owns or has owned the DigitalSoul-NFT this proves this account has benefitted from \r\n * having access to the Physical Object corresponding to the specific anchor.\r\n * c) `ownerOf[tokenByAnchor(anchor)]` indicates the current owner of the DigitalSoul-NFT, which \r\n * corresponds to the particular physical object identified through `anchor`.\r\n * d) `isFloating(anchor)` respectively `isFloating(anchorByToken(token))` indicates whether a DigitalSoul-Token\r\n * can also be transferred without having access to the physical object.\r\n * This is useful for e.g. pre-sale activity or temporary lending of DigitalSoul-Tokens to other accounts.\r\n * e) When `isFloating(anchor)==true`, a DigitalSoul-Token acts like an \"ordinary\" ERC-721 NFT with the caveat,\r\n * that it can be transferred from anywhere as soon as the physical object is used to authorize transferAnchor.\r\n * f) DigitalSoul-NFTs have a limited amount of `transferAnchor()` calls. Use `attestationUsagesLeft(anchor)` to see how \r\n * often a DigitalSoul-NFT can still be transferred.\r\n *  \r\n *  ~~ SECURITY CONSIDERATIONS ~~\r\n *  If you do not control / restrict other people's access to the physical object, a DigitalSoul-NFT may\r\n *  be transferred from your wallet without your consent anytime. Protect the physical object from \r\n *  unauthorized access or theft like you would protect any other \"ordinary\" physical thing.\r\n * \r\n *  On the bright side, if your DigitalSoul-NFT should get stolen, you can recover it anytime\r\n *  through using the physical object and `transferAnchor()`.\r\n * \r\n * ~~ Legal disclaimer ~~\r\n * metaanchor.io licenses this contract to the `owner()` without warrenty of any kind, express or implied,\r\n * including but not limited to the warranties of merchantability, fitness for particular purpose and noninfringement.\r\n * In no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether\r\n * in an action of contract, tort or otherwise, arising from, out of or in connection with this software \r\n * or the use or other dealings in the software.\r\n * \r\n * @dev This contract extends [ERC-6956, also authored by us](https://eips.ethereum.org/EIPS/eip-6956) and is therefore \r\n * fully compatible with ERC-721 [especially when a token `floating`].\r\n * TokenIds are assigned to anchors in the order of minting. Once a tokenId <> anchor relation is established,\r\n * it is immutable over the complete lifecycle. \r\n */\r\ncontract MetaAnchor is ERC6956Full, Pausable, Ownable, AppContract, ProvidableContract, IERC6454{\r\n    /// @notice ORACLE_ROLE is an accepted signer for attestations.\r\n    /// @return Role hash, as should be passed to hasRole(), grantRole()\r\n    bytes32 public constant ORACLE_ROLE = keccak256(\"ORACLE_ROLE\");\r\n\r\n    /// @notice MINTER_ROLE can call dropAnchor and safeMint(), the latter is not recommended to use directly\r\n    /// @return Role hash, as should be passed to hasRole(), grantRole()\r\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\r\n\r\n    /// @notice MINTER_ROLE can call dropAnchor and safeMint(), the latter is not recommended to use directly\r\n    /// @return Role hash, as should be passed to hasRole(), grantRole()\r\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\"MAINTAINER_ROLE\");\r\n\r\n    bytes32 public constant DEPLOYER_ROLE = keccak256(\"DEPLOYER_ROLE\");\r\n   \r\n    string internal _contractUri = \"\";\r\n    bool private _isInitialized;\r\n\r\n    /// @notice Contract version string\r\n    function getVersion() public virtual pure override returns (string memory) {\r\n        return \"0.3.1\";\r\n    }\r\n\r\n    /// @notice Takes identifiying _name and _symbol parameters. updateBaseURI() and maxDropsPerAnchor() shall directly after deployment. \r\n    /// @dev Typically used via MetaAnchorFactory, which ensures to set default parameters.\r\n    /// @param _hub The address of the AppHub for role management\r\n    /// @param _name The Name of the Contract, usually also the Collection-Name\r\n    /// @param _symbol The symbol for tokens of this contract. In MetaAnchor-language often referred to as CSN (contract short name)\r\n    constructor(address _hub, string memory _name, string memory _symbol, IERC6956AttestationLimited.AttestationLimitPolicy _limitUpdatePolicy)\r\n                ERC6956Full(_name, _symbol, _limitUpdatePolicy) AppContract(_hub) {\r\n        // Better safe than sorry - remove the Deployer (factory) from ERC6956.\r\n        // This is possible, because this constructor is run after all dependent constructors, so also\r\n        // after ERC6956Full-constructor as well as the ProvidableContract-constructor (calling initialize)\r\n        delete maintainers[msg.sender];\r\n    }\r\n\r\n    /**\r\n     * @notice Decodes init-args, typically generated by the ProviderContract\r\n     * @param initArgs abi-encoded init-args\r\n     * @return _burnAuthorization Indicates which authorization is needed to burn tokens\r\n     * @return _approveAuthorizaion Indicates which authorization is needed to approve other accounts for a token\r\n     * @return _canStartFloatingAuthorization Indicates which authorization is needed to start floating of an anchor\r\n     * @return _canStopFloatingAuthorization Indicates which authorization is needed to stop floating of an anchor\r\n     * @return _attestationLimit The initial attestation limit. This is the only way to define the attestationLimit if AttestationLimitPolicy is IMMUTABLE.\r\n     */\r\n    function decodeInitArgs(bytes memory initArgs) public pure returns \r\n        (\r\n            IERC6956.Authorization _burnAuthorization,\r\n            IERC6956.Authorization _approveAuthorizaion,\r\n            // IERC6956Floatable\r\n            IERC6956.Authorization _canStartFloatingAuthorization,\r\n            IERC6956.Authorization _canStopFloatingAuthorization,\r\n            // IERC6956AttestationLimited\r\n            uint256 _attestationLimit\r\n        )  {\r\n        (_burnAuthorization, _approveAuthorizaion,\r\n            _canStartFloatingAuthorization, _canStopFloatingAuthorization,\r\n            _attestationLimit\r\n        ) = abi.decode(\r\n            initArgs, (\r\n                IERC6956.Authorization, IERC6956.Authorization,\r\n                IERC6956.Authorization, IERC6956.Authorization,\r\n                uint256\r\n            )\r\n        );\r\n        // implicitely return values\r\n    }\r\n\r\n   \r\n    /**\r\n     * @notice Initializes the contract with well-defined init args (refer `decodeInitArgs` for definition)\r\n     * @dev This is the only way how attestationLimits can be defined when AttestationLimitPolicy == IMMUTABLE.\r\n     * @param initArgs abi-encoded, typically requested from MetaAnchorFactory and generated by MetaAnchorProvider\r\n     */\r\n    function initialize(bytes memory initArgs) public virtual override onlyMaintainer() {\r\n        require(!_isInitialized, \"initialize() can only be called once\");\r\n        _isInitialized = true;       \r\n        (\r\n            IERC6956.Authorization _burnAuthorization,\r\n            IERC6956.Authorization _approveAuthorizaion,\r\n            // IERC6956Floatable\r\n            IERC6956.Authorization _canStartFloatingAuthorization,\r\n            IERC6956.Authorization _canStopFloatingAuthorization,\r\n            // IERC6956AttestationLimited\r\n            uint256 _attestationLimit\r\n        ) = decodeInitArgs(initArgs);\r\n\r\n        updateBurnAuthorization(_burnAuthorization);\r\n        updateApproveAuthorization(_approveAuthorizaion);    \r\n        updateFloatingAuthorization(_canStartFloatingAuthorization, _canStopFloatingAuthorization);\r\n        updateGlobalAttestationLimit(_attestationLimit);\r\n    }\r\n\r\n    // ####################################### ERC6956-Overrides for permissions\r\n\r\n    function isMaintainer(address a) public virtual view override(ERC6956) returns (bool) {\r\n        // explicitly override the permission system of ERC6956 with AppHub\r\n        return hasRole(MAINTAINER_ROLE, a) || super.isMaintainer(a); \r\n    }\r\n\r\n    /**\r\n     * @notice Declares `oracleAddress` trusted, if it has the `ORACLE_ROLE`\r\n     * @dev Overrides ERC6956 oracle logic, does NOT emit OracleUpdate events, when ORACLE_ROLE is granted via grantRole()\r\n     * @param oracleAddress Oracle address in question\r\n     * @return isTrusted true, if oracleAddress has ORACLE_ROLE\r\n     */\r\n    function isTrustedOracle(address oracleAddress) public view override(ERC6956) returns (bool isTrusted) {\r\n        return hasRole(ORACLE_ROLE, oracleAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice When calling ContractURI, typically json-metadata is returned. Refer e.g. the OpenSea format suggestion\r\n     * @return ContractURI pointing to the json \r\n     */\r\n    function contractURI() public view returns (string memory) {\r\n        return _contractUri;\r\n    }\r\n\r\n    /**\r\n     * @notice Pauses the contract. This means among other things that drops/releases are no longer possible.\r\n     */\r\n    function pause() public onlyRole(PAUSER_ROLE) {\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n     * Unpauses the contract / reverts pause().\r\n     */\r\n    function unpause() public onlyRole(PAUSER_ROLE) {\r\n        _unpause();\r\n    }\r\n\r\n    // ####################################### IERC6454\r\n    /**\r\n     * @notice Refer IERC6454.\r\n     * @param tokenId TokenId in question\r\n     * @param from current owner address or approved address\r\n     * @param to target address, where tokenId shall be transfered to.\r\n     * @dev Indicates general \r\n     */\r\n    function isTransferable(uint256 tokenId, address from, address to) external view returns (bool transferable) {\r\n\r\n        if(from == address(0)) {\r\n            // Minting can only be done through transferAnchor()\r\n            return false;\r\n        }\r\n\r\n        bytes32 anchor = anchorByToken[tokenId];\r\n        require(anchor != 0x0, \"Token does not exist\"); // A non-existent tokenId will resolve to the invalid anchor 0x0. ERC-6454 requires this throw\r\n\r\n        if (from == address(0) && to == address(0)) {\r\n            // Indicate the token can be transferred in general, as tokens can be oracle-transferred anytime - as long as limit is not reached\r\n            // but even if the limit is reached, a floating token could be transfered by \"traditional\" ways.\r\n            return attestationUsagesLeft(anchor) > 0 || floating(anchor);\r\n        }\r\n\r\n        \r\n        return floating(anchor) && _isApprovedOrOwner(from, tokenId);\r\n    }\r\n\r\n    // ####################################### ER165\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override(ERC6956Full, AppContract)\r\n        returns (bool)\r\n    {\r\n        return super.supportsInterface(interfaceId) || interfaceId == type(IERC6454).interfaceId;\r\n    }\r\n   \r\n    /// @notice Set a new contractURI. Refer `contractURI` for details.\r\n    /// @param contractUri The token base-URI. Must end with slash '/'.\r\n    function updateContractURI(string calldata contractUri) public onlyRole(MAINTAINER_ROLE) whenNotPaused() {\r\n        _contractUri = contractUri;\r\n    }\r\n\r\n    /// @notice Transfers ownership over the contract. The owner has no updating power in this contract, but is returned when calling owner(). \r\n    /// This allows the owner to act/sign accordinlgy external software applications / marketplaces etc.\r\n    /// The owner can be changed by MAINTAINER_ROLE or the current owner.\r\n    /// @dev Overrides Ownable's function. For MetaAnchor, the MAINTAINER_ROLE can also change ownership. \r\n    /// Do NOT use onlyOwner modifier in this contract, as this would give power to the owner, which is not desired in our use-case.\r\n    /// @param newOwner The new owner\r\n    function transferOwnership(address newOwner) override public virtual \r\n        ownerOrMaintainer() whenNotPaused() {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner); // Calls the Ownable implementation\r\n    }\r\n\r\n    modifier ownerOrMaintainer() {\r\n         require(hasRole(MAINTAINER_ROLE, msg.sender) || msg.sender == owner(), \"Caller must be maintainer or owner\");\r\n         _;\r\n    }\r\n\r\n    // ################################## PAUSABLE function wrappers\r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId, uint256 batchSize)\r\n        internal virtual\r\n        override(ERC6956Full)\r\n        whenNotPaused()\r\n    {\r\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\r\n    }\r\n\r\n    function anchorValid(bytes32 anchor, bytes32[] memory proof) public virtual view override(ERC6956Full) whenNotPaused() returns (bool isValid) {\r\n        return super.anchorValid(anchor, proof);\r\n    }\r\n\r\n    function _beforeAttestationUse(bytes32 anchor, address to, bytes memory data) internal view virtual override(ERC6956Full) whenNotPaused() {\r\n        super._beforeAttestationUse(anchor, to, data);\r\n    }\r\n\r\n    function _approve(address to, uint256 tokenId) internal virtual override(ERC721) whenNotPaused(){\r\n        super._approve(to, tokenId);\r\n    }\r\n\r\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual override(ERC721) whenNotPaused() {\r\n        super._setApprovalForAll(owner, operator, approved);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hub\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"enum IERC6956AttestationLimited.AttestationLimitPolicy\",\"name\":\"_limitUpdatePolicy\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"anchor\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AnchorApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"anchor\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AnchorTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"hub\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldHub\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"maintainer\",\"type\":\"address\"}],\"name\":\"AppHubUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum IERC6956.Authorization\",\"name\":\"approveAuth\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maintainer\",\"type\":\"address\"}],\"name\":\"ApproveAuthorizationChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"anchor\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transferLimit\",\"type\":\"uint256\"}],\"name\":\"AttestationLimitReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"anchor\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transferLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"updatedBy\",\"type\":\"address\"}],\"name\":\"AttestationLimitUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"anchor\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"attestationHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalUsedAttestationsForAnchor\",\"type\":\"uint256\"}],\"name\":\"AttestationUse\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum IERC6956.Authorization\",\"name\":\"burnAuth\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maintainer\",\"type\":\"address\"}],\"name\":\"BurnAuthorizationChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"areFloating\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"FloatingAllStateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum IERC6956.Authorization\",\"name\":\"startAuthorization\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum IERC6956.Authorization\",\"name\":\"stopAuthorization\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"maintainer\",\"type\":\"address\"}],\"name\":\"FloatingAuthorizationChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"anchor\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IERC6956Floatable.FloatState\",\"name\":\"isFloating\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"FloatingStateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transferLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"updatedBy\",\"type\":\"address\"}],\"name\":\"GlobalAttestationLimitUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"trusted\",\"type\":\"bool\"}],\"name\":\"OracleUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"validAnchorHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maintainer\",\"type\":\"address\"}],\"name\":\"ValidAnchorsUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPLOYER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINTAINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allFloating\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"anchorByToken\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"anchor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"anchorValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"attestation\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAnchor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"attestation\",\"type\":\"bytes\"}],\"name\":\"approveAnchor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveAuthorization\",\"outputs\":[{\"internalType\":\"enum IERC6956.Authorization\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"anchor\",\"type\":\"bytes32\"}],\"name\":\"attestationLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"attestationLimitPolicy\",\"outputs\":[{\"internalType\":\"enum IERC6956AttestationLimited.AttestationLimitPolicy\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"anchor\",\"type\":\"bytes32\"}],\"name\":\"attestationUsagesLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nrTransfersLeft\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"attestationsUsedByAnchor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"attestedTransferLimitByAnchor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"attestation\",\"type\":\"bytes\"}],\"name\":\"burnAnchor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"attestation\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"burnAnchor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAuthorization\",\"outputs\":[{\"internalType\":\"enum IERC6956.Authorization\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IERC6956.Authorization\",\"name\":\"_auth\",\"type\":\"uint8\"}],\"name\":\"createAuthorizationMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"attestation\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"decodeAttestationIfValid\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"anchor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"attestationHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initArgs\",\"type\":\"bytes\"}],\"name\":\"decodeInitArgs\",\"outputs\":[{\"internalType\":\"enum IERC6956.Authorization\",\"name\":\"_burnAuthorization\",\"type\":\"uint8\"},{\"internalType\":\"enum IERC6956.Authorization\",\"name\":\"_approveAuthorizaion\",\"type\":\"uint8\"},{\"internalType\":\"enum IERC6956.Authorization\",\"name\":\"_canStartFloatingAuthorization\",\"type\":\"uint8\"},{\"internalType\":\"enum IERC6956.Authorization\",\"name\":\"_canStopFloatingAuthorization\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_attestationLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployedBy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"anchor\",\"type\":\"bytes32\"},{\"internalType\":\"enum IERC6956Floatable.FloatState\",\"name\":\"newFloatState\",\"type\":\"uint8\"}],\"name\":\"float\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"doFloatAll\",\"type\":\"bool\"}],\"name\":\"floatAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"floatStartAuthorization\",\"outputs\":[{\"internalType\":\"enum IERC6956.Authorization\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"floatStopAuthorization\",\"outputs\":[{\"internalType\":\"enum IERC6956.Authorization\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"anchor\",\"type\":\"bytes32\"}],\"name\":\"floating\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"floatingStateByAnchor\",\"outputs\":[{\"internalType\":\"enum IERC6956Floatable.FloatState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalAttestedTransferLimitByAnchor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Role\",\"name\":\"_role\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_auth\",\"type\":\"uint256\"}],\"name\":\"hasAuthorization\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initArgs\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isMaintainer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"isTransferable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"transferable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"}],\"name\":\"isTrustedOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isTrusted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maintainers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAttestationExpireTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tokenByAnchor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"attestation\",\"type\":\"bytes\"}],\"name\":\"transferAnchor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"attestation\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAnchor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hub\",\"type\":\"address\"}],\"name\":\"updateAppHub\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IERC6956.Authorization\",\"name\":\"approveAuth\",\"type\":\"uint8\"}],\"name\":\"updateApproveAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"anchor\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_nrTransfers\",\"type\":\"uint256\"}],\"name\":\"updateAttestationLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenBaseURI\",\"type\":\"string\"}],\"name\":\"updateBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IERC6956.Authorization\",\"name\":\"burnAuth\",\"type\":\"uint8\"}],\"name\":\"updateBurnAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractUri\",\"type\":\"string\"}],\"name\":\"updateContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IERC6956.Authorization\",\"name\":\"startAuthorization\",\"type\":\"uint8\"},{\"internalType\":\"enum IERC6956.Authorization\",\"name\":\"stopAuthorization\",\"type\":\"uint8\"}],\"name\":\"updateFloatingAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nrTransfers\",\"type\":\"uint256\"}],\"name\":\"updateGlobalAttestationLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maintainer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_add\",\"type\":\"bool\"}],\"name\":\"updateMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"doTrust\",\"type\":\"bool\"}],\"name\":\"updateOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRootNode\",\"type\":\"bytes32\"}],\"name\":\"updateValidAnchors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MetaAnchor", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "000000000000000000000000bfb532a5700dd799ab59672e9eb26364a14298c8000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000016527562626572204475636b20466c6f617420436c75620000000000000000000000000000000000000000000000000000000000000000000000000000000000045244464300000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8be226f644f98ca115c9b4ad93d28d3b046c80d24acf89e1b59b2ab7902e131f"}