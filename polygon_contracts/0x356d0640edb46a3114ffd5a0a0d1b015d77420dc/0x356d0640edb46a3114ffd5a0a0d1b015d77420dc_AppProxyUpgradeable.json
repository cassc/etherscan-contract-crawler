{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@aragon/os/contracts/acl/IACL.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IACL {\\n    function initialize(address permissionsCreator) external;\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/apps/AppProxyBase.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"./AppStorage.sol\\\";\\nimport \\\"../common/DepositableDelegateProxy.sol\\\";\\nimport \\\"../kernel/KernelConstants.sol\\\";\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract AppProxyBase is AppStorage, DepositableDelegateProxy, KernelNamespaceConstants {\\n    /**\\n    * @dev Initialize AppProxy\\n    * @param _kernel Reference to organization kernel for the app\\n    * @param _appId Identifier for app\\n    * @param _initializePayload Payload for call to be made after setup to initialize\\n    */\\n    constructor(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public {\\n        setKernel(_kernel);\\n        setAppId(_appId);\\n\\n        // Implicit check that kernel is actually a Kernel\\n        // The EVM doesn't actually provide a way for us to make sure, but we can force a revert to\\n        // occur if the kernel is set to 0x0 or a non-code address when we try to call a method on\\n        // it.\\n        address appCode = getAppBase(_appId);\\n\\n        // If initialize payload is provided, it will be executed\\n        if (_initializePayload.length > 0) {\\n            require(isContract(appCode));\\n            // Cannot make delegatecall as a delegateproxy.delegatedFwd as it\\n            // returns ending execution context and halts contract deployment\\n            require(appCode.delegatecall(_initializePayload));\\n        }\\n    }\\n\\n    function getAppBase(bytes32 _appId) internal view returns (address) {\\n        return kernel().getApp(KERNEL_APP_BASES_NAMESPACE, _appId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/apps/AppProxyUpgradeable.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"./AppProxyBase.sol\\\";\\n\\n\\ncontract AppProxyUpgradeable is AppProxyBase {\\n    /**\\n    * @dev Initialize AppProxyUpgradeable (makes it an upgradeable Aragon app)\\n    * @param _kernel Reference to organization kernel for the app\\n    * @param _appId Identifier for app\\n    * @param _initializePayload Payload for call to be made after setup to initialize\\n    */\\n    constructor(IKernel _kernel, bytes32 _appId, bytes _initializePayload)\\n        AppProxyBase(_kernel, _appId, _initializePayload)\\n        public // solium-disable-line visibility-first\\n    {\\n        // solium-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev ERC897, the address the proxy would delegate calls to\\n     */\\n    function implementation() public view returns (address) {\\n        return getAppBase(appId());\\n    }\\n\\n    /**\\n     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\\n     */\\n    function proxyType() public pure returns (uint256 proxyTypeId) {\\n        return UPGRADEABLE;\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/apps/AppStorage.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract AppStorage {\\n    using UnstructuredStorage for bytes32;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_POSITION = keccak256(\\\"aragonOS.appStorage.kernel\\\");\\n    bytes32 internal constant APP_ID_POSITION = keccak256(\\\"aragonOS.appStorage.appId\\\");\\n    */\\n    bytes32 internal constant KERNEL_POSITION = 0x4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b;\\n    bytes32 internal constant APP_ID_POSITION = 0xd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b;\\n\\n    function kernel() public view returns (IKernel) {\\n        return IKernel(KERNEL_POSITION.getStorageAddress());\\n    }\\n\\n    function appId() public view returns (bytes32) {\\n        return APP_ID_POSITION.getStorageBytes32();\\n    }\\n\\n    function setKernel(IKernel _kernel) internal {\\n        KERNEL_POSITION.setStorageAddress(address(_kernel));\\n    }\\n\\n    function setAppId(bytes32 _appId) internal {\\n        APP_ID_POSITION.setStorageBytes32(_appId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/DelegateProxy.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"../common/IsContract.sol\\\";\\nimport \\\"../lib/misc/ERCProxy.sol\\\";\\n\\n\\ncontract DelegateProxy is ERCProxy, IsContract {\\n    uint256 internal constant FWD_GAS_LIMIT = 10000;\\n\\n    /**\\n    * @dev Performs a delegatecall and returns whatever the delegatecall returned (entire context execution will return!)\\n    * @param _dst Destination address to perform the delegatecall\\n    * @param _calldata Calldata for the delegatecall\\n    */\\n    function delegatedFwd(address _dst, bytes _calldata) internal {\\n        require(isContract(_dst));\\n        uint256 fwdGasLimit = FWD_GAS_LIMIT;\\n\\n        assembly {\\n            let result := delegatecall(sub(gas, fwdGasLimit), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0)\\n            let size := returndatasize\\n            let ptr := mload(0x40)\\n            returndatacopy(ptr, 0, size)\\n\\n            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\\n            // if the call returned error data, forward it\\n            switch result case 0 { revert(ptr, size) }\\n            default { return(ptr, size) }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/DepositableDelegateProxy.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"./DelegateProxy.sol\\\";\\nimport \\\"./DepositableStorage.sol\\\";\\n\\n\\ncontract DepositableDelegateProxy is DepositableStorage, DelegateProxy {\\n    event ProxyDeposit(address sender, uint256 value);\\n\\n    function () external payable {\\n        // send / transfer\\n        if (gasleft() < FWD_GAS_LIMIT) {\\n            require(msg.value > 0 && msg.data.length == 0);\\n            require(isDepositable());\\n            emit ProxyDeposit(msg.sender, msg.value);\\n        } else { // all calls except for send or transfer\\n            address target = implementation();\\n            delegatedFwd(target, msg.data);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/DepositableStorage.sol\": {\r\n      \"content\": \"pragma solidity 0.4.24;\\n\\nimport \\\"./UnstructuredStorage.sol\\\";\\n\\n\\ncontract DepositableStorage {\\n    using UnstructuredStorage for bytes32;\\n\\n    // keccak256(\\\"aragonOS.depositableStorage.depositable\\\")\\n    bytes32 internal constant DEPOSITABLE_POSITION = 0x665fd576fbbe6f247aff98f5c94a561e3f71ec2d3c988d56f12d342396c50cea;\\n\\n    function isDepositable() public view returns (bool) {\\n        return DEPOSITABLE_POSITION.getStorageBool();\\n    }\\n\\n    function setDepositable(bool _depositable) internal {\\n        DEPOSITABLE_POSITION.setStorageBool(_depositable);\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/IsContract.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract IsContract {\\n    /*\\n    * NOTE: this should NEVER be used for authentication\\n    * (see pitfalls: https://github.com/fergarrui/ethereum-security/tree/master/contracts/extcodesize).\\n    *\\n    * This is only intended to be used as a sanity check that an address is actually a contract,\\n    * RATHER THAN an address not being a contract.\\n    */\\n    function isContract(address _target) internal view returns (bool) {\\n        if (_target == address(0)) {\\n            return false;\\n        }\\n\\n        uint256 size;\\n        assembly { size := extcodesize(_target) }\\n        return size > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/IVaultRecoverable.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IVaultRecoverable {\\n    event RecoverToVault(address indexed vault, address indexed token, uint256 amount);\\n\\n    function transferToVault(address token) external;\\n\\n    function allowRecoverability(address token) external view returns (bool);\\n    function getRecoveryVault() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/common/UnstructuredStorage.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\nlibrary UnstructuredStorage {\\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function setStorageBool(bytes32 position, bool data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageAddress(bytes32 position, address data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageUint256(bytes32 position, uint256 data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/kernel/IKernel.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../common/IVaultRecoverable.sol\\\";\\n\\n\\ninterface IKernelEvents {\\n    event SetApp(bytes32 indexed namespace, bytes32 indexed appId, address app);\\n}\\n\\n\\n// This should be an interface, but interfaces can't inherit yet :(\\ncontract IKernel is IKernelEvents, IVaultRecoverable {\\n    function acl() public view returns (IACL);\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n\\n    function setApp(bytes32 namespace, bytes32 appId, address app) public;\\n    function getApp(bytes32 namespace, bytes32 appId) public view returns (address);\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/kernel/KernelConstants.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract KernelAppIds {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_CORE_APP_ID = apmNamehash(\\\"kernel\\\");\\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = apmNamehash(\\\"acl\\\");\\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = apmNamehash(\\\"vault\\\");\\n    */\\n    bytes32 internal constant KERNEL_CORE_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = 0x7e852e0fcfce6551c13800f1e7476f982525c2b5277ba14b24339c68416336d1;\\n}\\n\\n\\ncontract KernelNamespaceConstants {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = keccak256(\\\"core\\\");\\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = keccak256(\\\"base\\\");\\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = keccak256(\\\"app\\\");\\n    */\\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\\n}\\n\"\r\n    },\r\n    \"@aragon/os/contracts/lib/misc/ERCProxy.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract ERCProxy {\\n    uint256 internal constant FORWARDING = 1;\\n    uint256 internal constant UPGRADEABLE = 2;\\n\\n    function proxyType() public pure returns (uint256 proxyTypeId);\\n    function implementation() public view returns (address codeAddr);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"proxyType\",\"outputs\":[{\"name\":\"proxyTypeId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDepositable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_kernel\",\"type\":\"address\"},{\"name\":\"_appId\",\"type\":\"bytes32\"},{\"name\":\"_initializePayload\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ProxyDeposit\",\"type\":\"event\"}]", "ContractName": "AppProxyUpgradeable", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "10", "ConstructorArguments": "00000000000000000000000044e2f8ae917fb9af4c5dba6353f592a62566e07cb154dbea949448a73f07fffbea62e56e9a5f55066508ce14a80eacf569b9d4e800000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}