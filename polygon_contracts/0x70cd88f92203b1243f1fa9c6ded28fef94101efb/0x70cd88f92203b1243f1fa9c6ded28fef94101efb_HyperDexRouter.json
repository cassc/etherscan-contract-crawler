{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/HyperDexRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@plasma-fi/contracts/utils/GasStationRecipient.sol\\\";\\nimport \\\"@plasma-fi/contracts/interfaces/ITokensApprover.sol\\\";\\nimport \\\"./interfaces/IHyperDex.sol\\\";\\nimport \\\"./packages/LibBytesV06.sol\\\";\\nimport \\\"./packages/LibProxyRichErrors.sol\\\";\\nimport \\\"./packages/Ownable.sol\\\";\\n\\n/// @title Plasma Finance proxy contract for 0x proxy\\n/// @dev A generic proxy contract which extracts a fee before delegation\\ncontract HyperDexRouter is GasStationRecipient, Ownable {\\n    using LibBytesV06 for bytes;\\n    using SafeERC20 for IERC20;\\n\\n    // Native currency address (ETH - 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE, MATIC - 0x0000000000000000000000000000000000001010)\\n    address private nativeAddress;\\n\\n    address payable public beneficiary;\\n    address payable public allowanceTarget;\\n    IHyperDex public hyperDex;\\n    ITokensApprover public approver;\\n\\n    uint256 public feeBeneficiary = 5; // 0.05%\\n    uint256[4] public feeReferrals = [4, 3, 2, 1];  // 0.05%, 0.03%, 0.02%, 0.01%\\n\\n    event BeneficiaryChanged(address indexed beneficiary);\\n    event AllowanceTargetChanged(address indexed allowanceTarget);\\n    event HyperDexChanged(address indexed hyperDex);\\n    event TokensApproverChanged(address indexed approver);\\n    event FeePayment(address indexed recipient, address token, uint256 amount);\\n\\n    /// @dev Construct this contract and specify a fee beneficiary, 0x proxy contract address, and allowance target\\n    constructor(address _nativeAddress, IHyperDex _hyperDex, address payable _allowanceTarget, address payable _beneficiary, address _gasStation, ITokensApprover _approver) {\\n        nativeAddress = _nativeAddress;\\n        hyperDex = _hyperDex;\\n        allowanceTarget = _allowanceTarget;\\n        beneficiary = _beneficiary;\\n        approver = _approver;\\n\\n        _setGasStation(_gasStation);\\n    }\\n\\n    /// @dev Fallback for just receiving ether.\\n    receive() external payable {}\\n\\n    /// @dev Set a new MultiSwap proxy contract address\\n    /// @param _hyperDex New Exchange proxy address\\n    function setHyperDex(IHyperDex _hyperDex) public onlyOwner {\\n        require(address(_hyperDex) != address(0), \\\"Invalid HyperDex address\\\");\\n        hyperDex = _hyperDex;\\n        emit HyperDexChanged(address(hyperDex));\\n    }\\n\\n    /// @dev Set a new new allowance target address\\n    /// @param _allowanceTarget New allowance target address\\n    function setAllowanceTarget(address payable _allowanceTarget) public onlyOwner {\\n        require(_allowanceTarget != address(0), \\\"Invalid allowance target\\\");\\n        allowanceTarget = _allowanceTarget;\\n        emit AllowanceTargetChanged(allowanceTarget);\\n    }\\n\\n    /// @dev Set a new beneficiary address\\n    /// @param _beneficiary New beneficiary target address\\n    function setBeneficiary(address payable _beneficiary) public onlyOwner {\\n        require(_beneficiary != address(0), \\\"Invalid beneficiary\\\");\\n        beneficiary = _beneficiary;\\n        emit BeneficiaryChanged(beneficiary);\\n    }\\n\\n    /// @dev Set a new trusted gas station address\\n    /// @param _gasStation New gas station address\\n    function setGasStation(address _gasStation) external onlyOwner {\\n        _setGasStation(_gasStation);\\n    }\\n\\n    /// @dev Set a new tokens approver contract address\\n    /// @param _approver New approver address\\n    function setApprover(ITokensApprover _approver) external onlyOwner {\\n        require(address(_approver) != address(0), \\\"Invalid beneficiary\\\");\\n        approver = _approver;\\n        emit TokensApproverChanged(address(approver));\\n    }\\n\\n    /// @dev Set a referrals fees\\n    /// @param _feeReferrals New referrals fees values\\n    function setFeeReferrals(uint256[4] memory _feeReferrals) public onlyOwner {\\n        feeReferrals = _feeReferrals;\\n    }\\n\\n    /// @dev Set a beneficiary fees\\n    /// @param _feeBeneficiary New beneficiary fees value\\n    function setFeeBeneficiary(uint256 _feeBeneficiary) public onlyOwner {\\n        feeBeneficiary = _feeBeneficiary;\\n    }\\n\\n    /// @dev Forwards calls to the HyperDex contract and extracts a fee based on provided arguments\\n    /// @param msgData The byte data representing a swap using the original HyperDex contract. This is either recieved from the Multiswap API directly or we construct it in order to perform a single swap trade\\n    /// @param inputToken The ERC20 the user is selling. If this is ETH it should be the standard 0xeee ETH address\\n    /// @param inputAmount The amount of inputToken being sold, without fees\\n    /// @param outputToken The ERC20 the user is buying. If this is ETH it should be the standard 0xeee ETH address\\n    /// @param referrals Referral addresses for which interest will be accrued from each exchange.\\n    function multiRoute(\\n        bytes calldata msgData,\\n        address inputToken,\\n        uint256 inputAmount,\\n        address outputToken,\\n        address[4] memory referrals\\n    ) external payable returns (bytes memory) {\\n    return _multiRoute(msgData, inputToken, inputAmount, outputToken, referrals);\\n    }\\n\\n    function multiRouteWithPermit(\\n        bytes calldata msgData,\\n        address inputToken,\\n        uint256 inputAmount,\\n        address outputToken,\\n        address[4] memory referrals,\\n        bytes calldata approvalData\\n    ) external payable returns (bytes memory) {\\n        _permit(inputToken, approvalData);\\n        return _multiRoute(msgData, inputToken, inputAmount, outputToken, referrals);\\n    }\\n\\n    function _multiRoute(\\n        bytes calldata msgData,\\n        address inputToken,\\n        uint256 inputAmount,\\n        address outputToken,\\n        address[4] memory referrals\\n    ) internal returns (bytes memory) {\\n        // Calculate total fees and send to beneficiary.\\n        uint256 inputAmountPercent = inputAmount / 10000;\\n        uint256 fee = inputAmountPercent * feeBeneficiary;\\n        _payFees(inputToken, fee, beneficiary);\\n        for (uint256 i = 0; i < referrals.length; i++) {\\n            if (referrals[i] != address(0) && feeReferrals[i] != 0) {\\n                uint256 feeReferral = inputAmountPercent * feeReferrals[i];\\n                fee = fee + feeReferral;\\n                _payFees(inputToken, feeReferral, payable(referrals[i]));\\n            }\\n        }\\n\\n        // Checking the ETH balance and approve for token transfer\\n        uint256 value = 0;\\n        if (inputToken == nativeAddress) {\\n            require(msg.value == inputAmount + fee, \\\"Insufficient value with fee\\\");\\n            value = inputAmount;\\n        } else {\\n            _sendERC20(IERC20(inputToken), _msgSender(), address(this), inputAmount);\\n            uint256 allowedAmount = IERC20(inputToken).allowance(address(this), allowanceTarget);\\n            if (allowedAmount < inputAmount) {\\n                IERC20(inputToken).safeIncreaseAllowance(allowanceTarget, inputAmount - allowedAmount);\\n            }\\n        }\\n\\n        // Call HyperDex multi swap\\n        (bool success, bytes memory resultData) = address(hyperDex).call{value : value}(msgData);\\n\\n        if (!success) {\\n            _revertWithData(resultData);\\n        }\\n\\n        // We send the received tokens back to the sender\\n        if (outputToken == nativeAddress) {\\n            if (address(this).balance > 0) {\\n                _sendETH(payable(_msgSender()), address(this).balance);\\n            } else {\\n                _revertWithData(resultData);\\n            }\\n        } else {\\n            uint256 tokenBalance = IERC20(outputToken).balanceOf(address(this));\\n            if (tokenBalance > 0) {\\n                IERC20(outputToken).safeTransfer(_msgSender(), tokenBalance);\\n            } else {\\n                _revertWithData(resultData);\\n            }\\n        }\\n        _returnWithData(resultData);\\n    }\\n\\n    function _permit(address token, bytes calldata approvalData) internal {\\n        if (approvalData.length > 0 && approver.hasConfigured(token)) {\\n            (bool success,) = approver.callPermit(token, approvalData);\\n            require(success, \\\"Permit Method Call Error\\\");\\n        }\\n    }\\n\\n    /// @dev Pay fee to beneficiary\\n    /// @param token token address to pay fee in, can be ETH\\n    /// @param amount fee amount to pay\\n    function _payFees(address token, uint256 amount, address payable recipient) private {\\n        if (token == nativeAddress) {\\n            _sendETH(recipient, amount);\\n        } else {\\n            _sendERC20(IERC20(token), _msgSender(), recipient, amount);\\n        }\\n        emit FeePayment(recipient, token, amount);\\n    }\\n\\n    function _sendETH(address payable toAddress, uint256 amount) private {\\n        if (amount > 0) {\\n            (bool success,) = toAddress.call{value : amount}(\\\"\\\");\\n            require(success, \\\"Unable to send ETH\\\");\\n        }\\n    }\\n\\n    function _sendERC20(IERC20 token, address fromAddress, address toAddress, uint256 amount) private {\\n        if (amount > 0) {\\n            token.safeTransferFrom(fromAddress, toAddress, amount);\\n        }\\n    }\\n\\n    /// @dev Revert with arbitrary bytes.\\n    /// @param data Revert data.\\n    function _revertWithData(bytes memory data) private pure {\\n        assembly {revert(add(data, 32), mload(data))}\\n    }\\n\\n    /// @dev Return with arbitrary bytes.\\n    /// @param data Return data.\\n    function _returnWithData(bytes memory data) private pure {\\n        assembly {\\n            return (add(data, 32), mload(data))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@plasma-fi/contracts/utils/GasStationRecipient.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IGasStationRecipient.sol\\\";\\n\\nabstract contract GasStationRecipient is IGasStationRecipient {\\n    /*\\n     * Allowed Gas Station Contract for accept calls from\\n     */\\n    address private _gasStation;\\n\\n    function isOwnGasStation(address addressToCheck) external view returns(bool) {\\n        return _gasStation == addressToCheck;\\n    }\\n\\n    function gasStation() external view returns (address) {\\n        return _gasStation;\\n    }\\n\\n    function _setGasStation(address newGasStation) internal {\\n        require(newGasStation != address(0), \\\"Invalid new gas station address\\\");\\n        _gasStation = newGasStation;\\n        emit GasStationChanged(_gasStation);\\n    }\\n\\n    /**\\n    * return the sender of this call.\\n    * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\\n    * of the msg.data.\\n    * otherwise, return `msg.sender`\\n    * should be used in the contract anywhere instead of msg.sender\\n    */\\n    function _msgSender() internal view returns (address ret) {\\n        if (msg.data.length >= 20 && this.isOwnGasStation(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            ret = msg.sender;\\n        }\\n    }\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\\n     * should be used in the contract instead of msg.data, where this difference matters.\\n     */\\n    function _msgData() internal view returns (bytes calldata ret) {\\n        if (msg.data.length >= 20 && this.isOwnGasStation(msg.sender)) {\\n            return msg.data[0:msg.data.length-20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@plasma-fi/contracts/interfaces/ITokensApprover.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface ITokensApprover {\\n    /**\\n     * @notice Data for issuing permissions for the token\\n     */\\n    struct ApproveConfig {\\n        string name;\\n        string version;\\n        string domainType;\\n        string primaryType;\\n        string noncesMethod;\\n        string permitMethod;\\n        bytes4 permitMethodSelector;\\n    }\\n\\n    event TokensApproverConfigAdded(uint256 indexed id);\\n    event TokensApproverConfigUpdated(uint256 indexed id);\\n    event TokensApproverTokenAdded(address indexed token, uint256 id);\\n    event TokensApproverTokenRemoved(address indexed token);\\n\\n    function addConfig(ApproveConfig calldata config) external returns (uint256);\\n\\n    function updateConfig(uint256 id, ApproveConfig calldata config) external returns (uint256);\\n\\n    function setToken(uint256 id, address token) external;\\n\\n    function removeToken(address token) external;\\n\\n    function getConfig(address token) view external returns (ApproveConfig memory);\\n\\n    function getConfigById(uint256 id) view external returns (ApproveConfig memory);\\n\\n    function configsLength() view external returns (uint256);\\n\\n    function hasConfigured(address token) view external returns (bool);\\n\\n    function callPermit(address token, bytes calldata permitCallData) external returns (bool, bytes memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IHyperDex.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IHyperDex {\\n    function getFunctionImplementation(bytes4 _signature) external returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/packages/LibBytesV06.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL\\npragma solidity 0.8.10;\\n\\nimport \\\"./LibBytesRichErrorsV06.sol\\\";\\nimport \\\"./LibRichErrorsV06.sol\\\";\\n\\nlibrary LibBytesV06 {\\n\\n    using LibBytesV06 for bytes;\\n\\n    /// @dev Gets the memory address for a byte array.\\n    /// @param input Byte array to lookup.\\n    /// @return memoryAddress Memory address of byte array. This\\n    ///         points to the header of the byte array which contains\\n    ///         the length.\\n    function rawAddress(bytes memory input)\\n    internal\\n    pure\\n    returns (uint256 memoryAddress)\\n    {\\n        assembly {\\n            memoryAddress := input\\n        }\\n        return memoryAddress;\\n    }\\n\\n    /// @dev Gets the memory address for the contents of a byte array.\\n    /// @param input Byte array to lookup.\\n    /// @return memoryAddress Memory address of the contents of the byte array.\\n    function contentAddress(bytes memory input)\\n    internal\\n    pure\\n    returns (uint256 memoryAddress)\\n    {\\n        assembly {\\n            memoryAddress := add(input, 32)\\n        }\\n        return memoryAddress;\\n    }\\n\\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\\n    /// @param dest memory address to copy bytes to.\\n    /// @param source memory address to copy bytes from.\\n    /// @param length number of bytes to copy.\\n    function memCopy(\\n        uint256 dest,\\n        uint256 source,\\n        uint256 length\\n    )\\n    internal\\n    pure\\n    {\\n        if (length < 32) {\\n            // Handle a partial word by reading destination and masking\\n            // off the bits we are interested in.\\n            // This correctly handles overlap, zero lengths and source == dest\\n            assembly {\\n                let mask := sub(exp(256, sub(32, length)), 1)\\n                let s := and(mload(source), not(mask))\\n                let d := and(mload(dest), mask)\\n                mstore(dest, or(s, d))\\n            }\\n        } else {\\n            // Skip the O(length) loop when source == dest.\\n            if (source == dest) {\\n                return;\\n            }\\n\\n            // For large copies we copy whole words at a time. The final\\n            // word is aligned to the end of the range (instead of after the\\n            // previous) to handle partial words. So a copy will look like this:\\n            //\\n            //  ####\\n            //      ####\\n            //          ####\\n            //            ####\\n            //\\n            // We handle overlap in the source and destination range by\\n            // changing the copying direction. This prevents us from\\n            // overwriting parts of source that we still need to copy.\\n            //\\n            // This correctly handles source == dest\\n            //\\n            if (source > dest) {\\n                assembly {\\n                // We subtract 32 from `sEnd` and `dEnd` because it\\n                // is easier to compare with in the loop, and these\\n                // are also the addresses we need for copying the\\n                // last bytes.\\n                    length := sub(length, 32)\\n                    let sEnd := add(source, length)\\n                    let dEnd := add(dest, length)\\n\\n                // Remember the last 32 bytes of source\\n                // This needs to be done here and not after the loop\\n                // because we may have overwritten the last bytes in\\n                // source already due to overlap.\\n                    let last := mload(sEnd)\\n\\n                // Copy whole words front to back\\n                // Note: the first check is always true,\\n                // this could have been a do-while loop.\\n                // solhint-disable-next-line no-empty-blocks\\n                    for {} lt(source, sEnd) {} {\\n                        mstore(dest, mload(source))\\n                        source := add(source, 32)\\n                        dest := add(dest, 32)\\n                    }\\n\\n                // Write the last 32 bytes\\n                    mstore(dEnd, last)\\n                }\\n            } else {\\n                assembly {\\n                // We subtract 32 from `sEnd` and `dEnd` because those\\n                // are the starting points when copying a word at the end.\\n                    length := sub(length, 32)\\n                    let sEnd := add(source, length)\\n                    let dEnd := add(dest, length)\\n\\n                // Remember the first 32 bytes of source\\n                // This needs to be done here and not after the loop\\n                // because we may have overwritten the first bytes in\\n                // source already due to overlap.\\n                    let first := mload(source)\\n\\n                // Copy whole words back to front\\n                // We use a signed comparisson here to allow dEnd to become\\n                // negative (happens when source and dest < 32). Valid\\n                // addresses in local memory will never be larger than\\n                // 2**255, so they can be safely re-interpreted as signed.\\n                // Note: the first check is always true,\\n                // this could have been a do-while loop.\\n                // solhint-disable-next-line no-empty-blocks\\n                    for {} slt(dest, dEnd) {} {\\n                        mstore(dEnd, mload(sEnd))\\n                        sEnd := sub(sEnd, 32)\\n                        dEnd := sub(dEnd, 32)\\n                    }\\n\\n                // Write the first 32 bytes\\n                    mstore(dest, first)\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a slices from a byte array.\\n    /// @param b The byte array to take a slice from.\\n    /// @param from The starting index for the slice (inclusive).\\n    /// @param to The final index for the slice (exclusive).\\n    /// @return result The slice containing bytes at indices [from, to)\\n    function slice(\\n        bytes memory b,\\n        uint256 from,\\n        uint256 to\\n    )\\n    internal\\n    pure\\n    returns (bytes memory result)\\n    {\\n        // Ensure that the from and to positions are valid positions for a slice within\\n        // the byte array that is being used.\\n        if (from > to) {\\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\\n                    from,\\n                    to\\n                ));\\n        }\\n        if (to > b.length) {\\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\\n                    to,\\n                    b.length\\n                ));\\n        }\\n\\n        // Create a new bytes structure and copy contents\\n        result = new bytes(to - from);\\n        memCopy(\\n            result.contentAddress(),\\n            b.contentAddress() + from,\\n            result.length\\n        );\\n        return result;\\n    }\\n\\n    /// @dev Returns a slice from a byte array without preserving the input.\\n    ///      When `from == 0`, the original array will match the slice.\\n    ///      In other cases its state will be corrupted.\\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\\n    /// @param from The starting index for the slice (inclusive).\\n    /// @param to The final index for the slice (exclusive).\\n    /// @return result The slice containing bytes at indices [from, to)\\n    function sliceDestructive(\\n        bytes memory b,\\n        uint256 from,\\n        uint256 to\\n    )\\n    internal\\n    pure\\n    returns (bytes memory result)\\n    {\\n        // Ensure that the from and to positions are valid positions for a slice within\\n        // the byte array that is being used.\\n        if (from > to) {\\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\\n                    from,\\n                    to\\n                ));\\n        }\\n        if (to > b.length) {\\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\\n                    to,\\n                    b.length\\n                ));\\n        }\\n\\n        // Create a new bytes structure around [from, to) in-place.\\n        assembly {\\n            result := add(b, from)\\n            mstore(result, sub(to, from))\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Pops the last byte off of a byte array by modifying its length.\\n    /// @param b Byte array that will be modified.\\n    /// @return result The byte that was popped off.\\n    function popLastByte(bytes memory b)\\n    internal\\n    pure\\n    returns (bytes1 result)\\n    {\\n        if (b.length == 0) {\\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\\n                    b.length,\\n                    0\\n                ));\\n        }\\n\\n        // Store last byte.\\n        result = b[b.length - 1];\\n\\n        assembly {\\n        // Decrement length of byte array.\\n            let newLen := sub(mload(b), 1)\\n            mstore(b, newLen)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Tests equality of two byte arrays.\\n    /// @param lhs First byte array to compare.\\n    /// @param rhs Second byte array to compare.\\n    /// @return equal True if arrays are the same. False otherwise.\\n    function equals(\\n        bytes memory lhs,\\n        bytes memory rhs\\n    )\\n    internal\\n    pure\\n    returns (bool equal)\\n    {\\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\\n        // We early exit on unequal lengths, but keccak would also correctly\\n        // handle this.\\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\\n    }\\n\\n    /// @dev Reads an address from a position in a byte array.\\n    /// @param b Byte array containing an address.\\n    /// @param index Index in byte array of address.\\n    /// @return result address from byte array.\\n    function readAddress(\\n        bytes memory b,\\n        uint256 index\\n    )\\n    internal\\n    pure\\n    returns (address result)\\n    {\\n        if (b.length < index + 20) {\\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\\n                    b.length,\\n                    index + 20 // 20 is length of address\\n                ));\\n        }\\n\\n        // Add offset to index:\\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\\n        index += 20;\\n\\n        // Read address from array memory\\n        assembly {\\n        // 1. Add index to address of bytes array\\n        // 2. Load 32-byte word from memory\\n        // 3. Apply 20-byte mask to obtain address\\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Writes an address into a specific position in a byte array.\\n    /// @param b Byte array to insert address into.\\n    /// @param index Index in byte array of address.\\n    /// @param input Address to put into byte array.\\n    function writeAddress(\\n        bytes memory b,\\n        uint256 index,\\n        address input\\n    )\\n    internal\\n    pure\\n    {\\n        if (b.length < index + 20) {\\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\\n                    b.length,\\n                    index + 20 // 20 is length of address\\n                ));\\n        }\\n\\n        // Add offset to index:\\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\\n        index += 20;\\n\\n        // Store address into array memory\\n        assembly {\\n        // The address occupies 20 bytes and mstore stores 32 bytes.\\n        // First fetch the 32-byte word where we'll be storing the address, then\\n        // apply a mask so we have only the bytes in the word that the address will not occupy.\\n        // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\\n\\n        // 1. Add index to address of bytes array\\n        // 2. Load 32-byte word from memory\\n        // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\\n            let neighbors := and(\\n            mload(add(b, index)),\\n            0xffffffffffffffffffffffff0000000000000000000000000000000000000000\\n            )\\n\\n        // Make sure input address is clean.\\n        // (Solidity does not guarantee this)\\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\\n\\n        // Store the neighbors and address into memory\\n            mstore(add(b, index), xor(input, neighbors))\\n        }\\n    }\\n\\n    /// @dev Reads a bytes32 value from a position in a byte array.\\n    /// @param b Byte array containing a bytes32 value.\\n    /// @param index Index in byte array of bytes32 value.\\n    /// @return result bytes32 value from byte array.\\n    function readBytes32(\\n        bytes memory b,\\n        uint256 index\\n    )\\n    internal\\n    pure\\n    returns (bytes32 result)\\n    {\\n        if (b.length < index + 32) {\\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\\n                    b.length,\\n                    index + 32\\n                ));\\n        }\\n\\n        // Arrays are prefixed by a 256 bit length parameter\\n        index += 32;\\n\\n        // Read the bytes32 from array memory\\n        assembly {\\n            result := mload(add(b, index))\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Writes a bytes32 into a specific position in a byte array.\\n    /// @param b Byte array to insert <input> into.\\n    /// @param index Index in byte array of <input>.\\n    /// @param input bytes32 to put into byte array.\\n    function writeBytes32(\\n        bytes memory b,\\n        uint256 index,\\n        bytes32 input\\n    )\\n    internal\\n    pure\\n    {\\n        if (b.length < index + 32) {\\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\\n                    b.length,\\n                    index + 32\\n                ));\\n        }\\n\\n        // Arrays are prefixed by a 256 bit length parameter\\n        index += 32;\\n\\n        // Read the bytes32 from array memory\\n        assembly {\\n            mstore(add(b, index), input)\\n        }\\n    }\\n\\n    /// @dev Reads a uint256 value from a position in a byte array.\\n    /// @param b Byte array containing a uint256 value.\\n    /// @param index Index in byte array of uint256 value.\\n    /// @return result uint256 value from byte array.\\n    function readUint256(\\n        bytes memory b,\\n        uint256 index\\n    )\\n    internal\\n    pure\\n    returns (uint256 result)\\n    {\\n        result = uint256(readBytes32(b, index));\\n        return result;\\n    }\\n\\n    /// @dev Writes a uint256 into a specific position in a byte array.\\n    /// @param b Byte array to insert <input> into.\\n    /// @param index Index in byte array of <input>.\\n    /// @param input uint256 to put into byte array.\\n    function writeUint256(\\n        bytes memory b,\\n        uint256 index,\\n        uint256 input\\n    )\\n    internal\\n    pure\\n    {\\n        writeBytes32(b, index, bytes32(input));\\n    }\\n\\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\\n    /// @param b Byte array containing a bytes4 value.\\n    /// @param index Index in byte array of bytes4 value.\\n    /// @return result bytes4 value from byte array.\\n    function readBytes4(\\n        bytes memory b,\\n        uint256 index\\n    )\\n    internal\\n    pure\\n    returns (bytes4 result)\\n    {\\n        if (b.length < index + 4) {\\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\\n                    LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\\n                    b.length,\\n                    index + 4\\n                ));\\n        }\\n\\n        // Arrays are prefixed by a 32 byte length field\\n        index += 32;\\n\\n        // Read the bytes4 from array memory\\n        assembly {\\n            result := mload(add(b, index))\\n        // Solidity does not require us to clean the trailing bytes.\\n        // We do it anyway\\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Writes a new length to a byte array.\\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\\n    /// @param b Bytes array to write new length to.\\n    /// @param length New length of byte array.\\n    function writeLength(bytes memory b, uint256 length)\\n    internal\\n    pure\\n    {\\n        assembly {\\n            mstore(b, length)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/packages/LibProxyRichErrors.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL\\npragma solidity 0.8.10;\\n\\nlibrary LibProxyRichErrors {\\n\\n    // solhint-disable func-name-mixedcase\\n\\n    function NotImplementedError(bytes4 selector)\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"NotImplementedError(bytes4)\\\")),\\n            selector\\n        );\\n    }\\n\\n    function InvalidBootstrapCallerError(address actual, address expected)\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"InvalidBootstrapCallerError(address,address)\\\")),\\n            actual,\\n            expected\\n        );\\n    }\\n\\n    function InvalidDieCallerError(address actual, address expected)\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"InvalidDieCallerError(address,address)\\\")),\\n            actual,\\n            expected\\n        );\\n    }\\n\\n    function BootstrapCallFailedError(address target, bytes memory resultData)\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"BootstrapCallFailedError(address,bytes)\\\")),\\n            target,\\n            resultData\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/packages/Ownable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL\\npragma solidity 0.8.10;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSenderContext();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSenderContext(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@plasma-fi/contracts/interfaces/IGasStationRecipient.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IGasStationRecipient {\\n\\n    event GasStationChanged(address indexed gasStation);\\n\\n    function isOwnGasStation(address addressToCheck) external view returns(bool);\\n}\\n\"\r\n    },\r\n    \"contracts/packages/LibBytesRichErrorsV06.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL\\npragma solidity 0.8.10;\\n\\nlibrary LibBytesRichErrorsV06 {\\n\\n    enum InvalidByteOperationErrorCodes {\\n        FromLessThanOrEqualsToRequired,\\n        ToLessThanOrEqualsLengthRequired,\\n        LengthGreaterThanZeroRequired,\\n        LengthGreaterThanOrEqualsFourRequired,\\n        LengthGreaterThanOrEqualsTwentyRequired,\\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\\n    }\\n\\n    // bytes4(keccak256(\\\"InvalidByteOperationError(uint8,uint256,uint256)\\\"))\\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\\n    0x28006595;\\n\\n    // solhint-disable func-name-mixedcase\\n    function InvalidByteOperationError(\\n        InvalidByteOperationErrorCodes errorCode,\\n        uint256 offset,\\n        uint256 required\\n    )\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\\n            errorCode,\\n            offset,\\n            required\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/packages/LibRichErrorsV06.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL\\npragma solidity 0.8.10;\\n\\nlibrary LibRichErrorsV06 {\\n\\n    // bytes4(keccak256(\\\"Error(string)\\\"))\\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\\n\\n    // solhint-disable func-name-mixedcase\\n    /// @dev ABI encode a standard, string revert error payload.\\n    ///      This is the same payload that would be included by a `revert(string)`\\n    ///      solidity statement. It has the function signature `Error(string)`.\\n    /// @param message The error string.\\n    /// @return The ABI encoded error.\\n    function StandardError(string memory message)\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            STANDARD_ERROR_SELECTOR,\\n            bytes(message)\\n        );\\n    }\\n    // solhint-enable func-name-mixedcase\\n\\n    /// @dev Reverts an encoded rich revert reason `errorData`.\\n    /// @param errorData ABI encoded error data.\\n    function rrevert(bytes memory errorData)\\n    internal\\n    pure\\n    {\\n        assembly {\\n            revert(add(errorData, 0x20), mload(errorData))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/packages/Context.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL\\npragma solidity 0.8.10;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSenderContext() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgDataContext() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nativeAddress\",\"type\":\"address\"},{\"internalType\":\"contract IHyperDex\",\"name\":\"_hyperDex\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gasStation\",\"type\":\"address\"},{\"internalType\":\"contract ITokensApprover\",\"name\":\"_approver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"allowanceTarget\",\"type\":\"address\"}],\"name\":\"AllowanceTargetChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"BeneficiaryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeePayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gasStation\",\"type\":\"address\"}],\"name\":\"GasStationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hyperDex\",\"type\":\"address\"}],\"name\":\"HyperDexChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"TokensApproverChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allowanceTarget\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approver\",\"outputs\":[{\"internalType\":\"contract ITokensApprover\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeBeneficiary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeReferrals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasStation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hyperDex\",\"outputs\":[{\"internalType\":\"contract IHyperDex\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToCheck\",\"type\":\"address\"}],\"name\":\"isOwnGasStation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"msgData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"address[4]\",\"name\":\"referrals\",\"type\":\"address[4]\"}],\"name\":\"multiRoute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"msgData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"address[4]\",\"name\":\"referrals\",\"type\":\"address[4]\"},{\"internalType\":\"bytes\",\"name\":\"approvalData\",\"type\":\"bytes\"}],\"name\":\"multiRouteWithPermit\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_allowanceTarget\",\"type\":\"address\"}],\"name\":\"setAllowanceTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITokensApprover\",\"name\":\"_approver\",\"type\":\"address\"}],\"name\":\"setApprover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeBeneficiary\",\"type\":\"uint256\"}],\"name\":\"setFeeBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"_feeReferrals\",\"type\":\"uint256[4]\"}],\"name\":\"setFeeReferrals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gasStation\",\"type\":\"address\"}],\"name\":\"setGasStation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHyperDex\",\"name\":\"_hyperDex\",\"type\":\"address\"}],\"name\":\"setHyperDex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HyperDexRouter", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000001010000000000000000000000000def1c0ded9bec7f1a1670819833240f027b25eff000000000000000000000000def1c0ded9bec7f1a1670819833240f027b25eff00000000000000000000000062959d2c9d519c8ba3b93d17166a6a594d5f9467000000000000000000000000ac421eeb3d7360fc0dbe72f785daa768a606f404000000000000000000000000da4762a0149736a34be2e9672ad61786fcb7f5bb", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}