{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport \\\"./IIdentity.sol\\\";\\n\\ninterface IClaimIssuer is IIdentity {\\n\\n    /**\\n     * @dev Emitted when a claim is revoked.\\n     *\\n     * Specification: MUST be triggered when revoking a claim.\\n     */\\n    event ClaimRevoked(bytes indexed signature);\\n\\n    /**\\n     * @dev Revoke a claim previously issued, the claim is no longer considered as valid after revocation.\\n     * @notice will fetch the claim from the identity contract (unsafe).\\n     * @param _claimId the id of the claim\\n     * @param _identity the address of the identity contract\\n     * @return isRevoked true when the claim is revoked\\n     */\\n    function revokeClaim(bytes32 _claimId, address _identity) external returns(bool);\\n\\n    /**\\n     * @dev Revoke a claim previously issued, the claim is no longer considered as valid after revocation.\\n     * @param signature the signature of the claim\\n     */\\n    function revokeClaimBySignature(bytes calldata signature) external;\\n\\n    /**\\n     * @dev Returns revocation status of a claim.\\n     * @param _sig the signature of the claim\\n     * @return isRevoked true if the claim is revoked and false otherwise\\n     */\\n    function isClaimRevoked(bytes calldata _sig) external view returns (bool);\\n\\n    /**\\n     * @dev Checks if a claim is valid.\\n     * @param _identity the identity contract related to the claim\\n     * @param claimTopic the claim topic of the claim\\n     * @param sig the signature of the claim\\n     * @param data the data field of the claim\\n     * @return claimValid true if the claim is valid, false otherwise\\n     */\\n    function isClaimValid(\\n        IIdentity _identity,\\n        uint256 claimTopic,\\n        bytes calldata sig,\\n        bytes calldata data)\\n    external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@onchain-id/solidity/contracts/interface/IERC734.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev interface of the ERC734 (Key Holder) standard as defined in the EIP.\\n */\\ninterface IERC734 {\\n\\n    /**\\n     * @dev Emitted when an execution request was approved.\\n     *\\n     * Specification: MUST be triggered when approve was successfully called.\\n     */\\n    event Approved(uint256 indexed executionId, bool approved);\\n\\n    /**\\n     * @dev Emitted when an execute operation was approved and successfully performed.\\n     *\\n     * Specification: MUST be triggered when approve was called and the execution was successfully approved.\\n     */\\n    event Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n\\n    /**\\n     * @dev Emitted when an execution request was performed via `execute`.\\n     *\\n     * Specification: MUST be triggered when execute was successfully called.\\n     */\\n    event ExecutionRequested(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n\\n    /**\\n     * @dev Emitted when an execute operation was called and failed\\n     *\\n     * Specification: MUST be triggered when execute call failed\\n     */\\n    event ExecutionFailed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n\\n    /**\\n     * @dev Emitted when a key was added to the Identity.\\n     *\\n     * Specification: MUST be triggered when addKey was successfully called.\\n     */\\n    event KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n\\n    /**\\n     * @dev Emitted when a key was removed from the Identity.\\n     *\\n     * Specification: MUST be triggered when removeKey was successfully called.\\n     */\\n    event KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n\\n    /**\\n     * @dev Adds a _key to the identity. The _purpose specifies the purpose of the key.\\n     *\\n     * Triggers Event: `KeyAdded`\\n     *\\n     * Specification: MUST only be done by keys of purpose 1, or the identity\\n     * itself. If it's the identity itself, the approval process will determine its approval.\\n     */\\n    function addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) external returns (bool success);\\n\\n    /**\\n    * @dev Approves an execution.\\n    *\\n    * Triggers Event: `Approved`\\n    * Triggers on execution successful Event: `Executed`\\n    * Triggers on execution failure Event: `ExecutionFailed`\\n    */\\n    function approve(uint256 _id, bool _approve) external returns (bool success);\\n\\n    /**\\n     * @dev Removes _purpose for _key from the identity.\\n     *\\n     * Triggers Event: `KeyRemoved`\\n     *\\n     * Specification: MUST only be done by keys of purpose 1, or the identity itself.\\n     * If it's the identity itself, the approval process will determine its approval.\\n     */\\n    function removeKey(bytes32 _key, uint256 _purpose) external returns (bool success);\\n\\n    /**\\n     * @dev Passes an execution instruction to an ERC734 identity.\\n     * How the execution is handled is up to the identity implementation:\\n     * An execution COULD be requested and require `approve` to be called with one or more keys of purpose 1 or 2 to\\n     * approve this execution.\\n     * Execute COULD be used as the only accessor for `addKey` and `removeKey`.\\n     *\\n     * Triggers Event: ExecutionRequested\\n     * Triggers on direct execution Event: Executed\\n     */\\n    function execute(address _to, uint256 _value, bytes calldata _data) external payable returns (uint256 executionId);\\n\\n    /**\\n     * @dev Returns the full key data, if present in the identity.\\n     */\\n    function getKey(bytes32 _key) external view returns (uint256[] memory purposes, uint256 keyType, bytes32 key);\\n\\n    /**\\n     * @dev Returns the list of purposes associated with a key.\\n     */\\n    function getKeyPurposes(bytes32 _key) external view returns(uint256[] memory _purposes);\\n\\n    /**\\n     * @dev Returns an array of public key bytes32 held by this identity.\\n     */\\n    function getKeysByPurpose(uint256 _purpose) external view returns (bytes32[] memory keys);\\n\\n    /**\\n     * @dev Returns TRUE if a key is present and has the given purpose. If the key is not present it returns FALSE.\\n     */\\n    function keyHasPurpose(bytes32 _key, uint256 _purpose) external view returns (bool exists);\\n}\\n\"\r\n    },\r\n    \"@onchain-id/solidity/contracts/interface/IERC735.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev interface of the ERC735 (Claim Holder) standard as defined in the EIP.\\n */\\ninterface IERC735 {\\n\\n    /**\\n     * @dev Emitted when a claim was added.\\n     *\\n     * Specification: MUST be triggered when a claim was successfully added.\\n     */\\n    event ClaimAdded(\\n        bytes32 indexed claimId,\\n        uint256 indexed topic,\\n        uint256 scheme,\\n        address indexed issuer,\\n        bytes signature,\\n        bytes data,\\n        string uri);\\n\\n    /**\\n     * @dev Emitted when a claim was removed.\\n     *\\n     * Specification: MUST be triggered when removeClaim was successfully called.\\n     */\\n    event ClaimRemoved(\\n        bytes32 indexed claimId,\\n        uint256 indexed topic,\\n        uint256 scheme,\\n        address indexed issuer,\\n        bytes signature,\\n        bytes data,\\n        string uri);\\n\\n    /**\\n     * @dev Emitted when a claim was changed.\\n     *\\n     * Specification: MUST be triggered when addClaim was successfully called on an existing claimId.\\n     */\\n    event ClaimChanged(\\n        bytes32 indexed claimId,\\n        uint256 indexed topic,\\n        uint256 scheme,\\n        address indexed issuer,\\n        bytes signature,\\n        bytes data,\\n        string uri);\\n\\n    /**\\n     * @dev Add or update a claim.\\n     *\\n     * Triggers Event: `ClaimAdded`, `ClaimChanged`\\n     *\\n     * Specification: Add or update a claim from an issuer.\\n     *\\n     * _signature is a signed message of the following structure:\\n     * `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`.\\n     * Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`.\\n     */\\n    function addClaim(\\n        uint256 _topic,\\n        uint256 _scheme,\\n        address issuer,\\n        bytes calldata _signature,\\n        bytes calldata _data,\\n        string calldata _uri)\\n    external returns (bytes32 claimRequestId);\\n\\n    /**\\n     * @dev Removes a claim.\\n     *\\n     * Triggers Event: `ClaimRemoved`\\n     *\\n     * Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\\n     */\\n    function removeClaim(bytes32 _claimId) external returns (bool success);\\n\\n    /**\\n     * @dev Get a claim by its ID.\\n     *\\n     * Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.\\n     */\\n    function getClaim(bytes32 _claimId)\\n    external view returns(\\n        uint256 topic,\\n        uint256 scheme,\\n        address issuer,\\n        bytes memory signature,\\n        bytes memory data,\\n        string memory uri);\\n\\n    /**\\n     * @dev Returns an array of claim IDs by topic.\\n     */\\n    function getClaimIdsByTopic(uint256 _topic) external view returns(bytes32[] memory claimIds);\\n}\\n\"\r\n    },\r\n    \"@onchain-id/solidity/contracts/interface/IIdentity.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport \\\"./IERC734.sol\\\";\\nimport \\\"./IERC735.sol\\\";\\n\\n// solhint-disable-next-line no-empty-blocks\\ninterface IIdentity is IERC734, IERC735 {\\n    /**\\n     * @dev Checks if a claim is valid.\\n     * @param _identity the identity contract related to the claim\\n     * @param claimTopic the claim topic of the claim\\n     * @param sig the signature of the claim\\n     * @param data the data field of the claim\\n     * @return claimValid true if the claim is valid, false otherwise\\n     */\\n    function isClaimValid(\\n        IIdentity _identity,\\n        uint256 claimTopic,\\n        bytes calldata sig,\\n        bytes calldata data)\\n    external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/compliance/legacy/ICompliance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n//\\n//                                             :+#####%%%%%%%%%%%%%%+\\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\\n//                                          +@@@@@. =@@@=  .+@@@@@*:\\n//                                          #@@@@#:%@@#. :*@@@@#-\\n//                                          @@@@@%@@@= :#@@@@+.\\n//                                         :@@@@@@@#.:#@@@%-\\n//                                         +@@@@@@-.*@@@*:\\n//                                         #@@@@#.=@@@+.\\n//                                         @@@@+-%@%=\\n//                                        :@@@#%@%=\\n//                                        +@@@@%-\\n//                                        :#%%=\\n//\\n/**\\n *     NOTICE\\n *\\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\\n *     If you choose to receive it under the GPL v.3 license, the following applies:\\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\\n *\\n *     Copyright (C) 2023, Tokeny s\u00e0rl.\\n *\\n *     This program is free software: you can redistribute it and/or modify\\n *     it under the terms of the GNU General Public License as published by\\n *     the Free Software Foundation, either version 3 of the License, or\\n *     (at your option) any later version.\\n *\\n *     This program is distributed in the hope that it will be useful,\\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *     GNU General Public License for more details.\\n *\\n *     You should have received a copy of the GNU General Public License\\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity 0.8.17;\\n\\ninterface ICompliance {\\n    /**\\n     *  this event is emitted when the Agent has been added on the allowedList of this Compliance.\\n     *  the event is emitted by the Compliance constructor and by the addTokenAgent function\\n     *  `_agentAddress` is the address of the Agent to add\\n     */\\n    event TokenAgentAdded(address _agentAddress);\\n\\n    /**\\n     *  this event is emitted when the Agent has been removed from the agent list of this Compliance.\\n     *  the event is emitted by the Compliance constructor and by the removeTokenAgent function\\n     *  `_agentAddress` is the address of the Agent to remove\\n     */\\n    event TokenAgentRemoved(address _agentAddress);\\n\\n    /**\\n     *  this event is emitted when a token has been bound to the compliance contract\\n     *  the event is emitted by the bindToken function\\n     *  `_token` is the address of the token to bind\\n     */\\n    event TokenBound(address _token);\\n\\n    /**\\n     *  this event is emitted when a token has been unbound from the compliance contract\\n     *  the event is emitted by the unbindToken function\\n     *  `_token` is the address of the token to unbind\\n     */\\n    event TokenUnbound(address _token);\\n\\n    /**\\n     *  @dev adds an agent to the list of token agents\\n     *  @param _agentAddress address of the agent to be added\\n     *  Emits a TokenAgentAdded event\\n     */\\n    function addTokenAgent(address _agentAddress) external;\\n\\n    /**\\n     *  @dev remove Agent from the list of token agents\\n     *  @param _agentAddress address of the agent to be removed (must be added first)\\n     *  Emits a TokenAgentRemoved event\\n     */\\n    function removeTokenAgent(address _agentAddress) external;\\n\\n    /**\\n     *  @dev binds a token to the compliance contract\\n     *  @param _token address of the token to bind\\n     *  Emits a TokenBound event\\n     */\\n    function bindToken(address _token) external;\\n\\n    /**\\n     *  @dev unbinds a token from the compliance contract\\n     *  @param _token address of the token to unbind\\n     *  Emits a TokenUnbound event\\n     */\\n    function unbindToken(address _token) external;\\n\\n    /**\\n     *  @dev function called whenever tokens are transferred\\n     *  from one wallet to another\\n     *  this function can update state variables in the compliance contract\\n     *  these state variables being used by `canTransfer` to decide if a transfer\\n     *  is compliant or not depending on the values stored in these state variables and on\\n     *  the parameters of the compliance smart contract\\n     *  @param _from The address of the sender\\n     *  @param _to The address of the receiver\\n     *  @param _amount The amount of tokens involved in the transfer\\n     */\\n    function transferred(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     *  @dev function called whenever tokens are created\\n     *  on a wallet\\n     *  this function can update state variables in the compliance contract\\n     *  these state variables being used by `canTransfer` to decide if a transfer\\n     *  is compliant or not depending on the values stored in these state variables and on\\n     *  the parameters of the compliance smart contract\\n     *  @param _to The address of the receiver\\n     *  @param _amount The amount of tokens involved in the transfer\\n     */\\n    function created(address _to, uint256 _amount) external;\\n\\n    /**\\n     *  @dev function called whenever tokens are destroyed\\n     *  this function can update state variables in the compliance contract\\n     *  these state variables being used by `canTransfer` to decide if a transfer\\n     *  is compliant or not depending on the values stored in these state variables and on\\n     *  the parameters of the compliance smart contract\\n     *  @param _from The address of the receiver\\n     *  @param _amount The amount of tokens involved in the transfer\\n     */\\n    function destroyed(address _from, uint256 _amount) external;\\n\\n    /**\\n     *  @dev Returns true if the Address is in the list of token agents\\n     *  @param _agentAddress address of this agent\\n     */\\n    function isTokenAgent(address _agentAddress) external view returns (bool);\\n\\n    /**\\n     *  @dev Returns true if the address given corresponds to a token that is bound with the Compliance contract\\n     *  @param _token address of the token\\n     */\\n    function isTokenBound(address _token) external view returns (bool);\\n\\n    /**\\n     *  @dev checks that the transfer is compliant.\\n     *  default compliance always returns true\\n     *  READ ONLY FUNCTION, this function cannot be used to increment\\n     *  counters, emit events, ...\\n     *  @param _from The address of the sender\\n     *  @param _to The address of the receiver\\n     *  @param _amount The amount of tokens involved in the transfer\\n     */\\n    function canTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/compliance/modular/IModularCompliance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n//\\n//                                             :+#####%%%%%%%%%%%%%%+\\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\\n//                                          +@@@@@. =@@@=  .+@@@@@*:\\n//                                          #@@@@#:%@@#. :*@@@@#-\\n//                                          @@@@@%@@@= :#@@@@+.\\n//                                         :@@@@@@@#.:#@@@%-\\n//                                         +@@@@@@-.*@@@*:\\n//                                         #@@@@#.=@@@+.\\n//                                         @@@@+-%@%=\\n//                                        :@@@#%@%=\\n//                                        +@@@@%-\\n//                                        :#%%=\\n//\\n/**\\n *     NOTICE\\n *\\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\\n *     If you choose to receive it under the GPL v.3 license, the following applies:\\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\\n *\\n *     Copyright (C) 2023, Tokeny s\u00e0rl.\\n *\\n *     This program is free software: you can redistribute it and/or modify\\n *     it under the terms of the GNU General Public License as published by\\n *     the Free Software Foundation, either version 3 of the License, or\\n *     (at your option) any later version.\\n *\\n *     This program is distributed in the hope that it will be useful,\\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *     GNU General Public License for more details.\\n *\\n *     You should have received a copy of the GNU General Public License\\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity 0.8.17;\\n\\ninterface IModularCompliance {\\n\\n    /// events\\n\\n    /**\\n     *  @dev Event emitted for each executed interaction with a module contract.\\n     *  For gas efficiency, only the interaction calldata selector (first 4\\n     *  bytes) is included in the event. For interactions without calldata or\\n     *  whose calldata is shorter than 4 bytes, the selector will be `0`.\\n     */\\n    event ModuleInteraction(address indexed target, bytes4 selector);\\n\\n    /**\\n     *  this event is emitted when a token has been bound to the compliance contract\\n     *  the event is emitted by the bindToken function\\n     *  `_token` is the address of the token to bind\\n     */\\n    event TokenBound(address _token);\\n\\n    /**\\n     *  this event is emitted when a token has been unbound from the compliance contract\\n     *  the event is emitted by the unbindToken function\\n     *  `_token` is the address of the token to unbind\\n     */\\n    event TokenUnbound(address _token);\\n\\n    /**\\n     *  this event is emitted when a module has been added to the list of modules bound to the compliance contract\\n     *  the event is emitted by the addModule function\\n     *  `_module` is the address of the compliance module\\n     */\\n    event ModuleAdded(address indexed _module);\\n\\n    /**\\n     *  this event is emitted when a module has been removed from the list of modules bound to the compliance contract\\n     *  the event is emitted by the removeModule function\\n     *  `_module` is the address of the compliance module\\n     */\\n    event ModuleRemoved(address indexed _module);\\n\\n    /// functions\\n\\n    /**\\n     *  @dev binds a token to the compliance contract\\n     *  @param _token address of the token to bind\\n     *  This function can be called ONLY by the owner of the compliance contract\\n     *  Emits a TokenBound event\\n     */\\n    function bindToken(address _token) external;\\n\\n    /**\\n     *  @dev unbinds a token from the compliance contract\\n     *  @param _token address of the token to unbind\\n     *  This function can be called ONLY by the owner of the compliance contract\\n     *  Emits a TokenUnbound event\\n     */\\n    function unbindToken(address _token) external;\\n\\n    /**\\n     *  @dev adds a module to the list of compliance modules\\n     *  @param _module address of the module to add\\n     *  there cannot be more than 25 modules bound to the modular compliance for gas cost reasons\\n     *  This function can be called ONLY by the owner of the compliance contract\\n     *  Emits a ModuleAdded event\\n     */\\n    function addModule(address _module) external;\\n\\n    /**\\n     *  @dev removes a module from the list of compliance modules\\n     *  @param _module address of the module to remove\\n     *  This function can be called ONLY by the owner of the compliance contract\\n     *  Emits a ModuleRemoved event\\n     */\\n    function removeModule(address _module) external;\\n\\n    /**\\n     *  @dev calls any function on bound modules\\n     *  can be called only on bound modules\\n     *  @param callData the bytecode for interaction with the module, abi encoded\\n     *  @param _module The address of the module\\n     *  This function can be called only by the modular compliance owner\\n     *  emits a `ModuleInteraction` event\\n     */\\n    function callModuleFunction(bytes calldata callData, address _module) external;\\n\\n    /**\\n     *  @dev function called whenever tokens are transferred\\n     *  from one wallet to another\\n     *  this function can update state variables in the modules bound to the compliance\\n     *  these state variables being used by the module checks to decide if a transfer\\n     *  is compliant or not depending on the values stored in these state variables and on\\n     *  the parameters of the modules\\n     *  This function can be called ONLY by the token contract bound to the compliance\\n     *  @param _from The address of the sender\\n     *  @param _to The address of the receiver\\n     *  @param _amount The amount of tokens involved in the transfer\\n     *  This function calls moduleTransferAction() on each module bound to the compliance contract\\n     */\\n    function transferred(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     *  @dev function called whenever tokens are created on a wallet\\n     *  this function can update state variables in the modules bound to the compliance\\n     *  these state variables being used by the module checks to decide if a transfer\\n     *  is compliant or not depending on the values stored in these state variables and on\\n     *  the parameters of the modules\\n     *  This function can be called ONLY by the token contract bound to the compliance\\n     *  @param _to The address of the receiver\\n     *  @param _amount The amount of tokens involved in the minting\\n     *  This function calls moduleMintAction() on each module bound to the compliance contract\\n     */\\n    function created(address _to, uint256 _amount) external;\\n\\n    /**\\n     *  @dev function called whenever tokens are destroyed from a wallet\\n     *  this function can update state variables in the modules bound to the compliance\\n     *  these state variables being used by the module checks to decide if a transfer\\n     *  is compliant or not depending on the values stored in these state variables and on\\n     *  the parameters of the modules\\n     *  This function can be called ONLY by the token contract bound to the compliance\\n     *  @param _from The address on which tokens are burnt\\n     *  @param _amount The amount of tokens involved in the burn\\n     *  This function calls moduleBurnAction() on each module bound to the compliance contract\\n     */\\n    function destroyed(address _from, uint256 _amount) external;\\n\\n    /**\\n     *  @dev checks that the transfer is compliant.\\n     *  default compliance always returns true\\n     *  READ ONLY FUNCTION, this function cannot be used to increment\\n     *  counters, emit events, ...\\n     *  @param _from The address of the sender\\n     *  @param _to The address of the receiver\\n     *  @param _amount The amount of tokens involved in the transfer\\n     *  This function will call moduleCheck() on every module bound to the compliance\\n     *  If each of the module checks return TRUE, this function will return TRUE as well\\n     *  returns FALSE otherwise\\n     */\\n    function canTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external view returns (bool);\\n\\n    /**\\n     *  @dev getter for the modules bound to the compliance contract\\n     *  returns address array of module contracts bound to the compliance\\n     */\\n    function getModules() external view returns (address[] memory);\\n\\n    /**\\n     *  @dev getter for the address of the token bound\\n     *  returns the address of the token\\n     */\\n    function getTokenBound() external view returns (address);\\n\\n    /**\\n     *  @dev checks if a module is bound to the compliance contract\\n     *  returns true if module is bound, false otherwise\\n     */\\n    function isModuleBound(address _module) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/registry/interface/IClaimTopicsRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n//\\n//                                             :+#####%%%%%%%%%%%%%%+\\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\\n//                                          +@@@@@. =@@@=  .+@@@@@*:\\n//                                          #@@@@#:%@@#. :*@@@@#-\\n//                                          @@@@@%@@@= :#@@@@+.\\n//                                         :@@@@@@@#.:#@@@%-\\n//                                         +@@@@@@-.*@@@*:\\n//                                         #@@@@#.=@@@+.\\n//                                         @@@@+-%@%=\\n//                                        :@@@#%@%=\\n//                                        +@@@@%-\\n//                                        :#%%=\\n//\\n/**\\n *     NOTICE\\n *\\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\\n *     If you choose to receive it under the GPL v.3 license, the following applies:\\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\\n *\\n *     Copyright (C) 2023, Tokeny s\u00e0rl.\\n *\\n *     This program is free software: you can redistribute it and/or modify\\n *     it under the terms of the GNU General Public License as published by\\n *     the Free Software Foundation, either version 3 of the License, or\\n *     (at your option) any later version.\\n *\\n *     This program is distributed in the hope that it will be useful,\\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *     GNU General Public License for more details.\\n *\\n *     You should have received a copy of the GNU General Public License\\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity 0.8.17;\\n\\ninterface IClaimTopicsRegistry {\\n    /**\\n     *  this event is emitted when a claim topic has been added to the ClaimTopicsRegistry\\n     *  the event is emitted by the 'addClaimTopic' function\\n     *  `claimTopic` is the required claim added to the Claim Topics Registry\\n     */\\n    event ClaimTopicAdded(uint256 indexed claimTopic);\\n\\n    /**\\n     *  this event is emitted when a claim topic has been removed from the ClaimTopicsRegistry\\n     *  the event is emitted by the 'removeClaimTopic' function\\n     *  `claimTopic` is the required claim removed from the Claim Topics Registry\\n     */\\n    event ClaimTopicRemoved(uint256 indexed claimTopic);\\n\\n    /**\\n     * @dev Add a trusted claim topic (For example: KYC=1, AML=2).\\n     * Only owner can call.\\n     * emits `ClaimTopicAdded` event\\n     * cannot add more than 15 topics for 1 token as adding more could create gas issues\\n     * @param _claimTopic The claim topic index\\n     */\\n    function addClaimTopic(uint256 _claimTopic) external;\\n\\n    /**\\n     *  @dev Remove a trusted claim topic (For example: KYC=1, AML=2).\\n     *  Only owner can call.\\n     *  emits `ClaimTopicRemoved` event\\n     *  @param _claimTopic The claim topic index\\n     */\\n    function removeClaimTopic(uint256 _claimTopic) external;\\n\\n    /**\\n     *  @dev Get the trusted claim topics for the security token\\n     *  @return Array of trusted claim topics\\n     */\\n    function getClaimTopics() external view returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/registry/interface/IIdentityRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n//\\n//                                             :+#####%%%%%%%%%%%%%%+\\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\\n//                                          +@@@@@. =@@@=  .+@@@@@*:\\n//                                          #@@@@#:%@@#. :*@@@@#-\\n//                                          @@@@@%@@@= :#@@@@+.\\n//                                         :@@@@@@@#.:#@@@%-\\n//                                         +@@@@@@-.*@@@*:\\n//                                         #@@@@#.=@@@+.\\n//                                         @@@@+-%@%=\\n//                                        :@@@#%@%=\\n//                                        +@@@@%-\\n//                                        :#%%=\\n//\\n/**\\n *     NOTICE\\n *\\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\\n *     If you choose to receive it under the GPL v.3 license, the following applies:\\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\\n *\\n *     Copyright (C) 2023, Tokeny s\u00e0rl.\\n *\\n *     This program is free software: you can redistribute it and/or modify\\n *     it under the terms of the GNU General Public License as published by\\n *     the Free Software Foundation, either version 3 of the License, or\\n *     (at your option) any later version.\\n *\\n *     This program is distributed in the hope that it will be useful,\\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *     GNU General Public License for more details.\\n *\\n *     You should have received a copy of the GNU General Public License\\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./ITrustedIssuersRegistry.sol\\\";\\nimport \\\"./IClaimTopicsRegistry.sol\\\";\\nimport \\\"./IIdentityRegistryStorage.sol\\\";\\n\\nimport \\\"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol\\\";\\nimport \\\"@onchain-id/solidity/contracts/interface/IIdentity.sol\\\";\\n\\ninterface IIdentityRegistry {\\n    /**\\n     *  this event is emitted when the ClaimTopicsRegistry has been set for the IdentityRegistry\\n     *  the event is emitted by the IdentityRegistry constructor\\n     *  `claimTopicsRegistry` is the address of the Claim Topics Registry contract\\n     */\\n    event ClaimTopicsRegistrySet(address indexed claimTopicsRegistry);\\n\\n    /**\\n     *  this event is emitted when the IdentityRegistryStorage has been set for the IdentityRegistry\\n     *  the event is emitted by the IdentityRegistry constructor\\n     *  `identityStorage` is the address of the Identity Registry Storage contract\\n     */\\n    event IdentityStorageSet(address indexed identityStorage);\\n\\n    /**\\n     *  this event is emitted when the TrustedIssuersRegistry has been set for the IdentityRegistry\\n     *  the event is emitted by the IdentityRegistry constructor\\n     *  `trustedIssuersRegistry` is the address of the Trusted Issuers Registry contract\\n     */\\n    event TrustedIssuersRegistrySet(address indexed trustedIssuersRegistry);\\n\\n    /**\\n     *  this event is emitted when an Identity is registered into the Identity Registry.\\n     *  the event is emitted by the 'registerIdentity' function\\n     *  `investorAddress` is the address of the investor's wallet\\n     *  `identity` is the address of the Identity smart contract (onchainID)\\n     */\\n    event IdentityRegistered(address indexed investorAddress, IIdentity indexed identity);\\n\\n    /**\\n     *  this event is emitted when an Identity is removed from the Identity Registry.\\n     *  the event is emitted by the 'deleteIdentity' function\\n     *  `investorAddress` is the address of the investor's wallet\\n     *  `identity` is the address of the Identity smart contract (onchainID)\\n     */\\n    event IdentityRemoved(address indexed investorAddress, IIdentity indexed identity);\\n\\n    /**\\n     *  this event is emitted when an Identity has been updated\\n     *  the event is emitted by the 'updateIdentity' function\\n     *  `oldIdentity` is the old Identity contract's address to update\\n     *  `newIdentity` is the new Identity contract's\\n     */\\n    event IdentityUpdated(IIdentity indexed oldIdentity, IIdentity indexed newIdentity);\\n\\n    /**\\n     *  this event is emitted when an Identity's country has been updated\\n     *  the event is emitted by the 'updateCountry' function\\n     *  `investorAddress` is the address on which the country has been updated\\n     *  `country` is the numeric code (ISO 3166-1) of the new country\\n     */\\n    event CountryUpdated(address indexed investorAddress, uint16 indexed country);\\n\\n    /**\\n     *  @dev Register an identity contract corresponding to a user address.\\n     *  Requires that the user doesn't have an identity contract already registered.\\n     *  This function can only be called by a wallet set as agent of the smart contract\\n     *  @param _userAddress The address of the user\\n     *  @param _identity The address of the user's identity contract\\n     *  @param _country The country of the investor\\n     *  emits `IdentityRegistered` event\\n     */\\n    function registerIdentity(\\n        address _userAddress,\\n        IIdentity _identity,\\n        uint16 _country\\n    ) external;\\n\\n    /**\\n     *  @dev Removes an user from the identity registry.\\n     *  Requires that the user have an identity contract already deployed that will be deleted.\\n     *  This function can only be called by a wallet set as agent of the smart contract\\n     *  @param _userAddress The address of the user to be removed\\n     *  emits `IdentityRemoved` event\\n     */\\n    function deleteIdentity(address _userAddress) external;\\n\\n    /**\\n     *  @dev Replace the actual identityRegistryStorage contract with a new one.\\n     *  This function can only be called by the wallet set as owner of the smart contract\\n     *  @param _identityRegistryStorage The address of the new Identity Registry Storage\\n     *  emits `IdentityStorageSet` event\\n     */\\n    function setIdentityRegistryStorage(address _identityRegistryStorage) external;\\n\\n    /**\\n     *  @dev Replace the actual claimTopicsRegistry contract with a new one.\\n     *  This function can only be called by the wallet set as owner of the smart contract\\n     *  @param _claimTopicsRegistry The address of the new claim Topics Registry\\n     *  emits `ClaimTopicsRegistrySet` event\\n     */\\n    function setClaimTopicsRegistry(address _claimTopicsRegistry) external;\\n\\n    /**\\n     *  @dev Replace the actual trustedIssuersRegistry contract with a new one.\\n     *  This function can only be called by the wallet set as owner of the smart contract\\n     *  @param _trustedIssuersRegistry The address of the new Trusted Issuers Registry\\n     *  emits `TrustedIssuersRegistrySet` event\\n     */\\n    function setTrustedIssuersRegistry(address _trustedIssuersRegistry) external;\\n\\n    /**\\n     *  @dev Updates the country corresponding to a user address.\\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\\n     *  This function can only be called by a wallet set as agent of the smart contract\\n     *  @param _userAddress The address of the user\\n     *  @param _country The new country of the user\\n     *  emits `CountryUpdated` event\\n     */\\n    function updateCountry(address _userAddress, uint16 _country) external;\\n\\n    /**\\n     *  @dev Updates an identity contract corresponding to a user address.\\n     *  Requires that the user address should be the owner of the identity contract.\\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\\n     *  This function can only be called by a wallet set as agent of the smart contract\\n     *  @param _userAddress The address of the user\\n     *  @param _identity The address of the user's new identity contract\\n     *  emits `IdentityUpdated` event\\n     */\\n    function updateIdentity(address _userAddress, IIdentity _identity) external;\\n\\n    /**\\n     *  @dev function allowing to register identities in batch\\n     *  This function can only be called by a wallet set as agent of the smart contract\\n     *  Requires that none of the users has an identity contract already registered.\\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\\n     *  @param _userAddresses The addresses of the users\\n     *  @param _identities The addresses of the corresponding identity contracts\\n     *  @param _countries The countries of the corresponding investors\\n     *  emits _userAddresses.length `IdentityRegistered` events\\n     */\\n    function batchRegisterIdentity(\\n        address[] calldata _userAddresses,\\n        IIdentity[] calldata _identities,\\n        uint16[] calldata _countries\\n    ) external;\\n\\n    /**\\n     *  @dev This functions checks whether a wallet has its Identity registered or not\\n     *  in the Identity Registry.\\n     *  @param _userAddress The address of the user to be checked.\\n     *  @return 'True' if the address is contained in the Identity Registry, 'false' if not.\\n     */\\n    function contains(address _userAddress) external view returns (bool);\\n\\n    /**\\n     *  @dev This functions checks whether an identity contract\\n     *  corresponding to the provided user address has the required claims or not based\\n     *  on the data fetched from trusted issuers registry and from the claim topics registry\\n     *  @param _userAddress The address of the user to be verified.\\n     *  @return 'True' if the address is verified, 'false' if not.\\n     */\\n    function isVerified(address _userAddress) external view returns (bool);\\n\\n    /**\\n     *  @dev Returns the onchainID of an investor.\\n     *  @param _userAddress The wallet of the investor\\n     */\\n    function identity(address _userAddress) external view returns (IIdentity);\\n\\n    /**\\n     *  @dev Returns the country code of an investor.\\n     *  @param _userAddress The wallet of the investor\\n     */\\n    function investorCountry(address _userAddress) external view returns (uint16);\\n\\n    /**\\n     *  @dev Returns the IdentityRegistryStorage linked to the current IdentityRegistry.\\n     */\\n    function identityStorage() external view returns (IIdentityRegistryStorage);\\n\\n    /**\\n     *  @dev Returns the TrustedIssuersRegistry linked to the current IdentityRegistry.\\n     */\\n    function issuersRegistry() external view returns (ITrustedIssuersRegistry);\\n\\n    /**\\n     *  @dev Returns the ClaimTopicsRegistry linked to the current IdentityRegistry.\\n     */\\n    function topicsRegistry() external view returns (IClaimTopicsRegistry);\\n}\\n\"\r\n    },\r\n    \"contracts/registry/interface/IIdentityRegistryStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n//\\n//                                             :+#####%%%%%%%%%%%%%%+\\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\\n//                                          +@@@@@. =@@@=  .+@@@@@*:\\n//                                          #@@@@#:%@@#. :*@@@@#-\\n//                                          @@@@@%@@@= :#@@@@+.\\n//                                         :@@@@@@@#.:#@@@%-\\n//                                         +@@@@@@-.*@@@*:\\n//                                         #@@@@#.=@@@+.\\n//                                         @@@@+-%@%=\\n//                                        :@@@#%@%=\\n//                                        +@@@@%-\\n//                                        :#%%=\\n//\\n/**\\n *     NOTICE\\n *\\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\\n *     If you choose to receive it under the GPL v.3 license, the following applies:\\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\\n *\\n *     Copyright (C) 2023, Tokeny s\u00e0rl.\\n *\\n *     This program is free software: you can redistribute it and/or modify\\n *     it under the terms of the GNU General Public License as published by\\n *     the Free Software Foundation, either version 3 of the License, or\\n *     (at your option) any later version.\\n *\\n *     This program is distributed in the hope that it will be useful,\\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *     GNU General Public License for more details.\\n *\\n *     You should have received a copy of the GNU General Public License\\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@onchain-id/solidity/contracts/interface/IIdentity.sol\\\";\\n\\ninterface IIdentityRegistryStorage {\\n\\n    /// events\\n\\n    /**\\n     *  this event is emitted when an Identity is registered into the storage contract.\\n     *  the event is emitted by the 'registerIdentity' function\\n     *  `investorAddress` is the address of the investor's wallet\\n     *  `identity` is the address of the Identity smart contract (onchainID)\\n     */\\n    event IdentityStored(address indexed investorAddress, IIdentity indexed identity);\\n\\n    /**\\n     *  this event is emitted when an Identity is removed from the storage contract.\\n     *  the event is emitted by the 'deleteIdentity' function\\n     *  `investorAddress` is the address of the investor's wallet\\n     *  `identity` is the address of the Identity smart contract (onchainID)\\n     */\\n    event IdentityUnstored(address indexed investorAddress, IIdentity indexed identity);\\n\\n    /**\\n     *  this event is emitted when an Identity has been updated\\n     *  the event is emitted by the 'updateIdentity' function\\n     *  `oldIdentity` is the old Identity contract's address to update\\n     *  `newIdentity` is the new Identity contract's\\n     */\\n    event IdentityModified(IIdentity indexed oldIdentity, IIdentity indexed newIdentity);\\n\\n    /**\\n     *  this event is emitted when an Identity's country has been updated\\n     *  the event is emitted by the 'updateCountry' function\\n     *  `investorAddress` is the address on which the country has been updated\\n     *  `country` is the numeric code (ISO 3166-1) of the new country\\n     */\\n    event CountryModified(address indexed investorAddress, uint16 indexed country);\\n\\n    /**\\n     *  this event is emitted when an Identity Registry is bound to the storage contract\\n     *  the event is emitted by the 'addIdentityRegistry' function\\n     *  `identityRegistry` is the address of the identity registry added\\n     */\\n    event IdentityRegistryBound(address indexed identityRegistry);\\n\\n    /**\\n     *  this event is emitted when an Identity Registry is unbound from the storage contract\\n     *  the event is emitted by the 'removeIdentityRegistry' function\\n     *  `identityRegistry` is the address of the identity registry removed\\n     */\\n    event IdentityRegistryUnbound(address indexed identityRegistry);\\n\\n    /// functions\\n\\n    /**\\n     *  @dev adds an identity contract corresponding to a user address in the storage.\\n     *  Requires that the user doesn't have an identity contract already registered.\\n     *  This function can only be called by an address set as agent of the smart contract\\n     *  @param _userAddress The address of the user\\n     *  @param _identity The address of the user's identity contract\\n     *  @param _country The country of the investor\\n     *  emits `IdentityStored` event\\n     */\\n    function addIdentityToStorage(\\n        address _userAddress,\\n        IIdentity _identity,\\n        uint16 _country\\n    ) external;\\n\\n    /**\\n     *  @dev Removes an user from the storage.\\n     *  Requires that the user have an identity contract already deployed that will be deleted.\\n     *  This function can only be called by an address set as agent of the smart contract\\n     *  @param _userAddress The address of the user to be removed\\n     *  emits `IdentityUnstored` event\\n     */\\n    function removeIdentityFromStorage(address _userAddress) external;\\n\\n    /**\\n     *  @dev Updates the country corresponding to a user address.\\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\\n     *  This function can only be called by an address set as agent of the smart contract\\n     *  @param _userAddress The address of the user\\n     *  @param _country The new country of the user\\n     *  emits `CountryModified` event\\n     */\\n    function modifyStoredInvestorCountry(address _userAddress, uint16 _country) external;\\n\\n    /**\\n     *  @dev Updates an identity contract corresponding to a user address.\\n     *  Requires that the user address should be the owner of the identity contract.\\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\\n     *  This function can only be called by an address set as agent of the smart contract\\n     *  @param _userAddress The address of the user\\n     *  @param _identity The address of the user's new identity contract\\n     *  emits `IdentityModified` event\\n     */\\n    function modifyStoredIdentity(address _userAddress, IIdentity _identity) external;\\n\\n    /**\\n     *  @notice Adds an identity registry as agent of the Identity Registry Storage Contract.\\n     *  This function can only be called by the wallet set as owner of the smart contract\\n     *  This function adds the identity registry to the list of identityRegistries linked to the storage contract\\n     *  cannot bind more than 300 IR to 1 IRS\\n     *  @param _identityRegistry The identity registry address to add.\\n     */\\n    function bindIdentityRegistry(address _identityRegistry) external;\\n\\n    /**\\n     *  @notice Removes an identity registry from being agent of the Identity Registry Storage Contract.\\n     *  This function can only be called by the wallet set as owner of the smart contract\\n     *  This function removes the identity registry from the list of identityRegistries linked to the storage contract\\n     *  @param _identityRegistry The identity registry address to remove.\\n     */\\n    function unbindIdentityRegistry(address _identityRegistry) external;\\n\\n    /**\\n     *  @dev Returns the identity registries linked to the storage contract\\n     */\\n    function linkedIdentityRegistries() external view returns (address[] memory);\\n\\n    /**\\n     *  @dev Returns the onchainID of an investor.\\n     *  @param _userAddress The wallet of the investor\\n     */\\n    function storedIdentity(address _userAddress) external view returns (IIdentity);\\n\\n    /**\\n     *  @dev Returns the country code of an investor.\\n     *  @param _userAddress The wallet of the investor\\n     */\\n    function storedInvestorCountry(address _userAddress) external view returns (uint16);\\n}\\n\"\r\n    },\r\n    \"contracts/registry/interface/ITrustedIssuersRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n//\\n//                                             :+#####%%%%%%%%%%%%%%+\\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\\n//                                          +@@@@@. =@@@=  .+@@@@@*:\\n//                                          #@@@@#:%@@#. :*@@@@#-\\n//                                          @@@@@%@@@= :#@@@@+.\\n//                                         :@@@@@@@#.:#@@@%-\\n//                                         +@@@@@@-.*@@@*:\\n//                                         #@@@@#.=@@@+.\\n//                                         @@@@+-%@%=\\n//                                        :@@@#%@%=\\n//                                        +@@@@%-\\n//                                        :#%%=\\n//\\n\\n/**\\n *     NOTICE\\n *\\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\\n *     If you choose to receive it under the GPL v.3 license, the following applies:\\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\\n *\\n *     Copyright (C) 2023, Tokeny s\u00e0rl.\\n *\\n *     This program is free software: you can redistribute it and/or modify\\n *     it under the terms of the GNU General Public License as published by\\n *     the Free Software Foundation, either version 3 of the License, or\\n *     (at your option) any later version.\\n *\\n *     This program is distributed in the hope that it will be useful,\\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *     GNU General Public License for more details.\\n *\\n *     You should have received a copy of the GNU General Public License\\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol\\\";\\n\\ninterface ITrustedIssuersRegistry {\\n    /**\\n     *  this event is emitted when a trusted issuer is added in the registry.\\n     *  the event is emitted by the addTrustedIssuer function\\n     *  `trustedIssuer` is the address of the trusted issuer's ClaimIssuer contract\\n     *  `claimTopics` is the set of claims that the trusted issuer is allowed to emit\\n     */\\n    event TrustedIssuerAdded(IClaimIssuer indexed trustedIssuer, uint256[] claimTopics);\\n\\n    /**\\n     *  this event is emitted when a trusted issuer is removed from the registry.\\n     *  the event is emitted by the removeTrustedIssuer function\\n     *  `trustedIssuer` is the address of the trusted issuer's ClaimIssuer contract\\n     */\\n    event TrustedIssuerRemoved(IClaimIssuer indexed trustedIssuer);\\n\\n    /**\\n     *  this event is emitted when the set of claim topics is changed for a given trusted issuer.\\n     *  the event is emitted by the updateIssuerClaimTopics function\\n     *  `trustedIssuer` is the address of the trusted issuer's ClaimIssuer contract\\n     *  `claimTopics` is the set of claims that the trusted issuer is allowed to emit\\n     */\\n    event ClaimTopicsUpdated(IClaimIssuer indexed trustedIssuer, uint256[] claimTopics);\\n\\n    /**\\n     *  @dev registers a ClaimIssuer contract as trusted claim issuer.\\n     *  Requires that a ClaimIssuer contract doesn't already exist\\n     *  Requires that the claimTopics set is not empty\\n     *  Requires that there is no more than 15 claimTopics\\n     *  Requires that there is no more than 50 Trusted issuers\\n     *  @param _trustedIssuer The ClaimIssuer contract address of the trusted claim issuer.\\n     *  @param _claimTopics the set of claim topics that the trusted issuer is allowed to emit\\n     *  This function can only be called by the owner of the Trusted Issuers Registry contract\\n     *  emits a `TrustedIssuerAdded` event\\n     */\\n    function addTrustedIssuer(IClaimIssuer _trustedIssuer, uint256[] calldata _claimTopics) external;\\n\\n    /**\\n     *  @dev Removes the ClaimIssuer contract of a trusted claim issuer.\\n     *  Requires that the claim issuer contract to be registered first\\n     *  @param _trustedIssuer the claim issuer to remove.\\n     *  This function can only be called by the owner of the Trusted Issuers Registry contract\\n     *  emits a `TrustedIssuerRemoved` event\\n     */\\n    function removeTrustedIssuer(IClaimIssuer _trustedIssuer) external;\\n\\n    /**\\n     *  @dev Updates the set of claim topics that a trusted issuer is allowed to emit.\\n     *  Requires that this ClaimIssuer contract already exists in the registry\\n     *  Requires that the provided claimTopics set is not empty\\n     *  Requires that there is no more than 15 claimTopics\\n     *  @param _trustedIssuer the claim issuer to update.\\n     *  @param _claimTopics the set of claim topics that the trusted issuer is allowed to emit\\n     *  This function can only be called by the owner of the Trusted Issuers Registry contract\\n     *  emits a `ClaimTopicsUpdated` event\\n     */\\n    function updateIssuerClaimTopics(IClaimIssuer _trustedIssuer, uint256[] calldata _claimTopics) external;\\n\\n    /**\\n     *  @dev Function for getting all the trusted claim issuers stored.\\n     *  @return array of all claim issuers registered.\\n     */\\n    function getTrustedIssuers() external view returns (IClaimIssuer[] memory);\\n\\n    /**\\n     *  @dev Function for getting all the trusted issuer allowed for a given claim topic.\\n     *  @param claimTopic the claim topic to get the trusted issuers for.\\n     *  @return array of all claim issuer addresses that are allowed for the given claim topic.\\n     */\\n    function getTrustedIssuersForClaimTopic(uint256 claimTopic) external view returns (IClaimIssuer[] memory);\\n\\n    /**\\n     *  @dev Checks if the ClaimIssuer contract is trusted\\n     *  @param _issuer the address of the ClaimIssuer contract\\n     *  @return true if the issuer is trusted, false otherwise.\\n     */\\n    function isTrustedIssuer(address _issuer) external view returns (bool);\\n\\n    /**\\n     *  @dev Function for getting all the claim topic of trusted claim issuer\\n     *  Requires the provided ClaimIssuer contract to be registered in the trusted issuers registry.\\n     *  @param _trustedIssuer the trusted issuer concerned.\\n     *  @return The set of claim topics that the trusted issuer is allowed to emit\\n     */\\n    function getTrustedIssuerClaimTopics(IClaimIssuer _trustedIssuer) external view returns (uint256[] memory);\\n\\n    /**\\n     *  @dev Function for checking if the trusted claim issuer is allowed\\n     *  to emit a certain claim topic\\n     *  @param _issuer the address of the trusted issuer's ClaimIssuer contract\\n     *  @param _claimTopic the Claim Topic that has to be checked to know if the `issuer` is allowed to emit it\\n     *  @return true if the issuer is trusted for this claim topic.\\n     */\\n    function hasClaimTopic(address _issuer, uint256 _claimTopic) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/roles/AgentRole.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n//\\n//                                             :+#####%%%%%%%%%%%%%%+\\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\\n//                                          +@@@@@. =@@@=  .+@@@@@*:\\n//                                          #@@@@#:%@@#. :*@@@@#-\\n//                                          @@@@@%@@@= :#@@@@+.\\n//                                         :@@@@@@@#.:#@@@%-\\n//                                         +@@@@@@-.*@@@*:\\n//                                         #@@@@#.=@@@+.\\n//                                         @@@@+-%@%=\\n//                                        :@@@#%@%=\\n//                                        +@@@@%-\\n//                                        :#%%=\\n//\\n\\n/**\\n *     NOTICE\\n *\\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\\n *     If you choose to receive it under the GPL v.3 license, the following applies:\\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\\n *\\n *     Copyright (C) 2023, Tokeny s\u00e0rl.\\n *\\n *     This program is free software: you can redistribute it and/or modify\\n *     it under the terms of the GNU General Public License as published by\\n *     the Free Software Foundation, either version 3 of the License, or\\n *     (at your option) any later version.\\n *\\n *     This program is distributed in the hope that it will be useful,\\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *     GNU General Public License for more details.\\n *\\n *     You should have received a copy of the GNU General Public License\\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./Roles.sol\\\";\\n\\ncontract AgentRole is Ownable {\\n    using Roles for Roles.Role;\\n\\n    Roles.Role private _agents;\\n\\n    event AgentAdded(address indexed _agent);\\n    event AgentRemoved(address indexed _agent);\\n\\n    modifier onlyAgent() {\\n        require(isAgent(msg.sender), \\\"AgentRole: caller does not have the Agent role\\\");\\n        _;\\n    }\\n\\n    function addAgent(address _agent) public onlyOwner {\\n        require(_agent != address(0), \\\"invalid argument - zero address\\\");\\n        _agents.add(_agent);\\n        emit AgentAdded(_agent);\\n    }\\n\\n    function removeAgent(address _agent) public onlyOwner {\\n        require(_agent != address(0), \\\"invalid argument - zero address\\\");\\n        _agents.remove(_agent);\\n        emit AgentRemoved(_agent);\\n    }\\n\\n    function isAgent(address _agent) public view returns (bool) {\\n        return _agents.has(_agent);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/roles/permissioning/owner/OwnerManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n//\\n//                                             :+#####%%%%%%%%%%%%%%+\\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\\n//                                          +@@@@@. =@@@=  .+@@@@@*:\\n//                                          #@@@@#:%@@#. :*@@@@#-\\n//                                          @@@@@%@@@= :#@@@@+.\\n//                                         :@@@@@@@#.:#@@@%-\\n//                                         +@@@@@@-.*@@@*:\\n//                                         #@@@@#.=@@@+.\\n//                                         @@@@+-%@%=\\n//                                        :@@@#%@%=\\n//                                        +@@@@%-\\n//                                        :#%%=\\n//\\n\\n/**\\n *     NOTICE\\n *\\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\\n *     If you choose to receive it under the GPL v.3 license, the following applies:\\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\\n *\\n *     Copyright (C) 2023, Tokeny s\u00e0rl.\\n *\\n *     This program is free software: you can redistribute it and/or modify\\n *     it under the terms of the GNU General Public License as published by\\n *     the Free Software Foundation, either version 3 of the License, or\\n *     (at your option) any later version.\\n *\\n *     This program is distributed in the hope that it will be useful,\\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *     GNU General Public License for more details.\\n *\\n *     You should have received a copy of the GNU General Public License\\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../../../token/IToken.sol\\\";\\nimport \\\"../../../registry/interface/IIdentityRegistry.sol\\\";\\nimport \\\"../../../registry/interface/ITrustedIssuersRegistry.sol\\\";\\nimport \\\"../../../registry/interface/IClaimTopicsRegistry.sol\\\";\\nimport \\\"../../../compliance/legacy/ICompliance.sol\\\";\\nimport \\\"./OwnerRoles.sol\\\";\\nimport \\\"../../AgentRole.sol\\\";\\nimport \\\"@onchain-id/solidity/contracts/interface/IIdentity.sol\\\";\\nimport \\\"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol\\\";\\n\\ncontract OwnerManager is OwnerRoles {\\n    /// @dev the token that is managed by this OwnerManager Contract\\n    IToken public token;\\n\\n    /// @dev Event emitted for each executed interaction with the compliance contract.\\n    ///\\n    /// For gas efficiency, only the interaction calldata selector (first 4\\n    /// bytes) is included in the event. For interactions without calldata or\\n    /// whose calldata is shorter than 4 bytes, the selector will be `0`.\\n    event ComplianceInteraction(address indexed target, bytes4 selector);\\n\\n    /**\\n     *  @dev the constructor initiates the OwnerManager contract\\n     *  and sets msg.sender as owner of the contract\\n     *  @param _token the token managed by this OwnerManager contract\\n     */\\n    constructor(address _token) {\\n        token = IToken(_token);\\n    }\\n\\n    /**\\n     *  @dev calls the `setIdentityRegistry` function on the token contract\\n     *  OwnerManager has to be set as owner on the token smart contract to process this function\\n     *  See {IToken-setIdentityRegistry}.\\n     *  Requires that `_onchainID` is set as RegistryAddressSetter on the OwnerManager contract\\n     *  Requires that msg.sender is an ACTION KEY on `_onchainID`\\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \\\"i call this function and i am Bob\\\"\\n     */\\n    function callSetIdentityRegistry(address _identityRegistry, IIdentity _onchainID) external {\\n        require(\\n            isRegistryAddressSetter(address(_onchainID)) && _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2),\\n            \\\"Role: Sender is NOT Registry Address Setter\\\"\\n        );\\n        token.setIdentityRegistry(_identityRegistry);\\n    }\\n\\n    /**\\n     *  @dev calls the `setCompliance` function on the token contract\\n     *  OwnerManager has to be set as owner on the token smart contract to process this function\\n     *  See {IToken-setCompliance}.\\n     *  Requires that `_onchainID` is set as ComplianceSetter on the OwnerManager contract\\n     *  Requires that msg.sender is a MANAGEMENT KEY on `_onchainID`\\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \\\"i call this function and i am Bob\\\"\\n     */\\n    function callSetCompliance(address _compliance, IIdentity _onchainID) external {\\n        require(\\n            isComplianceSetter(address(_onchainID)) && _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2),\\n            \\\"Role: Sender is NOT Compliance Setter\\\"\\n        );\\n        token.setCompliance(_compliance);\\n    }\\n\\n    /**\\n     *  @dev calls any onlyOwner function available on the compliance contract\\n     *  OwnerManager has to be set as owner on the compliance smart contract to process this function\\n     *  Requires that `_onchainID` is set as ComplianceManager on the OwnerManager contract\\n     *  Requires that msg.sender is an ACTION KEY on `_onchainID`\\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \\\"i call this function and i am Bob\\\"\\n     */\\n    function callComplianceFunction(bytes calldata callData, IIdentity _onchainID) external {\\n        require(\\n            isComplianceManager(address(_onchainID)) && _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2),\\n            \\\"Role: Sender is NOT Compliance Manager\\\");\\n        address target = address(token.compliance());\\n\\n        // NOTE: Use assembly to call the interaction instead of a low level\\n        // call for two reasons:\\n        // - We don't want to copy the return data, since we discard it for\\n        // interactions.\\n        // - Solidity will under certain conditions generate code to copy input\\n        // calldata twice to memory (the second being a \\\"memcopy loop\\\").\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            calldatacopy(freeMemoryPointer, callData.offset, callData.length)\\n            if iszero(\\n                call(\\n                    gas(),\\n                    target,\\n                    0,\\n                    freeMemoryPointer,\\n                    callData.length,\\n                    0,\\n                    0\\n                    ))\\n                {\\n                    returndatacopy(0, 0, returndatasize())\\n                    revert(0, returndatasize())\\n                }\\n            }\\n\\n        emit ComplianceInteraction(target, _selector(callData));\\n\\n        }\\n\\n    /**\\n     *  @dev calls the `setName` function on the token contract\\n     *  OwnerManager has to be set as owner on the token smart contract to process this function\\n     *  See {IToken-setName}.\\n     *  Requires that `_onchainID` is set as TokenInfoManager on the OwnerManager contract\\n     *  Requires that msg.sender is an ACTION KEY on `_onchainID`\\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \\\"i call this function and i am Bob\\\"\\n     */\\n    function callSetTokenName(string calldata _name, IIdentity _onchainID) external {\\n        require(\\n            isTokenInfoManager(address(_onchainID)) && _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2),\\n            \\\"Role: Sender is NOT Token Information Manager\\\"\\n        );\\n        token.setName(_name);\\n    }\\n\\n    /**\\n     *  @dev calls the `setSymbol` function on the token contract\\n     *  OwnerManager has to be set as owner on the token smart contract to process this function\\n     *  See {IToken-setSymbol}.\\n     *  Requires that `_onchainID` is set as TokenInfoManager on the OwnerManager contract\\n     *  Requires that msg.sender is an ACTION KEY on `_onchainID`\\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \\\"i call this function and i am Bob\\\"\\n     */\\n    function callSetTokenSymbol(string calldata _symbol, IIdentity _onchainID) external {\\n        require(\\n            isTokenInfoManager(address(_onchainID)) && _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2),\\n            \\\"Role: Sender is NOT Token Information Manager\\\"\\n        );\\n        token.setSymbol(_symbol);\\n    }\\n\\n    /**\\n     *  @dev calls the `setOnchainID` function on the token contract\\n     *  OwnerManager has to be set as owner on the token smart contract to process this function\\n     *  See {IToken-setOnchainID}.\\n     *  Requires that `_tokenOnchainID` is set as TokenInfoManager on the OwnerManager contract\\n     *  Requires that msg.sender is an ACTION KEY on `_onchainID`\\n     *  @param _onchainID the onchainID contract of the caller, e.g. \\\"i call this function and i am Bob\\\"\\n     */\\n    function callSetTokenOnchainID(address _tokenOnchainID, IIdentity _onchainID) external {\\n        require(\\n            isTokenInfoManager(address(_onchainID)) && _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2),\\n            \\\"Role: Sender is NOT Token Information Manager\\\"\\n        );\\n        token.setOnchainID(_tokenOnchainID);\\n    }\\n\\n    /**\\n     *  @dev calls the `setClaimTopicsRegistry` function on the Identity Registry contract\\n     *  OwnerManager has to be set as owner on the Identity Registry smart contract to process this function\\n     *  See {IIdentityRegistry-setClaimTopicsRegistry}.\\n     *  Requires that `_onchainID` is set as RegistryAddressSetter on the OwnerManager contract\\n     *  Requires that msg.sender is an ACTION KEY on `_onchainID`\\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \\\"i call this function and i am Bob\\\"\\n     */\\n    function callSetClaimTopicsRegistry(address _claimTopicsRegistry, IIdentity _onchainID) external {\\n        require(\\n            isRegistryAddressSetter(address(_onchainID)) && _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2),\\n            \\\"Role: Sender is NOT Registry Address Setter\\\"\\n        );\\n        token.identityRegistry().setClaimTopicsRegistry(_claimTopicsRegistry);\\n    }\\n\\n    /**\\n     *  @dev calls the `setTrustedIssuersRegistry` function on the Identity Registry contract\\n     *  OwnerManager has to be set as owner on the Identity Registry smart contract to process this function\\n     *  See {IIdentityRegistry-setTrustedIssuersRegistry}.\\n     *  Requires that `_onchainID` is set as RegistryAddressSetter on the OwnerManager contract\\n     *  Requires that msg.sender is an ACTION KEY on `_onchainID`\\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \\\"i call this function and i am Bob\\\"\\n     */\\n    function callSetTrustedIssuersRegistry(address _trustedIssuersRegistry, IIdentity _onchainID) external {\\n        require(\\n            isRegistryAddressSetter(address(_onchainID)) && _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2),\\n            \\\"Role: Sender is NOT Registry Address Setter\\\"\\n        );\\n        token.identityRegistry().setTrustedIssuersRegistry(_trustedIssuersRegistry);\\n    }\\n\\n    /**\\n     *  @dev calls the `addTrustedIssuer` function on the Trusted Issuers Registry contract\\n     *  OwnerManager has to be set as owner on the Trusted Issuers Registry smart contract to process this function\\n     *  See {ITrustedIssuersRegistry-addTrustedIssuer}.\\n     *  Requires that `_onchainID` is set as IssuersRegistryManager on the OwnerManager contract\\n     *  Requires that msg.sender is an ACTION KEY on `_onchainID`\\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \\\"i call this function and i am Bob\\\"\\n     */\\n    function callAddTrustedIssuer(\\n        IClaimIssuer _trustedIssuer,\\n        uint256[] calldata _claimTopics,\\n        IIdentity _onchainID\\n    ) external {\\n        require(\\n            isIssuersRegistryManager(address(_onchainID)) && _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2),\\n            \\\"Role: Sender is NOT IssuersRegistryManager\\\"\\n        );\\n        token.identityRegistry().issuersRegistry().addTrustedIssuer(_trustedIssuer, _claimTopics);\\n    }\\n\\n    /**\\n     *  @dev calls the `removeTrustedIssuer` function on the Trusted Issuers Registry contract\\n     *  OwnerManager has to be set as owner on the Trusted Issuers Registry smart contract to process this function\\n     *  See {ITrustedIssuersRegistry-removeTrustedIssuer}.\\n     *  Requires that `_onchainID` is set as IssuersRegistryManager on the OwnerManager contract\\n     *  Requires that msg.sender is an ACTION KEY on `_onchainID`\\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \\\"i call this function and i am Bob\\\"\\n     */\\n    function callRemoveTrustedIssuer(IClaimIssuer _trustedIssuer, IIdentity _onchainID) external {\\n        require(\\n            isIssuersRegistryManager(address(_onchainID)) && _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2),\\n            \\\"Role: Sender is NOT IssuersRegistryManager\\\"\\n        );\\n        token.identityRegistry().issuersRegistry().removeTrustedIssuer(_trustedIssuer);\\n    }\\n\\n    /**\\n     *  @dev calls the `updateIssuerClaimTopics` function on the Trusted Issuers Registry contract\\n     *  OwnerManager has to be set as owner on the Trusted Issuers Registry smart contract to process this function\\n     *  See {ITrustedIssuersRegistry-updateIssuerClaimTopics}.\\n     *  Requires that `_onchainID` is set as IssuersRegistryManager on the OwnerManager contract\\n     *  Requires that msg.sender is an ACTION KEY on `_onchainID`\\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \\\"i call this function and i am Bob\\\"\\n     */\\n    function callUpdateIssuerClaimTopics(\\n        IClaimIssuer _trustedIssuer,\\n        uint256[] calldata _claimTopics,\\n        IIdentity _onchainID\\n    ) external {\\n        require(\\n            isIssuersRegistryManager(address(_onchainID)) && _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2),\\n            \\\"Role: Sender is NOT IssuersRegistryManager\\\"\\n        );\\n        token.identityRegistry().issuersRegistry().updateIssuerClaimTopics(_trustedIssuer, _claimTopics);\\n    }\\n\\n    /**\\n     *  @dev calls the `addClaimTopic` function on the Claim Topics Registry contract\\n     *  OwnerManager has to be set as owner on the Claim Topics Registry smart contract to process this function\\n     *  See {IClaimTopicsRegistry-addClaimTopic}.\\n     *  Requires that `_onchainID` is set as ClaimRegistryManager on the OwnerManager contract\\n     *  Requires that msg.sender is an ACTION KEY on `_onchainID`\\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \\\"i call this function and i am Bob\\\"\\n     */\\n    function callAddClaimTopic(uint256 _claimTopic, IIdentity _onchainID) external {\\n        require(\\n            isClaimRegistryManager(address(_onchainID)) && _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2),\\n            \\\"Role: Sender is NOT ClaimRegistryManager\\\"\\n        );\\n        token.identityRegistry().topicsRegistry().addClaimTopic(_claimTopic);\\n    }\\n\\n    /**\\n     *  @dev calls the `removeClaimTopic` function on the Claim Topics Registry contract\\n     *  OwnerManager has to be set as owner on the Claim Topics Registry smart contract to process this function\\n     *  See {IClaimTopicsRegistry-removeClaimTopic}.\\n     *  Requires that `_onchainID` is set as ClaimRegistryManager on the OwnerManager contract\\n     *  Requires that msg.sender is an ACTION KEY on `_onchainID`\\n     *  @param _onchainID the _onchainID contract of the caller, e.g. \\\"i call this function and i am Bob\\\"\\n     */\\n    function callRemoveClaimTopic(uint256 _claimTopic, IIdentity _onchainID) external {\\n        require(\\n            isClaimRegistryManager(address(_onchainID)) && _onchainID.keyHasPurpose(keccak256(abi.encode(msg.sender)), 2),\\n            \\\"Role: Sender is NOT ClaimRegistryManager\\\"\\n        );\\n        token.identityRegistry().topicsRegistry().removeClaimTopic(_claimTopic);\\n    }\\n\\n    /**\\n     *  @dev calls the `transferOwnershipOnTokenContract` function on the token contract\\n     *  OwnerManager has to be set as owner on the token smart contract to process this function\\n     *  See {IToken-transferOwnershipOnTokenContract}.\\n     *  Requires that msg.sender is an Admin of the OwnerManager contract\\n     */\\n    function callTransferOwnershipOnTokenContract(address _newOwner) external onlyAdmin {\\n        Ownable(address(token)).transferOwnership(_newOwner);\\n    }\\n\\n    /**\\n     *  @dev calls the `transferOwnershipOnIdentityRegistryContract` function on the Identity Registry contract\\n     *  OwnerManager has to be set as owner on the Identity Registry smart contract to process this function\\n     *  See {IIdentityRegistry-transferOwnershipOnIdentityRegistryContract}.\\n     *  Requires that msg.sender is an Admin of the OwnerManager contract\\n     */\\n    function callTransferOwnershipOnIdentityRegistryContract(address _newOwner) external onlyAdmin {\\n        Ownable(address(token.identityRegistry())).transferOwnership(_newOwner);\\n    }\\n\\n    /**\\n     *  @dev calls the `transferOwnershipOnComplianceContract` function on the Compliance contract\\n     *  OwnerManager has to be set as owner on the Compliance smart contract to process this function\\n     *  See {ICompliance-transferOwnershipOnComplianceContract}.\\n     *  Requires that msg.sender is an Admin of the OwnerManager contract\\n     */\\n    function callTransferOwnershipOnComplianceContract(address _newOwner) external onlyAdmin {\\n        Ownable(address(token.compliance())).transferOwnership(_newOwner);\\n    }\\n\\n    /**\\n     *  @dev calls the `transferOwnershipOnClaimTopicsRegistryContract` function on the Claim Topics Registry contract\\n     *  OwnerManager has to be set as owner on the Claim Topics registry smart contract to process this function\\n     *  See {IClaimTopicsRegistry-transferOwnershipOnClaimTopicsRegistryContract}.\\n     *  Requires that msg.sender is an Admin of the OwnerManager contract\\n     */\\n    function callTransferOwnershipOnClaimTopicsRegistryContract(address _newOwner) external onlyAdmin {\\n        Ownable(address(token.identityRegistry().topicsRegistry())).transferOwnership(_newOwner);\\n    }\\n\\n    /**\\n     *  @dev calls the `transferOwnershipOnIssuersRegistryContract` function on the Trusted Issuers Registry contract\\n     *  OwnerManager has to be set as owner on the Trusted Issuers registry smart contract to process this function\\n     *  See {ITrustedIssuersRegistry-transferOwnershipOnIssuersRegistryContract}.\\n     *  Requires that msg.sender is an Admin of the OwnerManager contract\\n     */\\n    function callTransferOwnershipOnIssuersRegistryContract(address _newOwner) external onlyAdmin {\\n        Ownable(address(token.identityRegistry().issuersRegistry())).transferOwnership(_newOwner);\\n    }\\n\\n    /**\\n     *  @dev calls the `addAgentOnTokenContract` function on the token contract\\n     *  OwnerManager has to be set as owner on the token smart contract to process this function\\n     *  See {IToken-addAgentOnTokenContract}.\\n     *  Requires that msg.sender is an Admin of the OwnerManager contract\\n     */\\n    function callAddAgentOnTokenContract(address _agent) external onlyAdmin {\\n        AgentRole(address(token)).addAgent(_agent);\\n    }\\n\\n    /**\\n     *  @dev calls the `removeAgentOnTokenContract` function on the token contract\\n     *  OwnerManager has to be set as owner on the token smart contract to process this function\\n     *  See {IToken-removeAgentOnTokenContract}.\\n     *  Requires that msg.sender is an Admin of the OwnerManager contract\\n     */\\n    function callRemoveAgentOnTokenContract(address _agent) external onlyAdmin {\\n        AgentRole(address(token)).removeAgent(_agent);\\n    }\\n\\n    /**\\n     *  @dev calls the `addAgentOnIdentityRegistryContract` function on the Identity Registry contract\\n     *  OwnerManager has to be set as owner on the Identity Registry smart contract to process this function\\n     *  See {IIdentityRegistry-addAgentOnIdentityRegistryContract}.\\n     *  Requires that msg.sender is an Admin of the OwnerManager contract\\n     */\\n    function callAddAgentOnIdentityRegistryContract(address _agent) external onlyAdmin {\\n        AgentRole(address(token.identityRegistry())).addAgent(_agent);\\n    }\\n\\n    /**\\n     *  @dev calls the `removeAgentOnIdentityRegistryContract` function on the Identity Registry contract\\n     *  OwnerManager has to be set as owner on the Identity Registry smart contract to process this function\\n     *  See {IIdentityRegistry-removeAgentOnIdentityRegistryContract}.\\n     *  Requires that msg.sender is an Admin of the OwnerManager contract\\n     */\\n    function callRemoveAgentOnIdentityRegistryContract(address _agent) external onlyAdmin {\\n        AgentRole(address(token.identityRegistry())).removeAgent(_agent);\\n    }\\n\\n    /// @dev Extracts the Solidity ABI selector for the specified interaction.\\n    /// @param callData Interaction data.\\n    /// @return result The 4 byte function selector of the call encoded in\\n    /// this interaction.\\n    function _selector(bytes calldata callData) internal pure returns (bytes4 result) {\\n        if (callData.length >= 4) {\\n            // NOTE: Read the first word of the interaction's calldata. The\\n            // value does not need to be shifted since `bytesN` values are left\\n            // aligned, and the value does not need to be masked since masking\\n            // occurs when the value is accessed and not stored:\\n            // <https://docs.soliditylang.org/en/v0.7.6/abi-spec.html#encoding-of-indexed-event-parameters>\\n            // <https://docs.soliditylang.org/en/v0.7.6/assembly.html#access-to-external-variables-functions-and-libraries>\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                result := calldataload(callData.offset)\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/roles/permissioning/owner/OwnerRoles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n//\\n//                                             :+#####%%%%%%%%%%%%%%+\\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\\n//                                          +@@@@@. =@@@=  .+@@@@@*:\\n//                                          #@@@@#:%@@#. :*@@@@#-\\n//                                          @@@@@%@@@= :#@@@@+.\\n//                                         :@@@@@@@#.:#@@@%-\\n//                                         +@@@@@@-.*@@@*:\\n//                                         #@@@@#.=@@@+.\\n//                                         @@@@+-%@%=\\n//                                        :@@@#%@%=\\n//                                        +@@@@%-\\n//                                        :#%%=\\n//\\n\\n/**\\n *     NOTICE\\n *\\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\\n *     If you choose to receive it under the GPL v.3 license, the following applies:\\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\\n *\\n *     Copyright (C) 2023, Tokeny s\u00e0rl.\\n *\\n *     This program is free software: you can redistribute it and/or modify\\n *     it under the terms of the GNU General Public License as published by\\n *     the Free Software Foundation, either version 3 of the License, or\\n *     (at your option) any later version.\\n *\\n *     This program is distributed in the hope that it will be useful,\\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *     GNU General Public License for more details.\\n *\\n *     You should have received a copy of the GNU General Public License\\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../../Roles.sol\\\";\\n\\ncontract OwnerRoles is Ownable {\\n    using Roles for Roles.Role;\\n\\n    /// variables\\n\\n    Roles.Role private _ownerAdmin;\\n    Roles.Role private _registryAddressSetter;\\n    Roles.Role private _complianceSetter;\\n    Roles.Role private _complianceManager;\\n    Roles.Role private _claimRegistryManager;\\n    Roles.Role private _issuersRegistryManager;\\n    Roles.Role private _tokenInfoManager;\\n\\n    /// events\\n\\n    event RoleAdded(address indexed _owner, string _role);\\n    event RoleRemoved(address indexed _owner, string _role);\\n\\n    /// modifiers\\n\\n    modifier onlyAdmin() {\\n        require(owner() == msg.sender || isOwnerAdmin(_msgSender()), \\\"Role: Sender is NOT Admin\\\");\\n        _;\\n    }\\n\\n    /// functions\\n\\n    function addOwnerAdmin(address _owner) external onlyAdmin {\\n        _ownerAdmin.add(_owner);\\n        string memory _role = \\\"OwnerAdmin\\\";\\n        emit RoleAdded(_owner, _role);\\n    }\\n\\n    function removeOwnerAdmin(address _owner) external onlyAdmin {\\n        _ownerAdmin.remove(_owner);\\n        string memory _role = \\\"OwnerAdmin\\\";\\n        emit RoleRemoved(_owner, _role);\\n    }\\n\\n    function addRegistryAddressSetter(address _owner) external onlyAdmin {\\n        _registryAddressSetter.add(_owner);\\n        string memory _role = \\\"RegistryAddressSetter\\\";\\n        emit RoleAdded(_owner, _role);\\n    }\\n\\n    function removeRegistryAddressSetter(address _owner) external onlyAdmin {\\n        _registryAddressSetter.remove(_owner);\\n        string memory _role = \\\"RegistryAddressSetter\\\";\\n        emit RoleRemoved(_owner, _role);\\n    }\\n\\n    function addComplianceSetter(address _owner) external onlyAdmin {\\n        _complianceSetter.add(_owner);\\n        string memory _role = \\\"ComplianceSetter\\\";\\n        emit RoleAdded(_owner, _role);\\n    }\\n\\n    function removeComplianceSetter(address _owner) external onlyAdmin {\\n        _complianceSetter.remove(_owner);\\n        string memory _role = \\\"ComplianceSetter\\\";\\n        emit RoleRemoved(_owner, _role);\\n    }\\n\\n    function addComplianceManager(address _owner) external onlyAdmin {\\n        _complianceManager.add(_owner);\\n        string memory _role = \\\"ComplianceManager\\\";\\n        emit RoleAdded(_owner, _role);\\n    }\\n\\n    function removeComplianceManager(address _owner) external onlyAdmin {\\n        _complianceManager.remove(_owner);\\n        string memory _role = \\\"ComplianceManager\\\";\\n        emit RoleRemoved(_owner, _role);\\n    }\\n\\n    function addClaimRegistryManager(address _owner) external onlyAdmin {\\n        _claimRegistryManager.add(_owner);\\n        string memory _role = \\\"ClaimRegistryManager\\\";\\n        emit RoleAdded(_owner, _role);\\n    }\\n\\n    function removeClaimRegistryManager(address _owner) external onlyAdmin {\\n        _claimRegistryManager.remove(_owner);\\n        string memory _role = \\\"ClaimRegistryManager\\\";\\n        emit RoleRemoved(_owner, _role);\\n    }\\n\\n    function addIssuersRegistryManager(address _owner) external onlyAdmin {\\n        _issuersRegistryManager.add(_owner);\\n        string memory _role = \\\"IssuersRegistryManager\\\";\\n        emit RoleAdded(_owner, _role);\\n    }\\n\\n    function removeIssuersRegistryManager(address _owner) external onlyAdmin {\\n        _issuersRegistryManager.remove(_owner);\\n        string memory _role = \\\"IssuersRegistryManager\\\";\\n        emit RoleRemoved(_owner, _role);\\n    }\\n\\n    function addTokenInfoManager(address _owner) external onlyAdmin {\\n        _tokenInfoManager.add(_owner);\\n        string memory _role = \\\"TokenInfoManager\\\";\\n        emit RoleAdded(_owner, _role);\\n    }\\n\\n    function removeTokenInfoManager(address _owner) external onlyAdmin {\\n        _tokenInfoManager.remove(_owner);\\n        string memory _role = \\\"TokenInfoManager\\\";\\n        emit RoleRemoved(_owner, _role);\\n    }\\n\\n    function isOwnerAdmin(address _owner) public view returns (bool) {\\n        return _ownerAdmin.has(_owner);\\n    }\\n\\n    function isTokenInfoManager(address _owner) public view returns (bool) {\\n        return _tokenInfoManager.has(_owner);\\n    }\\n\\n    function isIssuersRegistryManager(address _owner) public view returns (bool) {\\n        return _issuersRegistryManager.has(_owner);\\n    }\\n\\n    function isClaimRegistryManager(address _owner) public view returns (bool) {\\n        return _claimRegistryManager.has(_owner);\\n    }\\n\\n    function isComplianceManager(address _owner) public view returns (bool) {\\n        return _complianceManager.has(_owner);\\n    }\\n\\n    function isComplianceSetter(address _owner) public view returns (bool) {\\n        return _complianceSetter.has(_owner);\\n    }\\n\\n    function isRegistryAddressSetter(address _owner) public view returns (bool) {\\n        return _registryAddressSetter.has(_owner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/roles/Roles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n//\\n//                                             :+#####%%%%%%%%%%%%%%+\\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\\n//                                          +@@@@@. =@@@=  .+@@@@@*:\\n//                                          #@@@@#:%@@#. :*@@@@#-\\n//                                          @@@@@%@@@= :#@@@@+.\\n//                                         :@@@@@@@#.:#@@@%-\\n//                                         +@@@@@@-.*@@@*:\\n//                                         #@@@@#.=@@@+.\\n//                                         @@@@+-%@%=\\n//                                        :@@@#%@%=\\n//                                        +@@@@%-\\n//                                        :#%%=\\n//\\n\\n/**\\n *     NOTICE\\n *\\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\\n *     If you choose to receive it under the GPL v.3 license, the following applies:\\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\\n *\\n *     Copyright (C) 2023, Tokeny s\u00e0rl.\\n *\\n *     This program is free software: you can redistribute it and/or modify\\n *     it under the terms of the GNU General Public License as published by\\n *     the Free Software Foundation, either version 3 of the License, or\\n *     (at your option) any later version.\\n *\\n *     This program is distributed in the hope that it will be useful,\\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *     GNU General Public License for more details.\\n *\\n *     You should have received a copy of the GNU General Public License\\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n    struct Role {\\n        mapping(address => bool) bearer;\\n    }\\n\\n    /**\\n     * @dev Give an account access to this role.\\n     */\\n    function add(Role storage role, address account) internal {\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\n        role.bearer[account] = true;\\n    }\\n\\n    /**\\n     * @dev Remove an account's access to this role.\\n     */\\n    function remove(Role storage role, address account) internal {\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\n        role.bearer[account] = false;\\n    }\\n\\n    /**\\n     * @dev Check if an account has this role.\\n     * @return bool\\n     */\\n    function has(Role storage role, address account) internal view returns (bool) {\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\n        return role.bearer[account];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/token/IToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n//\\n//                                             :+#####%%%%%%%%%%%%%%+\\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\\n//                                          +@@@@@. =@@@=  .+@@@@@*:\\n//                                          #@@@@#:%@@#. :*@@@@#-\\n//                                          @@@@@%@@@= :#@@@@+.\\n//                                         :@@@@@@@#.:#@@@%-\\n//                                         +@@@@@@-.*@@@*:\\n//                                         #@@@@#.=@@@+.\\n//                                         @@@@+-%@%=\\n//                                        :@@@#%@%=\\n//                                        +@@@@%-\\n//                                        :#%%=\\n//\\n\\n/**\\n *     NOTICE\\n *\\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\\n *     If you choose to receive it under the GPL v.3 license, the following applies:\\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\\n *\\n *     Copyright (C) 2023, Tokeny s\u00e0rl.\\n *\\n *     This program is free software: you can redistribute it and/or modify\\n *     it under the terms of the GNU General Public License as published by\\n *     the Free Software Foundation, either version 3 of the License, or\\n *     (at your option) any later version.\\n *\\n *     This program is distributed in the hope that it will be useful,\\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n *     GNU General Public License for more details.\\n *\\n *     You should have received a copy of the GNU General Public License\\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../registry/interface/IIdentityRegistry.sol\\\";\\nimport \\\"../compliance/modular/IModularCompliance.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @dev interface\\ninterface IToken is IERC20 {\\n\\n    /// events\\n\\n    /**\\n     *  this event is emitted when the token information is updated.\\n     *  the event is emitted by the token init function and by the setTokenInformation function\\n     *  `_newName` is the name of the token\\n     *  `_newSymbol` is the symbol of the token\\n     *  `_newDecimals` is the decimals of the token\\n     *  `_newVersion` is the version of the token, current version is 3.0\\n     *  `_newOnchainID` is the address of the onchainID of the token\\n     */\\n    event UpdatedTokenInformation(string indexed _newName, string indexed _newSymbol, uint8 _newDecimals, string\\n    _newVersion, address indexed _newOnchainID);\\n\\n    /**\\n     *  this event is emitted when the IdentityRegistry has been set for the token\\n     *  the event is emitted by the token constructor and by the setIdentityRegistry function\\n     *  `_identityRegistry` is the address of the Identity Registry of the token\\n     */\\n    event IdentityRegistryAdded(address indexed _identityRegistry);\\n\\n    /**\\n     *  this event is emitted when the Compliance has been set for the token\\n     *  the event is emitted by the token constructor and by the setCompliance function\\n     *  `_compliance` is the address of the Compliance contract of the token\\n     */\\n    event ComplianceAdded(address indexed _compliance);\\n\\n    /**\\n     *  this event is emitted when an investor successfully recovers his tokens\\n     *  the event is emitted by the recoveryAddress function\\n     *  `_lostWallet` is the address of the wallet that the investor lost access to\\n     *  `_newWallet` is the address of the wallet that the investor provided for the recovery\\n     *  `_investorOnchainID` is the address of the onchainID of the investor who asked for a recovery\\n     */\\n    event RecoverySuccess(address indexed _lostWallet, address indexed _newWallet, address indexed _investorOnchainID);\\n\\n    /**\\n     *  this event is emitted when the wallet of an investor is frozen or unfrozen\\n     *  the event is emitted by setAddressFrozen and batchSetAddressFrozen functions\\n     *  `_userAddress` is the wallet of the investor that is concerned by the freezing status\\n     *  `_isFrozen` is the freezing status of the wallet\\n     *  if `_isFrozen` equals `true` the wallet is frozen after emission of the event\\n     *  if `_isFrozen` equals `false` the wallet is unfrozen after emission of the event\\n     *  `_owner` is the address of the agent who called the function to freeze the wallet\\n     */\\n    event AddressFrozen(address indexed _userAddress, bool indexed _isFrozen, address indexed _owner);\\n\\n    /**\\n     *  this event is emitted when a certain amount of tokens is frozen on a wallet\\n     *  the event is emitted by freezePartialTokens and batchFreezePartialTokens functions\\n     *  `_userAddress` is the wallet of the investor that is concerned by the freezing status\\n     *  `_amount` is the amount of tokens that are frozen\\n     */\\n    event TokensFrozen(address indexed _userAddress, uint256 _amount);\\n\\n    /**\\n     *  this event is emitted when a certain amount of tokens is unfrozen on a wallet\\n     *  the event is emitted by unfreezePartialTokens and batchUnfreezePartialTokens functions\\n     *  `_userAddress` is the wallet of the investor that is concerned by the freezing status\\n     *  `_amount` is the amount of tokens that are unfrozen\\n     */\\n    event TokensUnfrozen(address indexed _userAddress, uint256 _amount);\\n\\n    /**\\n     *  this event is emitted when the token is paused\\n     *  the event is emitted by the pause function\\n     *  `_userAddress` is the address of the wallet that called the pause function\\n     */\\n    event Paused(address _userAddress);\\n\\n    /**\\n     *  this event is emitted when the token is unpaused\\n     *  the event is emitted by the unpause function\\n     *  `_userAddress` is the address of the wallet that called the unpause function\\n     */\\n    event Unpaused(address _userAddress);\\n\\n    /// functions\\n\\n    /**\\n     *  @dev sets the token name\\n     *  @param _name the name of token to set\\n     *  Only the owner of the token smart contract can call this function\\n     *  emits a `UpdatedTokenInformation` event\\n     */\\n    function setName(string calldata _name) external;\\n\\n    /**\\n     *  @dev sets the token symbol\\n     *  @param _symbol the token symbol to set\\n     *  Only the owner of the token smart contract can call this function\\n     *  emits a `UpdatedTokenInformation` event\\n     */\\n    function setSymbol(string calldata _symbol) external;\\n\\n    /**\\n     *  @dev sets the onchain ID of the token\\n     *  @param _onchainID the address of the onchain ID to set\\n     *  Only the owner of the token smart contract can call this function\\n     *  emits a `UpdatedTokenInformation` event\\n     */\\n    function setOnchainID(address _onchainID) external;\\n\\n    /**\\n     *  @dev pauses the token contract, when contract is paused investors cannot transfer tokens anymore\\n     *  This function can only be called by a wallet set as agent of the token\\n     *  emits a `Paused` event\\n     */\\n    function pause() external;\\n\\n    /**\\n     *  @dev unpauses the token contract, when contract is unpaused investors can transfer tokens\\n     *  if their wallet is not blocked & if the amount to transfer is <= to the amount of free tokens\\n     *  This function can only be called by a wallet set as agent of the token\\n     *  emits an `Unpaused` event\\n     */\\n    function unpause() external;\\n\\n    /**\\n     *  @dev sets an address frozen status for this token.\\n     *  @param _userAddress The address for which to update frozen status\\n     *  @param _freeze Frozen status of the address\\n     *  This function can only be called by a wallet set as agent of the token\\n     *  emits an `AddressFrozen` event\\n     */\\n    function setAddressFrozen(address _userAddress, bool _freeze) external;\\n\\n    /**\\n     *  @dev freezes token amount specified for given address.\\n     *  @param _userAddress The address for which to update frozen tokens\\n     *  @param _amount Amount of Tokens to be frozen\\n     *  This function can only be called by a wallet set as agent of the token\\n     *  emits a `TokensFrozen` event\\n     */\\n    function freezePartialTokens(address _userAddress, uint256 _amount) external;\\n\\n    /**\\n     *  @dev unfreezes token amount specified for given address\\n     *  @param _userAddress The address for which to update frozen tokens\\n     *  @param _amount Amount of Tokens to be unfrozen\\n     *  This function can only be called by a wallet set as agent of the token\\n     *  emits a `TokensUnfrozen` event\\n     */\\n    function unfreezePartialTokens(address _userAddress, uint256 _amount) external;\\n\\n    /**\\n     *  @dev sets the Identity Registry for the token\\n     *  @param _identityRegistry the address of the Identity Registry to set\\n     *  Only the owner of the token smart contract can call this function\\n     *  emits an `IdentityRegistryAdded` event\\n     */\\n    function setIdentityRegistry(address _identityRegistry) external;\\n\\n    /**\\n     *  @dev sets the compliance contract of the token\\n     *  @param _compliance the address of the compliance contract to set\\n     *  Only the owner of the token smart contract can call this function\\n     *  calls bindToken on the compliance contract\\n     *  emits a `ComplianceAdded` event\\n     */\\n    function setCompliance(address _compliance) external;\\n\\n    /**\\n     *  @dev force a transfer of tokens between 2 whitelisted wallets\\n     *  In case the `from` address has not enough free tokens (unfrozen tokens)\\n     *  but has a total balance higher or equal to the `amount`\\n     *  the amount of frozen tokens is reduced in order to have enough free tokens\\n     *  to proceed the transfer, in such a case, the remaining balance on the `from`\\n     *  account is 100% composed of frozen tokens post-transfer.\\n     *  Require that the `to` address is a verified address,\\n     *  @param _from The address of the sender\\n     *  @param _to The address of the receiver\\n     *  @param _amount The number of tokens to transfer\\n     *  @return `true` if successful and revert if unsuccessful\\n     *  This function can only be called by a wallet set as agent of the token\\n     *  emits a `TokensUnfrozen` event if `_amount` is higher than the free balance of `_from`\\n     *  emits a `Transfer` event\\n     */\\n    function forcedTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external returns (bool);\\n\\n    /**\\n     *  @dev mint tokens on a wallet\\n     *  Improved version of default mint method. Tokens can be minted\\n     *  to an address if only it is a verified address as per the security token.\\n     *  @param _to Address to mint the tokens to.\\n     *  @param _amount Amount of tokens to mint.\\n     *  This function can only be called by a wallet set as agent of the token\\n     *  emits a `Transfer` event\\n     */\\n    function mint(address _to, uint256 _amount) external;\\n\\n    /**\\n     *  @dev burn tokens on a wallet\\n     *  In case the `account` address has not enough free tokens (unfrozen tokens)\\n     *  but has a total balance higher or equal to the `value` amount\\n     *  the amount of frozen tokens is reduced in order to have enough free tokens\\n     *  to proceed the burn, in such a case, the remaining balance on the `account`\\n     *  is 100% composed of frozen tokens post-transaction.\\n     *  @param _userAddress Address to burn the tokens from.\\n     *  @param _amount Amount of tokens to burn.\\n     *  This function can only be called by a wallet set as agent of the token\\n     *  emits a `TokensUnfrozen` event if `_amount` is higher than the free balance of `_userAddress`\\n     *  emits a `Transfer` event\\n     */\\n    function burn(address _userAddress, uint256 _amount) external;\\n\\n    /**\\n     *  @dev recovery function used to force transfer tokens from a\\n     *  lost wallet to a new wallet for an investor.\\n     *  @param _lostWallet the wallet that the investor lost\\n     *  @param _newWallet the newly provided wallet on which tokens have to be transferred\\n     *  @param _investorOnchainID the onchainID of the investor asking for a recovery\\n     *  This function can only be called by a wallet set as agent of the token\\n     *  emits a `TokensUnfrozen` event if there is some frozen tokens on the lost wallet if the recovery process is successful\\n     *  emits a `Transfer` event if the recovery process is successful\\n     *  emits a `RecoverySuccess` event if the recovery process is successful\\n     *  emits a `RecoveryFails` event if the recovery process fails\\n     */\\n    function recoveryAddress(\\n        address _lostWallet,\\n        address _newWallet,\\n        address _investorOnchainID\\n    ) external returns (bool);\\n\\n    /**\\n     *  @dev function allowing to issue transfers in batch\\n     *  Require that the msg.sender and `to` addresses are not frozen.\\n     *  Require that the total value should not exceed available balance.\\n     *  Require that the `to` addresses are all verified addresses,\\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_toList.length` IS TOO HIGH,\\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\\n     *  @param _toList The addresses of the receivers\\n     *  @param _amounts The number of tokens to transfer to the corresponding receiver\\n     *  emits _toList.length `Transfer` events\\n     */\\n    function batchTransfer(address[] calldata _toList, uint256[] calldata _amounts) external;\\n\\n    /**\\n     *  @dev function allowing to issue forced transfers in batch\\n     *  Require that `_amounts[i]` should not exceed available balance of `_fromList[i]`.\\n     *  Require that the `_toList` addresses are all verified addresses\\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_fromList.length` IS TOO HIGH,\\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\\n     *  @param _fromList The addresses of the senders\\n     *  @param _toList The addresses of the receivers\\n     *  @param _amounts The number of tokens to transfer to the corresponding receiver\\n     *  This function can only be called by a wallet set as agent of the token\\n     *  emits `TokensUnfrozen` events if `_amounts[i]` is higher than the free balance of `_fromList[i]`\\n     *  emits _fromList.length `Transfer` events\\n     */\\n    function batchForcedTransfer(\\n        address[] calldata _fromList,\\n        address[] calldata _toList,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    /**\\n     *  @dev function allowing to mint tokens in batch\\n     *  Require that the `_toList` addresses are all verified addresses\\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_toList.length` IS TOO HIGH,\\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\\n     *  @param _toList The addresses of the receivers\\n     *  @param _amounts The number of tokens to mint to the corresponding receiver\\n     *  This function can only be called by a wallet set as agent of the token\\n     *  emits _toList.length `Transfer` events\\n     */\\n    function batchMint(address[] calldata _toList, uint256[] calldata _amounts) external;\\n\\n    /**\\n     *  @dev function allowing to burn tokens in batch\\n     *  Require that the `_userAddresses` addresses are all verified addresses\\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\\n     *  @param _userAddresses The addresses of the wallets concerned by the burn\\n     *  @param _amounts The number of tokens to burn from the corresponding wallets\\n     *  This function can only be called by a wallet set as agent of the token\\n     *  emits _userAddresses.length `Transfer` events\\n     */\\n    function batchBurn(address[] calldata _userAddresses, uint256[] calldata _amounts) external;\\n\\n    /**\\n     *  @dev function allowing to set frozen addresses in batch\\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\\n     *  @param _userAddresses The addresses for which to update frozen status\\n     *  @param _freeze Frozen status of the corresponding address\\n     *  This function can only be called by a wallet set as agent of the token\\n     *  emits _userAddresses.length `AddressFrozen` events\\n     */\\n    function batchSetAddressFrozen(address[] calldata _userAddresses, bool[] calldata _freeze) external;\\n\\n    /**\\n     *  @dev function allowing to freeze tokens partially in batch\\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\\n     *  @param _userAddresses The addresses on which tokens need to be frozen\\n     *  @param _amounts the amount of tokens to freeze on the corresponding address\\n     *  This function can only be called by a wallet set as agent of the token\\n     *  emits _userAddresses.length `TokensFrozen` events\\n     */\\n    function batchFreezePartialTokens(address[] calldata _userAddresses, uint256[] calldata _amounts) external;\\n\\n    /**\\n     *  @dev function allowing to unfreeze tokens partially in batch\\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\\n     *  @param _userAddresses The addresses on which tokens need to be unfrozen\\n     *  @param _amounts the amount of tokens to unfreeze on the corresponding address\\n     *  This function can only be called by a wallet set as agent of the token\\n     *  emits _userAddresses.length `TokensUnfrozen` events\\n     */\\n    function batchUnfreezePartialTokens(address[] calldata _userAddresses, uint256[] calldata _amounts) external;\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 1 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * balanceOf() and transfer().\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the address of the onchainID of the token.\\n     * the onchainID of the token gives all the information available\\n     * about the token and is managed by the token issuer or his agent.\\n     */\\n    function onchainID() external view returns (address);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the TREX version of the token.\\n     * current version is 3.0.0\\n     */\\n    function version() external view returns (string memory);\\n\\n    /**\\n     *  @dev Returns the Identity Registry linked to the token\\n     */\\n    function identityRegistry() external view returns (IIdentityRegistry);\\n\\n    /**\\n     *  @dev Returns the Compliance contract linked to the token\\n     */\\n    function compliance() external view returns (IModularCompliance);\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() external view returns (bool);\\n\\n    /**\\n     *  @dev Returns the freezing status of a wallet\\n     *  if isFrozen returns `true` the wallet is frozen\\n     *  if isFrozen returns `false` the wallet is not frozen\\n     *  isFrozen returning `true` doesn't mean that the balance is free, tokens could be blocked by\\n     *  a partial freeze or the whole token could be blocked by pause\\n     *  @param _userAddress the address of the wallet on which isFrozen is called\\n     */\\n    function isFrozen(address _userAddress) external view returns (bool);\\n\\n    /**\\n     *  @dev Returns the amount of tokens that are partially frozen on a wallet\\n     *  the amount of frozen tokens is always <= to the total balance of the wallet\\n     *  @param _userAddress the address of the wallet on which getFrozenTokens is called\\n     */\\n    function getFrozenTokens(address _userAddress) external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"ComplianceInteraction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addClaimRegistryManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addComplianceManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addComplianceSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addIssuersRegistryManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addOwnerAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addRegistryAddressSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addTokenInfoManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"callAddAgentOnIdentityRegistryContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"callAddAgentOnTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimTopic\",\"type\":\"uint256\"},{\"internalType\":\"contract IIdentity\",\"name\":\"_onchainID\",\"type\":\"address\"}],\"name\":\"callAddClaimTopic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IClaimIssuer\",\"name\":\"_trustedIssuer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_claimTopics\",\"type\":\"uint256[]\"},{\"internalType\":\"contract IIdentity\",\"name\":\"_onchainID\",\"type\":\"address\"}],\"name\":\"callAddTrustedIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"contract IIdentity\",\"name\":\"_onchainID\",\"type\":\"address\"}],\"name\":\"callComplianceFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"callRemoveAgentOnIdentityRegistryContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"callRemoveAgentOnTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimTopic\",\"type\":\"uint256\"},{\"internalType\":\"contract IIdentity\",\"name\":\"_onchainID\",\"type\":\"address\"}],\"name\":\"callRemoveClaimTopic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IClaimIssuer\",\"name\":\"_trustedIssuer\",\"type\":\"address\"},{\"internalType\":\"contract IIdentity\",\"name\":\"_onchainID\",\"type\":\"address\"}],\"name\":\"callRemoveTrustedIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimTopicsRegistry\",\"type\":\"address\"},{\"internalType\":\"contract IIdentity\",\"name\":\"_onchainID\",\"type\":\"address\"}],\"name\":\"callSetClaimTopicsRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_compliance\",\"type\":\"address\"},{\"internalType\":\"contract IIdentity\",\"name\":\"_onchainID\",\"type\":\"address\"}],\"name\":\"callSetCompliance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identityRegistry\",\"type\":\"address\"},{\"internalType\":\"contract IIdentity\",\"name\":\"_onchainID\",\"type\":\"address\"}],\"name\":\"callSetIdentityRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"contract IIdentity\",\"name\":\"_onchainID\",\"type\":\"address\"}],\"name\":\"callSetTokenName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOnchainID\",\"type\":\"address\"},{\"internalType\":\"contract IIdentity\",\"name\":\"_onchainID\",\"type\":\"address\"}],\"name\":\"callSetTokenOnchainID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"contract IIdentity\",\"name\":\"_onchainID\",\"type\":\"address\"}],\"name\":\"callSetTokenSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustedIssuersRegistry\",\"type\":\"address\"},{\"internalType\":\"contract IIdentity\",\"name\":\"_onchainID\",\"type\":\"address\"}],\"name\":\"callSetTrustedIssuersRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"callTransferOwnershipOnClaimTopicsRegistryContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"callTransferOwnershipOnComplianceContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"callTransferOwnershipOnIdentityRegistryContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"callTransferOwnershipOnIssuersRegistryContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"callTransferOwnershipOnTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IClaimIssuer\",\"name\":\"_trustedIssuer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_claimTopics\",\"type\":\"uint256[]\"},{\"internalType\":\"contract IIdentity\",\"name\":\"_onchainID\",\"type\":\"address\"}],\"name\":\"callUpdateIssuerClaimTopics\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isClaimRegistryManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isComplianceManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isComplianceSetter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isIssuersRegistryManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isOwnerAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isRegistryAddressSetter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isTokenInfoManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeClaimRegistryManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeComplianceManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeComplianceSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeIssuersRegistryManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeOwnerAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeRegistryAddressSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeTokenInfoManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OwnerManager", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000205fa2db869370b54b5780f7334abdd94f0a6c5e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}