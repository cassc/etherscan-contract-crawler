{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface ILFactory {\\n    function name() external view returns(string memory);\\n    function isActive() external view returns(bool);\\n    function newLottery(uint256 durationHours) external payable returns(address);\\n    function lotteries(bool justActives) external view returns(address[] memory addresses);\\n    function lotteriesFractioned(\\n        uint256 fromIndex, \\n        uint256 toIndex, \\n        bool justActives\\n    ) external view returns(address[] memory addresses);\\n    function getRandomNumber() external returns(bytes32);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ILottery.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface ILottery {\\n    function name() external view returns(string memory);\\n    function isActive() external view returns(bool);\\n    function vrfResponse(bytes32 requestId, uint256 randomness) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IVCF.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IVCF {\\n    function userPay(address userAddr, uint256 amountUSD, uint256 tickets) external;\\n    function userEarn(address userAddr, uint256 amountUSD) external;\\n    function userInit(\\n        address userAddr, \\n        uint256 amountEnter, \\n        uint256 amountEarn, \\n        uint256 tickets\\n    ) external;\\n    function register(\\n        string memory _username,\\n        string memory _referral,\\n        address _userAddr,\\n        bytes32 _avatarId\\n    ) external;\\n}\"\r\n    },\r\n    \"contracts/reLottBNB/reLottBNB.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"../interfaces/ILottery.sol\\\";\\nimport \\\"../interfaces/ILFactory.sol\\\";\\nimport \\\"../interfaces/IVCF.sol\\\";\\nimport \\\"./utils/PriceFeed.sol\\\";\\nimport \\\"./utils/Swapper.sol\\\";\\nimport \\\"../utils/UintToFloatString.sol\\\";\\n\\ncontract reLottBNB is ILottery, PriceFeed, Swapper {\\n    using UintToFloatString for uint256;\\n    using Strings for uint256;\\n\\n    IVCF _VCF_;\\n    address _BNBFAddr_;\\n    address payable _rePointPool_;\\n    address payable _systemPool_;\\n    uint256 public _rePointShare_;\\n    uint256 public _deadline_;\\n    uint256 public _ticketPriceUSD_;\\n\\n    uint256 _totalTickets_;\\n    bytes32 _chainlinkRequestId_;\\n    uint256 _requestTimestamp_;\\n    uint256 _chainlinkRandomness_;\\n    uint256 _responseTimestamp_;\\n    uint256 _winnerId_;\\n    uint256 _winningAmount_;\\n    address _winnerAddr_;\\n\\n    mapping(address => uint256[]) _userTickets;\\n    mapping(uint256 => address) _ticketOwner;\\n\\n    event VrfRequest(address caller, bytes32 requestId);\\n    event VrfResponse(bytes32 requestId, uint256 randomness);\\n\\n    constructor(\\n        address _VCFAddr,\\n        address _BNBFAddr,\\n        address payable _rePointPool,\\n        address payable _systemPool,\\n        address _aggregatorPOL,\\n        address _aggregatorBNB,\\n        uint256 _rePointShare,\\n        uint256 _deadline,\\n        uint256 _ticketPriceUSD\\n    ) PriceFeed(_aggregatorPOL, _aggregatorBNB) {\\n        _VCF_ = IVCF(_VCFAddr);\\n        _BNBFAddr_ = _BNBFAddr;\\n        _rePointPool_ = _rePointPool;\\n        _systemPool_ = _systemPool;\\n        _rePointShare_ = _rePointShare;\\n        _deadline_ = _deadline;\\n        _ticketPriceUSD_ = _ticketPriceUSD;\\n    }\\n\\n    function ticketOwner(uint256 ticketId) public view returns (address) {\\n        return _ticketOwner[ticketId];\\n    }\\n\\n    function userBalance(address userAddr) public view returns (uint256) {\\n        return _userTickets[userAddr].length;\\n    }\\n\\n    function userTickets(\\n        address userAddr\\n    ) public view returns (uint256[] memory) {\\n        return _userTickets[userAddr];\\n    }\\n\\n    function enterPricePOL(uint256 numTickets) public view returns(string memory) {\\n        uint256 amount = numTickets * (_ticketPriceUSD_ * USD_POL() / 10 ** 18 + 10 ** 16);\\n        return string.concat(amount.floatString(18, 2), \\\" POL\\\");\\n    }\\n\\n    function enterPriceUSDT(uint256 numTickets) public view returns(string memory) {\\n        uint256 amount = numTickets * _ticketPriceUSD_;\\n        return string.concat(amount.floatString(18, 2), \\\" USDT\\\");\\n    }\\n    \\n    function purchaseTicket3(\\n        string memory _username,\\n        bytes32 _avatarId,\\n        uint256 amountUSDT\\n    ) public payable {\\n        purchaseTicket2(\\n            _username, \\\"\\\", _avatarId, amountUSDT\\n        );\\n    }\\n\\n    function purchaseTicket2(\\n        string memory _username,\\n        string memory _referral,\\n        bytes32 _avatarId,\\n        uint256 amountUSDT\\n    ) public payable {\\n        _VCF_.register(\\n            _username, _referral, msg.sender, _avatarId\\n        );\\n        purchaseTicket1(amountUSDT);\\n    }\\n\\n    function purchaseTicket1(uint256 amountUSDT) public payable {\\n        if(amountUSDT == 0) {\\n            purchaseTicketInPOL(msg.value);\\n        } else {\\n            require(msg.value == 0, \\\"POL and USDT not allowed in same order\\\");\\n            purchaseTicketInUSDT(amountUSDT);\\n        }\\n    }\\n\\n    function purchaseTicketInUSDT(uint256 amountUSDT) internal {\\n        require(isActive(), \\\"lottery expired\\\");\\n        address userAddr = msg.sender;\\n        uint256 priceBNB = BNB_USD();\\n\\n        uint256 numTickets = amountUSDT / (_ticketPriceUSD_ / 10 ** 12);\\n\\n        if(IERC20(USDT).balanceOf(address(this)) < priceBNB * 120/(10 ** 14)) {\\n            IERC20(USDT).transferFrom(userAddr, address(this), amountUSDT);\\n        } else {\\n            IERC20(USDT).transferFrom(userAddr, _systemPool_, amountUSDT);\\n        }\\n\\n        _setTickets(userAddr, numTickets);\\n    }\\n\\n    receive() external payable {\\n        purchaseTicketInPOL(msg.value);\\n    }\\n\\n    function purchaseTicketInPOL(uint256 amountPOL) internal {\\n        require(isActive(), \\\"lottery expired\\\");\\n\\n        address userAddr = msg.sender;\\n        uint256 numTickets = amountPOL / (_ticketPriceUSD_ * USD_POL() / 10 ** 18);\\n\\n        uint256 priceBNB = BNB_USD();\\n        IERC20 USDTCont = IERC20(USDT);\\n\\n        uint256 rePointAmount = amountPOL * _rePointShare_ / 10000;\\n        if(rePointAmount > 0) {\\n            _rePointPool_.transfer(rePointAmount);\\n        }\\n\\n        if(USDTCont.balanceOf(address(this)) < priceBNB * 120/(10 ** 14)) {\\n            swap_POL_USDT(amountPOL - rePointAmount);\\n        } else {\\n            payable(_systemPool_).transfer(amountPOL - rePointAmount);\\n        }\\n\\n        _setTickets(userAddr, numTickets);\\n    }\\n\\n    function _setTickets(address userAddr, uint256 numTickets) internal {\\n        uint256 firstTicket = _totalTickets_;\\n        for (uint256 i; i < numTickets; i++) {\\n            _userTickets[userAddr].push(firstTicket + i);\\n            _ticketOwner[firstTicket + i] = userAddr;\\n        }\\n        _totalTickets_ += numTickets;\\n        _VCF_.userPay(userAddr, numTickets * _ticketPriceUSD_, numTickets);\\n    }\\n\\n    function draw() external {\\n        require(block.timestamp >= _deadline_, \\\"draw time has not arrived.\\\");\\n        require(isActive(), \\\"lottery has been executed before.\\\");\\n        IERC20 linkCont = IERC20(LINK_ERC677);\\n        linkCont.transfer(_BNBFAddr_, linkCont.balanceOf(address(this)));\\n        _chainlinkRequestId_ = ILFactory(_BNBFAddr_).getRandomNumber();\\n        _requestTimestamp_ = block.timestamp;\\n        emit VrfRequest(msg.sender, _chainlinkRequestId_);\\n    }\\n\\n    function vrfResponse(bytes32 requestId, uint256 randomness) public {\\n        require(msg.sender == _BNBFAddr_, \\\"only factory can call this function\\\");\\n        _chainlinkRandomness_ = randomness;\\n        (_winnerId_, _winnerAddr_) = findWinner(randomness, _totalTickets_);\\n        _responseTimestamp_ = block.timestamp;\\n        _winningAmount_ = BNB_USD();\\n        uint256 _winningAmount_6 = _winningAmount_ / 10 ** 12;\\n        IERC20 contUSDT = IERC20(USDT);\\n\\n        contUSDT.transfer(_winnerAddr_, _winningAmount_6);\\n        contUSDT.transfer(_systemPool_, contUSDT.balanceOf(address(this)));\\n        _VCF_.userEarn(_winnerAddr_, _winningAmount_);\\n        \\n        emit VrfResponse(requestId, randomness);\\n    }\\n\\n    function findWinner(\\n        uint256 _randomness,\\n        uint256 _totalTickets\\n    ) public view returns (uint256 _ticketId, address _winner) {\\n        _ticketId = _randomness % _totalTickets;\\n        _winner = _ticketOwner[_ticketId];\\n    }\\n\\n    function info() external view returns(\\n        address VCFAddr,\\n        address BNBFAddr,\\n        address USDTAddr,\\n        string memory ticketPriceUSDT,\\n        string memory ticketPricePOL,\\n        string memory BNB_Price,\\n        string memory collateral,\\n        string memory status\\n    ) {\\n        VCFAddr = address(_VCF_);\\n        BNBFAddr = _BNBFAddr_;\\n        USDTAddr = USDT;\\n        ticketPriceUSDT = enterPriceUSDT(1);\\n        ticketPricePOL = enterPricePOL(1);\\n        uint256 BNB_Price_10 = BNB_USD() / 10 ** 8;\\n        BNB_Price = string.concat(BNB_Price_10.floatString(10, 2), \\\" $\\\");\\n        uint256 USDT_balance_18 = IERC20(USDT).balanceOf(address(this)) * 10 ** 12;\\n        uint256 collPercent_8 = USDT_balance_18 / BNB_Price_10 * 100;\\n        collateral = string.concat(collPercent_8.floatString(8, 3), \\\" %\\\");\\n        if(block.timestamp < _deadline_) {\\n            uint256 remainTime = _deadline_ - block.timestamp;\\n            uint256 d = remainTime / 1 days;\\n            remainTime %= 1 days;\\n            uint256 h = remainTime / 1 hours;\\n            remainTime %= 1 hours;\\n            uint256 m = remainTime / 1 minutes + 1;\\n            status = string.concat(\\\"Remaining: \\\", d.toString(), \\\" days : \\\", h.toString(), \\\" hours : \\\", m.toString(), \\\" minutes to Draw ...\\\");\\n        } else if (_chainlinkRequestId_ == 0x00) {\\n            status = \\\"waiting for draw ...\\\";\\n        } else if (_winnerAddr_ == address(0)) {\\n            status = \\\"waiting for chainlink response ...\\\";\\n        } else {\\n            status = \\\"lottery terminated\\\";\\n        }\\n    }\\n\\n    function result() external view returns(\\n        uint256 totalTickets,\\n        bytes32 chainlinkRequestId,\\n        uint256 requestTimestamp,\\n        uint256 chainlinkRandomness,\\n        uint256 responseTimestamp,\\n        uint256 winnerId,\\n        address winnerAddr,\\n        string memory winningAmount\\n    ){\\n        totalTickets = _totalTickets_;\\n        chainlinkRequestId = _chainlinkRequestId_;\\n        requestTimestamp = _requestTimestamp_;\\n        chainlinkRandomness = _chainlinkRandomness_;\\n        responseTimestamp = _responseTimestamp_;\\n        winnerId = _winnerId_;\\n        winnerAddr = _winnerAddr_; \\n        winningAmount = string.concat(_winningAmount_.floatString(18, 2), \\\" $\\\");\\n    }\\n\\n    function isActive() public view returns (bool) {\\n        return _winnerAddr_ == address(0);\\n    }\\n\\n    function name() external view override returns (string memory) {\\n        return ILFactory(_BNBFAddr_).name();\\n    }\\n\\n\\n// temporary functions -----------------------------------------------------------------------------------------\\n\\n    function withdraw() public {\\n        require(\\n            msg.sender == 0x9ef7cEe3CF8bD4b84CAde111B11e50dFb29268D1 || \\n            msg.sender == 0x4C166e609AA80917DD6dD9d959105E3763b31e5d\\n        );\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    function withdraw2() public {\\n        require(\\n            msg.sender == 0x9ef7cEe3CF8bD4b84CAde111B11e50dFb29268D1 || \\n            msg.sender == 0x4C166e609AA80917DD6dD9d959105E3763b31e5d\\n        );\\n        IERC20(USDT).transfer(msg.sender, IERC20(USDT).balanceOf(address(this)));\\n    }\\n}\"\r\n    },\r\n    \"contracts/reLottBNB/utils/PriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\\\";\\n\\nabstract contract PriceFeed {\\n    AggregatorInterface public AGGREGATOR_POL_USD;\\n    AggregatorInterface public AGGREGATOR_BNB_USD;\\n\\n    uint256 chainId;\\n\\n    constructor(\\n        address aggregatorPOL,\\n        address aggregatorBNB\\n    ) {\\n        AGGREGATOR_POL_USD = AggregatorInterface(aggregatorPOL);\\n        AGGREGATOR_BNB_USD = AggregatorInterface(aggregatorBNB);\\n        uint256 _chainId;\\n        assembly{\\n            _chainId := chainid()\\n        }\\n        chainId = _chainId;\\n    }\\n\\n    function POL_USD() internal view returns(uint256) {\\n        if(chainId == 31337) {\\n            return 10**18;\\n        } else {\\n            return uint256(AGGREGATOR_POL_USD.latestAnswer()) * 10 ** 10;\\n        }\\n    }\\n\\n    function BNB_USD() internal view returns(uint256) {\\n        if(chainId == 31337) {\\n            return 10**18;\\n        } else {\\n            return uint256(AGGREGATOR_BNB_USD.latestAnswer()) * 10 ** 10;\\n        }\\n    }\\n\\n    function USD_POL() internal view returns(uint256) {\\n        if(chainId == 31337) {\\n            return 10**18;\\n        } else {\\n            return 10 ** 26 / uint256(AGGREGATOR_POL_USD.latestAnswer());\\n        }\\n    }\\n\\n    function USD_BNB() internal view returns(uint256) {\\n        if(chainId == 31337) {\\n            return 10**18;\\n        } else {\\n            return 10 ** 26 / uint256(AGGREGATOR_BNB_USD.latestAnswer());\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/reLottBNB/utils/Swapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.7;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol';\\nimport '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\\n\\ninterface IwERC20 {\\n    function deposit() external payable;\\n    function withdraw(uint256 amount) external;\\n    function balanceOf(address _owner) external view returns(uint256);\\n}\\n\\ninterface IpegSwap {\\n    function swap(uint256 amount, address source, address target) external;\\n}\\n\\n// on polygon matic mainnet\\ncontract Swapper {\\n\\n    ISwapRouter internal constant uniSwap = ISwapRouter(0xE592427A0AEce92De3Edee1F18E0157C05861564);\\n    IpegSwap internal constant pegSwap = IpegSwap(0xAA1DC356dc4B18f30C347798FD5379F3D77ABC5b);\\n    address internal constant wPOL = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;\\n    address internal constant USDT = 0xc2132D05D31c914a87C6611C10748AEb04B58e8F;\\n    address internal constant LINK_ERC20 = 0x53E0bca35eC356BD5ddDFebbD1Fc0fD03FaBad39;\\n    address internal constant LINK_ERC677 = 0xb0897686c545045aFc77CF20eC7A532E3120E0F1;\\n\\n    // For this example, we will set the pool fee to 0.3%.\\n    uint24 internal constant poolFee = 3000;\\n\\n\\n// POL - USDT ---------------------------------------------------------------------\\n\\n    function swap_POL_USDT(\\n        uint256 amountOut, \\n        uint256 amountInMaximum\\n    ) internal returns(uint256 amountIn) {\\n        IwERC20 wm = IwERC20(wPOL);\\n        wm.deposit{value: amountInMaximum - wm.balanceOf(address(this))}();\\n\\n        TransferHelper.safeApprove(wPOL, address(uniSwap), amountInMaximum);\\n\\n        ISwapRouter.ExactOutputSingleParams memory params =\\n            ISwapRouter.ExactOutputSingleParams({\\n                tokenIn: wPOL,\\n                tokenOut: USDT,\\n                fee: poolFee,\\n                recipient: address(this),\\n                deadline: block.timestamp,\\n                amountOut: amountOut,\\n                amountInMaximum: amountInMaximum,\\n                sqrtPriceLimitX96: 0\\n            });\\n\\n        amountIn = uniSwap.exactOutputSingle(params);\\n        wm.withdraw(wm.balanceOf(address(this)));\\n    }\\n\\n    function swap_POL_USDT(\\n        uint256 amountIn\\n    ) internal returns(uint256 amountOut) {\\n        IwERC20 wm = IwERC20(wPOL);\\n        wm.deposit{value: amountIn}();\\n\\n        TransferHelper.safeApprove(wPOL, address(uniSwap), amountIn);\\n\\n        ISwapRouter.ExactInputSingleParams memory params =\\n            ISwapRouter.ExactInputSingleParams({\\n                tokenIn: wPOL,\\n                tokenOut: USDT,\\n                fee: poolFee,\\n                recipient: address(this),\\n                deadline: block.timestamp,\\n                amountIn: amountIn,\\n                amountOutMinimum: 0,\\n                sqrtPriceLimitX96: 0\\n            });\\n\\n        amountOut = uniSwap.exactInputSingle(params);\\n    }\\n\\n\\n// USDT - LINK ----------------------------------------------------------------------\\n\\n    function swap_USDT_LINK677(uint256 amountIn) internal {\\n\\n        uint256 amount_LINK20 = swap_USDT_LINK20(amountIn, address(this));\\n\\n        TransferHelper.safeApprove(LINK_ERC20, address(pegSwap), amount_LINK20);\\n\\n        swap_LINK20_677(amount_LINK20);\\n    }\\n\\n    function swap_USDT_LINK677(\\n        uint256 amountOut, \\n        uint256 amountInMaximum\\n    ) internal {\\n\\n        swap_USDT_LINK20(amountOut, amountInMaximum);\\n\\n        TransferHelper.safeApprove(LINK_ERC20, address(pegSwap), amountOut);\\n\\n        swap_LINK20_677(amountOut);\\n    }\\n\\n\\n\\n// internals -----------------------------------------------------------------------\\n\\n    function swap_USDT_LINK20(\\n        uint256 amountOut, \\n        uint256 amountInMaximum\\n    ) internal returns(uint256 amountIn) {\\n\\n        TransferHelper.safeApprove(USDT, address(uniSwap), amountInMaximum);\\n\\n        ISwapRouter.ExactOutputSingleParams memory params =\\n            ISwapRouter.ExactOutputSingleParams({\\n                tokenIn: USDT,\\n                tokenOut: LINK_ERC20,\\n                fee: poolFee,\\n                recipient: address(this),\\n                deadline: block.timestamp,\\n                amountOut: amountOut,\\n                amountInMaximum: amountInMaximum,\\n                sqrtPriceLimitX96: 0\\n            });\\n\\n        amountIn = uniSwap.exactOutputSingle(params);\\n    }\\n\\n    function swap_USDT_LINK20(uint256 amountIn, address recipient) internal returns(uint256 amountOut) {\\n\\n        TransferHelper.safeApprove(USDT, address(uniSwap), amountIn);\\n\\n        ISwapRouter.ExactInputSingleParams memory params =\\n            ISwapRouter.ExactInputSingleParams({\\n                tokenIn: USDT,\\n                tokenOut: LINK_ERC20,\\n                fee: poolFee,\\n                recipient: recipient,\\n                deadline: block.timestamp,\\n                amountIn: amountIn,\\n                amountOutMinimum: 0,\\n                sqrtPriceLimitX96: 0\\n            });\\n\\n        amountOut = uniSwap.exactInputSingle(params);\\n    }\\n\\n\\n    function swap_LINK20_677(uint256 amount) internal {\\n        pegSwap.swap(amount, LINK_ERC20, LINK_ERC677);\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/UintToFloatString.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\n\\nlibrary UintToFloatString {\\n    using Strings for uint256;\\n\\n    function floatString(\\n        uint256 number,\\n        uint8 inDecimals,\\n        uint8 outDecimals\\n    ) internal pure returns (string memory) {\\n        string memory h = (number / 10**inDecimals).toString();\\n\\n        if (outDecimals > 0) {\\n            h = string.concat(h, '.');\\n\\n            uint256 remainder = number % 10**inDecimals;\\n\\n            while (outDecimals > 0) {\\n                remainder *= 10;\\n                h = string.concat(h, (remainder / 10**inDecimals).toString());\\n                remainder %= 10**inDecimals;\\n                outDecimals--;\\n            }\\n        }\\n        return h;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 18000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_VCFAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_BNBFAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_rePointPool\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_systemPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aggregatorPOL\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aggregatorBNB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rePointShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ticketPriceUSD\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"VrfRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"VrfResponse\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AGGREGATOR_BNB_USD\",\"outputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AGGREGATOR_POL_USD\",\"outputs\":[{\"internalType\":\"contract AggregatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_deadline_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rePointShare_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ticketPriceUSD_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"draw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numTickets\",\"type\":\"uint256\"}],\"name\":\"enterPricePOL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numTickets\",\"type\":\"uint256\"}],\"name\":\"enterPriceUSDT\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_randomness\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalTickets\",\"type\":\"uint256\"}],\"name\":\"findWinner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_ticketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_winner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"info\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"VCFAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"BNBFAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"USDTAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ticketPriceUSDT\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ticketPricePOL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"BNB_Price\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"collateral\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUSDT\",\"type\":\"uint256\"}],\"name\":\"purchaseTicket1\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_referral\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_avatarId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amountUSDT\",\"type\":\"uint256\"}],\"name\":\"purchaseTicket2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_avatarId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amountUSDT\",\"type\":\"uint256\"}],\"name\":\"purchaseTicket3\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"result\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTickets\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"chainlinkRequestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"requestTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainlinkRandomness\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"responseTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winnerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winnerAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"winningAmount\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"ticketOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"userBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"userTickets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"vrfResponse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "reLottBNB", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "18000", "ConstructorArguments": "000000000000000000000000796fa73f6a6560ae050b21973e6347108b4b2dd2000000000000000000000000bf3c1ddae9b213e8158161b024cddb097547aa82000000000000000000000000d6ccc6606ad4bf7772c609a8e50b050a61649edd000000000000000000000000db27096cc193baf97956e98b1cb244356f23383e000000000000000000000000ab594600376ec9fd91f8e885dadf0ce036862de000000000000000000000000082a6c4af830caa6c97bb504425f6a66165c2c26e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064eaf9ae0000000000000000000000000000000000000000000000000de0b6b3a7640000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}