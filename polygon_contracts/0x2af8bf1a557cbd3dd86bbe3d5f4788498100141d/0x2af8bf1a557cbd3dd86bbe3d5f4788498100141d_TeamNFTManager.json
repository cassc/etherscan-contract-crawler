{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\\n    function __ERC1155Holder_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Holder_init_unchained() internal onlyInitializing {\\n    }\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\n    function __ERC1155Receiver_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Receiver_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IFactory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IRouter {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ITeamNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport \\\"../types/Structs.sol\\\";\\n\\ninterface ITeamNFT is IERC1155Upgradeable {\\n    function mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n\\n    function mintBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external;\\n\\n    function teamNftManager() external view returns (address);\\n\\n    function setTeamNftRenderer(address) external;\\n\\n    function allOwnersWithBalances(\\n        uint256 tokenId\\n    ) external view returns (OwnersBalances[] memory);\\n\\n    function balanceOf(\\n        address account,\\n        uint256 id\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITeamNFTManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ITeamNFTManager {\\n    function sportsLength() external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function seriesForSportLength(\\n        uint256 _sport\\n    ) external view returns (uint256);\\n\\n    function sports(uint256) external view returns (string memory);\\n\\n    function teamNft() external view returns (address);\\n\\n    function marketplace() external view returns (address);\\n\\n    function nftData(\\n        uint256 tokenId\\n    )\\n        external\\n        view\\n        returns (\\n            string memory sport,\\n            string memory seriesName,\\n            string memory cityName,\\n            string memory teamName,\\n            string memory color1,\\n            string memory color2\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITTMarketplace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nstruct SellList {\\n    address seller;\\n    address token;\\n    uint256 tokenId;\\n    uint256 amountOfToken;\\n    uint256 amountofTokenSold;\\n    uint256 startTime;\\n    uint256 deadline;\\n    uint256 price;\\n    bool isSold;\\n    bool protocolSell;\\n}\\n\\ninterface ITTMarketplace {\\n    function listBatchTeamNFT(\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _amountOfTokens,\\n        uint256[] memory _prices,\\n        uint256 _startTime,\\n        uint256 _deadline\\n    ) external returns (bool);\\n\\n    function sales(uint256 _sellId) external returns (SellList memory);\\n\\n    function listTeamNFT(\\n        uint256 _tokenId,\\n        uint256 _amountOfToken,\\n        uint256 _price,\\n        uint256 _startTime,\\n        uint256 _deadline\\n    ) external returns (bool);\\n\\n    function buyTeamNFT(\\n        uint256 _sellId,\\n        uint256 _quantity\\n    ) external returns (uint256);\\n\\n    function buyBatchTeamNFT(\\n        uint256[] memory _sellIds,\\n        uint256[] memory _quantitys,\\n        bool _allowPartial\\n    ) external returns (uint256);\\n\\n    function cancelList(uint256 _sellId) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITTRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface ITTRewards {\\n    function receiveRewards(uint256 amount, uint256 tokenId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\"\r\n    },\r\n    \"contracts/library/Babylonian.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary Babylonian {\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n        // else z = 0\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/TeamNFTManager.sol\": {\r\n      \"content\": \"//  $$$$$$$$\\\\ $$$$$$$$\\\\  $$$$$$\\\\  $$\\\\      $$\\\\       $$$$$$$$\\\\  $$$$$$\\\\  $$\\\\   $$\\\\ $$$$$$$$\\\\ $$\\\\   $$\\\\\\n//  \\\\__$$  __|$$  _____|$$  __$$\\\\ $$$\\\\    $$$ |      \\\\__$$  __|$$  __$$\\\\ $$ | $$  |$$  _____|$$$\\\\  $$ |\\n//     $$ |   $$ |      $$ /  $$ |$$$$\\\\  $$$$ |         $$ |   $$ /  $$ |$$ |$$  / $$ |      $$$$\\\\ $$ |\\n//     $$ |   $$$$$\\\\    $$$$$$$$ |$$\\\\$$\\\\$$ $$ |         $$ |   $$ |  $$ |$$$$$  /  $$$$$\\\\    $$ $$\\\\$$ |\\n//     $$ |   $$  __|   $$  __$$ |$$ \\\\$$$  $$ |         $$ |   $$ |  $$ |$$  $$<   $$  __|   $$ \\\\$$$$ |\\n//     $$ |   $$ |      $$ |  $$ |$$ |\\\\$  /$$ |         $$ |   $$ |  $$ |$$ |\\\\$$\\\\  $$ |      $$ |\\\\$$$ |\\n//     $$ |   $$$$$$$$\\\\ $$ |  $$ |$$ | \\\\_/ $$ |         $$ |    $$$$$$  |$$ | \\\\$$\\\\ $$$$$$$$\\\\ $$ | \\\\$$ |\\n//     \\\\__|   \\\\________|\\\\__|  \\\\__|\\\\__|     \\\\__|         \\\\__|    \\\\______/ \\\\__|  \\\\__|\\\\________|\\\\__|  \\\\__|\\n//\\n//   Web: teamtoken.com\\n//   Twitter: twitter.com/TeamTokenCrypto\\n//   Contact Email: admin@teamtoken.com\\n//\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport \\\"./types/Structs.sol\\\";\\nimport \\\"./interfaces/ITeamNFT.sol\\\";\\nimport \\\"./interfaces/ITTMarketplace.sol\\\";\\n\\nerror NotEnoughTokensForTransfer(uint256 id, uint256 amount);\\n\\ncontract TeamNFTManager is\\n    Initializable,\\n    ERC1155HolderUpgradeable,\\n    PausableUpgradeable,\\n    OwnableUpgradeable\\n{\\n    // A mapping of all sports/leagues. Every league qualifies for\\n    // an entry, some some sports will have multiple entries\\n    mapping(uint256 => string) public sports;\\n\\n    // Mapping Sport -> Series -> SeriesData\\n    mapping(uint256 => mapping(uint256 => SeriesData)) public series;\\n\\n    // TeamNFT address\\n    ITeamNFT public teamNft;\\n\\n    ITTMarketplace public marketplace;\\n\\n    // Total number of sports for tracking the mapping.\\n    uint256 private _numberOfSports;\\n    mapping(uint256 => uint256) private _numberOfSeriesInSport;\\n\\n    // Mapping storing data about individual tokens.\\n    // Mapping of tokenId -> NFTData\\n    mapping(uint256 => TeamNFTData) private _nftData;\\n\\n    // EVENTS\\n    event SportCreated(uint256 sportId, string sport);\\n    event SeriesCreated(\\n        uint256 sportId,\\n        uint256 seriesId,\\n        string seriesName,\\n        uint256 numberOfTeams,\\n        uint256 nftsPerTeam,\\n        uint256 firstTokenId\\n    );\\n\\n    function nftData(\\n        uint256 tokenId\\n    )\\n        external\\n        view\\n        returns (\\n            string memory sport,\\n            string memory seriesName,\\n            string memory cityName,\\n            string memory teamName,\\n            string memory color1,\\n            string memory color2\\n        )\\n    {\\n        TeamNFTData memory teamNftData = _nftData[tokenId];\\n        sport = sports[teamNftData.sport];\\n        cityName = bytesToString(teamNftData.cityName);\\n        teamName = bytesToString(teamNftData.teamName);\\n        seriesName = bytesToString(teamNftData.seriesName);\\n        color1 = bytesToString(teamNftData.color1);\\n        color2 = bytesToString(teamNftData.color2);\\n    }\\n\\n    function sportsLength() external view returns (uint256) {\\n        return _numberOfSports;\\n    }\\n\\n    function seriesForSportLength(\\n        uint256 _sport\\n    ) external view returns (uint256) {\\n        return _numberOfSeriesInSport[_sport];\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address _admin) public initializer {\\n        __Pausable_init();\\n        __Ownable_init();\\n        __ERC1155Holder_init();\\n        transferOwnership(_admin);\\n\\n        _numberOfSports = 0;\\n    }\\n\\n    function genTokenId(\\n        uint256 sportId,\\n        uint256 seriesId,\\n        uint256 teamId\\n    ) public pure returns (uint256) {\\n        return (sportId * 1e6) + (seriesId * 1e3) + teamId;\\n    }\\n\\n    // Functions to be able to receive ether at this contract\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n\\n    // Admin only\\n\\n    function createSport(string calldata _sport) external onlyOwner {\\n        uint256 newSportId = _numberOfSports + 1;\\n        sports[newSportId] = _sport;\\n        _numberOfSports++;\\n        _numberOfSeriesInSport[newSportId] = 0;\\n        emit SportCreated(newSportId, _sport);\\n    }\\n\\n    function createMarketplaceListing(\\n        uint64 _sport,\\n        uint64 _series,\\n        uint256[] calldata _prices,\\n        uint256 _starttime,\\n        uint256 _deadline\\n    ) external onlyOwner {\\n        require(_sport <= _numberOfSports, \\\"Invalid sport\\\");\\n        require(_series <= _numberOfSeriesInSport[_sport], \\\"Invalid series\\\");\\n\\n        SeriesData memory ourSeries = series[_sport][_series];\\n\\n        uint256[] memory tokenIds = new uint256[](ourSeries.numberOfTeams);\\n        uint256[] memory amountOfTokens = new uint256[](\\n            ourSeries.numberOfTeams\\n        );\\n        uint256[] memory prices = new uint256[](ourSeries.numberOfTeams);\\n\\n        for (uint256 i = 0; i < ourSeries.numberOfTeams; i++) {\\n            uint256 newTokenId = genTokenId(_sport, _series, i + 1);\\n            tokenIds[i] = newTokenId;\\n            amountOfTokens[i] = teamNft.balanceOf(address(this), newTokenId);\\n\\n            prices[i] = _prices[i];\\n        }\\n        marketplace.listBatchTeamNFT(\\n            tokenIds,\\n            amountOfTokens,\\n            prices,\\n            _starttime,\\n            _deadline\\n        );\\n    }\\n\\n    function createSeries(\\n        uint64 sport,\\n        string calldata seriesName,\\n        uint128 nftsPerTeam,\\n        string[] calldata cityNames,\\n        string[] calldata teamNames,\\n        string[] calldata color1s,\\n        string[] calldata color2s\\n    ) external onlyOwner returns (bool) {\\n        uint128 numberOfTeams = uint128(teamNames.length);\\n        require(\\n            teamNames.length == color1s.length &&\\n                teamNames.length == color2s.length\\n        );\\n        require(sport <= _numberOfSports, \\\"Invalid sport\\\");\\n\\n        SeriesData memory newSeries = SeriesData({\\n            seriesName: seriesName,\\n            numberOfTeams: numberOfTeams,\\n            nftsPerTeam: nftsPerTeam\\n        });\\n\\n        uint64 newSeriesId = uint64(_numberOfSeriesInSport[sport] + 1);\\n        series[sport][newSeriesId] = newSeries;\\n        _numberOfSeriesInSport[sport] = newSeriesId;\\n        _createSeriesNFTs(\\n            sport,\\n            newSeriesId,\\n            seriesName,\\n            numberOfTeams,\\n            nftsPerTeam,\\n            teamNames,\\n            cityNames,\\n            color1s,\\n            color2s\\n        );\\n        emit SeriesCreated(\\n            sport,\\n            newSeriesId,\\n            seriesName,\\n            numberOfTeams,\\n            nftsPerTeam,\\n            genTokenId(sport, newSeriesId, 1)\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @dev Testing function for transferring initial tokens\\n    function transferNFT(\\n        address to,\\n        uint256 _id,\\n        uint256 _amount\\n    ) public onlyOwner {\\n        _transferNFT(to, _id, _amount);\\n    }\\n\\n    function batchTransferNFT(\\n        address[] memory tos,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) public onlyOwner {\\n        uint len = tos.length;\\n        for (uint i = 0; i < len; i + 1) {\\n            _transferNFT(tos[0], ids[0], amounts[0]);\\n        }\\n    }\\n\\n    function updateTeamNft(address _teamNft) public onlyOwner {\\n        require(_teamNft != address(0));\\n        teamNft = ITeamNFT(_teamNft);\\n    }\\n\\n    function updateMarketplace(address _marketplace) public onlyOwner {\\n        require(_marketplace != address(0));\\n        marketplace = ITTMarketplace(_marketplace);\\n        teamNft.setApprovalForAll(_marketplace, true);\\n    }\\n\\n    /// @dev Set to 0 address to disable onChain metadata\\n    function updateTeamNftRenderer(address _teamNftRenderer) public onlyOwner {\\n        teamNft.setTeamNftRenderer(_teamNftRenderer);\\n    }\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    // function governanceRecoverNative(address payable _to) external onlyOwner {\\n    //     (bool sent, ) = _to.call{value: getBalance()}(\\\"\\\");\\n    //     require(sent, \\\"Failed to send native\\\");\\n    // }\\n\\n    // function governanceRecoverToken(\\n    //     IERC20Upgradeable _token,\\n    //     address _to\\n    // ) external onlyOwner {\\n    //     require(\\n    //         _token.transfer(_to, _token.balanceOf(address(this))),\\n    //         \\\"Token could not be transferred\\\"\\n    //     );\\n    // }\\n\\n    // Internal functions\\n\\n    function _createSeriesNFTs(\\n        uint64 sport,\\n        uint64 seriesId,\\n        string calldata seriesName,\\n        uint128 numberOfTeams,\\n        uint128 nftsPerTeam,\\n        string[] calldata teamNames,\\n        string[] calldata cityNames,\\n        string[] calldata color1s,\\n        string[] calldata color2s\\n    ) internal {\\n        uint256[] memory tokenIdData = new uint256[](numberOfTeams);\\n        uint256[] memory amountsData = new uint256[](numberOfTeams);\\n        for (uint256 i = 0; i < numberOfTeams; i++) {\\n            uint256 newTokenId = genTokenId(sport, seriesId, i + 1);\\n            tokenIdData[i] = newTokenId;\\n            amountsData[i] = nftsPerTeam;\\n            _nftData[newTokenId] = TeamNFTData({\\n                sport: sport,\\n                series: seriesId,\\n                seriesName: stringToBytes(seriesName),\\n                teamName: stringToBytes(teamNames[i]),\\n                cityName: stringToBytes(cityNames[i]),\\n                color1: stringToBytes(color1s[i]),\\n                color2: stringToBytes(color2s[i])\\n            });\\n        }\\n        _createBatchNFT(address(this), tokenIdData, amountsData);\\n    }\\n\\n    function _createNFT(address to, uint256 _id, uint256 _amount) internal {\\n        teamNft.mint(to, _id, _amount, \\\"\\\");\\n    }\\n\\n    function _createBatchNFT(\\n        address to,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts\\n    ) internal {\\n        teamNft.mintBatch(to, _ids, _amounts, \\\"\\\");\\n    }\\n\\n    function _transferNFT(address to, uint256 _id, uint256 _amount) internal {\\n        if (teamNft.balanceOf(address(this), _id) < _amount) {\\n            revert NotEnoughTokensForTransfer(_id, _amount);\\n        }\\n\\n        teamNft.safeTransferFrom(address(this), to, _id, _amount, \\\"\\\");\\n    }\\n\\n    function bytesToString(\\n        bytes32 _bytes32\\n    ) internal pure returns (string memory) {\\n        uint8 i = 0;\\n        while (i < 32 && _bytes32[i] != 0) {\\n            i++;\\n        }\\n        bytes memory bytesArray = new bytes(i);\\n        for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\\n            bytesArray[i] = _bytes32[i];\\n        }\\n        return string(bytesArray);\\n    }\\n\\n    function stringToBytes(\\n        string calldata input\\n    ) internal pure returns (bytes32) {\\n        return bytes32(abi.encodePacked(input));\\n    }\\n\\n    function getBalance() internal view returns (uint) {\\n        return address(this).balance;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/TTMarketplace.sol\": {\r\n      \"content\": \"//  $$$$$$$$\\\\ $$$$$$$$\\\\  $$$$$$\\\\  $$\\\\      $$\\\\       $$$$$$$$\\\\  $$$$$$\\\\  $$\\\\   $$\\\\ $$$$$$$$\\\\ $$\\\\   $$\\\\\\n//  \\\\__$$  __|$$  _____|$$  __$$\\\\ $$$\\\\    $$$ |      \\\\__$$  __|$$  __$$\\\\ $$ | $$  |$$  _____|$$$\\\\  $$ |\\n//     $$ |   $$ |      $$ /  $$ |$$$$\\\\  $$$$ |         $$ |   $$ /  $$ |$$ |$$  / $$ |      $$$$\\\\ $$ |\\n//     $$ |   $$$$$\\\\    $$$$$$$$ |$$\\\\$$\\\\$$ $$ |         $$ |   $$ |  $$ |$$$$$  /  $$$$$\\\\    $$ $$\\\\$$ |\\n//     $$ |   $$  __|   $$  __$$ |$$ \\\\$$$  $$ |         $$ |   $$ |  $$ |$$  $$<   $$  __|   $$ \\\\$$$$ |\\n//     $$ |   $$ |      $$ |  $$ |$$ |\\\\$  /$$ |         $$ |   $$ |  $$ |$$ |\\\\$$\\\\  $$ |      $$ |\\\\$$$ |\\n//     $$ |   $$$$$$$$\\\\ $$ |  $$ |$$ | \\\\_/ $$ |         $$ |    $$$$$$  |$$ | \\\\$$\\\\ $$$$$$$$\\\\ $$ | \\\\$$ |\\n//     \\\\__|   \\\\________|\\\\__|  \\\\__|\\\\__|     \\\\__|         \\\\__|    \\\\______/ \\\\__|  \\\\__|\\\\________|\\\\__|  \\\\__|\\n//\\n//   Web: teamtoken.com\\n//   Twitter: twitter.com/TeamTokenCrypto\\n//   Contact Email: admin@teamtoken.com\\n//\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./interfaces/ITeamNFT.sol\\\";\\nimport \\\"./interfaces/ITTRewards.sol\\\";\\n\\nerror MustBeSeller();\\nerror ListingAlreadySold();\\nerror SomeTokensAlreadySold();\\nerror NoTokensAlreadySold();\\nerror ListingNotEnoughTokens();\\nerror SellerNotEnoughTokens();\\nerror CannotTransferTokens(address _user);\\nerror NoTokensBought();\\nerror ArrayIncorrectLength();\\nerror CannotBeZero();\\nerror DeadlineMustBeOneHour();\\nerror MarketplaceNotApproved();\\n\\ncontract TTMarketplace is OwnableUpgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    IERC20Upgradeable public teamToken;\\n\\n    ITeamNFT public teamNft;\\n\\n    ITTRewards public ttRewards;\\n\\n    uint256 public marketplaceFee;\\n\\n    address public feeRecipient;\\n\\n    mapping(uint => SellList) public sales;\\n    uint256 public salesId;\\n\\n    // No longer used, was not efficient.  Keeping it here because of upgradaeblae contract storage slots\\n    mapping(address => mapping(uint256 => uint256[])) private getSales;\\n\\n    uint256 public protocolListingMaxNftPerWallet;\\n\\n    mapping(address => mapping(uint256 => uint256)) public userTokensForSale;\\n\\n    /// @notice This is the Sell struct, the basic structures contain the owner of the selling tokens.\\n    struct SellList {\\n        address seller;\\n        address token;\\n        uint256 tokenId;\\n        uint256 amountOfToken;\\n        uint256 amountofTokenSold;\\n        uint256 startTime;\\n        uint256 deadline;\\n        uint256 price;\\n        bool isSold;\\n        bool protocolSell;\\n    }\\n\\n    /// @notice This is the emitted event, when a offer for a certain amount of tokens.\\n    event SellEvent(\\n        address indexed seller,\\n        uint256 indexed sellId,\\n        uint256 tokenId,\\n        uint256 amount,\\n        uint256 price\\n    );\\n\\n    /// @notice This is the emitted event, when a sell is canceled.\\n    event CanceledSell(\\n        address indexed seller,\\n        uint256 indexed sellId,\\n        uint256 tokenId,\\n        uint256 amountOfToken\\n    );\\n\\n    /// @notice This is the emitted event, when a sell is removed.\\n    event DeletedSell(\\n        address indexed seller,\\n        uint256 indexed sellId,\\n        uint256 tokenId,\\n        uint256 amountOfToken\\n    );\\n\\n    /// @notice This is the emitted event, when a buy is made.\\n    event BuyEvent(\\n        address indexed buyer,\\n        uint256 indexed sellId,\\n        uint256 tokenId,\\n        uint256 amountOfToken,\\n        uint256 price\\n    );\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @dev Function to be called on initial deployment\\n    /// @param  _teamNft The TeamToken address registry\\n    function initialize(\\n        address _admin,\\n        address _teamNft,\\n        address _teamToken\\n    ) public initializer {\\n        require(_teamNft != address(0), \\\"TeamNFT must be deployed.\\\");\\n        require(_teamToken != address(0), \\\"TeamToken must be deployed.\\\");\\n        __Ownable_init();\\n        transferOwnership(_admin);\\n        teamNft = ITeamNFT(_teamNft); // We will set the variable before we check to save gas\\n        teamToken = IERC20Upgradeable(_teamToken); // We will set the variable before\\n        feeRecipient = address(0xbac09bCd3C11168AE39028c145710Cc862E84d7C); //gnosis safe\\n        protocolListingMaxNftPerWallet = 10;\\n        marketplaceFee = 25;\\n    }\\n\\n    /**\\n        @param _newFee This is new marketplace fee amount\\n    **/\\n    function updateTotalFee(uint256 _newFee) external onlyOwner {\\n        // Set the new Marketplace fee\\n        require(_newFee <= 100 && _newFee >= 0, \\\"Fee out of range\\\");\\n        marketplaceFee = _newFee;\\n    }\\n\\n    /**\\n        @param _newTtRewards New TT Rewards contract\\n    **/\\n    function updateTtRewards(address _newTtRewards) external onlyOwner {\\n        ttRewards = ITTRewards(_newTtRewards);\\n        teamToken.approve(_newTtRewards, type(uint256).max);\\n    }\\n\\n    /**\\n        @param _newTeamNft New TeamNFT contract\\n    **/\\n    function updateTeamNft(address _newTeamNft) external onlyOwner {\\n        teamNft = ITeamNFT(_newTeamNft);\\n    }\\n\\n    /**\\n        @param _newMaxNftPerWallet This is max NFT per wallet\\n\\n    **/\\n    function updateProtocolListingMaxBuy(\\n        uint256 _newMaxNftPerWallet\\n    ) external onlyOwner {\\n        protocolListingMaxNftPerWallet = _newMaxNftPerWallet;\\n    }\\n\\n    /** \\n        @param _recipient These are the updated recipient addresses of the fees.\\n    **/\\n    function updateFeeRecipient(address _recipient) external onlyOwner {\\n        feeRecipient = _recipient;\\n    }\\n\\n    function listBatchTeamNFT(\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _amountOfTokens,\\n        uint256[] memory _prices,\\n        uint256 _startTime,\\n        uint256 _deadline\\n    ) external returns (bool) {\\n        uint256 length = _tokenIds.length;\\n        require(\\n            length == _amountOfTokens.length,\\n            \\\"tokenIds and quanitys must be same length\\\"\\n        );\\n        for (uint256 i = 0; i < length; i++) {\\n            _listTeamNFT(\\n                _msgSender(),\\n                address(teamNft),\\n                _tokenIds[i],\\n                _amountOfTokens[i],\\n                _prices[i],\\n                _startTime == 0 ? block.timestamp : _startTime,\\n                _deadline\\n            );\\n        }\\n        return true;\\n    }\\n\\n    function listTeamNFT(\\n        uint256 _tokenId,\\n        uint256 _amountOfToken,\\n        uint256 _price,\\n        uint256 _startTime,\\n        uint256 _deadline\\n    ) external returns (bool) {\\n        return\\n            _listTeamNFT(\\n                _msgSender(),\\n                address(teamNft),\\n                _tokenId,\\n                _amountOfToken,\\n                _price,\\n                _startTime == 0 ? block.timestamp : _startTime,\\n                _deadline\\n            );\\n    }\\n\\n    /** \\n        @param _token This is the address of the ERC1155 token.\\n        @param _tokenId This is the ID of the token that's inside of the ERC1155 token.\\n        @param _amountOfToken This is the amount of tokens that are going to be sold in the offer.\\n        @param _deadline This is the final date in (seconds) so the offer ends.\\n        @param _price This is the price for each token.\\n        @dev We are making some require for the parameters that needs to be required.\\n        @return Return true if the sell is created successfully.\\n    **/\\n    function _listTeamNFT(\\n        address _user,\\n        address _token,\\n        uint256 _tokenId,\\n        uint256 _amountOfToken,\\n        uint256 _price,\\n        uint256 _startTime,\\n        uint256 _deadline\\n    ) internal returns (bool) {\\n        /*\\n            Check if amount of token is greater than 0\\n                full price for token  is greater than 0\\n                the deadline is longer than 1 hr\\n        */\\n        if (_amountOfToken == 0 || _price == 0) {\\n            revert CannotBeZero();\\n        }\\n\\n        if (_deadline < 3600) {\\n            revert DeadlineMustBeOneHour();\\n        }\\n\\n        uint256 usersBalance = teamNft.balanceOf(_user, _tokenId);\\n\\n        // Check if the seller owns enough tokens to be able to sell.\\n        if (usersBalance < _amountOfToken) {\\n            revert SellerNotEnoughTokens();\\n        }\\n\\n        // Check if the seller has approved the marketplace to transfer TeamNFT\\n        if (!teamNft.isApprovedForAll(_user, address(this))) {\\n            revert MarketplaceNotApproved();\\n        }\\n        bool protocolListing;\\n        if (_user == teamNft.teamNftManager()) {\\n            protocolListing = true;\\n        } else {\\n            // This is not the protocol, we will stuf the condition check in the current\\n            // if statement to save gas\\n            //\\n            // Make sure they aren't overselling, and remove these checks from protocol sells\\n\\n            uint256 usersTokendsForSale = userTokensForSale[_user][_tokenId];\\n\\n            if (usersBalance < _amountOfToken + usersTokendsForSale) {\\n                if (usersBalance - usersTokendsForSale > 0) {\\n                    _amountOfToken = usersBalance - usersTokendsForSale;\\n                } else {\\n                    revert SellerNotEnoughTokens();\\n                }\\n            }\\n\\n            // Update total number of tokens for sale\\n\\n            userTokensForSale[_user][_tokenId] = safeAdjustUserTokensForSale(\\n                userTokensForSale[_user][_tokenId],\\n                OperationName.ADD,\\n                (_amountOfToken + usersTokendsForSale)\\n            );\\n        }\\n        /*\\n            Add the salesId as increment 1\\n        */\\n        salesId++;\\n        /*\\n            Add variables to the SellList struct with tokenAddress, seller, tokenId, amountOfToken, deadline, price\\n        */\\n        sales[salesId] = SellList(\\n            _user,\\n            _token,\\n            _tokenId,\\n            _amountOfToken,\\n            0,\\n            _startTime,\\n            _startTime + _deadline,\\n            _price,\\n            false,\\n            protocolListing\\n        );\\n\\n        /*\\n            Emit the event when a sell is created.\\n        */\\n        emit SellEvent(_user, salesId, _tokenId, _amountOfToken, _price);\\n\\n        return true;\\n    }\\n\\n    /**\\n        @param _sellId This is the ID of the SellList that's stored in mapping function.\\n    **/\\n    function buyTeamNFT(\\n        uint256 _sellId,\\n        uint256 _quantity\\n    ) external returns (uint256) {\\n        uint256 tokensBought = _buyTeamNFT(\\n            _msgSender(),\\n            _sellId,\\n            _quantity,\\n            _msgSender(),\\n            false\\n        );\\n        if (tokensBought == 0) {\\n            revert NoTokensBought();\\n        }\\n        return tokensBought;\\n    }\\n\\n    /**\\n        @param _sellIds This is the ID of the SellList that's stored in mapping function.\\n    **/\\n    function buyBatchTeamNFT(\\n        uint256[] memory _sellIds,\\n        uint256[] memory _quantitys,\\n        bool _allowPartial\\n    ) external returns (uint256) {\\n        uint256 length = _sellIds.length;\\n        if (length != _quantitys.length) {\\n            revert ArrayIncorrectLength();\\n        }\\n\\n        uint256 tokensBought = 0;\\n        for (uint256 i = 0; i < length; i++) {\\n            tokensBought += _buyTeamNFT(\\n                _msgSender(),\\n                _sellIds[i],\\n                _quantitys[i],\\n                _msgSender(),\\n                _allowPartial\\n            );\\n        }\\n        if (tokensBought == 0) {\\n            revert NoTokensBought();\\n        }\\n        return tokensBought;\\n    }\\n\\n    function _handleProtocolListing(\\n        address _user,\\n        uint256 _tokenId,\\n        uint256 _amount\\n    ) internal view returns (uint256) {\\n        uint256 buyerBalance = teamNft.balanceOf(_user, _tokenId);\\n\\n        if ((buyerBalance + _amount) <= protocolListingMaxNftPerWallet) {\\n            return _amount;\\n        }\\n\\n        if ((buyerBalance + _amount) > protocolListingMaxNftPerWallet) {\\n            return protocolListingMaxNftPerWallet - buyerBalance;\\n        }\\n\\n        return 0;\\n    }\\n\\n    /**\\n        Handles the buying\\n        @param _sellId This is the ID of the SellList that's stored in mapping function.\\n        @dev this internal function will not revert, it will just return 0 if no tokens bought.\\n    **/\\n    function _buyTeamNFT(\\n        address _buyer,\\n        uint256 _sellId,\\n        uint256 _amount,\\n        address _to,\\n        bool _allowPartial\\n    ) internal returns (uint256) {\\n        // Store the variable in memory so we don't\\n        SellList memory _sale = sales[_sellId];\\n\\n        // Return number of NFT bought.  Return 0 instead of revert if cannot buy.\\n        if (\\n            _sale.isSold == true ||\\n            block.timestamp < _sale.startTime ||\\n            block.timestamp > _sale.deadline\\n        ) {\\n            return 0;\\n        }\\n\\n        // Check if seller has enough tokens to sell.\\n        uint256 sellerBalance = teamNft.balanceOf(_sale.seller, _sale.tokenId);\\n\\n        if (sellerBalance == 0) {\\n            // Force cancel the sale if seller has no tokens\\n            if (_sale.amountofTokenSold == 0) {\\n                _deleteList(_sellId);\\n            } else {\\n                _cancelList(_sellId);\\n            }\\n            return 0;\\n        }\\n\\n        // Local sell amount is the amount of tokens to be sold in this transaction.\\n        // It is updated later if partials are enabled and the full amount cannot be filled.\\n        uint256 sellAmount = _amount;\\n\\n        // Check amount of tokens available for sale\\n        // If not enough tokens available, and partial is enabled, change sell amount\\n        if (\\n            (_sale.amountOfToken - _sale.amountofTokenSold) < _amount &&\\n            !_allowPartial\\n        ) {\\n            // If amount of tokens available is less than amount requested\\n            revert ListingNotEnoughTokens();\\n        }\\n\\n        if (\\n            (_sale.amountOfToken - _sale.amountofTokenSold) < _amount &&\\n            _allowPartial\\n        ) {\\n            sellAmount = _sale.amountOfToken - _sale.amountofTokenSold;\\n        }\\n\\n        // If this is a protocol listing, ensure the user isn't over the max.\\n        if (\\n            _sale.protocolSell == true &&\\n            _sale.startTime + (60 * 60 * 24) > block.timestamp\\n        ) {\\n            sellAmount = _handleProtocolListing(\\n                _buyer,\\n                _sale.tokenId,\\n                sellAmount\\n            );\\n        }\\n\\n        // Handle nicely if seller does not have enough tokens\\n        if (sellerBalance < sellAmount) {\\n            if (!_allowPartial) {\\n                revert SellerNotEnoughTokens();\\n            }\\n            // If the seller balance is lower than total\\n            // We will check to see if we should do a partial sale.\\n\\n            // Change sell amount to balance of seller\\n            sellAmount = sellerBalance;\\n        }\\n\\n        /*\\n            Get salePrice and feePrice from the marketplaceFee\\n        */\\n        uint256 salePrice = _sale.price * sellAmount;\\n        uint256 feePrice = (salePrice * marketplaceFee) / 1000;\\n\\n        if (!teamToken.transferFrom(_buyer, address(this), salePrice)) {\\n            revert CannotTransferTokens(_buyer);\\n        }\\n\\n        /*\\n            Transfer salePrice-feePrice to the seller's wallet\\n        */\\n        if (_sale.protocolSell) {\\n            teamToken.transfer(address(ttRewards), salePrice - feePrice);\\n            ttRewards.receiveRewards(salePrice - feePrice, _sale.tokenId);\\n        } else {\\n            teamToken.transfer(_sale.seller, salePrice - feePrice);\\n\\n            // Not a protocol sale so lower the users total amount\\n            userTokensForSale[_sale.seller][\\n                _sale.tokenId\\n            ] = safeAdjustUserTokensForSale(\\n                userTokensForSale[_sale.seller][_sale.tokenId],\\n                OperationName.REDUCE,\\n                (sellAmount)\\n            );\\n        }\\n\\n        /*\\n            Distribution feePrice to the recipients' wallets\\n        */\\n        teamToken.transfer(feeRecipient, feePrice);\\n\\n        /* \\n            After we send the TeamToken to the seller, we send\\n            the amountOfToken to the _to address\\n        */\\n        teamNft.safeTransferFrom(\\n            _sale.seller,\\n            _to,\\n            _sale.tokenId,\\n            sellAmount,\\n            \\\"0x0\\\"\\n        );\\n\\n        /* \\n            Now we must mark the tokens as sold.\\n        */\\n        sales[_sellId].amountofTokenSold = _sale.amountofTokenSold + sellAmount; // We will use the storage variable rather than memory since we need this to persist.\\n\\n        if (_sale.amountofTokenSold + sellAmount == _sale.amountOfToken) {\\n            sales[_sellId].isSold = true;\\n        }\\n\\n        /*\\n            Emit the event when a buy occurs\\n        */\\n        emit BuyEvent(_to, _sellId, _sale.tokenId, sellAmount, _sale.price);\\n\\n        return sellAmount;\\n    }\\n\\n    /** \\n        @param _sellId The ID of the sell that you want to cancel.\\n    **/\\n    function cancelList(uint256 _sellId) external returns (bool) {\\n        if (sales[_sellId].seller != _msgSender()) {\\n            revert MustBeSeller();\\n        }\\n        // Delete the listing if no tokens have been sold yet.\\n        // Note: Keeping most safety checks in child function\\n        // so they are only performed if we are deleting\\n        if (sales[_sellId].amountofTokenSold == 0) {\\n            return _deleteList(_sellId);\\n        } else {\\n            return _cancelList(_sellId);\\n        }\\n    }\\n\\n    function _deleteList(uint256 _sellId) internal returns (bool) {\\n        // Use in memory variable for everything except when we need to persist data change\\n        // For gas savings\\n        SellList memory _sale = sales[_sellId];\\n\\n        if (_sale.isSold == true) {\\n            revert ListingAlreadySold();\\n        }\\n\\n        if (_sale.amountofTokenSold > 0) {\\n            revert SomeTokensAlreadySold();\\n        }\\n\\n        userTokensForSale[_sale.seller][\\n            _sale.tokenId\\n        ] = safeAdjustUserTokensForSale(\\n            userTokensForSale[_sale.seller][_sale.tokenId],\\n            OperationName.REDUCE,\\n            (_sale.amountOfToken)\\n        );\\n\\n        // Delete the listing since nothing was sold yet\\n        delete sales[_sellId];\\n\\n        /*\\n            Emit the event when a sell is cancelled.\\n        */\\n        emit DeletedSell(\\n            _sale.seller,\\n            _sellId,\\n            _sale.tokenId,\\n            _sale.amountOfToken\\n        );\\n\\n        return true;\\n    }\\n\\n    function _cancelList(uint256 _sellId) internal returns (bool) {\\n        // Use in memory variable for everything except when we need to persist data change\\n        // For gas savings\\n        SellList memory _sale = sales[_sellId];\\n\\n        if (_sale.isSold == true) {\\n            revert ListingAlreadySold();\\n        }\\n\\n        if (_sale.amountofTokenSold == 0) {\\n            revert NoTokensAlreadySold();\\n        }\\n\\n        /*\\n            After those checks it is now safe to cancel\\n        */\\n\\n        // Cannot use our local variable as we need to persist state change\\n\\n        // Change the amount of tokens for sale to the total sold\\n        sales[_sellId].amountOfToken = _sale.amountofTokenSold;\\n\\n        // Mark the listing as sold.\\n        sales[_sellId].isSold = true;\\n\\n        // TODO check to ensure this allows sales to be cancelled that have existing sales.\\n\\n        userTokensForSale[_sale.seller][\\n            _sale.tokenId\\n        ] = safeAdjustUserTokensForSale(\\n            userTokensForSale[_sale.seller][_sale.tokenId],\\n            OperationName.REDUCE,\\n            (sales[_sellId].amountOfToken - sales[_sellId].amountofTokenSold)\\n        );\\n\\n        /*\\n            Emit the event when a sell is cancelled.\\n        */\\n        emit CanceledSell(\\n            _sale.seller,\\n            _sellId,\\n            _sale.tokenId,\\n            _sale.amountOfToken\\n        );\\n\\n        return true;\\n    }\\n\\n    enum OperationName {\\n        ADD,\\n        REDUCE\\n    }\\n\\n    /**\\n        @param currentAmount This is the current amount stored for tokens for sale\\n        @param operation ENUM of ADD or REDUCE \\n        @param adjustmentAmount How much we should add or reduce the amount\\n        @dev We are making some require for the parameters that needs to be required.\\n        @param newAmount Return safe amount\\n    **/\\n    function safeAdjustUserTokensForSale(\\n        uint256 currentAmount,\\n        OperationName operation,\\n        uint256 adjustmentAmount\\n    ) internal pure returns (uint256 newAmount) {\\n        if (operation == OperationName.ADD) {\\n            newAmount = currentAmount + adjustmentAmount;\\n        } else if (operation == OperationName.REDUCE) {\\n            newAmount = (currentAmount >= adjustmentAmount)\\n                ? currentAmount - adjustmentAmount\\n                : 0;\\n        }\\n    }\\n\\n    /**\\n        @param _receiver This is the address which will be receive the token.\\n        @param _token This is the address of the ERC1155 token.\\n        @param _tokenId This is the ID of the token that's inside of the ERC1155 token.\\n        @param _amountOfToken This is the amount of tokens that are going to be transferred.\\n        @dev We are making some require for the parameters that needs to be required.\\n        @return Return true if the sell is created successfully.\\n    **/\\n    function transfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _tokenId,\\n        uint256 _amountOfToken\\n    ) external returns (bool) {\\n        /* \\n            Send ERC1155 token to _receiver wallet\\n            _amountOfToken to the _receiver\\n        */\\n        IERC1155Upgradeable(_token).safeTransferFrom(\\n            _msgSender(),\\n            _receiver,\\n            _tokenId,\\n            _amountOfToken,\\n            \\\"0x0\\\"\\n        );\\n\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/TTRewards.sol\": {\r\n      \"content\": \"//  $$$$$$$$\\\\ $$$$$$$$\\\\  $$$$$$\\\\  $$\\\\      $$\\\\       $$$$$$$$\\\\  $$$$$$\\\\  $$\\\\   $$\\\\ $$$$$$$$\\\\ $$\\\\   $$\\\\\\n//  \\\\__$$  __|$$  _____|$$  __$$\\\\ $$$\\\\    $$$ |      \\\\__$$  __|$$  __$$\\\\ $$ | $$  |$$  _____|$$$\\\\  $$ |\\n//     $$ |   $$ |      $$ /  $$ |$$$$\\\\  $$$$ |         $$ |   $$ /  $$ |$$ |$$  / $$ |      $$$$\\\\ $$ |\\n//     $$ |   $$$$$\\\\    $$$$$$$$ |$$\\\\$$\\\\$$ $$ |         $$ |   $$ |  $$ |$$$$$  /  $$$$$\\\\    $$ $$\\\\$$ |\\n//     $$ |   $$  __|   $$  __$$ |$$ \\\\$$$  $$ |         $$ |   $$ |  $$ |$$  $$<   $$  __|   $$ \\\\$$$$ |\\n//     $$ |   $$ |      $$ |  $$ |$$ |\\\\$  /$$ |         $$ |   $$ |  $$ |$$ |\\\\$$\\\\  $$ |      $$ |\\\\$$$ |\\n//     $$ |   $$$$$$$$\\\\ $$ |  $$ |$$ | \\\\_/ $$ |         $$ |    $$$$$$  |$$ | \\\\$$\\\\ $$$$$$$$\\\\ $$ | \\\\$$ |\\n//     \\\\__|   \\\\________|\\\\__|  \\\\__|\\\\__|     \\\\__|         \\\\__|    \\\\______/ \\\\__|  \\\\__|\\\\________|\\\\__|  \\\\__|\\n//\\n//   Web: teamtoken.com\\n//   Twitter: twitter.com/TeamTokenCrypto\\n//   Contact Email: admin@teamtoken.com\\n//\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"./interfaces/ITeamNFTManager.sol\\\";\\nimport \\\"./interfaces/ITTMarketplace.sol\\\";\\nimport \\\"./interfaces/ITeamNFT.sol\\\";\\nimport \\\"./types/Structs.sol\\\";\\n\\ncontract TTRewards is Initializable, PausableUpgradeable, OwnableUpgradeable {\\n    struct SeriesReward {\\n        uint256 baseRewards;\\n        uint256 bonusRewards;\\n        uint256 rewardsReceivedForPayouts;\\n        uint256 startDate;\\n        uint256 endDate;\\n        uint256 rewardsAllocated;\\n        uint256 rewardTiers;\\n    }\\n\\n    struct RewardTier {\\n        uint256 allocationPercent;\\n        uint256 totalWinners;\\n    }\\n\\n    ITeamNFTManager public teamNftManager;\\n\\n    IERC20Upgradeable public teamtoken;\\n\\n    // Mapping Sport -> Series -> SeriesReward\\n    mapping(uint256 => mapping(uint256 => SeriesReward)) public seriesRewards;\\n\\n    mapping(uint256 => mapping(uint256 => mapping(uint256 => RewardTier)))\\n        public seriesRewardTiers;\\n\\n    struct UserRewards {\\n        uint256 rewardsEarned;\\n        uint256 rewardsClaimed;\\n    }\\n\\n    mapping(address => UserRewards) public usersRewards;\\n\\n    address public operator;\\n\\n    ITeamNFT public teamNft;\\n\\n    event SeriesRewardsCreated(\\n        uint256 indexed sportId,\\n        uint256 indexed seriesId,\\n        uint256 baseRewards,\\n        uint256 bonusRewards,\\n        uint256 startDate,\\n        uint256 endDate\\n    );\\n\\n    event SeriesRewardsTierCreated(\\n        uint256 indexed sportId,\\n        uint256 indexed seriesId,\\n        uint256 allocation,\\n        uint256 totalWinners\\n    );\\n\\n    event RewardsClaimed(\\n        address indexed user,\\n        uint256 indexed amountClaimed,\\n        uint256 lifetimeClaimed\\n    );\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address _admin,\\n        address _teamNftManager,\\n        address _teamtoken\\n    ) public initializer {\\n        __Pausable_init();\\n        __Ownable_init();\\n\\n        teamNftManager = ITeamNFTManager(_teamNftManager);\\n        teamtoken = IERC20Upgradeable(_teamtoken);\\n\\n        _transferOwnership(_admin);\\n    }\\n\\n    function createSeriesRewards(\\n        uint256 _sport,\\n        uint256 _series,\\n        uint256 _baseRewards,\\n        uint256 _bonusRewards,\\n        uint256 _startDate,\\n        uint256 _endDate\\n    ) public onlyOwner {\\n        require(_sport <= teamNftManager.sportsLength());\\n        require(_series <= teamNftManager.seriesForSportLength(_sport));\\n        require(_endDate > _startDate, \\\"EndDate must be later than start date\\\");\\n        SeriesReward memory newSeriesReward = SeriesReward({\\n            baseRewards: _baseRewards,\\n            bonusRewards: _bonusRewards,\\n            rewardsReceivedForPayouts: 0,\\n            startDate: (_startDate == 0) ? block.timestamp : _startDate,\\n            endDate: (_endDate == 0)\\n                ? block.timestamp + (60 * 60 * 24 * 365)\\n                : _endDate,\\n            rewardsAllocated: 0,\\n            rewardTiers: 0\\n        });\\n        seriesRewards[_sport][_series] = newSeriesReward;\\n\\n        emit SeriesRewardsCreated(\\n            _sport,\\n            _series,\\n            _baseRewards,\\n            _bonusRewards,\\n            _startDate,\\n            _endDate\\n        );\\n    }\\n\\n    function createSeriesRewardsTier(\\n        uint256 _sport,\\n        uint256 _series,\\n        uint256 _allocation,\\n        uint256 _totalWinners\\n    ) public onlyOwner {\\n        require(_allocation <= 10000); // 10000 is 100%\\n        SeriesReward storage seriesReward = seriesRewards[_sport][_series];\\n        RewardTier memory newRewardTier = RewardTier({\\n            allocationPercent: _allocation,\\n            totalWinners: _totalWinners\\n        });\\n        uint256 rewardTierNumber = seriesReward.rewardTiers + 1;\\n        seriesRewardTiers[_sport][_series][rewardTierNumber] = newRewardTier;\\n        seriesReward.rewardTiers = rewardTierNumber;\\n\\n        emit SeriesRewardsTierCreated(\\n            _sport,\\n            _series,\\n            _allocation,\\n            _totalWinners\\n        );\\n    }\\n\\n    function receiveRewards(uint256 amount, uint256 tokenId) external {\\n        address marketplace = teamNftManager.marketplace();\\n        require(_msgSender() == marketplace);\\n        // teamtoken.transferFrom(marketplace, address(this), amount);\\n        (uint _sport, uint _series) = _calculateSportAndLeagueFromTokenId(\\n            tokenId\\n        );\\n        require(seriesRewards[_sport][_series].startDate > 0, \\\"Doesn't exist\\\");\\n        seriesRewards[_sport][_series].rewardsReceivedForPayouts += amount;\\n    }\\n\\n    function _calculateSportAndLeagueFromTokenId(\\n        uint256 tokenId\\n    ) internal pure returns (uint256 sport, uint256 league) {\\n        sport = tokenId / 1000000;\\n        league = (tokenId - (sport * 1000000)) / 1000;\\n    }\\n\\n    // This is called once per winning event.\\n    function pushRewards(\\n        uint256 sport,\\n        uint256 series,\\n        uint256 rewardTier,\\n        uint256[] calldata winningTokenIds\\n    ) public {\\n        require(_msgSender() == operator || _msgSender() == owner());\\n        uint256 length = winningTokenIds.length;\\n\\n        RewardTier memory thisRewardTier = seriesRewardTiers[sport][series][\\n            rewardTier\\n        ];\\n\\n        // Get the allocation of this reward tier from the total rewards.\\n        uint256 rewardAmount = ((seriesRewards[sport][series].baseRewards +\\n            seriesRewards[sport][series].bonusRewards) *\\n            thisRewardTier.allocationPercent) / 10000;\\n\\n        // See what each winning event will pay, and then divide by 100 to equal one tokens rewards.\\n        uint256 rewardPerWinner = rewardAmount /\\n            thisRewardTier.totalWinners /\\n            100;\\n\\n        // Loop through all winning tokenIds\\n        for (uint256 i = 0; i < length; i++) {\\n            // Get all holders of the winning token.\\n            OwnersBalances[] memory thisTokensOwners = teamNft\\n                .allOwnersWithBalances(winningTokenIds[i]);\\n\\n            // For each holder of the winning token, add appropriate amount to their claimable amount.\\n            for (uint256 w = 0; w < thisTokensOwners.length; w++) {\\n                //  OwnersBalances memory thisWinner = thisTokensOwners[w];\\n                usersRewards[thisTokensOwners[w].account]\\n                    .rewardsEarned += (rewardPerWinner *\\n                    thisTokensOwners[w].balance);\\n            }\\n        }\\n\\n        seriesRewards[sport][series].rewardsAllocated += (length *\\n            rewardPerWinner *\\n            100);\\n    }\\n\\n    function rewardsAvailable(address _winner) public view returns (uint256) {\\n        UserRewards memory thisWinner = usersRewards[_winner];\\n        return thisWinner.rewardsEarned - thisWinner.rewardsClaimed;\\n    }\\n\\n    function claimRewards() public {\\n        address _user = _msgSender();\\n        uint256 _rewardAvailable = rewardsAvailable(_user);\\n        require(_rewardAvailable > 0, \\\"Rewards not available\\\");\\n        usersRewards[_user].rewardsClaimed = usersRewards[_user].rewardsEarned;\\n        teamtoken.transfer(_user, _rewardAvailable);\\n        emit RewardsClaimed(\\n            _user,\\n            _rewardAvailable,\\n            usersRewards[_user].rewardsClaimed\\n        );\\n    }\\n\\n    function setOperator(address _operator) public onlyOwner {\\n        operator = _operator;\\n    }\\n\\n    function setTeamNft(address _teamNft) public onlyOwner {\\n        teamNft = ITeamNFT(_teamNft);\\n    }\\n\\n    function setTeamToken(address _teamToken) public onlyOwner {\\n        teamtoken = IERC20Upgradeable(_teamToken);\\n    }\\n\\n    // This contract will handle rewards for all TeamTokens\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/TTZapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\n\\nimport \\\"./library/Babylonian.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./interfaces/IRouter.sol\\\";\\nimport \\\"./interfaces/IFactory.sol\\\";\\nimport \\\"./interfaces/ITTMarketplace.sol\\\";\\nimport \\\"./interfaces/ITeamNFT.sol\\\";\\n\\npragma solidity ^0.8.9;\\n\\ncontract TTZapper is Context, ERC1155Holder {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using SafeERC20 for IERC20;\\n\\n    IRouter public constant router =\\n        IRouter(0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff);\\n\\n    address public constant WETH =\\n        address(0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270);\\n\\n    address public immutable teamToken;\\n\\n    ITeamNFT public immutable teamNft;\\n\\n    ITTMarketplace public immutable marketplace;\\n    IUniswapV2Pair public immutable teamTokenPair;\\n\\n    uint256 public constant minimumAmount = 1000;\\n\\n    constructor(address _marketplace, address _teamToken, address _teamNFT) {\\n        marketplace = ITTMarketplace(_marketplace);\\n        teamToken = _teamToken;\\n        teamNft = ITeamNFT(_teamNFT);\\n        address _factory = IRouter(router).factory();\\n        teamTokenPair = IUniswapV2Pair(\\n            IFactory(_factory).getPair(WETH, teamToken)\\n        );\\n        _approveTokenIfNeeded(teamToken, address(marketplace));\\n        _approveTokenIfNeeded(WETH, address(router));\\n    }\\n\\n    receive() external payable {}\\n\\n    function buyWithETH(\\n        uint256 sellId,\\n        uint256 nftAmount,\\n        uint256 tokenId\\n    ) external payable {\\n        require(\\n            msg.value >= minimumAmount,\\n            \\\"TTZapper: Insignificant input amount\\\"\\n        );\\n\\n        IWETH(WETH).deposit{value: msg.value}();\\n        uint256 _wethBalance = IERC20(WETH).balanceOf(address(this));\\n        swap(\\n            address(teamToken),\\n            (estimateSwap(_wethBalance) * 98) / 100,\\n            WETH,\\n            _wethBalance\\n        );\\n\\n        // SellList memory nftSaleInfo = marketplace.sales(sellId);\\n\\n        _buyNFT(sellId, nftAmount);\\n\\n        teamNft.safeTransferFrom(\\n            address(this),\\n            _msgSender(),\\n            tokenId,\\n            nftAmount,\\n            \\\"\\\"\\n        );\\n\\n        _returnTokens();\\n    }\\n\\n    function _buyNFT(\\n        uint256 sellId,\\n        uint quantity\\n    ) internal returns (uint256 amountBought) {\\n        amountBought = marketplace.buyTeamNFT(sellId, quantity);\\n    }\\n\\n    // _baseBalance = swap(zapToken, 0, tokenIn, tokenInAmount);\\n    // _approveTokenIfNeeded(zapToken, address(beefyUniV2Zap));\\n    // beefyUniV2Zap.beefIn(\\n    //     beefyVault,\\n    //     tokenAmountOutMin,\\n    //     zapToken,\\n    //     _baseBalance\\n    // );\\n\\n    // vault.transfer(_msgSender(), vault.balanceOf(address(this)));\\n    // address[] memory _returnAssetTokens;\\n    // if (zapToken != want) {\\n    //     IUniswapV2Pair _pairAddress = IUniswapV2Pair(\\n    //         basePairInfo.wantAddress\\n    //     );\\n    //     _returnAssetTokens = new address[](2);\\n    //     _returnAssetTokens[0] = _pairAddress.token0();\\n    //     _returnAssetTokens[1] = _pairAddress.token1();\\n    // } else {\\n    //     _returnAssetTokens = new address[](1);\\n    //     _returnAssetTokens[0] = zapToken;\\n    // }\\n    // _returnAssets(_returnAssetTokens);\\n\\n    function swap(\\n        address tokenOut,\\n        uint256 tokenAmountOutMin,\\n        address tokenIn,\\n        uint256 tokenInAmount\\n    ) internal returns (uint256 baseBalance) {\\n        if (tokenIn != tokenOut) {\\n            _swap(tokenOut, tokenAmountOutMin, tokenIn, tokenInAmount);\\n        }\\n        baseBalance = IERC20(tokenOut).balanceOf(address(this));\\n    }\\n\\n    function _returnTokens() private {\\n        address[] memory _returnAssetTokens;\\n        _returnAssetTokens = new address[](2);\\n        _returnAssetTokens[0] = WETH;\\n        _returnAssetTokens[1] = teamToken;\\n        _returnAssets(_returnAssetTokens);\\n    }\\n\\n    function _returnAssets(address[] memory tokens) private {\\n        uint256 balance;\\n        for (uint256 i; i < tokens.length; i++) {\\n            balance = IERC20(tokens[i]).balanceOf(address(this));\\n            if (balance > 0) {\\n                if (tokens[i] == WETH) {\\n                    IWETH(WETH).withdraw(balance);\\n                    (bool success, ) = _msgSender().call{value: balance}(\\n                        new bytes(0)\\n                    );\\n                    require(success, \\\"TTZapper: ETH transfer failed\\\");\\n                } else {\\n                    IERC20(tokens[i]).safeTransfer(_msgSender(), balance);\\n                }\\n            }\\n        }\\n    }\\n\\n    function estimateRequiredETH(\\n        uint256 _teamTokenOut\\n    ) public view returns (uint256 ethRequired) {\\n        IUniswapV2Pair pair = teamTokenPair;\\n        bool isInputA = pair.token0() == WETH;\\n        require(\\n            isInputA || pair.token1() == teamToken,\\n            \\\"Input token not present in liqudity pair\\\"\\n        );\\n        (uint256 reserveA, uint256 reserveB, ) = pair.getReserves();\\n\\n        (reserveA, reserveB) = isInputA\\n            ? (reserveA, reserveB)\\n            : (reserveB, reserveA);\\n\\n        ethRequired = router.getAmountIn(_teamTokenOut, reserveA, reserveB);\\n    }\\n\\n    function estimateSwap(\\n        uint256 fullInvestmentIn\\n    ) public view returns (uint256 swapAmountOut) {\\n        IUniswapV2Pair pair = teamTokenPair;\\n        bool isInputA = pair.token0() == WETH;\\n        require(\\n            isInputA || pair.token1() == teamToken,\\n            \\\"Input token not present in liqudity pair\\\"\\n        );\\n\\n        (uint256 reserveA, uint256 reserveB, ) = pair.getReserves();\\n        (reserveA, reserveB) = isInputA\\n            ? (reserveA, reserveB)\\n            : (reserveB, reserveA);\\n\\n        swapAmountOut = router.getAmountOut(\\n            fullInvestmentIn,\\n            reserveA,\\n            reserveB\\n        );\\n    }\\n\\n    function _swap(\\n        address tokenOut,\\n        uint256 tokenAmountOutMin,\\n        address tokenIn,\\n        uint256 tokenInAmount\\n    ) internal returns (uint256[] memory amounts) {\\n        uint256 wethAmount;\\n\\n        if (tokenIn == WETH) {\\n            wethAmount = tokenInAmount;\\n        } else {\\n            IUniswapV2Pair pair = IUniswapV2Pair(teamTokenPair);\\n            bool isInputA = pair.token0() == tokenIn;\\n            require(\\n                isInputA || pair.token1() == tokenIn,\\n                \\\"TTZapper: Input token not present in input pair\\\"\\n            );\\n            address[] memory path;\\n            IRouter tokenInRouter = IRouter(router);\\n            path = new address[](2);\\n            path[0] = tokenIn;\\n            path[1] = WETH;\\n            // }\\n            amounts = tokenInRouter.swapExactTokensForTokens(\\n                tokenInAmount,\\n                0,\\n                path,\\n                address(this),\\n                block.timestamp\\n            );\\n            wethAmount = IERC20(WETH).balanceOf(address(this));\\n        }\\n\\n        if (tokenOut != WETH) {\\n            IRouter baseRouter = router;\\n            address[] memory basePath;\\n\\n            basePath = new address[](2);\\n            basePath[0] = WETH;\\n            basePath[1] = tokenOut;\\n\\n            amounts = baseRouter.swapExactTokensForTokens(\\n                wethAmount,\\n                tokenAmountOutMin,\\n                basePath,\\n                address(this),\\n                block.timestamp\\n            );\\n        }\\n    }\\n\\n    function _giveAllowance(address _address, address _router) internal {\\n        IERC20(_address).approve(_router, 0);\\n        IERC20(_address).approve(_router, uint256(1e50));\\n    }\\n\\n    function _removeAllowance(address _address, address _router) internal {\\n        IERC20(_address).approve(_router, 0);\\n    }\\n\\n    function _approveTokenIfNeeded(address token, address spender) private {\\n        if (IERC20(token).allowance(address(this), spender) == 0) {\\n            IERC20(token).approve(spender, type(uint256).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/types/Structs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nstruct TeamNFTData {\\n    uint64 sport;\\n    uint64 series;\\n    bytes32 seriesName;\\n    bytes32 cityName;\\n    bytes32 teamName;\\n    bytes32 color1;\\n    bytes32 color2;\\n}\\n\\nstruct SeriesData {\\n    string seriesName;\\n    uint128 numberOfTeams;\\n    uint128 nftsPerTeam;\\n}\\n\\n/// @dev Datatype for returning owners of a tokenId with balances.\\nstruct OwnersBalances {\\n    address account;\\n    uint256 balance;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotEnoughTokensForTransfer\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sportId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"seriesName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberOfTeams\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftsPerTeam\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"firstTokenId\",\"type\":\"uint256\"}],\"name\":\"SeriesCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sportId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"sport\",\"type\":\"string\"}],\"name\":\"SportCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_sport\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_series\",\"type\":\"uint64\"},{\"internalType\":\"uint256[]\",\"name\":\"_prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_starttime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"createMarketplaceListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"sport\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"seriesName\",\"type\":\"string\"},{\"internalType\":\"uint128\",\"name\":\"nftsPerTeam\",\"type\":\"uint128\"},{\"internalType\":\"string[]\",\"name\":\"cityNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"teamNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"color1s\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"color2s\",\"type\":\"string[]\"}],\"name\":\"createSeries\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_sport\",\"type\":\"string\"}],\"name\":\"createSport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sportId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamId\",\"type\":\"uint256\"}],\"name\":\"genTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketplace\",\"outputs\":[{\"internalType\":\"contract ITTMarketplace\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"nftData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"sport\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"seriesName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cityName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"teamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"color1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"color2\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"series\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"seriesName\",\"type\":\"string\"},{\"internalType\":\"uint128\",\"name\":\"numberOfTeams\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"nftsPerTeam\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sport\",\"type\":\"uint256\"}],\"name\":\"seriesForSportLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sports\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sportsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamNft\",\"outputs\":[{\"internalType\":\"contract ITeamNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketplace\",\"type\":\"address\"}],\"name\":\"updateMarketplace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamNft\",\"type\":\"address\"}],\"name\":\"updateTeamNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamNftRenderer\",\"type\":\"address\"}],\"name\":\"updateTeamNftRenderer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TeamNFTManager", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}