{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"meucontrato.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.7.0; \\r\\n  \\r\\ncontract Ownable  \\r\\n{     \\r\\n  // Variable that maintains  \\r\\n  // owner address 0x11B4451C5F42A5a63Dc53F83499f81e40F1e10b8\\r\\n\\r\\n\\r\\n  address private _owner;\\r\\n  \\r\\n  // Sets the original owner of  \\r\\n  // contract when it is deployed 0x11B4451C5F42A5a63Dc53F83499f81e40F1e10b8\\r\\n  constructor() \\r\\n  { \\r\\n    _owner = msg.sender;\\r\\n  } \\r\\n  \\r\\n  // Publicly exposes who is the \\r\\n  // owner of this contract \\r\\n  function owner() private  view returns(address)  \\r\\n  { \\r\\n    return _owner; \\r\\n  } \\r\\n  \\r\\n  // onlyOwner modifier that validates only  \\r\\n  // if caller of function is contract owner,  \\r\\n  // otherwise not \\r\\n  modifier onlyOwner()  \\r\\n  { \\r\\n    require(isOwner(), \\r\\n    \\\"Function accessible only by the owner !!\\\"); \\r\\n    _; \\r\\n  } \\r\\n  \\r\\n  // function for owners to verify their ownership.  \\r\\n  // Returns true for owners otherwise false \\r\\n  function isOwner() public view returns(bool)  \\r\\n  { \\r\\n    return msg.sender == _owner; \\r\\n  } \\r\\n} \\r\\n  \\r\\ncontract OwnableDemo is Ownable  \\r\\n{  \\r\\n    uint sum = 0; \\r\\n    uint[] numbers; \\r\\n  \\r\\n    // Push number to array \\r\\n    function addNumber(uint number) public\\r\\n    { \\r\\n        numbers.push(number); \\r\\n    } \\r\\n  \\r\\n    // Read sum variable \\r\\n    function getSum() public view returns(uint) \\r\\n    { \\r\\n        return sum; \\r\\n    } \\r\\n  \\r\\n    /*  \\r\\n        Calculate sum by traversing array \\r\\n        The onlyOwner modifier used here prevents  \\r\\n        this function to be called by people other  \\r\\n        than owner who deployed it \\r\\n    */\\r\\n    function calculateSum() onlyOwner private \\r\\n    { \\r\\n        sum = 0; \\r\\n        for(uint i = 0;   \\r\\n                 i < numbers.length; i++) \\r\\n            sum += numbers[i]; \\r\\n    } \\r\\n}\\r\\n\\r\\n      \"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Ownable", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}