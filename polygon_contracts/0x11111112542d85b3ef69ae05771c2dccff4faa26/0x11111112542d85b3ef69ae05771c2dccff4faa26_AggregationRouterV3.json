{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transa ctions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v3.4.1\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v3.4.1\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/math/SafeMath.sol@v3.4.1\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v3.4.1\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/SafeERC20.sol@v3.4.1\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/helpers/UniERC20.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\nlibrary UniERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 private constant _ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n    IERC20 private constant _ZERO_ADDRESS = IERC20(0);\r\n\r\n    function isETH(IERC20 token) internal pure returns (bool) {\r\n        return (token == _ZERO_ADDRESS || token == _ETH_ADDRESS);\r\n    }\r\n\r\n    function uniBalanceOf(IERC20 token, address account) internal view returns (uint256) {\r\n        if (isETH(token)) {\r\n            return account.balance;\r\n        } else {\r\n            return token.balanceOf(account);\r\n        }\r\n    }\r\n\r\n    function uniTransfer(IERC20 token, address payable to, uint256 amount) internal {\r\n        if (amount > 0) {\r\n            if (isETH(token)) {\r\n                to.transfer(amount);\r\n            } else {\r\n                _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, amount));\r\n            }\r\n        }\r\n    }\r\n\r\n    function uniApprove(IERC20 token, address to, uint256 amount) internal {\r\n        require(!isETH(token), \"Approve called on ETH\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(abi.encodeWithSelector(token.approve.selector, to, amount));\r\n\r\n        if (!success || (returndata.length > 0 && !abi.decode(returndata, (bool)))) {\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, to, 0));\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, to, amount));\r\n        }\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IChi.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface IChi is IERC20 {\r\n    function mint(uint256 value) external;\r\n    function free(uint256 value) external returns (uint256 freed);\r\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IGasDiscountExtension.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface IGasDiscountExtension {\r\n    function calculateGas(uint256 gasUsed, uint256 flags, uint256 calldataLength) external view returns (IChi, uint256);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IAggregationExecutor.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface IAggregationExecutor is IGasDiscountExtension {\r\n    function callBytes(bytes calldata data) external payable;  // 0xd9c45357\r\n}\r\n\r\n\r\n// File contracts/helpers/RevertReasonParser.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\nlibrary RevertReasonParser {\r\n    function parse(bytes memory data, string memory prefix) internal pure returns (string memory) {\r\n        // https://solidity.readthedocs.io/en/latest/control-structures.html#revert\r\n        // We assume that revert reason is abi-encoded as Error(string)\r\n\r\n        // 68 = 4-byte selector 0x08c379a0 + 32 bytes offset + 32 bytes length\r\n        if (data.length >= 68 && data[0] == \"\\x08\" && data[1] == \"\\xc3\" && data[2] == \"\\x79\" && data[3] == \"\\xa0\") {\r\n            string memory reason;\r\n            // solhint-disable no-inline-assembly\r\n            assembly {\r\n                // 68 = 32 bytes data length + 4-byte selector + 32 bytes offset\r\n                reason := add(data, 68)\r\n            }\r\n            /*\r\n                revert reason is padded up to 32 bytes with ABI encoder: Error(string)\r\n                also sometimes there is extra 32 bytes of zeros padded in the end:\r\n                https://github.com/ethereum/solidity/issues/10170\r\n                because of that we can't check for equality and instead check\r\n                that string length + extra 68 bytes is less than overall data length\r\n            */\r\n            require(data.length >= 68 + bytes(reason).length, \"Invalid revert reason\");\r\n            return string(abi.encodePacked(prefix, \"Error(\", reason, \")\"));\r\n        }\r\n        // 36 = 4-byte selector 0x4e487b71 + 32 bytes integer\r\n        else if (data.length == 36 && data[0] == \"\\x4e\" && data[1] == \"\\x48\" && data[2] == \"\\x7b\" && data[3] == \"\\x71\") {\r\n            uint256 code;\r\n            // solhint-disable no-inline-assembly\r\n            assembly {\r\n                // 36 = 32 bytes data length + 4-byte selector\r\n                code := mload(add(data, 36))\r\n            }\r\n            return string(abi.encodePacked(prefix, \"Panic(\", _toHex(code), \")\"));\r\n        }\r\n\r\n        return string(abi.encodePacked(prefix, \"Unknown(\", _toHex(data), \")\"));\r\n    }\r\n\r\n    function _toHex(uint256 value) private pure returns(string memory) {\r\n        return _toHex(abi.encodePacked(value));\r\n    }\r\n\r\n    function _toHex(bytes memory data) private pure returns(string memory) {\r\n        bytes16 alphabet = 0x30313233343536373839616263646566;\r\n        bytes memory str = new bytes(2 + data.length * 2);\r\n        str[0] = \"0\";\r\n        str[1] = \"x\";\r\n        for (uint256 i = 0; i < data.length; i++) {\r\n            str[2 * i + 2] = alphabet[uint8(data[i] >> 4)];\r\n            str[2 * i + 3] = alphabet[uint8(data[i] & 0x0f)];\r\n        }\r\n        return string(str);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IERC20Permit.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\ninterface IERC20Permit {\r\n    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\n\r\n// File contracts/helpers/Permitable.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\ncontract Permitable {\r\n    event Error(\r\n        string reason\r\n    );\r\n\r\n    function _permit(IERC20 token, uint256 amount, bytes calldata permit) internal {\r\n        if (permit.length == 32 * 7) {\r\n            // solhint-disable-next-line avoid-low-level-calls\r\n            (bool success, bytes memory result) = address(token).call(abi.encodePacked(IERC20Permit.permit.selector, permit));\r\n            if (!success) {\r\n                string memory reason = RevertReasonParser.parse(result, \"Permit call failed: \");\r\n                if (token.allowance(msg.sender, address(this)) < amount) {\r\n                    revert(reason);\r\n                } else {\r\n                    emit Error(reason);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/UnoswapRouter.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\ncontract UnoswapRouter is Permitable {\r\n    uint256 private constant _TRANSFER_FROM_CALL_SELECTOR_32 = 0x23b872dd00000000000000000000000000000000000000000000000000000000;\r\n    uint256 private constant _WETH_DEPOSIT_CALL_SELECTOR_32 = 0xd0e30db000000000000000000000000000000000000000000000000000000000;\r\n    uint256 private constant _WETH_WITHDRAW_CALL_SELECTOR_32 = 0x2e1a7d4d00000000000000000000000000000000000000000000000000000000;\r\n    uint256 private constant _ERC20_TRANSFER_CALL_SELECTOR_32 = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\r\n    uint256 private constant _ADDRESS_MASK =   0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff;\r\n    uint256 private constant _REVERSE_MASK =   0x8000000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 private constant _WETH_MASK =      0x4000000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 private constant _NUMERATOR_MASK = 0x0000000000000000ffffffff0000000000000000000000000000000000000000;\r\n    uint256 private constant _WETH = 0x0000000000000000000000000d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;\r\n    uint256 private constant _UNISWAP_PAIR_RESERVES_CALL_SELECTOR_32 = 0x0902f1ac00000000000000000000000000000000000000000000000000000000;\r\n    uint256 private constant _UNISWAP_PAIR_SWAP_CALL_SELECTOR_32 = 0x022c0d9f00000000000000000000000000000000000000000000000000000000;\r\n    uint256 private constant _DENOMINATOR = 1000000000;\r\n    uint256 private constant _NUMERATOR_OFFSET = 160;\r\n\r\n    receive() external payable {\r\n        // solhint-disable-next-line avoid-tx-origin\r\n        require(msg.sender != tx.origin, \"ETH deposit rejected\");\r\n    }\r\n\r\n    function unoswapWithPermit(\r\n        IERC20 srcToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        bytes32[] calldata pools,\r\n        bytes calldata permit\r\n    ) external payable returns(uint256 returnAmount) {\r\n        _permit(srcToken, amount, permit);\r\n        return unoswap(srcToken, amount, minReturn, pools);\r\n    }\r\n\r\n    function unoswap(\r\n        IERC20 srcToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        bytes32[] calldata /* pools */\r\n    ) public payable returns(uint256 returnAmount) {\r\n        assembly {  // solhint-disable-line no-inline-assembly\r\n            function reRevert() {\r\n                returndatacopy(0, 0, returndatasize())\r\n                revert(0, returndatasize())\r\n            }\r\n\r\n            function revertWithReason(m, len) {\r\n                mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\r\n                mstore(0x20, 0x0000002000000000000000000000000000000000000000000000000000000000)\r\n                mstore(0x40, m)\r\n                revert(0, len)\r\n            }\r\n\r\n            function swap(emptyPtr, swapAmount, pair, reversed, numerator, dst) -> ret {\r\n                mstore(emptyPtr, _UNISWAP_PAIR_RESERVES_CALL_SELECTOR_32)\r\n                if iszero(staticcall(gas(), pair, emptyPtr, 0x4, emptyPtr, 0x40)) {\r\n                    reRevert()\r\n                }\r\n\r\n                let reserve0 := mload(emptyPtr)\r\n                let reserve1 := mload(add(emptyPtr, 0x20))\r\n                if reversed {\r\n                    let tmp := reserve0\r\n                    reserve0 := reserve1\r\n                    reserve1 := tmp\r\n                }\r\n                ret := mul(swapAmount, numerator)\r\n                ret := div(mul(ret, reserve1), add(ret, mul(reserve0, _DENOMINATOR)))\r\n\r\n                mstore(emptyPtr, _UNISWAP_PAIR_SWAP_CALL_SELECTOR_32)\r\n                switch reversed\r\n                case 0 {\r\n                    mstore(add(emptyPtr, 0x04), 0)\r\n                    mstore(add(emptyPtr, 0x24), ret)\r\n                }\r\n                default {\r\n                    mstore(add(emptyPtr, 0x04), ret)\r\n                    mstore(add(emptyPtr, 0x24), 0)\r\n                }\r\n                mstore(add(emptyPtr, 0x44), dst)\r\n                mstore(add(emptyPtr, 0x64), 0x80)\r\n                mstore(add(emptyPtr, 0x84), 0)\r\n                if iszero(call(gas(), pair, 0, emptyPtr, 0xa4, 0, 0)) {\r\n                    reRevert()\r\n                }\r\n            }\r\n\r\n            let emptyPtr := mload(0x40)\r\n            mstore(0x40, add(emptyPtr, 0xc0))\r\n\r\n            let poolsOffset := add(calldataload(0x64), 0x4)\r\n            let poolsEndOffset := calldataload(poolsOffset)\r\n            poolsOffset := add(poolsOffset, 0x20)\r\n            poolsEndOffset := add(poolsOffset, mul(0x20, poolsEndOffset))\r\n            let rawPair := calldataload(poolsOffset)\r\n            switch srcToken\r\n            case 0 {\r\n                if iszero(eq(amount, callvalue())) {\r\n                    revertWithReason(0x00000011696e76616c6964206d73672e76616c75650000000000000000000000, 0x55)  // \"invalid msg.value\"\r\n                }\r\n\r\n                mstore(emptyPtr, _WETH_DEPOSIT_CALL_SELECTOR_32)\r\n                if iszero(call(gas(), _WETH, amount, emptyPtr, 0x4, 0, 0)) {\r\n                    reRevert()\r\n                }\r\n\r\n                mstore(emptyPtr, _ERC20_TRANSFER_CALL_SELECTOR_32)\r\n                mstore(add(emptyPtr, 0x4), and(rawPair, _ADDRESS_MASK))\r\n                mstore(add(emptyPtr, 0x24), amount)\r\n                if iszero(call(gas(), _WETH, 0, emptyPtr, 0x44, 0, 0)) {\r\n                    reRevert()\r\n                }\r\n            }\r\n            default {\r\n                if callvalue() {\r\n                    revertWithReason(0x00000011696e76616c6964206d73672e76616c75650000000000000000000000, 0x55)  // \"invalid msg.value\"\r\n                }\r\n\r\n                mstore(emptyPtr, _TRANSFER_FROM_CALL_SELECTOR_32)\r\n                mstore(add(emptyPtr, 0x4), caller())\r\n                mstore(add(emptyPtr, 0x24), and(rawPair, _ADDRESS_MASK))\r\n                mstore(add(emptyPtr, 0x44), amount)\r\n                if iszero(call(gas(), srcToken, 0, emptyPtr, 0x64, 0, 0)) {\r\n                    reRevert()\r\n                }\r\n            }\r\n\r\n            returnAmount := amount\r\n\r\n            for {let i := add(poolsOffset, 0x20)} lt(i, poolsEndOffset) {i := add(i, 0x20)} {\r\n                let nextRawPair := calldataload(i)\r\n\r\n                returnAmount := swap(\r\n                    emptyPtr,\r\n                    returnAmount,\r\n                    and(rawPair, _ADDRESS_MASK),\r\n                    and(rawPair, _REVERSE_MASK),\r\n                    shr(_NUMERATOR_OFFSET, and(rawPair, _NUMERATOR_MASK)),\r\n                    and(nextRawPair, _ADDRESS_MASK)\r\n                )\r\n\r\n                rawPair := nextRawPair\r\n            }\r\n\r\n            switch and(rawPair, _WETH_MASK)\r\n            case 0 {\r\n                returnAmount := swap(\r\n                    emptyPtr,\r\n                    returnAmount,\r\n                    and(rawPair, _ADDRESS_MASK),\r\n                    and(rawPair, _REVERSE_MASK),\r\n                    shr(_NUMERATOR_OFFSET, and(rawPair, _NUMERATOR_MASK)),\r\n                    caller()\r\n                )\r\n            }\r\n            default {\r\n                returnAmount := swap(\r\n                    emptyPtr,\r\n                    returnAmount,\r\n                    and(rawPair, _ADDRESS_MASK),\r\n                    and(rawPair, _REVERSE_MASK),\r\n                    shr(_NUMERATOR_OFFSET, and(rawPair, _NUMERATOR_MASK)),\r\n                    address()\r\n                )\r\n\r\n                mstore(emptyPtr, _WETH_WITHDRAW_CALL_SELECTOR_32)\r\n                mstore(add(emptyPtr, 0x04), returnAmount)\r\n                if iszero(call(gas(), _WETH, 0, emptyPtr, 0x24, 0, 0)) {\r\n                    reRevert()\r\n                }\r\n\r\n                if iszero(call(gas(), caller(), returnAmount, 0, 0, 0, 0)) {\r\n                    reRevert()\r\n                }\r\n            }\r\n\r\n            if lt(returnAmount, minReturn) {\r\n                revertWithReason(0x000000164d696e2072657475726e206e6f742072656163686564000000000000, 0x5a)  // \"Min return not reached\"\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/AggregationRouterV3.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract AggregationRouterV3 is Ownable, UnoswapRouter {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using UniERC20 for IERC20;\r\n\r\n    uint256 private constant _PARTIAL_FILL = 0x01;\r\n    uint256 private constant _REQUIRES_EXTRA_ETH = 0x02;\r\n    uint256 private constant _SHOULD_CLAIM = 0x04;\r\n    uint256 private constant _BURN_FROM_MSG_SENDER = 0x08;\r\n    uint256 private constant _BURN_FROM_TX_ORIGIN = 0x10;\r\n\r\n    struct SwapDescription {\r\n        IERC20 srcToken;\r\n        IERC20 dstToken;\r\n        address srcReceiver;\r\n        address dstReceiver;\r\n        uint256 amount;\r\n        uint256 minReturnAmount;\r\n        uint256 flags;\r\n        bytes permit;\r\n    }\r\n\r\n    event Swapped(\r\n        address sender,\r\n        IERC20 srcToken,\r\n        IERC20 dstToken,\r\n        address dstReceiver,\r\n        uint256 spentAmount,\r\n        uint256 returnAmount\r\n    );\r\n\r\n    function discountedSwap(\r\n        IAggregationExecutor caller,\r\n        SwapDescription calldata desc,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 returnAmount, uint256 gasLeft, uint256 chiSpent)\r\n    {\r\n        uint256 initialGas = gasleft();\r\n\r\n        address chiSource = address(0);\r\n        if (desc.flags & _BURN_FROM_MSG_SENDER != 0) {\r\n            chiSource = msg.sender;\r\n        } else if (desc.flags & _BURN_FROM_TX_ORIGIN != 0) {\r\n            chiSource = tx.origin; // solhint-disable-line avoid-tx-origin\r\n        } else {\r\n            revert(\"Incorrect CHI burn flags\");\r\n        }\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returnData) = address(this).delegatecall(abi.encodeWithSelector(this.swap.selector, caller, desc, data));\r\n        if (success) {\r\n            (returnAmount,) = abi.decode(returnData, (uint256, uint256));\r\n        } else {\r\n            if (msg.value > 0) {\r\n                msg.sender.transfer(msg.value);\r\n            }\r\n            emit Error(RevertReasonParser.parse(returnData, \"Swap failed: \"));\r\n        }\r\n\r\n        (IChi chi, uint256 amount) = caller.calculateGas(initialGas.sub(gasleft()), desc.flags, msg.data.length);\r\n        if (amount > 0) {\r\n            chiSpent = chi.freeFromUpTo(chiSource, amount);\r\n        }\r\n        gasLeft = gasleft();\r\n    }\r\n\r\n    function swap(\r\n        IAggregationExecutor caller,\r\n        SwapDescription calldata desc,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 returnAmount, uint256 gasLeft)\r\n    {\r\n        require(desc.minReturnAmount > 0, \"Min return should not be 0\");\r\n        require(data.length > 0, \"data should be not zero\");\r\n\r\n        uint256 flags = desc.flags;\r\n        IERC20 srcToken = desc.srcToken;\r\n        IERC20 dstToken = desc.dstToken;\r\n\r\n        if (flags & _REQUIRES_EXTRA_ETH != 0) {\r\n            require(msg.value > (srcToken.isETH() ? desc.amount : 0), \"Invalid msg.value\");\r\n        } else {\r\n            require(msg.value == (srcToken.isETH() ? desc.amount : 0), \"Invalid msg.value\");\r\n        }\r\n\r\n        if (flags & _SHOULD_CLAIM != 0) {\r\n            require(!srcToken.isETH(), \"Claim token is ETH\");\r\n            _permit(srcToken, desc.amount, desc.permit);\r\n            srcToken.safeTransferFrom(msg.sender, desc.srcReceiver, desc.amount);\r\n        }\r\n\r\n        address dstReceiver = (desc.dstReceiver == address(0)) ? msg.sender : desc.dstReceiver;\r\n        uint256 initialSrcBalance = (flags & _PARTIAL_FILL != 0) ? srcToken.uniBalanceOf(msg.sender) : 0;\r\n        uint256 initialDstBalance = dstToken.uniBalanceOf(dstReceiver);\r\n\r\n        {\r\n            // solhint-disable-next-line avoid-low-level-calls\r\n            (bool success, bytes memory result) = address(caller).call{value: msg.value}(abi.encodePacked(caller.callBytes.selector, data));\r\n            if (!success) {\r\n                revert(RevertReasonParser.parse(result, \"callBytes failed: \"));\r\n            }\r\n        }\r\n\r\n        uint256 spentAmount = desc.amount;\r\n        returnAmount = dstToken.uniBalanceOf(dstReceiver).sub(initialDstBalance);\r\n\r\n        if (flags & _PARTIAL_FILL != 0) {\r\n            spentAmount = initialSrcBalance.add(desc.amount).sub(srcToken.uniBalanceOf(msg.sender));\r\n            require(returnAmount.mul(desc.amount) >= desc.minReturnAmount.mul(spentAmount), \"Return amount is not enough\");\r\n        } else {\r\n            require(returnAmount >= desc.minReturnAmount, \"Return amount is not enough\");\r\n        }\r\n\r\n        emit Swapped(\r\n            msg.sender,\r\n            srcToken,\r\n            dstToken,\r\n            dstReceiver,\r\n            spentAmount,\r\n            returnAmount\r\n        );\r\n\r\n        gasLeft = gasleft();\r\n    }\r\n\r\n    function rescueFunds(IERC20 token, uint256 amount) external onlyOwner {\r\n        token.uniTransfer(msg.sender, amount);\r\n    }\r\n\r\n    function destroy() external onlyOwner {\r\n        selfdestruct(msg.sender);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"Error\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dstReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spentAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAggregationExecutor\",\"name\":\"caller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"}],\"internalType\":\"struct AggregationRouterV3.SwapDescription\",\"name\":\"desc\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"discountedSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chiSpent\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAggregationExecutor\",\"name\":\"caller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"}],\"internalType\":\"struct AggregationRouterV3.SwapDescription\",\"name\":\"desc\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLeft\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"name\":\"unoswap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"pools\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"}],\"name\":\"unoswapWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AggregationRouterV3", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "1", "Implementation": "0x11111112542d85b3ef69ae05771c2dccff4faa26", "SwarmSource": "ipfs://feeb741eab22366472b671c990b8d9f00980994ef47fc987ed6f27933c7a4f45"}