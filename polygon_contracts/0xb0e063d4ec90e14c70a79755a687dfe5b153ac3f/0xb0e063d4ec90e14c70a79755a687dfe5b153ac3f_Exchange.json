{"SourceCode": "// Sources flattened with hardhat v2.4.0 https://hardhat.org\r\n\r\n// File openzeppelin-solidity/contracts/token/ERC20/IERC20.sol@v2.5.0\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/ISygnumToken.sol\r\n\r\n/**\r\n * @title ISygnumToken\r\n * @notice Interface for custom functionality.\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\ncontract ISygnumToken is IERC20 {\r\n    function block(address _account, uint256 _amount) external;\r\n\r\n    function unblock(address _account, uint256 _amount) external;\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/math/SafeMath.sol@v2.5.0\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/math/Math.sol@v2.5.0\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n\r\n// File @sygnum/solidity-base-contracts/contracts/role/interface/ITraderOperators.sol@v1.0.2\r\n\r\n/**\r\n * @title ITraderOperators\r\n * @notice Interface for TraderOperators contract\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\ncontract ITraderOperators {\r\n    function isTrader(address _account) external view returns (bool);\r\n\r\n    function addTrader(address _account) external;\r\n\r\n    function removeTrader(address _account) external;\r\n}\r\n\r\n\r\n// File @sygnum/solidity-base-contracts/contracts/role/interface/IBaseOperators.sol@v1.0.2\r\n\r\n/**\r\n * @title IBaseOperators\r\n * @notice Interface for BaseOperators contract\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\ninterface IBaseOperators {\r\n    function isOperator(address _account) external view returns (bool);\r\n\r\n    function isAdmin(address _account) external view returns (bool);\r\n\r\n    function isSystem(address _account) external view returns (bool);\r\n\r\n    function isRelay(address _account) external view returns (bool);\r\n\r\n    function isMultisig(address _contract) external view returns (bool);\r\n\r\n    function confirmFor(address _address) external;\r\n\r\n    function addOperator(address _account) external;\r\n\r\n    function removeOperator(address _account) external;\r\n\r\n    function addAdmin(address _account) external;\r\n\r\n    function removeAdmin(address _account) external;\r\n\r\n    function addSystem(address _account) external;\r\n\r\n    function removeSystem(address _account) external;\r\n\r\n    function addRelay(address _account) external;\r\n\r\n    function removeRelay(address _account) external;\r\n\r\n    function addOperatorAndAdmin(address _account) external;\r\n\r\n    function removeOperatorAndAdmin(address _account) external;\r\n}\r\n\r\n\r\n// File @sygnum/solidity-base-contracts/contracts/helpers/Initializable.sol@v1.0.2\r\n\r\npragma solidity 0.5.12;\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private initializing;\r\n\r\n    /**\r\n     * @dev Modifier to use in the initializer function of a contract.\r\n     */\r\n    modifier initializer() {\r\n        require(\r\n            initializing || isConstructor() || !initialized,\r\n            \"Initializable: Contract instance has already been initialized\"\r\n        );\r\n\r\n        bool isTopLevelCall = !initializing;\r\n        if (isTopLevelCall) {\r\n            initializing = true;\r\n            initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        uint256 cs;\r\n        // solhint-disable-next-line\r\n        assembly {\r\n            cs := extcodesize(address)\r\n        }\r\n        return cs == 0;\r\n    }\r\n\r\n    function isInitialized() public view returns (bool) {\r\n        return initialized;\r\n    }\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\n// File @sygnum/solidity-base-contracts/contracts/role/base/Operatorable.sol@v1.0.2\r\n\r\n/**\r\n * @title Operatorable\r\n * @author Team 3301 <team3301@sygnum.com>\r\n * @dev Operatorable contract stores the BaseOperators contract address, and modifiers for\r\n *       contracts.\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\ncontract Operatorable is Initializable {\r\n    IBaseOperators internal operatorsInst;\r\n    address private operatorsPending;\r\n\r\n    event OperatorsContractChanged(address indexed caller, address indexed operatorsAddress);\r\n    event OperatorsContractPending(address indexed caller, address indexed operatorsAddress);\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have operator role associated.\r\n     */\r\n    modifier onlyOperator() {\r\n        require(isOperator(msg.sender), \"Operatorable: caller does not have the operator role\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have admin role associated.\r\n     */\r\n    modifier onlyAdmin() {\r\n        require(isAdmin(msg.sender), \"Operatorable: caller does not have the admin role\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have system role associated.\r\n     */\r\n    modifier onlySystem() {\r\n        require(isSystem(msg.sender), \"Operatorable: caller does not have the system role\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have multisig privileges.\r\n     */\r\n    modifier onlyMultisig() {\r\n        require(isMultisig(msg.sender), \"Operatorable: caller does not have multisig role\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have admin or system role associated.\r\n     */\r\n    modifier onlyAdminOrSystem() {\r\n        require(isAdminOrSystem(msg.sender), \"Operatorable: caller does not have the admin role nor system\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have operator or system role associated.\r\n     */\r\n    modifier onlyOperatorOrSystem() {\r\n        require(isOperatorOrSystem(msg.sender), \"Operatorable: caller does not have the operator role nor system\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have the relay role associated.\r\n     */\r\n    modifier onlyRelay() {\r\n        require(isRelay(msg.sender), \"Operatorable: caller does not have relay role associated\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have relay or operator role associated.\r\n     */\r\n    modifier onlyOperatorOrRelay() {\r\n        require(\r\n            isOperator(msg.sender) || isRelay(msg.sender),\r\n            \"Operatorable: caller does not have the operator role nor relay\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have relay or admin role associated.\r\n     */\r\n    modifier onlyAdminOrRelay() {\r\n        require(\r\n            isAdmin(msg.sender) || isRelay(msg.sender),\r\n            \"Operatorable: caller does not have the admin role nor relay\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have the operator, or system, or relay role associated.\r\n     */\r\n    modifier onlyOperatorOrSystemOrRelay() {\r\n        require(\r\n            isOperator(msg.sender) || isSystem(msg.sender) || isRelay(msg.sender),\r\n            \"Operatorable: caller does not have the operator role nor system nor relay\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initialization instead of constructor, called once. The setOperatorsContract function can be called only by Admin role with\r\n     *       confirmation through the operators contract.\r\n     * @param _baseOperators BaseOperators contract address.\r\n     */\r\n    function initialize(address _baseOperators) public initializer {\r\n        _setOperatorsContract(_baseOperators);\r\n    }\r\n\r\n    /**\r\n     * @dev Set the new the address of Operators contract, should be confirmed from operators contract by calling confirmFor(addr)\r\n     *       where addr is the address of current contract instance. This is done to prevent the case when the new contract address is\r\n     *       broken and control of the contract can be lost in such case\r\n     * @param _baseOperators BaseOperators contract address.\r\n     */\r\n    function setOperatorsContract(address _baseOperators) public onlyAdmin {\r\n        require(_baseOperators != address(0), \"Operatorable: address of new operators contract can not be zero\");\r\n        operatorsPending = _baseOperators;\r\n        emit OperatorsContractPending(msg.sender, _baseOperators);\r\n    }\r\n\r\n    /**\r\n     * @dev The function should be called from new operators contract by admin to ensure that operatorsPending address\r\n     *       is the real contract address.\r\n     */\r\n    function confirmOperatorsContract() public {\r\n        require(operatorsPending != address(0), \"Operatorable: address of new operators contract can not be zero\");\r\n        require(msg.sender == operatorsPending, \"Operatorable: should be called from new operators contract\");\r\n        _setOperatorsContract(operatorsPending);\r\n    }\r\n\r\n    /**\r\n     * @return The address of the BaseOperators contract.\r\n     */\r\n    function getOperatorsContract() public view returns (address) {\r\n        return address(operatorsInst);\r\n    }\r\n\r\n    /**\r\n     * @return The pending address of the BaseOperators contract.\r\n     */\r\n    function getOperatorsPending() public view returns (address) {\r\n        return operatorsPending;\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has operator privileges.\r\n     */\r\n    function isOperator(address _account) public view returns (bool) {\r\n        return operatorsInst.isOperator(_account);\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has admin privileges.\r\n     */\r\n    function isAdmin(address _account) public view returns (bool) {\r\n        return operatorsInst.isAdmin(_account);\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has system privileges.\r\n     */\r\n    function isSystem(address _account) public view returns (bool) {\r\n        return operatorsInst.isSystem(_account);\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has relay privileges.\r\n     */\r\n    function isRelay(address _account) public view returns (bool) {\r\n        return operatorsInst.isRelay(_account);\r\n    }\r\n\r\n    /**\r\n     * @return If '_contract' has multisig privileges.\r\n     */\r\n    function isMultisig(address _contract) public view returns (bool) {\r\n        return operatorsInst.isMultisig(_contract);\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has admin or system privileges.\r\n     */\r\n    function isAdminOrSystem(address _account) public view returns (bool) {\r\n        return (operatorsInst.isAdmin(_account) || operatorsInst.isSystem(_account));\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has operator or system privileges.\r\n     */\r\n    function isOperatorOrSystem(address _account) public view returns (bool) {\r\n        return (operatorsInst.isOperator(_account) || operatorsInst.isSystem(_account));\r\n    }\r\n\r\n    /** INTERNAL FUNCTIONS */\r\n    function _setOperatorsContract(address _baseOperators) internal {\r\n        require(_baseOperators != address(0), \"Operatorable: address of new operators contract cannot be zero\");\r\n        operatorsInst = IBaseOperators(_baseOperators);\r\n        emit OperatorsContractChanged(msg.sender, _baseOperators);\r\n    }\r\n}\r\n\r\n\r\n// File @sygnum/solidity-base-contracts/contracts/role/trader/TraderOperatorable.sol@v1.0.2\r\n\r\n/**\r\n * @title TraderOperatorable\r\n * @author Team 3301 <team3301@sygnum.com>\r\n * @dev TraderOperatorable contract stores TraderOperators contract address, and modifiers for\r\n *      contracts.\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\ncontract TraderOperatorable is Operatorable {\r\n    ITraderOperators internal traderOperatorsInst;\r\n    address private traderOperatorsPending;\r\n\r\n    event TraderOperatorsContractChanged(address indexed caller, address indexed traderOperatorsAddress);\r\n    event TraderOperatorsContractPending(address indexed caller, address indexed traderOperatorsAddress);\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have the trader role associated.\r\n     */\r\n    modifier onlyTrader() {\r\n        require(isTrader(msg.sender), \"TraderOperatorable: caller is not trader\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if sender does not have the operator or trader role associated.\r\n     */\r\n    modifier onlyOperatorOrTraderOrSystem() {\r\n        require(\r\n            isOperator(msg.sender) || isTrader(msg.sender) || isSystem(msg.sender),\r\n            \"TraderOperatorable: caller is not trader or operator or system\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initialization instead of constructor, called once. The setTradersOperatorsContract function can be called only by Admin role with\r\n     * confirmation through the operators contract.\r\n     * @param _baseOperators BaseOperators contract address.\r\n     * @param _traderOperators TraderOperators contract address.\r\n     */\r\n    function initialize(address _baseOperators, address _traderOperators) public initializer {\r\n        super.initialize(_baseOperators);\r\n        _setTraderOperatorsContract(_traderOperators);\r\n    }\r\n\r\n    /**\r\n     * @dev Set the new the address of Operators contract, should be confirmed from operators contract by calling confirmFor(addr)\r\n     * where addr is the address of current contract instance. This is done to prevent the case when the new contract address is\r\n     * broken and control of the contract can be lost in such case\r\n     * @param _traderOperators TradeOperators contract address.\r\n     */\r\n    function setTraderOperatorsContract(address _traderOperators) public onlyAdmin {\r\n        require(\r\n            _traderOperators != address(0),\r\n            \"TraderOperatorable: address of new traderOperators contract can not be zero\"\r\n        );\r\n        traderOperatorsPending = _traderOperators;\r\n        emit TraderOperatorsContractPending(msg.sender, _traderOperators);\r\n    }\r\n\r\n    /**\r\n     * @dev The function should be called from new operators contract by admin to insure that traderOperatorsPending address\r\n     *       is the real contract address.\r\n     */\r\n    function confirmTraderOperatorsContract() public {\r\n        require(\r\n            traderOperatorsPending != address(0),\r\n            \"TraderOperatorable: address of pending traderOperators contract can not be zero\"\r\n        );\r\n        require(\r\n            msg.sender == traderOperatorsPending,\r\n            \"TraderOperatorable: should be called from new traderOperators contract\"\r\n        );\r\n        _setTraderOperatorsContract(traderOperatorsPending);\r\n    }\r\n\r\n    /**\r\n     * @return The address of the TraderOperators contract.\r\n     */\r\n    function getTraderOperatorsContract() public view returns (address) {\r\n        return address(traderOperatorsInst);\r\n    }\r\n\r\n    /**\r\n     * @return The pending TraderOperators contract address\r\n     */\r\n    function getTraderOperatorsPending() public view returns (address) {\r\n        return traderOperatorsPending;\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' has trader privileges.\r\n     */\r\n    function isTrader(address _account) public view returns (bool) {\r\n        return traderOperatorsInst.isTrader(_account);\r\n    }\r\n\r\n    /** INTERNAL FUNCTIONS */\r\n    function _setTraderOperatorsContract(address _traderOperators) internal {\r\n        require(\r\n            _traderOperators != address(0),\r\n            \"TraderOperatorable: address of new traderOperators contract can not be zero\"\r\n        );\r\n        traderOperatorsInst = ITraderOperators(_traderOperators);\r\n        emit TraderOperatorsContractChanged(msg.sender, _traderOperators);\r\n    }\r\n}\r\n\r\n\r\n// File @sygnum/solidity-base-contracts/contracts/helpers/Pausable.sol@v1.0.2\r\n\r\n/**\r\n * @title Pausable\r\n * @author Team 3301 <team3301@sygnum.com>\r\n * @dev Contract module which allows children to implement an emergency stop\r\n *      mechanism that can be triggered by an authorized account in the TraderOperatorable\r\n *      contract.\r\n */\r\npragma solidity 0.5.12;\r\n\r\ncontract Pausable is TraderOperatorable {\r\n    event Paused(address indexed account);\r\n    event Unpaused(address indexed account);\r\n\r\n    bool internal _paused;\r\n\r\n    constructor() internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if contract is paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by operator to pause child contract. The contract\r\n     *      must not already be paused.\r\n     */\r\n    function pause() public onlyOperatorOrTraderOrSystem whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /** @dev Called by operator to pause child contract. The contract\r\n     *       must already be paused.\r\n     */\r\n    function unpause() public onlyOperatorOrTraderOrSystem whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @return If child contract is already paused or not.\r\n     */\r\n    function isPaused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @return If child contract is not paused.\r\n     */\r\n    function isNotPaused() public view returns (bool) {\r\n        return !_paused;\r\n    }\r\n}\r\n\r\n\r\n// File @sygnum/solidity-base-contracts/contracts/libraries/Bytes32Set.sol@v1.0.2\r\n\r\npragma solidity 0.5.12;\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n// https://github.com/rob-Hitchens/SetTypes/blob/master/contracts/Bytes32Set.sol\r\n\r\nlibrary Bytes32Set {\r\n    struct Set {\r\n        mapping(bytes32 => uint256) keyPointers;\r\n        bytes32[] keyList;\r\n    }\r\n\r\n    /**\r\n     * @notice insert a key.\r\n     * @dev duplicate keys are not permitted.\r\n     * @param self storage pointer to a Set.\r\n     * @param key value to insert.\r\n     */\r\n    function insert(Set storage self, bytes32 key) internal {\r\n        require(!exists(self, key), \"Bytes32Set: key already exists in the set.\");\r\n        self.keyPointers[key] = self.keyList.length;\r\n        self.keyList.push(key);\r\n    }\r\n\r\n    /**\r\n     * @notice remove a key.\r\n     * @dev key to remove must exist.\r\n     * @param self storage pointer to a Set.\r\n     * @param key value to remove.\r\n     */\r\n    function remove(Set storage self, bytes32 key) internal {\r\n        require(exists(self, key), \"Bytes32Set: key does not exist in the set.\");\r\n        uint256 last = count(self) - 1;\r\n        uint256 rowToReplace = self.keyPointers[key];\r\n        if (rowToReplace != last) {\r\n            bytes32 keyToMove = self.keyList[last];\r\n            self.keyPointers[keyToMove] = rowToReplace;\r\n            self.keyList[rowToReplace] = keyToMove;\r\n        }\r\n        delete self.keyPointers[key];\r\n        self.keyList.pop();\r\n    }\r\n\r\n    /**\r\n     * @notice count the keys.\r\n     * @param self storage pointer to a Set.\r\n     */\r\n    function count(Set storage self) internal view returns (uint256) {\r\n        return (self.keyList.length);\r\n    }\r\n\r\n    /**\r\n     * @notice check if a key is in the Set.\r\n     * @param self storage pointer to a Set.\r\n     * @param key value to check.\r\n     * @return bool true: Set member, false: not a Set member.\r\n     */\r\n    function exists(Set storage self, bytes32 key) internal view returns (bool) {\r\n        if (self.keyList.length == 0) return false;\r\n        return self.keyList[self.keyPointers[key]] == key;\r\n    }\r\n\r\n    /**\r\n     * @notice fetch a key by row (enumerate).\r\n     * @param self storage pointer to a Set.\r\n     * @param index row to enumerate. Must be < count() - 1.\r\n     */\r\n    function keyAtIndex(Set storage self, uint256 index) internal view returns (bytes32) {\r\n        return self.keyList[index];\r\n    }\r\n}\r\n\r\n\r\n// File @sygnum/solidity-base-contracts/contracts/helpers/TradingPairWhitelist.sol@v1.0.2\r\n\r\n/**\r\n * @title TradingPairWhitelist\r\n * @author Team 3301 <team3301@sygnum.com>\r\n * @dev TradingPairWhitelist contract that allows particular trading pairs available within the DEX.  Whitelisting/unwhitelisting\r\n *       is controlled by operators in Operatorable contract which is initialized with the relevant BaseOperators address.\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\ncontract TradingPairWhitelist is TraderOperatorable {\r\n    using Bytes32Set for Bytes32Set.Set;\r\n\r\n    Bytes32Set.Set internal pairs;\r\n    mapping(bytes32 => Pair) public pair;\r\n    mapping(address => mapping(address => bytes32)) public pairIdentifier;\r\n\r\n    struct Pair {\r\n        bool paired;\r\n        bool frozen;\r\n        address buyToken;\r\n        address sellToken;\r\n    }\r\n\r\n    event PairedTokens(bytes32 indexed pairID, address indexed buytoken, address indexed sellToken);\r\n    event DepairedTokens(bytes32 indexed pairID, address indexed buytoken, address indexed sellToken);\r\n    event FrozenPair(bytes32 indexed pairID);\r\n    event UnFrozenPair(bytes32 indexed pairID);\r\n\r\n    /**\r\n     * @dev Reverts if _buyToken and _sellToken are not paired.\r\n     * @param _buyToken buy token against sell token to determine if whitelisted pair or not.\r\n     * @param _sellToken sell token against buy token to determine if whitelisted pair or not.\r\n     */\r\n    modifier onlyPaired(address _buyToken, address _sellToken) {\r\n        require(isPaired(_buyToken, _sellToken), \"TradingPairWhitelist: pair is not whitelisted\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if _buyToken and _sellToken are frozen.\r\n     * @param _buyToken buy token against sell token to determine if frozen pair or not.\r\n     * @param _sellToken sell token against buy token to determine if frozen pair or not.\r\n     */\r\n    modifier whenNotFrozen(address _buyToken, address _sellToken) {\r\n        require(!isFrozen(_buyToken, _sellToken), \"TradingPairWhitelist: pair is frozen\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter to determine if pairs are whitelisted.\r\n     * @param _buyToken buy token against sell token to determine if whitelisted pair or not.\r\n     * @param _sellToken sell token against buy token to determine if whitelisted pair or not.\r\n     * @return bool is whitelisted pair.\r\n     */\r\n    function isPaired(address _buyToken, address _sellToken) public view returns (bool) {\r\n        return pair[pairIdentifier[_buyToken][_sellToken]].paired;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter to determine if pairs are frozen.\r\n     * @param _buyToken buy token against sell token to determine if frozen pair or not.\r\n     * @param _sellToken sell token against buy token to determine if frozen pair or not.\r\n     * @return bool is frozen pair.\r\n     */\r\n    function isFrozen(address _buyToken, address _sellToken) public view returns (bool) {\r\n        return pair[pairIdentifier[_buyToken][_sellToken]].frozen;\r\n    }\r\n\r\n    /**\r\n     * @dev Pair tokens to be available for trading on DEX.\r\n     * @param _pairID pair identifier.\r\n     * @param _buyToken buy token against sell token to whitelist.\r\n     * @param _sellToken sell token against buy token to whitelist.\r\n     */\r\n    function pairTokens(\r\n        bytes32 _pairID,\r\n        address _buyToken,\r\n        address _sellToken\r\n    ) public onlyOperator {\r\n        _pairTokens(_pairID, _buyToken, _sellToken);\r\n    }\r\n\r\n    /**\r\n     * @dev Depair tokens to be available for trading on DEX.\r\n     * @param _pairID pair identifier.\r\n     */\r\n    function depairTokens(bytes32 _pairID) public onlyOperator {\r\n        _depairTokens(_pairID);\r\n    }\r\n\r\n    /**\r\n     * @dev Freeze pair trading on DEX.\r\n     * @param _pairID pair identifier.\r\n     */\r\n    function freezePair(bytes32 _pairID) public onlyOperatorOrTraderOrSystem {\r\n        _freezePair(_pairID);\r\n    }\r\n\r\n    /**\r\n     * @dev Unfreeze pair trading on DEX.\r\n     * @param _pairID pair identifier.\r\n     */\r\n    function unfreezePair(bytes32 _pairID) public onlyOperatorOrTraderOrSystem {\r\n        _unfreezePair(_pairID);\r\n    }\r\n\r\n    /**\r\n     * @dev Batch pair tokens.\r\n     * @param _pairID array of pairID.\r\n     * @param _buyToken address array of buyToken.\r\n     * @param _sellToken address array of buyToken.\r\n     */\r\n    function batchPairTokens(\r\n        bytes32[] memory _pairID,\r\n        address[] memory _buyToken,\r\n        address[] memory _sellToken\r\n    ) public onlyOperator {\r\n        require(_pairID.length <= 256, \"TradingPairWhitelist: batch count is greater than 256\");\r\n        require(\r\n            _pairID.length == _buyToken.length && _buyToken.length == _sellToken.length,\r\n            \"TradingPairWhitelist: array lengths not equal\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < _buyToken.length; i++) {\r\n            _pairTokens(_pairID[i], _buyToken[i], _sellToken[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Batch depair tokens.\r\n     * @param _pairID array of pairID.\r\n     */\r\n    function batchDepairTokens(bytes32[] memory _pairID) public onlyOperator {\r\n        require(_pairID.length <= 256, \"TradingPairWhitelist: batch count is greater than 256\");\r\n\r\n        for (uint256 i = 0; i < _pairID.length; i++) {\r\n            _depairTokens(_pairID[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Batch freeze tokens.\r\n     * @param _pairID array of pairID.\r\n     */\r\n    function batchFreezeTokens(bytes32[] memory _pairID) public onlyOperatorOrTraderOrSystem {\r\n        require(_pairID.length <= 256, \"TradingPairWhitelist: batch count is greater than 256\");\r\n\r\n        for (uint256 i = 0; i < _pairID.length; i++) {\r\n            _freezePair(_pairID[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Batch unfreeze tokens.\r\n     * @param _pairID array of pairID.\r\n     */\r\n    function batchUnfreezeTokens(bytes32[] memory _pairID) public onlyOperatorOrTraderOrSystem {\r\n        require(_pairID.length <= 256, \"TradingPairWhitelist: batch count is greater than 256\");\r\n\r\n        for (uint256 i = 0; i < _pairID.length; i++) {\r\n            _unfreezePair(_pairID[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return Amount of pairs.\r\n     */\r\n    function getPairCount() public view returns (uint256) {\r\n        return pairs.count();\r\n    }\r\n\r\n    /**\r\n     * @return Key at index.\r\n     */\r\n    function getIdentifier(uint256 _index) public view returns (bytes32) {\r\n        return pairs.keyAtIndex(_index);\r\n    }\r\n\r\n    /** INTERNAL FUNCTIONS */\r\n    function _pairTokens(\r\n        bytes32 _pairID,\r\n        address _buyToken,\r\n        address _sellToken\r\n    ) internal {\r\n        require(_buyToken != address(0) && _sellToken != address(0), \"TradingPairWhitelist: tokens cannot be empty\");\r\n        require(_buyToken != _sellToken, \"TradingPairWhitelist: buy and sell tokens cannot be the same\");\r\n        require(!isPaired(_buyToken, _sellToken), \"TradingPairWhitelist: tokens have already been paired\");\r\n        require(!pairs.exists(_pairID), \"TradingPairWhitelist: pair ID exists\");\r\n\r\n        pair[_pairID] = Pair({paired: true, frozen: false, buyToken: _buyToken, sellToken: _sellToken});\r\n\r\n        pairs.insert(_pairID);\r\n        pairIdentifier[_buyToken][_sellToken] = _pairID;\r\n        emit PairedTokens(_pairID, _buyToken, _sellToken);\r\n    }\r\n\r\n    function _depairTokens(bytes32 _pairID) internal {\r\n        require(pairs.exists(_pairID), \"TradingPairWhitelist: pair ID not does not exist\");\r\n\r\n        Pair memory p = pair[_pairID];\r\n\r\n        delete pair[_pairID];\r\n        pairs.remove(_pairID);\r\n        delete pairIdentifier[p.buyToken][p.sellToken];\r\n        emit DepairedTokens(_pairID, p.buyToken, p.sellToken);\r\n    }\r\n\r\n    function _freezePair(bytes32 _pairID) internal {\r\n        require(pairs.exists(_pairID), \"TradingPairWhitelist: pair ID not does not exist\");\r\n        require(!pair[_pairID].frozen, \"TradingPairWhitelist: token pair is frozen\");\r\n\r\n        pair[_pairID].frozen = true;\r\n        emit FrozenPair(_pairID);\r\n    }\r\n\r\n    function _unfreezePair(bytes32 _pairID) internal {\r\n        require(pairs.exists(_pairID), \"TradingPairWhitelist: pair ID not does not exist\");\r\n        require(pair[_pairID].frozen, \"TradingPairWhitelist: token pair is not frozen\");\r\n\r\n        pair[_pairID].frozen = false;\r\n        emit UnFrozenPair(_pairID);\r\n    }\r\n}\r\n\r\n\r\n// File @sygnum/solidity-base-contracts/contracts/helpers/interface/IWhitelist.sol@v1.0.2\r\n\r\npragma solidity 0.5.12;\r\n\r\n/**\r\n * @title IWhitelist\r\n * @notice Interface for Whitelist contract\r\n */\r\ncontract IWhitelist {\r\n    function isWhitelisted(address _account) external view returns (bool);\r\n\r\n    function toggleWhitelist(address _account, bool _toggled) external;\r\n}\r\n\r\n\r\n// File @sygnum/solidity-base-contracts/contracts/helpers/instance/Whitelistable.sol@v1.0.2\r\n\r\n/**\r\n * @title Whitelistable\r\n * @author Team 3301 <team3301@sygnum.com>\r\n * @dev Whitelistable contract stores the Whitelist contract address, and modifiers for\r\n *       contracts.\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\n\r\ncontract Whitelistable is Initializable, Operatorable {\r\n    IWhitelist internal whitelistInst;\r\n    address private whitelistPending;\r\n\r\n    event WhitelistContractChanged(address indexed caller, address indexed whitelistAddress);\r\n    event WhitelistContractPending(address indexed caller, address indexed whitelistAddress);\r\n\r\n    /**\r\n     * @dev Reverts if _account is not whitelisted.\r\n     * @param _account address to determine if whitelisted.\r\n     */\r\n    modifier whenWhitelisted(address _account) {\r\n        require(isWhitelisted(_account), \"Whitelistable: account is not whitelisted\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initialization instead of constructor, called once. The setWhitelistContract function can be called only by Admin role with\r\n     *       confirmation through the whitelist contract.\r\n     * @param _whitelist Whitelist contract address.\r\n     * @param _baseOperators BaseOperators contract address.\r\n     */\r\n    function initialize(address _baseOperators, address _whitelist) public initializer {\r\n        _setOperatorsContract(_baseOperators);\r\n        _setWhitelistContract(_whitelist);\r\n    }\r\n\r\n    /**\r\n     * @dev Set the new the address of Whitelist contract, should be confirmed from whitelist contract by calling confirmFor(addr)\r\n     *       where addr is the address of current contract instance. This is done to prevent the case when the new contract address is\r\n     *       broken and control of the contract can be lost in such case\r\n     * @param _whitelist Whitelist contract address.\r\n     */\r\n    function setWhitelistContract(address _whitelist) public onlyAdmin {\r\n        require(_whitelist != address(0), \"Whitelistable: address of new whitelist contract can not be zero\");\r\n        whitelistPending = _whitelist;\r\n        emit WhitelistContractPending(msg.sender, _whitelist);\r\n    }\r\n\r\n    /**\r\n     * @dev The function should be called from new whitelist contract by admin to insure that whitelistPending address\r\n     *       is the real contract address.\r\n     */\r\n    function confirmWhitelistContract() public {\r\n        require(whitelistPending != address(0), \"Whitelistable: address of new whitelist contract can not be zero\");\r\n        require(msg.sender == whitelistPending, \"Whitelistable: should be called from new whitelist contract\");\r\n        _setWhitelistContract(whitelistPending);\r\n    }\r\n\r\n    /**\r\n     * @return The address of the Whitelist contract.\r\n     */\r\n    function getWhitelistContract() public view returns (address) {\r\n        return address(whitelistInst);\r\n    }\r\n\r\n    /**\r\n     * @return The pending address of the Whitelist contract.\r\n     */\r\n    function getWhitelistPending() public view returns (address) {\r\n        return whitelistPending;\r\n    }\r\n\r\n    /**\r\n     * @return If '_account' is whitelisted.\r\n     */\r\n    function isWhitelisted(address _account) public view returns (bool) {\r\n        return whitelistInst.isWhitelisted(_account);\r\n    }\r\n\r\n    /** INTERNAL FUNCTIONS */\r\n    function _setWhitelistContract(address _whitelist) internal {\r\n        require(_whitelist != address(0), \"Whitelistable: address of new whitelist contract cannot be zero\");\r\n        whitelistInst = IWhitelist(_whitelist);\r\n        emit WhitelistContractChanged(msg.sender, _whitelist);\r\n    }\r\n}\r\n\r\n\r\n// File @sygnum/solidity-base-contracts/contracts/helpers/interface/IWhitelistable.sol@v1.0.2\r\n\r\npragma solidity 0.5.12;\r\n\r\n/**\r\n * @title IWhitelistable\r\n * @notice Interface for whitelistable contract.\r\n */\r\ncontract IWhitelistable {\r\n    function confirmWhitelistContract() external;\r\n}\r\n\r\n\r\n// File @sygnum/solidity-base-contracts/contracts/helpers/Whitelist.sol@v1.0.2\r\n\r\n/**\r\n * @title Whitelist\r\n * @author Team 3301 <team3301@sygnum.com>\r\n * @dev Whitelist contract with whitelist/unwhitelist functionality for particular addresses.  Whitelisting/unwhitelisting\r\n *      is controlled by operators/system/relays in Operatorable contract.\r\n */\r\n\r\npragma solidity 0.5.12;\r\n\r\n\r\ncontract Whitelist is Operatorable {\r\n    mapping(address => bool) public whitelisted;\r\n\r\n    event WhitelistToggled(address indexed account, bool whitelisted);\r\n\r\n    /**\r\n     * @dev Reverts if _account is not whitelisted.\r\n     * @param _account address to determine if whitelisted.\r\n     */\r\n    modifier whenWhitelisted(address _account) {\r\n        require(isWhitelisted(_account), \"Whitelist: account is not whitelisted\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if address is empty.\r\n     * @param _address address to validate.\r\n     */\r\n    modifier onlyValidAddress(address _address) {\r\n        require(_address != address(0), \"Whitelist: invalid address\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter to determine if address is whitelisted.\r\n     * @param _account address to determine if whitelisted or not.\r\n     * @return bool is whitelisted\r\n     */\r\n    function isWhitelisted(address _account) public view returns (bool) {\r\n        return whitelisted[_account];\r\n    }\r\n\r\n    /**\r\n     * @dev Toggle whitelisted/unwhitelisted on _account address, with _toggled being true/false.\r\n     * @param _account address to toggle.\r\n     * @param _toggled whitelist/unwhitelist.\r\n     */\r\n    function toggleWhitelist(address _account, bool _toggled)\r\n        public\r\n        onlyValidAddress(_account)\r\n        onlyOperatorOrSystemOrRelay\r\n    {\r\n        whitelisted[_account] = _toggled;\r\n        emit WhitelistToggled(_account, whitelisted[_account]);\r\n    }\r\n\r\n    /**\r\n     * @dev Batch whitelisted/unwhitelist multiple addresses, with _toggled being true/false.\r\n     * @param _addresses address array.\r\n     * @param _toggled whitelist/unwhitelist.\r\n     */\r\n    function batchToggleWhitelist(address[] memory _addresses, bool _toggled) public {\r\n        require(_addresses.length <= 256, \"Whitelist: batch count is greater than 256\");\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            toggleWhitelist(_addresses[i], _toggled);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Confirms whitelist contract address once active.\r\n     * @param _address Whitelistable contract addres.\r\n     */\r\n    function confirmFor(address _address) public onlyAdmin {\r\n        require(_address != address(0), \"Whitelist: address cannot be empty\");\r\n        IWhitelistable(_address).confirmWhitelistContract();\r\n    }\r\n}\r\n\r\n\r\n// File contracts/dex/Exchange.sol\r\n\r\n/**\r\n * @title Exchange.\r\n * @author Team 3301 <team3301@sygnum.com>\r\n * @dev Users can make/cancel an order and take one or multiple orders.\r\n */\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Exchange is Pausable, TradingPairWhitelist {\r\n    using Bytes32Set for Bytes32Set.Set;\r\n    using SafeMath for uint256;\r\n    using Math for uint256;\r\n\r\n    struct Order {\r\n        address maker; // account of the order maker.\r\n        address specificTaker; // address of a taker, if applies.\r\n        bool isComplete; // false: partial order; true: complete order;\r\n        ISygnumToken sellToken; // token that the order maker sells\r\n        uint256 sellAmount; // total amount of token planned to be sold by the maker\r\n        ISygnumToken buyToken; // token that the order maker buys\r\n        uint256 buyAmount; // total amount of token planned to be bought by the maker\r\n    }\r\n\r\n    Bytes32Set.Set internal orders;\r\n    mapping(bytes32 => Order) public order;\r\n\r\n    event MadeOrder(\r\n        bytes32 indexed orderID,\r\n        ISygnumToken indexed sellToken,\r\n        ISygnumToken indexed buyToken,\r\n        address maker,\r\n        address specificTaker,\r\n        bool isComplete,\r\n        uint256 sellAmount,\r\n        uint256 buyAmount\r\n    );\r\n\r\n    event MadeOrderParticipants(bytes32 indexed orderID, address indexed maker, address indexed specificTaker);\r\n\r\n    event TakenOrder(\r\n        bytes32 indexed orderID,\r\n        ISygnumToken indexed purchasedToken,\r\n        ISygnumToken indexed paidToken,\r\n        address maker,\r\n        address taker,\r\n        uint256 purchasedAmount,\r\n        uint256 paidAmount // computed amount of tokens paid by the taker\r\n    );\r\n\r\n    event TakenOrderParticipants(bytes32 indexed orderID, address indexed maker, address indexed taker);\r\n\r\n    event CancelledOrder(\r\n        bytes32 indexed orderID,\r\n        address killer,\r\n        ISygnumToken indexed sellToken,\r\n        ISygnumToken indexed buyToken\r\n    );\r\n\r\n    /**\r\n     * @dev Reverts if length is not within range\r\n     */\r\n    modifier checkBatchLength(uint256 length) {\r\n        require(length > 1, \"Exchange: Fewer than two orders\");\r\n        require(length < 256, \"Exchange: Too many orders\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if current block less than time-out block number\r\n     */\r\n    modifier checkTimeOut(uint256 timeOutBlockNumber) {\r\n        require(block.number <= timeOutBlockNumber, \"Exchange: timeout\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Take orders by their orderID.\r\n     * @param orderIDs Array of order ids to be taken.\r\n     * @param buyers Array of buyers.\r\n     * @param quantity Array of quantity per purchase.\r\n     * @param timeOutBlockNumber Time-out block number.\r\n     */\r\n    function takeOrders(\r\n        bytes32[] calldata orderIDs,\r\n        address[] calldata buyers,\r\n        uint256[] calldata quantity,\r\n        uint256 timeOutBlockNumber\r\n    ) external whenNotPaused checkBatchLength(orderIDs.length) checkTimeOut(timeOutBlockNumber) {\r\n        require(\r\n            orderIDs.length == buyers.length && buyers.length == quantity.length,\r\n            \"Exchange: orders and buyers not equal\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < orderIDs.length; i = i + 1) {\r\n            takeOrder(orderIDs[i], buyers[i], quantity[i], timeOutBlockNumber);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Cancel orders by their orderID.\r\n     * @param orderIDs Array of order ids to be taken.\r\n     */\r\n    function cancelOrders(bytes32[] calldata orderIDs) external checkBatchLength(orderIDs.length) {\r\n        for (uint256 i = 0; i < orderIDs.length; i = i + 1) {\r\n            cancelOrder(orderIDs[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Let investor make an order, providing the approval is done beforehand.\r\n     * @param isComplete If this order can be filled partially (by default), or can only been taken as a whole.\r\n     * @param sellToken Address of the token to be sold in this order.\r\n     * @param sellAmount Total amount of token that is planned to be sold in this order.\r\n     * @param buyToken Address of the token to be purchased in this order.\r\n     * @param buyAmount Total amount of token planned to be bought by the maker\r\n     * @param timeOutBlockNumber Time-out block number.\r\n     */\r\n    function makeOrder(\r\n        bytes32 orderID,\r\n        address specificTaker, // if no one, just pass address(0)\r\n        address seller,\r\n        bool isComplete,\r\n        ISygnumToken sellToken,\r\n        uint256 sellAmount,\r\n        ISygnumToken buyToken,\r\n        uint256 buyAmount,\r\n        uint256 timeOutBlockNumber\r\n    )\r\n        public\r\n        whenNotPaused\r\n        checkTimeOut(timeOutBlockNumber)\r\n        onlyPaired(address(buyToken), address(sellToken))\r\n        whenNotFrozen(address(buyToken), address(sellToken))\r\n    {\r\n        address _seller = isTrader(msg.sender) ? seller : msg.sender;\r\n        _makeOrder(orderID, specificTaker, _seller, isComplete, sellToken, sellAmount, buyToken, buyAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Take an order by its orderID.\r\n     * @param orderID Order ID.\r\n     * @param quantity The amount of 'sellToken' that the taker wants to purchase.\r\n     * @param timeOutBlockNumber Time-out block number.\r\n     */\r\n    function takeOrder(\r\n        bytes32 orderID,\r\n        address seller,\r\n        uint256 quantity,\r\n        uint256 timeOutBlockNumber\r\n    ) public whenNotPaused checkTimeOut(timeOutBlockNumber) {\r\n        address _buyer = isTrader(msg.sender) ? seller : msg.sender;\r\n        _takeOrder(orderID, _buyer, quantity);\r\n    }\r\n\r\n    /**\r\n     * @dev Cancel an order by its maker or a trader.\r\n     * @param orderID Order ID.\r\n     */\r\n    function cancelOrder(bytes32 orderID) public {\r\n        require(orders.exists(orderID), \"Exchange: order ID does not exist\");\r\n        Order memory theOrder = order[orderID];\r\n        require(\r\n            isTrader(msg.sender) || (isNotPaused() && theOrder.maker == msg.sender),\r\n            \"Exchange: not eligible to cancel this order or the exchange is paused\"\r\n        );\r\n        theOrder.sellToken.unblock(theOrder.maker, theOrder.sellAmount);\r\n        orders.remove(orderID);\r\n        delete order[orderID];\r\n        emit CancelledOrder(orderID, msg.sender, theOrder.sellToken, theOrder.buyToken);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal take order\r\n     * @param orderID Order ID.\r\n     * @param buyer Address of a seller, if applies.\r\n     * @param quantity Amount to purchase.\r\n     */\r\n    function _takeOrder(\r\n        bytes32 orderID,\r\n        address buyer,\r\n        uint256 quantity\r\n    ) private {\r\n        require(orders.exists(orderID), \"Exchange: order ID does not exist\");\r\n        require(buyer != address(0), \"Exchange: buyer cannot be set to an empty address\");\r\n        require(quantity > 0, \"Exchange: quantity cannot be zero\");\r\n        Order memory theOrder = order[orderID];\r\n        require(\r\n            theOrder.specificTaker == address(0) || theOrder.specificTaker == buyer,\r\n            \"Exchange: not specific taker\"\r\n        );\r\n        require(!isFrozen(address(theOrder.buyToken), address(theOrder.sellToken)), \"Exchange: tokens are frozen\");\r\n        uint256 spend = 0;\r\n        uint256 receive = 0;\r\n        if (quantity >= theOrder.sellAmount) {\r\n            // take the entire order anyway\r\n            spend = theOrder.buyAmount;\r\n            receive = theOrder.sellAmount;\r\n            orders.remove(orderID);\r\n            delete order[orderID];\r\n        } else {\r\n            // check if partial order is possible or not.\r\n            require(!theOrder.isComplete, \"Cannot take a complete order partially\");\r\n            spend = quantity.mul(theOrder.buyAmount).div(theOrder.sellAmount);\r\n            receive = quantity;\r\n            order[orderID].sellAmount = theOrder.sellAmount.sub(receive);\r\n            order[orderID].buyAmount = theOrder.buyAmount.sub(spend);\r\n        }\r\n\r\n        require(\r\n            theOrder.buyToken.allowance(buyer, address(this)) >= spend,\r\n            \"Exchange: sender buy allowance is not sufficient\"\r\n        );\r\n        theOrder.buyToken.transferFrom(buyer, theOrder.maker, spend);\r\n\r\n        require(\r\n            theOrder.sellToken.allowance(theOrder.maker, address(this)) >= receive,\r\n            \"Exchange: allowance is greater than receiving\"\r\n        );\r\n        theOrder.sellToken.unblock(theOrder.maker, receive);\r\n        theOrder.sellToken.transferFrom(theOrder.maker, buyer, receive);\r\n        emit TakenOrder(orderID, theOrder.buyToken, theOrder.sellToken, theOrder.maker, buyer, spend, receive);\r\n        emit TakenOrderParticipants(orderID, theOrder.maker, buyer);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal make order\r\n     * @param orderID Order ID.\r\n     * @param specificTaker Address of a taker, if applies.\r\n     * @param isComplete If this order can be filled partially, or can only been taken as a whole.\r\n     * @param sellToken Address of the token to be sold in this order.\r\n     * @param sellAmount Total amount of token that is planned to be sold in this order.\r\n     * @param buyToken Address of the token to be purchased in this order.\r\n     * @param buyAmount Total amount of token planned to be bought by the maker.\r\n     */\r\n    function _makeOrder(\r\n        bytes32 orderID,\r\n        address specificTaker,\r\n        address seller,\r\n        bool isComplete,\r\n        ISygnumToken sellToken,\r\n        uint256 sellAmount,\r\n        ISygnumToken buyToken,\r\n        uint256 buyAmount\r\n    ) private {\r\n        require(!orders.exists(orderID), \"Exchange: order id already exists\");\r\n        require(specificTaker != msg.sender, \"Exchange: Cannot make an order for oneself\");\r\n        require(sellAmount > 0, \"Exchange: sell amount cannot be empty\");\r\n        require(buyAmount > 0, \"Exchange: buy amount cannot be empty\");\r\n\r\n        require(sellToken.balanceOf(seller) >= sellAmount, \"Exchange: seller does not have enough balance\");\r\n        require(\r\n            sellToken.allowance(seller, address(this)) >= sellAmount,\r\n            \"Exchange: sell amount is greater than allowance\"\r\n        );\r\n        require(\r\n            Whitelist(Whitelistable(address(buyToken)).getWhitelistContract()).isWhitelisted(seller),\r\n            \"Exchange: seller is not on buy token whitelist\"\r\n        );\r\n\r\n        if (specificTaker != address(0)) {\r\n            require(\r\n                Whitelist(Whitelistable(address(sellToken)).getWhitelistContract()).isWhitelisted(specificTaker),\r\n                \"Exchange: specific taker is not on sell token whitelist\"\r\n            );\r\n        }\r\n\r\n        sellToken.block(seller, sellAmount);\r\n\r\n        order[orderID] = Order({\r\n            maker: seller,\r\n            specificTaker: specificTaker,\r\n            isComplete: isComplete,\r\n            sellToken: sellToken,\r\n            sellAmount: sellAmount,\r\n            buyToken: buyToken,\r\n            buyAmount: buyAmount\r\n        });\r\n        orders.insert(orderID);\r\n        emit MadeOrder(orderID, sellToken, buyToken, seller, specificTaker, isComplete, sellAmount, buyAmount);\r\n        emit MadeOrderParticipants(orderID, seller, specificTaker);\r\n    }\r\n\r\n    /**\r\n     * @return Amount of orders.\r\n     */\r\n    function getOrderCount() public view returns (uint256) {\r\n        return orders.count();\r\n    }\r\n\r\n    /**\r\n     * @return Key at index.\r\n     */\r\n    function getIdentifier(uint256 _index) public view returns (bytes32) {\r\n        return orders.keyAtIndex(_index);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"killer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ISygnumToken\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ISygnumToken\",\"name\":\"buyToken\",\"type\":\"address\"}],\"name\":\"CancelledOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"pairID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buytoken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"}],\"name\":\"DepairedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"pairID\",\"type\":\"bytes32\"}],\"name\":\"FrozenPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"contract ISygnumToken\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ISygnumToken\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"specificTaker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isComplete\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"}],\"name\":\"MadeOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"specificTaker\",\"type\":\"address\"}],\"name\":\"MadeOrderParticipants\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operatorsAddress\",\"type\":\"address\"}],\"name\":\"OperatorsContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operatorsAddress\",\"type\":\"address\"}],\"name\":\"OperatorsContractPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"pairID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buytoken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"}],\"name\":\"PairedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"contract ISygnumToken\",\"name\":\"purchasedToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ISygnumToken\",\"name\":\"paidToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchasedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paidAmount\",\"type\":\"uint256\"}],\"name\":\"TakenOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"}],\"name\":\"TakenOrderParticipants\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"traderOperatorsAddress\",\"type\":\"address\"}],\"name\":\"TraderOperatorsContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"traderOperatorsAddress\",\"type\":\"address\"}],\"name\":\"TraderOperatorsContractPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"pairID\",\"type\":\"bytes32\"}],\"name\":\"UnFrozenPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_pairID\",\"type\":\"bytes32[]\"}],\"name\":\"batchDepairTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_pairID\",\"type\":\"bytes32[]\"}],\"name\":\"batchFreezeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_pairID\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"_buyToken\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_sellToken\",\"type\":\"address[]\"}],\"name\":\"batchPairTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_pairID\",\"type\":\"bytes32[]\"}],\"name\":\"batchUnfreezeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderID\",\"type\":\"bytes32\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"orderIDs\",\"type\":\"bytes32[]\"}],\"name\":\"cancelOrders\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOperatorsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmTraderOperatorsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_pairID\",\"type\":\"bytes32\"}],\"name\":\"depairTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_pairID\",\"type\":\"bytes32\"}],\"name\":\"freezePair\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getIdentifier\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOperatorsContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOperatorsPending\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOrderCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPairCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTraderOperatorsContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTraderOperatorsPending\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseOperators\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_traderOperators\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseOperators\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isAdminOrSystem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sellToken\",\"type\":\"address\"}],\"name\":\"isFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"isMultisig\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isNotPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isOperatorOrSystem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sellToken\",\"type\":\"address\"}],\"name\":\"isPaired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isRelay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isSystem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isTrader\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"specificTaker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isComplete\",\"type\":\"bool\"},{\"internalType\":\"contract ISygnumToken\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract ISygnumToken\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeOutBlockNumber\",\"type\":\"uint256\"}],\"name\":\"makeOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"order\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"specificTaker\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isComplete\",\"type\":\"bool\"},{\"internalType\":\"contract ISygnumToken\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract ISygnumToken\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"paired\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairIdentifier\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_pairID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sellToken\",\"type\":\"address\"}],\"name\":\"pairTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseOperators\",\"type\":\"address\"}],\"name\":\"setOperatorsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_traderOperators\",\"type\":\"address\"}],\"name\":\"setTraderOperatorsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeOutBlockNumber\",\"type\":\"uint256\"}],\"name\":\"takeOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"orderIDs\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"buyers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantity\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"timeOutBlockNumber\",\"type\":\"uint256\"}],\"name\":\"takeOrders\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_pairID\",\"type\":\"bytes32\"}],\"name\":\"unfreezePair\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Exchange", "CompilerVersion": "v0.5.12+commit.7709ece9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://e3477460377a4e44ad7ff6ad7feb057715b89601e9fede457126089501ecf7a1"}