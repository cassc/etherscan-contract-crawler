{"SourceCode": "// File: contracts/interfaces/IManagerCore.sol\r\n\r\n/*\r\n    Copyright 2022 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n\r\n*/\r\n\r\npragma solidity 0.8.21;\r\n\r\ninterface IManagerCore {\r\n    /* ============ Custom Errors ============ */\r\n\r\n    /// @notice Emitted when the caller is not a valid factory.\r\n    error ManagerCore__CallerNotFactory(address caller);\r\n    /// @notice Emitted when the ManagerCore is already initialized.\r\n    error ManagerCore__ContractIsInitialized();\r\n    /// @notice Emitted when performing an operation before initialization of the ManagerCore.\r\n    error ManagerCore__ContractUninitialized();\r\n    /// @notice Emitted when an extension already exists on the ManagerCore.\r\n    error ManagerCore__ExtensionExists();\r\n    /// @notice Emitted when the provided extension is not valid.\r\n    error ManagerCore__ExtensionInvalid();\r\n    /// @notice Emitted when the factory already exists on the ManagerCore.\r\n    error ManagerCore__FactoryExists();\r\n    /// @notice Emitted when the provided factory is not valid.\r\n    error ManagerCore__FactoryInvalid();\r\n    /// @notice Emitted when the manager already exists on the ManagerCore.\r\n    error ManagerCore__ManagerExists();\r\n    /// @notice Emitted when the provided manager is not valid.\r\n    error ManagerCore__ManagerInvalid();\r\n    /// @notice Emitted when a zero address is provided.\r\n    error ManagerCore__ZeroAddress();\r\n\r\n\r\n    /* ============ Events ============ */\r\n\r\n    event ExtensionAdded(address indexed _extension);\r\n    event ExtensionRemoved(address indexed _extension);\r\n    event FactoryAdded(address indexed _factory);\r\n    event FactoryRemoved(address indexed _factory);\r\n    event ManagerAdded(address indexed _manager, address indexed _factory);\r\n    event ManagerRemoved(address indexed _manager);\r\n\r\n    /* ============ Functions ============ */\r\n\r\n    function addManager(address _manager) external;\r\n    function isExtension(address _extension) external view returns(bool);\r\n    function isFactory(address _factory) external view returns(bool);\r\n    function isManager(address _manager) external view returns(bool);\r\n    function owner() external view returns(address);\r\n}\r\n// File: contracts/lib/MutualUpgradeV2.sol\r\n\r\n/*\r\n    Copyright 2022 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n\r\n*/\r\n\r\npragma solidity 0.8.21;\r\n\r\n/**\r\n * @title MutualUpgradeV2\r\n * @author Set Protocol\r\n *\r\n * The MutualUpgradeV2 contract contains a modifier for handling mutual upgrades between two parties\r\n *\r\n * CHANGELOG\r\n * - Update mutualUpgrade to allow single transaction execution if the two signing addresses are the same\r\n * - 9/18/23: Upgrade to Solidity 0.8.21\r\n * - 9/27/23: Added custom errors\r\n */\r\ncontract MutualUpgradeV2 {\r\n    /* ============ Custom Errors ============ */\r\n\r\n    /// @notice Emitted when the caller is not an authorized signer.\r\n    error MutualUpgradeV2__CallerNotAuthorizedSigner(address caller, address signerOne, address signerTwo);\r\n\r\n    /* ============ State Variables ============ */\r\n\r\n    // Mapping of upgradable units and if upgrade has been initialized by other party\r\n    mapping(bytes32 => bool) public mutualUpgrades;\r\n\r\n    /* ============ Events ============ */\r\n\r\n    event MutualUpgradeRegistered(\r\n        bytes32 _upgradeHash\r\n    );\r\n\r\n    /* ============ Modifiers ============ */\r\n\r\n    modifier mutualUpgrade(address _signerOne, address _signerTwo) {\r\n        if (msg.sender != _signerOne)\r\n            if(msg.sender != _signerTwo) {\r\n                revert MutualUpgradeV2__CallerNotAuthorizedSigner(msg.sender, _signerOne, _signerTwo);\r\n            }\r\n\r\n        // If the two signing addresses are the same, skip upgrade hash step\r\n        if (_signerOne == _signerTwo) {\r\n            _;\r\n        }\r\n\r\n        address nonCaller = _getNonCaller(_signerOne, _signerTwo);\r\n\r\n        // The upgrade hash is defined by the hash of the transaction call data and sender of msg,\r\n        // which uniquely identifies the function, arguments, and sender.\r\n        bytes32 expectedHash = keccak256(abi.encodePacked(msg.data, nonCaller));\r\n\r\n        if (!mutualUpgrades[expectedHash]) {\r\n            bytes32 newHash = keccak256(abi.encodePacked(msg.data, msg.sender));\r\n\r\n            mutualUpgrades[newHash] = true;\r\n\r\n            emit MutualUpgradeRegistered(newHash);\r\n\r\n            return;\r\n        }\r\n\r\n        delete mutualUpgrades[expectedHash];\r\n\r\n        // Run the rest of the upgrades\r\n        _;\r\n    }\r\n\r\n    /* ============ Internal Functions ============ */\r\n\r\n    function _getNonCaller(address _signerOne, address _signerTwo) internal view returns(address) {\r\n        return msg.sender == _signerOne ? _signerTwo : _signerOne;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IGlobalExtension.sol\r\n\r\n/*\r\n    Copyright 2021 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n\r\n*/\r\n\r\npragma solidity 0.8.21;\r\n\r\ninterface IGlobalExtension {\r\n    /* ============ Custom Errors ============ */\r\n\r\n    /// @notice Emitted when an asset is not approved on the DelegatedManager.\r\n    error GlobalExtension__AssetForbidden(address emitter, address asset);\r\n    /// @notice Emitted when the caller is not an approved operator.\r\n    error GlobalExtension__CallerNotApprovedOperator(address emitter, address caller);\r\n    /// @notice Emitted when the caller is not an externally owned account.\r\n    error GlobalExtension__CallerNotEOA(address emitter, address msgSender, address txOrigin);\r\n    /// @notice Emitted when the caller is not enabled on the ManagerCore.\r\n    error GlobalExtension__CallerNotManagerOnCore(address emitter, address caller);\r\n    /// @notice Emitted when the caller is not the specified methodologist.\r\n    error GlobalExtension__CallerNotMethodologist(\r\n        address emitter, \r\n        address caller, \r\n        address methodologist\r\n    );\r\n    /// @notice Emitted when the caller is not the specified manager of the SetToken.\r\n    error GlobalExtension__CallerNotSetTokenManager(\r\n        address emitter, \r\n        address caller, \r\n        address manager\r\n    );\r\n    /// @notice Emitted when the caller is not the specified owner.\r\n    error GlobalExtension__CallerNotOwner(\r\n        address emitter, \r\n        address caller, \r\n        address owner\r\n    );\r\n    /// @notice Emitted when the extension is not initialized.\r\n    error GlobalExtension__ExtensionUninitialized(address emittingExtension);\r\n    /// @notice Emitted when the extension is not pending.\r\n    error GlobalExtension__ExtensionNotPending(address emittingExtension);\r\n\r\n    /* ============ Events ============ */\r\n\r\n    event ExtensionRemoved(\r\n        address indexed _setToken,\r\n        address indexed _delegatedManager\r\n    );\r\n\r\n    /* ============ Functions ============ */\r\n\r\n    function removeExtension() external;\r\n}\r\n// File: @openzeppelin/contracts/utils/math/SafeCast.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\r\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\r\n * checks.\r\n *\r\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\r\n * easily result in undesired exploitation or bugs, since developers usually\r\n * assume that overflows raise errors. `SafeCast` restores this intuition by\r\n * reverting the transaction when such an operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n *\r\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\r\n * all math on `uint256` and `int256` and then downcasting.\r\n */\r\nlibrary SafeCast {\r\n    /**\r\n     * @dev Returns the downcasted uint248 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint248).\r\n     *\r\n     * Counterpart to Solidity's `uint248` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 248 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint248(uint256 value) internal pure returns (uint248) {\r\n        require(value <= type(uint248).max, \"SafeCast: value doesn't fit in 248 bits\");\r\n        return uint248(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint240 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint240).\r\n     *\r\n     * Counterpart to Solidity's `uint240` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 240 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint240(uint256 value) internal pure returns (uint240) {\r\n        require(value <= type(uint240).max, \"SafeCast: value doesn't fit in 240 bits\");\r\n        return uint240(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint232 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint232).\r\n     *\r\n     * Counterpart to Solidity's `uint232` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 232 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint232(uint256 value) internal pure returns (uint232) {\r\n        require(value <= type(uint232).max, \"SafeCast: value doesn't fit in 232 bits\");\r\n        return uint232(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint224 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint224).\r\n     *\r\n     * Counterpart to Solidity's `uint224` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 224 bits\r\n     *\r\n     * _Available since v4.2._\r\n     */\r\n    function toUint224(uint256 value) internal pure returns (uint224) {\r\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\r\n        return uint224(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint216 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint216).\r\n     *\r\n     * Counterpart to Solidity's `uint216` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 216 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint216(uint256 value) internal pure returns (uint216) {\r\n        require(value <= type(uint216).max, \"SafeCast: value doesn't fit in 216 bits\");\r\n        return uint216(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint208 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint208).\r\n     *\r\n     * Counterpart to Solidity's `uint208` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 208 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint208(uint256 value) internal pure returns (uint208) {\r\n        require(value <= type(uint208).max, \"SafeCast: value doesn't fit in 208 bits\");\r\n        return uint208(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint200 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint200).\r\n     *\r\n     * Counterpart to Solidity's `uint200` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 200 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint200(uint256 value) internal pure returns (uint200) {\r\n        require(value <= type(uint200).max, \"SafeCast: value doesn't fit in 200 bits\");\r\n        return uint200(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint192 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint192).\r\n     *\r\n     * Counterpart to Solidity's `uint192` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 192 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint192(uint256 value) internal pure returns (uint192) {\r\n        require(value <= type(uint192).max, \"SafeCast: value doesn't fit in 192 bits\");\r\n        return uint192(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint184 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint184).\r\n     *\r\n     * Counterpart to Solidity's `uint184` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 184 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint184(uint256 value) internal pure returns (uint184) {\r\n        require(value <= type(uint184).max, \"SafeCast: value doesn't fit in 184 bits\");\r\n        return uint184(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint176 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint176).\r\n     *\r\n     * Counterpart to Solidity's `uint176` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 176 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint176(uint256 value) internal pure returns (uint176) {\r\n        require(value <= type(uint176).max, \"SafeCast: value doesn't fit in 176 bits\");\r\n        return uint176(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint168 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint168).\r\n     *\r\n     * Counterpart to Solidity's `uint168` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 168 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint168(uint256 value) internal pure returns (uint168) {\r\n        require(value <= type(uint168).max, \"SafeCast: value doesn't fit in 168 bits\");\r\n        return uint168(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint160 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint160).\r\n     *\r\n     * Counterpart to Solidity's `uint160` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 160 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint160(uint256 value) internal pure returns (uint160) {\r\n        require(value <= type(uint160).max, \"SafeCast: value doesn't fit in 160 bits\");\r\n        return uint160(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint152 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint152).\r\n     *\r\n     * Counterpart to Solidity's `uint152` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 152 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint152(uint256 value) internal pure returns (uint152) {\r\n        require(value <= type(uint152).max, \"SafeCast: value doesn't fit in 152 bits\");\r\n        return uint152(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint144 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint144).\r\n     *\r\n     * Counterpart to Solidity's `uint144` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 144 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint144(uint256 value) internal pure returns (uint144) {\r\n        require(value <= type(uint144).max, \"SafeCast: value doesn't fit in 144 bits\");\r\n        return uint144(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint136 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint136).\r\n     *\r\n     * Counterpart to Solidity's `uint136` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 136 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint136(uint256 value) internal pure returns (uint136) {\r\n        require(value <= type(uint136).max, \"SafeCast: value doesn't fit in 136 bits\");\r\n        return uint136(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint128 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint128).\r\n     *\r\n     * Counterpart to Solidity's `uint128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     *\r\n     * _Available since v2.5._\r\n     */\r\n    function toUint128(uint256 value) internal pure returns (uint128) {\r\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\r\n        return uint128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint120 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint120).\r\n     *\r\n     * Counterpart to Solidity's `uint120` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 120 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint120(uint256 value) internal pure returns (uint120) {\r\n        require(value <= type(uint120).max, \"SafeCast: value doesn't fit in 120 bits\");\r\n        return uint120(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint112 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint112).\r\n     *\r\n     * Counterpart to Solidity's `uint112` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 112 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint112(uint256 value) internal pure returns (uint112) {\r\n        require(value <= type(uint112).max, \"SafeCast: value doesn't fit in 112 bits\");\r\n        return uint112(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint104 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint104).\r\n     *\r\n     * Counterpart to Solidity's `uint104` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 104 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint104(uint256 value) internal pure returns (uint104) {\r\n        require(value <= type(uint104).max, \"SafeCast: value doesn't fit in 104 bits\");\r\n        return uint104(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint96 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint96).\r\n     *\r\n     * Counterpart to Solidity's `uint96` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 96 bits\r\n     *\r\n     * _Available since v4.2._\r\n     */\r\n    function toUint96(uint256 value) internal pure returns (uint96) {\r\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\r\n        return uint96(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint88 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint88).\r\n     *\r\n     * Counterpart to Solidity's `uint88` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 88 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint88(uint256 value) internal pure returns (uint88) {\r\n        require(value <= type(uint88).max, \"SafeCast: value doesn't fit in 88 bits\");\r\n        return uint88(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint80 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint80).\r\n     *\r\n     * Counterpart to Solidity's `uint80` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 80 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint80(uint256 value) internal pure returns (uint80) {\r\n        require(value <= type(uint80).max, \"SafeCast: value doesn't fit in 80 bits\");\r\n        return uint80(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint72 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint72).\r\n     *\r\n     * Counterpart to Solidity's `uint72` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 72 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint72(uint256 value) internal pure returns (uint72) {\r\n        require(value <= type(uint72).max, \"SafeCast: value doesn't fit in 72 bits\");\r\n        return uint72(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint64 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint64).\r\n     *\r\n     * Counterpart to Solidity's `uint64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     *\r\n     * _Available since v2.5._\r\n     */\r\n    function toUint64(uint256 value) internal pure returns (uint64) {\r\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\r\n        return uint64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint56 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint56).\r\n     *\r\n     * Counterpart to Solidity's `uint56` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 56 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint56(uint256 value) internal pure returns (uint56) {\r\n        require(value <= type(uint56).max, \"SafeCast: value doesn't fit in 56 bits\");\r\n        return uint56(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint48 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint48).\r\n     *\r\n     * Counterpart to Solidity's `uint48` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 48 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint48(uint256 value) internal pure returns (uint48) {\r\n        require(value <= type(uint48).max, \"SafeCast: value doesn't fit in 48 bits\");\r\n        return uint48(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint40 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint40).\r\n     *\r\n     * Counterpart to Solidity's `uint40` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 40 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint40(uint256 value) internal pure returns (uint40) {\r\n        require(value <= type(uint40).max, \"SafeCast: value doesn't fit in 40 bits\");\r\n        return uint40(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint32 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint32).\r\n     *\r\n     * Counterpart to Solidity's `uint32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     *\r\n     * _Available since v2.5._\r\n     */\r\n    function toUint32(uint256 value) internal pure returns (uint32) {\r\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\r\n        return uint32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint24 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint24).\r\n     *\r\n     * Counterpart to Solidity's `uint24` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 24 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint24(uint256 value) internal pure returns (uint24) {\r\n        require(value <= type(uint24).max, \"SafeCast: value doesn't fit in 24 bits\");\r\n        return uint24(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint16 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint16).\r\n     *\r\n     * Counterpart to Solidity's `uint16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     *\r\n     * _Available since v2.5._\r\n     */\r\n    function toUint16(uint256 value) internal pure returns (uint16) {\r\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\r\n        return uint16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint8 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint8).\r\n     *\r\n     * Counterpart to Solidity's `uint8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits\r\n     *\r\n     * _Available since v2.5._\r\n     */\r\n    function toUint8(uint256 value) internal pure returns (uint8) {\r\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\r\n        return uint8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a signed int256 into an unsigned uint256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be greater than or equal to 0.\r\n     *\r\n     * _Available since v3.0._\r\n     */\r\n    function toUint256(int256 value) internal pure returns (uint256) {\r\n        require(value >= 0, \"SafeCast: value must be positive\");\r\n        return uint256(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int248 from int256, reverting on\r\n     * overflow (when the input is less than smallest int248 or\r\n     * greater than largest int248).\r\n     *\r\n     * Counterpart to Solidity's `int248` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 248 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\r\n        downcasted = int248(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 248 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int240 from int256, reverting on\r\n     * overflow (when the input is less than smallest int240 or\r\n     * greater than largest int240).\r\n     *\r\n     * Counterpart to Solidity's `int240` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 240 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\r\n        downcasted = int240(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 240 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int232 from int256, reverting on\r\n     * overflow (when the input is less than smallest int232 or\r\n     * greater than largest int232).\r\n     *\r\n     * Counterpart to Solidity's `int232` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 232 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\r\n        downcasted = int232(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 232 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int224 from int256, reverting on\r\n     * overflow (when the input is less than smallest int224 or\r\n     * greater than largest int224).\r\n     *\r\n     * Counterpart to Solidity's `int224` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 224 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\r\n        downcasted = int224(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 224 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int216 from int256, reverting on\r\n     * overflow (when the input is less than smallest int216 or\r\n     * greater than largest int216).\r\n     *\r\n     * Counterpart to Solidity's `int216` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 216 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\r\n        downcasted = int216(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 216 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int208 from int256, reverting on\r\n     * overflow (when the input is less than smallest int208 or\r\n     * greater than largest int208).\r\n     *\r\n     * Counterpart to Solidity's `int208` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 208 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\r\n        downcasted = int208(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 208 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int200 from int256, reverting on\r\n     * overflow (when the input is less than smallest int200 or\r\n     * greater than largest int200).\r\n     *\r\n     * Counterpart to Solidity's `int200` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 200 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\r\n        downcasted = int200(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 200 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int192 from int256, reverting on\r\n     * overflow (when the input is less than smallest int192 or\r\n     * greater than largest int192).\r\n     *\r\n     * Counterpart to Solidity's `int192` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 192 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\r\n        downcasted = int192(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 192 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int184 from int256, reverting on\r\n     * overflow (when the input is less than smallest int184 or\r\n     * greater than largest int184).\r\n     *\r\n     * Counterpart to Solidity's `int184` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 184 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\r\n        downcasted = int184(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 184 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int176 from int256, reverting on\r\n     * overflow (when the input is less than smallest int176 or\r\n     * greater than largest int176).\r\n     *\r\n     * Counterpart to Solidity's `int176` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 176 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\r\n        downcasted = int176(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 176 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int168 from int256, reverting on\r\n     * overflow (when the input is less than smallest int168 or\r\n     * greater than largest int168).\r\n     *\r\n     * Counterpart to Solidity's `int168` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 168 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\r\n        downcasted = int168(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 168 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int160 from int256, reverting on\r\n     * overflow (when the input is less than smallest int160 or\r\n     * greater than largest int160).\r\n     *\r\n     * Counterpart to Solidity's `int160` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 160 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\r\n        downcasted = int160(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 160 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int152 from int256, reverting on\r\n     * overflow (when the input is less than smallest int152 or\r\n     * greater than largest int152).\r\n     *\r\n     * Counterpart to Solidity's `int152` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 152 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\r\n        downcasted = int152(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 152 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int144 from int256, reverting on\r\n     * overflow (when the input is less than smallest int144 or\r\n     * greater than largest int144).\r\n     *\r\n     * Counterpart to Solidity's `int144` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 144 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\r\n        downcasted = int144(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 144 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int136 from int256, reverting on\r\n     * overflow (when the input is less than smallest int136 or\r\n     * greater than largest int136).\r\n     *\r\n     * Counterpart to Solidity's `int136` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 136 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\r\n        downcasted = int136(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 136 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int128 from int256, reverting on\r\n     * overflow (when the input is less than smallest int128 or\r\n     * greater than largest int128).\r\n     *\r\n     * Counterpart to Solidity's `int128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\r\n        downcasted = int128(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 128 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int120 from int256, reverting on\r\n     * overflow (when the input is less than smallest int120 or\r\n     * greater than largest int120).\r\n     *\r\n     * Counterpart to Solidity's `int120` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 120 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\r\n        downcasted = int120(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 120 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int112 from int256, reverting on\r\n     * overflow (when the input is less than smallest int112 or\r\n     * greater than largest int112).\r\n     *\r\n     * Counterpart to Solidity's `int112` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 112 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\r\n        downcasted = int112(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 112 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int104 from int256, reverting on\r\n     * overflow (when the input is less than smallest int104 or\r\n     * greater than largest int104).\r\n     *\r\n     * Counterpart to Solidity's `int104` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 104 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\r\n        downcasted = int104(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 104 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int96 from int256, reverting on\r\n     * overflow (when the input is less than smallest int96 or\r\n     * greater than largest int96).\r\n     *\r\n     * Counterpart to Solidity's `int96` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 96 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\r\n        downcasted = int96(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 96 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int88 from int256, reverting on\r\n     * overflow (when the input is less than smallest int88 or\r\n     * greater than largest int88).\r\n     *\r\n     * Counterpart to Solidity's `int88` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 88 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\r\n        downcasted = int88(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 88 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int80 from int256, reverting on\r\n     * overflow (when the input is less than smallest int80 or\r\n     * greater than largest int80).\r\n     *\r\n     * Counterpart to Solidity's `int80` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 80 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\r\n        downcasted = int80(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 80 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int72 from int256, reverting on\r\n     * overflow (when the input is less than smallest int72 or\r\n     * greater than largest int72).\r\n     *\r\n     * Counterpart to Solidity's `int72` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 72 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\r\n        downcasted = int72(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 72 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int64 from int256, reverting on\r\n     * overflow (when the input is less than smallest int64 or\r\n     * greater than largest int64).\r\n     *\r\n     * Counterpart to Solidity's `int64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\r\n        downcasted = int64(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 64 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int56 from int256, reverting on\r\n     * overflow (when the input is less than smallest int56 or\r\n     * greater than largest int56).\r\n     *\r\n     * Counterpart to Solidity's `int56` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 56 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\r\n        downcasted = int56(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 56 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int48 from int256, reverting on\r\n     * overflow (when the input is less than smallest int48 or\r\n     * greater than largest int48).\r\n     *\r\n     * Counterpart to Solidity's `int48` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 48 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\r\n        downcasted = int48(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 48 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int40 from int256, reverting on\r\n     * overflow (when the input is less than smallest int40 or\r\n     * greater than largest int40).\r\n     *\r\n     * Counterpart to Solidity's `int40` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 40 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\r\n        downcasted = int40(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 40 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int32 from int256, reverting on\r\n     * overflow (when the input is less than smallest int32 or\r\n     * greater than largest int32).\r\n     *\r\n     * Counterpart to Solidity's `int32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\r\n        downcasted = int32(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 32 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int24 from int256, reverting on\r\n     * overflow (when the input is less than smallest int24 or\r\n     * greater than largest int24).\r\n     *\r\n     * Counterpart to Solidity's `int24` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 24 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\r\n        downcasted = int24(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 24 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int16 from int256, reverting on\r\n     * overflow (when the input is less than smallest int16 or\r\n     * greater than largest int16).\r\n     *\r\n     * Counterpart to Solidity's `int16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\r\n        downcasted = int16(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 16 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int8 from int256, reverting on\r\n     * overflow (when the input is less than smallest int8 or\r\n     * greater than largest int8).\r\n     *\r\n     * Counterpart to Solidity's `int8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\r\n        downcasted = int8(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 8 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an unsigned uint256 into a signed int256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be less than or equal to maxInt256.\r\n     *\r\n     * _Available since v3.0._\r\n     */\r\n    function toInt256(uint256 value) internal pure returns (int256) {\r\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\r\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\r\n        return int256(value);\r\n    }\r\n}\r\n\r\n// File: @amun/amun-protocol/contracts/lib/PreciseUnitMath.sol\r\n\r\n/*\r\n    Copyright 2020 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n\r\n*/\r\n\r\npragma solidity 0.8.21;\r\n\r\n\r\n/**\r\n * @title PreciseUnitMath\r\n * @author Set Protocol\r\n *\r\n * Arithmetic for fixed-point numbers with 18 decimals of precision. Some functions taken from\r\n * dYdX's BaseMath library.\r\n *\r\n * CHANGELOG\r\n * - 9/21/20: Added safePower function\r\n * - 4/21/21: Added approximatelyEquals function\r\n * - 12/13/21: Added preciseDivCeil (int overloads) function\r\n * - 12/13/21: Added abs function\r\n * - 4/14/23: Removed safePower function\r\n * - 4/18/23: Upgrade OZ\r\n * - 4/21/23: Removed OZ SafeMath utils\r\n * - 9/18/23: Upgrade to Solidity 0.8.21\r\n * - 9/26/23: Added custom errors\r\n */\r\nlibrary PreciseUnitMath {\r\n    using SafeCast for int256;\r\n\r\n    /* ============ Custom Errors ============ */\r\n\r\n    /// @notice Emitted when an attempt is made to divide by zero.\r\n    error PreciseUnitMath__DivisionByZero();\r\n    /// @notice Emitted when the inputs provided are invalid for the operation.\r\n    error PreciseUnitMath__InvalidInput(int256 inputA, int256 inputB);\r\n    /// @notice Emitted when there's an overflow during the inversion operation.\r\n    error PreciseUnitMath__InversionOverflow(int256 input);\r\n\r\n    // The number One in precise units.\r\n    uint256 constant internal PRECISE_UNIT = 10 ** 18;\r\n    int256 constant internal PRECISE_UNIT_INT = 10 ** 18;\r\n\r\n    // Max unsigned integer value\r\n    uint256 constant internal MAX_UINT_256 = type(uint256).max;\r\n    // Max and min signed integer value\r\n    int256 constant internal MAX_INT_256 = type(int256).max;\r\n    int256 constant internal MIN_INT_256 = type(int256).min;\r\n\r\n    /**\r\n     * @dev Getter function since constants can't be read directly from libraries.\r\n     */\r\n    function preciseUnit() internal pure returns (uint256) {\r\n        return PRECISE_UNIT;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter function since constants can't be read directly from libraries.\r\n     */\r\n    function preciseUnitInt() internal pure returns (int256) {\r\n        return PRECISE_UNIT_INT;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter function since constants can't be read directly from libraries.\r\n     */\r\n    function maxUint256() internal pure returns (uint256) {\r\n        return MAX_UINT_256;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter function since constants can't be read directly from libraries.\r\n     */\r\n    function maxInt256() internal pure returns (int256) {\r\n        return MAX_INT_256;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter function since constants can't be read directly from libraries.\r\n     */\r\n    function minInt256() internal pure returns (int256) {\r\n        return MIN_INT_256;\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies value a by value b (result is rounded down). It's assumed that the value b is the significand\r\n     * of a number with 18 decimals precision.\r\n     */\r\n    function preciseMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return (a * b) / PRECISE_UNIT;\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies value a by value b (result is rounded towards zero). It's assumed that the value b is the\r\n     * significand of a number with 18 decimals precision.\r\n     */\r\n    function preciseMul(int256 a, int256 b) internal pure returns (int256) {\r\n        return (a * b) / PRECISE_UNIT_INT;\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies value a by value b (result is rounded up). It's assumed that the value b is the significand\r\n     * of a number with 18 decimals precision.\r\n     */\r\n    function preciseMulCeil(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0 || b == 0) {\r\n            return 0;\r\n        }\r\n        return (((a * b) - 1) / PRECISE_UNIT) + 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides value a by value b (result is rounded down).\r\n     */\r\n    function preciseDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return (a * PRECISE_UNIT) / b;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Divides value a by value b (result is rounded towards 0).\r\n     */\r\n    function preciseDiv(int256 a, int256 b) internal pure returns (int256) {\r\n        return (a * PRECISE_UNIT_INT) / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides value a by value b (result is rounded up or away from 0).\r\n     */\r\n    function preciseDivCeil(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (b == 0) revert PreciseUnitMath__DivisionByZero();\r\n\r\n        return a > 0 ? (((a * PRECISE_UNIT) - 1) / b) + 1 : 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides value a by value b (result is rounded up or away from 0). When `a` is 0, 0 is\r\n     * returned. When `b` is 0, method reverts with divide-by-zero error.\r\n     */\r\n    function preciseDivCeil(int256 a, int256 b) internal pure returns (int256) {\r\n        if (b == 0) revert PreciseUnitMath__DivisionByZero();\r\n\r\n        a = a * PRECISE_UNIT_INT;\r\n        int256 c = a / b;\r\n\r\n        if (a % b != 0) {\r\n            // a ^ b == 0 case is covered by the previous if statement, hence it won't resolve to --c\r\n            (a ^ b > 0) ? ++c : --c;\r\n        }\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides value a by value b (result is rounded down - positive numbers toward 0 and negative away from 0).\r\n     */\r\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\r\n        if (b == 0) revert PreciseUnitMath__DivisionByZero();\r\n        if (a == MIN_INT_256 && b == -1) revert PreciseUnitMath__InvalidInput(a, b);\r\n\r\n        int256 result = a / b;\r\n        if (a ^ b < 0 && a % b != 0) {\r\n            result -= 1;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies value a by value b where rounding is towards the lesser number.\r\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\r\n     */\r\n    function conservativePreciseMul(int256 a, int256 b) internal pure returns (int256) {\r\n        return divDown(a * b, PRECISE_UNIT_INT);\r\n    }\r\n\r\n    /**\r\n     * @dev Divides value a by value b where rounding is towards the lesser number.\r\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\r\n     */\r\n    function conservativePreciseDiv(int256 a, int256 b) internal pure returns (int256) {\r\n        return divDown(a * PRECISE_UNIT_INT, b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if a =~ b within range, false otherwise.\r\n     */\r\n    function approximatelyEquals(uint256 a, uint256 b, uint256 range) internal pure returns (bool) {\r\n        return a <= b + range && a >= b - range;\r\n    }\r\n\r\n    /**\r\n     * Returns the absolute value of int256 `a` as a uint256\r\n     */\r\n    function abs(int256 a) internal pure returns (uint256) {\r\n        return a > -1 ? a.toUint256() : (a * -1).toUint256();\r\n    }\r\n\r\n    /**\r\n     * Returns the negation of a\r\n     */\r\n    function neg(int256 a) internal pure returns (int256) {\r\n        if (a == MIN_INT_256) revert PreciseUnitMath__InversionOverflow(a);\r\n        return -a;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File: @amun/amun-protocol/contracts/interfaces/ISetTokenCreator.sol\r\n\r\n/*\r\n  Copyright 2022 Set Labs Inc.\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n\r\n\r\n*/\r\n\r\npragma solidity 0.8.21;\r\n\r\ninterface ISetTokenCreator {\r\n\r\n   /* ============ Custom Errors ============ */\r\n\r\n    /// @notice Emitted when the number of components and units mismatch.\r\n    error SetTokenCreator__ArrayLengthMismatch(uint256 componentsLength, uint256 unitsLength);\r\n    /// @notice Emitted when the components provided contains duplicates.\r\n    error SetTokenCreator__ComponentsContainDuplicates();\r\n    /// @notice Emitted when the components provided contains a zero address.\r\n    error SetTokenCreator__ComponentsContainZeroAddress();\r\n    /// @notice Emitted when an the components provided does not contain elements.\r\n    error SetTokenCreator__ComponentsEmpty();\r\n    /// @notice Emitted when a module is not enabled on the Controller.\r\n    error SetTokenCreator__ModuleInvalid(address module);\r\n    /// @notice Emitted when the modules provided does not contain elements.\r\n    error SetTokenCreator__ModulesEmpty();\r\n    /// @notice Emitted when a unit provided is less than or equal to zero.\r\n    error SetTokenCreator__UnitsLessThanOrEqualToZero(int256 unit, uint256 positionInArray);\r\n    /// @notice Emitted when a zero address is provided.\r\n    error SetTokenCreator__ZeroAddress();\r\n\r\n   /* ============ Functions ============ */\r\n\r\n    function create(\r\n        address[] memory _components,\r\n        int256[] memory _units,\r\n        address[] memory _modules,\r\n        address _manager,\r\n        string memory _name,\r\n        string memory _symbol\r\n    )\r\n        external\r\n        returns (address);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: @amun/amun-protocol/contracts/interfaces/ISetToken.sol\r\n\r\n/*\r\n    Copyright 2020 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n\r\n*/\r\n\r\npragma solidity 0.8.21;\r\n\r\n\r\n/**\r\n * @title ISetToken\r\n * @author Set Protocol\r\n *\r\n * Interface for operating with SetTokens.\r\n */\r\ninterface ISetToken is IERC20 {\r\n\r\n   /* ============ Custom Errors ============ */\r\n\r\n    /// @notice Emitted when the caller is not the SetToken locker.\r\n    error SetToken__CallerNotLocker(address caller, address locker);\r\n    /// @notice Emitted when the caller is not the SetToken manager.\r\n    error SetToken__CallerNotManager(address caller, address manager);\r\n    /// @notice Emitted when the external position module already exists on the SetToken.\r\n    error SetToken__ExternalPositionModuleExists();\r\n    /// @notice Emitted when the component already exists on the SetToken.\r\n    error SetToken__IsComponent();\r\n    /// @notice Emitted when the SetToken is already locked.\r\n    error SetToken__IsLocked();\r\n    /// @notice Emitted when the SetToken is already unlocked.\r\n    error SetToken__IsUnlocked();\r\n    /// @notice Emitted when a module is not enabled on the Controller.\r\n    error SetToken__ModuleInvalid(address module);\r\n    /// @notice Emitted when the actual state of a module is not as expected.\r\n    error SetToken__ModuleStateInvalid(address module, ISetToken.ModuleState actualState, ISetToken.ModuleState expectedState);\r\n    /// @notice Emitted when the real unit is greater than zero and the virtual unit is equal to zero.\r\n    error SetToken__RealToVirtualUnitConversionInvalid(int256 realUnit, int256 virtualUnit);\r\n    /// @notice Emitted when the real unit is greater than zero and the virtual unit converted is equal to zero.\r\n    error SetToken__VirtualToRealUnitConversionInvalid(int256 realUnit, int256 virtualConverted);\r\n    /// @notice Emitted when the calculated multiplier is equal to zero.\r\n    error SetToken__ZeroMultiplier();\r\n\r\n    /* ============ Enums ============ */\r\n\r\n    enum ModuleState {\r\n        NONE,\r\n        PENDING,\r\n        INITIALIZED\r\n    }\r\n\r\n    /* ============ Structs ============ */\r\n    /**\r\n     * The base definition of a SetToken Position\r\n     *\r\n     * @param component           Address of token in the Position\r\n     * @param module              If not in default state, the address of associated module\r\n     * @param unit                Each unit is the # of components per 10^18 of a SetToken\r\n     * @param positionState       Position ENUM. Default is 0; External is 1\r\n     * @param data                Arbitrary data\r\n     */\r\n    struct Position {\r\n        address component;\r\n        address module;\r\n        int256 unit;\r\n        uint8 positionState;\r\n        bytes data;\r\n    }\r\n\r\n    /**\r\n     * A struct that stores a component's cash position details and external positions\r\n     * This data structure allows O(1) access to a component's cash position units and \r\n     * virtual units.\r\n     *\r\n     * @param virtualUnit               Virtual value of a component's DEFAULT position. Stored as virtual for efficiency\r\n     *                                  updating all units at once via the position multiplier. Virtual units are achieved\r\n     *                                  by dividing a \"real\" value by the \"positionMultiplier\"\r\n     * @param componentIndex            \r\n     * @param externalPositionModules   List of external modules attached to each external position. Each module\r\n     *                                  maps to an external position\r\n     * @param externalPositions         Mapping of module => ExternalPosition struct for a given component\r\n     */\r\n    struct ComponentPosition {\r\n      int256 virtualUnit;\r\n      address[] externalPositionModules;\r\n      mapping(address => ExternalPosition) externalPositions;\r\n    }\r\n\r\n    /**\r\n     * A struct that stores a component's external position details including virtual unit and any\r\n     * auxiliary data.\r\n     *\r\n     * @param virtualUnit       Virtual value of a component's EXTERNAL position.\r\n     * @param data              Arbitrary data\r\n     */\r\n    struct ExternalPosition {\r\n      int256 virtualUnit;\r\n      bytes data;\r\n    }\r\n\r\n\r\n    /* ============ Functions ============ */\r\n    \r\n    function addComponent(address _component) external;\r\n    function removeComponent(address _component) external;\r\n    function editDefaultPositionUnit(address _component, int256 _realUnit) external;\r\n    function addExternalPositionModule(address _component, address _positionModule) external;\r\n    function removeExternalPositionModule(address _component, address _positionModule) external;\r\n    function editExternalPositionUnit(address _component, address _positionModule, int256 _realUnit) external;\r\n    function editExternalPositionData(address _component, address _positionModule, bytes calldata _data) external;\r\n\r\n    function invoke(address _target, uint256 _value, bytes calldata _data) external returns(bytes memory);\r\n\r\n    function editPositionMultiplier(int256 _newMultiplier) external;\r\n\r\n    function mint(address _account, uint256 _quantity) external;\r\n    function burn(address _account, uint256 _quantity) external;\r\n\r\n    function lock() external;\r\n    function unlock() external;\r\n\r\n    function addModule(address _module) external;\r\n    function removeModule(address _module) external;\r\n    function initializeModule() external;\r\n\r\n    function setManager(address _manager) external;\r\n\r\n    function manager() external view returns (address);\r\n    function moduleStates(address _module) external view returns (ModuleState);\r\n    function getModules() external view returns (address[] memory);\r\n    \r\n    function getDefaultPositionRealUnit(address _component) external view returns(int256);\r\n    function getExternalPositionRealUnit(address _component, address _positionModule) external view returns(int256);\r\n    function getComponents() external view returns(address[] memory);\r\n    function getExternalPositionModules(address _component) external view returns(address[] memory);\r\n    function getExternalPositionData(address _component, address _positionModule) external view returns(bytes memory);\r\n    function isExternalPositionModule(address _component, address _module) external view returns(bool);\r\n    function isComponent(address _component) external view returns(bool);\r\n    \r\n    function positionMultiplier() external view returns (int256);\r\n    function getPositions() external view returns (Position[] memory);\r\n    function getTotalComponentRealUnits(address _component) external view returns(int256);\r\n\r\n    function isInitializedModule(address _module) external view returns(bool);\r\n    function isPendingModule(address _module) external view returns(bool);\r\n    function isLocked() external view returns (bool);\r\n}\r\n// File: contracts/interfaces/IDelegatedManager.sol\r\n\r\n/*\r\n    Copyright 2021 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n\r\n*/\r\n\r\npragma solidity 0.8.21;\r\n\r\n\r\ninterface IDelegatedManager {\r\n    /* ============ Custom Errors ============ */\r\n\r\n    /// @notice Emitted when the asset was already added to the allow list.\r\n    error DelegatedManager__AssetExists(address asset);\r\n    /// @notice Emitted when the asset does not exist on the allow list.\r\n    error DelegatedManager__AssetNotAllowed();\r\n    /// @notice Emitted when the caller is not the methodologist.\r\n    error DelegatedManager__CallerNotMethodologist(address caller, address methodologist);\r\n    /// @notice Emitted when an extension tries to call/interact with a SetToken on the DelegatedManager.\r\n    error DelegatedManager__CallingSetTokenForbidden();\r\n    /// @notice Emitted when the extension was already added to the allow list.\r\n    error DelegatedManager__ExtensionExists(address extension);\r\n    /// @notice Emitted when the extension is not in the pending state.\r\n    error DelegatedManager__ExtensionNotPending(address extension);\r\n    /// @notice Emitted when the extension is not in the initialized state on the allow list.\r\n    error DelegatedManager__ExtensionUninitialized(address extension);\r\n    /// @notice Emitted when there are existing extensions on the DelegatedManager.\r\n    error DelegatedManager__ExtensionsExist(uint256 numExtensions);\r\n    /// @notice Emitted when the new fee split amount is invalid.\r\n    error DelegatedManager__FeeSplitInvalid();\r\n    /// @notice Emitted when the operator was already added to the allow list.\r\n    error DelegatedManager__OperatorExists(address operator);\r\n    /// @notice Emitted when the operator does not exist on the allow list.\r\n    error DelegatedManager__OperatorNotAllowed(address operator);\r\n    /// @notice Emitted when a zero address is provided.\r\n    error DelegatedManager__ZeroAddress();\r\n\r\n\r\n    /* ============ Events ============ */\r\n\r\n    event MethodologistChanged(\r\n        address indexed _newMethodologist\r\n    );\r\n\r\n    event ExtensionAdded(\r\n        address indexed _extension\r\n    );\r\n\r\n    event ExtensionRemoved(\r\n        address indexed _extension\r\n    );\r\n\r\n    event ExtensionInitialized(\r\n        address indexed _extension\r\n    );\r\n\r\n    event OperatorAdded(\r\n        address indexed _operator\r\n    );\r\n\r\n    event OperatorRemoved(\r\n        address indexed _operator\r\n    );\r\n\r\n    event AllowedAssetAdded(\r\n        address indexed _asset\r\n    );\r\n\r\n    event AllowedAssetRemoved(\r\n        address indexed _asset\r\n    );\r\n\r\n    event UseAssetAllowlistUpdated(\r\n        bool _status\r\n    );\r\n\r\n    event OwnerFeeSplitUpdated(\r\n        uint256 _newFeeSplit\r\n    );\r\n\r\n    event OwnerFeeRecipientUpdated(\r\n        address indexed _newFeeRecipient\r\n    );\r\n\r\n    /* ============ Functions ============ */\r\n    \r\n    function interactManager(address _module, bytes calldata _encoded) external;\r\n\r\n    function initializeExtension() external;\r\n\r\n    function transferTokens(address _token, address _destination, uint256 _amount) external;\r\n\r\n    function updateOwnerFeeSplit(uint256 _newFeeSplit) external;\r\n\r\n    function updateOwnerFeeRecipient(address _newFeeRecipient) external;\r\n\r\n    function setMethodologist(address _newMethodologist) external;\r\n\r\n    function transferOwnership(address _owner) external;\r\n\r\n    function SET_TOKEN() external view returns(ISetToken); /* solhint-disable-line func-name-mixedcase */\r\n    function owner() external view returns(address);\r\n    function methodologist() external view returns(address);\r\n    function operatorAllowlist(address _operator) external view returns(bool);\r\n    function assetAllowlist(address _asset) external view returns(bool);\r\n    function useAssetAllowlist() external view returns(bool);\r\n    function isAllowedAsset(address _asset) external view returns(bool);\r\n    function isPendingExtension(address _extension) external view returns(bool);\r\n    function isInitializedExtension(address _extension) external view returns(bool);\r\n    function getExtensions() external view returns(address[] memory);\r\n    function getOperators() external view returns(address[] memory);\r\n    function getAllowedAssets() external view returns(address[] memory);\r\n    function ownerFeeRecipient() external view returns(address);\r\n    function ownerFeeSplit() external view returns(uint256);\r\n}\r\n// File: @amun/amun-protocol/contracts/interfaces/IController.sol\r\n\r\n/*\r\n    Copyright 2020 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n\r\n*/\r\n\r\npragma solidity 0.8.21;\r\n\r\ninterface IController {\r\n    \r\n   /* ============ Custom Errors ============ */\r\n    \r\n    /// @notice Emitted when the number of resources and resourceIds mismatch.\r\n    error Controller__ArrayLengthMismatch(uint256 resourcesLength, uint256 resourcesIdsLength);\r\n    /// @notice Emitted when the caller is not a factory.\r\n    error Controller__CallerNotFactory(address caller);\r\n    /// @notice Emitted when a factory already exists on the Controller.\r\n    error Controller__FactoryExists();\r\n    /// @notice Emitted when a factory does not exist on the Controller.\r\n    error Controller__FactoryInvalid();\r\n    /// @notice Emitted when a fee type already exists on the Controller.\r\n    error Controller__FeeTypeExists();\r\n    /// @notice Emitted when a fee type does not exist on the Controller.\r\n    error Controller__FeeTypeInvalid();\r\n    /// @notice Emitted when the Controller is already initialized.\r\n    error Controller__IsInitialized();\r\n    /// @notice Emitted when a module is already enabled on the Controller.\r\n    error Controller__ModuleExists();\r\n    /// @notice Emitted when a module is not enabled on the Controller.\r\n    error Controller__ModuleInvalid();\r\n    /// @notice Emitted when a resource or resourceId is already enabled on the Controller.\r\n    error Controller__ResourceExists();\r\n    /// @notice Emitted when a resource is not enabled on the Controller.\r\n    error Controller__ResourceInvalid();\r\n    /// @notice Emitted when a SetToken is already enabled on the Controller. \r\n    error Controller__SetExists();\r\n    /// @notice Emitted when a SetToken is not enabled on the Controller.\r\n    error Controller__SetInvalid();\r\n    /// @notice Emitted when the Controller is not initialized.\r\n    error Controller__Uninitialized();\r\n    /// @notice Emitted when a zero address is provided.\r\n    error Controller__ZeroAddress();\r\n\r\n   /* ============ Functions ============ */\r\n\r\n    function addSet(address _setToken) external;\r\n    function feeRecipient() external view returns(address);\r\n    function getModuleFee(address _module, uint256 _feeType) external view returns(uint256);\r\n    function isModule(address _module) external view returns(bool);\r\n    function isSet(address _setToken) external view returns(bool);\r\n    function isSystemContract(address _contractAddress) external view returns (bool);\r\n    function resourceId(uint256 _id) external view returns(address);\r\n}\r\n// File: @amun/amun-protocol/contracts/lib/AddressArrayUtils.sol\r\n\r\n/*\r\n    Copyright 2020 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n\r\n*/\r\n/* solhint-disable var-name-mixedcase */\r\n\r\npragma solidity 0.8.21;\r\n\r\n/**\r\n * @title AddressArrayUtils\r\n * @author Set Protocol\r\n *\r\n * Utility functions to handle Address Arrays\r\n *\r\n * CHANGELOG\r\n * - 4/21/21: Added validatePairsWithArray methods\r\n * - 9/18/23: Upgrade to Solidity 0.8.21\r\n * - 9/26/23: Added custom errors\r\n * - 9/28/23: Switch hasDuplicate() `A` parameter from memory to calldata\r\n */\r\nlibrary AddressArrayUtils {\r\n\r\n    /* ============ Custom Errors ============ */\r\n\r\n    /// @notice Emitted when the array contains duplicate addresses.\r\n    error AddressArrayUtils__ArrayContainsDuplicates();\r\n    /// @notice Emitted when the provided index is out of the bounds of the array.\r\n    error AddressArrayUtils__ArrayIndexOutOfBounds(uint256 index, uint256 length);\r\n    /// @notice Emitted when the array is empty.\r\n    error AddressArrayUtils__ArrayIsEmpty();\r\n    /// @notice Emitted when a target address is not found within the array.\r\n    error AddressArrayUtils__ArrayItemNotFound(address target);\r\n    /// @notice Emitted when two arrays being validated have mismatched lengths.\r\n    error AddressArrayUtils__ArrayLengthMismatch(uint256 lengthA, uint256 lengthB);\r\n\r\n    /**\r\n     * Finds the index of the first occurrence of the given element.\r\n     * @param A The input array to search\r\n     * @param a The value to find\r\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\r\n     */\r\n    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\r\n        uint256 length = A.length;\r\n        for (uint256 i; i < length; ) {\r\n            if (A[i] == a) {\r\n                return (i, true);\r\n            }\r\n            unchecked { ++i; }\r\n        }\r\n        return (type(uint256).max, false);\r\n    }\r\n\r\n    /**\r\n    * Returns true if the value is present in the list. Uses indexOf internally.\r\n    * @param A The input array to search\r\n    * @param a The value to find\r\n    * @return Returns isIn for the first occurrence starting from index 0\r\n    */\r\n    function contains(address[] memory A, address a) internal pure returns (bool) {\r\n        (, bool isIn) = indexOf(A, a);\r\n        return isIn;\r\n    }\r\n\r\n    /**\r\n    * Returns true if there are 2 elements that are the same in an array\r\n    * @param A The input array to search\r\n    * @return Returns boolean for the first occurrence of a duplicate\r\n    */\r\n    function hasDuplicate(address[] calldata A) internal pure returns(bool) {\r\n        if (A.length == 0) revert AddressArrayUtils__ArrayIsEmpty();\r\n\r\n        uint256 length = A.length;\r\n        for (uint256 i; i < length - 1; ) {\r\n            address current = A[i];\r\n            for (uint256 j = i + 1; j < length;) {\r\n                if (current == A[j]) {\r\n                    return true;\r\n                }\r\n                unchecked { ++j; }\r\n            }\r\n            unchecked { ++i; }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @param A The input array to search\r\n     * @param a The address to remove\r\n     * @return Returns the array with the object removed.\r\n     */\r\n    function remove(address[] memory A, address a)\r\n        internal\r\n        pure\r\n        returns (address[] memory)\r\n    {\r\n        (uint256 index, bool isIn) = indexOf(A, a);\r\n        if (!isIn) {\r\n            revert AddressArrayUtils__ArrayItemNotFound(a);\r\n        } else {\r\n            (address[] memory _A,) = pop(A, index);\r\n            return _A;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param A The input array to search\r\n     * @param a The address to remove\r\n     */\r\n    function removeStorage(address[] storage A, address a)\r\n        internal\r\n    {\r\n        (uint256 index, bool isIn) = indexOf(A, a);\r\n        if (!isIn) {\r\n            revert AddressArrayUtils__ArrayItemNotFound(a);\r\n        } else {\r\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\r\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\r\n            A.pop();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Removes specified index from array\r\n    * @param A The input array to search\r\n    * @param index The index to remove\r\n    * @return Returns the new array and the removed entry\r\n    */\r\n    function pop(address[] memory A, uint256 index)\r\n        internal\r\n        pure\r\n        returns (address[] memory, address)\r\n    {\r\n        uint256 length = A.length;\r\n        if (index >= length) revert AddressArrayUtils__ArrayIndexOutOfBounds(index, length);\r\n        address[] memory newAddresses = new address[](length - 1);\r\n        for (uint256 i; i < index; ) {\r\n            newAddresses[i] = A[i];\r\n            unchecked { ++i; }\r\n        }\r\n        for (uint256 j = index + 1; j < length;) {\r\n            newAddresses[j - 1] = A[j];\r\n            unchecked { ++j; }\r\n        }\r\n        return (newAddresses, A[index]);\r\n    }\r\n\r\n    /**\r\n     * Returns the combination of the two arrays\r\n     * @param A The first array\r\n     * @param B The second array\r\n     * @return Returns A extended by B\r\n     */\r\n    function extend(address[] memory A, address[] memory B) internal pure returns (address[] memory) {\r\n        uint256 aLength = A.length;\r\n        uint256 bLength = B.length;\r\n        address[] memory newAddresses = new address[](aLength + bLength);\r\n        for (uint256 i; i < aLength; ) {\r\n            newAddresses[i] = A[i];\r\n            unchecked { ++i; }\r\n        }\r\n        for (uint256 j; j < bLength;) {\r\n            newAddresses[aLength + j] = B[j];\r\n            unchecked { ++j; }\r\n        }\r\n        return newAddresses;\r\n    }\r\n\r\n    /**\r\n     * Validate that address and uint array lengths match. Validate address array is not empty\r\n     * and contains no duplicate elements.\r\n     *\r\n     * @param A         Array of addresses\r\n     * @param B         Array of uint\r\n     */\r\n    function validatePairsWithArray(address[] calldata A, uint256[] calldata B) internal pure {\r\n        uint256 aLength = A.length;\r\n        uint256 bLength = B.length;\r\n        if (aLength != bLength)\r\n            revert AddressArrayUtils__ArrayLengthMismatch(aLength, bLength);\r\n        _validateLengthAndUniqueness(A);\r\n    }\r\n\r\n    /**\r\n     * Validate that address and bool array lengths match. Validate address array is not empty\r\n     * and contains no duplicate elements.\r\n     *\r\n     * @param A         Array of addresses\r\n     * @param B         Array of bool\r\n     */\r\n    function validatePairsWithArray(address[] calldata A, bool[] calldata B) internal pure {\r\n        uint256 aLength = A.length;\r\n        uint256 bLength = B.length;\r\n        if (aLength != bLength)\r\n            revert AddressArrayUtils__ArrayLengthMismatch(aLength, bLength);\r\n        _validateLengthAndUniqueness(A);\r\n    }\r\n\r\n    /**\r\n     * Validate that address and string array lengths match. Validate address array is not empty\r\n     * and contains no duplicate elements.\r\n     *\r\n     * @param A         Array of addresses\r\n     * @param B         Array of strings\r\n     */\r\n    function validatePairsWithArray(address[] calldata A, string[] calldata B) internal pure {\r\n        uint256 aLength = A.length;\r\n        uint256 bLength = B.length;\r\n        if (aLength != bLength) revert AddressArrayUtils__ArrayLengthMismatch(aLength, bLength);\r\n        _validateLengthAndUniqueness(A);\r\n    }\r\n\r\n    /**\r\n     * Validate that address array lengths match, and calling address array are not empty\r\n     * and contain no duplicate elements.\r\n     *\r\n     * @param A         Array of addresses\r\n     * @param B         Array of addresses\r\n     */\r\n    function validatePairsWithArray(address[] calldata A, address[] calldata B) internal pure {\r\n        uint256 aLength = A.length;\r\n        uint256 bLength = B.length;\r\n        if (aLength != bLength) revert AddressArrayUtils__ArrayLengthMismatch(aLength, bLength);\r\n        _validateLengthAndUniqueness(A);\r\n    }\r\n\r\n    /**\r\n     * Validate that address and bytes array lengths match. Validate address array is not empty\r\n     * and contains no duplicate elements.\r\n     *\r\n     * @param A         Array of addresses\r\n     * @param B         Array of bytes\r\n     */\r\n    function validatePairsWithArray(address[] calldata A, bytes[] calldata B) internal pure {\r\n        uint256 aLength = A.length;\r\n        uint256 bLength = B.length;\r\n        if (aLength != bLength) revert AddressArrayUtils__ArrayLengthMismatch(aLength, bLength);\r\n        _validateLengthAndUniqueness(A);\r\n    }\r\n\r\n    /**\r\n     * Validate address array is not empty and contains no duplicate elements.\r\n     *\r\n     * @param A          Array of addresses\r\n     */\r\n    function _validateLengthAndUniqueness(address[] calldata A) internal pure {\r\n        if (A.length == 0) revert AddressArrayUtils__ArrayIsEmpty();\r\n        if (hasDuplicate(A)) revert AddressArrayUtils__ArrayContainsDuplicates();\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable2Step.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership} and {acceptOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available all functions\r\n * from parent (Ownable).\r\n */\r\nabstract contract Ownable2Step is Ownable {\r\n    address private _pendingOwner;\r\n\r\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Returns the address of the pending owner.\r\n     */\r\n    function pendingOwner() public view virtual returns (address) {\r\n        return _pendingOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\r\n        _pendingOwner = newOwner;\r\n        emit OwnershipTransferStarted(owner(), newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual override {\r\n        delete _pendingOwner;\r\n        super._transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev The new owner accepts the ownership transfer.\r\n     */\r\n    function acceptOwnership() public virtual {\r\n        address sender = _msgSender();\r\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\r\n        _transferOwnership(sender);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\r\n     * to be set to zero before setting it to a non-zero value, such as USDT.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\r\n     * Revert on invalid signature.\r\n     */\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return\r\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\r\n    }\r\n}\r\n\r\n// File: contracts/manager/DelegatedManager.sol\r\n\r\n/*\r\n    Copyright 2022 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n\r\n*/\r\n\r\npragma solidity 0.8.21;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title DelegatedManager\r\n * @author Set Protocol\r\n *\r\n * Smart contract manager that maintains permissions and SetToken admin functionality via owner role. Owner\r\n * works alongside methodologist to ensure business agreements are kept. Owner is able to delegate maintenance\r\n * operations to operator(s). There can be more than one operator, however they have a global role so once\r\n * delegated to they can perform any operator delegated roles. The owner is able to set restrictions on what\r\n * operators can do in the form of asset whitelists. Operators cannot trade/wrap/claim/etc. an asset that is not\r\n * a part of the asset whitelist, hence they are a semi-trusted party. It is recommended that the owner address\r\n * be managed by a multi-sig or some form of permissioning system.\r\n *\r\n * CHANGELOG\r\n * - 9/18/23: Upgrade to Solidity 0.8.21\r\n * - 9/27/23: Added custom errors\r\n * - 9/28/23: Switch from Ownable to Ownable2Step\r\n */\r\ncontract DelegatedManager is MutualUpgradeV2, IDelegatedManager, Ownable2Step {\r\n    using Address for address;\r\n    using AddressArrayUtils for address[];\r\n    using SafeERC20 for IERC20;\r\n\r\n    /* ============ Enums ============ */\r\n\r\n    enum ExtensionState {\r\n        NONE,\r\n        PENDING,\r\n        INITIALIZED\r\n    }\r\n\r\n    /* ============ Modifiers ============ */\r\n\r\n    /**\r\n     * Throws if the sender is not the SetToken methodologist\r\n     */\r\n    modifier onlyMethodologist() {\r\n        if (msg.sender != methodologist) revert DelegatedManager__CallerNotMethodologist(msg.sender, methodologist);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Throws if the sender is not an initialized extension\r\n     */\r\n    modifier onlyExtension() {\r\n        if (extensionAllowlist[msg.sender] != ExtensionState.INITIALIZED)\r\n            revert DelegatedManager__ExtensionUninitialized(msg.sender);\r\n        _;\r\n    }\r\n\r\n    /* ============ State Variables ============ */\r\n\r\n    // Instance of SetToken\r\n    ISetToken public immutable SET_TOKEN;\r\n\r\n    // Address of factory contract used to deploy contract\r\n    address public immutable FACTORY;\r\n\r\n    // Mapping to check which ExtensionState a given extension is in\r\n    mapping(address => ExtensionState) public extensionAllowlist;\r\n\r\n    // Array of initialized extensions\r\n    address[] internal extensions;\r\n\r\n    // Mapping indicating if address is an approved operator\r\n    mapping(address=>bool) public operatorAllowlist;\r\n\r\n    // List of approved operators\r\n    address[] internal operators;\r\n\r\n    // Mapping indicating if asset is approved to be traded for, wrapped into, claimed, etc.\r\n    mapping(address=>bool) public assetAllowlist;\r\n\r\n    // List of allowed assets\r\n    address[] internal allowedAssets;\r\n\r\n    // Global owner fee split that can be referenced by Extensions\r\n    uint256 public ownerFeeSplit;\r\n\r\n    // Address owners portions of fees get sent to\r\n    address public ownerFeeRecipient;\r\n\r\n    // Toggle if asset allow list is being enforced\r\n    bool public useAssetAllowlist;\r\n\r\n    // Address of methodologist which serves as providing methodology for the index and receives fee splits\r\n    address public methodologist;\r\n\r\n    /* ============ Constructor ============ */\r\n\r\n    constructor(\r\n        ISetToken _setToken,\r\n        address _factory,\r\n        address _methodologist,\r\n        address[] memory _extensions,\r\n        address[] memory _operators,\r\n        address[] memory _allowedAssets,\r\n        bool _useAssetAllowlist\r\n    )\r\n    {\r\n        SET_TOKEN = _setToken;\r\n        FACTORY = _factory;\r\n        methodologist = _methodologist;\r\n        useAssetAllowlist = _useAssetAllowlist;\r\n        emit UseAssetAllowlistUpdated(_useAssetAllowlist);\r\n\r\n        // Add extensions to allow list\r\n        uint256 extensionsLen = _extensions.length;\r\n        for (uint256 i; i < extensionsLen;) {\r\n            address extension = _extensions[i];\r\n            extensionAllowlist[extension] = ExtensionState.PENDING;\r\n            emit ExtensionAdded(extension);\r\n            unchecked { ++i; }\r\n        }\r\n\r\n        // Add operators to allow list\r\n        operators = _operators;\r\n        uint256 operatorsLen = _operators.length;\r\n        for (uint256 i; i < operatorsLen;) {\r\n            address operator = _operators[i];\r\n            operatorAllowlist[operator] = true;\r\n            emit OperatorAdded(operator);\r\n            unchecked { ++i; }\r\n        }\r\n        \r\n        // Add assets to allow list\r\n        allowedAssets = _allowedAssets;\r\n        uint256 assetsLen = _allowedAssets.length;\r\n        for (uint256 i; i < assetsLen;) {\r\n            address asset = _allowedAssets[i];\r\n            assetAllowlist[asset] = true;\r\n            emit AllowedAssetAdded(asset);\r\n            unchecked { ++i; }\r\n        }\r\n    }\r\n\r\n    /* ============ Override Functions ============ */\r\n\r\n    // Overriding owner() function from IDelegatedManager to use Ownable's owner\r\n    function owner() public view override(IDelegatedManager, Ownable) returns (address) {\r\n        return super.owner();\r\n    }\r\n\r\n    // Overriding transferOwnership() function from IDelegatedManager to use Ownable2Step's transferOwnership\r\n    function transferOwnership(address newOwner) public override(IDelegatedManager, Ownable2Step) onlyOwner {\r\n        Ownable2Step.transferOwnership(newOwner);\r\n    }\r\n\r\n    /* ============ External Functions ============ */\r\n\r\n    /**\r\n     * ONLY EXTENSION: Interact with a module registered on the SetToken. In order to ensure SetToken admin\r\n     * functions can only be changed from this contract no calls to the SetToken can originate from Extensions.\r\n     * To transfer SetTokens use the `transferTokens` function.\r\n     *\r\n     * @param _module           Module to interact with\r\n     * @param _data             Byte data of function to call in module\r\n     */\r\n    function interactManager(address _module, bytes calldata _data) external onlyExtension {\r\n        if (_module == address(SET_TOKEN)) revert DelegatedManager__CallingSetTokenForbidden();\r\n        // Invoke call to module, assume value will always be 0\r\n        _module.functionCallWithValue(_data, 0);\r\n    }\r\n\r\n    /**\r\n     * ONLY EXTENSION: Transfers _tokens held by the manager to _destination. Can be used to\r\n     * distribute fees or recover anything sent here accidentally.\r\n     *\r\n     * @param _token           ERC20 token to send\r\n     * @param _destination     Address receiving the tokens\r\n     * @param _amount          Quantity of tokens to send\r\n     */\r\n    function transferTokens(address _token, address _destination, uint256 _amount) external onlyExtension {\r\n        IERC20(_token).safeTransfer(_destination, _amount);\r\n    }\r\n\r\n    /**\r\n     * ANYONE CALLABLE: Initializes an added extension from PENDING to INITIALIZED state and adds to extension array. An\r\n     * address can only enter a PENDING state if it is an enabled extension added by the manager. Only\r\n     * callable by the extension itself, hence msg.sender is the subject of update.\r\n     */\r\n    function initializeExtension() external {\r\n        if (extensionAllowlist[msg.sender] != ExtensionState.PENDING)\r\n            revert DelegatedManager__ExtensionNotPending(msg.sender);\r\n\r\n        extensionAllowlist[msg.sender] = ExtensionState.INITIALIZED;\r\n        extensions.push(msg.sender);\r\n\r\n        emit ExtensionInitialized(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * ONLY OWNER: Add new extension(s) that the DelegatedManager can call. Puts extensions into PENDING\r\n     * state, each must be initialized in order to be used.\r\n     *\r\n     * @param _extensions           New extension(s) to add\r\n     */\r\n    function addExtensions(address[] calldata _extensions) external onlyOwner {\r\n        uint256 extensionsLen = _extensions.length;\r\n        for (uint256 i; i < extensionsLen;) {\r\n            address extension = _extensions[i];\r\n\r\n            if (extensionAllowlist[extension] != ExtensionState.NONE)\r\n                revert DelegatedManager__ExtensionExists(extension);\r\n\r\n            extensionAllowlist[extension] = ExtensionState.PENDING;\r\n\r\n            emit ExtensionAdded(extension);\r\n\r\n            unchecked { ++i; }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ONLY OWNER: Remove existing extension(s) tracked by the DelegatedManager. Removed extensions are\r\n     * placed in NONE state.\r\n     *\r\n     * @param _extensions           Old extension to remove\r\n     */\r\n    function removeExtensions(address[] calldata _extensions) external onlyOwner {\r\n        uint256 extensionsLen = _extensions.length;\r\n        for (uint256 i; i < extensionsLen;) {\r\n            address extension = _extensions[i];\r\n\r\n            if (extensionAllowlist[extension] != ExtensionState.INITIALIZED)\r\n                revert DelegatedManager__ExtensionUninitialized(extension);\r\n\r\n            extensions.removeStorage(extension);\r\n\r\n            extensionAllowlist[extension] = ExtensionState.NONE;\r\n\r\n            IGlobalExtension(extension).removeExtension();\r\n\r\n            emit ExtensionRemoved(extension);\r\n\r\n            unchecked { ++i; }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ONLY OWNER: Add new operator(s) address(es)\r\n     *\r\n     * @param _operators           New operator(s) to add\r\n     */\r\n    function addOperators(address[] calldata _operators) external onlyOwner {\r\n        uint256 operatorsLen = _operators.length;\r\n        for (uint256 i; i < operatorsLen;) {\r\n            address operator = _operators[i];\r\n\r\n            if (operatorAllowlist[operator]) revert DelegatedManager__OperatorExists(operator);\r\n\r\n            operators.push(operator);\r\n\r\n            operatorAllowlist[operator] = true;\r\n\r\n            emit OperatorAdded(operator);\r\n\r\n            unchecked { ++i; }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ONLY OWNER: Remove operator(s) from the allowlist\r\n     *\r\n     * @param _operators           New operator(s) to remove\r\n     */\r\n    function removeOperators(address[] calldata _operators) external onlyOwner {\r\n        uint256 operatorsLen = _operators.length;\r\n        for (uint256 i; i < operatorsLen;) {\r\n            address operator = _operators[i];\r\n\r\n            if (!operatorAllowlist[operator]) revert DelegatedManager__OperatorNotAllowed(operator);\r\n\r\n            operators.removeStorage(operator);\r\n\r\n            operatorAllowlist[operator] = false;\r\n\r\n            emit OperatorRemoved(operator);\r\n\r\n            unchecked { ++i; }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ONLY OWNER: Add new asset(s) that can be traded to, wrapped to, or claimed\r\n     *\r\n     * @param _assets           New asset(s) to add\r\n     */\r\n    function addAllowedAssets(address[] calldata _assets) external onlyOwner {\r\n        uint256 assetsLen = _assets.length;\r\n        for (uint256 i; i < assetsLen;) {\r\n            address asset = _assets[i];\r\n\r\n            if (assetAllowlist[asset]) revert DelegatedManager__AssetExists(asset);\r\n\r\n            allowedAssets.push(asset);\r\n\r\n            assetAllowlist[asset] = true;\r\n\r\n            emit AllowedAssetAdded(asset);\r\n\r\n            unchecked { ++i; }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ONLY OWNER: Remove asset(s) so that it/they can't be traded to, wrapped to, or claimed\r\n     *\r\n     * @param _assets           Asset(s) to remove\r\n     */\r\n    function removeAllowedAssets(address[] calldata _assets) external onlyOwner {\r\n        uint256 assetsLen = _assets.length;\r\n        for (uint256 i; i < assetsLen;) {\r\n            address asset = _assets[i];\r\n\r\n            if (!assetAllowlist[asset]) revert DelegatedManager__AssetNotAllowed();\r\n\r\n            allowedAssets.removeStorage(asset);\r\n\r\n            assetAllowlist[asset] = false;\r\n\r\n            emit AllowedAssetRemoved(asset);\r\n\r\n            unchecked { ++i; }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ONLY OWNER: Toggle useAssetAllowlist on and off. When false asset allowlist is ignored\r\n     * when true it is enforced.\r\n     *\r\n     * @param _useAssetAllowlist           Bool indicating whether to use asset allow list\r\n     */\r\n    function updateUseAssetAllowlist(bool _useAssetAllowlist) external onlyOwner {\r\n        useAssetAllowlist = _useAssetAllowlist;\r\n\r\n        emit UseAssetAllowlistUpdated(_useAssetAllowlist);\r\n    }\r\n\r\n    /**\r\n     * MUTUAL UPGRADE: Update percent of fees that are sent to owner.\r\n     * Owner and Methodologist must each call this function to execute the update.\r\n     * If Owner and Methodologist point to the same address, the update can be executed in a single call.\r\n     *\r\n     * @param _newFeeSplit           Percent in precise units (100% = 10**18) of fees that accrue to owner\r\n     */\r\n    function updateOwnerFeeSplit(uint256 _newFeeSplit) external mutualUpgrade(owner(), methodologist) {\r\n        if (_newFeeSplit > PreciseUnitMath.preciseUnit()) revert DelegatedManager__FeeSplitInvalid();\r\n\r\n        ownerFeeSplit = _newFeeSplit;\r\n\r\n        emit OwnerFeeSplitUpdated(_newFeeSplit);\r\n    }\r\n\r\n    /**\r\n     * ONLY OWNER: Update address owner receives fees at\r\n     *\r\n     * @param _newFeeRecipient           Address to send owner fees to\r\n     */\r\n    function updateOwnerFeeRecipient(address _newFeeRecipient) external onlyOwner {\r\n        if (_newFeeRecipient == address(0)) revert DelegatedManager__ZeroAddress();\r\n\r\n        ownerFeeRecipient = _newFeeRecipient;\r\n\r\n        emit OwnerFeeRecipientUpdated(_newFeeRecipient);\r\n    }\r\n\r\n    /**\r\n     * ONLY METHODOLOGIST: Update the methodologist address\r\n     *\r\n     * @param _newMethodologist           New methodologist address\r\n     */\r\n    function setMethodologist(address _newMethodologist) external onlyMethodologist {\r\n        if (_newMethodologist == address(0)) revert DelegatedManager__ZeroAddress();\r\n\r\n        methodologist = _newMethodologist;\r\n\r\n        emit MethodologistChanged(_newMethodologist);\r\n    }\r\n\r\n    /**\r\n     * ONLY OWNER: Update the SetToken manager address.\r\n     *\r\n     * @param _newManager           New manager address\r\n     */\r\n    function setManager(address _newManager) external onlyOwner {\r\n        if (_newManager == address(0)) revert DelegatedManager__ZeroAddress();\r\n        uint256 extensionsLength = extensions.length;\r\n        if(extensionsLength != 0) revert DelegatedManager__ExtensionsExist(extensionsLength);\r\n        SET_TOKEN.setManager(_newManager);\r\n    }\r\n\r\n    /**\r\n     * ONLY OWNER: Add a new module to the SetToken.\r\n     *\r\n     * @param _module           New module to add\r\n     */\r\n    function addModule(address _module) external onlyOwner {\r\n        SET_TOKEN.addModule(_module);\r\n    }\r\n\r\n    /**\r\n     * ONLY OWNER: Remove a module from the SetToken.\r\n     *\r\n     * @param _module           Module to remove\r\n     */\r\n    function removeModule(address _module) external onlyOwner {\r\n        SET_TOKEN.removeModule(_module);\r\n    }\r\n\r\n    /* ============ External View Functions ============ */\r\n\r\n    function isAllowedAsset(address _asset) external view returns(bool) {\r\n        return !useAssetAllowlist || assetAllowlist[_asset];\r\n    }\r\n\r\n    function isPendingExtension(address _extension) external view returns(bool) {\r\n        return extensionAllowlist[_extension] == ExtensionState.PENDING;\r\n    }\r\n\r\n    function isInitializedExtension(address _extension) external view returns(bool) {\r\n        return extensionAllowlist[_extension] == ExtensionState.INITIALIZED;\r\n    }\r\n\r\n    function getExtensions() external view returns(address[] memory) {\r\n        return extensions;\r\n    }\r\n\r\n    function getOperators() external view returns(address[] memory) {\r\n        return operators;\r\n    }\r\n\r\n    function getAllowedAssets() external view returns(address[] memory) {\r\n        return allowedAssets;\r\n    }\r\n}\r\n\r\n// File: contracts/factories/DelegatedManagerFactory.sol\r\n\r\n/*\r\n    Copyright 2022 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n    SPDX-License-Identifier: Apache-2.0\r\n*/\r\n\r\npragma solidity 0.8.21;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title DelegatedManagerFactory\r\n * @author Set Protocol\r\n *\r\n * Factory smart contract which gives asset managers the ability to:\r\n * > create a Set Token managed with a DelegatedManager contract\r\n * > create a DelegatedManager contract for an existing Set Token to migrate to\r\n * > initialize extensions and modules for SetTokens using the DelegatedManager system\r\n *\r\n * CHANGELOG\r\n * - 4/21/23: Add Ownable\r\n * - 9/12/23: Switch from Ownable to Ownable2Step\r\n * - 9/18/23: Upgrade to Solidity 0.8.21\r\n * - 9/27/23: Added custom errors\r\n */\r\ncontract DelegatedManagerFactory is Ownable2Step {\r\n    using AddressArrayUtils for address[];\r\n    using Address for address;\r\n\r\n    /* ============ Custom Errors ============ */\r\n\r\n    /// @notice Emitted when a component is missing from the provided asset list.\r\n    error DelegatedManagerFactory__AssetListMissingComponent(address missingComponent);\r\n    /// @notice Emitted when the caller is not the deployer.\r\n    error DelegatedManagerFactory__CallerNotDeployer(address caller, address deployer);\r\n    /// @notice Emitted when the provided extension is not enabled on the ManagerCore.\r\n    error DelegatedManagerFactory__ExtensionInvalid(address extension);\r\n    /// @notice Emitted when the provided extensions are empty.\r\n    error DelegatedManagerFactory__ExtensionsEmpty();\r\n    /// @notice Emitted when the provided bytecode doesn't contain the correct manager.\r\n    error DelegatedManagerFactory__ManagerInBytecodeIncorrect(address providedManager, address expectedManager);\r\n    /// @notice Emitted when the provided SetToken's manager is not in the pending state.\r\n    error DelegatedManagerFactory__ManagerNotPending();\r\n\r\n\r\n    /* ============ Structs ============ */\r\n\r\n    struct InitializeParams {\r\n        address deployer;\r\n        bool isPending;\r\n        address owner;\r\n        address methodologist;\r\n        IDelegatedManager manager;\r\n    }\r\n\r\n    /* ============ Events ============ */\r\n\r\n    /**\r\n     * @dev Emitted on DelegatedManager creation\r\n     * @param _setToken             Instance of the SetToken being created\r\n     * @param _manager              Address of the DelegatedManager\r\n     * @param _deployer             Address of the deployer\r\n     */\r\n    event DelegatedManagerCreated(\r\n        ISetToken indexed _setToken,\r\n        DelegatedManager indexed _manager,\r\n        address _deployer\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted on DelegatedManager initialization\r\n     * @param _setToken             Instance of the SetToken being initialized\r\n     * @param _manager              Address of the DelegatedManager owner\r\n     */\r\n    event DelegatedManagerInitialized(\r\n        ISetToken indexed _setToken,\r\n        IDelegatedManager indexed _manager\r\n    );\r\n\r\n    /* ============ State Variables ============ */\r\n\r\n    // ManagerCore address\r\n    IManagerCore public immutable MANAGER_CORE;\r\n\r\n    // Controller address\r\n    IController public immutable CONTROLLER;\r\n\r\n    // SetTokenFactory address\r\n    ISetTokenCreator public immutable SET_TOKEN_FACTORY;\r\n\r\n    // Mapping which stores manager creation metadata between creation and initialization steps\r\n    mapping(ISetToken => InitializeParams) public initializeState;\r\n\r\n    /* ============ Constructor ============ */\r\n\r\n    /**\r\n     * @dev Sets ManagerCore and SetTokenFactory address.\r\n     * @param _managerCore                      Address of ManagerCore protocol contract\r\n     * @param _controller                       Address of Controller protocol contract\r\n     * @param _setTokenFactory                  Address of SetTokenFactory protocol contract\r\n     */\r\n    constructor(\r\n        IManagerCore _managerCore,\r\n        IController _controller,\r\n        ISetTokenCreator _setTokenFactory\r\n    ) {\r\n        MANAGER_CORE = _managerCore;\r\n        CONTROLLER = _controller;\r\n        SET_TOKEN_FACTORY = _setTokenFactory;\r\n    }\r\n\r\n    /* ============ External Functions ============ */\r\n\r\n    /**\r\n     * ONLY OWNER: Deploys a new SetToken and DelegatedManager. Sets some temporary metadata about\r\n     * the deployment which will be read during a subsequent intialization step which wires everything\r\n     * together.\r\n     *\r\n     * @param _components       List of addresses of components for initial Positions\r\n     * @param _units            List of units. Each unit is the # of components per 10^18 of a SetToken\r\n     * @param _name             Name of the SetToken\r\n     * @param _symbol           Symbol of the SetToken\r\n     * @param _owner            Address to set as the DelegateManager's `owner` role\r\n     * @param _methodologist    Address to set as the DelegateManager's methodologist role\r\n     * @param _modules          List of modules to enable. All modules must be approved by the Controller\r\n     * @param _operators        List of operators authorized for the DelegateManager\r\n     * @param _assets           List of assets DelegateManager can trade. When empty, asset allow list is not enforced\r\n     * @param _extensions       List of extensions authorized for the DelegateManager\r\n     *\r\n     * @return (ISetToken, address) The created SetToken and DelegatedManager addresses, respectively\r\n     */\r\n    function createSetAndManager(\r\n        address[] memory _components,\r\n        int256[] memory _units,\r\n        string memory _name,\r\n        string memory _symbol,\r\n        address _owner,\r\n        address _methodologist,\r\n        address[] memory _modules,\r\n        address[] memory _operators,\r\n        address[] memory _assets,\r\n        address[] memory _extensions\r\n    ) external onlyOwner returns (ISetToken, address) {\r\n        _validateManagerParameters(_components, _extensions, _assets);\r\n\r\n        ISetToken setToken = _deploySet(\r\n            _components,\r\n            _units,\r\n            _modules,\r\n            _name,\r\n            _symbol\r\n        );\r\n\r\n        DelegatedManager manager = _deployManager(\r\n            setToken,\r\n            _extensions,\r\n            _operators,\r\n            _assets\r\n        );\r\n\r\n        _setInitializationState(\r\n            setToken,\r\n            address(manager),\r\n            _owner,\r\n            _methodologist\r\n        );\r\n\r\n        return (setToken, address(manager));\r\n    }\r\n\r\n    /**\r\n     * ONLY DEPLOYER: Wires SetToken, DelegatedManager, global manager extensions, and modules together\r\n     * into a functioning package.\r\n     *\r\n     * NOTE: When migrating to this manager system from an existing SetToken, the SetToken's current manager address\r\n     * must be reset to point at the newly deployed DelegatedManager contract in a separate, final transaction.\r\n     *\r\n     * @param  _setToken                      Instance of the SetToken\r\n     * @param  _ownerFeeSplit                 Fees in precise units (10^16 = 1%) sent to owner, rest to methodologist\r\n     * @param  _ownerFeeRecipient             Address which receives owner's share of fees when they're distributed\r\n     * @param  _extensions                    List of addresses of extensions which need to be initialized\r\n     * @param  _initializeExtensionsBytecode  List of bytecode encoded calls to relevant extensions' initialize function\r\n     */\r\n    function initialize(\r\n        ISetToken _setToken,\r\n        uint256 _ownerFeeSplit,\r\n        address _ownerFeeRecipient,\r\n        address[] calldata _extensions,\r\n        bytes[] calldata _initializeExtensionsBytecode\r\n    ) external {\r\n        if (!initializeState[_setToken].isPending)\r\n            revert DelegatedManagerFactory__ManagerNotPending();\r\n        if (msg.sender != initializeState[_setToken].deployer) \r\n            revert DelegatedManagerFactory__CallerNotDeployer(msg.sender, initializeState[_setToken].deployer);\r\n        _extensions.validatePairsWithArray(_initializeExtensionsBytecode);\r\n\r\n        IDelegatedManager manager = initializeState[_setToken].manager;\r\n\r\n        // If the SetToken was factory-deployed & factory is its current `manager`, transfer\r\n        // managership to the new DelegatedManager\r\n        if (_setToken.manager() == address(this)) {\r\n            _setToken.setManager(address(manager));\r\n        }\r\n\r\n        _initializeExtensions(\r\n            manager,\r\n            _extensions,\r\n            _initializeExtensionsBytecode\r\n        );\r\n\r\n        _setManagerState(\r\n            manager,\r\n            initializeState[_setToken].owner,\r\n            initializeState[_setToken].methodologist,\r\n            _ownerFeeSplit,\r\n            _ownerFeeRecipient\r\n        );\r\n\r\n        delete initializeState[_setToken];\r\n\r\n        emit DelegatedManagerInitialized(_setToken, manager);\r\n    }\r\n\r\n    /* ============ Internal Functions ============ */\r\n\r\n    /**\r\n     * Deploys a SetToken, setting this factory as its manager temporarily, pending initialization.\r\n     * Managership is transferred to a newly created DelegatedManager during `initialize`\r\n     *\r\n     * @param _components       List of addresses of components for initial Positions\r\n     * @param _units            List of units. Each unit is the # of components per 10^18 of a SetToken\r\n     * @param _modules          List of modules to enable. All modules must be approved by the Controller\r\n     * @param _name             Name of the SetToken\r\n     * @param _symbol           Symbol of the SetToken\r\n     *\r\n     * @return Address of created SetToken;\r\n     */\r\n    function _deploySet(\r\n        address[] memory _components,\r\n        int256[] memory _units,\r\n        address[] memory _modules,\r\n        string memory _name,\r\n        string memory _symbol\r\n    ) internal returns (ISetToken) {\r\n        address setToken = SET_TOKEN_FACTORY.create(\r\n            _components,\r\n            _units,\r\n            _modules,\r\n            address(this),\r\n            _name,\r\n            _symbol\r\n        );\r\n\r\n        return ISetToken(setToken);\r\n    }\r\n\r\n    /**\r\n     * Deploys a DelegatedManager. Sets owner and methodologist roles to address(this) and the resulting manager\r\n     * address is saved to the ManagerCore.\r\n     *\r\n     * @param  _setToken         Instance of SetToken to migrate to the DelegatedManager system\r\n     * @param  _extensions       List of extensions authorized for the DelegateManager\r\n     * @param  _operators        List of operators authorized for the DelegateManager\r\n     * @param  _assets           List of assets DelegateManager can trade. When empty, asset allow list is not enforced\r\n     *\r\n     * @return Address of created DelegatedManager\r\n     */\r\n    function _deployManager(\r\n        ISetToken _setToken,\r\n        address[] memory _extensions,\r\n        address[] memory _operators,\r\n        address[] memory _assets\r\n    ) internal returns (DelegatedManager) {\r\n        // If asset array is empty, manager's useAssetAllowList will be set to false\r\n        // and the asset allow list is not enforced\r\n        bool useAssetAllowlist = _assets.length != 0;\r\n\r\n        DelegatedManager newManager = new DelegatedManager(\r\n            _setToken,\r\n            address(this),\r\n            address(this),\r\n            _extensions,\r\n            _operators,\r\n            _assets,\r\n            useAssetAllowlist\r\n        );\r\n\r\n        // Registers manager with ManagerCore\r\n        MANAGER_CORE.addManager(address(newManager));\r\n\r\n        emit DelegatedManagerCreated(_setToken, newManager, msg.sender);\r\n\r\n        return newManager;\r\n    }\r\n\r\n    /**\r\n     * Initialize extensions on the DelegatedManager. Checks that extensions are tracked on the ManagerCore and that the\r\n     * provided bytecode targets the input manager.\r\n     *\r\n     * @param  _manager                  Instance of DelegatedManager\r\n     * @param  _extensions               List of addresses of extensions to initialize\r\n     * @param  _initializeBytecode       List of bytecode encoded calls to relevant extensions's initialize function\r\n     */\r\n    function _initializeExtensions(\r\n        IDelegatedManager _manager,\r\n        address[] memory _extensions,\r\n        bytes[] memory _initializeBytecode\r\n    ) internal {\r\n        uint256 extensionsLen = _extensions.length;\r\n        for (uint256 i; i < extensionsLen;) {\r\n            address extension = _extensions[i];\r\n            if (!MANAGER_CORE.isExtension(extension))\r\n                revert DelegatedManagerFactory__ExtensionInvalid(extension);\r\n\r\n            bytes memory initializeBytecode = _initializeBytecode[i];\r\n\r\n            // Each input initializeBytecode is a varible length bytes array which consists of a 32 byte prefix for the\r\n            // length parameter, a 4 byte function selector, a 32 byte DelegatedManager address, and any additional\r\n            // parameters as shown below:\r\n            // [32bytes - length, 4bytes - function selector, 32bytes - DelegatedManager address, additional parameters]\r\n            // Input DelegatedManager address required as the DelegatedManager address corresponding to the caller\r\n            address inputManager;\r\n            /* solhint-disable-next-line no-inline-assembly */\r\n            assembly {\r\n                inputManager := mload(add(initializeBytecode, 36))\r\n            }\r\n            if (inputManager != address(_manager))\r\n                revert DelegatedManagerFactory__ManagerInBytecodeIncorrect(inputManager, address(_manager));\r\n\r\n            // Because we validate uniqueness of _extensions only one transaction can be sent to each extension during\r\n            // this transaction. Due to this no extension can be used for any SetToken transactions other than\r\n            // initializing these contracts\r\n            extension.functionCallWithValue(initializeBytecode, 0);\r\n\r\n            unchecked { ++i; }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stores temporary creation metadata during the contract creation step. Data is retrieved, read and\r\n     * finally deleted during `initialize`.\r\n     *\r\n     * @param  _setToken         Instance of SetToken\r\n     * @param  _manager          Address of DelegatedManager created for SetToken\r\n     * @param  _owner            Given address to the `owner` DelegatedManager's role on initialization\r\n     * @param  _methodologist    Given address to the `methodologist` DelegatedManager's role on initialization\r\n     */\r\n    function _setInitializationState(\r\n        ISetToken _setToken,\r\n        address _manager,\r\n        address _owner,\r\n        address _methodologist\r\n    ) internal {\r\n        initializeState[_setToken] = InitializeParams({\r\n            deployer: msg.sender,\r\n            owner: _owner,\r\n            methodologist: _methodologist,\r\n            manager: IDelegatedManager(_manager),\r\n            isPending: true\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initialize fee settings on DelegatedManager and transfer `owner` and `methodologist` roles.\r\n     *\r\n     * @param  _manager                 Instance of DelegatedManager\r\n     * @param  _owner                   Address that will be given the `owner` DelegatedManager's role\r\n     * @param  _methodologist           Address that will be given the `methodologist` DelegatedManager's role\r\n     * @param  _ownerFeeSplit           Fees in precise units (10^16 = 1%) sent to owner, rest to methodologist\r\n     * @param  _ownerFeeRecipient       Address which receives owner's share of fees when they're distributed\r\n     */\r\n    function _setManagerState(\r\n        IDelegatedManager _manager,\r\n        address _owner,\r\n        address _methodologist,\r\n        uint256 _ownerFeeSplit,\r\n        address _ownerFeeRecipient\r\n    ) internal {\r\n        _manager.updateOwnerFeeSplit(_ownerFeeSplit);\r\n        _manager.updateOwnerFeeRecipient(_ownerFeeRecipient);\r\n\r\n        _manager.transferOwnership(_owner);\r\n        _manager.setMethodologist(_methodologist);\r\n    }\r\n\r\n    /**\r\n     * Validates that all components currently held by the Set are on the asset allow list. Validate that the manager is\r\n     * deployed with at least one extension in the PENDING state.\r\n     *\r\n     * @param  _components       List of addresses of components for initial/current Set positions\r\n     * @param  _extensions       List of extensions authorized for the DelegateManager\r\n     * @param  _assets           List of assets DelegateManager can trade. When empty, asset allow list is not enforced\r\n     */\r\n    function _validateManagerParameters(\r\n        address[] memory _components,\r\n        address[] memory _extensions,\r\n        address[] memory _assets\r\n    ) internal pure {\r\n        if (_extensions.length == 0) revert DelegatedManagerFactory__ExtensionsEmpty();\r\n\r\n        if (_assets.length != 0) {\r\n            _validateComponentsIncludedInAssetsList(_components, _assets);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validates that all SetToken components are included in the assets whitelist. This prevents the\r\n     * DelegatedManager from being initialized with some components in an untrade-able state.\r\n     *\r\n     * @param _components       List of addresses of components for initial Positions\r\n     * @param  _assets          List of assets DelegateManager can trade.\r\n     */\r\n    function _validateComponentsIncludedInAssetsList(\r\n        address[] memory _components,\r\n        address[] memory _assets\r\n    ) internal pure {\r\n        uint256 componentsLen = _components.length;\r\n        for (uint256 i; i < componentsLen;) {\r\n            if (!_assets.contains(_components[i])) \r\n                revert DelegatedManagerFactory__AssetListMissingComponent(_components[i]);\r\n            unchecked { ++i; }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IManagerCore\",\"name\":\"_managerCore\",\"type\":\"address\"},{\"internalType\":\"contract IController\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"contract ISetTokenCreator\",\"name\":\"_setTokenFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressArrayUtils__ArrayContainsDuplicates\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AddressArrayUtils__ArrayIsEmpty\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lengthA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lengthB\",\"type\":\"uint256\"}],\"name\":\"AddressArrayUtils__ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"missingComponent\",\"type\":\"address\"}],\"name\":\"DelegatedManagerFactory__AssetListMissingComponent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"name\":\"DelegatedManagerFactory__CallerNotDeployer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"}],\"name\":\"DelegatedManagerFactory__ExtensionInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DelegatedManagerFactory__ExtensionsEmpty\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"providedManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expectedManager\",\"type\":\"address\"}],\"name\":\"DelegatedManagerFactory__ManagerInBytecodeIncorrect\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DelegatedManagerFactory__ManagerNotPending\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract DelegatedManager\",\"name\":\"_manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_deployer\",\"type\":\"address\"}],\"name\":\"DelegatedManagerCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IDelegatedManager\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"DelegatedManagerInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTROLLER\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_CORE\",\"outputs\":[{\"internalType\":\"contract IManagerCore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SET_TOKEN_FACTORY\",\"outputs\":[{\"internalType\":\"contract ISetTokenCreator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_components\",\"type\":\"address[]\"},{\"internalType\":\"int256[]\",\"name\":\"_units\",\"type\":\"int256[]\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_methodologist\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_modules\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_operators\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_extensions\",\"type\":\"address[]\"}],\"name\":\"createSetAndManager\",\"outputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ownerFeeSplit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ownerFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_extensions\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_initializeExtensionsBytecode\",\"type\":\"bytes[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"initializeState\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPending\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"methodologist\",\"type\":\"address\"},{\"internalType\":\"contract IDelegatedManager\",\"name\":\"manager\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DelegatedManagerFactory", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000077a21728938e9a7a747c6e88651c0eb311db0ca00000000000000000000000074e49adcbd36984b31b1438077d5bcbe94a628f90000000000000000000000008da123ce168e76bc4d7d52ec155e155beacf784c", "EVMVersion": "paris", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0bad439fc3fd1ef664dbd2aba5b5b54faf4d2352db334984083f7c341ee7e05d"}