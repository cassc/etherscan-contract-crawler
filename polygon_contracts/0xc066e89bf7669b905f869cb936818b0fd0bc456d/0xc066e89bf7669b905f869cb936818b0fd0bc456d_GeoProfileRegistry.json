{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/GeoProfileRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nerror AccountHasExistingProfileError(address account, uint256 profileId);\\nerror ProfileDoesNotExistError();\\nerror NotProfileOwnerError(address account, uint256 profileId);\\nerror ExistingHomeSpaceEqualsNewHomeSpaceError(address account, address homeSpace);\\n\\nstruct GeoProfile {\\n    address homeSpace;\\n    address account;\\n    uint256 id;\\n}\\n\\ncontract GeoProfileRegistry {\\n    uint256 private _profileCounter = 0;\\n    GeoProfile[] private _geoProfiles;\\n    mapping(address => uint256) private _geoProfileIndex;\\n    mapping(address => GeoProfile) private _geoProfileByAccount;\\n\\n    event GeoProfileRegistered(address account, address homeSpace, uint256 id);\\n    event GeoProfileHomeSpaceUpdated(address account, address homeSpace, uint256 id);\\n\\n    /**\\n     * @dev Registers a new Profile for the caller. Only one profile per account is allowed for now.\\n     * \\n     * @param homeSpace The address of the profile's home space. This is the space that will be used\\n     *                  as a link within the Geo knowledge graph. Geo apps will use this space to query\\n     *                  for information about the profile by default. The space can be changed by calling\\n     *                  `updateProfileHomeSpace` in the GeoProfileRegistry.\\n     */\\n    function registerGeoProfile(address homeSpace) public returns (uint256) {\\n        if (geoProfileExists(msg.sender)) {\\n            GeoProfile memory profile = _geoProfileByAccount[msg.sender];\\n            revert AccountHasExistingProfileError(msg.sender, profile.id);\\n        }\\n\\n        uint256 profileId = ++_profileCounter;\\n\\n        GeoProfile memory geoProfile =\\n            GeoProfile({homeSpace: homeSpace, account: msg.sender, id: profileId});\\n\\n        uint256 index = _geoProfiles.length;\\n        _geoProfiles.push(geoProfile);\\n        _geoProfileIndex[msg.sender] = index;\\n        _geoProfileByAccount[msg.sender] = geoProfile;\\n\\n        emit GeoProfileRegistered(msg.sender, homeSpace, profileId);\\n        return profileId;\\n    }\\n\\n    /**\\n     * @dev Updates the home space of the caller's Profile. Only the owner of the Profile can\\n     *      update the home space for a Profile.\\n     * \\n     *  @param homeSpace The new address of the profile's home space.\\n     */\\n    function updateProfileHomeSpace(address homeSpace) public {\\n       if (!geoProfileExists(msg.sender)) {\\n            revert ProfileDoesNotExistError();\\n        }\\n\\n        // Only the owner of the profile can update it.        \\n        if (!(msg.sender == _geoProfileByAccount[msg.sender].account)) {\\n            revert NotProfileOwnerError(msg.sender, _geoProfileByAccount[msg.sender].id);\\n        }\\n\\n        GeoProfile memory geoProfile = _geoProfileByAccount[msg.sender];\\n\\n        if (geoProfile.homeSpace == homeSpace) {\\n            revert ExistingHomeSpaceEqualsNewHomeSpaceError(msg.sender, homeSpace);\\n        }\\n\\n        geoProfile.homeSpace = homeSpace;\\n        _geoProfileByAccount[msg.sender] = geoProfile;\\n        _geoProfiles[_geoProfileIndex[msg.sender]] = geoProfile;\\n\\n        emit GeoProfileHomeSpaceUpdated(msg.sender, homeSpace, geoProfile.id);\\n    }\\n\\n    function geoProfileFor(address account)\\n        public\\n        view\\n        returns (GeoProfile memory)\\n    {\\n        return _geoProfileByAccount[account];\\n    }\\n\\n    function geoProfileExists(address account) public view returns (bool) {\\n        return _geoProfileByAccount[account].id != 0;\\n    }\\n\\n\\n    function geoProfileCount() public view returns (uint256) {\\n        return _profileCounter;\\n    }\\n\\n    function geoProfileAtIndex(uint256 index)\\n        public\\n        view\\n        returns (GeoProfile memory)\\n    {\\n        return _geoProfiles[index];\\n    }\\n\\n    function geoProfiles(uint256 offset, uint256 limit)\\n        public\\n        view\\n        returns (GeoProfile[] memory)\\n    {\\n        uint256 count = geoProfileCount();\\n        uint256 upper = min(count - offset, limit);\\n        GeoProfile[] memory output = new GeoProfile[](upper);\\n\\n        for (uint256 index = 0; index < upper; index++) {\\n            output[index] = geoProfileAtIndex(offset + index);\\n        }\\n\\n        return output;\\n    }\\n\\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a <= b ? a : b;\\n    }\\n\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"}],\"name\":\"AccountHasExistingProfileError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"homeSpace\",\"type\":\"address\"}],\"name\":\"ExistingHomeSpaceEqualsNewHomeSpaceError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"}],\"name\":\"NotProfileOwnerError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProfileDoesNotExistError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"homeSpace\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"GeoProfileHomeSpaceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"homeSpace\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"GeoProfileRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"geoProfileAtIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"homeSpace\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct GeoProfile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geoProfileCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"geoProfileExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"geoProfileFor\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"homeSpace\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct GeoProfile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"geoProfiles\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"homeSpace\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct GeoProfile[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"homeSpace\",\"type\":\"address\"}],\"name\":\"registerGeoProfile\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"homeSpace\",\"type\":\"address\"}],\"name\":\"updateProfileHomeSpace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GeoProfileRegistry", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}