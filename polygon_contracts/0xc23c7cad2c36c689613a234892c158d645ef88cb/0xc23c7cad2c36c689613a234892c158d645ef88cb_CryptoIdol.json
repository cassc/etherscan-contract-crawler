{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\ninterface Verifier {\r\n    function verify(\r\n        uint256[2] calldata pubInputs,\r\n        bytes calldata proof\r\n    ) external view returns(bool);\r\n}\r\n\r\ncontract CryptoIdol {\r\n\r\n    struct Contestant {\r\n        uint256 score;\r\n        uint256 cycle;\r\n    }\r\n\r\n    event NewEntry (\r\n        address indexed contestant,\r\n        uint256 count,\r\n        uint256 score,\r\n        uint256 cycle\r\n    );\r\n\r\n    event NewCycle (\r\n        address indexed verifier,\r\n        uint256 cycle\r\n    );\r\n\r\n    // The mapping of all the scores for each contestant, as well as the hash of their song \r\n    // and cycle in which they participated.\r\n    // mapping(address => Contestant) public contestants;\r\n    mapping(address => uint256) public contestantsCount;\r\n    mapping(address => mapping(uint256 => Contestant)) public contestants;\r\n\r\n    // The admin address in charge of updating the to new verifier each new cycle.\r\n    address public immutable admin;\r\n    // The cycle number. This will be incremented by the admin each time a new cycle occurs.\r\n    uint16 public cycle = 1;\r\n\r\n    Verifier public verifier;\r\n\r\n    constructor(Verifier _verifier, address _admin) {\r\n        verifier = _verifier;\r\n        admin = _admin;\r\n    }  \r\n\r\n    function updateVerifier(address _verifier) public {\r\n        // Called when a new cycle occurs. The admin will update the verifier to the new one.\r\n        require(msg.sender == admin);\r\n        require(_verifier != address(0));\r\n        verifier = Verifier(_verifier);\r\n        cycle += 1;\r\n        emit NewCycle(address(verifier), cycle);\r\n    }\r\n\r\n    function submitScore(uint256 score, bytes memory proof) public {\r\n\r\n        // Verify EZKL proof.\r\n        require(verifier.verify([uint256(uint160(msg.sender)), score], proof));\r\n\r\n        // Update the score struct\r\n        uint256 count = ++contestantsCount[msg.sender];\r\n        contestants[msg.sender][count] = Contestant(score, cycle);\r\n\r\n        // Emit the New Entry event. All of these events will be indexed on the client side in order\r\n        // to construct the leaderboard as opposed to storing the entire leader board on the blockchain.\r\n        emit NewEntry(msg.sender, count, score, cycle);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract Verifier\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"}],\"name\":\"NewCycle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contestant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"}],\"name\":\"NewEntry\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contestants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contestantsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cycle\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"submitScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"}],\"name\":\"updateVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"contract Verifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CryptoIdol", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "0000000000000000000000003d181e9ce5280ecd68c646537c5d8d64b524e33000000000000000000000000088f5b04c9b631be2dd879b9aca1e5ba55acaad8e", "EVMVersion": "istanbul", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3030159c8fbe91d491923189561887e53bb89935860915ff68bbe63e07319c66"}