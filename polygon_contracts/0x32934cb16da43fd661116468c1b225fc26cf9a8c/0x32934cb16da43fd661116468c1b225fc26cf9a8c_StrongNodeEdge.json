{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/StrongNodeEdge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IMRC20 {\\r\\n\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  function decimals() external view returns (uint8);\\r\\n\\r\\n  function symbol() external view returns (string memory);\\r\\n\\r\\n  function name() external view returns (string memory);\\r\\n\\r\\n  function getOwner() external view returns (address);\\r\\n\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n  function allowance(address _owner, address spender) external view returns (uint256);\\r\\n\\r\\n  function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nlibrary SafeMath {\\r\\n\\r\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    uint256 c = a + b;\\r\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n  }\\r\\n\\r\\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n    require(b <= a, errorMessage);\\r\\n    uint256 c = a - b;\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    if (a == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    uint256 c = a * b;\\r\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n  }\\r\\n\\r\\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n    require(b > 0, errorMessage);\\r\\n\\r\\n    uint256 c = a / b;\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n\\r\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n  }\\r\\n\\r\\n\\r\\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n    require(b != 0, errorMessage);\\r\\n    return a % b;\\r\\n  }\\r\\n}\\r\\n\\r\\n\\r\\ncontract Ownable is Context {\\r\\n  address private _owner;\\r\\n\\r\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n  constructor () {\\r\\n    address msgSender = _msgSender();\\r\\n    _owner = msgSender;\\r\\n    emit OwnershipTransferred(address(0), msgSender);\\r\\n  }\\r\\n\\r\\n  function owner() public view returns (address) {\\r\\n    return _owner;\\r\\n  }\\r\\n\\r\\n  modifier onlyOwner() {\\r\\n    require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function transferOwnership(address newOwner) public onlyOwner {\\r\\n    _transferOwnership(newOwner);\\r\\n  }\\r\\n\\r\\n  function _transferOwnership(address newOwner) internal {\\r\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n    emit OwnershipTransferred(_owner, newOwner);\\r\\n    _owner = newOwner;\\r\\n  }\\r\\n}\\r\\n\\r\\ncontract StrongNodeEdge is Context, IMRC20, Ownable {\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  mapping (address => uint256) private _balances;\\r\\n\\r\\n  mapping(address => bool) private bots;\\r\\n\\r\\n  mapping (address => mapping (address => uint256)) private _allowances;\\r\\n\\r\\n  uint256 private _totalSupply;\\r\\n  uint8 private _decimals;\\r\\n  string private _symbol;\\r\\n  string private _name;\\r\\n\\r\\n  address public presaleWallet = 0x87ca15a9f35c25F8adDE03Ab5176cD7f5b819A5e;\\r\\n  address public stakingWallet = 0x6CFaF90A077cFF2d25586d756EF0826Af5b0BF44;\\r\\n  address public operationsWallet = 0x4A6Ef7eCD34ffAb671feaC44E3A62B6Db3F83829; \\r\\n  address public teamWallet = 0x9d1Dccd20F334E2e7a80Fb67f01975A581Fc2C20;\\r\\n  address public treasuryWallet = 0x568153dd1BeD99F55ef9D623732f52cF39F4A976;\\r\\n  address public marketingWallet = 0x9A967fF7dA3916bEb6BAc084990f2549315DE715;\\r\\n  address public advisorWallet = 0xAAB4107f0c0E95c871B781Be9A33D41966866Db2;\\r\\n  address public publicsaleWallet = 0x6712D6A3ED575a7F41bB545Ea92D3D0E451EfaC3;\\r\\n\\r\\n  constructor() {\\r\\n    _name = \\\"StrongNodeEdge Token\\\";\\r\\n    _symbol = \\\"SNE\\\";\\r\\n    _decimals = 18;\\r\\n    _totalSupply = 10**10 * 10**18; \\r\\n\\r\\n\\r\\n    uint256 presaleTokens = _totalSupply.mul(19).div(100);\\r\\n\\r\\n    uint256 stakingTokens = _totalSupply.mul(15).div(100);\\r\\n\\r\\n    uint256 operationTokens = _totalSupply.mul(15).div(100);\\r\\n\\r\\n    uint256 teamTokens = _totalSupply.mul(14).div(100);\\r\\n\\r\\n    uint256 treasuryTokens = _totalSupply.mul(10).div(100);\\r\\n\\r\\n    uint256 marketingTokens = _totalSupply.mul(7).div(100);\\r\\n\\r\\n    uint256 advisorTokens = _totalSupply.mul(4).div(100);\\r\\n\\r\\n    uint256 publicsaleTokens = _totalSupply.mul(2).div(100);\\r\\n\\r\\n    uint256 liquidityTokens = _totalSupply.sub(presaleTokens).sub(stakingTokens).sub(operationTokens).sub(teamTokens);\\r\\n                          \\r\\n    liquidityTokens = liquidityTokens.sub(treasuryTokens).sub(marketingTokens).sub(advisorTokens).sub(publicsaleTokens);\\r\\n    \\r\\n    _balances[presaleWallet] = presaleTokens;\\r\\n    _balances[stakingWallet] = stakingTokens;\\r\\n    _balances[operationsWallet] = operationTokens;\\r\\n    _balances[teamWallet] = teamTokens;\\r\\n    _balances[treasuryWallet] = treasuryTokens;\\r\\n    _balances[marketingWallet] = marketingTokens;\\r\\n    _balances[advisorWallet] = advisorTokens;\\r\\n    _balances[publicsaleWallet] = publicsaleTokens;\\r\\n    _balances[_msgSender()] = liquidityTokens;\\r\\n    \\r\\n    emit Transfer(\\r\\n      address(0),\\r\\n      presaleWallet,\\r\\n      presaleTokens\\r\\n    );\\r\\n\\r\\n    emit Transfer(\\r\\n      address(0),\\r\\n      stakingWallet,\\r\\n      stakingTokens\\r\\n    );\\r\\n\\r\\n    emit Transfer(\\r\\n      address(0),\\r\\n      operationsWallet,\\r\\n      operationTokens\\r\\n    );\\r\\n\\r\\n    emit Transfer(\\r\\n      address(0),\\r\\n      teamWallet,\\r\\n      teamTokens\\r\\n    );\\r\\n\\r\\n    emit Transfer(\\r\\n      address(0),\\r\\n      treasuryWallet,\\r\\n      treasuryTokens\\r\\n    );\\r\\n\\r\\n    emit Transfer(\\r\\n      address(0),\\r\\n      marketingWallet,\\r\\n      marketingTokens\\r\\n    );\\r\\n\\r\\n    emit Transfer(\\r\\n      address(0),\\r\\n      advisorWallet,\\r\\n      advisorTokens\\r\\n    );\\r\\n\\r\\n    emit Transfer(\\r\\n      address(0),\\r\\n      publicsaleWallet,\\r\\n      publicsaleTokens\\r\\n    );\\r\\n\\r\\n    emit Transfer(\\r\\n      address(0),\\r\\n      _msgSender(),\\r\\n      liquidityTokens\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function getOwner() external override view returns (address) {\\r\\n    return owner();\\r\\n  }\\r\\n\\r\\n  function decimals() external override view returns (uint8) {\\r\\n    return _decimals;\\r\\n  }\\r\\n\\r\\n  function symbol() external override view returns (string memory) {\\r\\n    return _symbol;\\r\\n  }\\r\\n\\r\\n  function name() external override view returns (string memory) {\\r\\n    return _name;\\r\\n  }\\r\\n\\r\\n  function totalSupply() external override view returns (uint256) {\\r\\n    return _totalSupply;\\r\\n  }\\r\\n\\r\\n  function balanceOf(address account) external override view returns (uint256) {\\r\\n    return _balances[account];\\r\\n  }\\r\\n\\r\\n  function transfer(address recipient, uint256 amount) external override returns (bool) {\\r\\n    _transfer(_msgSender(), recipient, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function allowance(address owner, address spender) external override view returns (uint256) {\\r\\n    return _allowances[owner][spender];\\r\\n  }\\r\\n\\r\\n  function approve(address spender, uint256 amount) external override returns (bool) {\\r\\n    _approve(_msgSender(), spender, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\r\\n    _transfer(sender, recipient, amount);\\r\\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"MRC20: transfer amount exceeds allowance\\\"));\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\r\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\r\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"MRC20: decreased allowance below zero\\\"));\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function _transfer(address sender, address recipient, uint256 amount) internal {\\r\\n    require(!bots[sender] && !bots[recipient], \\\"ERR: banned transfer\\\");\\r\\n    require(sender != address(0), \\\"MRC20: transfer from the zero address\\\");\\r\\n    require(recipient != address(0), \\\"MRC20: transfer to the zero address\\\");\\r\\n\\r\\n    _balances[sender] = _balances[sender].sub(amount, \\\"MRC20: transfer amount exceeds balance\\\");\\r\\n    _balances[recipient] = _balances[recipient].add(amount);\\r\\n    emit Transfer(sender, recipient, amount);\\r\\n  }\\r\\n\\r\\n \\r\\n  function setBotAddress(address _botAddress, bool isBot) public onlyOwner {\\r\\n      bots[_botAddress] = isBot;\\r\\n  }\\r\\n\\r\\n  function _approve(address owner, address spender, uint256 amount) internal {\\r\\n    require(owner != address(0), \\\"MRC20: approve from the zero address\\\");\\r\\n    require(spender != address(0), \\\"MRC20: approve to the zero address\\\");\\r\\n\\r\\n    _allowances[owner][spender] = amount;\\r\\n    emit Approval(owner, spender, amount);\\r\\n  }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"advisorWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationsWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicsaleWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_botAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBot\",\"type\":\"bool\"}],\"name\":\"setBotAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StrongNodeEdge", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}