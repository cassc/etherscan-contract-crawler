{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Tournament.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport \\\"./extensions/Playable.sol\\\";\\n\\nstruct Tour {    \\n    uint entries;\\n    uint[] scores;\\n    mapping(address=>uint) playerMap;\\n    uint entryDeadline;\\n    uint entryFee;\\n    uint pot;\\n    bool closed;\\n}\\n\\ncontract Tournament is Playable {\\n\\n    mapping(uint=>Tour) public tournaments;    \\n\\n    event PaymentCannotProcessed(uint indexed tournamentId,address player, uint amount,uint index);\\n    event EnterTournament(uint indexed tournamentId,address player,uint amount);\\n    event TournamentCreated(uint tournamentId,uint deadline,uint entryFee);\\n    event TournamentEnded(uint indexed tournamentId,uint winnersCount,uint pot);\\n    event PotDataMismatched(uint tournamentId, uint pot);\\n\\n    constructor(address _playerContract, uint _devFee, address _treasuryWallet)\\n    {\\n        playerContract = IPlayer(_playerContract);        \\n        devFee = _devFee;        \\n        treasuryWallet = ITreasuryWallet(_treasuryWallet);\\n    }\\n\\n    function createTour(uint tournamentId,uint deadline,uint entryFee) public payable onlyScoreSetter {\\n        Tour storage tour = tournaments[tournamentId];\\n        tour.entryDeadline = deadline;\\n        tour.entryFee = entryFee;\\n        tour.pot = msg.value;                         \\n        emit TournamentCreated(tournamentId,deadline,entryFee);        \\n    }\\n\\n    function enterTournament(uint tournamentId,address ref) public payable{\\n        Tour storage tournament = tournaments[tournamentId];\\n        require(tournament.entryDeadline>0 &&  block.timestamp <=tournament.entryDeadline && !tournament.closed,\\\"Enter Tourament: Deadline passed!!\\\");\\n        require(address(playerContract) !=address(0),\\\"Enter Tourament: Player Contract is not defined!!\\\");\\n\\n        if(!playerContract.getPlayerExistence(msg.sender)){\\n            playerContract.registerPlayer(ref,msg.sender);            \\n        }\\n\\n        uint256 amount = msg.value;\\n        \\n        require(msg.value==tournament.entryFee,\\\"Enter Tourament: Amount send is not equal to entry fee!!\\\");\\n        (uint platformFee, ) = _payDevFee(amount, msg.sender,!playerContract.getPlayerExemption(msg.sender));\\n        amount -= platformFee;\\n                \\n        tournament.playerMap[msg.sender] = tournament.playerMap[msg.sender]+1;\\n        tournament.entries++;\\n        tournament.pot+=amount;\\n        emit EnterTournament(tournamentId, msg.sender, amount);        \\n    }\\n\\n    function enterTournamentForFree(uint tournamentId,address ref,address playerAddress) public onlyScoreSetter{\\n        Tour storage tournament = tournaments[tournamentId];\\n        require(tournament.entryDeadline>0 &&  block.timestamp <=tournament.entryDeadline && !tournament.closed,\\\"Enter Tourament: Deadline passed!!\\\");\\n        require(address(playerContract) !=address(0),\\\"Enter Tourament: Player Contract is not defined!!\\\");\\n\\n        if(!playerContract.getPlayerExistence(playerAddress)){\\n            playerContract.registerPlayer(ref,playerAddress);            \\n        }\\n\\n        tournament.playerMap[playerAddress] = tournament.playerMap[playerAddress]+1;\\n        tournament.entries++;        \\n        emit EnterTournament(tournamentId, playerAddress, 0);\\n\\n    }\\n\\n    function endTournament(uint tournamentId,uint[] calldata scores,address[] memory winners,uint[] calldata winnings) public onlyScoreSetter {\\n        if(scores.length>0){\\n            setScores(tournamentId,scores);\\n        }\\n        uint pot = tournaments[tournamentId].pot;        \\n        for(uint i=0;i<winners.length;i++ ){            \\n            if(winners[i] != address(0) && tournaments[tournamentId].playerMap[winners[i]]>0){\\n                pot -= winnings[i];\\n                if(pot<0){\\n                emit PotDataMismatched(tournamentId,tournaments[tournamentId].pot);\\n                break;\\n               }\\n                (bool success,) = winners[i].call{value:winnings[i]}(\\\"\\\");\\n               if(!success){\\n                emit PaymentCannotProcessed(tournamentId,winners[i],winnings[i],i);\\n               }  \\n                \\n            }else{\\n               emit PaymentCannotProcessed(tournamentId,winners[i],winnings[i],i); \\n            }      \\n        }\\n        \\n        Tour storage tournament = tournaments[tournamentId];\\n        tournament.closed = true;\\n        emit TournamentEnded(tournamentId,winners.length,tournament.pot);        \\n    }\\n\\n    function setScores(uint id,uint[] calldata scores) internal{\\n        for(uint i =0 ;i<scores.length;i++){\\n            tournaments[id].scores.push(scores[i]);\\n        }        \\n    }\\n\\n    function getTournamentEntries(uint tournamentId,address player) public view returns(uint){\\n        return tournaments[tournamentId].playerMap[player];\\n    }\\n\\n}\"\r\n    },\r\n    \"/contracts/extensions/Playable.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface ITreasuryWallet {\\n    function addDevWalletBalance(uint) external payable;\\n}\\n\\ninterface IPlayer {\\n\\n    function registerPlayer(address, address) external;\\n\\n    function distributeReferrals(address,uint) external payable returns (uint);\\n\\n    function getPlayerExistence(address useraddr) external view returns (bool);\\n\\n    function getPlayerExemption(address useraddr) external view returns (bool);\\n}\\n\\n\\nabstract contract Playable is Ownable {\\n\\n    ITreasuryWallet treasuryWallet;\\n    IPlayer playerContract;\\n    uint devFee;\\n\\n    address public scoreSetter;    \\n\\n    event Fees(uint256 amount, uint256 refAmount, address player, bool exemption);\\n    event FundsWithdrawn(uint256 amount);\\n\\n    modifier onlyScoreSetter() {\\n        require(msg.sender==scoreSetter,\\\"Playable: Caller not score Setter\\\");\\n        _;\\n    }\\n\\n    modifier onlyTreasury(){\\n        require(msg.sender==address(treasuryWallet),\\\"Playable: Caller not a treasuryWallet\\\");\\n        _;\\n    }\\n\\n    function setTreasuryWallet(address treasuryWalletAddress) public onlyOwner{\\n        treasuryWallet=ITreasuryWallet(treasuryWalletAddress);\\n    }\\n\\n    function setPlayerWallet(address playerAddress) public onlyOwner{\\n        playerContract=IPlayer(playerAddress);\\n    }\\n\\n    function setScoreSetter(address scoreSetterAddress) public onlyOwner{\\n        scoreSetter = scoreSetterAddress;\\n    }\\n\\n\\n    function _payDevFee(\\n        uint256 amount,\\n        address user,\\n        bool payDevFees\\n    ) internal returns (uint, uint) {\\n        require(\\n            address(treasuryWallet) != address(0),\\n            \\\"TreasuryWallet not yet assigned!!\\\"\\n        );\\n        require(\\n            address(playerContract) != address(0),\\n            \\\"Player Contract is not defined!!\\\"\\n        );\\n        uint amountFee;\\n        uint amountAfterRefFee;\\n        if (payDevFees) {\\n            amountFee = (amount * (devFee)) / 100;            \\n            uint refFee = playerContract.distributeReferrals(user,amountFee);                            \\n            treasuryWallet.addDevWalletBalance{value: amountFee}(refFee);\\n        }\\n        emit Fees(\\n            amountFee,\\n            amountAfterRefFee,\\n            msg.sender,\\n            playerContract.getPlayerExemption(msg.sender)\\n        );\\n        return (amountFee, amountAfterRefFee);\\n    }\\n\\n    function withdrawFunds() public onlyTreasury{\\n        uint balance = address(this).balance;\\n        (bool success,)=address(treasuryWallet).call{value:balance}(\\\"\\\");\\n        if(success){\\n            emit FundsWithdrawn(balance);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_playerContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_treasuryWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tournamentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EnterTournament\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exemption\",\"type\":\"bool\"}],\"name\":\"Fees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tournamentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"PaymentCannotProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tournamentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pot\",\"type\":\"uint256\"}],\"name\":\"PotDataMismatched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tournamentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entryFee\",\"type\":\"uint256\"}],\"name\":\"TournamentCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tournamentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winnersCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pot\",\"type\":\"uint256\"}],\"name\":\"TournamentEnded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tournamentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryFee\",\"type\":\"uint256\"}],\"name\":\"createTour\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tournamentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"scores\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"winnings\",\"type\":\"uint256[]\"}],\"name\":\"endTournament\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tournamentId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"enterTournament\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tournamentId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"}],\"name\":\"enterTournamentForFree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tournamentId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getTournamentEntries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scoreSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"}],\"name\":\"setPlayerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"scoreSetterAddress\",\"type\":\"address\"}],\"name\":\"setScoreSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasuryWalletAddress\",\"type\":\"address\"}],\"name\":\"setTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tournaments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entries\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pot\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Tournament", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000012dc0242cd5c49a9538f448f9c4fef4e9729ce000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000098e4d150dcc8ee4faf8d3a5a3fb0bc6e2cc10145", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}