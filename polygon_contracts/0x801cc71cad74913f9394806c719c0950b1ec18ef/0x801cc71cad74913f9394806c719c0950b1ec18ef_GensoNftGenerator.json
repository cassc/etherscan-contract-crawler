{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/AccessController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\n\\r\\ncontract AccessController is AccessControl {\\r\\n  bytes32 public constant OPERATOR = keccak256(\\\"OPERATOR\\\");\\r\\n\\r\\n  modifier onlyAdmin() {\\r\\n    require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"Caller is not the admin\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier onlyOperator() {\\r\\n    require(hasRole(OPERATOR, _msgSender()), \\\"Caller is not the operator\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier onlyOperatorOrAdmin() {\\r\\n    require(hasRole(OPERATOR, _msgSender()) || hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"Caller must be operator or admin\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function addOperator(address operator) external onlyAdmin {\\r\\n    _setupRole(OPERATOR, operator);\\r\\n  }\\r\\n\\r\\n  function removeOperator(address operator) external onlyAdmin {\\r\\n    revokeRole(OPERATOR, operator);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/common/TransferHelperV2.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nlibrary TransferHelper {\\r\\n    function safeTransferFrom(\\r\\n        address token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSignature(\\\"transferFrom(address,address,uint256)\\\", from, to, value));\\r\\n        require(\\r\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\r\\n            \\\"TransferHelper::transferFrom: transferFrom failed\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeEnoughTokenApproved(\\r\\n        address token,\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSignature(\\\"allowance(address,address)\\\", owner, spender));\\r\\n        require( success && (abi.decode(data, (uint256)) >= amount), \\\"Exchange currency allowance of user is too low\\\");\\r\\n        safeEnoughBalance(token, owner, amount);\\r\\n    }\\r\\n\\r\\n    function safeEnoughBalance(\\r\\n        address token,\\r\\n        address owner,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSignature(\\\"balanceOf(address)\\\", owner));\\r\\n        require( success && (abi.decode(data, (uint256)) >= amount), \\\"Exchange currency balance of user is too low\\\");\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IConsumptionItem.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface IConsumptionItem {\\r\\n  function mintItem(uint256 _nftId, uint256 _amount, address _wallet, bool _isUGC) external;\\r\\n\\r\\n  function burnItem(uint256 _nftId, uint256 _amount, address _wallet) external;\\r\\n\\r\\n  function transfer(address _from, address _to, uint256 _nftId, uint256 amount) external;\\r\\n\\r\\n  function getBalance(address _wallet, uint256 _nftId) external view returns (uint256);\\r\\n\\r\\n  function getCreatorOfConsumption(uint256 _nftId) external view returns (address);\\r\\n\\r\\n  function safeTransferFrom(address from_, address to_, uint256 id_, uint256 amount_, bytes memory data_) external;\\r\\n\\r\\n  function safeBatchTransferFrom(address from_, address to_, uint256[] memory ids_, uint256[] memory amounts_, bytes memory data_) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IGensoERC1155.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface IGensoERC1155 {\\r\\n\\r\\n  function mintItem(address to_, uint256 tokenId_, uint256 amount_) external;\\r\\n\\r\\n  function burnItem(address from_, uint256 tokenId_, uint256 amount_) external;\\r\\n\\r\\n  function mintBatchItem(address to_, uint256[] memory tokenIds_, uint256[] memory amounts_) external;\\r\\n\\r\\n  function burnBatchItem(address from_, uint256[] memory tokenIds_, uint256[] memory amounts_) external;\\r\\n\\r\\n  function safeTransferFrom(address from_, address to_, uint256 id_, uint256 amount_, bytes memory data_) external;\\r\\n\\r\\n  function safeBatchTransferFrom(address from_, address to_, uint256[] memory ids_, uint256[] memory amounts_, bytes memory data_) external;\\r\\n  \\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IGensoERC721.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface IGensoERC721 {\\r\\n  function mint(address to_, uint256 tokenId_) external;\\r\\n\\r\\n  function bulkMint(address[] memory tos_, uint256[] memory tokenIds_) external;\\r\\n\\r\\n  function safeTransferFrom(address from_, address to_, uint256 tokenId_) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IGensoNftInventory.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface IGensoNftInventory {\\r\\n  function getQuantityOfNft(address nftAddress_, uint256 nftItemId_) external view returns (uint128, uint128);\\r\\n\\r\\n  function getQuantityOfNfts(address nftAddress_, uint256[] calldata nftItemIds_) external view returns (uint128[] memory, uint128[] memory);\\r\\n\\r\\n  function updateMintedQuantityOfNft(address nftAddress_, uint256 nftItemId_, uint128 quantity_) external returns (uint128);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IGensoNftLineManager.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface IGensoNftLineManager {\\r\\n  function getTotalLineOfUser(address userAddress_) external view returns (uint16);\\r\\n\\r\\n  function getLatestLineNumberOfUser(address userAddress_) external view returns (uint16);\\r\\n\\r\\n  function addLine(address userAddress_, uint16 lineNumber_) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/polygon_contracts/nft_generation/GensoNftGenerator.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport {ERC1155Holder, ERC1155Receiver} from \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\r\\nimport {ERC721Holder} from \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\r\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport {AccessController, AccessControl} from \\\"../../common/AccessController.sol\\\";\\r\\nimport {TransferHelper} from \\\"../../common/TransferHelperV2.sol\\\";\\r\\nimport {IConsumptionItem} from \\\"../../interfaces/IConsumptionItem.sol\\\";\\r\\nimport {IGensoERC721} from \\\"../../interfaces/IGensoERC721.sol\\\";\\r\\nimport {IGensoERC1155} from \\\"../../interfaces/IGensoERC1155.sol\\\";\\r\\nimport {IGensoNftInventory} from \\\"../../interfaces/IGensoNftInventory.sol\\\";\\r\\nimport {IGensoNftLineManager} from \\\"../../interfaces/IGensoNftLineManager.sol\\\";\\r\\n\\r\\ncontract GensoNftGenerator is AccessController, ReentrancyGuard, ERC1155Holder, ERC721Holder, Pausable {\\r\\n  using ECDSA for bytes32;\\r\\n  using Address for address;\\r\\n\\r\\n  /* Event */\\r\\n  event NftGenerated(uint256 tokenId, uint16 indexed recipeId, Item[] elements, GenerateLock lock);\\r\\n  event Claimed(uint256[] generateIds, address indexed userAddress, uint256 timestamp);\\r\\n  event LineSpeeded(uint16 lineNumber, uint256 generateId, address indexed userAddress, uint256 price, uint8 currencyType, uint256 timestamp);\\r\\n  event LineAdded(uint16 lineNumber, address indexed userAddress, uint256 price, uint8 currencyType, uint256 timestamp);\\r\\n\\r\\n  /* Enum */\\r\\n  enum ErcType {\\r\\n    ERC721,\\r\\n    ERC1155\\r\\n  }\\r\\n\\r\\n  /* Struct */\\r\\n  struct PriceInfo {\\r\\n    uint256 price;\\r\\n    uint8 currencyType;\\r\\n  }\\r\\n\\r\\n  struct Item {\\r\\n    uint256 tokenId;\\r\\n    ErcType ercType;\\r\\n    uint8 contractType;\\r\\n    uint128 quantity;\\r\\n  }\\r\\n\\r\\n  struct GenerateResult {\\r\\n    uint256 tokenId;\\r\\n    uint256 unlockedAt;\\r\\n    uint16 lineNumber;\\r\\n    ErcType ercType;\\r\\n    uint8 contractType;\\r\\n    uint128 quantity;\\r\\n  }\\r\\n\\r\\n  struct Recipe {\\r\\n    uint256 itemId;\\r\\n    uint256 generateTime;\\r\\n    uint16 recipeId;\\r\\n    uint8 contractType;\\r\\n    ErcType ercType;\\r\\n    uint128 quantity;\\r\\n    Item[] elements;\\r\\n  }\\r\\n\\r\\n  struct Signature {\\r\\n    uint256 timestamp;\\r\\n    bytes32 orderId;\\r\\n    bytes signature;\\r\\n  }\\r\\n\\r\\n  struct GenerateLock {\\r\\n    uint256 generateId;\\r\\n    uint256 lockedAt;\\r\\n    uint256 unlockedAt;\\r\\n    uint16 lineNumber;\\r\\n    address userAddress;\\r\\n  }\\r\\n\\r\\n  /* State variable */\\r\\n  address[] public currencies;\\r\\n  IGensoERC721[] public erc721Contracts;\\r\\n  address[] public erc1155Addresses;\\r\\n\\r\\n  mapping(address => mapping(uint16 => uint256)) public latestGenerateIdOfLineByUsers;\\r\\n\\r\\n  mapping(address => uint256) public generateTimeOfUsers; // GenerateId start from 1\\r\\n  mapping(address => mapping(uint256 => GenerateResult)) public generateResultOfUsers;\\r\\n  mapping(address => uint256) public markedGenerateIdOfUsers;\\r\\n\\r\\n  IGensoNftLineManager private _lineManager;\\r\\n  IGensoNftInventory private _nftInventory;\\r\\n  address private _feeReceiver;\\r\\n  address private _nftReceiver;\\r\\n  address private _verificator;\\r\\n  uint256 private _signatureExpireTime;\\r\\n  mapping(bytes32 => bool) private _executedOrderIds;\\r\\n\\r\\n  /* Constructor */\\r\\n  constructor(address nftInventory_, address lineManager_, address feeReceiver_, address nftReceiver_, address verificator_, uint256 expireTime_) {\\r\\n    _lineManager = IGensoNftLineManager(lineManager_);\\r\\n    _nftInventory = IGensoNftInventory(nftInventory_);\\r\\n    _feeReceiver = feeReceiver_;\\r\\n    _nftReceiver = nftReceiver_;\\r\\n    _verificator = verificator_;\\r\\n    _signatureExpireTime = expireTime_;\\r\\n    _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\r\\n  }\\r\\n\\r\\n  /* Management function */\\r\\n  function pause() public onlyAdmin {\\r\\n    _pause();\\r\\n  }\\r\\n\\r\\n  function unpause() public onlyAdmin {\\r\\n    _unpause();\\r\\n  }\\r\\n\\r\\n  function resetCurrencies() external onlyAdmin {\\r\\n    delete currencies;\\r\\n  }\\r\\n\\r\\n  function addCurrency(address addr_) external onlyAdmin {\\r\\n    _validateContractAddress(addr_);\\r\\n    currencies.push(addr_);\\r\\n  }\\r\\n\\r\\n  function addErc721Contract(address addr_) external onlyAdmin {\\r\\n    _validateContractAddress(addr_);\\r\\n    erc721Contracts.push(IGensoERC721(addr_));\\r\\n  }\\r\\n\\r\\n  function resetErc721Contracts() external onlyAdmin {\\r\\n    delete erc721Contracts;\\r\\n  }\\r\\n\\r\\n  function resetErc1155Addresses() external onlyAdmin {\\r\\n    delete erc1155Addresses;\\r\\n  }\\r\\n\\r\\n  function addErc1155Address(address addr_) external onlyAdmin {\\r\\n    _validateContractAddress(addr_);\\r\\n    erc1155Addresses.push(addr_);\\r\\n  }\\r\\n\\r\\n  function setLineManager(address addr_) external onlyAdmin {\\r\\n    _lineManager = IGensoNftLineManager(addr_);\\r\\n  }\\r\\n\\r\\n  function setNftInventory(address addr_) external onlyAdmin {\\r\\n    _nftInventory = IGensoNftInventory(addr_);\\r\\n  }\\r\\n\\r\\n  function setFeeReceiverAddress(address addr_) external onlyAdmin {\\r\\n    _feeReceiver = addr_;\\r\\n  }\\r\\n\\r\\n  function setNftReceiverAddress(address addr_) external onlyAdmin {\\r\\n    _nftReceiver = addr_;\\r\\n  }\\r\\n\\r\\n  function setVerificatorAddress(address addr_) external onlyAdmin {\\r\\n    _verificator = addr_;\\r\\n  }\\r\\n\\r\\n  function setSignatureExpireTime(uint256 time_) external onlyAdmin {\\r\\n    _signatureExpireTime = time_;\\r\\n  }\\r\\n\\r\\n  function setMarkedGenerateIdOfUsers(address[] calldata userAddresses_, uint256[] calldata markedGenerateIds_) external onlyAdmin {\\r\\n    require(userAddresses_.length == markedGenerateIds_.length, \\\"Two arrays length mismatch\\\");\\r\\n    for (uint256 i; i < userAddresses_.length; i += 1) {\\r\\n      markedGenerateIdOfUsers[userAddresses_[i]] = markedGenerateIds_[i];\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /* Modifier */\\r\\n  modifier isFreeLine(uint16 lineNumber_) {\\r\\n    address userAddress = _msgSender();\\r\\n    uint16 latestLineNumber = _lineManager.getLatestLineNumberOfUser(userAddress);\\r\\n    require(lineNumber_ <= latestLineNumber, \\\"Invalid line number\\\");\\r\\n    uint256 latestGenerateId = latestGenerateIdOfLineByUsers[userAddress][lineNumber_];\\r\\n    GenerateResult memory result = generateResultOfUsers[userAddress][latestGenerateId];\\r\\n    require(result.unlockedAt <= block.timestamp, \\\"This line has already locked\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier isUsableSignature(bytes32 orderId_, uint256 timestamp_) {\\r\\n    require(!_executedOrderIds[orderId_], \\\"Signature has already used\\\");\\r\\n    require(timestamp_ + _signatureExpireTime >= block.timestamp, \\\"Signature has already expired\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /* Util function */\\r\\n  function getLatestResultOfLines(address userAddress_) public view returns (GenerateResult[] memory) {\\r\\n    uint16 totalLine = _lineManager.getTotalLineOfUser(userAddress_);\\r\\n    GenerateResult[] memory results = new GenerateResult[](totalLine);\\r\\n    for (uint16 lineNumber; lineNumber < totalLine; lineNumber += 1) {\\r\\n      uint256 latestGenerateId = latestGenerateIdOfLineByUsers[userAddress_][lineNumber];\\r\\n      GenerateResult memory result = generateResultOfUsers[userAddress_][latestGenerateId];\\r\\n      result.lineNumber = lineNumber;\\r\\n      results[lineNumber] = result;\\r\\n    }\\r\\n    return results;\\r\\n  }\\r\\n\\r\\n  function getAllItemsNotClaimedByUser(address userAddress_) public view returns (GenerateResult[] memory) {\\r\\n    uint256 generateTime = generateTimeOfUsers[userAddress_];\\r\\n    uint256 nextGenerateId = markedGenerateIdOfUsers[userAddress_] + 1;\\r\\n    uint256 notClaimedItemCount;\\r\\n    for (uint256 i = nextGenerateId; i <= generateTime; i += 1) {\\r\\n      if (generateResultOfUsers[userAddress_][i].tokenId != 0) {\\r\\n        notClaimedItemCount += 1;\\r\\n      }\\r\\n    }\\r\\n    GenerateResult[] memory results = new GenerateResult[](notClaimedItemCount);\\r\\n    uint256 index;\\r\\n    for (uint256 i = nextGenerateId; i <= generateTime; i += 1) {\\r\\n      GenerateResult memory result = generateResultOfUsers[userAddress_][i];\\r\\n      if (result.tokenId != 0) {\\r\\n        results[index] = result;\\r\\n        index += 1;\\r\\n      }\\r\\n    }\\r\\n    return results;\\r\\n  }\\r\\n\\r\\n  function getGenerateResultsOfUser(address userAddress_, uint256[] calldata generateIds_) public view returns (GenerateResult[] memory) {\\r\\n    GenerateResult[] memory results = new GenerateResult[](generateIds_.length);\\r\\n    for (uint256 i = 0; i < generateIds_.length; i += 1) {\\r\\n      GenerateResult memory result = generateResultOfUsers[userAddress_][generateIds_[i]];\\r\\n      results[i] = result;\\r\\n    }\\r\\n    return results;\\r\\n  }\\r\\n\\r\\n  /* Main function */\\r\\n  function addLine(\\r\\n    uint16 lineNumber_,\\r\\n    PriceInfo calldata priceInfo_,\\r\\n    Signature calldata signature_\\r\\n  ) external whenNotPaused isUsableSignature(signature_.orderId, signature_.timestamp) {\\r\\n    address userAddress = _msgSender();\\r\\n    require(_isValidAddLineSignature(signature_, userAddress, lineNumber_, priceInfo_), \\\"Invalid signature\\\");\\r\\n    require(priceInfo_.currencyType < currencies.length, \\\"Invalid currency\\\");\\r\\n\\r\\n    _executedOrderIds[signature_.orderId] = true;\\r\\n    _lineManager.addLine(userAddress, lineNumber_);\\r\\n    TransferHelper.safeEnoughTokenApproved(currencies[priceInfo_.currencyType], userAddress, address(this), priceInfo_.price);\\r\\n    TransferHelper.safeTransferFrom(currencies[priceInfo_.currencyType], userAddress, _feeReceiver, priceInfo_.price);\\r\\n\\r\\n    emit LineAdded(lineNumber_, userAddress, priceInfo_.price, priceInfo_.currencyType, block.timestamp);\\r\\n  }\\r\\n\\r\\n  function generateErc721(\\r\\n    uint16 lineNumber_,\\r\\n    Recipe calldata recipe_,\\r\\n    Signature calldata signature_\\r\\n  ) external whenNotPaused nonReentrant isFreeLine(lineNumber_) isUsableSignature(signature_.orderId, signature_.timestamp) {\\r\\n    address userAddress = _msgSender();\\r\\n    require(_isValidGenerateNftSignature(signature_, userAddress, recipe_), \\\"Invalid signature\\\");\\r\\n    require(recipe_.elements.length > 0, \\\"Empty elements array\\\");\\r\\n    require(recipe_.ercType == ErcType.ERC721, \\\"Must be ERC721 recipe\\\");\\r\\n    require(recipe_.contractType < erc721Contracts.length, \\\"Invalid ERC721 recipe\\\");\\r\\n\\r\\n    _executedOrderIds[signature_.orderId] = true;\\r\\n    generateTimeOfUsers[userAddress] += 1;\\r\\n    uint128 nextNumbering = _nftInventory.updateMintedQuantityOfNft(address(erc721Contracts[recipe_.contractType]), recipe_.itemId, 1);\\r\\n\\r\\n    uint256 newTokenId = _getNewTokenIdOfErc721(recipe_.itemId, nextNumbering);\\r\\n    generateResultOfUsers[userAddress][generateTimeOfUsers[userAddress]] = GenerateResult({\\r\\n      lineNumber: lineNumber_,\\r\\n      tokenId: newTokenId,\\r\\n      ercType: ErcType.ERC721,\\r\\n      contractType: recipe_.contractType,\\r\\n      quantity: 1,\\r\\n      unlockedAt: block.timestamp + recipe_.generateTime\\r\\n    });\\r\\n    latestGenerateIdOfLineByUsers[userAddress][lineNumber_] = generateTimeOfUsers[userAddress];\\r\\n\\r\\n    _transferElements(userAddress, recipe_.elements);\\r\\n    erc721Contracts[recipe_.contractType].mint(address(this), newTokenId);\\r\\n\\r\\n    GenerateLock memory lock = GenerateLock({\\r\\n      generateId: generateTimeOfUsers[userAddress],\\r\\n      lockedAt: block.timestamp,\\r\\n      unlockedAt: block.timestamp + recipe_.generateTime,\\r\\n      lineNumber: lineNumber_,\\r\\n      userAddress: userAddress\\r\\n    });\\r\\n    emit NftGenerated(newTokenId, recipe_.recipeId, recipe_.elements, lock);\\r\\n  }\\r\\n\\r\\n  function generateErc1155(\\r\\n    uint16 lineNumber_,\\r\\n    Recipe calldata recipe_,\\r\\n    Signature calldata signature_\\r\\n  ) external whenNotPaused nonReentrant isFreeLine(lineNumber_) isUsableSignature(signature_.orderId, signature_.timestamp) {\\r\\n    address userAddress = _msgSender();\\r\\n    require(_isValidGenerateNftSignature(signature_, userAddress, recipe_), \\\"Invalid signature\\\");\\r\\n    require(recipe_.contractType < erc1155Addresses.length, \\\"Invalid ERC1155 recipe\\\");\\r\\n    require(recipe_.elements.length > 0, \\\"Empty elements array\\\");\\r\\n    require(recipe_.ercType == ErcType.ERC1155, \\\"Must be ERC1155 recipe\\\");\\r\\n    require(recipe_.quantity > 0, \\\"Quantity must be greater than 0\\\");\\r\\n\\r\\n    _executedOrderIds[signature_.orderId] = true;\\r\\n    generateTimeOfUsers[userAddress] += 1;\\r\\n    uint256 newGenerateId = generateTimeOfUsers[userAddress];\\r\\n    uint256 unlockedAt = block.timestamp + recipe_.generateTime;\\r\\n    generateResultOfUsers[userAddress][newGenerateId] = GenerateResult({\\r\\n      lineNumber: lineNumber_,\\r\\n      tokenId: recipe_.itemId,\\r\\n      ercType: ErcType.ERC1155,\\r\\n      contractType: recipe_.contractType,\\r\\n      quantity: recipe_.quantity,\\r\\n      unlockedAt: unlockedAt\\r\\n    });\\r\\n    latestGenerateIdOfLineByUsers[userAddress][lineNumber_] = newGenerateId;\\r\\n\\r\\n    _transferElements(userAddress, recipe_.elements);\\r\\n    _mintErc1155Recipe(recipe_.contractType, recipe_.itemId, recipe_.quantity, address(this));\\r\\n\\r\\n    GenerateLock memory lock = GenerateLock({\\r\\n      generateId: generateTimeOfUsers[userAddress],\\r\\n      lockedAt: block.timestamp,\\r\\n      unlockedAt: unlockedAt,\\r\\n      lineNumber: lineNumber_,\\r\\n      userAddress: userAddress\\r\\n    });\\r\\n    emit NftGenerated(recipe_.itemId, recipe_.recipeId, recipe_.elements, lock);\\r\\n  }\\r\\n\\r\\n  function generateNow(\\r\\n    uint16 lineNumber_,\\r\\n    PriceInfo calldata priceInfo_,\\r\\n    Signature calldata signature_\\r\\n  ) external whenNotPaused isUsableSignature(signature_.orderId, signature_.timestamp) {\\r\\n    address userAddress = _msgSender();\\r\\n    require(_isValidGenerateNowSignature(signature_, userAddress, priceInfo_), \\\"Invalid signature\\\");\\r\\n    require(priceInfo_.currencyType < currencies.length, \\\"Invalid currency\\\");\\r\\n    require(priceInfo_.price > 0, \\\"Invalid unit price\\\");\\r\\n    require(lineNumber_ < _lineManager.getTotalLineOfUser(userAddress), \\\"Invalid line number\\\");\\r\\n    uint256 latestGenerateId = latestGenerateIdOfLineByUsers[userAddress][lineNumber_];\\r\\n    GenerateResult storage result = generateResultOfUsers[userAddress][latestGenerateId];\\r\\n    uint256 currentTime = block.timestamp;\\r\\n    require(result.unlockedAt > currentTime, \\\"This line has already unlocked\\\");\\r\\n\\r\\n    _executedOrderIds[signature_.orderId] = true;\\r\\n    uint256 totalPrice = _getTotalPriceToGenerateNow(result.unlockedAt, currentTime, priceInfo_.price);\\r\\n    result.unlockedAt = currentTime;\\r\\n\\r\\n    TransferHelper.safeEnoughTokenApproved(currencies[priceInfo_.currencyType], userAddress, address(this), totalPrice);\\r\\n    TransferHelper.safeTransferFrom(currencies[priceInfo_.currencyType], userAddress, _feeReceiver, totalPrice);\\r\\n\\r\\n    emit LineSpeeded(lineNumber_, latestGenerateId, userAddress, totalPrice, priceInfo_.currencyType, currentTime);\\r\\n  }\\r\\n\\r\\n  function claimAll() external nonReentrant {\\r\\n    address userAddress = _msgSender();\\r\\n    uint256 generateTime = generateTimeOfUsers[userAddress];\\r\\n    uint256 nextGenerateId = markedGenerateIdOfUsers[userAddress] + 1;\\r\\n    uint256 currentTime = block.timestamp;\\r\\n    uint256[] memory generateIds = new uint256[](generateTime - nextGenerateId + 1);\\r\\n    uint256 counter;\\r\\n    for (uint256 i = nextGenerateId; i <= generateTime; i += 1) {\\r\\n      GenerateResult memory result = generateResultOfUsers[userAddress][i];\\r\\n      if (result.tokenId != 0 && result.unlockedAt <= currentTime) {\\r\\n        generateIds[counter] = i;\\r\\n        counter += 1;\\r\\n        delete generateResultOfUsers[userAddress][i];\\r\\n        _transferResult(userAddress, result);\\r\\n      }\\r\\n    }\\r\\n    _updateMarkedGenerateId(userAddress, nextGenerateId, generateTime);\\r\\n\\r\\n    emit Claimed(generateIds, userAddress, currentTime);\\r\\n  }\\r\\n\\r\\n  function claimOne(uint16 lineNumber_) external {\\r\\n    address userAddress = _msgSender();\\r\\n    uint256 currentTime = block.timestamp;\\r\\n    uint256 latestGenerateId = latestGenerateIdOfLineByUsers[userAddress][lineNumber_];\\r\\n    GenerateResult memory result = generateResultOfUsers[userAddress][latestGenerateId];\\r\\n    require(result.tokenId != 0, \\\"Don't have anything to claim\\\");\\r\\n    require(result.unlockedAt <= currentTime, \\\"Generation not completed\\\");\\r\\n\\r\\n    uint256[] memory generateIds = new uint256[](1);\\r\\n    generateIds[0] = latestGenerateId;\\r\\n    delete generateResultOfUsers[userAddress][latestGenerateId];\\r\\n    _transferResult(userAddress, result);\\r\\n\\r\\n    emit Claimed(generateIds, userAddress, currentTime);\\r\\n  }\\r\\n\\r\\n  function claimMulti(uint256[] calldata generateIds) external nonReentrant {\\r\\n    require(generateIds.length > 0, \\\"Empty claim array\\\");\\r\\n    address userAddress = _msgSender();\\r\\n    uint256 currentTime = block.timestamp;\\r\\n    for (uint256 i = 0; i < generateIds.length; i += 1) {\\r\\n      GenerateResult memory result = generateResultOfUsers[userAddress][generateIds[i]];\\r\\n      require(result.tokenId != 0, \\\"Don't have anything to claim\\\");\\r\\n      require(result.unlockedAt <= currentTime, \\\"Generation not completed\\\");\\r\\n\\r\\n      delete generateResultOfUsers[userAddress][generateIds[i]];\\r\\n      _transferResult(userAddress, result);\\r\\n    }\\r\\n    emit Claimed(generateIds, userAddress, currentTime);\\r\\n  }\\r\\n\\r\\n  /* Private function */\\r\\n  function _isValidAddLineSignature(\\r\\n    Signature calldata signature_,\\r\\n    address sender_,\\r\\n    uint16 lineNumber_,\\r\\n    PriceInfo calldata priceInfo_\\r\\n  ) private view returns (bool) {\\r\\n    bytes32 hashValue = keccak256(\\r\\n      abi.encodePacked(signature_.orderId, sender_, lineNumber_, priceInfo_.price, priceInfo_.currencyType, signature_.timestamp)\\r\\n    );\\r\\n    return _verifySignature(hashValue, signature_.signature);\\r\\n  }\\r\\n\\r\\n  function _isValidGenerateNowSignature(Signature calldata signature_, address sender_, PriceInfo calldata priceInfo_) private view returns (bool) {\\r\\n    bytes32 hashValue = keccak256(abi.encodePacked(signature_.orderId, sender_, priceInfo_.price, priceInfo_.currencyType, signature_.timestamp));\\r\\n    return _verifySignature(hashValue, signature_.signature);\\r\\n  }\\r\\n\\r\\n  function _isValidGenerateNftSignature(Signature calldata signature_, address sender_, Recipe calldata recipe_) private view returns (bool) {\\r\\n    bytes memory encodedRecipe = encodeRecipe(recipe_);\\r\\n    bytes32 hashValue = keccak256(abi.encodePacked(signature_.orderId, sender_, encodedRecipe, signature_.timestamp));\\r\\n    return _verifySignature(hashValue, signature_.signature);\\r\\n  }\\r\\n\\r\\n  function _verifySignature(bytes32 data, bytes calldata signature_) private view returns (bool) {\\r\\n    return data.toEthSignedMessageHash().recover(signature_) == _verificator;\\r\\n  }\\r\\n\\r\\n  function encodeRecipe(Recipe calldata recipe_) public pure returns (bytes memory) {\\r\\n    bytes memory encodedElements = _encodeElements(recipe_.elements);\\r\\n    return\\r\\n      abi.encodePacked(\\r\\n        recipe_.itemId,\\r\\n        recipe_.recipeId,\\r\\n        recipe_.contractType,\\r\\n        recipe_.ercType,\\r\\n        recipe_.generateTime,\\r\\n        recipe_.quantity,\\r\\n        encodedElements\\r\\n      );\\r\\n  }\\r\\n\\r\\n  function _encodeElements(Item[] calldata items_) private pure returns (bytes memory) {\\r\\n    bytes memory encodedItems;\\r\\n    for (uint256 i = 0; i < items_.length; i += 1) {\\r\\n      Item memory item = items_[i];\\r\\n      encodedItems = abi.encodePacked(encodedItems, item.tokenId, item.ercType, item.contractType, item.quantity);\\r\\n    }\\r\\n    return encodedItems;\\r\\n  }\\r\\n\\r\\n  function _mintErc1155Recipe(uint8 contractType_, uint256 nftItemId_, uint128 quantity_, address to_) private {\\r\\n    address erc1155Address = erc1155Addresses[contractType_];\\r\\n    if (contractType_ == 0) {\\r\\n      IConsumptionItem(erc1155Address).mintItem(nftItemId_, quantity_, to_, false);\\r\\n    } else {\\r\\n      IGensoERC1155(erc1155Address).mintItem(to_, nftItemId_, quantity_);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _transferElements(address from_, Item[] calldata elements_) private {\\r\\n    for (uint256 i = 0; i < elements_.length; i += 1) {\\r\\n      Item memory element = elements_[i];\\r\\n      if (element.ercType == ErcType.ERC721) {\\r\\n        erc721Contracts[element.contractType].safeTransferFrom(from_, _nftReceiver, element.tokenId);\\r\\n      } else {\\r\\n        require(element.contractType < erc1155Addresses.length, \\\"Invalid ERC1155 contract\\\");\\r\\n        require(element.quantity > 0, \\\"Quantity of ERC1155 item invalid\\\");\\r\\n        address erc1155Address = erc1155Addresses[element.contractType];\\r\\n        // Consumption\\r\\n        if (element.contractType == 0) {\\r\\n          IConsumptionItem(erc1155Address).safeTransferFrom(from_, _nftReceiver, element.tokenId, element.quantity, \\\"0x\\\");\\r\\n        } else {\\r\\n          IGensoERC1155(erc1155Address).safeTransferFrom(from_, _nftReceiver, element.tokenId, element.quantity, \\\"0x\\\");\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _transferResult(address to_, GenerateResult memory result_) private {\\r\\n    if (result_.ercType == ErcType.ERC721) {\\r\\n      erc721Contracts[result_.contractType].safeTransferFrom(address(this), to_, result_.tokenId);\\r\\n    } else {\\r\\n      address erc1155Address = erc1155Addresses[result_.contractType];\\r\\n      // Consumption\\r\\n      if (result_.contractType == 0) {\\r\\n        IConsumptionItem(erc1155Address).safeTransferFrom(address(this), to_, result_.tokenId, result_.quantity, \\\"0x\\\");\\r\\n      } else {\\r\\n        IGensoERC1155(erc1155Address).safeTransferFrom(address(this), to_, result_.tokenId, result_.quantity, \\\"0x\\\");\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _updateMarkedGenerateId(address userAddress_, uint256 nextGenerateId_, uint256 generateTime_) private {\\r\\n    for (uint256 i = nextGenerateId_; i <= generateTime_; i += 1) {\\r\\n      if (generateResultOfUsers[userAddress_][i].tokenId != 0) {\\r\\n        markedGenerateIdOfUsers[userAddress_] = i - 1;\\r\\n        break;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _getTotalPriceToGenerateNow(uint256 unlockedAt_, uint256 currentTime_, uint256 unitPrice) private pure returns (uint256) {\\r\\n    uint256 remainSeconds = unlockedAt_ - currentTime_;\\r\\n    uint256 remainMinutes = remainSeconds / 60 + 1;\\r\\n    if (remainSeconds % 60 == 0) {\\r\\n      remainMinutes = remainSeconds / 60;\\r\\n    }\\r\\n    uint256 totalPrice = remainMinutes * unitPrice;\\r\\n    return totalPrice;\\r\\n  }\\r\\n\\r\\n  function _getNewTokenIdOfErc721(uint256 nftItemId_, uint128 nextNumbering_) private pure returns (uint256) {\\r\\n    uint128 lengthOfNumber = _getLengthOfNumber(nextNumbering_);\\r\\n    uint256 newTokenId = nftItemId_ * (10 ** lengthOfNumber) + nextNumbering_;\\r\\n    return newTokenId;\\r\\n  }\\r\\n\\r\\n  function _getLengthOfNumber(uint128 number_) private pure returns (uint128) {\\r\\n    if (number_ == 0) {\\r\\n      return 1;\\r\\n    }\\r\\n    uint128 temp = number_;\\r\\n    uint128 length;\\r\\n    while (temp != 0) {\\r\\n      length += 1;\\r\\n      temp = temp / 10;\\r\\n    }\\r\\n    return length;\\r\\n  }\\r\\n\\r\\n  function _validateContractAddress(address contractAddress_) private view {\\r\\n    require(contractAddress_ != address(0), \\\"Address can not be zero address\\\");\\r\\n    require(contractAddress_.isContract(), \\\"Address must be a contract\\\");\\r\\n  }\\r\\n\\r\\n  function supportsInterface(bytes4 interfaceId) public view virtual override(AccessControl, ERC1155Receiver) returns (bool) {\\r\\n    return super.supportsInterface(interfaceId);\\r\\n  }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftInventory_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lineManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeReceiver_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftReceiver_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"verificator_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expireTime_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"generateIds\",\"type\":\"uint256[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"lineNumber\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"currencyType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LineAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"lineNumber\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"generateId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"currencyType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LineSpeeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"recipeId\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum GensoNftGenerator.ErcType\",\"name\":\"ercType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"quantity\",\"type\":\"uint128\"}],\"indexed\":false,\"internalType\":\"struct GensoNftGenerator.Item[]\",\"name\":\"elements\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"generateId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"lineNumber\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct GensoNftGenerator.GenerateLock\",\"name\":\"lock\",\"type\":\"tuple\"}],\"name\":\"NftGenerated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"addCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"addErc1155Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"addErc721Contract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"lineNumber_\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"currencyType\",\"type\":\"uint8\"}],\"internalType\":\"struct GensoNftGenerator.PriceInfo\",\"name\":\"priceInfo_\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct GensoNftGenerator.Signature\",\"name\":\"signature_\",\"type\":\"tuple\"}],\"name\":\"addLine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"generateIds\",\"type\":\"uint256[]\"}],\"name\":\"claimMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"lineNumber_\",\"type\":\"uint16\"}],\"name\":\"claimOne\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currencies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"generateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"recipeId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"enum GensoNftGenerator.ErcType\",\"name\":\"ercType\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"quantity\",\"type\":\"uint128\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum GensoNftGenerator.ErcType\",\"name\":\"ercType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"quantity\",\"type\":\"uint128\"}],\"internalType\":\"struct GensoNftGenerator.Item[]\",\"name\":\"elements\",\"type\":\"tuple[]\"}],\"internalType\":\"struct GensoNftGenerator.Recipe\",\"name\":\"recipe_\",\"type\":\"tuple\"}],\"name\":\"encodeRecipe\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"erc1155Addresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"erc721Contracts\",\"outputs\":[{\"internalType\":\"contract IGensoERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"lineNumber_\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"generateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"recipeId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"enum GensoNftGenerator.ErcType\",\"name\":\"ercType\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"quantity\",\"type\":\"uint128\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum GensoNftGenerator.ErcType\",\"name\":\"ercType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"quantity\",\"type\":\"uint128\"}],\"internalType\":\"struct GensoNftGenerator.Item[]\",\"name\":\"elements\",\"type\":\"tuple[]\"}],\"internalType\":\"struct GensoNftGenerator.Recipe\",\"name\":\"recipe_\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct GensoNftGenerator.Signature\",\"name\":\"signature_\",\"type\":\"tuple\"}],\"name\":\"generateErc1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"lineNumber_\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"generateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"recipeId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"enum GensoNftGenerator.ErcType\",\"name\":\"ercType\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"quantity\",\"type\":\"uint128\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum GensoNftGenerator.ErcType\",\"name\":\"ercType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"quantity\",\"type\":\"uint128\"}],\"internalType\":\"struct GensoNftGenerator.Item[]\",\"name\":\"elements\",\"type\":\"tuple[]\"}],\"internalType\":\"struct GensoNftGenerator.Recipe\",\"name\":\"recipe_\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct GensoNftGenerator.Signature\",\"name\":\"signature_\",\"type\":\"tuple\"}],\"name\":\"generateErc721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"lineNumber_\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"currencyType\",\"type\":\"uint8\"}],\"internalType\":\"struct GensoNftGenerator.PriceInfo\",\"name\":\"priceInfo_\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct GensoNftGenerator.Signature\",\"name\":\"signature_\",\"type\":\"tuple\"}],\"name\":\"generateNow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"generateResultOfUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"lineNumber\",\"type\":\"uint16\"},{\"internalType\":\"enum GensoNftGenerator.ErcType\",\"name\":\"ercType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"quantity\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"generateTimeOfUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress_\",\"type\":\"address\"}],\"name\":\"getAllItemsNotClaimedByUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"lineNumber\",\"type\":\"uint16\"},{\"internalType\":\"enum GensoNftGenerator.ErcType\",\"name\":\"ercType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"quantity\",\"type\":\"uint128\"}],\"internalType\":\"struct GensoNftGenerator.GenerateResult[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"generateIds_\",\"type\":\"uint256[]\"}],\"name\":\"getGenerateResultsOfUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"lineNumber\",\"type\":\"uint16\"},{\"internalType\":\"enum GensoNftGenerator.ErcType\",\"name\":\"ercType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"quantity\",\"type\":\"uint128\"}],\"internalType\":\"struct GensoNftGenerator.GenerateResult[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress_\",\"type\":\"address\"}],\"name\":\"getLatestResultOfLines\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"lineNumber\",\"type\":\"uint16\"},{\"internalType\":\"enum GensoNftGenerator.ErcType\",\"name\":\"ercType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"quantity\",\"type\":\"uint128\"}],\"internalType\":\"struct GensoNftGenerator.GenerateResult[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"latestGenerateIdOfLineByUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"markedGenerateIdOfUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetCurrencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetErc1155Addresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetErc721Contracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"setFeeReceiverAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"setLineManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"userAddresses_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"markedGenerateIds_\",\"type\":\"uint256[]\"}],\"name\":\"setMarkedGenerateIdOfUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"setNftInventory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"setNftReceiverAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time_\",\"type\":\"uint256\"}],\"name\":\"setSignatureExpireTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"setVerificatorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GensoNftGenerator", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000503de002f25a9f3cbc855c22202c4a1665e4244f000000000000000000000000d86021422484fb9ad2b660f959dddd64672c019f0000000000000000000000002744ae359c4ebac49b6696becefdb39f738aaa3e0000000000000000000000005b00f8c66a9128549771a03abcfe3fd124abffdc00000000000000000000000062d0e5e193854a4943dec1a48ffc3d6744ab5f54000000000000000000000000000000000000000000000000000000000000012c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}