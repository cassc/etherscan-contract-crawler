{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n\r\n\r\n\r\n/**\r\n \r\n \u0643\u064e\u0645\u064e\u062b\u064e\u0644\u0650 \u062d\u064e\u0628\u0651\u064e\u0629\u064d \u0623\u064e\u0646\u0628\u064e\u062a\u064e\u062a\u0652 \u0633\u064e\u0628\u0652\u0639\u064e \u0633\u064e\u0646\u064e\u0627\u0628\u0650\u0644\u064e \u0641\u0650\u064a \u0643\u064f\u0644\u0651\u0650 \u0633\u064f\u0646\u0628\u064f\u0644\u064e\u0629\u064d \u0645\u0651\u0650\u0627\u0626\u064e\u0629\u064f \u062d\u064e\u0628\u0651\u064e\u0629\u064d \u06d7 \u0648\u064e\u0627\u0644\u0644\u0651\u064e\u0647\u064f \u064a\u064f\u0636\u064e\u0627\u0639\u0650\u0641\u064f \u0644\u0650\u0645\u064e\u0646 \u064a\u064e\u0634\u064e\u0627\u0621\u064f (\u0633\u0648\u0631\u0629 \u0627\u0644\u0628\u0642\u0631\u0629 \u0627\u0644\u0623\u064a\u0629 261)\r\n\r\n\r\n/**\r\n * ISLAMICOIN Official smart contract / Date: 5th of September 2021\r\n * \r\n * Website: https://islamicoin.finance\r\n * \r\n * Official Social Accounts for ISLAMICOIN\r\n * \r\n * \r\n * Email: info@islamicoin.finance\r\n * Facebook: https://facebook.com/islamicoin\r\n * Twitter: https://twiter.com/islamicoin\r\n * Reddit: https://www.reddit.com/r/islamicoin\r\n * Youtube: https://www.youtube.com/channel/UCPdg9Cx2g9DyTR_xD5S_lXA\r\n * Discord: https://discord.gg/5Ya8gDwaUr\r\n * Telegram: https://t.me/islamicoin1\r\n * Instagram: https://www.instagram.com/islamicoin\r\n * LinkedIn: https://www.linkedin.com/company/islamicoin\r\n */\r\npragma solidity ^0.8.4;\r\n\r\n// Start Of Interface\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IMatic {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IMaticMetadata is IMatic {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// Start of contracts\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    \r\n    \r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nabstract contract IslamiMatic is Ownable, IMatic, IMaticMetadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    \r\n    mapping(address => bool) AirDropBlacklist;\r\n        event Blacklist(address indexed blackListed, bool value);\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 private _finaltotalsupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    \r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_, uint256 totalsupply_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _totalSupply = totalsupply_;\r\n        _finaltotalsupply = 300000000000000000;   // 30 Billion ISLAMI\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ECR20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 7;\r\n    }\r\n    \r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function maxSupply() public view returns (uint256){\r\n        return _finaltotalsupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * \r\n     * \r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"Cannot transfer ISLAMI from zero address\");\r\n        require(recipient != address(0), \"Cannot transfer ISLAMI to zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ISLAMI: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(_totalSupply < _finaltotalsupply, \"ISLAMICOIN Total Supply is 30 Billions Only\");\r\n        require(account != address(0), \"ISLAMI: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ISLAMI: approve from the zero address\");\r\n        require(spender != address(0), \"ISLAMI: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer( address from, address to, uint256 amount) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n   \r\n   \r\n    \r\n  // Blacklist AirDrop address after one transaction, no more airddrop can be called\r\n  \r\n  function _blackListAirdrop(address _address, bool _isBlackListed) internal returns (bool) {\r\n    require(AirDropBlacklist[_address] != _isBlackListed);\r\n    AirDropBlacklist[_address] = _isBlackListed;\r\n    emit Blacklist(_address, _isBlackListed);\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * Token constructor, AirDrop & crowdsale\r\n */\r\ncontract ISLAMICOIN is IslamiMatic {\r\n    \r\n    uint256 internal aSBlock;uint256 internal aEBlock;uint256 internal aTot;uint256 internal aAmt; \r\n    uint256 internal sSBlock;uint256 internal sEBlock;uint256 internal sTot;\r\n    uint256 internal sPrice; uint256 internal Charity;uint256 internal FinalAmount;\r\n    \r\n  \r\n    uint256 internal sonbola = 10** decimals();\r\n    uint256 internal qMint = 7776000;   // 90 Days\r\n    uint256 internal tMint = 1725580799; // After 3 Years / Tuesday, September 5, 2024 11:59:59 PM \"Team Mint\"\r\n    uint256 internal mintTime = block.timestamp + qMint;\r\n    uint256 internal isMinted = 0;\r\n    \r\n    \r\n    \r\n\r\n    address AirDropAD = address(0xfdfF9779b1E996d0c98dFED7b7f21438624e0EA8);   // AirDrop contract    \r\n    address CharityAD = address(0xC315A5Ce1e6330db2836BD3Ed1Fa7228C068cE20); // \"Bayt Al-Mal / \u0628\u064a\u062a \u0627\u0644\u0645\u0627\u0644\" contract for charity\r\n    \r\n    \r\n    constructor() IslamiMatic(\"ISLAMICOIN\", \"ISLAMI\", 0) payable {\r\n        \r\n        _mint(msg.sender,     7999999990  * sonbola);    // ISLAMICOIN contract creator \r\n        _mint(address(this),  11800000000 * sonbola);    // Contract Address for crowdsale feature\r\n        _mint(AirDropAD,      200000000   * sonbola);    // AirDrop \r\n        _mint(CharityAD,      10          * sonbola);    // Charity Address 2.5% add at each transfer from contract\r\n        \r\n     // No access control mechanism (for minting/pausing) and hence no governance\r\n        \r\n        Charity = 5; // Devided by 2 in Transfer function to represent Zakkat persentage 2.5%\r\n    }\r\n \r\n    function quarterMint()  public onlyOwner returns (bool success){\r\n        require (block.timestamp >= mintTime, \"Minting is not yet\");\r\n        _mint (address(this), 100000000 * sonbola);\r\n        mintTime  = block.timestamp + qMint;\r\n       return true;\r\n    }\r\n    function teamMint()  public onlyOwner returns (bool success){\r\n        require (isMinted == 0,\"Team minting is one time only\");\r\n        require (block.timestamp >= tMint, \"Team Minting is not yet\");\r\n        _mint (msg.sender, 600000000 * sonbola);\r\n        isMinted = 1;\r\n       return true;\r\n    }\r\n    function getAirdrop(address Brother) public returns (bool success){\r\n        require(block.number <= aEBlock, \"Air Drop not started or ended\");\r\n        require(AirDropBlacklist[msg.sender] == false, \"AirDrop can be claimed only once\");\r\n        aTot ++;\r\n         if(msg.sender != Brother && balanceOf(Brother) != 0 && Brother != 0x0000000000000000000000000000000000000000){\r\n          _transfer(AirDropAD, Brother, aAmt/2);\r\n        }\r\n        _transfer(AirDropAD, msg.sender, aAmt);\r\n        super._blackListAirdrop(msg.sender, true);\r\n        return true;\r\n    \r\n      }\r\n      \r\n    receive() external payable {\r\n       require( msg.value > 0 );\r\n   }\r\n  function tokenSale(address) public payable returns (bool success){\r\n    require(balanceOf(address(msg.sender)) <= 30000000 * sonbola , \"You reached your public sale limit\");  \r\n    require(sSBlock <= block.number && block.number <= sEBlock, \"Public Sale has ended or did not start yet\");\r\n\r\n    uint256 _eth = msg.value;\r\n    uint256 _tkns;\r\n   \r\n    require (_eth >= 1 ether && _eth <= 1000 ether, \"Minimum 1 MATIC / Maximum 1000 MATIC\");\r\n    _tkns = (sPrice*_eth) / 1 ether;\r\n    sTot ++;\r\n    \r\n    _transfer(address(this), msg.sender, _tkns); \r\n    \r\n    return true;\r\n  }\r\n  \r\n \r\n\r\n  function viewAirdrop() public view returns(uint256 StartBlock, uint256 EndBlock, uint256 DropCount, uint256 DropAmount){\r\n    return(aSBlock, aEBlock, aTot, aAmt);\r\n  }\r\n  function viewSale() public view returns(uint256 StartBlock, uint256 EndBlock, uint256 SaleCount, uint256 SalePrice){\r\n    return(sSBlock, sEBlock, sTot,  sPrice);\r\n  }\r\n  \r\n  function startAirdrop( uint _aEBlock, uint256 _aAmt) public onlyOwner {\r\n    aEBlock = _aEBlock;aAmt = _aAmt * sonbola;\r\n  }\r\n  function startSale(uint256 _sEBlock, uint256 _sPrice) public onlyOwner{\r\n   sEBlock = _sEBlock; sPrice =_sPrice * sonbola;\r\n  }\r\n  function end_Air_Drop () public onlyOwner{\r\n          aEBlock = block.number;\r\n  }\r\n  function end_Sale () public onlyOwner{\r\n          sEBlock = block.number;\r\n  }\r\n  function _transfer(address sender, address recipient, uint256 amount) internal virtual override {\r\n        uint givecharity = (amount*Charity/2)/100;\r\n        uint transferAmount = amount ;\r\n        \r\n         if(sender == CharityAD || recipient == CharityAD) {        // When donations sent to Bayt Al-Mal                                \r\n            super._transfer(sender,recipient, transferAmount);\r\n        }\r\n        else if(balanceOf(address(this)) > givecharity) {        // if ISLAMICOIN contract is not empty (ISLAMI Tokens)                                 \r\n            super._transfer(sender,recipient, transferAmount);\r\n            super._transfer(address(this),CharityAD,givecharity);\r\n        }\r\n        else {                                                                   \r\n            super._transfer(sender,recipient,transferAmount);\r\n        }\r\n    }\r\n    function claimTokens(uint256 amt) public onlyOwner {\r\n           require (amt > 0);\r\n           address payable _owner = payable(msg.sender);\r\n           _owner.transfer(amt *10** 18);\r\n    }\r\n    function Claim_ERC20(address tokenAddress, uint256 tokenAmount) public onlyOwner {\r\n        IslamiMatic(tokenAddress).transfer(owner(), tokenAmount);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n *  NO ONE WILL REAP EXCEPT WHAT THEY SOW\" (AL-QURAN, 6:164)\r\n * \r\n * \r\n * Edited by: ISLAMICOIN Developers\r\n */", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"blackListed\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"Blacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Claim_ERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"end_Air_Drop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"end_Sale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Brother\",\"type\":\"address\"}],\"name\":\"getAirdrop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quarterMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_aEBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_aAmt\",\"type\":\"uint256\"}],\"name\":\"startAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sEBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sPrice\",\"type\":\"uint256\"}],\"name\":\"startSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewAirdrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"StartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"EndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DropCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DropAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"StartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"EndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"SaleCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"SalePrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ISLAMICOIN", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7840363b2f18c570a1d8b364ddae7155e8a7cc58a2311ad3029bff287011f146"}