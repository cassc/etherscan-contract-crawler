{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Deb0x.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/metatx/ERC2771Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./Deb0xERC20.sol\\\";\\n\\n/**\\n * Main deb0x protocol contract used to send messages,\\n * store public keys, allocate token rewards,\\n * distribute native token fees, stake and unstake.\\n */\\ncontract Deb0x is ERC2771Context, ReentrancyGuard {\\n\\n    /**\\n     * Deb0x Reward Token contract.\\n     * Initialized in constructor.\\n     */\\n    Deb0xERC20 public dbx;\\n\\n    /**\\n     * Basis points (bps) representation of the protocol fee (i.e. 10 percent).\\n     * Calls to send function charge 1000 bps of transaction cost.\\n     */\\n    uint16 public constant PROTOCOL_FEE = 1000;\\n\\n    /**\\n     * Basis points representation of 100 percent.\\n     */\\n    uint16 public constant MAX_BPS = 10000;\\n\\n    /**\\n     * Used to minimise division remainder when earned fees are calculated.\\n     */\\n    uint256 public constant SCALING_FACTOR = 1e40;\\n\\n    /**\\n     * Contract creation timestamp.\\n     * Initialized in constructor.\\n     */\\n    uint256 public immutable i_initialTimestamp;\\n\\n    /**\\n     * Length of a reward distribution cycle. \\n     * Initialized in contstructor to 1 day.\\n     */\\n    uint256 public immutable i_periodDuration;\\n\\n    /**\\n     * Reward token amount allocated for the current cycle.\\n     */\\n    uint256 public currentCycleReward;\\n\\n    /**\\n     * Reward token amount allocated for the previous cycle.\\n     */\\n    uint256 public lastCycleReward;\\n\\n    /**\\n     * Helper variable to store pending stake amount.   \\n     */\\n    uint256 public pendingStake;\\n\\n    /**\\n     * Index (0-based) of the current cycle.\\n     * \\n     * Updated upon cycle setup that is triggered by contract interraction \\n     * (account sends message, claims fees, claims rewards, stakes or unstakes).\\n     */\\n    uint256 public currentCycle;\\n\\n    /**\\n     * Helper variable to store the index of the last active cycle.\\n     */\\n    uint256 public lastStartedCycle;\\n\\n    /**\\n     * Stores the index of the penultimate active cycle plus one.\\n     */\\n    uint256 public previousStartedCycle;\\n\\n    /**\\n     * Helper variable to store the index of the last active cycle.\\n     */\\n    uint256 public currentStartedCycle;\\n\\n    /**\\n     * Stores the amount of stake that will be subracted from the total\\n     * stake once a new cycle starts.\\n     */\\n    uint256 public pendingStakeWithdrawal;\\n\\n    /**\\n     * Accumulates fees while there are no tokens staked after the\\n     * entire token supply has been distributed. Once tokens are\\n     * staked again, these fees will be distributed in the next\\n     * active cycle.\\n     */\\n    uint256 public pendingFees;\\n\\n    /**\\n     * Message ID that is incremented every time a message is sent.\\n     */\\n    uint256 public sentId = 1;\\n\\n    /**\\n     * Stores the public keys of accounts.\\n     */\\n    mapping(address => bytes32) public publicKeys;\\n\\n    /**\\n     * The amount of gas an account owes towards clients.\\n     */\\n    mapping(address => uint256) public accCycleGasOwed;\\n\\n    /**\\n     * The amount of gas a client has received from owed\\n     * account gas.\\n     */\\n    mapping(address => uint256) public clientCycleGasEarned;\\n\\n    /**\\n     * The amount of gas an account has spent sending messages.\\n     * Resets during a new cycle when an account performs an action\\n     * that updates its stats.\\n     */\\n    mapping(address => uint256) public accCycleGasUsed;\\n\\n    /**\\n     * The total amount of gas all accounts have spent sending\\n     * messages per cycle.\\n     */\\n    mapping(uint256 => uint256) public cycleTotalGasUsed;\\n\\n    /**\\n     * The last cycle in which an account has sent messages.\\n     */\\n    mapping(address => uint256) public lastActiveCycle;\\n\\n    /**\\n     * The last cycle in which the client had its reward updated.\\n     */\\n    mapping(address => uint256) public clientLastRewardUpdate;\\n\\n    /**\\n     * The last cycle in which the client had its earned fees updated.\\n     */\\n    mapping(address => uint256) public clientLastFeeUpdate;\\n\\n    /**\\n     * The fee amount the client can withdraw.\\n     */\\n    mapping(address => uint256) public clientAccruedFees;\\n\\n    /**\\n     * Current unclaimed rewards and staked amounts per account.\\n     */\\n    mapping(address => uint256) public accRewards;\\n\\n    /**\\n     * The fee amount the account can withdraw.\\n     */\\n    mapping(address => uint256) public accAccruedFees;\\n\\n    /**\\n     * Current unclaimed rewards per client.\\n     */\\n    mapping(address => uint256) public clientRewards;\\n\\n    /**\\n     * Total token rewards allocated per cycle.\\n     */\\n    mapping(uint256 => uint256) public rewardPerCycle;\\n\\n    /**\\n     * Total unclaimed token reward and stake. \\n     * \\n     * Updated when a new cycle starts and when an account claims rewards, stakes or unstakes externally owned tokens.\\n     */\\n    mapping(uint256 => uint256) public summedCycleStakes;\\n\\n    /**\\n     * The last cycle in which the account had its fees updated.\\n     */ \\n    mapping(address => uint256) public lastFeeUpdateCycle;\\n\\n    /**\\n     * The total amount of accrued fees per cycle.\\n     */\\n    mapping(uint256 => uint256) public cycleAccruedFees;\\n\\n    /**\\n     * Sum of previous total cycle accrued fees divided by cycle stake.\\n     */\\n    mapping(uint256 => uint256) public cycleFeesPerStakeSummed;\\n\\n    /**\\n     * Amount an account has staked and is locked during given cycle.\\n     */\\n    mapping(address => mapping(uint256 => uint256)) public accStakeCycle;\\n\\n    /**\\n     * Stake amount an account can currently withdraw.\\n     */\\n    mapping(address => uint256) public accWithdrawableStake;\\n\\n    /**\\n     * Cycle in which an account's stake is locked and begins generating fees.\\n     */\\n    mapping(address => uint256) public accFirstStake;\\n\\n    /**\\n     * Same as accFirstStake, but stores the second stake seperately \\n     * in case the account stakes in two consecutive active cycles.\\n     */\\n    mapping(address => uint256) public accSecondStake;\\n\\n    /**\\n     * @dev Emitted when the client operating `account` claims an amount of `fees` \\n     * in native token through {claimClientFees} in `cycle`.\\n     */\\n    event ClientFeesClaimed(\\n        uint256 indexed cycle,\\n        address indexed account,\\n        uint256 fees\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` claims an amount of `fees` in native token\\n     * through {claimFees} in `cycle`.\\n     */\\n    event FeesClaimed(\\n        uint256 indexed cycle,\\n        address indexed account,\\n        uint256 fees\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` stakes `amount` DBX tokens through\\n     * {stake} in `cycle`.\\n     */\\n    event Staked(\\n        uint256 indexed cycle,\\n        address indexed account,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` unstakes `amount` DBX tokens through\\n     * {unstake} in `cycle`.\\n     */\\n    event Unstaked(\\n        uint256 indexed cycle,\\n        address indexed account,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted when client operating `account` claims `amount` DBX \\n     * token rewards through {claimRewards} in `cycle`.\\n     */\\n    event ClientRewardsClaimed(\\n        uint256 indexed cycle,\\n        address indexed account,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` claims `amount` DBX \\n     * token rewards through {claimRewards} in `cycle`.\\n     */\\n    event RewardsClaimed(\\n        uint256 indexed cycle,\\n        address indexed account,\\n        uint256 reward\\n    );\\n\\n    /**\\n     * @dev Emitted when calling {send} marking the new current `cycle`,\\n     * `calculatedCycleReward` and `summedCycleStakes`.\\n     */\\n    event NewCycleStarted(\\n        uint256 indexed cycle,\\n        uint256 calculatedCycleReward,\\n        uint256 summedCycleStakes\\n    );\\n\\n    /**\\n     * @dev Emitted when calling {send} in the current `cycle`,\\n     * containing the message details such as which `sentId` it has,\\n     * who the `feeReceiver` is and what `msgFee` it set, respectively\\n     * any additional `nativeTokenFee` that was paid.\\n     */\\n    event SendEntryCreated(\\n        uint256 indexed cycle,\\n        uint256 indexed sentId,\\n        address indexed feeReceiver,\\n        uint256 msgFee,\\n        uint256 nativeTokenFee\\n    );\\n\\n    /**\\n     * @dev Emitted when calling {send} containing the message \\n     * details such as `to` destination address, `from` sender\\n     * address, `hash` of the content reference, `sentId`,\\n     * `timestamp` and `content`.\\n     */\\n    event Sent(\\n        address indexed to,\\n        address indexed from,\\n        bytes32 indexed hash,\\n        uint256 sentId,\\n        uint256 timestamp,\\n        bytes32[] content\\n    );\\n    \\n    /**\\n     * @dev Emitted when calling {setKey}, `to` being assigned this key `value`.\\n     */\\n    event KeySet(\\n        address indexed to, \\n        bytes32 indexed value\\n    );\\n\\n    /**\\n     * @dev Measures the amount of consummed gas.\\n     * In case a fee is applied, the corresponding percentage will be recorded \\n     * as consumed by the feeReceiver instead of the caller.\\n     * \\n     * @param feeReceiver the address of the fee receiver (client).\\n     * @param msgFee fee percentage expressed in basis points.\\n     */\\n    modifier gasUsed(address feeReceiver, uint256 msgFee) {\\n        uint256 startGas = gasleft();\\n\\n        _;\\n\\n        uint256 gasConsumed = startGas - gasleft();\\n\\n        cycleTotalGasUsed[currentCycle] += gasConsumed;\\n\\n        if (feeReceiver != address(0) && msgFee != 0) {\\n            uint256 gasOwed = (gasConsumed * msgFee) / MAX_BPS;\\n            gasConsumed -= gasOwed;\\n            clientCycleGasEarned[feeReceiver] += gasOwed;\\n        }\\n\\n        accCycleGasUsed[_msgSender()] += gasConsumed;\\n    }\\n\\n    /**\\n     * @dev Checks that the caller has sent an amount that is equal or greater \\n     * than the sum of the protocol fee and the client's native token fee. \\n     * The change is sent back to the caller.\\n     * \\n     * @param nativeTokenFee the amount charged by the client.\\n     */\\n    modifier gasWrapper(uint256 nativeTokenFee) {\\n        uint256 startGas = gasleft();\\n\\n        _;\\n\\n        uint256 fee = ((startGas - gasleft() + 39700) * tx.gasprice * PROTOCOL_FEE) / MAX_BPS;\\n        require(\\n            msg.value - nativeTokenFee >= fee,\\n            \\\"Deb0x: value less than required protocol fee\\\"\\n        );\\n        \\n        cycleAccruedFees[currentCycle] += fee;\\n        sendViaCall(payable(msg.sender), msg.value - fee - nativeTokenFee);\\n    }\\n\\n    /**\\n     * @param forwarder forwarder contract address.\\n     */\\n    constructor(address forwarder) ERC2771Context(forwarder) {\\n        dbx = new Deb0xERC20();\\n        i_initialTimestamp = block.timestamp;\\n        i_periodDuration = 1 days;\\n        currentCycleReward = 10000 * 1e18;\\n        summedCycleStakes[0] = 10000 * 1e18;\\n        rewardPerCycle[0] = 10000 * 1e18;\\n    }\\n\\n    /**\\n     * @dev Stores the public key of the sender account.\\n     * \\n     * @param publicKey as encoded by the client.\\n     */\\n    function setKey(bytes32 publicKey) external {\\n        publicKeys[_msgSender()] = publicKey;\\n        emit KeySet(_msgSender(), publicKey);\\n    }\\n\\n    /**\\n     * @dev Sends messages to multiple accounts. Triggers helper functions \\n     * used to update cycle, rewards and fees related state.\\n     * Optionally may include extra reward token fee and native coin fees on-top of the default protocol fee. \\n     * These fees are set in the client user intarface the transaction sender interacts with.\\n     * \\n     * @param to account addresses to send messages to.\\n     * @param crefs content references to the messages.\\n     * @param feeReceiver client address.\\n     * @param msgFee on-top reward token fee charged by the client (in basis points). If 0, no reward token fee applies.\\n     * @param nativeTokenFee on-top native coin fee charged by the client. If 0, no native token fee applies.\\n     */\\n    function send(\\n        address[] memory to,\\n        bytes32[][] memory crefs,\\n        address feeReceiver,\\n        uint256 msgFee,\\n        uint256 nativeTokenFee\\n    )\\n        external\\n        payable\\n        nonReentrant()\\n        gasWrapper(nativeTokenFee)\\n        gasUsed(feeReceiver, msgFee)\\n\\n    {\\n        require(msgFee <= MAX_BPS, \\\"Deb0x: reward fees exceed 10000 bps\\\");\\n\\n        uint256 _sentId = _send(to, crefs);\\n        calculateCycle();\\n        updateCycleFeesPerStakeSummed();\\n        setUpNewCycle();\\n        updateStats(_msgSender());\\n        updateClientStats(feeReceiver);\\n\\n        lastActiveCycle[_msgSender()] = currentCycle;\\n        emit SendEntryCreated(\\n            currentCycle,\\n            _sentId,\\n            feeReceiver,\\n            msgFee,\\n            nativeTokenFee\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints newly accrued account rewards and transfers the entire \\n     * allocated amount to the transaction sender address.\\n     */\\n    function claimRewards()\\n        external\\n        nonReentrant()\\n    {\\n        calculateCycle();\\n        updateCycleFeesPerStakeSummed();\\n        updateStats(_msgSender());\\n        uint256 reward = accRewards[_msgSender()] - accWithdrawableStake[_msgSender()];\\n\\n        require(reward > 0, \\\"Deb0x: account has no rewards\\\");\\n\\n        accRewards[_msgSender()] -= reward;\\n        if (lastStartedCycle == currentStartedCycle) {\\n            pendingStakeWithdrawal += reward;\\n        } else {\\n            summedCycleStakes[currentCycle] = summedCycleStakes[currentCycle] - reward;\\n        }\\n\\n        dbx.mintReward(_msgSender(), reward);\\n        emit RewardsClaimed(currentCycle, _msgSender(), reward);\\n    }\\n\\n    /**\\n     * @dev Mints newly accrued client rewards share and transfers the entire \\n     * allocated amount to the transaction sender address.\\n     */\\n    function claimClientRewards()\\n        external\\n        nonReentrant()\\n    {\\n        calculateCycle();\\n        updateCycleFeesPerStakeSummed();\\n\\n        updateClientStats(_msgSender());\\n\\n        uint256 reward = clientRewards[_msgSender()];\\n        require(reward > 0, \\\"Deb0x: client has no rewards\\\");\\n        clientRewards[_msgSender()] = 0;\\n\\n        if (lastStartedCycle == currentStartedCycle) {\\n            pendingStakeWithdrawal += reward;\\n        } else {\\n            summedCycleStakes[currentCycle] = summedCycleStakes[currentCycle] - reward;\\n        }\\n\\n        dbx.mintReward(_msgSender(), reward);\\n        emit ClientRewardsClaimed(currentCycle, _msgSender(), reward);\\n    }\\n\\n    /**\\n     * @dev Transfers newly accrued fees to sender's address.\\n     */\\n    function claimFees()\\n        external\\n        nonReentrant()\\n    {\\n        calculateCycle();\\n        updateCycleFeesPerStakeSummed();\\n        updateStats(_msgSender());\\n\\n        uint256 fees = accAccruedFees[_msgSender()];\\n        require(fees > 0, \\\"Deb0x: amount is zero\\\");\\n\\n        accAccruedFees[_msgSender()] = 0;\\n        sendViaCall(payable(_msgSender()), fees);\\n        emit FeesClaimed(getCurrentCycle(), _msgSender(), fees);\\n    }\\n\\n    /**\\n     * @dev Transfers newly accrued client fee share and transfers \\n     * the entire amount to caller address.\\n     */\\n    function claimClientFees()\\n        external\\n        nonReentrant()\\n    {\\n        calculateCycle();\\n        updateCycleFeesPerStakeSummed();\\n\\n        updateClientStats(_msgSender());\\n        uint256 fees = clientAccruedFees[_msgSender()];\\n        require(fees > 0, \\\"Deb0x: client has no accrued fees\\\");\\n\\n        clientAccruedFees[_msgSender()] = 0;\\n        sendViaCall(payable(_msgSender()), fees);\\n        emit ClientFeesClaimed(getCurrentCycle(), _msgSender(), fees);\\n    }\\n\\n    /**\\n     * @dev Stakes the given amount and increases the share of the daily allocated fees.\\n     * The tokens are transfered from sender account to this contract.\\n     * To receive the tokens back, the unstake function must be called by the same account address.\\n     * \\n     * @param amount token amount to be staked (in wei).\\n     */\\n    function stake(uint256 amount)\\n        external\\n        nonReentrant()\\n    {\\n        calculateCycle();\\n        updateCycleFeesPerStakeSummed();\\n        updateStats(_msgSender());\\n        require(amount > 0, \\\"Deb0x: amount is zero\\\");\\n        pendingStake += amount;\\n        uint256 cycleToSet = currentCycle + 1;\\n\\n        if (lastStartedCycle == currentStartedCycle) {\\n            cycleToSet = currentCycle;\\n        }\\n\\n        if (\\n            (cycleToSet != accFirstStake[_msgSender()] &&\\n                cycleToSet != accSecondStake[_msgSender()])\\n        ) {\\n            if (accFirstStake[_msgSender()] == 0) {\\n                accFirstStake[_msgSender()] = cycleToSet;\\n            } else if (accSecondStake[_msgSender()] == 0) {\\n                accSecondStake[_msgSender()] = cycleToSet;\\n            }\\n        }\\n\\n        accStakeCycle[_msgSender()][cycleToSet] += amount;\\n\\n        dbx.transferFrom(_msgSender(), address(this), amount);\\n        emit Staked(cycleToSet, _msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Unstakes the given amount and decreases the share of the daily allocated fees.\\n     * If the balance is availabe, the tokens are transfered from this contract to the sender account.\\n     * \\n     * @param amount token amount to be unstaked (in wei).\\n     */\\n    function unstake(uint256 amount)\\n        external\\n        nonReentrant()\\n    {\\n        calculateCycle();\\n        updateCycleFeesPerStakeSummed();\\n        updateStats(_msgSender());\\n        require(amount > 0, \\\"Deb0x: amount is zero\\\");\\n\\n        require(\\n            amount <= accWithdrawableStake[_msgSender()],\\n            \\\"Deb0x: amount greater than withdrawable stake\\\"\\n        );\\n\\n        if (lastStartedCycle == currentStartedCycle) {\\n            pendingStakeWithdrawal += amount;\\n        } else {\\n            summedCycleStakes[currentCycle] -= amount;\\n        }\\n\\n        accWithdrawableStake[_msgSender()] -= amount;\\n        accRewards[_msgSender()] -= amount;\\n\\n        dbx.transfer(_msgSender(), amount);\\n        emit Unstaked(currentCycle, _msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Returns the index of the cycle at the current block time.\\n     */\\n    function getCurrentCycle() public view returns (uint256) {\\n        return (block.timestamp - i_initialTimestamp) / i_periodDuration;\\n    }\\n\\n    /**\\n     * @dev Updates various helper state variables used to compute token rewards \\n     * and fees distribution for a given client.\\n     * \\n     * @param client the address of the client to make the updates for.\\n     */\\n    function updateClientStats(address client) internal {\\n        if (currentCycle > clientLastRewardUpdate[client]) {\\n            uint256 lastUpdatedCycle = clientLastRewardUpdate[client];\\n\\n            if (\\n                clientCycleGasEarned[client] != 0 &&\\n                cycleTotalGasUsed[lastUpdatedCycle] != 0\\n            ) {\\n                uint256 clientRewardsEarned = (clientCycleGasEarned[client] * rewardPerCycle[lastUpdatedCycle]) / \\n                    cycleTotalGasUsed[lastUpdatedCycle];\\n                clientRewards[client] += clientRewardsEarned;\\n                clientCycleGasEarned[client] = 0;\\n            }\\n\\n            clientLastRewardUpdate[client] = currentCycle;\\n        }\\n\\n        if (\\n            currentCycle > lastStartedCycle &&\\n            clientLastFeeUpdate[client] != lastStartedCycle + 1\\n        ) {\\n            clientAccruedFees[client] += (\\n                clientRewards[client] * \\n                    (cycleFeesPerStakeSummed[lastStartedCycle + 1] - \\n                        cycleFeesPerStakeSummed[clientLastFeeUpdate[client]]\\n                    )\\n            ) /\\n            SCALING_FACTOR;\\n\\n            clientLastFeeUpdate[client] = lastStartedCycle + 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates the index of the cycle.\\n     */\\n    function calculateCycle() internal {\\n        uint256 calculatedCycle = getCurrentCycle();\\n        \\n        if (calculatedCycle > currentCycle) {\\n            currentCycle = calculatedCycle;\\n        }\\n        \\n    }\\n\\n    /**\\n     * @dev Updates the global helper variables related to fee distribution.\\n     */\\n    function updateCycleFeesPerStakeSummed() internal {\\n        if (currentCycle != currentStartedCycle) {\\n            previousStartedCycle = lastStartedCycle + 1;\\n            lastStartedCycle = currentStartedCycle;\\n        }\\n       \\n        if (\\n            currentCycle > lastStartedCycle &&\\n            cycleFeesPerStakeSummed[lastStartedCycle + 1] == 0\\n        ) {\\n            uint256 feePerStake;\\n            if(summedCycleStakes[lastStartedCycle] != 0) {\\n                feePerStake = ((cycleAccruedFees[lastStartedCycle] + pendingFees) * SCALING_FACTOR) / \\n            summedCycleStakes[lastStartedCycle];\\n                pendingFees = 0;\\n            } else {\\n                pendingFees += cycleAccruedFees[lastStartedCycle];\\n                feePerStake = 0;\\n            }\\n            \\n            cycleFeesPerStakeSummed[lastStartedCycle + 1] = cycleFeesPerStakeSummed[previousStartedCycle] + feePerStake;\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates the global state related to starting a new cycle along \\n     * with helper state variables used in computation of staking rewards.\\n     */\\n    function setUpNewCycle() internal {\\n        if (rewardPerCycle[currentCycle] == 0) {\\n            lastCycleReward = currentCycleReward;\\n            uint256 calculatedCycleReward = (lastCycleReward * 10000) / 10020;\\n            currentCycleReward = calculatedCycleReward;\\n            rewardPerCycle[currentCycle] = calculatedCycleReward;\\n\\n            currentStartedCycle = currentCycle;\\n            \\n            summedCycleStakes[currentStartedCycle] += summedCycleStakes[lastStartedCycle] + currentCycleReward;\\n            \\n            if (pendingStake != 0) {\\n                summedCycleStakes[currentStartedCycle] += pendingStake;\\n                pendingStake = 0;\\n            }\\n            \\n            if (pendingStakeWithdrawal != 0) {\\n                summedCycleStakes[currentStartedCycle] -= pendingStakeWithdrawal;\\n                pendingStakeWithdrawal = 0;\\n            }\\n            \\n            emit NewCycleStarted(\\n                currentCycle,\\n                calculatedCycleReward,\\n                summedCycleStakes[currentStartedCycle]\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates various helper state variables used to compute token rewards \\n     * and fees distribution for a given account.\\n     * \\n     * @param account the address of the account to make the updates for.\\n     */\\n    function updateStats(address account) internal {\\n         if (\\t\\n            currentCycle > lastActiveCycle[account] &&\\t\\n            accCycleGasUsed[account] != 0\\t\\n        ) {\\t\\n            uint256 lastCycleAccReward = (accCycleGasUsed[account] * rewardPerCycle[lastActiveCycle[account]]) / \\t\\n                cycleTotalGasUsed[lastActiveCycle[account]];\\t\\n            accRewards[account] += lastCycleAccReward;\\t\\n         \\n            accCycleGasUsed[account] = 0;\\n        }\\n\\n        if (\\n            currentCycle > lastStartedCycle &&\\n            lastFeeUpdateCycle[account] != lastStartedCycle + 1\\n        ) {\\n            accAccruedFees[account] =\\n                accAccruedFees[account] +\\n                (\\n                    (accRewards[account] * \\n                        (cycleFeesPerStakeSummed[lastStartedCycle + 1] - \\n                            cycleFeesPerStakeSummed[lastFeeUpdateCycle[account]]\\n                        )\\n                    )\\n                ) /\\n                SCALING_FACTOR;\\n            lastFeeUpdateCycle[account] = lastStartedCycle + 1;\\n        }\\n\\n        if (\\n            accFirstStake[account] != 0 &&\\n            currentCycle > accFirstStake[account]\\n        ) {\\n            uint256 unlockedFirstStake = accStakeCycle[account][accFirstStake[account]];\\n\\n            accRewards[account] += unlockedFirstStake;\\n            accWithdrawableStake[account] += unlockedFirstStake;\\n            if (lastStartedCycle + 1 > accFirstStake[account]) {\\n                accAccruedFees[account] = accAccruedFees[account] + \\n                (\\n                    (accStakeCycle[account][accFirstStake[account]] * \\n                        (cycleFeesPerStakeSummed[lastStartedCycle + 1] - \\n                            cycleFeesPerStakeSummed[accFirstStake[account]]\\n                        )\\n                    )\\n                ) / \\n                SCALING_FACTOR;\\n            }\\n\\n            accStakeCycle[account][accFirstStake[account]] = 0;\\n            accFirstStake[account] = 0;\\n\\n            if (accSecondStake[account] != 0) {\\n                if (currentCycle > accSecondStake[account]) {\\n                    uint256 unlockedSecondStake = accStakeCycle[account][accSecondStake[account]];\\n\\n                    accRewards[account] += unlockedSecondStake;\\n                    accWithdrawableStake[account] += unlockedSecondStake;\\n                    \\n                    if (lastStartedCycle + 1 > accSecondStake[account]) {\\n                        accAccruedFees[account] = accAccruedFees[account] + \\n                        (\\n                            (accStakeCycle[account][accSecondStake[account]] * \\n                                (cycleFeesPerStakeSummed[lastStartedCycle + 1] - \\n                                    cycleFeesPerStakeSummed[accSecondStake[account]]\\n                                )\\n                            )\\n                        ) / \\n                        SCALING_FACTOR;\\n                    }\\n\\n                    accStakeCycle[account][accSecondStake[account]] = 0;\\n                    accSecondStake[account] = 0;\\n                } else {\\n                    accFirstStake[account] = accSecondStake[account];\\n                    accSecondStake[account] = 0;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev For each recipient emits events with correspondig cref.\\n     * Lengths of recipients and crefs arrays must match.\\n     * All crefs (content references) must be less than 8 bytes32 long and \\n     * are purposed to store pointers (e.g. HTTP urls, IPFS CIDs) to messages content.\\n     * \\n     * @param recipients recipient addresses that messages are stored for.\\n     * @param crefs content references to the messages.\\n     */\\n    function _send(address[] memory recipients, bytes32[][] memory crefs)\\n        internal\\n        returns (uint256)\\n    {\\n        require(recipients.length == crefs.length, \\\"Deb0x: crefs and recipients lengths not equal\\\");\\n        require(recipients.length > 0, \\\"Deb0x: recipients array empty\\\");\\n        for (uint256 idx = 0; idx < recipients.length - 1; idx++) {\\n            require(crefs[recipients.length - 1].length > 0 , \\\"Deb0x: empty cref\\\");\\n            require(crefs[recipients.length - 1].length <= 8 , \\\"Deb0x: cref too long\\\");\\n        }\\n\\n        for (uint256 idx = 0; idx < recipients.length - 1; idx++) {\\n            bytes32 bodyHash = keccak256(abi.encode(crefs[idx]));\\n     \\n            emit Sent(\\n                recipients[idx],\\n                _msgSender(),\\n                bodyHash,\\n                sentId,\\n                block.timestamp,\\n                crefs[idx]\\n            );\\n        }\\n\\n        bytes32 selfBodyHash = keccak256(\\n            abi.encode(crefs[recipients.length - 1])\\n        );\\n        require(crefs[recipients.length - 1].length > 0 , \\\"Deb0x: empty cref\\\");\\n        require(crefs[recipients.length - 1].length <= 8 , \\\"Deb0x: cref too long\\\");\\n\\n        uint256 oldSentId = sentId;\\n        sentId++;\\n\\n        emit Sent(\\n            _msgSender(),\\n            _msgSender(),\\n            selfBodyHash,\\n            oldSentId,\\n            block.timestamp,\\n            crefs[recipients.length - 1]\\n        );\\n\\n        return oldSentId;\\n    }\\n\\n    /**\\n     * Recommended method to use to send native coins.\\n     * \\n     * @param to receiving address.\\n     * @param amount in wei.\\n     */\\n    function sendViaCall(address payable to, uint256 amount) internal {\\n        (bool sent, ) = to.call{value: amount}(\\\"\\\");\\n        require(sent, \\\"Deb0x: failed to send amount\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/metatx/ERC2771Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771Context is Context {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _trustedForwarder;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Deb0xERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\\\";\\n\\n/**\\n * Reward token contract to be used by the deb0x protocol.\\n * The entire amount is minted by the main deb0x contract \\n * (Deb0x.sol - which is the owner of this contract)\\n * directly to an account when it claims rewards.\\n */\\ncontract Deb0xERC20 is ERC20Permit {\\n\\n    /**\\n     * The address of the Deb0x.sol contract instance.\\n     */\\n    address public immutable owner;\\n\\n    /**\\n     * Sets the owner address. \\n     * Called from within the Deb0x.sol constructor.\\n     */\\n    constructor() ERC20(\\\"Deb0x Reward Token on Polygon\\\", \\\"pDBX\\\")\\n    ERC20Permit(\\\"Deb0x Reward Token on Polygon\\\") {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n     * The total supply is naturally capped by the distribution algorithm \\n     * implemented by the main deb0x contract, however an additional check \\n     * that will never be triggered is added to reassure the reader.\\n     * \\n     * @param account the address of the reward token reciever\\n     * @param amount wei to be minted\\n     */\\n    function mintReward(address account, uint256 amount) external {\\n        require(msg.sender == owner, \\\"DBX: caller is not Deb0x contract.\\\");\\n        require(super.totalSupply() < 5010000000000000000000000, \\\"DBX: max supply already minted\\\");\\n        _mint(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"ClientFeesClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClientRewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"FeesClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"KeySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"calculatedCycleReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"summedCycleStakes\",\"type\":\"uint256\"}],\"name\":\"NewCycleStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sentId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"msgFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeTokenFee\",\"type\":\"uint256\"}],\"name\":\"SendEntryCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"content\",\"type\":\"bytes32[]\"}],\"name\":\"Sent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_BPS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROTOCOL_FEE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCALING_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accAccruedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accCycleGasOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accCycleGasUsed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accFirstStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accSecondStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accStakeCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accWithdrawableStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimClientFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimClientRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"clientAccruedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"clientCycleGasEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"clientLastFeeUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"clientLastRewardUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"clientRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentCycleReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStartedCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cycleAccruedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cycleFeesPerStakeSummed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cycleTotalGasUsed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dbx\",\"outputs\":[{\"internalType\":\"contract Deb0xERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_initialTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_periodDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastActiveCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastCycleReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastFeeUpdateCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastStartedCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingStakeWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousStartedCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"publicKeys\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardPerCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"crefs\",\"type\":\"bytes32[][]\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"msgFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nativeTokenFee\",\"type\":\"uint256\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sentId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"publicKey\",\"type\":\"bytes32\"}],\"name\":\"setKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"summedCycleStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Deb0x", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008f94c0193c3c63eff990ac386b855a396750032f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}