{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/@galaxis/registries/contracts/TheProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.13;\\n\\nimport \\\"./LookupContract.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract TheProxy {\\n\\n    event ContractInitialised(string contract_name,address dest);\\n\\n    address immutable public lookup;\\n\\n    constructor(string memory contract_name, address _lookup) {\\n        // console.log(\\\"TheProxy constructor\\\");\\n        lookup = _lookup;\\n        address dest   = LookupContract(lookup).find_contract(contract_name);\\n        // console.log(\\\"proxy installed: dest/ctr_name/lookup\\\", dest, contract_name, lookup);\\n        emit ContractInitialised(contract_name,dest);\\n    }\\n\\n    // fallback(bytes calldata b) external  returns (bytes memory)  {           // For debugging when we want to access \\\"lookup\\\"\\n    fallback(bytes calldata b) external payable returns (bytes memory)  {\\n        // console.log(\\\"proxy start sender/lookup:\\\", msg.sender, lookup);\\n        address dest   = LookupContract(lookup).lookup();\\n        // console.log(\\\"proxy delegate:\\\", dest);\\n        (bool success, bytes memory returnedData) = dest.delegatecall(b);\\n        require(success, string(returnedData));\\n        return returnedData; \\n    }\\n  \\n}\"\r\n    },\r\n    \"contracts/@galaxis/registries/contracts/LookupContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.13;\\n\\nimport \\\"./IRegistry.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract LookupContract {\\n\\n    IRegistry           reg = IRegistry(0x1e8150050A7a4715aad42b905C08df76883f396F);\\n\\n    mapping(address => address) lookups;\\n\\n    error ContractNameNotInitialised(string contract_name);\\n    error ContractInfoNotInitialised();\\n\\n    function find_contract(string memory contract_name) external returns (address) {\\n        // console.log(\\\"find_contract called for:\\\", contract_name);\\n        address adr = reg.getRegistryAddress(contract_name);\\n        if (adr == address(0)) revert ContractNameNotInitialised(contract_name);\\n        lookups[msg.sender] = adr;\\n        return adr;\\n    }\\n\\n    function lookup() external view returns (address) {\\n        address adr = lookups[msg.sender];\\n        // console.log(\\\"lookup called sender/adr\\\", msg.sender, adr);\\n        if (adr == address(0)) revert ContractInfoNotInitialised();\\n        return adr;\\n    }\\n}\"\r\n    },\r\n    \"contracts/@galaxis/registries/contracts/IRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.13;\\n\\ninterface IRegistry {\\n    function setRegistryAddress(string memory fn, address value) external ;\\n    function setRegistryBool(string memory fn, bool value) external ;\\n    function setRegistryUINT(string memory key) external view returns (uint256) ;\\n    function setRegistryString(string memory fn, string memory value) external ;\\n    function setAdmin(address user,bool status ) external;\\n    function setAppAdmin(address app, address user, bool state) external;\\n\\n    function getRegistryAddress(string memory key) external view returns (address) ;\\n    function getRegistryBool(string memory key) external view returns (bool);\\n    function getRegistryUINT(string memory key) external view returns (uint256) ;\\n    function getRegistryString(string memory key) external view returns (string memory) ;\\n    function isAdmin(address user) external view returns (bool) ;\\n    function isAppAdmin(address app, address user) external view returns (bool);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contract_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_lookup\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contract_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"ContractInitialised\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"lookup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TheProxy", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000b238de0619c7e9aa155d9a69b9e5b0d9b5b4127100000000000000000000000000000000000000000000000000000000000000064c4f4f4b55500000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "1", "Implementation": "0x02a9fd639117aa99fb8a0959fcac716c51a1b564", "SwarmSource": ""}