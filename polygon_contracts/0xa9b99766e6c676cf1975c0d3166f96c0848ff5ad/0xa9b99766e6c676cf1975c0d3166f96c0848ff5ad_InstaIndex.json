{"SourceCode": "// Sources flattened with hardhat v2.0.8 https://hardhat.org\r\n\r\n// File contracts/registry/index.sol\r\n\r\npragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @title InstaIndex\r\n * @dev Main Contract For DeFi Smart Accounts. This is also a factory contract, Which deploys new Smart Account.\r\n * Also Registry for DeFi Smart Accounts.\r\n */\r\n\r\ninterface AccountInterface {\r\n    function version() external view returns (uint);\r\n    function enable(address authority) external;\r\n    function cast(address[] calldata _targets, bytes[] calldata _datas, address _origin) external payable returns (bytes32[] memory responses);\r\n}\r\n\r\ninterface ListInterface {\r\n    function init(address _account) external;\r\n}\r\n\r\ncontract AddressIndex {\r\n\r\n    event LogNewMaster(address indexed master);\r\n    event LogUpdateMaster(address indexed master);\r\n    event LogNewCheck(uint indexed accountVersion, address indexed check);\r\n    event LogNewAccount(address indexed _newAccount, address indexed _connectors, address indexed _check);\r\n\r\n    // New Master Address.\r\n    address private newMaster;\r\n    // Master Address.\r\n    address public master;\r\n    // List Registry Address.\r\n    address public list;\r\n\r\n    // Connectors Modules(Account Module Version => Connectors Registry Module Address).\r\n    mapping (uint => address) public connectors;\r\n    // Check Modules(Account Module Version => Check Module Address).\r\n    mapping (uint => address) public check;\r\n    // Account Modules(Account Module Version => Account Module Address).\r\n    mapping (uint => address) public account;\r\n    // Version Count of Account Modules.\r\n    uint public versionCount;\r\n\r\n    /**\r\n    * @dev Throws if the sender not is Master Address.\r\n    */\r\n    modifier isMaster() {\r\n        require(msg.sender == master, \"not-master\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Change the Master Address.\r\n     * @param _newMaster New Master Address.\r\n     */\r\n    function changeMaster(address _newMaster) external isMaster {\r\n        require(_newMaster != master, \"already-a-master\");\r\n        require(_newMaster != address(0), \"not-valid-address\");\r\n        require(newMaster != _newMaster, \"already-a-new-master\");\r\n        newMaster = _newMaster;\r\n        emit LogNewMaster(_newMaster);\r\n    }\r\n\r\n    function updateMaster() external {\r\n        require(newMaster != address(0), \"not-valid-address\");\r\n        require(msg.sender == newMaster, \"not-master\");\r\n        master = newMaster;\r\n        newMaster = address(0);\r\n        emit LogUpdateMaster(master);\r\n    }\r\n\r\n    /**\r\n     * @dev Change the Check Address of a specific Account Module version.\r\n     * @param accountVersion Account Module version.\r\n     * @param _newCheck The New Check Address.\r\n     */\r\n    function changeCheck(uint accountVersion, address _newCheck) external isMaster {\r\n        require(_newCheck != check[accountVersion], \"already-a-check\");\r\n        check[accountVersion] = _newCheck;\r\n        emit LogNewCheck(accountVersion, _newCheck);\r\n    }\r\n\r\n    /**\r\n     * @dev Add New Account Module.\r\n     * @param _newAccount The New Account Module Address.\r\n     * @param _connectors Connectors Registry Module Address.\r\n     * @param _check Check Module Address.\r\n     */\r\n    function addNewAccount(address _newAccount, address _connectors, address _check) external isMaster {\r\n        require(_newAccount != address(0), \"not-valid-address\");\r\n        versionCount++;\r\n        require(AccountInterface(_newAccount).version() == versionCount, \"not-valid-version\");\r\n        account[versionCount] = _newAccount;\r\n        if (_connectors != address(0)) connectors[versionCount] = _connectors;\r\n        if (_check != address(0)) check[versionCount] = _check;\r\n        emit LogNewAccount(_newAccount, _connectors, _check);\r\n    }\r\n\r\n}\r\n\r\ncontract CloneFactory is AddressIndex {\r\n    /**\r\n     * @dev Clone a new Account Module.\r\n     * @param version Account Module version to clone.\r\n     */\r\n    function createClone(uint version) internal returns (address result) {\r\n        bytes20 targetBytes = bytes20(account[version]);\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let clone := mload(0x40)\r\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(clone, 0x14), targetBytes)\r\n            mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            result := create(0, clone, 0x37)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Check if Account Module is a clone.\r\n     * @param version Account Module version.\r\n     * @param query Account Module Address.\r\n     */\r\n    function isClone(uint version, address query) external view returns (bool result) {\r\n        bytes20 targetBytes = bytes20(account[version]);\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let clone := mload(0x40)\r\n            mstore(clone, 0x363d3d373d3d3d363d7300000000000000000000000000000000000000000000)\r\n            mstore(add(clone, 0xa), targetBytes)\r\n            mstore(add(clone, 0x1e), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n\r\n            let other := add(clone, 0x40)\r\n            extcodecopy(query, other, 0, 0x2d)\r\n            result := and(\r\n                eq(mload(clone), mload(other)),\r\n                eq(mload(add(clone, 0xd)), mload(add(other, 0xd)))\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\ncontract InstaIndex is CloneFactory {\r\n\r\n    event LogAccountCreated(address sender, address indexed owner, address indexed account, address indexed origin);\r\n\r\n    /**\r\n     * @dev Create a new DeFi Smart Account for a user and run cast function in the new Smart Account.\r\n     * @param _owner Owner of the Smart Account.\r\n     * @param accountVersion Account Module version.\r\n     * @param _targets Array of Target to run cast function.\r\n     * @param _datas Array of Data(callData) to run cast function.\r\n     * @param _origin Where Smart Account is created.\r\n     */\r\n    function buildWithCast(\r\n        address _owner,\r\n        uint accountVersion,\r\n        address[] calldata _targets,\r\n        bytes[] calldata _datas,\r\n        address _origin\r\n    ) external payable returns (address _account) {\r\n        _account = build(_owner, accountVersion, _origin);\r\n        if (_targets.length > 0) AccountInterface(_account).cast{value: msg.value}(_targets, _datas, _origin);\r\n    }\r\n\r\n    /**\r\n     * @dev Create a new DeFi Smart Account for a user.\r\n     * @param _owner Owner of the Smart Account.\r\n     * @param accountVersion Account Module version.\r\n     * @param _origin Where Smart Account is created.\r\n     */\r\n    function build(\r\n        address _owner,\r\n        uint accountVersion,\r\n        address _origin\r\n    ) public returns (address _account) {\r\n        require(accountVersion != 0 && accountVersion <= versionCount, \"not-valid-account\");\r\n        _account = createClone(accountVersion);\r\n        ListInterface(list).init(_account);\r\n        AccountInterface(_account).enable(_owner);\r\n        emit LogAccountCreated(msg.sender, _owner, _account, _origin);\r\n    }\r\n\r\n    /**\r\n     * @dev Setup Initial things for InstaIndex, after its been deployed and can be only run once.\r\n     * @param _master The Master Address.\r\n     * @param _list The List Address.\r\n     * @param _account The Account Module Address.\r\n     * @param _connectors The Connectors Registry Module Address.\r\n     */\r\n    function setBasics(\r\n        address _master,\r\n        address _list,\r\n        address _account,\r\n        address _connectors\r\n    ) external {\r\n        require(\r\n            master == address(0) &&\r\n            list == address(0) &&\r\n            account[1] == address(0) &&\r\n            connectors[1] == address(0) &&\r\n            versionCount == 0,\r\n            \"already-defined\"\r\n        );\r\n        master = _master;\r\n        list = _list;\r\n        versionCount++;\r\n        account[versionCount] = _account;\r\n        connectors[versionCount] = _connectors;\r\n    }\r\n\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"}],\"name\":\"LogAccountCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newAccount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_connectors\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_check\",\"type\":\"address\"}],\"name\":\"LogNewAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"accountVersion\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"check\",\"type\":\"address\"}],\"name\":\"LogNewCheck\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"master\",\"type\":\"address\"}],\"name\":\"LogNewMaster\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"master\",\"type\":\"address\"}],\"name\":\"LogUpdateMaster\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"account\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAccount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_connectors\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_check\",\"type\":\"address\"}],\"name\":\"addNewAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"accountVersion\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_origin\",\"type\":\"address\"}],\"name\":\"build\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"accountVersion\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_datas\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"_origin\",\"type\":\"address\"}],\"name\":\"buildWithCast\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accountVersion\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newCheck\",\"type\":\"address\"}],\"name\":\"changeCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMaster\",\"type\":\"address\"}],\"name\":\"changeMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"check\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"connectors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"query\",\"type\":\"address\"}],\"name\":\"isClone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"list\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"master\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_master\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_list\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_connectors\",\"type\":\"address\"}],\"name\":\"setBasics\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "InstaIndex", "CompilerVersion": "v0.7.0+commit.9e61f92b", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6cb0ab991da85608d4bd21678fe941c7a17b6f0d3788fee83fdfb1cb875019ea"}