{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/drops/miscellaneous/Drop_HappyHoloWeen.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: \u00a9 Courtyard Inc. (https://courtyard.io)\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../TokenDropBase.sol\\\";\\n\\n/**\\n * @dev relevant interface of an ERC-721 contract that can check the number of tokens owned by a specific address.\\n */\\ninterface TokenGate {\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n}\\n\\n/**\\n * @title Courtyard.io Drop \\\"Happy Holo-ween!\\\", on Polygon Mainnet.\\n */ \\ncontract Drop_HappyHoloWeen is TokenDropBase {\\n\\n    /// @dev Polygon Mainnet constructor.\\n    /// See {https://docs.chain.link/vrf/v1/supported-networks#polygon-matic-mainnet} for VRF parameters.\\n    /// See {https://docs.gelato.network/developer-services/relay/networks-and-rate-limits#all-supported-networks-except-zksync-era} for Gelato Relayer\\n    constructor() TokenDropBase(\\n        \\\"Happy Holo-ween!\\\",                                                 // dropName\\n        1,                                                                  // _maxPerTx: Max tokens per transaction\\n        2,                                                                  // _maxPerAddress: Max tokens per address.\\n        99.99 * 10 ** 6,                                                    // mintPriceERC20: Mint price in USDC on Polygon\\n        0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174,                         // erc20TokenAddress: USDC on Polygon Mainnet\\n        0x732134D7f99b90C704d736B360dB45425073380f,                         // paymentReceiverAddress: Courtyard Engineering Multisig on Polygon Mainnet\\n        0x251BE3A17Af4892035C37ebf5890F4a4D889dcAD,                         // tokenRegistryAddress: Courtyard Registry deployed on Polygon Mainnet\\n        0x3d2341ADb2D31f1c5530cDC622016af293177AE0,                         // vrfCoordinator: VRFCoordinator on Polygon Mainnet\\n        0xb0897686c545045aFc77CF20eC7A532E3120E0F1,                         // linkToken: LINK Token on Polygon Mainnet\\n        0xf86195cf7690c55907b2b611ebb7343a6f649bff128701cc542f0569e2c549da, // vrfKeyHash: Chainlink keyHash on Polygon Mainnet\\n        0.0001 * 10 ** 18,                                                  // vrfLinkFee: 0.0001 LINK\\n        0xd8253782c45a12053594b9deB72d8e8aB2Fca54c                          // trustedForwarder: Gelato Relayer on Polygon Mainnet\\n    ) {}\\n\\n    function _isTrustedMinter(address addr) internal view virtual override returns (bool) {\\n        if (addr == 0xd8253782c45a12053594b9deB72d8e8aB2Fca54c) return true;    // Gelato Relayer on Polygon Mainnet\\n        if (addr == 0x55f981D4e6bF829fB6DF604E3D3bdD58Bb83CB0B) return true;    // Paper Minter on Polygon Mainnet        \\n        return false;\\n    }\\n\\n    function isEligible(address addr) public view virtual override returns (bool) {\\n        TokenGate tokenGate = TokenGate(0x251BE3A17Af4892035C37ebf5890F4a4D889dcAD); // Courtyard Registry deployed on Polygon Mainnet\\n        return tokenGate.balanceOf(addr) >= 2; // The eligibility requirement for this drop is 2 tokens or more per wallet\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/drops/TokenDropBase.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: \u00a9 Courtyard Inc. (https://courtyard.io)\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ERC20PaymentProcessor.sol\\\";\\nimport \\\"./PresaleList.sol\\\";\\nimport \\\"./TokenMintingPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/metatx/ERC2771Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n\\n/**\\n * @title Base contract to handle an NFT drop.\\n */ \\nabstract contract TokenDropBase is ERC2771Context, ReentrancyGuard, Ownable, ERC20PaymentProcessor, PresaleList, TokenMintingPool {\\n\\n    event TokenPurchasedAndMinted(\\n        address indexed mintedToAddress,\\n        address mintedTokenAddress,\\n        uint256 mintedTokenId,\\n        address paymentTokenAddress,\\n        uint256 paymentAmount\\n    );\\n\\n    event TokenMintedForGiveaway(\\n        address indexed mintedToAddress,\\n        address mintedTokenAddress,\\n        uint256 mintedTokenId\\n    );\\n\\n    string public name;                             // the name of this drop\\n    uint256 public maxPerTx;                        // maximum of tokens that can be minted per transaction\\n    uint256 public maxPerAddress;                   // maximum of tokens that can be minted by a specific address.\\n    uint256 public mintPrice;                       // mint price per token, in the selected ERC20.\\n    mapping(address => uint256) _mintsPerAddress;   // keeps track of how many tokens were minted per address.\\n    mapping(address => bool) _presaleMinters;       // keeps track of the addresses that already minted the presale.\\n                                                    // Same conditions apply to the presale as public sale, except only \\n                                                    // one transaction is allowed.\\n    uint256 public presaleLockedUntil = 0;          // time lock to keep the presale locked until a specific time, if necessary.\\n    bool public dropStateIsPresale = false;         // safety switch used to unlock (true) / lock (false) the presale.\\n    uint256 public publicSaleLockedUntil = 0;       // time lock to keep the public sale locked until a specific time, if necessary.\\n    bool public dropStateIsPublicSale = false;      // safety switch used to unlock (true) / lock (false) the public sale.\\n    bool public saleHasEnded = false;               // flag used to detect the end of the sale\\n\\n    /* ========================================== CONSTRUCTOR AND HELPERS ========================================== */\\n\\n    /**\\n     * @dev Constructor.\\n     *  - Sets the name of the drop\\n     *  - Sets the mint limitations\\n     *  - Sets the mint price\\n     *  - Sets the {ERC20PaymentProcessor} parameters\\n     *  - Sets the {TokenMintingPool} parameters\\n     *  - Sets a {trustedForwarder} to relay function calls (the null address is accepted for no {trustedForwarder})\\n     */\\n    constructor(\\n        string memory dropName,\\n        uint256 _maxPerTx,\\n        uint256 _maxPerAddress,\\n        uint256 mintPriceERC20,\\n        address erc20TokenAddress,\\n        address paymentReceiverAddress,\\n        address tokenRegistryAddress,\\n        address vrfCoordinator,\\n        address linkToken,\\n        bytes32 vrfKeyHash,\\n        uint256 vrfLinkFee,\\n        address trustedForwarder\\n    )\\n    Ownable()\\n    ERC2771Context(trustedForwarder)\\n    ERC20PaymentProcessor(erc20TokenAddress, paymentReceiverAddress)\\n    PresaleList()\\n    TokenMintingPool(\\n        tokenRegistryAddress,\\n        vrfCoordinator,\\n        linkToken,\\n        vrfKeyHash,\\n        vrfLinkFee\\n    ) {\\n        name = dropName;\\n        maxPerTx = _maxPerTx;\\n        maxPerAddress = _maxPerAddress;\\n        mintPrice = mintPriceERC20;\\n    }\\n\\n\\n    /* ========================================== ERC2771Context OVERRIDES ========================================== */\\n\\n    /**\\n     * @dev Enforces the use of {ERC2771Context._msgSender} over {Context._msgSender}.\\n     */\\n    function _msgSender() internal view virtual override(ERC2771Context, Context) returns (address) {\\n        return ERC2771Context._msgSender();\\n    }\\n\\n    /**\\n     * @dev Enforces the use of {ERC2771Context._msgData} over {Context._msgData}.\\n     */\\n    function _msgData() internal view virtual override(ERC2771Context, Context) returns (bytes calldata) {\\n        return ERC2771Context._msgData();\\n    }\\n\\n\\n    /* ============================================= MINT PRICE HELPERS ============================================= */\\n\\n    /**\\n     * @dev Updates the mint price.\\n     * Requirement: the drop hasn't been locked yet.\\n     */\\n    function updateMintPrice(uint256 _mintPrice) public onlyOwner onlyWhenDropIsNotLocked {\\n        mintPrice = _mintPrice;\\n    }\\n\\n\\n    /* ============================================ TOKEN SUPPLY HELPERS ============================================ */\\n\\n    /**\\n     * @dev See {TokenMintingPool._addTokens}.\\n     * Requirement: the drop hasn't been locked yet.\\n     */\\n    function addTokens(bytes32[] memory tokenHashes) public onlyOwner onlyWhenDropIsNotLocked {\\n        _addTokens(tokenHashes);\\n    }\\n\\n    /**\\n     * @dev See {TokenMintingPool._removeTokens}.\\n     * Requirement: the drop hasn't been locked yet.\\n     */\\n    function removeTokens(bytes32[] memory tokenHashes) public onlyOwner onlyWhenDropIsNotLocked {\\n        _removeTokens(tokenHashes);\\n    }\\n\\n    /**\\n     * @dev Check that the drop has not sold out.\\n     */\\n    modifier onlyNotSoldOut {\\n        require(remainingSupplyCount() > 0, \\\"TokenDropBase: Sold out.\\\");\\n        _ ;\\n    }\\n\\n\\n    /* =========================================== PRESALE LIST HELPERS =========================================== */\\n\\n    /**\\n     * @dev See {PresaleList._addAddressesToPresale}.\\n     * Requirement: the drop hasn't been locked yet.\\n     */\\n    function addAddressesToPresale(bytes32[] memory addressHashes) public onlyOwner onlyWhenDropIsNotLocked {\\n        _addAddressesToPresale(addressHashes);\\n    }\\n\\n    /**\\n     * @dev See {PresaleList._removeAddressesFromPresale}.\\n     * Requirement: the drop hasn't been locked yet.\\n     */\\n    function removeAddressesFromPresale(bytes32[] memory addressHashes) public onlyOwner onlyWhenDropIsNotLocked {\\n        _removeAddressesFromPresale(addressHashes);\\n    }\\n\\n    /**\\n     * @dev Checks if a recipient has access to the presale.\\n     */ \\n    function hasPresaleAccess(address recipient) public view returns (bool) {\\n        return _hasPresaleAccess(recipient);\\n    }\\n\\n\\n    /* ============================================= DROP LOCK HELPERS ============================================= */\\n\\n    /**\\n     * @dev Check that the drop is locked.\\n     */\\n    modifier onlyWhenDropIsLocked {\\n        require(dropIsLocked(), \\\"TokenDropBase: The drop is not locked.\\\");\\n        _ ;\\n    }\\n\\n    /**\\n     * @dev Check that the drop is not locked.\\n     */\\n    modifier onlyWhenDropIsNotLocked {\\n        require(!dropIsLocked(), \\\"TokenDropBase: The drop is locked.\\\");\\n        _ ;\\n    }\\n\\n    /**\\n     * @dev Tells if the drop is locked.\\n     */\\n    function dropIsLocked() public view returns (bool) {\\n        return presaleListLocked() && tokenSupplyLocked();\\n    }\\n\\n    /**\\n     * @dev Lock drop by locking the token supply and the presale list.\\n     * This cannot be undone because locking the supply sets the random seed for the drop.\\n     */\\n    function lockDrop() public onlyOwner onlyWhenDropIsNotLocked {\\n        _lockTokenSupply();\\n        _lockPresaleList();\\n    }\\n\\n\\n    /* ============================================ SALE STATE HELPERS ============================================ */\\n\\n    /**\\n     * @dev Check that the sale has not ended, i.e. it still has supply and was not terminated.\\n     */\\n    modifier onlyWhenSaleHasNotEnded {\\n        require(!saleHasEnded, \\\"TokenDropBase: The sale has ended.\\\");\\n        _ ;\\n    }\\n\\n    /**\\n     * @dev Check that the sale is not paused, i.e. the public sale or presale is still open.\\n     */\\n    modifier onlyWhenSaleIsNotPaused {\\n        require(presaleIsOpen() || publicSaleIsOpen(), \\\"TokenDropBase: The sale is paused.\\\");\\n        _ ;\\n    }\\n\\n    /**\\n     * @dev Updates the presale time lock.\\n     */\\n    function updatePresaleLockedUntil(uint256 timestampSeconds) public onlyOwner {\\n        presaleLockedUntil = timestampSeconds;\\n    }\\n\\n    /**\\n     * @dev Unlocks the presale and locks the public sale.\\n     * \\n     * Note: This does not change the presale time lock.\\n     * \\n     * Requirements:\\n     *  - The drop must be locked\\n     *  - The sale must not have ended\\n     */\\n    function unlockPresale() public onlyOwner onlyWhenDropIsLocked onlyWhenSaleHasNotEnded {\\n        dropStateIsPresale = true;\\n        dropStateIsPublicSale = false;\\n    }\\n\\n    /**\\n     * @dev Checks if the presale is open.\\n     * @return bool true if the presale is open AND the time lock has passed, false otherwise\\n     */\\n    function presaleIsOpen() public view returns (bool) {\\n        return dropStateIsPresale && block.timestamp >= presaleLockedUntil;\\n    }\\n\\n    /**\\n     * @dev Updates the public sale time lock.\\n     */\\n    function updatePublicSaleLockedUntil(uint256 timestampSeconds) public onlyOwner {\\n        publicSaleLockedUntil = timestampSeconds;\\n    }\\n\\n    /**\\n     * @dev Unlocks the public sale and locks the presale.\\n     * \\n     * Note: This does not change the public sale time lock.\\n     * \\n     * Requirements:\\n     *  - The drop must be locked\\n     *  - The sale must not have ended\\n     */\\n    function unlockPublicSale() public onlyOwner onlyWhenDropIsLocked onlyWhenSaleHasNotEnded {\\n        dropStateIsPresale = false;\\n        dropStateIsPublicSale = true;\\n    }\\n\\n    /**\\n     * @dev Checks if the public sale is open.\\n     * @return bool true if the public sale is open AND the time lock has passed, false otherwise\\n     */\\n    function publicSaleIsOpen() public view returns (bool) {\\n        return dropStateIsPublicSale && block.timestamp >= publicSaleLockedUntil;\\n    }\\n\\n    /**\\n     * @dev Locks both the presale and the public sale in a reversible way.\\n     * \\n     * Note: This does not change the presale and public sale time locks.\\n     * \\n     * Requirements:\\n     *  - The drop must be locked\\n     *  - The sale must not have ended\\n     */\\n    function pauseSale() public onlyOwner onlyWhenDropIsLocked onlyWhenSaleHasNotEnded {\\n        dropStateIsPresale = false;\\n        dropStateIsPublicSale = false;\\n    }\\n\\n    /**\\n     * @dev Ends the sale by pausing it and marking it as ended.\\n     * \\n     * Requirements:\\n     *  - The drop must be locked\\n     *  - The sale must not have ended\\n     */\\n    function endSale() public onlyOwner onlyWhenDropIsLocked onlyWhenSaleHasNotEnded {\\n        pauseSale();\\n        saleHasEnded = true;\\n    }\\n\\n    /**\\n     * @dev Get the sale state of the drop.\\n     */\\n    function saleState() public view returns (string memory) {\\n        // Before the drop is locked\\n        if (!dropIsLocked()) return \\\"CLOSED\\\";\\n\\n        // After the drop is locked         \\n        if (remainingSupplyCount() <= 0) return \\\"SOLD_OUT\\\";\\n        if (presaleIsOpen()) return \\\"PRESALE\\\";\\n        if (publicSaleIsOpen()) return \\\"PUBLIC_SALE\\\";\\n        if (saleHasEnded) return \\\"SALE_HAS_ENDED\\\";\\n\\n        // If none of the above applies, the sale is just paused.\\n        return \\\"SALE_PAUSED\\\";\\n    }\\n\\n\\n    /* ================================================== MINTING ================================================== */\\n\\n    /**\\n     * @dev Check that the direct caller (given by msg.sender explicitly) is an trusted account.\\n     */\\n    modifier onlyTrustedMinter() {\\n        require(_isTrustedMinter(msg.sender), \\\"TokenDropBase: Direct caller is not authorized to mint\\\");\\n        _ ;\\n    }\\n\\n    /**\\n     * @dev Check whether or not a particular address is an trusted caller.\\n     * An implementation of {TokenDropBase} should define this logic and would usually\\n     * want to include the {trustedForwarder} in the list of trusted callers.\\n     * Defaults to always return true.\\n     */\\n    function _isTrustedMinter(address) internal view virtual returns (bool) {\\n        return true;\\n    }\\n\\n    /**\\n     * @dev modifier to ensure that the recipient is eligible.\\n     */\\n    modifier onlyEligibleRecipient(address recipient) {\\n        require(isEligible(recipient), \\\"TokenDropBase: Recipient is not eligible.\\\");\\n        _ ;\\n    }\\n\\n    /**\\n     * @dev helper function to determine if a recipient is eligible for this drop in the current state.\\n     * An implementation of {TokenDropBase} should define this logic if necessary. An example of this is \\n     * a token-gated eligibility where a candidate recipient must own certain tokens to be eligible for this drop.\\n     * This function is public to allow a front-end application to be adjusted based on the eligibility.\\n     * Defaults to always return true.\\n     */\\n    function isEligible(address) public virtual view returns (bool) {\\n        return true;\\n    }\\n\\n    /**\\n      * @dev Calculate the number of tokens that can be minted for {recipient} given the following parameters:\\n      *  - the requested quantity of tokens\\n      *  - {maxPerTx}\\n      *  - {maxPerAddress}\\n      *  - the remaining supply\\n      * \\n      * Notes:\\n      *  - the actual number of tokens that the {recipient} can get during this transaction may be less than \\n      *    the requested quantity when getting close to {maxPerAddress} or when {remainingSupplyCount} is close to 0\\n      */\\n     function _mintableQuantityForAddress(address recipient, uint256 requestedQuantity) private view returns (uint256) {\\n        uint256 mintableQuantity = requestedQuantity;\\n        mintableQuantity = Math.min(mintableQuantity, maxPerAddress - _mintsPerAddress[recipient]);\\n        mintableQuantity = Math.min(mintableQuantity,  remainingSupplyCount());\\n        return mintableQuantity;\\n     }\\n\\n    /**\\n     * @dev Helper to process a mint request.\\n     * \\n     * Requirements:\\n     *  - the requested quantity must be > 0\\n     *  - the {recipient} must not have reached {maxPerAddress}\\n     *  - {quantity} must be less or equal to {maxPerTx}\\n     * \\n     * Notes:\\n     *  - Ensures that the {recipient} is eligible to receive tokens.\\n     *  - Calls {_mintableQuantityForAddress} to calculate the actual number of tokens that can be minted for that \\n     *    {recipient}, if differs from the requested quantity.\\n     *  - Processes payment for the tokens through a call to transfer ERC20 tokens from the {minter} (i.e. the payer) to this contract.\\n     *    If this fails for any reason (including insufficient funds or lack of authorization) the contract call will be reverted.\\n     *  - Mints the tokens to the {recipient}.\\n     */\\n    function _processMintRequest(address minter, uint256 requestedQuantity, address recipient) private {\\n        require(requestedQuantity > 0, \\\"TokenDropBase: Invalid request for zero tokens.\\\");\\n        require(_mintsPerAddress[recipient] < maxPerAddress, \\\"TokenDropBase: Token limit per wallet already reached.\\\");\\n        require(requestedQuantity <= maxPerTx, \\\"TokenDropBase: Token limit per transaction exceeded.\\\");\\n\\n        uint256 mintableQuantity = _mintableQuantityForAddress(recipient, requestedQuantity);\\n        _mintsPerAddress[recipient] += mintableQuantity;\\n        _processPayment(minter, mintableQuantity * mintPrice);\\n        uint256[] memory tokenIds = _mintTokens(recipient, mintableQuantity);\\n        for (uint ii = 0 ; ii < tokenIds.length ; ii++) {\\n            emit TokenPurchasedAndMinted(recipient, address(tokenRegistry), tokenIds[ii], erc20Token, mintPrice);\\n        }\\n    }\\n\\n    /**\\n     * @dev Mint tokens for {recipient}. The caller can be anyone, including {recipient}, and the funds have been preapproved for spending.\\n     * \\n     * Requirements:\\n     *  - the drop is not sold out\\n     *  - the drop has not ended\\n     *  - the sale is not paused\\n     *  - if the public sale is not open:\\n     *      - the presale must be open\\n     *      - {recipient} must be allowed to access the presale\\n     *      - {recipient} hasn't used their presale access yet\\n     *  - see {_processMintRequest}\\n     */\\n    function mintTokens(uint256 requestedQuantity, address recipient) external nonReentrant onlyTrustedMinter onlyEligibleRecipient(recipient) onlyWhenSaleHasNotEnded onlyWhenSaleIsNotPaused onlyNotSoldOut {\\n        if (!publicSaleIsOpen()) {\\n            require(presaleIsOpen(), \\\"TokenDropBase: The sale is not open.\\\");\\n            require(_hasPresaleAccess(recipient), \\\"TokenDropBase: Receiver does not have presale address.\\\");\\n            require(!_presaleMinters[recipient], \\\"TokenDropBase: Presale already minted for user.\\\");\\n            _presaleMinters[recipient] = true;\\n        }\\n        _processMintRequest(_msgSender(), requestedQuantity, recipient);\\n    }\\n\\n    /**\\n     * @dev Permit a transaction and mint tokens for {purchaser} in a single transaction.\\n     * \\n     * Requirements:\\n     *  - A signature is required to approve the funds spending during the transaction\\n     *  - The originating caller of this function (returned by _msgSender()) has to be the signer of the signature.\\n     *  - The signature has to correspond to the price of the requested quantity (it is not provided as an input, but rather, equat to {tokenQuantity} * {mintPrice})\\n     *  - {expiration} must correspond to the expiration time encoded in the signature\\n     *  - if the public sale is not open:\\n     *      - the presale must be open\\n     *      - {recipient} must be allowed to access the presale\\n     *      - {recipient} hasn't used their presale access yet\\n     *  - {requestedQuantity} must be greater than zero\\n     *  - {recipient} must not have reached their limit\\n     *  - {requestedQuantity} must be smaller or equal to the max allowed per transaction\\n     *  \\n     * If all the requirements pass, the actual quantity of tokens that can be minted for {recipient} is calculated with {_mintableQuantityForAddress},\\n     * based on the total remaining quantity of tokens and the quantity of tokens that {recipient} is able to receive for this drop. Then, the payment is \\n     * processed and the tokens are minted.\\n     */\\n    function permitFundsAndMintTokens(\\n        uint256 requestedQuantity,      // the quantity of tokens to mint\\n        address recipient,              // the address that will receive the minted token(s)\\n        uint256 expiration,             // the expiration of the permit signature\\n        uint8 v, bytes32 r, bytes32 s   // the parameters of the permit signature\\n    ) external nonReentrant onlyTrustedMinter onlyEligibleRecipient(recipient) onlyWhenSaleHasNotEnded onlyWhenSaleIsNotPaused onlyNotSoldOut {\\n        if (!publicSaleIsOpen()) {\\n            require(presaleIsOpen(), \\\"TokenDropBase: The sale is not open.\\\");\\n            require(_hasPresaleAccess(recipient), \\\"TokenDropBase: Receiver does not have presale address.\\\");\\n            require(!_presaleMinters[recipient], \\\"TokenDropBase: Presale already minted for user.\\\");\\n            _presaleMinters[recipient] = true;\\n        }\\n        require(requestedQuantity > 0, \\\"TokenDropBase: Invalid request for zero tokens.\\\");\\n        require(_mintsPerAddress[recipient] < maxPerAddress, \\\"TokenDropBase: Token limit per wallet already reached.\\\");\\n        require(requestedQuantity <= maxPerTx, \\\"TokenDropBase: Token limit per transaction exceeded.\\\");\\n        uint256 mintableQuantity = _mintableQuantityForAddress(recipient, requestedQuantity);\\n        _mintsPerAddress[recipient] += mintableQuantity;\\n        _permitAndProcessPayment(\\n            _msgSender(),                          // the executor of the call\\n            mintableQuantity * mintPrice,   // the final purchase value\\n            requestedQuantity * mintPrice,  // the amount that is supposed to be approved for this transaction (and encoded in the permit signature)\\n            expiration,                     // the expiration of the permit signature\\n            v, r, s                         // the parameters of the permit signature\\n        );    \\n        uint256[] memory tokenIds = _mintTokens(recipient, mintableQuantity);\\n        for (uint ii = 0 ; ii < tokenIds.length ; ii++) {\\n            emit TokenPurchasedAndMinted(recipient, address(tokenRegistry), tokenIds[ii], erc20Token, mintPrice);\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper function to mint giveaway tokens as an admin.\\n     * \\n     * Notes: \\n     *  - If a {recipient} is given multiple tokens, they must appear as many times in the input.\\n     *  - This can be called even when the sale s paused, because giveaways typically happen ahead of time.\\n     */\\n    function mintGiveawayTokens(address[] memory recipients) external onlyOwner nonReentrant onlyWhenSaleHasNotEnded onlyNotSoldOut {\\n        for (uint ii = 0 ; ii < recipients.length ; ii++) {\\n            address recipient = recipients[ii];\\n            uint256 tokenId = _mintToken(recipient);\\n            emit TokenMintedForGiveaway(recipient, address(tokenRegistry), tokenId);\\n        }\\n    }\\n\\n\\n    /* ========================================== PAYMENT RECEIVER UPDATE ========================================== */\\n\\n    /**\\n     * @dev Updates payment receiver address.\\n     * Requirement: See {ERC20PaymentProcessor._setPaymentReceiverAddress}\\n     */\\n    function updatePaymentReceiverAddress(address newReceiver) public onlyOwner {\\n        _setPaymentReceiverAddress(newReceiver);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ERC20PaymentProcessor.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: \u00a9 Courtyard Inc. (https://courtyard.io)\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n\\n/**\\n * The IERC20Permit interface, used to permit funds to be transferred with a signature.\\n */\\ninterface IERC20Permit {\\n    function permit(address owner, address spender, uint256 value, uint256 expiration, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\\n/**\\n * @title processes payments in ERC20 and redirects them to a receiver address.\\n */ \\nabstract contract ERC20PaymentProcessor {\\n\\n    using SafeERC20 for IERC20;\\n\\n    event PaymentProcessed(address indexed to, address indexed token, uint256 amount);\\n\\n    event PaymentReceiverAddressChanged(address indexed oldAddress, address indexed newAddress);\\n\\n    address public immutable erc20Token;    // the ERC20 token accepted as funds by this contract.\\n    address private _receiverAddress;       // the address that will be transferred the payments.\\n\\n    constructor(address tokenAddress, address receiverAddress) {\\n        erc20Token = tokenAddress;\\n        _setPaymentReceiverAddress(receiverAddress);\\n    }\\n\\n    /**\\n     * @dev return the current payment receiver address.\\n     */\\n    function paymentReceiverAddress() public view returns (address) {\\n        return _receiverAddress;\\n    }\\n\\n    /* ================================================= SETTERS ================================================= */\\n\\n    /**\\n     * @dev Set the payment receiver address.\\n     * Requirement: the receiver address cannot be the null address\\n     */\\n    function _setPaymentReceiverAddress(address newAddress) internal {\\n        require(newAddress != address(0), \\\"ERC20PaymentProcessor: Cannot set the receiver address to the null address.\\\");\\n        address oldAddress = _receiverAddress;\\n        _receiverAddress = newAddress;\\n        emit PaymentReceiverAddressChanged(oldAddress, _receiverAddress);\\n    }\\n\\n    /* ============================================ PAYMENT PROCESSING ============================================ */\\n\\n    /**\\n     * @dev process the payment, assuming that {erc20Token} already knows that this contract is allowed to spend the funds on behalf of {from}.\\n     */\\n    function _processPayment(address from, uint256 amount) internal {\\n        IERC20(erc20Token).safeTransferFrom(from, _receiverAddress, amount);\\n        emit PaymentProcessed(_receiverAddress, erc20Token, amount);\\n    }\\n\\n    /**\\n     * @dev permit and process the payment of {erc20Token} by this contract on behalf of {from}.\\n     * Note that {requestAmount} might be different than the {permitAmount}:\\n     *  - if requestAmount = permitAmount: the transaction would succeed\\n     *  - if requestAmount > permitAmount: the transaction would fail\\n     *  - if requestAmount < permitAmount: the transaction would succeed and the extra funds would be refunded to the payer. Note that this is \\n     *    a deliberate choice to ensure that at the end of the transaction, there is no fund spending approval lingering around (since it is \\n     *    not possible to self-cancel an approval on someone else behalf). The caveat is that if the authorizer permitted the spending of \\n     *    funds they do not have in the first place, the transaction would fail, even if the requested amount is lower and the authorized does have that much funds.\\n     */\\n    function _permitAndProcessPayment(address from, uint256 requestAmount, uint256 permitAmount, uint256 expiration, uint8 v, bytes32 r, bytes32 s) internal {\\n        // fail early if the requested amount is higher than the permitted amount.\\n        require(permitAmount >= requestAmount, \\\"ERC20PaymentProcessor: request amount exceeds permit amount.\\\");\\n        IERC20Permit(erc20Token).permit(from, address(this), permitAmount, expiration, v, r, s);\\n        // pull the funds.\\n        IERC20(erc20Token).safeTransferFrom(from, address(this), permitAmount);\\n        // pay the receiver.\\n        IERC20(erc20Token).safeTransfer(_receiverAddress, requestAmount);\\n        // send the change back to the payer and cancel the approval in the process.\\n        IERC20(erc20Token).safeTransfer(from, permitAmount - requestAmount);\\n        emit PaymentProcessed(_receiverAddress, erc20Token, requestAmount);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/drops/PresaleList.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: \u00a9 Courtyard Inc. (https://courtyard.io)\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @title Presale List contract.\\n */ \\nabstract contract PresaleList {\\n\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    EnumerableSet.Bytes32Set private _presaleList;  // The hashes of the addresses allowed for the presale\\n    bool private _presaleListLocked = false;        // whether or not the presale list is locked\\n\\n    constructor() {}\\n\\n    /**\\n     * @dev Check that the presale list is NOT locked.\\n     */\\n    modifier onlyPresaleListUnlocked() {\\n        require(!presaleListLocked(), \\\"PresaleList: Presale list is locked.\\\");\\n        _ ;\\n    }\\n\\n    /**\\n     * @dev Check that the presale list is locked.\\n     */\\n    modifier onlyPresaleListLocked() {\\n        require(presaleListLocked(), \\\"PresaleList: Presale list is not locked.\\\");\\n        _ ;\\n    }\\n\\n    /**\\n     * @dev Adds multiple addresses to the presale list.\\n     * Note: In order to help protect privacy ahead of using the list for a drop or other event,\\n     * (even though everything is public on the blockchain), we only store the hashes of addresses.\\n     * Note: if the input is too big, the transaction will fail due to high gas limit.\\n     */\\n    function _addAddressesToPresale(bytes32[] memory addressHashes) internal onlyPresaleListUnlocked {\\n        for (uint ii = 0 ; ii < addressHashes.length ; ii++) {\\n            _presaleList.add(addressHashes[ii]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes multiple addresses from the presale list.\\n     * Note: if the input is too big, the transaction will fail due to high gas limit.\\n     */\\n    function _removeAddressesFromPresale(bytes32[] memory addressHashes) internal onlyPresaleListUnlocked {\\n        for (uint ii = 0 ; ii < addressHashes.length ; ii++) {\\n            _presaleList.remove(addressHashes[ii]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the presale list.\\n     */\\n    function _lockPresaleList() internal {\\n        _presaleListLocked = true;\\n    }\\n\\n    /**\\n     * @dev Tells if the presale is locked.\\n     */\\n    function presaleListLocked() public view returns (bool) {\\n        return _presaleListLocked;\\n    }\\n\\n    /**\\n     * @dev Give the number of addresses in the presale list.\\n     */\\n    function presaleListCount() public view returns (uint256) {\\n        return _presaleList.length();\\n    }\\n\\n    /**\\n     * @dev Tells whether or not {addr} is in the presale list.\\n     */\\n    function _hasPresaleAccess(address addr) internal view returns (bool) {\\n        return _presaleList.contains(keccak256(abi.encodePacked(addr)));\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/drops/TokenMintingPool.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: \u00a9 Courtyard Inc. (https://courtyard.io)\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../registry/ITokenRegistry.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @title Token minting pool contract.\\n */ \\nabstract contract TokenMintingPool is VRFConsumerBase {\\n\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 private _vrfKeyHash;                                // The key hash to run Chainlink VRF\\n\\n    uint256 private _vrfLinkFee;                                // Fee to call Chainlink {requestRandomness}, in LINK. \\n\\n    ITokenRegistry public immutable tokenRegistry;              // Reference to the registry where tokens will be minted.\\n\\n    EnumerableSet.Bytes32Set private _availableTokenHashes;     // The available token hashes that haven't been minted yet.\\n\\n    uint256 public totalSupplyCount;                            // the total supply -- locked at the same time as the token supply is locked.\\n\\n    uint256 private _randomSeed;                                // A random seed number provided by Chainlink, ensuring that \\n                                                                // even though the mint is 1st come / 1st serve, the order in \\n                                                                // which token hashes were uploaded does not matter.\\n                                                                // (_randomSeed != 0) serves as a check to verify that the \\n                                                                // supply is locked.\\n\\n    /* ========================================== CONSTRUCTOR AND HELPERS ========================================== */\\n\\n    /**\\n     * @dev modifier to check that the token registry implements {ITokenRegistry}, like {CourtyardRegistry}.\\n     */\\n    modifier onlyValidRegistry(address tokenRegistryAddress) {\\n        require(\\n            ERC165Checker.supportsInterface(tokenRegistryAddress, type(ITokenRegistry).interfaceId),\\n            \\\"TokenMintingPool: Target token registry contract does not match the interface requirements.\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructor.\\n     *\\n     *  - Sets the parameters to use Chainlink VRF for token hashes shuffling pre-mint.\\n     *  - Sets the token registry\\n     * \\n     * Requirement: {tokenRegistryAddress} must point to a valid {ITokenRegistry} contract.\\n     *  \\n     */\\n    constructor(\\n        address tokenRegistryAddress,\\n        address vrfCoordinator,\\n        address linkToken,\\n        bytes32 vrfKeyHash,\\n        uint256 vrfLinkFee\\n    )\\n    onlyValidRegistry(tokenRegistryAddress)\\n    VRFConsumerBase(vrfCoordinator, linkToken) {\\n        tokenRegistry = ITokenRegistry(tokenRegistryAddress);\\n        _vrfKeyHash = vrfKeyHash;\\n        _vrfLinkFee = vrfLinkFee;\\n    }\\n\\n\\n    /* ============================================ TOKEN SUPPLY HELPERS ============================================ */\\n\\n    /**\\n     * @dev Check that the token supply is NOT locked.\\n     */\\n    modifier onlyTokenSupplyUnlocked() {\\n        require(!tokenSupplyLocked(), \\\"TokenMintingPool: Token supply is locked.\\\");\\n        _ ;\\n    }\\n\\n    /**\\n     * @dev Check that the token supply is locked.\\n     */\\n    modifier onlyTokenSupplyLocked() {\\n        require(tokenSupplyLocked(), \\\"TokenMintingPool: Token supply is not locked.\\\");\\n        _ ;\\n    }\\n\\n    /**\\n     * @dev add multiple token hashes to the supply.\\n     * Note: if the input is too big, the transaction will fail due to high gas limit.\\n     */\\n    function _addTokens(bytes32[] memory tokenHashes) internal onlyTokenSupplyUnlocked {\\n        for (uint ii = 0 ; ii < tokenHashes.length ; ii++) {\\n            _availableTokenHashes.add(tokenHashes[ii]);\\n        }\\n        // Update the total supply\\n        totalSupplyCount = _availableTokenHashes.length();\\n    }\\n\\n    /**\\n     * @dev remove multiple token hashes from the supply.\\n     * Note: if the input is too big, the transaction will fail due to high gas limit.\\n     */\\n    function _removeTokens(bytes32[] memory tokenHashes) internal onlyTokenSupplyUnlocked {\\n        for (uint ii = 0 ; ii < tokenHashes.length ; ii++) {\\n            _availableTokenHashes.remove(tokenHashes[ii]);\\n        }\\n        // Update the total supply\\n        totalSupplyCount = _availableTokenHashes.length();\\n    }\\n\\n    /**\\n     * @dev Triggers the token supply locking process by making a request to Chainlink VRF to get a random seed.\\n     * The random seed, when provided by Chainlink, will automatically trigger a shuffle of all the token hashes \\n     * and lock the supply. See {fulfillRandomness()}.\\n     *\\n     * This cannot be undone, but can be called again if chainlink failed to return a random number.\\n     */\\n    function _lockTokenSupply() internal onlyTokenSupplyUnlocked {\\n        require(LINK.balanceOf(address(this)) >= _vrfLinkFee, \\\"TokenMintingPool: Not enough LINK to run VRF.\\\");\\n        requestRandomness(_vrfKeyHash, _vrfLinkFee);\\n    }\\n\\n    /**\\n     * @dev Callback function used by the VRF Coordinator, that will update the seed,\\n     * and lock the supply in the process (See {tokenSupplyLocked()})\\n     */\\n    function fulfillRandomness(bytes32, uint256 randomness) internal override {\\n        if (!tokenSupplyLocked()) {\\n            // finalize the supply lock by setting the randomness to a non-null value\\n            _randomSeed = randomness;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tells whether or not the token supply is locked.\\n     */\\n    function tokenSupplyLocked() public view returns (bool) {\\n        return _randomSeed != 0;\\n    }\\n\\n    /**\\n     * @dev The size of the remaining supply.\\n     */\\n    function remainingSupplyCount() public view returns (uint256) {\\n        return _availableTokenHashes.length();\\n    }\\n\\n\\n    /* ================================================== MINTING ================================================== */\\n\\n    /**\\n     * @dev Minting function for a single token\\n     * \\n     * Parameters:\\n     *  - to: the address that will recieve the newly minted tokens \\n     * \\n     * Requirements:\\n     *  - The token supply must be locked.\\n     *  - The quantity needs to be <= The remaining supply.\\n     * \\n     */\\n    function _mintToken(address to) internal onlyTokenSupplyLocked returns (uint256) {\\n        require(remainingSupplyCount() >= 1, \\\"TokenMintingPool: Not enough tokens left.\\\");\\n        uint256 index = _randomSeed % remainingSupplyCount();\\n        bytes32 tokenHash = _availableTokenHashes.at(index);\\n        uint256 mintedTokenId = tokenRegistry.mintToken(to, tokenHash);\\n        _availableTokenHashes.remove(tokenHash);\\n        return mintedTokenId;\\n    }\\n\\n    /**\\n     * @dev Minting function for multiple tokens\\n     * \\n     * Parameters:\\n     *  - to: the address that will recieve the newly minted tokens \\n     *  - quantity: the quantity of tokens to mint\\n     * \\n     * Requirements:\\n     *  - The token supply must be locked.\\n     *  - The quantity needs to be <= The remaining supply.\\n     * \\n     */\\n    function _mintTokens(address to, uint256 quantity) internal onlyTokenSupplyLocked returns (uint256[] memory) {\\n        require(remainingSupplyCount() >= quantity, \\\"TokenMintingPool: Not enough tokens left.\\\");\\n        uint256[] memory mintedTokenIds = new uint256[](quantity);\\n        for (uint ii = 0 ; ii < quantity ; ii++) {\\n            mintedTokenIds[ii] = _mintToken(to);\\n        }\\n        return mintedTokenIds;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/metatx/ERC2771Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771Context is Context {\\n    address private _trustedForwarder;\\n\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/registry/ITokenRegistry.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: \u00a9 Courtyard Inc. (https://courtyard.io)\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title {ITokenRegistry} is an interface for a token registry.\\n */\\ninterface ITokenRegistry is IERC165 {\\n\\n    /**\\n     * @dev mint a new token to {to}, and return the token id of the newly minted token. Upon minting a token, it is\\n     * required to provide the {proofOfIntegrity} of integrity of the token. \\n     * \\n     * The proof of integrity uniquely identifies the token and is used to guarantee the integrity of the token at all times.\\n     * \\n     * Use-case: for a token representing a physical asset, {proofOfIntegrity} is a hash of the information that uniquely\\n     * identifies the physical asset in the physical world. \\n     */\\n    function mintToken(address to, bytes32 proofOfIntegrity) external returns (uint256);\\n\\n    /**\\n     * @dev mint a batch of new tokens to {to} if possible, and return the count of successfully minted tokens.\\n     */\\n    function mintTokenBatch(address[] calldata receivers, bytes32[] calldata proofsOfIntegrity) external returns (uint256);\\n\\n    /**\\n     * @dev burn a token. The calling burner account or contract should be approved to manipulate the token.\\n     * \\n     * To prevent mistakes from happening, an implementation of {burnToken} should add a safeguard so that only an\\n     * account that is allowed to burn tokens AND is approved to maniputate the token should be able to call this\\n     * function.\\n     */\\n    function burnToken(bytes32 proofOfIntegrity) external returns (bool);\\n\\n    /**\\n     * @dev burn a batch of tokens and return the number of tokens successfully burned that way.\\n     */\\n    function burnTokenBatch(bytes32[] calldata proofsOfIntegrity) external returns (uint256);\\n\\n}\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface internal immutable LINK;\\n  address private immutable vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\\n    private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(address _vrfCoordinator, address _link) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  ) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"PaymentReceiverAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mintedToAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mintedTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedTokenId\",\"type\":\"uint256\"}],\"name\":\"TokenMintedForGiveaway\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mintedToAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mintedTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchasedAndMinted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"addressHashes\",\"type\":\"bytes32[]\"}],\"name\":\"addAddressesToPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"tokenHashes\",\"type\":\"bytes32[]\"}],\"name\":\"addTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dropIsLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dropStateIsPresale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dropStateIsPublicSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"hasPresaleAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPerTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"mintGiveawayTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestedQuantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"mintTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentReceiverAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestedQuantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permitFundsAndMintTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleIsOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleListCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleListLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleLockedUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleIsOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleLockedUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingSupplyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"addressHashes\",\"type\":\"bytes32[]\"}],\"name\":\"removeAddressesFromPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"tokenHashes\",\"type\":\"bytes32[]\"}],\"name\":\"removeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleHasEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleState\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRegistry\",\"outputs\":[{\"internalType\":\"contract ITokenRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSupplyLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockPublicSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintPrice\",\"type\":\"uint256\"}],\"name\":\"updateMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"}],\"name\":\"updatePaymentReceiverAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestampSeconds\",\"type\":\"uint256\"}],\"name\":\"updatePresaleLockedUntil\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestampSeconds\",\"type\":\"uint256\"}],\"name\":\"updatePublicSaleLockedUntil\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Drop_HappyHoloWeen", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}