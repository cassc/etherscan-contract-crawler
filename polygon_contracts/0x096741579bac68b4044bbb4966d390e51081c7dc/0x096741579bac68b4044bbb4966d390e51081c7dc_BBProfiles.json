{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BBProfiles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./BBErrorsV01.sol\\\";\\r\\nimport \\\"./interfaces/IBBProfiles.sol\\\";\\r\\n\\r\\ncontract BBProfiles is IBBProfiles {\\r\\n    event NewProfile(\\r\\n        uint256 profileId,\\r\\n        address owner,\\r\\n        address receiver,\\r\\n        string cid\\r\\n    );\\r\\n\\r\\n    event EditProfile(\\r\\n        uint256 profileId,\\r\\n        address owner,\\r\\n        address receiver,\\r\\n        string cid\\r\\n    );\\r\\n\\r\\n    struct Profile {\\r\\n        address owner;\\r\\n        address receiver;\\r\\n        string cid;\\r\\n    }\\r\\n\\r\\n    // Profile ID => Profile\\r\\n    mapping(uint256 => Profile) internal _profiles;\\r\\n\\r\\n    uint256 internal _totalProfiles;\\r\\n\\r\\n    // Owner => Index => Profile ID\\r\\n    mapping(address => mapping(uint256 => uint256)) private _ownedProfiles;\\r\\n    // Owner => Profile ID => Index\\r\\n    mapping(address => mapping(uint256 => uint256)) private _ownedProfilesIndexes;\\r\\n    // Owner => Total profiles owned\\r\\n    mapping(address => uint256) private _ownersTotalProfiles;\\r\\n\\r\\n    constructor() {\\r\\n\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        @dev Reverts if msg.sender is not profile IDs owner\\r\\n\\r\\n        @param Profile ID\\r\\n    */\\r\\n    modifier onlyProfileOwner(uint256 profileId) {\\r\\n        require(_profiles[profileId].owner == msg.sender, BBErrorCodesV01.NOT_OWNER);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        @dev Reverts if profile ID does not exist\\r\\n\\r\\n        @param Profile ID\\r\\n    */\\r\\n    modifier profileExists(uint256 profileId) {\\r\\n      require(profileId < _totalProfiles, BBErrorCodesV01.PROFILE_NOT_EXIST);\\r\\n      _;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        @notice Creates a new profile\\r\\n\\r\\n        @param Profile owner\\r\\n        @param Profiles revenue receiver\\r\\n        @param Profile CID\\r\\n\\r\\n        @return Instantiated profiles ID\\r\\n    */\\r\\n    function createProfile(address owner, address receiver, string calldata cid) external override returns(uint256 profileId) {\\r\\n        profileId = _totalProfiles;\\r\\n        \\r\\n        // Instantiate profile\\r\\n        _profiles[profileId] = Profile(owner, receiver, cid);\\r\\n\\r\\n        // Add profile ID to owners list of owned profiles\\r\\n        _ownedProfiles[owner][_ownersTotalProfiles[owner]] = profileId;\\r\\n        _ownedProfilesIndexes[owner][profileId] = _ownersTotalProfiles[owner];\\r\\n        _ownersTotalProfiles[owner]++;\\r\\n\\r\\n        // Increment total profiles\\r\\n        _totalProfiles++;\\r\\n\\r\\n        emit NewProfile(profileId, owner, receiver, cid);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        @notice Set an existing profiles variables\\r\\n\\r\\n        @param Profile ID\\r\\n        @param Profile owner\\r\\n        @param Profile revenue receiver\\r\\n        @param Profile CID\\r\\n    */\\r\\n    function editProfile(uint256 profileId, address owner, address receiver, string calldata cid) external override profileExists(profileId) onlyProfileOwner(profileId) {       \\r\\n        if (msg.sender != owner) {\\r\\n            // Remove ID from previous owners list of owned profiles\\r\\n            _ownedProfiles[msg.sender][_ownedProfilesIndexes[msg.sender][profileId]] = _ownedProfiles[msg.sender][_ownersTotalProfiles[msg.sender] - 1];\\r\\n            _ownedProfiles[msg.sender][_ownersTotalProfiles[msg.sender] - 1] = 0;\\r\\n            _ownedProfilesIndexes[msg.sender][profileId] = 0;\\r\\n            _ownersTotalProfiles[msg.sender]--;\\r\\n\\r\\n            // Add ID to new owners list of owned profiles\\r\\n            _ownedProfiles[owner][_ownersTotalProfiles[owner]] = profileId;\\r\\n            _ownedProfilesIndexes[owner][profileId] = _ownersTotalProfiles[owner];\\r\\n            _ownersTotalProfiles[owner]++;\\r\\n        }\\r\\n        \\r\\n        // Set profile variables\\r\\n        _profiles[profileId] = Profile(owner, receiver, cid);\\r\\n\\r\\n        emit EditProfile(profileId, owner, _profiles[profileId].receiver, cid);\\r\\n    } \\r\\n\\r\\n    /*\\r\\n        @notice Returns the total number of created profiles\\r\\n\\r\\n        @return Total number of profiles\\r\\n    */\\r\\n    function totalProfiles() view external override returns (uint256) {\\r\\n        return _totalProfiles;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        @notice Returns a profiles variables\\r\\n\\r\\n        @param Profile ID\\r\\n\\r\\n        @return Profile owner\\r\\n        @return Profile revenue receiver\\r\\n        @return Profile CID\\r\\n    */\\r\\n    function getProfile(uint256 profileId) view external override profileExists(profileId) returns (address, address, string memory) {\\r\\n        return (_profiles[profileId].owner, _profiles[profileId].receiver, _profiles[profileId].cid);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        @notice Get a list of all profile IDs owned by an address\\r\\n\\r\\n        @param Profile owner\\r\\n\\r\\n        @return Array of profile IDs owned by an address\\r\\n    */\\r\\n    function getOwnersProfiles(address owner) external view override returns (uint256[] memory) {\\r\\n        uint256[] memory profileIds = new uint256[](_ownersTotalProfiles[owner]);\\r\\n\\r\\n        for(uint256 i; i < _ownersTotalProfiles[owner]; i++) {\\r\\n            profileIds[i] = _ownedProfiles[owner][i];\\r\\n        }\\r\\n\\r\\n        return profileIds;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        @notice Returns the total number of profiles an address owns\\r\\n\\r\\n        @param Profile owner\\r\\n\\r\\n        @return Profile count\\r\\n    */\\r\\n    function ownersTotalProfiles(address owner) view external returns (uint256) {\\r\\n        return _ownersTotalProfiles[owner];\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IBBProfiles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface IBBProfiles {\\r\\n    function createProfile(address owner, address receiver, string calldata cid) external returns(uint256 profileId);\\r\\n    function editProfile(uint256 profileId, address owner, address receiver, string calldata cid) external; \\r\\n\\r\\n    function totalProfiles() external view returns (uint256 total);\\r\\n    function getProfile(uint256 profileId) external view returns (address owner, address receiver, string memory cid);\\r\\n\\r\\n    function getOwnersProfiles(address account) external view returns (uint256[] memory profileIds);\\r\\n    function ownersTotalProfiles(address owner) external view returns (uint256 total);\\r\\n}\"\r\n    },\r\n    \"contracts/BBErrorsV01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nlibrary BBErrorCodesV01 {\\r\\n    string public constant NOT_OWNER = \\\"1\\\";\\r\\n    string public constant OUT_OF_BOUNDS = \\\"2\\\";\\r\\n    string public constant NOT_SUBSCRIPTION_OWNER = \\\"3\\\";\\r\\n    string public constant POST_NOT_EXIST = \\\"4\\\";\\r\\n    string public constant PROFILE_NOT_EXIST = \\\"5\\\";\\r\\n    string public constant TIER_SET_NOT_EXIST = \\\"6\\\";\\r\\n    string public constant TIER_NOT_EXIST = \\\"7\\\";\\r\\n    string public constant SUBSCRIPTION_NOT_EXIST = \\\"8\\\";\\r\\n    string public constant ZERO_ADDRESS = \\\"9\\\";\\r\\n    string public constant SUBSCRIPTION_NOT_EXPIRED = \\\"10\\\";\\r\\n    string public constant SUBSCRIPTION_CANCELLED = \\\"11\\\";\\r\\n    string public constant UPKEEP_FAIL = \\\"12\\\";\\r\\n    string public constant INSUFFICIENT_PREPAID_GAS = \\\"13\\\";\\r\\n    string public constant INSUFFICIENT_ALLOWANCE = \\\"14\\\";\\r\\n    string public constant INSUFFICIENT_BALANCE = \\\"15\\\";\\r\\n    string public constant SUBSCRIPTION_ACTIVE = \\\"16\\\";\\r\\n    string public constant INVALID_LENGTH = \\\"17\\\";\\r\\n    string public constant UNSUPPORTED_CURRENCY = \\\"18\\\";\\r\\n    string public constant SUBSCRIPTION_PROFILE_ALREADY_EXISTS = \\\"19\\\";\\r\\n    string public constant INVALID_PRICE = \\\"20\\\";\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"EditProfile\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"NewProfile\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"createProfile\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"editProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getOwnersProfiles\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profileId\",\"type\":\"uint256\"}],\"name\":\"getProfile\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ownersTotalProfiles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalProfiles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BBProfiles", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c483ecba2a90fc38dd6b860158b5254c29cc061bf97dffdea25ec02481a32b92"}