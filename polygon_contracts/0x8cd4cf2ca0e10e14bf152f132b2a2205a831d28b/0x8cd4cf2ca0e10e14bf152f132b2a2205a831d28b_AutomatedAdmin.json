{"SourceCode": "// SPDX-License-Identifier: Apache 2.0\r\npragma solidity ^0.8.0;\r\n\r\n/// @title Partially-automated admin controls\r\n/// @author Peter T. Flynn\r\n/// @notice Allows for role-based permission control over individual functions in arbitrary,\r\n/// external contracts. Designed to be used as the \"owner\" of said external contracts.\r\n/// @dev Many of the \"getter\" functions are not meant to be called on-chain, and are for\r\n/// convenience only\r\ncontract AutomatedAdmin {\r\n\r\n\t// Up to eight different roles to which users may be assigned. Three are built-in, while\r\n\t// five more are available for creation. Built-in role indices are as follows:\r\n\t//\tAdmin \t\t=> \t0\r\n\t//\tSafety\t\t=>\t1\r\n\t//\tAutomation\t=>\t2\r\n\tenum Roles {\r\n\t\tAdmin, Safety, Automation,\r\n\t\tUnnamed01, Unnamed02, Unnamed03, Unnamed04, Unnamed05 \r\n\t}\r\n\r\n\tstruct Slot0 {\r\n\t\t// Indicates whether [contractCall] is locked\r\n\t\tbool locked;\r\n\t\t// A bitmap indicating which roles are enabled versus disabled\r\n\t\tbytes1 roleMap;\r\n\t\t// The number of users currently assigned the [Admin] role\r\n\t\tuint240 adminCount;\r\n\t}\r\n\r\n\tstruct Transaction {\r\n\t\t// The address which queued the transaction\r\n\t\taddress addressCreator;\r\n\t\t// The address to call\r\n\t\taddress addressTo;\r\n\t\t// The wei to be sent\r\n\t\tuint value;\r\n\t\t// The data to be sent in the call\r\n\t\tbytes data;\r\n\t\t// A human-legible description of the transaction\r\n\t\tstring description;\r\n\t}\r\n\r\n\t// Bitmaps corresponding to a role, or multiple roles. For readability.\r\n\tbytes1 constant ADMIN = 0x01;\r\n\tbytes1 constant ADMIN_AND_SAFETY = 0x03;\r\n\tbytes1 constant ADMIN_SAFETY_AND_AUTOMATION = 0x07;\r\n\r\n\t// Gas saving storage slot\r\n\tSlot0 private slot0;\r\n\t// Bitmaps corresponding to a given user's roles\r\n\tmapping(address => bytes1) private roles;\r\n\t// A bitmap corresponding to which roles are allowed to call the given function within the\r\n\t// given contract address\r\n\tmapping(address => mapping(bytes4 => bytes1)) private permissions;\r\n\t// A [Transaction] struct corresponding to a hash constructed from the transaction's info\r\n\tmapping(bytes32 => Transaction) private transactions;\r\n\t// Human-legible names for each role\r\n\tstring[8] private roleNames;\r\n\r\n\t/// @notice Emitted when the lock is engaged, or disengaged\r\n\t/// @param sender The transactor\r\n\t/// @param state [true] for locked, [false] for unlocked \r\n\tevent LockToggle(address indexed sender, bool state);\r\n\t/// @notice Emitted when a user is added to a role\r\n\t/// @param sender The transactor\r\n\t/// @param user The user added to the role\r\n\t/// @param role The index of the role\r\n\tevent RoleAdd(address indexed sender, address indexed user, Roles role);\r\n\t/// @notice Emitted when a user is removed from a role\r\n\t/// @param sender The transactor\r\n\t/// @param user The user removed from the role\r\n\t/// @param role The index of the role\r\n\tevent RoleRemove(address indexed sender, address indexed user, Roles role);\r\n\t/// @notice Emitted when a new role is created (enabled)\r\n\t/// @param sender The transactor\r\n\t/// @param role The index of the new role\r\n\t/// @param name The human-legible name for the role\r\n\tevent RoleCreate(address indexed sender, Roles role, string name);\r\n\t/// @notice Emitted when a role is destroyed (disabled)\r\n\t/// @param sender The transactor\r\n\t/// @param role The index of the role\r\n\tevent RoleDestroy(address indexed sender, Roles role);\r\n\t/// @notice Emitted when a role is renamed\r\n\t/// @param sender The transactor\r\n\t/// @param role The index of the role\r\n\t/// @param name The new name for the role\r\n\tevent RoleRename(address indexed sender, Roles role, string name);\r\n\t/// @notice Emitted when permissions are set for a contract's function\r\n\t/// @param sender The transactor\r\n\t/// @param _contract The address of the external contract where the function resides\r\n\t/// @param functionSig The four-byte function signature\r\n\t/// @param _roles An array of role indexes which are allowed to call this function\r\n\tevent SetPermissions(\r\n\t\taddress indexed sender,\r\n\t\taddress indexed _contract,\r\n\t\tbytes4 indexed functionSig,\r\n\t\tRoles[] _roles\r\n\t);\r\n\t/// @notice Emitted when an external contract is called\r\n\t/// @param sender The transactor\r\n\t/// @param _contract The address of the external contract\r\n\t/// @param value The wei sent to the contract\r\n\t/// @param data The data sent to the contract\r\n\tevent ContractCall(address indexed sender, address indexed _contract, uint value, bytes data);\r\n\t/// @notice Emitted when a transaction is queued\r\n\t/// @param sender The transactor\r\n\t/// @param _hash The keccak256 hash which corresponds to the stored transaction\r\n\t/// @param to The external address which the transaction will interact with\r\n\t/// @param value The wei to be sent to the address in the transaction\r\n\t/// @param data The data to be sent in the transaction\r\n\t/// @param description The human-legible description of the transaction\r\n\tevent TransactionQueue(\r\n\t\taddress indexed sender,\r\n\t\tbytes32 indexed _hash,\r\n\t\taddress indexed to,\r\n\t\tuint value,\r\n\t\tbytes data,\r\n\t\tstring description\r\n\t);\r\n\t/// @notice Emitted when a transaction is sent by an admin\r\n\t/// @dev Refer to the [TransactionQueue] event with the same [_hash] for transaction info\r\n\t/// @param sender The transactor\r\n\t/// @param _hash The keccak256 hash which corresponds to the stored transaction\r\n\tevent TransactionSend(\r\n\t\taddress indexed sender,\r\n\t\tbytes32 indexed _hash\r\n\t);\r\n\r\n\t/// @notice Returned when attempting to queue a transaction which is missing vital data, or\r\n\t/// when attempting to call a hash which is missing a corresponding transaction\r\n\t/// @param index The index within the hash array for the malformed transaction (if applicable)\r\n\terror BadTransaction(uint index);\r\n\t/// @notice Returned when a transaction fails within a batch call\r\n\t/// @param index The index within the hash array of the failed transaction\r\n\t/// @param returnData The data returned by the failed transaction\r\n\terror BatchCallFailed(uint index, bytes returnData);\r\n\t/// @notice Returned when a contractCall() fails\r\n\t/// @param returnData The data returned by the failed transaction\r\n\terror CallFailed(bytes returnData);\r\n\t/// @notice Returns when an [Admin] attempts to remove their own address as an [Admin], and they\r\n\t/// are the only [Admin]\r\n\terror CannotRemoveLastAdmin();\r\n\t/// @notice Returns when a transaction was not supplied with the value required\r\n\t/// @param expected The amount of wei required\r\n\t/// @param given The amount of wei given\r\n\terror DifferentValue(uint expected, uint given);\r\n\t/// @notice Returned when the [Admin] has locked contract calls\r\n\terror Locked();\r\n\t/// @notice Returned when the requested change is invalid\r\n\terror NoChange();\r\n\t/// @notice Returned when the caller is not allowed to call the specific function\r\n\terror NotAuthorized();\r\n\t/// @notice Returned when a batch of transactions were not supplied with sufficient wei\r\n\terror NotEnoughValue();\r\n\t/// @notice Returned when an [Admin] attempts to modify a built-in role\r\n\terror PermanentRole();\r\n\r\n\t// Reverts when the caller does not have one of the required roles\r\n\tmodifier canCall(bytes1 _roles) {\r\n\t\tif (_roles & roles[msg.sender] == 0)\r\n\t\t\trevert NotAuthorized();\r\n\t\t_;\r\n\t}\r\n\r\n\t// Constructs the built-in roles, and assigns the [msg.sender] to the [Admin] role\r\n\tconstructor() {\r\n\t\tslot0.roleMap = ADMIN_SAFETY_AND_AUTOMATION;\r\n\t\tslot0.adminCount = 1;\r\n\t\troleNames[0] = \"Admin\";\r\n\t\troleNames[1] = \"Safety\";\r\n\t\troleNames[2] = \"Automation\";\r\n\t\troles[msg.sender] = ADMIN;\r\n\t}\r\n\r\n\t/// @notice Locks the contractCall() function, such that it cannot be called\r\n\tfunction lock() external canCall(ADMIN_SAFETY_AND_AUTOMATION) {\r\n\t\tslot0.locked = true;\r\n\t\temit LockToggle(msg.sender, true);\r\n\t}\r\n\r\n\t/// @notice Unlocks the contractCall() function, such that it will now obey set permissions\r\n\tfunction unlock() external canCall(ADMIN) {\r\n\t\tslot0.locked = false;\r\n\t\temit LockToggle(msg.sender, false);\r\n\t}\r\n\r\n\t/// @notice Adds the given user to the given role\r\n\t/// @param user The user to be added to the role\r\n\t/// @param role The index of the role to add the user to\r\n\tfunction roleAdd(address user, Roles role) external canCall(ADMIN) {\r\n\t\tif (role == Roles.Admin && roles[user] & 0x01 == 0)\r\n\t\t\tslot0.adminCount++;\r\n\t\troles[user] |= bytes1(0x01) << uint(role);\r\n\t\temit RoleAdd(msg.sender, user, role);\r\n\t}\r\n\r\n\t/// @notice Removes the given user from the given role\r\n\t/// @param user The user to removed from the role\r\n\t/// @param role The index of the role to remove the user from\r\n\tfunction roleRemove(address user, Roles role) external canCall(ADMIN) {\r\n\t\tSlot0 memory _slot0 = slot0;\r\n\t\tif (role == Roles.Admin) {\r\n\t\t\tif (_slot0.adminCount == 1)\r\n\t\t\t\trevert CannotRemoveLastAdmin();\r\n\t\t\tif (roles[user] & ADMIN != 0)\r\n\t\t\t\t_slot0.adminCount--;\r\n\t\t}\r\n\t\troles[user] ^= bytes1(0x01) << uint(role);\r\n\t\tslot0 = _slot0;\r\n\t\temit RoleAdd(msg.sender, user, role);\r\n\t}\r\n\r\n\t/// @notice Enables, and names a new role\r\n\t/// @param role The index of the role to enable\r\n\t/// @param name A human-legible name for the role (not used programmatically)\r\n\tfunction roleCreate(Roles role, string calldata name) external canCall(ADMIN) {\r\n\t\tif (uint8(role) < 3)\r\n\t\t\trevert PermanentRole();\r\n\t\tbytes1 roleNew = bytes1(0x01) << uint(role);\r\n\t\tif (slot0.roleMap & roleNew != 0)\r\n\t\t\trevert NoChange();\r\n\t\tslot0.roleMap |= roleNew;\r\n\t\troleNames[uint(role)] = name;\r\n\t\temit RoleCreate(msg.sender, role, name);\r\n\t}\r\n\r\n\t/// @notice Disables a role, making it ineligible for function permissions\r\n\t/// @param role The index of the role to disable\r\n\tfunction roleDestroy(Roles role) external canCall(ADMIN) {\r\n\t\tif (uint8(role) < 3)\r\n\t\t\trevert PermanentRole();\r\n\t\tdelete roleNames[uint(role)];\r\n\t\tslot0.roleMap ^= bytes1(0x01) << uint(role);\r\n\t\temit RoleDestroy(msg.sender, role);\r\n\t}\r\n\r\n\t/// @notice Renames a role. This has no effect on contract operation, and is for convenience\r\n\t/// only.\r\n\t/// @param role The index of the role to rename\r\n\t/// @param name The new name for the role\r\n\tfunction roleRename(Roles role, string calldata name) external  canCall(ADMIN) {\r\n\t\tif (uint8(role) < 3)\r\n\t\t\trevert PermanentRole();\r\n\t\tif ((bytes1(0x01) << uint(role)) & slot0.roleMap == 0)\r\n\t\t\trevert NoChange();\r\n\t\troleNames[uint(role)] = name;\r\n\t\temit RoleRename(msg.sender, role, name);\r\n\t}\r\n\r\n\t/// @notice Sets the roles which are allowed to call a given function, within a given contract.\r\n\t/// The contract is designated by its address, and the function is designated by its four-byte\r\n\t/// signature.\r\n\t/// @param _contract The address of the contract\r\n\t/// @param functionSig The four-byte signature of the function\r\n\t/// @param _roles An array of role indices which are granted the ability to call the function\r\n\tfunction setPermissions(\r\n\t\taddress _contract,\r\n\t\tbytes4 functionSig,\r\n\t\tRoles[] calldata _roles\r\n\t) external canCall(ADMIN) {\r\n\t\tpermissions[_contract][functionSig] = rolesToBits(_roles);\r\n\t\temit SetPermissions(msg.sender, _contract, functionSig, _roles);\r\n\t}\r\n\r\n\t/// @notice Calls the given contract with the given data, acting as the AutomatedAdmin contract.\r\n\t/// Only allows the call if the user has the appropriate permissions for the given function.\r\n\t/// @dev All transaction value is passed through. Function signature is read from [data].\r\n\t/// @param _contract The address of the contract to call\r\n\t/// @param data The data to pass to the call\r\n\tfunction contractCall(\r\n\t\taddress _contract,\r\n\t\tbytes calldata data\r\n\t) payable external returns (bytes memory) {\r\n\t\tSlot0 memory _slot0 = slot0;\r\n\t\tif (_slot0.locked)\r\n\t\t\trevert Locked();\r\n\t\tbytes4 selector;\r\n\t\tassembly {\r\n\t\t\tselector := calldataload(data.offset)\r\n\t\t}\r\n\t\tif (roles[msg.sender] & _slot0.roleMap & permissions[_contract][selector] == 0)\r\n\t\t\tonlyAdmin();\r\n\t\t(bool success, bytes memory returnData) = _contract.call{value: msg.value}(data);\r\n\t\tif (!success)\r\n\t\t\trevert CallFailed(returnData);\r\n\t\temit ContractCall(msg.sender, _contract, msg.value, data);\r\n\t\treturn returnData;\r\n\t}\r\n\r\n\t/// @notice Allows any user in the [Admin], [Safety], or [Automation] roles to queue arbitrary\r\n\t/// transactions. A hash is returned which is used to call the transaction later. Storing\r\n\t/// transactions in this fashion is highly gas-inefficient, but is very convenient for [Admin]s\r\n\t/// who are less versed in the blockchain than some of their team members.\r\n\t/// @dev The hash is returned, but is also stored in an event for easy retrieval\r\n\t/// @param to The address to send the queued transaction to\r\n\t/// @param value The wei required by the queued transaction\r\n\t/// @param data The data to be sent in the queued transaction\r\n\t/// @param description A human-legible description of the transaction's purpose, and action(s)\r\n\t/// (not used programmatically)\r\n\t/// @return _hash A hash which corresponds to the transaction in storage. The queued\r\n\t/// transaction is referred to by this hash from here on out.\r\n\tfunction transactionQueue(\r\n\t\taddress to,\r\n\t\tuint value,\r\n\t\tbytes calldata data,\r\n\t\tstring calldata description\r\n\t) external canCall(ADMIN_SAFETY_AND_AUTOMATION) returns (bytes32 _hash) {\r\n\t\tif (to == address(0) || (data.length == 0 && value == 0))\r\n\t\t\trevert BadTransaction(0);\r\n\t\t_hash = keccak256(abi.encodePacked(to,value,data));\r\n\t\ttransactions[_hash] = Transaction(msg.sender, to, value, data, description);\r\n\t\temit TransactionQueue(msg.sender, _hash, to, value, data, description);\r\n\t}\r\n\r\n\t/// @notice Allows the [Admin] role to send a pre-queued transaction\r\n\t/// @dev Stored transactions are deleted after sending, successful or not\r\n\t/// @param _hash The hash for the transaction, given when it was queued\r\n\t/// @return success Whether the transaction completed successfully\r\n\t/// @return returnData The data returned by the contract call (may be empty)\r\n\tfunction transactionSend(\r\n\t\tbytes32 _hash\r\n\t) payable external canCall(ADMIN) returns (bool success, bytes memory returnData) {\r\n\t\tTransaction memory _tx = transactions[_hash];\r\n\t\tif (_tx.addressCreator == address(0))\r\n\t\t\trevert BadTransaction(0);\r\n\t\tif (msg.value != _tx.value)\r\n\t\t\trevert DifferentValue(_tx.value, msg.value);\r\n\t\t(success, returnData) = _tx.addressTo.call{value: _tx.value}(_tx.data);\r\n\t\tdelete transactions[_hash];\r\n\t\temit TransactionSend(msg.sender, _hash);\r\n\t}\r\n\r\n\t/// @notice Allows the [Admin] role to send a batch of pre-queued transactions in sequence\r\n\t/// @dev Stored transactions are deleted, only if all transactions are successful\r\n\t/// @param hashes An array of hashes corresponding to stored transactions\r\n\t/// @return returnData An array of data, corresponding to what was returned by each\r\n\t/// transaction, in order\r\n\tfunction transactionSendBatch(\r\n\t\tbytes32[] calldata hashes\r\n\t) payable external canCall(ADMIN) returns (bytes[] memory returnData) {\r\n\t\treturnData = new bytes[](hashes.length);\r\n\t\tuint remainingValue = msg.value;\r\n\t\tTransaction memory _tx;\r\n\t\tfor (uint i; i < hashes.length;) {\r\n\t\t\t_tx = transactions[hashes[i]];\r\n\t\t\tif (_tx.addressCreator == address(0))\r\n\t\t\t\trevert BadTransaction(i);\r\n\t\t\tif (remainingValue < _tx.value)\r\n\t\t\t\trevert NotEnoughValue();\r\n\t\t\t(bool success, bytes memory _returnData) =\r\n\t\t\t\t_tx.addressTo.call{value: _tx.value}(_tx.data);\r\n\t\t\tif (!success)\r\n\t\t\t\trevert BatchCallFailed(i, _returnData);\r\n\t\t\treturnData[i] = _returnData;\r\n\t\t\tdelete transactions[hashes[i]];\r\n\t\t\temit TransactionSend(msg.sender, hashes[i]);\r\n\t\t\tunchecked {\r\n\t\t\t\tremainingValue -= _tx.value;\r\n\t\t\t\t++i;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/// @notice Returns whether the given address has permission to call the given function within\r\n\t/// the given contract\r\n\t/// @param user The address of the user to get permissions for\r\n\t/// @param _contract The address of the contract where the function resides\r\n\t/// @param functionSig The four-byte signature of the function\r\n\t/// @return bool [true] if the address has permission to call the function, otherwise [false]\r\n\tfunction getCallable(\r\n\t\taddress user,\r\n\t\taddress _contract,\r\n\t\tbytes4 functionSig\r\n\t) external view returns (bool) {\r\n\t\tbytes1 _roles = roles[user] & slot0.roleMap;\r\n\t\tif (_roles & 0x01 != 0)\r\n\t\t\treturn true;\r\n\t\treturn permissions[_contract][functionSig] & _roles != 0;\r\n\t}\r\n\r\n\t/// @notice Given a queued transaction's hash, retrieve all its info\r\n\t/// @param _hash The queued transaction's hash\r\n\t/// @return Transaction A struct, representing all information about a queued transaction\r\n\tfunction getTransaction(bytes32 _hash) external view returns (Transaction memory) {\r\n\t\treturn transactions[_hash];\r\n\t}\r\n\r\n\t/// @notice Returns a human-legible list of roles\r\n\t/// @dev Meant to be called off-chain\r\n\t/// @return string A list of roles\r\n\tfunction getRolesList() external view returns (string memory) {\r\n\t\treturn string.concat(\" Roles available are: \", roleBitsToString(0xFF), \".\");\r\n\t}\r\n\r\n\t/// @notice Returns a human-legible list of roles which have permission to call the given\r\n\t/// function within the given contract\r\n\t/// @dev Meant to be called off-chain\r\n\t/// @param _contract The address of the contract where the function resides\r\n\t/// @param functionSig The four-byte signature of the function\r\n\t/// @return string A list of roles\r\n\tfunction getPermissions(\r\n\t\taddress _contract,\r\n\t\tbytes4 functionSig\r\n\t) external view returns (string memory) {\r\n\t\treturn string.concat(\r\n\t\t\t\" This function can be called by: \",\r\n\t\t\troleBitsToString(permissions[_contract][functionSig]),\r\n\t\t\t\".\"\r\n\t\t);\r\n\t}\r\n\r\n\t/// @notice Returns a human-legible list of roles which the given user has been added to\r\n\t/// @dev Meant to be called off-chain\r\n\t/// @param user The address of the user in question\r\n\t/// @return list The list of roles\r\n\tfunction getRolesUser(address user) external view returns (string memory list) {\r\n\t\tlist = \" User's roles are: \";\r\n\t\tbytes1 _roles = roles[user] & slot0.roleMap;\r\n\t\tbool anyRole = false;\r\n\t\tfor (uint i; i < 8;) {\r\n\t\t\tif (_roles & 0x01 != 0) {\r\n\t\t\t\tif (_roles >> 1 == 0) {\r\n\t\t\t\t\tif (anyRole)\r\n\t\t\t\t\t\treturn string.concat(\r\n\t\t\t\t\t\t\tlist, 'and \"', roleNames[i],\r\n\t\t\t\t\t\t\t'\" [', roleToIndexString(uint8(i)), \"].\"\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\treturn string.concat(\r\n\t\t\t\t\t\t\" User's role is: \\\"\", roleNames[i],\r\n\t\t\t\t\t\t'\" [', roleToIndexString(uint8(i)), \"].\"\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\tlist = string.concat(\r\n\t\t\t\t\tlist, '\"', roleNames[i], '\" [', roleToIndexString(uint8(i)), \"], \"\r\n\t\t\t\t);\r\n\t\t\t\tanyRole = true;\r\n\t\t\t}\r\n\t\t\t_roles >>= 1;\r\n\t\t\tunchecked {\r\n\t\t\t\t++i;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Function only for readability's sake, in a situation where clarity is important\r\n\tfunction onlyAdmin() private view {\r\n\t\tif (roles[msg.sender] & ADMIN == 0)\r\n\t\t\trevert NotAuthorized();\r\n\t}\r\n\r\n\t// Should only be used in functions meant to be called off-chain\r\n\tfunction roleBitsToString(bytes1 _roles) private view returns (string memory list) {\r\n\t\t_roles &= slot0.roleMap;\r\n\t\t_roles >>= 1;\r\n\t\tlist = \"the \";\r\n\t\tbool _onlyAdmin = true;\r\n\t\tstring memory thisRole = '\"Admin\" [0]';\r\n\t\tfor (uint i = 1; i < 8;) {\r\n\t\t\tif (_roles & 0x01 != 0) {\r\n\t\t\t\tlist = string.concat(list, thisRole, \", \");\r\n\t\t\t\tthisRole = string.concat(\r\n\t\t\t\t\t'\"', roleNames[i], '\" [', roleToIndexString(uint8(i)), \"]\"\r\n\t\t\t\t);\r\n\t\t\t\t_onlyAdmin = false;\r\n\t\t\t}\r\n\t\t\t_roles >>= 1;\r\n\t\t\tunchecked {\r\n\t\t\t\t++i;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (_onlyAdmin) {\r\n\t\t\treturn 'the \"Admin\" [0], and nobody else';\r\n\t\t}\r\n\t\tlist = string.concat(list, 'and ', thisRole);\r\n\t}\r\n\r\n\t// Takes an array of role indices and generates a bitmap which can be compared\r\n\t// to [slot0.roleMap]\r\n\tfunction rolesToBits(Roles[] calldata _roles) private pure returns (bytes1 bitMap) {\r\n\t\tfor (uint i; i < _roles.length;) {\r\n\t\t\tbitMap |= bytes1(0x01) << uint8(_roles[i]);\r\n\t\t\tunchecked {\r\n\t\t\t\t++i;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Should only be used in functions meant to be called off-chain\r\n\tfunction roleToIndexString(uint8 role) private pure returns (string memory) {\r\n\t\tbytes memory index = new bytes(1);\r\n\t\tindex[0] = bytes1(uint8(0x0030) + role);\r\n\t\treturn string(index);\r\n\t}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"BadTransaction\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"BatchCallFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"CallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotRemoveLastAdmin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"given\",\"type\":\"uint256\"}],\"name\":\"DifferentValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Locked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PermanentRole\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ContractCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"LockToggle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum AutomatedAdmin.Roles\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"RoleAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum AutomatedAdmin.Roles\",\"name\":\"role\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"RoleCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum AutomatedAdmin.Roles\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"RoleDestroy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum AutomatedAdmin.Roles\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"RoleRemove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum AutomatedAdmin.Roles\",\"name\":\"role\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"RoleRename\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"functionSig\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"enum AutomatedAdmin.Roles[]\",\"name\":\"_roles\",\"type\":\"uint8[]\"}],\"name\":\"SetPermissions\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"TransactionQueue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"TransactionSend\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"contractCall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"functionSig\",\"type\":\"bytes4\"}],\"name\":\"getCallable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"functionSig\",\"type\":\"bytes4\"}],\"name\":\"getPermissions\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRolesList\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getRolesUser\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"list\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"getTransaction\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addressCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addressTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct AutomatedAdmin.Transaction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"enum AutomatedAdmin.Roles\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"roleAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum AutomatedAdmin.Roles\",\"name\":\"role\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"roleCreate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum AutomatedAdmin.Roles\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"roleDestroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"enum AutomatedAdmin.Roles\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"roleRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum AutomatedAdmin.Roles\",\"name\":\"role\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"roleRename\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"functionSig\",\"type\":\"bytes4\"},{\"internalType\":\"enum AutomatedAdmin.Roles[]\",\"name\":\"_roles\",\"type\":\"uint8[]\"}],\"name\":\"setPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"transactionQueue\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"transactionSend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"hashes\",\"type\":\"bytes32[]\"}],\"name\":\"transactionSendBatch\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AutomatedAdmin", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://639ae0adebf88b0d69c9bd8b6ea9baa1c0989df1301289639b9e5cf4afb2a201"}