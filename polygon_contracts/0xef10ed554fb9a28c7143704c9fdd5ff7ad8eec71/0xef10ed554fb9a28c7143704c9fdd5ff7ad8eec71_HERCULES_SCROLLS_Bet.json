{"SourceCode": "// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/interfaces/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant NOT_ENTERED = 1;\r\n    uint256 private constant ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    /**\r\n     * @dev Unauthorized reentrant call.\r\n     */\r\n    error ReentrancyGuardReentrantCall();\r\n\r\n    constructor() {\r\n        _status = NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\r\n        if (_status == ENTERED) {\r\n            revert ReentrancyGuardReentrantCall();\r\n        }\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: Polygon_Betting.sol\r\n\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n\r\n\r\ncontract HERCULES_SCROLLS_Betting is Ownable,ReentrancyGuard{\r\n    uint256 public currentGameID;\r\n    struct Game {\r\n        uint256 game_id;\r\n        address player1;\r\n        address player2;\r\n        uint256 depositAmount;\r\n        uint256 GameBalance;\r\n    }\r\n    IERC20 public USDC;\r\n    address feeWallet;\r\n    mapping(uint256 => Game) game;\r\n    mapping(address => bool) hasUserClaimed;\r\n    uint256[] public gameList;\r\n    event MaticClaimed(\r\n        address indexed user,\r\n        uint256 amount\r\n    );\r\n    event Deposit(\r\n        uint256 indexed gameID,\r\n        address player1,\r\n        address player2,\r\n        uint256 depositAmout\r\n    );\r\n    event GameCreated(uint256 indexed gameID, address player1, address player2);\r\n    event WinnerSelected(uint256 indexed gameID, address winner);\r\n    event GameJoined(uint256 indexed gameID, address player1, address player2);\r\n    event GameCancelled(uint256 indexed gameID);\r\n     constructor(address _feeWallet, address _USDCAddress) Ownable(msg.sender) {\r\n        require(_feeWallet != address(0),\"Fee wallet address cannot be zero\");\r\n        USDC = IERC20(_USDCAddress);\r\n       \r\n        feeWallet = _feeWallet;\r\n        currentGameID = 0;\r\n    }\r\n    function sendMaticToUser(address _userAddress) external nonReentrant onlyOwner {\r\n        require(!hasUserClaimed[_userAddress],\"The user has already claimed the tokens\");\r\n        require(address(this).balance >= 50000000000000000,\"The contract has no Matic tokens\");\r\n\r\n        (bool success, ) = payable(_userAddress).call{value: 50000000000000000}(\"\");\r\n        require(success, \"Matic transfer to user failed\");\r\n\r\n        emit MaticClaimed(_userAddress,50000000000000000);\r\n        hasUserClaimed[_userAddress] = true;\r\n\r\n    }   \r\n    function createGameWithID(uint256 _depositAmount)\r\n        external nonReentrant\r\n        returns (uint256)\r\n    {\r\n        require(_depositAmount > 0,\"Deposit Amount must be greater then zero\");\r\n        uint256 tempGameid = currentGameID;\r\n        Game memory Newgame;\r\n        Newgame.game_id = tempGameid;\r\n        Newgame.player1 = address(msg.sender);\r\n        Newgame.player2 = address(0);\r\n        Newgame.depositAmount = _depositAmount;\r\n        game[tempGameid] = Newgame;\r\n        gameList.push(tempGameid);\r\n        currentGameID += 1;\r\n        emit GameCreated(tempGameid, address(msg.sender), address(0));\r\n\r\n        return tempGameid;\r\n    }\r\n\r\n    function joinGame(uint256 _gameID) external nonReentrant {\r\n        Game memory tempGame = game[_gameID];\r\n        require(tempGame.player2 == address(0), \"The Game has already started\");\r\n        require(tempGame.player1 != address(0), \"Game Does not exist\");\r\n        require(\r\n            tempGame.player1 != address(msg.sender),\r\n            \"Creator cannot join the game they started\"\r\n        );\r\n\r\n        tempGame.player2 = address(msg.sender);\r\n\r\n        game[_gameID] = (tempGame);\r\n\r\n        //Now Deposit the funds from both the players\r\n        \r\n        depositFunds(_gameID);\r\n        emit GameJoined(_gameID, tempGame.player1, tempGame.player2);\r\n    }\r\n\r\n    function getGame(uint256 _gameId) public view returns (Game memory) {\r\n        return game[_gameId];\r\n    }\r\n\r\n    function depositFunds(uint256 _gameId) internal {\r\n        Game memory _game = game[_gameId];\r\n        uint256 depositAmount = _game.depositAmount;\r\n        require(_game.game_id == _gameId, \"Game does not exist\");\r\n        //Need to check if the player 1 and 2 have required allowance or not?\r\n        require(\r\n            (USDC.allowance(_game.player1, address(this))) >= depositAmount,\r\n            \"Insufficent allowance for player 1\"\r\n        );\r\n        require(\r\n            (USDC.allowance(_game.player2, address(this))) >= depositAmount,\r\n            \"Insufficent allowance for player 2\"\r\n        );\r\n\r\n        _game.GameBalance += depositAmount * 2;\r\n        game[_gameId] = _game; //Update the game with the new data\r\n\r\n        bool deposit1Sucess = USDC.transferFrom(\r\n            _game.player1,\r\n            address(this),\r\n            depositAmount\r\n        );\r\n        bool deposit2Sucess = USDC.transferFrom(\r\n            _game.player2,\r\n            address(this),\r\n            depositAmount\r\n        );\r\n        \r\n        require(deposit1Sucess && deposit2Sucess, \"Deposit failed!\");\r\n        emit Deposit(_gameId, _game.player1, _game.player2, _game.GameBalance);\r\n    }\r\n\r\n    function SelectWinner(uint256 _gameId, address winner) external onlyOwner nonReentrant {\r\n        //add check so that if both of the users have deposited eth\r\n        Game memory _ThisGame = game[_gameId];\r\n\r\n        require(\r\n            winner == address(0) ||\r\n                _ThisGame.player1 == winner ||\r\n                _ThisGame.player2 == winner,\r\n            \"Winner address does not exist in this pool\"\r\n        );\r\n        require(_ThisGame.depositAmount > 0, \"Invalid Game\");\r\n        require(\r\n            _ThisGame.GameBalance > 0,\r\n            \"The users have not deposited any funds to the game\"\r\n        );\r\n\r\n        uint256 BetBalance = _ThisGame.depositAmount;\r\n        uint256 PoolBalance = _ThisGame.GameBalance;\r\n\r\n        if (winner == address(0)) {\r\n            //transfer the tokens to player 1 and player 2\r\n            \r\n            require(USDC.transfer(_ThisGame.player1, _ThisGame.depositAmount),\"Token not transfered to the smart contract\");\r\n            require(USDC.transfer(_ThisGame.player2, _ThisGame.depositAmount),\"Token not transfered to the smart contract \");\r\n            _ThisGame.depositAmount = 0;\r\n            _ThisGame.GameBalance = 0;\r\n            _ThisGame.player1 = address(0);\r\n            _ThisGame.player2 = address(0);\r\n            game[_gameId] = _ThisGame;\r\n            return;\r\n        }\r\n\r\n        uint256 FeeAmount = (BetBalance * 5) / 100;\r\n        uint256 winningAmount = PoolBalance - FeeAmount;\r\n\r\n        _ThisGame.depositAmount = 0;\r\n        _ThisGame.GameBalance = 0;\r\n        _ThisGame.player1 = address(0);\r\n        _ThisGame.player2 = address(0);\r\n        game[_gameId] = _ThisGame;\r\n        require(USDC.transfer(winner, winningAmount), \"Unable to transfer!\");\r\n        require(USDC.transfer(feeWallet, FeeAmount), \"Unable to transfer\");\r\n        emit WinnerSelected(_gameId, winner);\r\n    }\r\n\r\n    function cancelBet(uint256 _gameID) external onlyOwner {\r\n        \r\n        Game memory _ThisGame = game[_gameID];\r\n        require(_ThisGame.player2 == address(0),\"Player 2 has joined the game cannot cancel the game now\");\r\n        _ThisGame.player1 = address(0);\r\n        _ThisGame.player2 = address(0);\r\n        _ThisGame.depositAmount = 0;\r\n        _ThisGame.GameBalance = 0;\r\n        game[_gameID] = _ThisGame;\r\n        emit GameCancelled(_gameID);\r\n    }\r\n    receive() external payable { }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDCAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmout\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameID\",\"type\":\"uint256\"}],\"name\":\"GameCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"}],\"name\":\"GameCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"}],\"name\":\"GameJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MaticClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerSelected\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"SelectWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameID\",\"type\":\"uint256\"}],\"name\":\"cancelBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"}],\"name\":\"createGameWithID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentGameID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gameList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"getGame\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"game_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"GameBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct HERCULES_SCROLLS_Betting.Game\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameID\",\"type\":\"uint256\"}],\"name\":\"joinGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"sendMaticToUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HERCULES_SCROLLS_Betting", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a380c1a35512964717467450402d8a4afb2a7d5a0000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0b1f9de37feb97c27904a71f691bb7d2db59ba6b18c4195c4ca9f82010093170"}