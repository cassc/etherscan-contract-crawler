{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/SeaDrop.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport { ISeaDrop } from \\\"./interfaces/ISeaDrop.sol\\\";\\n\\nimport {\\n    INonFungibleSeaDropToken\\n} from \\\"./interfaces/INonFungibleSeaDropToken.sol\\\";\\n\\nimport {\\n    AllowListData,\\n    MintParams,\\n    PublicDrop,\\n    TokenGatedDropStage,\\n    TokenGatedMintParams,\\n    SignedMintValidationParams\\n} from \\\"./lib/SeaDropStructs.sol\\\";\\n\\nimport { SafeTransferLib } from \\\"lib/solmate/src/utils/SafeTransferLib.sol\\\";\\n\\nimport { ReentrancyGuard } from \\\"lib/solmate/src/utils/ReentrancyGuard.sol\\\";\\n\\nimport { IERC721 } from \\\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport {\\n    IERC165\\n} from \\\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport { ECDSA } from \\\"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nimport {\\n    MerkleProof\\n} from \\\"lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\n/**\\n * @title  SeaDrop\\n * @author James Wenzel (emo.eth)\\n * @author Ryan Ghods (ralxz.eth)\\n * @author Stephan Min (stephanm.eth)\\n * @notice SeaDrop is a contract to help facilitate ERC721 token drops\\n *         with functionality for public, allow list, server-side signed,\\n *         and token-gated drops.\\n */\\ncontract SeaDrop is ISeaDrop, ReentrancyGuard {\\n    using ECDSA for bytes32;\\n\\n    /// @notice Track the public drops.\\n    mapping(address => PublicDrop) private _publicDrops;\\n\\n    /// @notice Track the creator payout addresses.\\n    mapping(address => address) private _creatorPayoutAddresses;\\n\\n    /// @notice Track the allow list merkle roots.\\n    mapping(address => bytes32) private _allowListMerkleRoots;\\n\\n    /// @notice Track the allowed fee recipients.\\n    mapping(address => mapping(address => bool)) private _allowedFeeRecipients;\\n\\n    /// @notice Track the enumerated allowed fee recipients.\\n    mapping(address => address[]) private _enumeratedFeeRecipients;\\n\\n    /// @notice Track the parameters for allowed signers for server-side drops.\\n    mapping(address => mapping(address => SignedMintValidationParams))\\n        private _signedMintValidationParams;\\n\\n    /// @notice Track the signers for each server-side drop.\\n    mapping(address => address[]) private _enumeratedSigners;\\n\\n    /// @notice Track the used signature digests.\\n    mapping(bytes32 => bool) private _usedDigests;\\n\\n    /// @notice Track the allowed payers.\\n    mapping(address => mapping(address => bool)) private _allowedPayers;\\n\\n    /// @notice Track the enumerated allowed payers.\\n    mapping(address => address[]) private _enumeratedPayers;\\n\\n    /// @notice Track the token gated drop stages.\\n    mapping(address => mapping(address => TokenGatedDropStage))\\n        private _tokenGatedDrops;\\n\\n    /// @notice Track the tokens for token gated drops.\\n    mapping(address => address[]) private _enumeratedTokenGatedTokens;\\n\\n    /// @notice Track the redeemed token IDs for token gated drop stages.\\n    mapping(address => mapping(address => mapping(uint256 => bool)))\\n        private _tokenGatedRedeemed;\\n\\n    /// @notice Internal constants for EIP-712: Typed structured\\n    ///         data hashing and signing\\n    bytes32 internal constant _SIGNED_MINT_TYPEHASH =\\n        // prettier-ignore\\n        keccak256(\\n             \\\"SignedMint(\\\"\\n                \\\"address nftContract,\\\"\\n                \\\"address minter,\\\"\\n                \\\"address feeRecipient,\\\"\\n                \\\"MintParams mintParams,\\\"\\n                \\\"uint256 salt\\\"\\n            \\\")\\\"\\n            \\\"MintParams(\\\"\\n                \\\"uint256 mintPrice,\\\"\\n                \\\"uint256 maxTotalMintableByWallet,\\\"\\n                \\\"uint256 startTime,\\\"\\n                \\\"uint256 endTime,\\\"\\n                \\\"uint256 dropStageIndex,\\\"\\n                \\\"uint256 maxTokenSupplyForStage,\\\"\\n                \\\"uint256 feeBps,\\\"\\n                \\\"bool restrictFeeRecipients\\\"\\n            \\\")\\\"\\n        );\\n    bytes32 internal constant _MINT_PARAMS_TYPEHASH =\\n        // prettier-ignore\\n        keccak256(\\n            \\\"MintParams(\\\"\\n                \\\"uint256 mintPrice,\\\"\\n                \\\"uint256 maxTotalMintableByWallet,\\\"\\n                \\\"uint256 startTime,\\\"\\n                \\\"uint256 endTime,\\\"\\n                \\\"uint256 dropStageIndex,\\\"\\n                \\\"uint256 maxTokenSupplyForStage,\\\"\\n                \\\"uint256 feeBps,\\\"\\n                \\\"bool restrictFeeRecipients\\\"\\n            \\\")\\\"\\n        );\\n    bytes32 internal constant _EIP_712_DOMAIN_TYPEHASH =\\n        // prettier-ignore\\n        keccak256(\\n            \\\"EIP712Domain(\\\"\\n                \\\"string name,\\\"\\n                \\\"string version,\\\"\\n                \\\"uint256 chainId,\\\"\\n                \\\"address verifyingContract\\\"\\n            \\\")\\\"\\n        );\\n    bytes32 internal constant _NAME_HASH = keccak256(\\\"SeaDrop\\\");\\n    bytes32 internal constant _VERSION_HASH = keccak256(\\\"1.0\\\");\\n    uint256 internal immutable _CHAIN_ID = block.chainid;\\n    bytes32 internal immutable _DOMAIN_SEPARATOR;\\n\\n    /// @notice Constant for an unlimited `maxTokenSupplyForStage`.\\n    ///         Used in `mintPublic` where no `maxTokenSupplyForStage`\\n    ///         is stored in the `PublicDrop` struct.\\n    uint256 internal constant _UNLIMITED_MAX_TOKEN_SUPPLY_FOR_STAGE =\\n        type(uint256).max;\\n\\n    /// @notice Constant for a public mint's `dropStageIndex`.\\n    ///         Used in `mintPublic` where no `dropStageIndex`\\n    ///         is stored in the `PublicDrop` struct.\\n    uint256 internal constant _PUBLIC_DROP_STAGE_INDEX = 0;\\n\\n    /**\\n     * @notice Ensure only tokens implementing INonFungibleSeaDropToken can\\n     *         call the update methods.\\n     */\\n    modifier onlyINonFungibleSeaDropToken() virtual {\\n        if (\\n            !IERC165(msg.sender).supportsInterface(\\n                type(INonFungibleSeaDropToken).interfaceId\\n            )\\n        ) {\\n            revert OnlyINonFungibleSeaDropToken(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Constructor for the contract deployment.\\n     */\\n    constructor() {\\n        // Derive the domain separator.\\n        _DOMAIN_SEPARATOR = _deriveDomainSeparator();\\n    }\\n\\n    /**\\n     * @notice Mint a public drop.\\n     *\\n     * @param nftContract      The nft contract to mint.\\n     * @param feeRecipient     The fee recipient.\\n     * @param minterIfNotPayer The mint recipient if different than the payer.\\n     * @param quantity         The number of tokens to mint.\\n     */\\n    function mintPublic(\\n        address nftContract,\\n        address feeRecipient,\\n        address minterIfNotPayer,\\n        uint256 quantity\\n    ) external payable override {\\n        // Get the public drop data.\\n        PublicDrop memory publicDrop = _publicDrops[nftContract];\\n\\n        // Ensure that the drop has started.\\n        _checkActive(publicDrop.startTime, publicDrop.endTime);\\n\\n        // Put the mint price on the stack.\\n        uint256 mintPrice = publicDrop.mintPrice;\\n\\n        // Validate payment is correct for number minted.\\n        _checkCorrectPayment(quantity, mintPrice);\\n\\n        // Get the minter address.\\n        address minter = minterIfNotPayer != address(0)\\n            ? minterIfNotPayer\\n            : msg.sender;\\n\\n        // Ensure the payer is allowed if not the minter.\\n        if (minter != msg.sender) {\\n            if (!_allowedPayers[nftContract][msg.sender]) {\\n                revert PayerNotAllowed();\\n            }\\n        }\\n\\n        // Check that the minter is allowed to mint the desired quantity.\\n        _checkMintQuantity(\\n            nftContract,\\n            minter,\\n            quantity,\\n            publicDrop.maxTotalMintableByWallet,\\n            _UNLIMITED_MAX_TOKEN_SUPPLY_FOR_STAGE\\n        );\\n\\n        // Check that the fee recipient is allowed if restricted.\\n        _checkFeeRecipientIsAllowed(\\n            nftContract,\\n            feeRecipient,\\n            publicDrop.restrictFeeRecipients\\n        );\\n\\n        // Mint the token(s), split the payout, emit an event.\\n        _mintAndPay(\\n            nftContract,\\n            minter,\\n            quantity,\\n            mintPrice,\\n            _PUBLIC_DROP_STAGE_INDEX,\\n            publicDrop.feeBps,\\n            feeRecipient\\n        );\\n    }\\n\\n    /**\\n     * @notice Mint from an allow list.\\n     *\\n     * @param nftContract      The nft contract to mint.\\n     * @param feeRecipient     The fee recipient.\\n     * @param minterIfNotPayer The mint recipient if different than the payer.\\n     * @param quantity         The number of tokens to mint.\\n     * @param mintParams       The mint parameters.\\n     * @param proof            The proof for the leaf of the allow list.\\n     */\\n    function mintAllowList(\\n        address nftContract,\\n        address feeRecipient,\\n        address minterIfNotPayer,\\n        uint256 quantity,\\n        MintParams calldata mintParams,\\n        bytes32[] calldata proof\\n    ) external payable override {\\n        // Check that the drop stage is active.\\n        _checkActive(mintParams.startTime, mintParams.endTime);\\n\\n        // Put the mint price on the stack.\\n        uint256 mintPrice = mintParams.mintPrice;\\n\\n        // Validate payment is correct for number minted.\\n        _checkCorrectPayment(quantity, mintPrice);\\n\\n        // Get the minter address.\\n        address minter = minterIfNotPayer != address(0)\\n            ? minterIfNotPayer\\n            : msg.sender;\\n\\n        // Ensure the payer is allowed if not the minter.\\n        if (minter != msg.sender) {\\n            if (!_allowedPayers[nftContract][msg.sender]) {\\n                revert PayerNotAllowed();\\n            }\\n        }\\n\\n        // Check that the minter is allowed to mint the desired quantity.\\n        _checkMintQuantity(\\n            nftContract,\\n            minter,\\n            quantity,\\n            mintParams.maxTotalMintableByWallet,\\n            mintParams.maxTokenSupplyForStage\\n        );\\n\\n        // Check that the fee recipient is allowed if restricted.\\n        _checkFeeRecipientIsAllowed(\\n            nftContract,\\n            feeRecipient,\\n            mintParams.restrictFeeRecipients\\n        );\\n\\n        // Verify the proof.\\n        if (\\n            !MerkleProof.verify(\\n                proof,\\n                _allowListMerkleRoots[nftContract],\\n                keccak256(abi.encode(minter, mintParams))\\n            )\\n        ) {\\n            revert InvalidProof();\\n        }\\n\\n        // Mint the token(s), split the payout, emit an event.\\n        _mintAndPay(\\n            nftContract,\\n            minter,\\n            quantity,\\n            mintPrice,\\n            mintParams.dropStageIndex,\\n            mintParams.feeBps,\\n            feeRecipient\\n        );\\n    }\\n\\n    /**\\n     * @notice Mint with a server-side signature.\\n     *         Note that a signature can only be used once.\\n     *\\n     * @param nftContract      The nft contract to mint.\\n     * @param feeRecipient     The fee recipient.\\n     * @param minterIfNotPayer The mint recipient if different than the payer.\\n     * @param quantity         The number of tokens to mint.\\n     * @param mintParams       The mint parameters.\\n     * @param salt             The salt for the signed mint.\\n     * @param signature        The server-side signature, must be an allowed\\n     *                         signer.\\n     */\\n    function mintSigned(\\n        address nftContract,\\n        address feeRecipient,\\n        address minterIfNotPayer,\\n        uint256 quantity,\\n        MintParams calldata mintParams,\\n        uint256 salt,\\n        bytes calldata signature\\n    ) external payable override {\\n        // Check that the drop stage is active.\\n        _checkActive(mintParams.startTime, mintParams.endTime);\\n\\n        // Validate payment is correct for number minted.\\n        _checkCorrectPayment(quantity, mintParams.mintPrice);\\n\\n        // Get the minter address.\\n        address minter = minterIfNotPayer != address(0)\\n            ? minterIfNotPayer\\n            : msg.sender;\\n\\n        // Ensure the payer is allowed if not the minter.\\n        if (minter != msg.sender) {\\n            if (!_allowedPayers[nftContract][msg.sender]) {\\n                revert PayerNotAllowed();\\n            }\\n        }\\n\\n        // Check that the minter is allowed to mint the desired quantity.\\n        _checkMintQuantity(\\n            nftContract,\\n            minter,\\n            quantity,\\n            mintParams.maxTotalMintableByWallet,\\n            mintParams.maxTokenSupplyForStage\\n        );\\n\\n        // Check that the fee recipient is allowed if restricted.\\n        _checkFeeRecipientIsAllowed(\\n            nftContract,\\n            feeRecipient,\\n            mintParams.restrictFeeRecipients\\n        );\\n\\n        // Validate the signature in a block scope to avoid \\\"stack too deep\\\".\\n        {\\n            // Get the digest to verify the EIP-712 signature.\\n            bytes32 digest = _getDigest(\\n                nftContract,\\n                minter,\\n                feeRecipient,\\n                mintParams,\\n                salt\\n            );\\n\\n            // Ensure the digest has not already been used.\\n            if (_usedDigests[digest]) {\\n                revert SignatureAlreadyUsed();\\n            }\\n\\n            // Mark the digest as used.\\n            _usedDigests[digest] = true;\\n\\n            // Use the recover method to see what address was used to create\\n            // the signature on this data.\\n            // Note that if the digest doesn't exactly match what was signed we'll\\n            // get a random recovered address.\\n            address recoveredAddress = digest.recover(signature);\\n            _validateSignerAndParams(nftContract, mintParams, recoveredAddress);\\n        }\\n\\n        // Mint the token(s), split the payout, emit an event.\\n        _mintAndPay(\\n            nftContract,\\n            minter,\\n            quantity,\\n            mintParams.mintPrice,\\n            mintParams.dropStageIndex,\\n            mintParams.feeBps,\\n            feeRecipient\\n        );\\n    }\\n\\n    /**\\n     * @notice Enforce stored parameters for signed mints to mitigate\\n     *         the effects of a malicious signer.\\n     */\\n    function _validateSignerAndParams(\\n        address nftContract,\\n        MintParams memory mintParams,\\n        address signer\\n    ) internal view {\\n        SignedMintValidationParams\\n            memory signedMintValidationParams = _signedMintValidationParams[\\n                nftContract\\n            ][signer];\\n\\n        // Check that SignedMintValidationParams have been initialized; if not,\\n        // this is an invalid signer.\\n        if (signedMintValidationParams.maxMaxTotalMintableByWallet == 0) {\\n            revert InvalidSignature(signer);\\n        }\\n\\n        // Validate individual params.\\n        if (mintParams.mintPrice < signedMintValidationParams.minMintPrice) {\\n            revert InvalidSignedMintPrice(\\n                mintParams.mintPrice,\\n                signedMintValidationParams.minMintPrice\\n            );\\n        }\\n        if (\\n            mintParams.maxTotalMintableByWallet >\\n            signedMintValidationParams.maxMaxTotalMintableByWallet\\n        ) {\\n            revert InvalidSignedMaxTotalMintableByWallet(\\n                mintParams.maxTotalMintableByWallet,\\n                signedMintValidationParams.maxMaxTotalMintableByWallet\\n            );\\n        }\\n        if (mintParams.startTime < signedMintValidationParams.minStartTime) {\\n            revert InvalidSignedStartTime(\\n                mintParams.startTime,\\n                signedMintValidationParams.minStartTime\\n            );\\n        }\\n        if (mintParams.endTime > signedMintValidationParams.maxEndTime) {\\n            revert InvalidSignedEndTime(\\n                mintParams.endTime,\\n                signedMintValidationParams.maxEndTime\\n            );\\n        }\\n        if (\\n            mintParams.maxTokenSupplyForStage >\\n            signedMintValidationParams.maxMaxTokenSupplyForStage\\n        ) {\\n            revert InvalidSignedMaxTokenSupplyForStage(\\n                mintParams.maxTokenSupplyForStage,\\n                signedMintValidationParams.maxMaxTokenSupplyForStage\\n            );\\n        }\\n        if (mintParams.feeBps > signedMintValidationParams.maxFeeBps) {\\n            revert InvalidSignedFeeBps(\\n                mintParams.feeBps,\\n                signedMintValidationParams.maxFeeBps\\n            );\\n        }\\n        if (mintParams.feeBps < signedMintValidationParams.minFeeBps) {\\n            revert InvalidSignedFeeBps(\\n                mintParams.feeBps,\\n                signedMintValidationParams.minFeeBps\\n            );\\n        }\\n        if (!mintParams.restrictFeeRecipients) {\\n            revert SignedMintsMustRestrictFeeRecipients();\\n        }\\n    }\\n\\n    /**\\n     * @notice Mint as an allowed token holder.\\n     *         This will mark the token ids as redeemed and will revert if the\\n     *         same token id is attempted to be redeemed twice.\\n     *\\n     * @param nftContract      The nft contract to mint.\\n     * @param feeRecipient     The fee recipient.\\n     * @param minterIfNotPayer The mint recipient if different than the payer.\\n     * @param mintParams       The token gated mint params.\\n     */\\n    function mintAllowedTokenHolder(\\n        address nftContract,\\n        address feeRecipient,\\n        address minterIfNotPayer,\\n        TokenGatedMintParams calldata mintParams\\n    ) external payable override {\\n        // Get the minter address.\\n        address minter = minterIfNotPayer != address(0)\\n            ? minterIfNotPayer\\n            : msg.sender;\\n\\n        // Ensure the payer is allowed if not the minter.\\n        if (minter != msg.sender) {\\n            if (!_allowedPayers[nftContract][msg.sender]) {\\n                revert PayerNotAllowed();\\n            }\\n        }\\n\\n        // Put the allowedNftToken on the stack for more efficient access.\\n        address allowedNftToken = mintParams.allowedNftToken;\\n\\n        // Set the dropStage to a variable.\\n        TokenGatedDropStage memory dropStage = _tokenGatedDrops[nftContract][\\n            allowedNftToken\\n        ];\\n\\n        // Validate that the dropStage is active.\\n        _checkActive(dropStage.startTime, dropStage.endTime);\\n\\n        // Check that the fee recipient is allowed if restricted.\\n        _checkFeeRecipientIsAllowed(\\n            nftContract,\\n            feeRecipient,\\n            dropStage.restrictFeeRecipients\\n        );\\n\\n        // Put the mint quantity on the stack for more efficient access.\\n        uint256 mintQuantity = mintParams.allowedNftTokenIds.length;\\n\\n        // Validate payment is correct for number minted.\\n        _checkCorrectPayment(mintQuantity, dropStage.mintPrice);\\n\\n        // Check that the minter is allowed to mint the desired quantity.\\n        _checkMintQuantity(\\n            nftContract,\\n            minter,\\n            mintQuantity,\\n            dropStage.maxTotalMintableByWallet,\\n            dropStage.maxTokenSupplyForStage\\n        );\\n\\n        // Iterate through each allowedNftTokenId\\n        // to ensure it is not already redeemed.\\n        for (uint256 i = 0; i < mintQuantity; ) {\\n            // Put the tokenId on the stack.\\n            uint256 tokenId = mintParams.allowedNftTokenIds[i];\\n\\n            // Check that the minter is the owner of the allowedNftTokenId.\\n            if (IERC721(allowedNftToken).ownerOf(tokenId) != minter) {\\n                revert TokenGatedNotTokenOwner(\\n                    nftContract,\\n                    allowedNftToken,\\n                    tokenId\\n                );\\n            }\\n\\n            // Cache the storage pointer for cheaper access.\\n            mapping(uint256 => bool)\\n                storage redeemedTokenIds = _tokenGatedRedeemed[nftContract][\\n                    allowedNftToken\\n                ];\\n\\n            // Check that the token id has not already been redeemed.\\n            if (redeemedTokenIds[tokenId]) {\\n                revert TokenGatedTokenIdAlreadyRedeemed(\\n                    nftContract,\\n                    allowedNftToken,\\n                    tokenId\\n                );\\n            }\\n\\n            // Mark the token id as redeemed.\\n            redeemedTokenIds[tokenId] = true;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // Mint the token(s), split the payout, emit an event.\\n        _mintAndPay(\\n            nftContract,\\n            minter,\\n            mintQuantity,\\n            dropStage.mintPrice,\\n            dropStage.dropStageIndex,\\n            dropStage.feeBps,\\n            feeRecipient\\n        );\\n    }\\n\\n    /**\\n     * @notice Check that the drop stage is active.\\n     *\\n     * @param startTime The drop stage start time.\\n     * @param endTime   The drop stage end time.\\n     */\\n    function _checkActive(uint256 startTime, uint256 endTime) internal view {\\n        if (\\n            _cast(block.timestamp < startTime) |\\n                _cast(block.timestamp > endTime) ==\\n            1\\n        ) {\\n            // Revert if the drop stage is not active.\\n            revert NotActive(block.timestamp, startTime, endTime);\\n        }\\n    }\\n\\n    /**\\n     * @notice Check that the fee recipient is allowed.\\n     *\\n     * @param nftContract           The nft contract.\\n     * @param feeRecipient          The fee recipient.\\n     * @param restrictFeeRecipients If the fee recipients are restricted.\\n     */\\n    function _checkFeeRecipientIsAllowed(\\n        address nftContract,\\n        address feeRecipient,\\n        bool restrictFeeRecipients\\n    ) internal view {\\n        // Ensure the fee recipient is not the zero address.\\n        if (feeRecipient == address(0)) {\\n            revert FeeRecipientCannotBeZeroAddress();\\n        }\\n\\n        // Revert if the fee recipient is restricted and not allowed.\\n        if (restrictFeeRecipients)\\n            if (!_allowedFeeRecipients[nftContract][feeRecipient]) {\\n                revert FeeRecipientNotAllowed();\\n            }\\n    }\\n\\n    /**\\n     * @notice Check that the wallet is allowed to mint the desired quantity.\\n     *\\n     * @param nftContract              The nft contract.\\n     * @param minter                   The mint recipient.\\n     * @param quantity                 The number of tokens to mint.\\n     * @param maxTotalMintableByWallet The max allowed mints per wallet.\\n     * @param maxTokenSupplyForStage   The max token supply for the drop stage.\\n     */\\n    function _checkMintQuantity(\\n        address nftContract,\\n        address minter,\\n        uint256 quantity,\\n        uint256 maxTotalMintableByWallet,\\n        uint256 maxTokenSupplyForStage\\n    ) internal view {\\n        // Mint quantity of zero is not valid.\\n        if (quantity == 0) {\\n            revert MintQuantityCannotBeZero();\\n        }\\n\\n        // Get the mint stats.\\n        (\\n            uint256 minterNumMinted,\\n            uint256 currentTotalSupply,\\n            uint256 maxSupply\\n        ) = INonFungibleSeaDropToken(nftContract).getMintStats(minter);\\n\\n        // Ensure mint quantity doesn't exceed maxTotalMintableByWallet.\\n        if (quantity + minterNumMinted > maxTotalMintableByWallet) {\\n            revert MintQuantityExceedsMaxMintedPerWallet(\\n                quantity + minterNumMinted,\\n                maxTotalMintableByWallet\\n            );\\n        }\\n\\n        // Ensure mint quantity doesn't exceed maxSupply.\\n        if (quantity + currentTotalSupply > maxSupply) {\\n            revert MintQuantityExceedsMaxSupply(\\n                quantity + currentTotalSupply,\\n                maxSupply\\n            );\\n        }\\n\\n        // Ensure mint quantity doesn't exceed maxTokenSupplyForStage.\\n        if (quantity + currentTotalSupply > maxTokenSupplyForStage) {\\n            revert MintQuantityExceedsMaxTokenSupplyForStage(\\n                quantity + currentTotalSupply,\\n                maxTokenSupplyForStage\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Revert if the payment is not the quantity times the mint price.\\n     *\\n     * @param quantity  The number of tokens to mint.\\n     * @param mintPrice The mint price per token.\\n     */\\n    function _checkCorrectPayment(uint256 quantity, uint256 mintPrice)\\n        internal\\n        view\\n    {\\n        // Revert if the tx's value doesn't match the total cost.\\n        if (msg.value != quantity * mintPrice) {\\n            revert IncorrectPayment(msg.value, quantity * mintPrice);\\n        }\\n    }\\n\\n    /**\\n     * @notice Split the payment payout for the creator and fee recipient.\\n     *\\n     * @param nftContract  The nft contract.\\n     * @param feeRecipient The fee recipient.\\n     * @param feeBps       The fee basis points.\\n     */\\n    function _splitPayout(\\n        address nftContract,\\n        address feeRecipient,\\n        uint256 feeBps\\n    ) internal {\\n        // Revert if the fee basis points is greater than 10_000.\\n        if (feeBps > 10_000) {\\n            revert InvalidFeeBps(feeBps);\\n        }\\n\\n        // Get the creator payout address.\\n        address creatorPayoutAddress = _creatorPayoutAddresses[nftContract];\\n\\n        // Ensure the creator payout address is not the zero address.\\n        if (creatorPayoutAddress == address(0)) {\\n            revert CreatorPayoutAddressCannotBeZeroAddress();\\n        }\\n\\n        // msg.value has already been validated by this point, so can use it directly.\\n\\n        // If the fee is zero, just transfer to the creator and return.\\n        if (feeBps == 0) {\\n            SafeTransferLib.safeTransferETH(creatorPayoutAddress, msg.value);\\n            return;\\n        }\\n\\n        // Get the fee amount.\\n        // Note that the fee amount is rounded down in favor of the creator.\\n        uint256 feeAmount = (msg.value * feeBps) / 10_000;\\n\\n        // Get the creator payout amount. Fee amount is <= msg.value per above.\\n        uint256 payoutAmount;\\n        unchecked {\\n            payoutAmount = msg.value - feeAmount;\\n        }\\n\\n        // Transfer the fee amount to the fee recipient.\\n        if (feeAmount > 0) {\\n            SafeTransferLib.safeTransferETH(feeRecipient, feeAmount);\\n        }\\n\\n        // Transfer the creator payout amount to the creator.\\n        SafeTransferLib.safeTransferETH(creatorPayoutAddress, payoutAmount);\\n    }\\n\\n    /**\\n     * @notice Mints a number of tokens, splits the payment,\\n     *         and emits an event.\\n     *\\n     * @param nftContract    The nft contract.\\n     * @param minter         The mint recipient.\\n     * @param quantity       The number of tokens to mint.\\n     * @param mintPrice      The mint price per token.\\n     * @param dropStageIndex The drop stage index.\\n     * @param feeBps         The fee basis points.\\n     * @param feeRecipient   The fee recipient.\\n     */\\n    function _mintAndPay(\\n        address nftContract,\\n        address minter,\\n        uint256 quantity,\\n        uint256 mintPrice,\\n        uint256 dropStageIndex,\\n        uint256 feeBps,\\n        address feeRecipient\\n    ) internal nonReentrant {\\n        // Mint the token(s).\\n        INonFungibleSeaDropToken(nftContract).mintSeaDrop(minter, quantity);\\n\\n        if (mintPrice != 0) {\\n            // Split the payment between the creator and fee recipient.\\n            _splitPayout(nftContract, feeRecipient, feeBps);\\n        }\\n\\n        // Emit an event for the mint.\\n        emit SeaDropMint(\\n            nftContract,\\n            minter,\\n            feeRecipient,\\n            msg.sender,\\n            quantity,\\n            mintPrice,\\n            feeBps,\\n            dropStageIndex\\n        );\\n    }\\n\\n    /**\\n     * @dev Internal view function to get the EIP-712 domain separator. If the\\n     *      chainId matches the chainId set on deployment, the cached domain\\n     *      separator will be returned; otherwise, it will be derived from\\n     *      scratch.\\n     *\\n     * @return The domain separator.\\n     */\\n    function _domainSeparator() internal view returns (bytes32) {\\n        // prettier-ignore\\n        return block.chainid == _CHAIN_ID\\n            ? _DOMAIN_SEPARATOR\\n            : _deriveDomainSeparator();\\n    }\\n\\n    /**\\n     * @dev Internal view function to derive the EIP-712 domain separator.\\n     *\\n     * @return The derived domain separator.\\n     */\\n    function _deriveDomainSeparator() internal view returns (bytes32) {\\n        // prettier-ignore\\n        return keccak256(\\n            abi.encode(\\n                _EIP_712_DOMAIN_TYPEHASH,\\n                _NAME_HASH,\\n                _VERSION_HASH,\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Returns the public drop data for the nft contract.\\n     *\\n     * @param nftContract The nft contract.\\n     */\\n    function getPublicDrop(address nftContract)\\n        external\\n        view\\n        returns (PublicDrop memory)\\n    {\\n        return _publicDrops[nftContract];\\n    }\\n\\n    /**\\n     * @notice Returns the creator payout address for the nft contract.\\n     *\\n     * @param nftContract The nft contract.\\n     */\\n    function getCreatorPayoutAddress(address nftContract)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return _creatorPayoutAddresses[nftContract];\\n    }\\n\\n    /**\\n     * @notice Returns the allow list merkle root for the nft contract.\\n     *\\n     * @param nftContract The nft contract.\\n     */\\n    function getAllowListMerkleRoot(address nftContract)\\n        external\\n        view\\n        returns (bytes32)\\n    {\\n        return _allowListMerkleRoots[nftContract];\\n    }\\n\\n    /**\\n     * @notice Returns if the specified fee recipient is allowed\\n     *         for the nft contract.\\n     *\\n     * @param nftContract The nft contract.\\n     */\\n    function getFeeRecipientIsAllowed(address nftContract, address feeRecipient)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return _allowedFeeRecipients[nftContract][feeRecipient];\\n    }\\n\\n    /**\\n     * @notice Returns an enumeration of allowed fee recipients for an\\n     *         nft contract when fee recipients are enforced.\\n     *\\n     * @param nftContract The nft contract.\\n     */\\n    function getAllowedFeeRecipients(address nftContract)\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return _enumeratedFeeRecipients[nftContract];\\n    }\\n\\n    /**\\n     * @notice Returns the server-side signers for the nft contract.\\n     *\\n     * @param nftContract The nft contract.\\n     */\\n    function getSigners(address nftContract)\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return _enumeratedSigners[nftContract];\\n    }\\n\\n    /**\\n     * @notice Returns the struct of SignedMintValidationParams for a signer.\\n     *\\n     * @param nftContract The nft contract.\\n     * @param signer      The signer.\\n     */\\n    function getSignedMintValidationParams(address nftContract, address signer)\\n        external\\n        view\\n        returns (SignedMintValidationParams memory)\\n    {\\n        return _signedMintValidationParams[nftContract][signer];\\n    }\\n\\n    /**\\n     * @notice Returns the payers for the nft contract.\\n     *\\n     * @param nftContract The nft contract.\\n     */\\n    function getPayers(address nftContract)\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return _enumeratedPayers[nftContract];\\n    }\\n\\n    /**\\n     * @notice Returns if the specified payer is allowed\\n     *         for the nft contract.\\n     *\\n     * @param nftContract The nft contract.\\n     * @param payer       The payer.\\n     */\\n    function getPayerIsAllowed(address nftContract, address payer)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return _allowedPayers[nftContract][payer];\\n    }\\n\\n    /**\\n     * @notice Returns the allowed token gated drop tokens for the nft contract.\\n     *\\n     * @param nftContract The nft contract.\\n     */\\n    function getTokenGatedAllowedTokens(address nftContract)\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return _enumeratedTokenGatedTokens[nftContract];\\n    }\\n\\n    /**\\n     * @notice Returns the token gated drop data for the nft contract\\n     *         and token gated nft.\\n     *\\n     * @param nftContract     The nft contract.\\n     * @param allowedNftToken The token gated nft token.\\n     */\\n    function getTokenGatedDrop(address nftContract, address allowedNftToken)\\n        external\\n        view\\n        returns (TokenGatedDropStage memory)\\n    {\\n        return _tokenGatedDrops[nftContract][allowedNftToken];\\n    }\\n\\n    /**\\n     * @notice Returns whether the token id for a token gated drop has been\\n     *         redeemed.\\n     *\\n     * @param nftContract       The nft contract.\\n     * @param allowedNftToken   The token gated nft token.\\n     * @param allowedNftTokenId The token gated nft token id to check.\\n     */\\n    function getAllowedNftTokenIdIsRedeemed(\\n        address nftContract,\\n        address allowedNftToken,\\n        uint256 allowedNftTokenId\\n    ) external view returns (bool) {\\n        return\\n            _tokenGatedRedeemed[nftContract][allowedNftToken][\\n                allowedNftTokenId\\n            ];\\n    }\\n\\n    /**\\n     * @notice Emits an event to notify update of the drop URI.\\n     *\\n     *         This method assume msg.sender is an nft contract and its\\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\\n     *\\n     *         Note: Be sure only authorized users can call this from\\n     *         token contracts that implement INonFungibleSeaDropToken.\\n     *\\n     * @param dropURI The new drop URI.\\n     */\\n    function updateDropURI(string calldata dropURI)\\n        external\\n        onlyINonFungibleSeaDropToken\\n    {\\n        // Emit an event with the update.\\n        emit DropURIUpdated(msg.sender, dropURI);\\n    }\\n\\n    /**\\n     * @notice Updates the public drop data for the nft contract\\n     *         and emits an event.\\n     *\\n     *         This method assume msg.sender is an nft contract and its\\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\\n     *\\n     *         Note: Be sure only authorized users can call this from\\n     *         token contracts that implement INonFungibleSeaDropToken.\\n     *\\n     * @param publicDrop The public drop data.\\n     */\\n    function updatePublicDrop(PublicDrop calldata publicDrop)\\n        external\\n        override\\n        onlyINonFungibleSeaDropToken\\n    {\\n        // Revert if the fee basis points is greater than 10_000.\\n        if (publicDrop.feeBps > 10_000) {\\n            revert InvalidFeeBps(publicDrop.feeBps);\\n        }\\n\\n        // Set the public drop data.\\n        _publicDrops[msg.sender] = publicDrop;\\n\\n        // Emit an event with the update.\\n        emit PublicDropUpdated(msg.sender, publicDrop);\\n    }\\n\\n    /**\\n     * @notice Updates the allow list merkle root for the nft contract\\n     *         and emits an event.\\n     *\\n     *         This method assume msg.sender is an nft contract and its\\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\\n     *\\n     *         Note: Be sure only authorized users can call this from\\n     *         token contracts that implement INonFungibleSeaDropToken.\\n     *\\n     * @param allowListData The allow list data.\\n     */\\n    function updateAllowList(AllowListData calldata allowListData)\\n        external\\n        override\\n        onlyINonFungibleSeaDropToken\\n    {\\n        // Track the previous root.\\n        bytes32 prevRoot = _allowListMerkleRoots[msg.sender];\\n\\n        // Update the merkle root.\\n        _allowListMerkleRoots[msg.sender] = allowListData.merkleRoot;\\n\\n        // Emit an event with the update.\\n        emit AllowListUpdated(\\n            msg.sender,\\n            prevRoot,\\n            allowListData.merkleRoot,\\n            allowListData.publicKeyURIs,\\n            allowListData.allowListURI\\n        );\\n    }\\n\\n    /**\\n     * @notice Updates the token gated drop stage for the nft contract\\n     *         and emits an event.\\n     *\\n     *         This method assume msg.sender is an nft contract and its\\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\\n     *\\n     *         Note: Be sure only authorized users can call this from\\n     *         token contracts that implement INonFungibleSeaDropToken.\\n     *\\n     *         Note: If two INonFungibleSeaDropToken tokens are doing\\n     *         simultaneous token gated drop promotions for each other,\\n     *         they can be minted by the same actor until\\n     *         `maxTokenSupplyForStage` is reached. Please ensure the\\n     *         `allowedNftToken` is not running an active drop during\\n     *         the `dropStage` time period.\\n     *\\n     * @param allowedNftToken The token gated nft token.\\n     * @param dropStage       The token gated drop stage data.\\n     */\\n    function updateTokenGatedDrop(\\n        address allowedNftToken,\\n        TokenGatedDropStage calldata dropStage\\n    ) external override onlyINonFungibleSeaDropToken {\\n        // Ensure the allowedNftToken is not the zero address.\\n        if (allowedNftToken == address(0)) {\\n            revert TokenGatedDropAllowedNftTokenCannotBeZeroAddress();\\n        }\\n\\n        // Ensure the allowedNftToken cannot be the drop token itself.\\n        if (allowedNftToken == msg.sender) {\\n            revert TokenGatedDropAllowedNftTokenCannotBeDropToken();\\n        }\\n\\n        // Revert if the fee basis points is greater than 10_000.\\n        if (dropStage.feeBps > 10_000) {\\n            revert InvalidFeeBps(dropStage.feeBps);\\n        }\\n\\n        // Use maxTotalMintableByWallet != 0 as a signal that this update should\\n        // add or update the drop stage, otherwise we will be removing.\\n        bool addOrUpdateDropStage = dropStage.maxTotalMintableByWallet != 0;\\n\\n        // Get pointers to the token gated drop data and enumerated addresses.\\n        TokenGatedDropStage storage existingDropStageData = _tokenGatedDrops[\\n            msg.sender\\n        ][allowedNftToken];\\n        address[] storage enumeratedTokens = _enumeratedTokenGatedTokens[\\n            msg.sender\\n        ];\\n\\n        // Stage struct packs to a single slot, so load it\\n        // as a uint256; if it is 0, it is empty.\\n        bool dropStageDoesNotExist;\\n        assembly {\\n            dropStageDoesNotExist := iszero(sload(existingDropStageData.slot))\\n        }\\n\\n        if (addOrUpdateDropStage) {\\n            _tokenGatedDrops[msg.sender][allowedNftToken] = dropStage;\\n            // Add to enumeration if it does not exist already.\\n            if (dropStageDoesNotExist) {\\n                enumeratedTokens.push(allowedNftToken);\\n            }\\n        } else {\\n            // Check we are not deleting a drop stage that does not exist.\\n            if (dropStageDoesNotExist) {\\n                revert TokenGatedDropStageNotPresent();\\n            }\\n            // Clear storage slot and remove from enumeration.\\n            delete _tokenGatedDrops[msg.sender][allowedNftToken];\\n            _removeFromEnumeration(allowedNftToken, enumeratedTokens);\\n        }\\n\\n        // Emit an event with the update.\\n        emit TokenGatedDropStageUpdated(msg.sender, allowedNftToken, dropStage);\\n    }\\n\\n    /**\\n     * @notice Updates the creator payout address and emits an event.\\n     *\\n     *         This method assume msg.sender is an nft contract and its\\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\\n     *\\n     *         Note: Be sure only authorized users can call this from\\n     *         token contracts that implement INonFungibleSeaDropToken.\\n     *\\n     * @param payoutAddress The creator payout address.\\n     */\\n    function updateCreatorPayoutAddress(address payoutAddress)\\n        external\\n        onlyINonFungibleSeaDropToken\\n    {\\n        if (payoutAddress == address(0)) {\\n            revert CreatorPayoutAddressCannotBeZeroAddress();\\n        }\\n        // Set the creator payout address.\\n        _creatorPayoutAddresses[msg.sender] = payoutAddress;\\n\\n        // Emit an event with the update.\\n        emit CreatorPayoutAddressUpdated(msg.sender, payoutAddress);\\n    }\\n\\n    /**\\n     * @notice Updates the allowed fee recipient and emits an event.\\n     *\\n     *         This method assume msg.sender is an nft contract and its\\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\\n     *\\n     *         Note: Be sure only authorized users can call this from\\n     *         token contracts that implement INonFungibleSeaDropToken.\\n     *\\n     * @param feeRecipient The fee recipient.\\n     * @param allowed      If the fee recipient is allowed.\\n     */\\n    function updateAllowedFeeRecipient(address feeRecipient, bool allowed)\\n        external\\n        onlyINonFungibleSeaDropToken\\n    {\\n        if (feeRecipient == address(0)) {\\n            revert FeeRecipientCannotBeZeroAddress();\\n        }\\n\\n        // Track the enumerated storage.\\n        address[] storage enumeratedStorage = _enumeratedFeeRecipients[\\n            msg.sender\\n        ];\\n        mapping(address => bool)\\n            storage feeRecipientsMap = _allowedFeeRecipients[msg.sender];\\n\\n        if (allowed) {\\n            if (feeRecipientsMap[feeRecipient]) {\\n                revert DuplicateFeeRecipient();\\n            }\\n            feeRecipientsMap[feeRecipient] = true;\\n            enumeratedStorage.push(feeRecipient);\\n        } else {\\n            if (!feeRecipientsMap[feeRecipient]) {\\n                revert FeeRecipientNotPresent();\\n            }\\n            delete _allowedFeeRecipients[msg.sender][feeRecipient];\\n            _removeFromEnumeration(feeRecipient, enumeratedStorage);\\n        }\\n\\n        // Emit an event with the update.\\n        emit AllowedFeeRecipientUpdated(msg.sender, feeRecipient, allowed);\\n    }\\n\\n    /**\\n     * @notice Updates the allowed server-side signers and emits an event.\\n     *\\n     *         This method assume msg.sender is an nft contract and its\\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\\n     *\\n     *         Note: Be sure only authorized users can call this from\\n     *         token contracts that implement INonFungibleSeaDropToken.\\n     *\\n     * @param signer                     The signer to update.\\n     * @param signedMintValidationParams Minimum and maximum parameters\\n     *                                   to enforce for signed mints.\\n     */\\n    function updateSignedMintValidationParams(\\n        address signer,\\n        SignedMintValidationParams calldata signedMintValidationParams\\n    ) external onlyINonFungibleSeaDropToken {\\n        if (signer == address(0)) {\\n            revert SignerCannotBeZeroAddress();\\n        }\\n\\n        if (signedMintValidationParams.minFeeBps > 10_000) {\\n            revert InvalidFeeBps(signedMintValidationParams.minFeeBps);\\n        }\\n        if (signedMintValidationParams.maxFeeBps > 10_000) {\\n            revert InvalidFeeBps(signedMintValidationParams.maxFeeBps);\\n        }\\n\\n        // Track the enumerated storage.\\n        address[] storage enumeratedStorage = _enumeratedSigners[msg.sender];\\n        mapping(address => SignedMintValidationParams)\\n            storage signedMintValidationParamsMap = _signedMintValidationParams[\\n                msg.sender\\n            ];\\n\\n        SignedMintValidationParams\\n            storage existingSignedMintValidationParams = signedMintValidationParamsMap[\\n                signer\\n            ];\\n\\n        bool signedMintValidationParamsDoNotExist;\\n        assembly {\\n            signedMintValidationParamsDoNotExist := iszero(\\n                sload(existingSignedMintValidationParams.slot)\\n            )\\n        }\\n        // Use maxMaxTotalMintableByWallet as sentry for add/update or delete.\\n        bool addOrUpdate = signedMintValidationParams\\n            .maxMaxTotalMintableByWallet > 0;\\n\\n        if (addOrUpdate) {\\n            signedMintValidationParamsMap[signer] = signedMintValidationParams;\\n            if (signedMintValidationParamsDoNotExist) {\\n                enumeratedStorage.push(signer);\\n            }\\n        } else {\\n            if (\\n                existingSignedMintValidationParams\\n                    .maxMaxTotalMintableByWallet == 0\\n            ) {\\n                revert SignerNotPresent();\\n            }\\n            delete _signedMintValidationParams[msg.sender][signer];\\n            _removeFromEnumeration(signer, enumeratedStorage);\\n        }\\n\\n        // Emit an event with the update.\\n        emit SignedMintValidationParamsUpdated(\\n            msg.sender,\\n            signer,\\n            signedMintValidationParams\\n        );\\n    }\\n\\n    /**\\n     * @notice Updates the allowed payer and emits an event.\\n     *\\n     *         This method assume msg.sender is an nft contract and its\\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\\n     *\\n     *         Note: Be sure only authorized users can call this from\\n     *         token contracts that implement INonFungibleSeaDropToken.\\n     *\\n     * @param payer   The payer to add or remove.\\n     * @param allowed Whether to add or remove the payer.\\n     */\\n    function updatePayer(address payer, bool allowed)\\n        external\\n        onlyINonFungibleSeaDropToken\\n    {\\n        if (payer == address(0)) {\\n            revert PayerCannotBeZeroAddress();\\n        }\\n\\n        // Track the enumerated storage.\\n        address[] storage enumeratedStorage = _enumeratedPayers[msg.sender];\\n        mapping(address => bool) storage payersMap = _allowedPayers[msg.sender];\\n\\n        if (allowed) {\\n            if (payersMap[payer]) {\\n                revert DuplicatePayer();\\n            }\\n            payersMap[payer] = true;\\n            enumeratedStorage.push(payer);\\n        } else {\\n            if (!payersMap[payer]) {\\n                revert PayerNotPresent();\\n            }\\n            delete _allowedPayers[msg.sender][payer];\\n            _removeFromEnumeration(payer, enumeratedStorage);\\n        }\\n\\n        // Emit an event with the update.\\n        emit PayerUpdated(msg.sender, payer, allowed);\\n    }\\n\\n    /**\\n     * @notice Remove an address from a supplied enumeration.\\n     *\\n     * @param toRemove    The address to remove.\\n     * @param enumeration The enumerated addresses to parse.\\n     */\\n    function _removeFromEnumeration(\\n        address toRemove,\\n        address[] storage enumeration\\n    ) internal {\\n        // Cache the length.\\n        uint256 enumerationLength = enumeration.length;\\n        for (uint256 i = 0; i < enumerationLength; ) {\\n            // Check if the enumerated element is the one we are deleting.\\n            if (enumeration[i] == toRemove) {\\n                // Swap with the last element.\\n                enumeration[i] = enumeration[enumerationLength - 1];\\n                // Delete the (now duplicated) last element.\\n                enumeration.pop();\\n                // Exit the loop.\\n                break;\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Verify an EIP-712 signature by recreating the data structure\\n     *         that we signed on the client side, and then using that to recover\\n     *         the address that signed the signature for this data.\\n     *\\n     * @param nftContract  The nft contract.\\n     * @param minter       The mint recipient.\\n     * @param feeRecipient The fee recipient.\\n     * @param mintParams   The mint params.\\n     * @param salt         The salt for the signed mint.\\n     */\\n    function _getDigest(\\n        address nftContract,\\n        address minter,\\n        address feeRecipient,\\n        MintParams memory mintParams,\\n        uint256 salt\\n    ) internal view returns (bytes32 digest) {\\n        bytes32 mintParamsHashStruct = keccak256(\\n            abi.encode(\\n                _MINT_PARAMS_TYPEHASH,\\n                mintParams.mintPrice,\\n                mintParams.maxTotalMintableByWallet,\\n                mintParams.startTime,\\n                mintParams.endTime,\\n                mintParams.dropStageIndex,\\n                mintParams.maxTokenSupplyForStage,\\n                mintParams.feeBps,\\n                mintParams.restrictFeeRecipients\\n            )\\n        );\\n        digest = keccak256(\\n            bytes.concat(\\n                bytes2(0x1901),\\n                _domainSeparator(),\\n                keccak256(\\n                    abi.encode(\\n                        _SIGNED_MINT_TYPEHASH,\\n                        nftContract,\\n                        minter,\\n                        feeRecipient,\\n                        mintParamsHashStruct,\\n                        salt\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Internal pure function to cast a `bool` value to a `uint256` value.\\n     *\\n     * @param b The `bool` value to cast.\\n     *\\n     * @return u The `uint256` value.\\n     */\\n    function _cast(bool b) internal pure returns (uint256 u) {\\n        assembly {\\n            u := b\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ISeaDrop.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {\\n    AllowListData,\\n    MintParams,\\n    PublicDrop,\\n    TokenGatedDropStage,\\n    TokenGatedMintParams,\\n    SignedMintValidationParams\\n} from \\\"../lib/SeaDropStructs.sol\\\";\\n\\nimport { SeaDropErrorsAndEvents } from \\\"../lib/SeaDropErrorsAndEvents.sol\\\";\\n\\ninterface ISeaDrop is SeaDropErrorsAndEvents {\\n    /**\\n     * @notice Mint a public drop.\\n     *\\n     * @param nftContract      The nft contract to mint.\\n     * @param feeRecipient     The fee recipient.\\n     * @param minterIfNotPayer The mint recipient if different than the payer.\\n     * @param quantity         The number of tokens to mint.\\n     */\\n    function mintPublic(\\n        address nftContract,\\n        address feeRecipient,\\n        address minterIfNotPayer,\\n        uint256 quantity\\n    ) external payable;\\n\\n    /**\\n     * @notice Mint from an allow list.\\n     *\\n     * @param nftContract      The nft contract to mint.\\n     * @param feeRecipient     The fee recipient.\\n     * @param minterIfNotPayer The mint recipient if different than the payer.\\n     * @param quantity         The number of tokens to mint.\\n     * @param mintParams       The mint parameters.\\n     * @param proof            The proof for the leaf of the allow list.\\n     */\\n    function mintAllowList(\\n        address nftContract,\\n        address feeRecipient,\\n        address minterIfNotPayer,\\n        uint256 quantity,\\n        MintParams calldata mintParams,\\n        bytes32[] calldata proof\\n    ) external payable;\\n\\n    /**\\n     * @notice Mint with a server-side signature.\\n     *         Note that a signature can only be used once.\\n     *\\n     * @param nftContract      The nft contract to mint.\\n     * @param feeRecipient     The fee recipient.\\n     * @param minterIfNotPayer The mint recipient if different than the payer.\\n     * @param quantity         The number of tokens to mint.\\n     * @param mintParams       The mint parameters.\\n     * @param salt             The sale for the signed mint.\\n     * @param signature        The server-side signature, must be an allowed\\n     *                         signer.\\n     */\\n    function mintSigned(\\n        address nftContract,\\n        address feeRecipient,\\n        address minterIfNotPayer,\\n        uint256 quantity,\\n        MintParams calldata mintParams,\\n        uint256 salt,\\n        bytes calldata signature\\n    ) external payable;\\n\\n    /**\\n     * @notice Mint as an allowed token holder.\\n     *         This will mark the token id as redeemed and will revert if the\\n     *         same token id is attempted to be redeemed twice.\\n     *\\n     * @param nftContract      The nft contract to mint.\\n     * @param feeRecipient     The fee recipient.\\n     * @param minterIfNotPayer The mint recipient if different than the payer.\\n     * @param mintParams       The token gated mint params.\\n     */\\n    function mintAllowedTokenHolder(\\n        address nftContract,\\n        address feeRecipient,\\n        address minterIfNotPayer,\\n        TokenGatedMintParams calldata mintParams\\n    ) external payable;\\n\\n    /**\\n     * @notice Emits an event to notify update of the drop URI.\\n     *\\n     *         This method assume msg.sender is an nft contract and its\\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\\n     *\\n     *         Note: Be sure only authorized users can call this from\\n     *         token contracts that implement INonFungibleSeaDropToken.\\n     *\\n     * @param dropURI The new drop URI.\\n     */\\n    function updateDropURI(string calldata dropURI) external;\\n\\n    /**\\n     * @notice Updates the public drop data for the nft contract\\n     *         and emits an event.\\n     *\\n     *         This method assume msg.sender is an nft contract and its\\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\\n     *\\n     *         Note: Be sure only authorized users can call this from\\n     *         token contracts that implement INonFungibleSeaDropToken.\\n     *\\n     * @param publicDrop The public drop data.\\n     */\\n    function updatePublicDrop(PublicDrop calldata publicDrop) external;\\n\\n    /**\\n     * @notice Updates the allow list merkle root for the nft contract\\n     *         and emits an event.\\n     *\\n     *         This method assume msg.sender is an nft contract and its\\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\\n     *\\n     *         Note: Be sure only authorized users can call this from\\n     *         token contracts that implement INonFungibleSeaDropToken.\\n     *\\n     * @param allowListData The allow list data.\\n     */\\n    function updateAllowList(AllowListData calldata allowListData) external;\\n\\n    /**\\n     * @notice Updates the token gated drop stage for the nft contract\\n     *         and emits an event.\\n     *\\n     *         This method assume msg.sender is an nft contract and its\\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\\n     *\\n     *         Note: Be sure only authorized users can call this from\\n     *         token contracts that implement INonFungibleSeaDropToken.\\n     *\\n     *         Note: If two INonFungibleSeaDropToken tokens are doing\\n     *         simultaneous token gated drop promotions for each other,\\n     *         they can be minted by the same actor until\\n     *         `maxTokenSupplyForStage` is reached. Please ensure the\\n     *         `allowedNftToken` is not running an active drop during\\n     *         the `dropStage` time period.\\n     *\\n     * @param allowedNftToken The token gated nft token.\\n     * @param dropStage       The token gated drop stage data.\\n     */\\n    function updateTokenGatedDrop(\\n        address allowedNftToken,\\n        TokenGatedDropStage calldata dropStage\\n    ) external;\\n\\n    /**\\n     * @notice Updates the creator payout address and emits an event.\\n     *\\n     *         This method assume msg.sender is an nft contract and its\\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\\n     *\\n     *         Note: Be sure only authorized users can call this from\\n     *         token contracts that implement INonFungibleSeaDropToken.\\n     *\\n     * @param payoutAddress The creator payout address.\\n     */\\n    function updateCreatorPayoutAddress(address payoutAddress) external;\\n\\n    /**\\n     * @notice Updates the allowed fee recipient and emits an event.\\n     *\\n     *         This method assume msg.sender is an nft contract and its\\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\\n     *\\n     *         Note: Be sure only authorized users can call this from\\n     *         token contracts that implement INonFungibleSeaDropToken.\\n     *\\n     * @param feeRecipient The fee recipient.\\n     * @param allowed      If the fee recipient is allowed.\\n     */\\n    function updateAllowedFeeRecipient(address feeRecipient, bool allowed)\\n        external;\\n\\n    /**\\n     * @notice Updates the allowed server-side signers and emits an event.\\n     *\\n     *         This method assume msg.sender is an nft contract and its\\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\\n     *\\n     *         Note: Be sure only authorized users can call this from\\n     *         token contracts that implement INonFungibleSeaDropToken.\\n     *\\n     * @param signer                     The signer to update.\\n     * @param signedMintValidationParams Minimum and maximum parameters\\n     *                                   to enforce for signed mints.\\n     */\\n    function updateSignedMintValidationParams(\\n        address signer,\\n        SignedMintValidationParams calldata signedMintValidationParams\\n    ) external;\\n\\n    /**\\n     * @notice Updates the allowed payer and emits an event.\\n     *\\n     *         This method assume msg.sender is an nft contract and its\\n     *         ERC165 interface id matches INonFungibleSeaDropToken.\\n     *\\n     *         Note: Be sure only authorized users can call this from\\n     *         token contracts that implement INonFungibleSeaDropToken.\\n     *\\n     * @param payer   The payer to add or remove.\\n     * @param allowed Whether to add or remove the payer.\\n     */\\n    function updatePayer(address payer, bool allowed) external;\\n\\n    /**\\n     * @notice Returns the public drop data for the nft contract.\\n     *\\n     * @param nftContract The nft contract.\\n     */\\n    function getPublicDrop(address nftContract)\\n        external\\n        view\\n        returns (PublicDrop memory);\\n\\n    /**\\n     * @notice Returns the creator payout address for the nft contract.\\n     *\\n     * @param nftContract The nft contract.\\n     */\\n    function getCreatorPayoutAddress(address nftContract)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @notice Returns the allow list merkle root for the nft contract.\\n     *\\n     * @param nftContract The nft contract.\\n     */\\n    function getAllowListMerkleRoot(address nftContract)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Returns if the specified fee recipient is allowed\\n     *         for the nft contract.\\n     *\\n     * @param nftContract  The nft contract.\\n     * @param feeRecipient The fee recipient.\\n     */\\n    function getFeeRecipientIsAllowed(address nftContract, address feeRecipient)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice Returns an enumeration of allowed fee recipients for an\\n     *         nft contract when fee recipients are enforced\\n     *\\n     * @param nftContract The nft contract.\\n     */\\n    function getAllowedFeeRecipients(address nftContract)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the server-side signers for the nft contract.\\n     *\\n     * @param nftContract The nft contract.\\n     */\\n    function getSigners(address nftContract)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the struct of SignedMintValidationParams for a signer.\\n     *\\n     * @param nftContract The nft contract.\\n     * @param signer      The signer.\\n     */\\n    function getSignedMintValidationParams(address nftContract, address signer)\\n        external\\n        view\\n        returns (SignedMintValidationParams memory);\\n\\n    /**\\n     * @notice Returns the payers for the nft contract.\\n     *\\n     * @param nftContract The nft contract.\\n     */\\n    function getPayers(address nftContract)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    /**\\n     * @notice Returns if the specified payer is allowed\\n     *         for the nft contract.\\n     *\\n     * @param nftContract The nft contract.\\n     * @param payer       The payer.\\n     */\\n    function getPayerIsAllowed(address nftContract, address payer)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice Returns the allowed token gated drop tokens for the nft contract.\\n     *\\n     * @param nftContract The nft contract.\\n     */\\n    function getTokenGatedAllowedTokens(address nftContract)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the token gated drop data for the nft contract\\n     *         and token gated nft.\\n     *\\n     * @param nftContract     The nft contract.\\n     * @param allowedNftToken The token gated nft token.\\n     */\\n    function getTokenGatedDrop(address nftContract, address allowedNftToken)\\n        external\\n        view\\n        returns (TokenGatedDropStage memory);\\n\\n    /**\\n     * @notice Returns whether the token id for a token gated drop has been\\n     *         redeemed.\\n     *\\n     * @param nftContract       The nft contract.\\n     * @param allowedNftToken   The token gated nft token.\\n     * @param allowedNftTokenId The token gated nft token id to check.\\n     */\\n    function getAllowedNftTokenIdIsRedeemed(\\n        address nftContract,\\n        address allowedNftToken,\\n        uint256 allowedNftTokenId\\n    ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/lib/SeaDropStructs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @notice A struct defining public drop data.\\n *         Designed to fit efficiently in one storage slot.\\n * \\n * @param mintPrice                The mint price per token. (Up to 1.2m\\n *                                 of native token, e.g. ETH, MATIC)\\n * @param startTime                The start time, ensure this is not zero.\\n * @param endTIme                  The end time, ensure this is not zero.\\n * @param maxTotalMintableByWallet Maximum total number of mints a user is\\n *                                 allowed. (The limit for this field is\\n *                                 2^16 - 1)\\n * @param feeBps                   Fee out of 10_000 basis points to be\\n *                                 collected.\\n * @param restrictFeeRecipients    If false, allow any fee recipient;\\n *                                 if true, check fee recipient is allowed.\\n */\\nstruct PublicDrop {\\n    uint80 mintPrice; // 80/256 bits\\n    uint48 startTime; // 128/256 bits\\n    uint48 endTime; // 176/256 bits\\n    uint16 maxTotalMintableByWallet; // 224/256 bits\\n    uint16 feeBps; // 240/256 bits\\n    bool restrictFeeRecipients; // 248/256 bits\\n}\\n\\n/**\\n * @notice A struct defining token gated drop stage data.\\n *         Designed to fit efficiently in one storage slot.\\n * \\n * @param mintPrice                The mint price per token. (Up to 1.2m \\n *                                 of native token, e.g.: ETH, MATIC)\\n * @param maxTotalMintableByWallet Maximum total number of mints a user is\\n *                                 allowed. (The limit for this field is\\n *                                 2^16 - 1)\\n * @param startTime                The start time, ensure this is not zero.\\n * @param endTime                  The end time, ensure this is not zero.\\n * @param dropStageIndex           The drop stage index to emit with the event\\n *                                 for analytical purposes. This should be \\n *                                 non-zero since the public mint emits\\n *                                 with index zero.\\n * @param maxTokenSupplyForStage   The limit of token supply this stage can\\n *                                 mint within. (The limit for this field is\\n *                                 2^16 - 1)\\n * @param feeBps                   Fee out of 10_000 basis points to be\\n *                                 collected.\\n * @param restrictFeeRecipients    If false, allow any fee recipient;\\n *                                 if true, check fee recipient is allowed.\\n */\\nstruct TokenGatedDropStage {\\n    uint80 mintPrice; // 80/256 bits\\n    uint16 maxTotalMintableByWallet; // 96/256 bits\\n    uint48 startTime; // 144/256 bits\\n    uint48 endTime; // 192/256 bits\\n    uint8 dropStageIndex; // non-zero. 200/256 bits\\n    uint32 maxTokenSupplyForStage; // 232/256 bits\\n    uint16 feeBps; // 248/256 bits\\n    bool restrictFeeRecipients; // 256/256 bits\\n}\\n\\n/**\\n * @notice A struct defining mint params for an allow list.\\n *         An allow list leaf will be composed of `msg.sender` and\\n *         the following params.\\n * \\n *         Note: Since feeBps is encoded in the leaf, backend should ensure\\n *         that feeBps is acceptable before generating a proof.\\n * \\n * @param mintPrice                The mint price per token.\\n * @param maxTotalMintableByWallet Maximum total number of mints a user is\\n *                                 allowed.\\n * @param startTime                The start time, ensure this is not zero.\\n * @param endTime                  The end time, ensure this is not zero.\\n * @param dropStageIndex           The drop stage index to emit with the event\\n *                                 for analytical purposes. This should be\\n *                                 non-zero since the public mint emits with\\n *                                 index zero.\\n * @param maxTokenSupplyForStage   The limit of token supply this stage can\\n *                                 mint within.\\n * @param feeBps                   Fee out of 10_000 basis points to be\\n *                                 collected.\\n * @param restrictFeeRecipients    If false, allow any fee recipient;\\n *                                 if true, check fee recipient is allowed.\\n */\\nstruct MintParams {\\n    uint256 mintPrice; \\n    uint256 maxTotalMintableByWallet;\\n    uint256 startTime;\\n    uint256 endTime;\\n    uint256 dropStageIndex; // non-zero\\n    uint256 maxTokenSupplyForStage;\\n    uint256 feeBps;\\n    bool restrictFeeRecipients;\\n}\\n\\n/**\\n * @notice A struct defining token gated mint params.\\n * \\n * @param allowedNftToken    The allowed nft token contract address.\\n * @param allowedNftTokenIds The token ids to redeem.\\n */\\nstruct TokenGatedMintParams {\\n    address allowedNftToken;\\n    uint256[] allowedNftTokenIds;\\n}\\n\\n/**\\n * @notice A struct defining allow list data (for minting an allow list).\\n * \\n * @param merkleRoot    The merkle root for the allow list.\\n * @param publicKeyURIs If the allowListURI is encrypted, a list of URIs\\n *                      pointing to the public keys. Empty if unencrypted.\\n * @param allowListURI  The URI for the allow list.\\n */\\nstruct AllowListData {\\n    bytes32 merkleRoot;\\n    string[] publicKeyURIs;\\n    string allowListURI;\\n}\\n\\n/**\\n * @notice A struct defining minimum and maximum parameters to validate for \\n *         signed mints, to minimize negative effects of a compromised signer.\\n *\\n * @param minMintPrice                The minimum mint price allowed.\\n * @param maxMaxTotalMintableByWallet The maximum total number of mints allowed\\n *                                    by a wallet.\\n * @param minStartTime                The minimum start time allowed.\\n * @param maxEndTime                  The maximum end time allowed.\\n * @param maxMaxTokenSupplyForStage   The maximum token supply allowed.\\n * @param minFeeBps                   The minimum fee allowed.\\n * @param maxFeeBps                   The maximum fee allowed.\\n */\\nstruct SignedMintValidationParams {\\n    uint80 minMintPrice; // 80/256 bits\\n    uint24 maxMaxTotalMintableByWallet; // 104/256 bits\\n    uint40 minStartTime; // 144/256 bits\\n    uint40 maxEndTime; // 184/256 bits\\n    uint40 maxMaxTokenSupplyForStage; // 224/256 bits\\n    uint16 minFeeBps; // 240/256 bits\\n    uint16 maxFeeBps; // 256/256 bits\\n}\"\r\n    },\r\n    \"src/interfaces/INonFungibleSeaDropToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {\\n    ISeaDropTokenContractMetadata\\n} from \\\"./ISeaDropTokenContractMetadata.sol\\\";\\n\\nimport {\\n    AllowListData,\\n    PublicDrop,\\n    TokenGatedDropStage,\\n    SignedMintValidationParams\\n} from \\\"../lib/SeaDropStructs.sol\\\";\\n\\ninterface INonFungibleSeaDropToken is ISeaDropTokenContractMetadata {\\n    /**\\n     * @dev Revert with an error if a contract is not an allowed\\n     *      SeaDrop address.\\n     */\\n    error OnlyAllowedSeaDrop();\\n\\n    /**\\n     * @dev Emit an event when allowed SeaDrop contracts are updated.\\n     */\\n    event AllowedSeaDropUpdated(address[] allowedSeaDrop);\\n\\n    /**\\n     * @notice Update the allowed SeaDrop contracts.\\n     *         Only the owner can use this function.\\n     *\\n     * @param allowedSeaDrop The allowed SeaDrop addresses.\\n     */\\n    function updateAllowedSeaDrop(address[] calldata allowedSeaDrop) external;\\n\\n    /**\\n     * @notice Mint tokens, restricted to the SeaDrop contract.\\n     *\\n     * @dev    NOTE: If a token registers itself with multiple SeaDrop\\n     *         contracts, the implementation of this function should guard\\n     *         against reentrancy. If the implementing token uses\\n     *         _safeMint(), or a feeRecipient with a malicious receive() hook\\n     *         is specified, the token or fee recipients may be able to execute\\n     *         another mint in the same transaction via a separate SeaDrop\\n     *         contract.\\n     *         This is dangerous if an implementing token does not correctly\\n     *         update the minterNumMinted and currentTotalSupply values before\\n     *         transferring minted tokens, as SeaDrop references these values\\n     *         to enforce token limits on a per-wallet and per-stage basis.\\n     *\\n     * @param minter   The address to mint to.\\n     * @param quantity The number of tokens to mint.\\n     */\\n    function mintSeaDrop(address minter, uint256 quantity) external;\\n\\n    /**\\n     * @notice Returns a set of mint stats for the address.\\n     *         This assists SeaDrop in enforcing maxSupply,\\n     *         maxTotalMintableByWallet, and maxTokenSupplyForStage checks.\\n     *\\n     * @dev    NOTE: Implementing contracts should always update these numbers\\n     *         before transferring any tokens with _safeMint() to mitigate\\n     *         consequences of malicious onERC721Received() hooks.\\n     *\\n     * @param minter The minter address.\\n     */\\n    function getMintStats(address minter)\\n        external\\n        view\\n        returns (\\n            uint256 minterNumMinted,\\n            uint256 currentTotalSupply,\\n            uint256 maxSupply\\n        );\\n\\n    /**\\n     * @notice Update the public drop data for this nft contract on SeaDrop.\\n     *         Only the owner can use this function.\\n     *\\n     * @param seaDropImpl The allowed SeaDrop contract.\\n     * @param publicDrop  The public drop data.\\n     */\\n    function updatePublicDrop(\\n        address seaDropImpl,\\n        PublicDrop calldata publicDrop\\n    ) external;\\n\\n    /**\\n     * @notice Update the allow list data for this nft contract on SeaDrop.\\n     *         Only the owner can use this function.\\n     *\\n     * @param seaDropImpl   The allowed SeaDrop contract.\\n     * @param allowListData The allow list data.\\n     */\\n    function updateAllowList(\\n        address seaDropImpl,\\n        AllowListData calldata allowListData\\n    ) external;\\n\\n    /**\\n     * @notice Update the token gated drop stage data for this nft contract\\n     *         on SeaDrop.\\n     *         Only the owner can use this function.\\n     *\\n     *         Note: If two INonFungibleSeaDropToken tokens are doing\\n     *         simultaneous token gated drop promotions for each other,\\n     *         they can be minted by the same actor until\\n     *         `maxTokenSupplyForStage` is reached. Please ensure the\\n     *         `allowedNftToken` is not running an active drop during the\\n     *         `dropStage` time period.\\n     *\\n     *\\n     * @param seaDropImpl     The allowed SeaDrop contract.\\n     * @param allowedNftToken The allowed nft token.\\n     * @param dropStage       The token gated drop stage data.\\n     */\\n    function updateTokenGatedDrop(\\n        address seaDropImpl,\\n        address allowedNftToken,\\n        TokenGatedDropStage calldata dropStage\\n    ) external;\\n\\n    /**\\n     * @notice Update the drop URI for this nft contract on SeaDrop.\\n     *         Only the owner can use this function.\\n     *\\n     * @param seaDropImpl The allowed SeaDrop contract.\\n     * @param dropURI     The new drop URI.\\n     */\\n    function updateDropURI(address seaDropImpl, string calldata dropURI)\\n        external;\\n\\n    /**\\n     * @notice Update the creator payout address for this nft contract on\\n     *         SeaDrop.\\n     *         Only the owner can set the creator payout address.\\n     *\\n     * @param seaDropImpl   The allowed SeaDrop contract.\\n     * @param payoutAddress The new payout address.\\n     */\\n    function updateCreatorPayoutAddress(\\n        address seaDropImpl,\\n        address payoutAddress\\n    ) external;\\n\\n    /**\\n     * @notice Update the allowed fee recipient for this nft contract\\n     *         on SeaDrop.\\n     *\\n     * @param seaDropImpl  The allowed SeaDrop contract.\\n     * @param feeRecipient The new fee recipient.\\n     */\\n    function updateAllowedFeeRecipient(\\n        address seaDropImpl,\\n        address feeRecipient,\\n        bool allowed\\n    ) external;\\n\\n    /**\\n     * @notice Update the server-side signers for this nft contract\\n     *         on SeaDrop.\\n     *         Only the owner can use this function.\\n     *\\n     * @param seaDropImpl                The allowed SeaDrop contract.\\n     * @param signer                     The signer to update.\\n     * @param signedMintValidationParams Minimum and maximum parameters\\n     *                                   to enforce for signed mints.\\n     */\\n    function updateSignedMintValidationParams(\\n        address seaDropImpl,\\n        address signer,\\n        SignedMintValidationParams memory signedMintValidationParams\\n    ) external;\\n\\n    /**\\n     * @notice Update the allowed payers for this nft contract on SeaDrop.\\n     *         Only the owner can use this function.\\n     *\\n     * @param seaDropImpl The allowed SeaDrop contract.\\n     * @param payer       The payer to update.\\n     * @param allowed     Whether the payer is allowed.\\n     */\\n    function updatePayer(\\n        address seaDropImpl,\\n        address payer,\\n        bool allowed\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Gas optimized reentrancy protection for smart contracts.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/ReentrancyGuard.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\\nabstract contract ReentrancyGuard {\\n    uint256 private locked = 1;\\n\\n    modifier nonReentrant() virtual {\\n        require(locked == 1, \\\"REENTRANCY\\\");\\n\\n        locked = 2;\\n\\n        _;\\n\\n        locked = 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/utils/SafeTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/lib/SeaDropErrorsAndEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport { PublicDrop, TokenGatedDropStage, SignedMintValidationParams } from \\\"./SeaDropStructs.sol\\\";\\n\\ninterface SeaDropErrorsAndEvents {\\n    /**\\n     * @dev Revert with an error if the drop stage is not active.\\n     */\\n    error NotActive(\\n        uint256 currentTimestamp,\\n        uint256 startTimestamp,\\n        uint256 endTimestamp\\n    );\\n\\n    /**\\n     * @dev Revert with an error if the mint quantity is zero.\\n     */\\n    error MintQuantityCannotBeZero();\\n\\n    /**\\n     * @dev Revert with an error if the mint quantity exceeds the max allowed\\n     *      to be minted per wallet.\\n     */\\n    error MintQuantityExceedsMaxMintedPerWallet(uint256 total, uint256 allowed);\\n\\n    /**\\n     * @dev Revert with an error if the mint quantity exceeds the max token\\n     *      supply.\\n     */\\n    error MintQuantityExceedsMaxSupply(uint256 total, uint256 maxSupply);\\n\\n    /**\\n     * @dev Revert with an error if the mint quantity exceeds the max token\\n     *      supply for the stage.\\n     *      Note: The `maxTokenSupplyForStage` for public mint is\\n     *      always `type(uint).max`.\\n     */\\n    error MintQuantityExceedsMaxTokenSupplyForStage(\\n        uint256 total, \\n        uint256 maxTokenSupplyForStage\\n    );\\n    \\n    /**\\n     * @dev Revert if the fee recipient is the zero address.\\n     */\\n    error FeeRecipientCannotBeZeroAddress();\\n\\n    /**\\n     * @dev Revert if the fee recipient is not already included.\\n     */\\n    error FeeRecipientNotPresent();\\n\\n    /**\\n     * @dev Revert if the fee basis points is greater than 10_000.\\n     */\\n    error InvalidFeeBps(uint256 feeBps);\\n\\n    /**\\n     * @dev Revert if the fee recipient is already included.\\n     */\\n    error DuplicateFeeRecipient();\\n\\n    /**\\n     * @dev Revert if the fee recipient is restricted and not allowed.\\n     */\\n    error FeeRecipientNotAllowed();\\n\\n    /**\\n     * @dev Revert if the creator payout address is the zero address.\\n     */\\n    error CreatorPayoutAddressCannotBeZeroAddress();\\n\\n    /**\\n     * @dev Revert with an error if the received payment is incorrect.\\n     */\\n    error IncorrectPayment(uint256 got, uint256 want);\\n\\n    /**\\n     * @dev Revert with an error if the allow list proof is invalid.\\n     */\\n    error InvalidProof();\\n\\n    /**\\n     * @dev Revert if a supplied signer address is the zero address.\\n     */\\n    error SignerCannotBeZeroAddress();\\n\\n    /**\\n     * @dev Revert with an error if signer's signature is invalid.\\n     */\\n    error InvalidSignature(address recoveredSigner);\\n\\n    /**\\n     * @dev Revert with an error if a signer is not included in\\n     *      the enumeration when removing.\\n     */\\n    error SignerNotPresent();\\n\\n    /**\\n     * @dev Revert with an error if a payer is not included in\\n     *      the enumeration when removing.\\n     */\\n    error PayerNotPresent();\\n\\n    /**\\n     * @dev Revert with an error if a payer is already included in mapping\\n     *      when adding.\\n     *      Note: only applies when adding a single payer, as duplicates in\\n     *      enumeration can be removed with updatePayer.\\n     */\\n    error DuplicatePayer();\\n\\n    /**\\n     * @dev Revert with an error if the payer is not allowed. The minter must\\n     *      pay for their own mint.\\n     */\\n    error PayerNotAllowed();\\n\\n    /**\\n     * @dev Revert if a supplied payer address is the zero address.\\n     */\\n    error PayerCannotBeZeroAddress();\\n\\n    /**\\n     * @dev Revert with an error if the sender does not\\n     *      match the INonFungibleSeaDropToken interface.\\n     */\\n    error OnlyINonFungibleSeaDropToken(address sender);\\n\\n    /**\\n     * @dev Revert with an error if the sender of a token gated supplied\\n     *      drop stage redeem is not the owner of the token.\\n     */\\n    error TokenGatedNotTokenOwner(\\n        address nftContract,\\n        address allowedNftToken,\\n        uint256 allowedNftTokenId\\n    );\\n\\n    /**\\n     * @dev Revert with an error if the token id has already been used to\\n     *      redeem a token gated drop stage.\\n     */\\n    error TokenGatedTokenIdAlreadyRedeemed(\\n        address nftContract,\\n        address allowedNftToken,\\n        uint256 allowedNftTokenId\\n    );\\n\\n    /**\\n     * @dev Revert with an error if an empty TokenGatedDropStage is provided\\n     *      for an already-empty TokenGatedDropStage.\\n     */\\n     error TokenGatedDropStageNotPresent();\\n\\n    /**\\n     * @dev Revert with an error if an allowedNftToken is set to\\n     *      the zero address.\\n     */\\n     error TokenGatedDropAllowedNftTokenCannotBeZeroAddress();\\n\\n    /**\\n     * @dev Revert with an error if an allowedNftToken is set to\\n     *      the drop token itself.\\n     */\\n     error TokenGatedDropAllowedNftTokenCannotBeDropToken();\\n\\n\\n    /**\\n     * @dev Revert with an error if supplied signed mint price is less than\\n     *      the minimum specified.\\n     */\\n    error InvalidSignedMintPrice(uint256 got, uint256 minimum);\\n\\n    /**\\n     * @dev Revert with an error if supplied signed maxTotalMintableByWallet\\n     *      is greater than the maximum specified.\\n     */\\n    error InvalidSignedMaxTotalMintableByWallet(uint256 got, uint256 maximum);\\n\\n    /**\\n     * @dev Revert with an error if supplied signed start time is less than\\n     *      the minimum specified.\\n     */\\n    error InvalidSignedStartTime(uint256 got, uint256 minimum);\\n    \\n    /**\\n     * @dev Revert with an error if supplied signed end time is greater than\\n     *      the maximum specified.\\n     */\\n    error InvalidSignedEndTime(uint256 got, uint256 maximum);\\n\\n    /**\\n     * @dev Revert with an error if supplied signed maxTokenSupplyForStage\\n     *      is greater than the maximum specified.\\n     */\\n     error InvalidSignedMaxTokenSupplyForStage(uint256 got, uint256 maximum);\\n    \\n     /**\\n     * @dev Revert with an error if supplied signed feeBps is greater than\\n     *      the maximum specified, or less than the minimum.\\n     */\\n    error InvalidSignedFeeBps(uint256 got, uint256 minimumOrMaximum);\\n\\n    /**\\n     * @dev Revert with an error if signed mint did not specify to restrict\\n     *      fee recipients.\\n     */\\n    error SignedMintsMustRestrictFeeRecipients();\\n\\n    /**\\n     * @dev Revert with an error if a signature for a signed mint has already\\n     *      been used.\\n     */\\n    error SignatureAlreadyUsed();\\n\\n    /**\\n     * @dev An event with details of a SeaDrop mint, for analytical purposes.\\n     * \\n     * @param nftContract    The nft contract.\\n     * @param minter         The mint recipient.\\n     * @param feeRecipient   The fee recipient.\\n     * @param payer          The address who payed for the tx.\\n     * @param quantityMinted The number of tokens minted.\\n     * @param unitMintPrice  The amount paid for each token.\\n     * @param feeBps         The fee out of 10_000 basis points collected.\\n     * @param dropStageIndex The drop stage index. Items minted\\n     *                       through mintPublic() have\\n     *                       dropStageIndex of 0.\\n     */\\n    event SeaDropMint(\\n        address indexed nftContract,\\n        address indexed minter,\\n        address indexed feeRecipient,\\n        address payer,\\n        uint256 quantityMinted,\\n        uint256 unitMintPrice,\\n        uint256 feeBps,\\n        uint256 dropStageIndex\\n    );\\n\\n    /**\\n     * @dev An event with updated public drop data for an nft contract.\\n     */\\n    event PublicDropUpdated(\\n        address indexed nftContract,\\n        PublicDrop publicDrop\\n    );\\n\\n    /**\\n     * @dev An event with updated token gated drop stage data\\n     *      for an nft contract.\\n     */\\n    event TokenGatedDropStageUpdated(\\n        address indexed nftContract,\\n        address indexed allowedNftToken,\\n        TokenGatedDropStage dropStage\\n    );\\n\\n    /**\\n     * @dev An event with updated allow list data for an nft contract.\\n     * \\n     * @param nftContract        The nft contract.\\n     * @param previousMerkleRoot The previous allow list merkle root.\\n     * @param newMerkleRoot      The new allow list merkle root.\\n     * @param publicKeyURI       If the allow list is encrypted, the public key\\n     *                           URIs that can decrypt the list.\\n     *                           Empty if unencrypted.\\n     * @param allowListURI       The URI for the allow list.\\n     */\\n    event AllowListUpdated(\\n        address indexed nftContract,\\n        bytes32 indexed previousMerkleRoot,\\n        bytes32 indexed newMerkleRoot,\\n        string[] publicKeyURI,\\n        string allowListURI\\n    );\\n\\n    /**\\n     * @dev An event with updated drop URI for an nft contract.\\n     */\\n    event DropURIUpdated(address indexed nftContract, string newDropURI);\\n\\n    /**\\n     * @dev An event with the updated creator payout address for an nft\\n     *      contract.\\n     */\\n    event CreatorPayoutAddressUpdated(\\n        address indexed nftContract,\\n        address indexed newPayoutAddress\\n    );\\n\\n    /**\\n     * @dev An event with the updated allowed fee recipient for an nft\\n     *      contract.\\n     */\\n    event AllowedFeeRecipientUpdated(\\n        address indexed nftContract,\\n        address indexed feeRecipient,\\n        bool indexed allowed\\n    );\\n\\n    /**\\n     * @dev An event with the updated validation parameters for server-side\\n     *      signers.\\n     */\\n    event SignedMintValidationParamsUpdated(\\n        address indexed nftContract,\\n        address indexed signer,\\n        SignedMintValidationParams signedMintValidationParams\\n    );   \\n\\n    /**\\n     * @dev An event with the updated payer for an nft contract.\\n     */\\n    event PayerUpdated(\\n        address indexed nftContract,\\n        address indexed payer,\\n        bool indexed allowed\\n    );\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ISeaDropTokenContractMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport { IERC2981 } from \\\"lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol\\\";\\n\\ninterface ISeaDropTokenContractMetadata is IERC2981 {\\n    /**\\n     * @notice Throw if the max supply exceeds uint64, a limit\\n     *         due to the storage of bit-packed variables in ERC721A.\\n     */\\n    error CannotExceedMaxSupplyOfUint64(uint256 newMaxSupply);\\n\\n    /**\\n     * @dev Revert with an error when attempting to set the provenance\\n     *      hash after the mint has started.\\n     */\\n    error ProvenanceHashCannotBeSetAfterMintStarted();\\n\\n    /**\\n     * @dev Revert if the royalty basis points is greater than 10_000.\\n     */\\n    error InvalidRoyaltyBasisPoints(uint256 basisPoints);\\n\\n    /**\\n     * @dev Revert if the royalty address is being set to the zero address.\\n     */\\n    error RoyaltyAddressCannotBeZeroAddress();\\n\\n    /**\\n     * @dev Emit an event for token metadata reveals/updates,\\n     *      according to EIP-4906.\\n     *\\n     * @param _fromTokenId The start token id.\\n     * @param _toTokenId   The end token id.\\n     */\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n\\n    /**\\n     * @dev Emit an event when the URI for the collection-level metadata\\n     *      is updated.\\n     */\\n    event ContractURIUpdated(string newContractURI);\\n\\n    /**\\n     * @dev Emit an event when the max token supply is updated.\\n     */\\n    event MaxSupplyUpdated(uint256 newMaxSupply);\\n\\n    /**\\n     * @dev Emit an event with the previous and new provenance hash after\\n     *      being updated.\\n     */\\n    event ProvenanceHashUpdated(bytes32 previousHash, bytes32 newHash);\\n\\n    /**\\n     * @dev Emit an event when the royalties info is updated.\\n     */\\n    event RoyaltyInfoUpdated(address receiver, uint256 bps);\\n\\n    /**\\n     * @notice A struct defining royalty info for the contract.\\n     */\\n    struct RoyaltyInfo {\\n        address royaltyAddress;\\n        uint96 royaltyBps;\\n    }\\n\\n    /**\\n     * @notice Sets the base URI for the token metadata and emits an event.\\n     *\\n     * @param tokenURI The new base URI to set.\\n     */\\n    function setBaseURI(string calldata tokenURI) external;\\n\\n    /**\\n     * @notice Sets the contract URI for contract metadata.\\n     *\\n     * @param newContractURI The new contract URI.\\n     */\\n    function setContractURI(string calldata newContractURI) external;\\n\\n    /**\\n     * @notice Sets the max supply and emits an event.\\n     *\\n     * @param newMaxSupply The new max supply to set.\\n     */\\n    function setMaxSupply(uint256 newMaxSupply) external;\\n\\n    /**\\n     * @notice Sets the provenance hash and emits an event.\\n     *\\n     *         The provenance hash is used for random reveals, which\\n     *         is a hash of the ordered metadata to show it has not been\\n     *         modified after mint started.\\n     *\\n     *         This function will revert after the first item has been minted.\\n     *\\n     * @param newProvenanceHash The new provenance hash to set.\\n     */\\n    function setProvenanceHash(bytes32 newProvenanceHash) external;\\n\\n    /**\\n     * @notice Sets the address and basis points for royalties.\\n     *\\n     * @param newInfo The struct to configure royalties.\\n     */\\n    function setRoyaltyInfo(RoyaltyInfo calldata newInfo) external;\\n\\n    /**\\n     * @notice Returns the base URI for token metadata.\\n     */\\n    function baseURI() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the contract URI.\\n     */\\n    function contractURI() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the max token supply.\\n     */\\n    function maxSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the provenance hash.\\n     *         The provenance hash is used for random reveals, which\\n     *         is a hash of the ordered metadata to show it is unmodified\\n     *         after mint has started.\\n     */\\n    function provenanceHash() external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns the address that receives royalties.\\n     */\\n    function royaltyAddress() external view returns (address);\\n\\n    /**\\n     * @notice Returns the royalty basis points out of 10_000.\\n     */\\n    function royaltyBasisPoints() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": false,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CreatorPayoutAddressCannotBeZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DuplicateFeeRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DuplicatePayer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeRecipientCannotBeZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeRecipientNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeRecipientNotPresent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"got\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"want\",\"type\":\"uint256\"}],\"name\":\"IncorrectPayment\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeBps\",\"type\":\"uint256\"}],\"name\":\"InvalidFeeBps\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recoveredSigner\",\"type\":\"address\"}],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"got\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximum\",\"type\":\"uint256\"}],\"name\":\"InvalidSignedEndTime\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"got\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumOrMaximum\",\"type\":\"uint256\"}],\"name\":\"InvalidSignedFeeBps\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"got\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximum\",\"type\":\"uint256\"}],\"name\":\"InvalidSignedMaxTokenSupplyForStage\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"got\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximum\",\"type\":\"uint256\"}],\"name\":\"InvalidSignedMaxTotalMintableByWallet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"got\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"}],\"name\":\"InvalidSignedMintPrice\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"got\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"}],\"name\":\"InvalidSignedStartTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintQuantityCannotBeZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowed\",\"type\":\"uint256\"}],\"name\":\"MintQuantityExceedsMaxMintedPerWallet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"}],\"name\":\"MintQuantityExceedsMaxSupply\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokenSupplyForStage\",\"type\":\"uint256\"}],\"name\":\"MintQuantityExceedsMaxTokenSupplyForStage\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"NotActive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"OnlyINonFungibleSeaDropToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PayerCannotBeZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PayerNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PayerNotPresent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureAlreadyUsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignedMintsMustRestrictFeeRecipients\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignerCannotBeZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignerNotPresent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenGatedDropAllowedNftTokenCannotBeDropToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenGatedDropAllowedNftTokenCannotBeZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenGatedDropStageNotPresent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedNftToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowedNftTokenId\",\"type\":\"uint256\"}],\"name\":\"TokenGatedNotTokenOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedNftToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowedNftTokenId\",\"type\":\"uint256\"}],\"name\":\"TokenGatedTokenIdAlreadyRedeemed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousMerkleRoot\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newMerkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"publicKeyURI\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"allowListURI\",\"type\":\"string\"}],\"name\":\"AllowListUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"AllowedFeeRecipientUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPayoutAddress\",\"type\":\"address\"}],\"name\":\"CreatorPayoutAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newDropURI\",\"type\":\"string\"}],\"name\":\"DropURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"PayerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint80\",\"name\":\"mintPrice\",\"type\":\"uint80\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"endTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"maxTotalMintableByWallet\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"feeBps\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"restrictFeeRecipients\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct PublicDrop\",\"name\":\"publicDrop\",\"type\":\"tuple\"}],\"name\":\"PublicDropUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantityMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitMintPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeBps\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dropStageIndex\",\"type\":\"uint256\"}],\"name\":\"SeaDropMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint80\",\"name\":\"minMintPrice\",\"type\":\"uint80\"},{\"internalType\":\"uint24\",\"name\":\"maxMaxTotalMintableByWallet\",\"type\":\"uint24\"},{\"internalType\":\"uint40\",\"name\":\"minStartTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"maxEndTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"maxMaxTokenSupplyForStage\",\"type\":\"uint40\"},{\"internalType\":\"uint16\",\"name\":\"minFeeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxFeeBps\",\"type\":\"uint16\"}],\"indexed\":false,\"internalType\":\"struct SignedMintValidationParams\",\"name\":\"signedMintValidationParams\",\"type\":\"tuple\"}],\"name\":\"SignedMintValidationParamsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"allowedNftToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint80\",\"name\":\"mintPrice\",\"type\":\"uint80\"},{\"internalType\":\"uint16\",\"name\":\"maxTotalMintableByWallet\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"endTime\",\"type\":\"uint48\"},{\"internalType\":\"uint8\",\"name\":\"dropStageIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"maxTokenSupplyForStage\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"feeBps\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"restrictFeeRecipients\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct TokenGatedDropStage\",\"name\":\"dropStage\",\"type\":\"tuple\"}],\"name\":\"TokenGatedDropStageUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"getAllowListMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"getAllowedFeeRecipients\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedNftToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowedNftTokenId\",\"type\":\"uint256\"}],\"name\":\"getAllowedNftTokenIdIsRedeemed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"getCreatorPayoutAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"getFeeRecipientIsAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"}],\"name\":\"getPayerIsAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"getPayers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"getPublicDrop\",\"outputs\":[{\"components\":[{\"internalType\":\"uint80\",\"name\":\"mintPrice\",\"type\":\"uint80\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"endTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"maxTotalMintableByWallet\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"feeBps\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"restrictFeeRecipients\",\"type\":\"bool\"}],\"internalType\":\"struct PublicDrop\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"getSignedMintValidationParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint80\",\"name\":\"minMintPrice\",\"type\":\"uint80\"},{\"internalType\":\"uint24\",\"name\":\"maxMaxTotalMintableByWallet\",\"type\":\"uint24\"},{\"internalType\":\"uint40\",\"name\":\"minStartTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"maxEndTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"maxMaxTokenSupplyForStage\",\"type\":\"uint40\"},{\"internalType\":\"uint16\",\"name\":\"minFeeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxFeeBps\",\"type\":\"uint16\"}],\"internalType\":\"struct SignedMintValidationParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"getSigners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"getTokenGatedAllowedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedNftToken\",\"type\":\"address\"}],\"name\":\"getTokenGatedDrop\",\"outputs\":[{\"components\":[{\"internalType\":\"uint80\",\"name\":\"mintPrice\",\"type\":\"uint80\"},{\"internalType\":\"uint16\",\"name\":\"maxTotalMintableByWallet\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"endTime\",\"type\":\"uint48\"},{\"internalType\":\"uint8\",\"name\":\"dropStageIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"maxTokenSupplyForStage\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"feeBps\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"restrictFeeRecipients\",\"type\":\"bool\"}],\"internalType\":\"struct TokenGatedDropStage\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minterIfNotPayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mintPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalMintableByWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dropStageIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokenSupplyForStage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeBps\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"restrictFeeRecipients\",\"type\":\"bool\"}],\"internalType\":\"struct MintParams\",\"name\":\"mintParams\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"mintAllowList\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minterIfNotPayer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"allowedNftToken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"allowedNftTokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct TokenGatedMintParams\",\"name\":\"mintParams\",\"type\":\"tuple\"}],\"name\":\"mintAllowedTokenHolder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minterIfNotPayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"mintPublic\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minterIfNotPayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mintPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalMintableByWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dropStageIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokenSupplyForStage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeBps\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"restrictFeeRecipients\",\"type\":\"bool\"}],\"internalType\":\"struct MintParams\",\"name\":\"mintParams\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mintSigned\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"string[]\",\"name\":\"publicKeyURIs\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"allowListURI\",\"type\":\"string\"}],\"internalType\":\"struct AllowListData\",\"name\":\"allowListData\",\"type\":\"tuple\"}],\"name\":\"updateAllowList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"updateAllowedFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payoutAddress\",\"type\":\"address\"}],\"name\":\"updateCreatorPayoutAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dropURI\",\"type\":\"string\"}],\"name\":\"updateDropURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"updatePayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint80\",\"name\":\"mintPrice\",\"type\":\"uint80\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"endTime\",\"type\":\"uint48\"},{\"internalType\":\"uint16\",\"name\":\"maxTotalMintableByWallet\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"feeBps\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"restrictFeeRecipients\",\"type\":\"bool\"}],\"internalType\":\"struct PublicDrop\",\"name\":\"publicDrop\",\"type\":\"tuple\"}],\"name\":\"updatePublicDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint80\",\"name\":\"minMintPrice\",\"type\":\"uint80\"},{\"internalType\":\"uint24\",\"name\":\"maxMaxTotalMintableByWallet\",\"type\":\"uint24\"},{\"internalType\":\"uint40\",\"name\":\"minStartTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"maxEndTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"maxMaxTokenSupplyForStage\",\"type\":\"uint40\"},{\"internalType\":\"uint16\",\"name\":\"minFeeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxFeeBps\",\"type\":\"uint16\"}],\"internalType\":\"struct SignedMintValidationParams\",\"name\":\"signedMintValidationParams\",\"type\":\"tuple\"}],\"name\":\"updateSignedMintValidationParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allowedNftToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint80\",\"name\":\"mintPrice\",\"type\":\"uint80\"},{\"internalType\":\"uint16\",\"name\":\"maxTotalMintableByWallet\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"endTime\",\"type\":\"uint48\"},{\"internalType\":\"uint8\",\"name\":\"dropStageIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"maxTokenSupplyForStage\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"feeBps\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"restrictFeeRecipients\",\"type\":\"bool\"}],\"internalType\":\"struct TokenGatedDropStage\",\"name\":\"dropStage\",\"type\":\"tuple\"}],\"name\":\"updateTokenGatedDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SeaDrop", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}