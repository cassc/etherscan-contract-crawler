{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/FantazyV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// File: contracts/FantazyV2.sol\\n\\n/**\\n * @author Vijay Sugali\\n * @name FantazyV2\\n * @description to support all fantasy sports\\n */\\n\\npragma solidity 0.8.19;\\n// import \\\"hardhat/console.sol\\\";\\n\\n/**\\n * Imports -\\n *     -> Ownable - to have ownership to the contract\\n *     -> ReentrancyGuard - to avoid reentrancy attacks\\n *     -> Pausable - to pause vulnerability is exposed\\n */\\ncontract FantazyV2 is Ownable, ReentrancyGuard, Pausable {\\n    /* To have secure ERC20 transfers */\\n    using SafeERC20 for IERC20;\\n\\n    /* Range of minimum and maximum */\\n    struct Range {\\n        uint8 minimum;\\n        uint8 maximum;\\n    }\\n\\n    /* \\n        Team criteria:\\n            -> totalPlayers - minimum and maximum players to be selected\\n            -> eachTeam     - minimum and maximum players to be selected by each team\\n            -> categoryN    - minimum and maximum players to be selected for Nth category\\n        Note that for \\n            -> cricket has four categories - \\n                => wicket keeper, \\n                => batsman, \\n                => all rounder, \\n                => bowler\\n            -> soccer has four categories - \\n                => Goal keeper,\\n                => Defender,\\n                => Midfielder,\\n                => Forward\\n            -> kabbadi has three categories -\\n                => Raider,\\n                => Allrounder,\\n                => Defender\\n            -> Baseball has four categories -\\n                => Outfielder,\\n                => Infielder,\\n                => Pitcher,\\n                => Catcher\\n            -> Basketball has five categories -\\n                => Point guard,\\n                => Shotting guard,\\n                => Small forward,\\n                => Power forward,\\n                => Center\\n            -> NFL has five categories -\\n                => Quarterback\\n                => Runningback\\n                => Wide Receiver\\n                => Tight end\\n                => Defense\\n            -> Hockey has four categories -\\n                => Goal keeper\\n                => Defender\\n                => Midfielder\\n                => Striker\\n            -> Hand ball has three categories -\\n                => Goal keeper\\n                => Defender\\n                => Forward\\n            -> Volley ball has five categories -\\n                => Libero\\n                => Setter\\n                => Blocker\\n                => Attacker\\n                => Universal\\n     */\\n    struct TeamCriteria {\\n        Range totalPlayers;\\n        Range eachTeam;\\n        Range category1;\\n        Range category2;\\n        Range category3;\\n        Range category4;\\n        Range category5;\\n    }\\n\\n    /* \\n        Sport Struct -\\n            -> name                 :   Name of the sport\\n            -> captainMultiplier    :   multiplier for captain player (Eg: 20)\\n            -> viceCaptainMultiplier:   multiplier for vice captain   (Eg: 15)\\n            -> teamCriteria         :   Team criteria for all teams in the sport\\n    */\\n    struct Sport {\\n        string name;\\n        uint256 captainMultiplier;\\n        uint256 viceCaptainMultiplier;\\n        TeamCriteria teamCriteria;\\n    }\\n    /* mapping for each sport data :: sport id to sport */\\n    mapping(uint256 => Sport) private sportData;\\n    /* mapping to get if sport exist :: sportId to bool */\\n    mapping(uint256 => bool) private hasSport;\\n    /* primary state for sports count in Fantazy */\\n    uint256 public sportsCount;\\n\\n    /* \\n        Currency Struct -\\n            -> name                         :   Name of the currency\\n            -> erc20                        :   Contract address if it is ERC20 crypto token\\n            -> decimals                     :   Decimals of the currency\\n            -> isErc20                      :   True if erc20 else false\\n            -> protocolBonusStakedAmount    :   Amount spent by Fantazy for users in the form of discounts on joining pools\\n            -> protocolPaidStakedAmount     :   Amount spent by users for joining pools\\n    */\\n    struct Currency {\\n        string name;\\n        address erc20;\\n        uint256 decimals;\\n        bool isErc20;\\n        uint256 protocolBonusStakedAmount;\\n        uint256 protocolPaidStakedAmount;\\n    }\\n    /* mapping for each currency :: currency id to currency */\\n    mapping(uint256 => Currency) private currencyData;\\n    /* mapping to get if currency exist :: currencyId to bool */\\n    mapping(uint256 => bool) private hasCurrency;\\n    /* total number of Currency supported */\\n    uint256 public currenciesCount;\\n\\n    /*\\n        Player Struct -\\n            -> category :   Category of the player\\n            -> team     :   team of the player (Eg: A or B as 1 or 2)\\n            -> points   :   Fantazy points in a match\\n    */\\n    struct Player {\\n        uint8 category;\\n        uint8 team; \\n        uint256 points;\\n    }\\n\\n    /* \\n        Event Struct -\\n            -> eventName    :   Name of the match\\n            -> sportId      :   ID of the sport that event belongs to\\n            -> startTime    :   Time when match starts\\n            -> teamAsquad   :   Player Ids of Team A squad\\n            -> teamBsquad   :   Player Ids of Team B squad\\n    */\\n    struct Event {\\n        string eventName;\\n        uint256 sportId;\\n        uint256 startTime;\\n        uint256[] teamAsquad;\\n        uint256[] teamBsquad;\\n    }\\n    /* mapping for each event :: eventId to Event */\\n    mapping(uint256 => Event) private eventData;\\n    /* mapping from event id to player id to player struct */\\n    mapping(uint256 => mapping(uint256 => Player)) private playerData;\\n\\n    /* \\n        PrizeBucket Struct -\\n            -> from     :   Rank range left\\n            -> to       :   Rank range right\\n            -> amount   :   Prize amount for this rank range\\n    */\\n    struct PrizeBucket {\\n        uint256 from;\\n        uint256 to;\\n        uint256 amount;\\n    }\\n\\n    /* \\n        Pool Struct -\\n            -> eventId                      :   ID of the match\\n            -> contestType                  :   Type of the contest, 1 - grand and 2 - H2H\\n            -> currencyId                   :   ID of the currency\\n            -> entryFee                     :   Entry fee to join the pool\\n            -> discountPercentNumerator     :   Discount that platform gives to join pool (Numerator value)\\n            -> discountPercentDenominator   :   DIscount that platform gives to join pool (Denominator value)\\n            -> teamsJoinedCount             :   How many people joined the pool\\n            -> paidStakedAmount             :   How much of amount people paid by themselves\\n            -> bonusStakedAmount            :   How much of amount platform gave discount to teams to join pool\\n            -> paidStakedClaimedAmount      :   Amount of which winners claimed their paid amount back\\n            -> bonusStakedClaimedAmount     :   Amount of which platform claims its discounted amount back\\n            -> joinTeamsLimit               :   how many teams can a user create per pool\\n            -> poolLimit                    :   Minimum and maximum pool limit\\n            -> winningsTable                :   Prize distribution table\\n            -> isWinningsTableUpdated       :   True if pool didnt fill full and distribution table updated, else false\\n            -> isCommissionWithdrawn        :   True if commission withdrawn for this pool\\n    */\\n    struct Pool {\\n        uint256 eventId;\\n        uint256 contestType; \\n        uint256 currencyId;\\n        uint256 entryFee;\\n        uint256 discountPercentNumerator;\\n        uint256 discountPercentDenominator;\\n        uint256 teamsJoinedCount;\\n        uint256 paidStakedAmount;\\n        uint256 bonusStakedAmount;\\n        uint256 paidStakedClaimedAmount;\\n        uint256 bonusStakedClaimedAmount;\\n        uint256 joinTeamsLimit;\\n        Range poolLimit;\\n        PrizeBucket[20] winningsTable;\\n        bool isWinningsTableUpdated;\\n        bool isCommissionWithdrawn;\\n    }\\n    /* mapping for each pool :: poolId to Pool */\\n    mapping(uint256 => Pool) private poolData;\\n    /* \\n        mapping to find an user total teams joined in a pool.\\n        poolId to user address to teamsCount \\n    */\\n    mapping(uint256 => mapping(address => uint256)) private joinTeamsCount;\\n    /* \\n        mapping to find if a team is participated in pool.\\n        teamId to poolId to bool \\n    */\\n    mapping(uint256 => mapping(uint256 => bool)) public isTeamParticipated;\\n\\n    /* \\n        Team Struct -\\n            -> user                 :   Address of the owner of the team\\n            -> teamName             :   Name of the team\\n            -> eventId              :   ID of the match\\n            -> selectedCaptain      :   Player ID of the captain selected\\n            -> selectedViceCaptain  :   Player ID of the vice-captain selected\\n            -> totalPlayersCount    :   No. of players selected in the team\\n            -> teamACount           :   No. of players selected in the team from team A\\n            -> teamBCount           :   No. of players selected in the team from team B\\n            -> category1Count       :   No. of players selected in the team from category 1\\n            -> category2Count       :   No. of players selected in the team from category 2\\n            -> category3Count       :   No. of players selected in the team from category 3\\n            -> category4Count       :   No. of players selected in the team from category 4\\n            -> category5Count       :   No. of players selected in the team from category 5\\n            -> selectedPlayers      :   Array of player IDs selected in the team\\n    */\\n    struct Team {\\n        address user;\\n        string teamName;\\n        uint256 eventId;\\n        uint256 selectedCaptain;\\n        uint256 selectedViceCaptain;\\n        uint256 totalPlayersCount;\\n        uint256 teamACount;\\n        uint256 teamBCount;\\n        uint256 category1Count;\\n        uint256 category2Count;\\n        uint256 category3Count;\\n        uint256 category4Count;\\n        uint256 category5Count;\\n        uint256[] selectedPlayers;\\n    }\\n    /* mapping for each team :: teamId to Team */\\n    mapping(uint256 => Team) private teamData;\\n    /* mapping to know if refund claimed for pool :: poolId to teamId to bool */\\n    mapping(uint256 => mapping(uint256 => bool)) public isFeeRefunded;\\n    /* mapping to know if prize claimed for pool :: poolId to teamId to bool */\\n    mapping(uint256 => mapping(uint256 => bool)) public isPrizeClaimed;\\n    /* \\n        mapping to know which payment type chosen to join in pool \\n        teamId to poolId to paidPaymentType\\n    */\\n   mapping(uint256 => mapping(uint256 => uint256)) public paidPaymentType;\\n\\n    /* \\n        Commission Struct -\\n            Fantazy commission percentage in fraction \\n            -> numerator    :   numerator of the percentage fraction\\n            -> denominator  :   denominator of the percentage fraction\\n    */\\n    struct Commission {\\n        uint256 numerator;\\n        uint256 denominator;\\n    }\\n\\n    /* Other declarations */\\n    /* protocol commission */\\n    Commission public protocolCommission;\\n    /* matic received to the contract */\\n    uint256 private receivedAmount;\\n    /* number of events happenned in Fantazy */\\n    uint256 public eventsCount;\\n    /* number of pools created in Fantazy */\\n    uint256 public poolsCount;\\n    /* number of teams created in Fantazy */\\n    uint256 public teamsCount;\\n    /* number of users created in Fantazy */\\n    uint256 public usersCount;\\n    /* App's homepage URL */\\n    string public appUrl;\\n    /* \\n        mapping to maintain usersCount properly\\n        address to bool\\n    */\\n    mapping(address => bool) private isFantazyUser;\\n\\n    /*\\n        InsertTeam Event -\\n            when someone created a team outside from dapp, \\n            purposes used:\\n                1. their details are collected to blacklist claim operation later\\n                2. when app was down to recollect the teams data\\n            -> _teamId          :   ID of the team\\n            -> _eventId         :   ID of the event\\n            -> _user            :   Address of the owner of the team\\n            -> _insertType      :   1 for creating new team, 2 for updating the existing team\\n            -> _timestamp       :   Timestamp when team is created or updated\\n    */\\n    event InsertTeam(\\n        uint256 indexed _teamId,\\n        uint256 indexed _eventId,\\n        address indexed _user,\\n        uint256 _insertType,\\n        uint256 _timestamp\\n    );\\n\\n    /*\\n        JoinContest Event -\\n            when someone joined a contest outside from dapp,\\n            purposes used:\\n                1. their details are collected to blacklist claim operation later\\n                2. when app was down to recollect the teams data\\n            -> _teamId      :   ID of the team\\n            -> _poolId      :   ID of the pool\\n            -> _paymentType :   Type of the payment, 1 for crypto wallet, 2 for bonus wallet\\n            -> _user        :   Address of the user joined the contest\\n            -> _timestamp   :   Timestamp when team has joined\\n    */\\n    event JoinContest(\\n        uint256 indexed _teamId,\\n        uint256 indexed _poolId,\\n        uint256 _paymentType,\\n        address indexed _user,\\n        uint256 _timestamp\\n    );\\n\\n    /* \\n        Claim Event -\\n            when someone claimed from outside dapp,\\n            purposes used:\\n                1. their details are collected to saved for later decision\\n                2. when app was down to recollect the claim data\\n            -> _teamId      :   ID of the team\\n            -> _poolId      :   ID of the pool\\n            -> _user        :   Address of the user claimed\\n            -> _amount      :   Amount of prizes/refund claimed\\n            -> _timestamp   :   Timestamp when claim has happenned\\n    */\\n    event Claim(\\n        uint256 indexed _teamId,\\n        uint256 indexed _poolId,\\n        address indexed _user,\\n        uint256 _amount,\\n        uint256 _timestamp\\n    );\\n\\n\\n    /// A Custom error occurred in smart contract with `errorId`\\n    error CustomError(uint256 errorId);\\n\\n    /* \\n        Constructor -\\n            ->  _sportsCount            :   No. of sports enrolled in Fantazy before versions\\n            ->  _eventsCount            :   No. of events enrolled in Fantazy before versions\\n            ->  _poolsCount             :   No. of pools enrolled in Fantazy before versions\\n            ->  _teamsCount             :   No. of teams enrolled in Fantazy before versions\\n            ->  _usersCount             :   No. of users enrolled in Fantazy before versions\\n            ->  _commissionNumerator    :   Protocol commission from every pool in fraction (Numerator)\\n            ->  _commissionDenominator  :   Protocol commission from every pool in fraction (Denominator)\\n            ->  _appUrl                 :   Fantazy website homepage URL\\n    */\\n    constructor(\\n        uint256 _sportsCount,\\n        uint256 _eventsCount,\\n        uint256 _poolsCount,\\n        uint256 _teamsCount,\\n        uint256 _usersCount,\\n        uint256 _commissionNumerator,\\n        uint256 _commissionDenominator,\\n        string memory _appUrl\\n    ) {\\n        sportsCount = _sportsCount;\\n        eventsCount = _eventsCount;\\n        poolsCount = _poolsCount;\\n        teamsCount = _teamsCount;\\n        usersCount = _usersCount;\\n        protocolCommission = Commission(\\n            _commissionNumerator,\\n            _commissionDenominator\\n        );\\n        appUrl = _appUrl;\\n    }\\n\\n    /* To monitor how much matic contract received */\\n    receive() external payable {\\n        receivedAmount += msg.value;\\n    }\\n\\n    /* To pause all contract operations at once */\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    /* To resume all contract operations at once */\\n    function unPause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev changeData is to change important contract data,\\n     *      only owner of the contract can call\\n     *      it is advisable to pause the contract \\n     *      and execute this function to have integrity of contract info like eventsCount, poolsCount, usersCount, teamsCount\\n     * @param _appUrl is the homepage URL of Fantazy website\\n     * @param _commissionNumerator is the commission that platform gets from every pool in fraction(numerator)\\n     * @param _commissionDenominator is the commission that platform gets from every pool in fraction(denominator)\\n     */\\n    function changeData(string memory _appUrl, uint256 _commissionNumerator, uint256 _commissionDenominator) public onlyOwner{\\n        appUrl = _appUrl;\\n        protocolCommission.numerator = _commissionNumerator;\\n        protocolCommission.denominator = _commissionDenominator;\\n    }\\n\\n    /**\\n     * @dev insertSportData is to create and edit sport data\\n     *      while updating sport data,\\n     *      make sure you update all fields along with field you want to edit\\n     * @param _name is the name of the sport\\n     * @param _sportId is the ID of the sport\\n     * @param _captainMultiplier is the multiplier for captain (Eg: 20)\\n     * @param _viceCaptainMultiplier is the multiplier for vice captain (Eg: 15)\\n     * @param _teamCriteria is the rules of team creation, visit TeamCriteria struct\\n     */\\n    function insertSportData(\\n        string memory _name,\\n        uint256 _sportId,\\n        uint256 _captainMultiplier,\\n        uint256 _viceCaptainMultiplier,\\n        // uint256 _userTeamsLimit,\\n        TeamCriteria calldata _teamCriteria\\n    ) public onlyOwner nonReentrant whenNotPaused {\\n        /* check if sport is already added, if not add it */\\n        if (!hasSport[_sportId]) {\\n            sportsCount++;\\n            hasSport[_sportId] = true;\\n        }\\n        /* create or modify sport data */\\n        sportData[_sportId] = Sport(\\n            _name,\\n            _captainMultiplier,\\n            _viceCaptainMultiplier,\\n            // _userTeamsLimit,\\n            _teamCriteria\\n        );\\n    }\\n\\n    /**\\n     * @dev insertCurrencyData\\n     * @param _name is the name of the Currency\\n     * @param _currencyId is the ID of the currency\\n     * @param _erc20 is the contract address of erc20 crypto token\\n     * @param _decimals is the number of decimals of erc20 crypto token\\n     * @param _isErc20 is the boolean, true if currency is erc20 crypto token else false\\n     */\\n    function insertCurrencyData(\\n        string memory _name,\\n        uint256 _currencyId,\\n        address _erc20,\\n        uint256 _decimals,\\n        bool _isErc20\\n    ) public onlyOwner nonReentrant whenNotPaused {\\n        /* if currency is not yet added, add it */\\n        if (!hasCurrency[_currencyId]) {\\n            currenciesCount++;\\n            hasCurrency[_currencyId] = true;\\n        }\\n        /* create or modify currency info */\\n        currencyData[_currencyId] = Currency(\\n            _name,\\n            _erc20,\\n            _decimals,\\n            _isErc20,\\n            0,\\n            0\\n        );\\n    }\\n\\n    /**\\n     * @dev addNewEvent is to add new match live on contract\\n     *      only owner can call this function\\n     *      only when contract is not paused this function will be success\\n     * @param _sportId is the ID of the sport\\n     * @param _eventId is the ID of the match\\n     * @param _startTime is the match start time\\n     * @param _eventName is the name of the match\\n     * @param _teamAsquad is the array of player IDs of team A squad\\n     * @param _teamAsquadCategories is the respective categories of all player IDs of team A squad\\n     * @param _teamBsquad is the array of player IDs of team B squad\\n     * @param _teamBsquadCategories is the respective categories of all player IDs of team B squad\\n     */\\n    function addNewEvent(\\n        uint256 _sportId,\\n        uint256 _eventId,\\n        uint256 _startTime,\\n        string memory _eventName,\\n        uint256[] calldata _teamAsquad,\\n        uint8[] calldata _teamAsquadCategories,\\n        uint256[] calldata _teamBsquad,\\n        uint8[] calldata _teamBsquadCategories\\n    ) public onlyOwner nonReentrant whenNotPaused {\\n        /* necessary conditions */\\n        if(\\n            /* start time should always be greater than current time */\\n            _startTime <= block.timestamp ||\\n            /* event with same event id shold not be present */\\n            eventData[_eventId].startTime != 0 ||\\n            /* team A squad and its categories should be of same length */\\n            _teamAsquad.length != _teamAsquadCategories.length ||\\n            /* team B squad and its categories should be of same length */\\n            _teamBsquad.length != _teamBsquadCategories.length\\n        ){\\n            /* Fantazy :: Invalid event details */\\n            revert CustomError(7);\\n        }\\n        /* update event data */\\n        eventData[_eventId] = Event(\\n            _eventName,\\n            _sportId,\\n            _startTime,\\n            _teamAsquad,\\n            _teamBsquad\\n        );\\n        /* update player categories and team for this event for Team A squad */\\n        for (uint256 i = 0; i < _teamAsquad.length; i++) {\\n            playerData[_eventId][_teamAsquad[i]] = Player(\\n                _teamAsquadCategories[i],\\n                1,\\n                0\\n            );\\n        }\\n        /* update player categories and team for this event for Team B squad */\\n        for (uint256 i = 0; i < _teamBsquad.length; i++) {\\n            playerData[_eventId][_teamBsquad[i]] = Player(\\n                _teamBsquadCategories[i],\\n                2,\\n                0\\n            );\\n        }\\n        /* increment the events count */\\n        eventsCount++;\\n    }\\n\\n    /**\\n     * @dev insertPlayerPoints to insert fantasy points of all players after match is ended\\n     *      only owner can call this function\\n     *      only when contract is not paused this function will be success\\n     * @param _eventId is the ID of the event\\n     * @param _playerIds is the array of player IDs\\n     * @param _playerPoints is the array of player points of respective player IDs \\n     */\\n    function insertPlayerPoints(\\n        uint256 _eventId,\\n        uint256[] calldata _playerIds,\\n        uint256[] calldata _playerPoints\\n    ) public onlyOwner nonReentrant whenNotPaused {\\n        /* loop through each player and assign player points */\\n        for (uint256 i = 0; i < _playerIds.length; i++) {\\n            playerData[_eventId][_playerIds[i]].points = _playerPoints[i];\\n        }\\n    }\\n\\n    /**\\n     * @dev updateWinnings is to update distribution table accordingly if pool is not filled\\n     *      please not that this should be called only after match is started based on pool attendance\\n     *      only owner can call this function\\n     *      only when contract is not paused this function will be success\\n     * @param _poolId is the ID of the pool\\n     * @param _winningsTable is the updated distribution table\\n     */\\n    function updateWinnings(\\n        uint256 _poolId,\\n        PrizeBucket[] calldata _winningsTable\\n    ) public onlyOwner nonReentrant whenNotPaused {\\n        if(\\n            /* pool should exist to update the winnings */\\n            poolData[_poolId].eventId == 0 ||\\n            /* teams joined on pool should not fill the pool */\\n            poolData[_poolId].poolLimit.maximum ==\\n            poolData[_poolId].teamsJoinedCount\\n        ){\\n            /* Fantazy :: Invalid winnings table details */\\n            revert CustomError(8);\\n        }\\n        /* total pool amount collected */\\n        uint256 totalPoolAmount = poolData[_poolId].entryFee *\\n            poolData[_poolId].teamsJoinedCount;\\n        /* platform commission for every pool */\\n        uint256 poolPlatformCommission = (totalPoolAmount *\\n            protocolCommission.numerator) / protocolCommission.denominator;\\n        /* prize amount to distribute to winners */\\n        uint256 distributionAmount = totalPoolAmount - poolPlatformCommission;\\n        /* monitor the cumulative winning amount mentioned in distribution table */\\n        uint256 winningsAmount = 0;\\n        /* to make sure rank ranges are incremental */\\n        uint256 bucketStart;\\n        /* loop through each row of distribution table and cumulate the amount */\\n        for (uint8 i = 0; i < _winningsTable.length; i++) {\\n            if(\\n                /* rank range (left) should not be zero */\\n                _winningsTable[i].from == 0 ||\\n                /* rank range (right) should not be less than rank range (left) */\\n                _winningsTable[i].to < _winningsTable[i].from ||\\n                /* rank range (left) should be greater than previous row rank range (right) */\\n                _winningsTable[i].from <= bucketStart\\n            ){\\n                /* Fantazy :: Invalid winnings table */\\n                revert CustomError(9);\\n            }\\n            /* if rank range left and right are same then cumulate the amount for one team  */\\n            if (_winningsTable[i].from == _winningsTable[i].to) {\\n                winningsAmount += _winningsTable[i].amount;\\n            /* if rank range left and right are not same then cumulate the amount for no. of teams in the rank range */\\n            } else if (_winningsTable[i].from != _winningsTable[i].to) {\\n                winningsAmount +=\\n                    (_winningsTable[i].to - _winningsTable[i].from + 1) *\\n                    _winningsTable[i].amount;\\n            }\\n            /* update bucketStart to rank range right */\\n            bucketStart = _winningsTable[i].to;\\n            /* update the distribution table row */\\n            poolData[_poolId].winningsTable[i] = _winningsTable[i];\\n        }\\n        /* check if cumulative amount is equals to the prize amount allotted for distribution */\\n        if(winningsAmount != distributionAmount){\\n            /* Fantazy :: Invalid distribution table */\\n            revert CustomError(1);\\n        }\\n        /* update pool data with isWinningsTableUpdated */\\n        poolData[_poolId].isWinningsTableUpdated = true;\\n    }\\n\\n    /**\\n     * @dev addNewPool is used to add a new pool\\n     *      only owner can call this function\\n     *      only when contract is not paused this function will be success\\n     * @param _eventId is the event ID of the match\\n     * @param _poolId is the pool ID of the pool\\n     * @param _contestType is the type of the contest, 1 for grand pool, 2 for H2H pool\\n     * @param _currencyId is the ID of the currency, Eg: 1 for matic, 2 for USDT\\n     * @param _entryFee is the entry fee to join the pool\\n     * @param _poolLimit is the minimum and maximum limit no. of teams to join in pool\\n     * @param _discountPercentNumerator is the discount in entry fee for the pool in fraction (numerator)\\n     * @param _discountPercentDenominator is the discount in entry fee for the pool in fraction (denominator)\\n     * @param _winningsTable is the distribution table for the pool considering pool will fill\\n     */\\n    function addNewPool(\\n        uint256 _eventId,\\n        uint256 _poolId,\\n        uint256 _contestType,\\n        uint256 _currencyId,\\n        uint256 _entryFee,\\n        uint256 _userTeamsLimit,\\n        Range calldata _poolLimit,\\n        uint256 _discountPercentNumerator,\\n        uint256 _discountPercentDenominator,\\n        PrizeBucket[] memory _winningsTable\\n    ) public onlyOwner nonReentrant whenNotPaused {\\n        if (\\n            /* event should exist */\\n            eventData[_eventId].startTime == 0 || \\n            /* pool should be available */\\n            poolData[_poolId].entryFee != 0 || \\n            /* currency should have enrolled */\\n            currencyData[_currencyId].decimals == 0 || \\n            /* entry fee should be greater than zero */\\n            _entryFee == 0 ||\\n            /* pool should have minimum number of teams */\\n            _poolLimit.minimum == 0 ||\\n            /* discount percent denominator should always be non zero to avoid zero by divide error */\\n            _discountPercentDenominator == 0 ||\\n            /* maximum number of teams to be joined in pool should not be less than minimum number of teams */\\n            _poolLimit.maximum < _poolLimit.minimum ||\\n            _userTeamsLimit == 0 ||\\n            (\\n                /* for grand pool maximum number of teams should always be greater than minimum number of teams  */\\n                _contestType == 1 &&\\n                _poolLimit.maximum <= _poolLimit.minimum\\n            ) ||\\n            (\\n                /* for H2H pool discount should always be zero */\\n                _contestType != 1 &&\\n                _discountPercentNumerator != 0 \\n            )\\n        ) {\\n            /* Fantazy :: Invalid pool details */\\n            revert CustomError(10);\\n        }\\n        /* update the given contest type to the pool */\\n        poolData[_poolId].contestType = _contestType;\\n        /* update the given currency id to the pool */\\n        poolData[_poolId].currencyId = _currencyId;\\n        /* update the given entry fee to the pool */\\n        poolData[_poolId].entryFee = _entryFee;\\n        /* update the given pool limit to the pool */\\n        poolData[_poolId].poolLimit = _poolLimit;\\n        /* update the given discount in fraction (numerator) */\\n        poolData[_poolId].discountPercentNumerator = _discountPercentNumerator;\\n        /* update the given discount in fraction (denominator) */\\n        poolData[_poolId].discountPercentDenominator = _discountPercentDenominator;\\n        /* update the given event id to the pool */\\n        poolData[_poolId].eventId = _eventId;\\n        /* update the given userTeamsLimit to the pool */\\n        poolData[_poolId].joinTeamsLimit = _userTeamsLimit;\\n        /* update the total pools count */\\n        poolsCount++;\\n        /* calculate the total pool amount */\\n        // uint256 totalPoolAmount = _entryFee * _poolLimit.maximum;\\n        /* calculate the platform commission */\\n        uint256 poolPlatformCommission = (_entryFee * _poolLimit.maximum *\\n            protocolCommission.numerator) / protocolCommission.denominator;\\n        /* monitor the cumulative winnings amount */\\n        uint256 winningsAmount = 0;\\n        /* rank ranges should be incremental */\\n        uint256 bucketStart;\\n        /* loop through input distribution table and validate */\\n        for (uint8 i = 0; i < _winningsTable.length; i++) {\\n            if(\\n                /* rank range (left) should not be zero */\\n                _winningsTable[i].from == 0 ||\\n                /* rank range (right) should not be less than rank range (left) */\\n                _winningsTable[i].to < _winningsTable[i].from ||\\n                /* rank range (left) should be greater than previous row rank range (right) */\\n                _winningsTable[i].from <= bucketStart\\n            ){\\n                /* Fantazy :: Invalid winnings table */\\n                revert CustomError(11);\\n            }\\n            /* if rank range left and right are same then cumulate the amount for one team  */\\n            if (_winningsTable[i].from == _winningsTable[i].to) {\\n                winningsAmount += _winningsTable[i].amount;\\n            /* if rank range left and right are not same then cumulate the amount for no. of teams in the rank range */\\n            } else if (_winningsTable[i].from != _winningsTable[i].to) {\\n                winningsAmount +=\\n                    (_winningsTable[i].to - _winningsTable[i].from + 1) *\\n                    _winningsTable[i].amount;\\n            }\\n            /* update bucketStart to rank range right */\\n            bucketStart = _winningsTable[i].to;\\n            /* update the distribution table row */\\n            poolData[_poolId].winningsTable[i] = _winningsTable[i];\\n        }\\n        /* check if cumulative amount is equals to the prize amount allotted for distribution */\\n        if(winningsAmount != (_entryFee * _poolLimit.maximum) - poolPlatformCommission){\\n            /* Fantazy :: Invalid distribution table */\\n            revert CustomError(2);\\n        }\\n    }\\n\\n    /**\\n     * @dev createNewTeam is used to create a new team\\n     *      make sure that you create the team from Fantazy website or app\\n     * @param _eventId is the ID of the match\\n     * @param _teamId is the available ID of the team \\n     * @param _teamName is the name of the team\\n     * @param _selectedCaptain is the player id of the selected captain\\n     * @param _selectedViceCaptain is the player id of the selected vice captain\\n     * @param _selectedPlayers is the array of player ids of the selected team players\\n     */\\n    function createNewTeam(\\n        uint256 _eventId,\\n        uint256 _teamId,\\n        string memory _teamName,\\n        uint256 _selectedCaptain,\\n        uint256 _selectedViceCaptain,\\n        uint256[] calldata _selectedPlayers\\n    )\\n        public\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        if (\\n            eventData[_eventId].startTime == 0 || // event should exist\\n            teamData[_teamId].user != address(0) || // team should be available\\n            block.timestamp >= eventData[_eventId].startTime || // can't create team when match starts\\n            _selectedPlayers.length < sportData[eventData[_eventId].sportId].teamCriteria.totalPlayers.minimum ||\\n            _selectedPlayers.length > sportData[eventData[_eventId].sportId].teamCriteria.totalPlayers.maximum\\n        ) {\\n            /* Fantazy :: Invalid team details */\\n            revert CustomError(12);\\n        }\\n\\n        /* store total players */\\n        teamData[_teamId].totalPlayersCount = _selectedPlayers.length;\\n\\n        /* store other team data */\\n        for (uint8 i = 0; i < _selectedPlayers.length; i++) {\\n            /* store the team of the player */\\n            uint8 playerTeam = playerData[_eventId][_selectedPlayers[i]].team;\\n            /* store the category of the player */\\n            uint8 _playerCategory = playerData[_eventId][_selectedPlayers[i]].category;\\n            /* check if player team is valid */\\n            if(playerTeam <1 && playerTeam>2){\\n                /* Fantazy :: selected player is not in both team squads */\\n                revert CustomError(3);\\n            }\\n            /* check if player category is valid */\\n            if(_playerCategory <1 && _playerCategory >5){\\n                /* Fantazy :: selected player category is not registered on sport */\\n                revert CustomError(4);\\n            }\\n\\n            /* store team-A and team-B player counts */\\n            if (playerTeam == 1) {\\n                teamData[_teamId].teamACount++;\\n            } else {\\n                teamData[_teamId].teamBCount++;\\n            }\\n\\n            /* store categories of players */\\n            if (_playerCategory == 1) {\\n                teamData[_teamId].category1Count++;\\n            } else if (_playerCategory == 2) {\\n                teamData[_teamId].category2Count++;\\n            } else if (_playerCategory == 3) {\\n                teamData[_teamId].category3Count++;\\n            } else if (_playerCategory == 4) {\\n                teamData[_teamId].category4Count++;\\n            } else {\\n                teamData[_teamId].category5Count++;\\n            }\\n\\n            /* handle selected captain and vice-captain */\\n            if (_selectedPlayers[i] == _selectedCaptain) {\\n                teamData[_teamId].selectedCaptain = _selectedCaptain;\\n            } else if (_selectedPlayers[i] == _selectedViceCaptain) {\\n                teamData[_teamId].selectedViceCaptain = _selectedViceCaptain;\\n            }\\n        }\\n\\n        /* check if team criteria is satisfied else revert */\\n        TeamCriteria memory criteria = sportData[eventData[_eventId].sportId].teamCriteria;\\n        if (\\n            teamData[_teamId].selectedCaptain == 0 ||\\n            teamData[_teamId].selectedViceCaptain == 0 ||\\n            teamData[_teamId].teamACount < criteria.eachTeam.minimum ||\\n            teamData[_teamId].teamACount > criteria.eachTeam.maximum ||\\n            teamData[_teamId].teamBCount < criteria.eachTeam.minimum ||\\n            teamData[_teamId].teamBCount > criteria.eachTeam.maximum ||\\n            teamData[_teamId].category1Count < criteria.category1.minimum ||\\n            teamData[_teamId].category1Count > criteria.category1.maximum ||\\n            teamData[_teamId].category2Count < criteria.category2.minimum ||\\n            teamData[_teamId].category2Count > criteria.category2.maximum ||\\n            teamData[_teamId].category3Count < criteria.category3.minimum ||\\n            teamData[_teamId].category3Count > criteria.category3.maximum ||\\n            teamData[_teamId].category4Count < criteria.category4.minimum ||\\n            teamData[_teamId].category4Count > criteria.category4.maximum ||\\n            teamData[_teamId].category5Count < criteria.category5.minimum ||\\n            teamData[_teamId].category5Count > criteria.category5.maximum\\n        ) {\\n            /* Fantazy :: Team details are invalid */\\n            revert CustomError(13);\\n        }\\n\\n        /* update the given team name to team data */\\n        teamData[_teamId].teamName = _teamName;\\n        /* update the given user address to team data */\\n        teamData[_teamId].user = _msgSender();\\n        /* update the given event ID to team data */\\n        teamData[_teamId].eventId = _eventId;\\n        /* update the given selected players to team data */\\n        teamData[_teamId].selectedPlayers = _selectedPlayers;\\n        /* update the total no of teams count */\\n        teamsCount++;\\n        /* if user is not already counted as fantazy user, count it */\\n        if (!isFantazyUser[_msgSender()]) {\\n            usersCount++;\\n            isFantazyUser[_msgSender()] = true;\\n        }\\n        /* emit the event */\\n        emit InsertTeam(\\n            _teamId,\\n            _eventId,\\n            _msgSender(),\\n            1,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @dev getDiscountFee is to get the discounted fee for a given pool\\n     *      this amount is paid by platform\\n     * @param _poolId is the ID of the pool\\n     * @return _amount is the discount amount to be paid by platform\\n     */\\n    function getDiscountFee(uint256 _poolId)\\n        private\\n        view\\n        returns (uint256 _amount)\\n    {\\n        /* if its not grand pool return discount fee as 0 */\\n        if (poolData[_poolId].contestType != 1) {\\n            return 0;\\n        }\\n        /* only for grand pool send the discount amount */\\n        return\\n            (poolData[_poolId].entryFee *\\n                poolData[_poolId].discountPercentNumerator) /\\n            poolData[_poolId].discountPercentDenominator;\\n    }\\n\\n    /**\\n     * @dev joinContest is to join the contest with created team\\n     * @param _poolId is the ID of the pool\\n     * @param _teamId is the ID of the team\\n     * @param _paymentType is the type of payment, 1 for crypto wallet and 2 for bonus wallet\\n     * @param _v is the signature v attribute \\n     *           it is 0, if payment type is crypto wallet else admin signature\\n     * @param _r is the signature r attribute\\n     *           it is 0 bytes if payment type is crypto wallet else admin signature\\n     * @param _s is the signature s attribute\\n     *           it is 0 bytes if payment type is crypto wallet else admin signature\\n     */\\n    function joinContest(\\n        uint256 _poolId,\\n        uint256 _teamId,\\n        uint256 _paymentType,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) public payable nonReentrant whenNotPaused {\\n        uint256 payableAmount = poolData[_poolId].entryFee - getDiscountFee(_poolId);\\n        /* hash of the normal input values */\\n        bytes32 input;\\n        /* hash of the EIP-191 signature standard input */\\n        bytes32 hash;\\n        /* To store ERC20 contract instance if pool is created for ERC20 token */\\n        IERC20 token;\\n        /* If payment type is bonus wallet, hash the input */\\n        if (_paymentType == 2) {\\n            input = keccak256(\\n                abi.encodePacked(\\n                    \\\"0x19\\\",\\n                    _teamId,\\n                    address(this),\\n                    _msgSender(),\\n                    payableAmount\\n                )\\n            );\\n            hash = keccak256(\\n                abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", input)\\n            );\\n        }\\n        /* if currency ID is not matic, get the erc20 token instance */\\n        if (poolData[_poolId].currencyId != 1) {\\n            token = IERC20(currencyData[poolData[_poolId].currencyId].erc20);\\n        }\\n        \\n        if(\\n            (\\n                /* function executer should be the owner of team */\\n                _msgSender() == teamData[_teamId].user &&\\n                /* check if this team is already participated */\\n                !isTeamParticipated[_teamId][_poolId] && \\n                /* payment type should be either of 1 or 2 */\\n                (_paymentType == 1 || _paymentType == 2) && \\n                (\\n                    (\\n                        /* \\n                            recover owner address from given signature \\n                            if payment type is bonus wallet to avoid \\n                            users joining for infinite bonus amount\\n                            without proper db validations and admin approval\\n                        */\\n                        _paymentType == 2 &&\\n                        owner() == ecrecover(hash, _v, _r, _s) &&\\n                        (\\n                            (\\n                                /* if the currency is matic check contract has enough balance to pay the pool given discount amount */\\n                                poolData[_poolId].currencyId == 1 &&\\n                                receivedAmount - currencyData[poolData[_poolId].currencyId].protocolBonusStakedAmount  >=\\n                                getDiscountFee(_poolId) &&\\n                                address(this).balance >= currencyData[poolData[_poolId].currencyId].protocolBonusStakedAmount + getDiscountFee(_poolId) &&\\n                                msg.value >= payableAmount\\n                            ) ||\\n                            (\\n                                /* if the currency is erc20 check erc20 token balance of the contract to pay the pool given discount amount */\\n                                poolData[_poolId].currencyId != 1 &&\\n                                token.balanceOf(address(this)) >= currencyData[poolData[_poolId].currencyId].protocolBonusStakedAmount + getDiscountFee(_poolId) &&\\n                                token.balanceOf(_msgSender())>=payableAmount\\n                            )\\n                        )\\n                    ) ||\\n                    (\\n                        /* \\n                            if payment type is crypto wallet then\\n                            no need to recover admin signature\\n                        */\\n                        _paymentType == 1 &&\\n                        _v == uint8(0) &&\\n                        _r == bytes32(0) &&\\n                        _s == bytes32(0) &&\\n                        (\\n                            (\\n                                /* check for enough matic is being sent to function execution */\\n                                poolData[_poolId].currencyId == 1 &&\\n                                msg.value >= poolData[_poolId].entryFee\\n                            ) ||\\n                            (\\n                                /* check if contract has allowance to transfer on behalf of user */\\n                                poolData[_poolId].currencyId != 1 &&\\n                                /* check if user has enough erc20 token to pay the entry fee */\\n                                token.balanceOf(_msgSender()) >= poolData[_poolId].entryFee &&\\n                                token.allowance(_msgSender(), address(this)) >= poolData[_poolId].entryFee\\n                            )\\n                        )\\n                    )\\n                ) &&\\n                /* team can join pool only if match is not started */\\n                block.timestamp < eventData[poolData[_poolId].eventId].startTime &&\\n                /* no of teams an user can create per pool should not be exceeded in pools */\\n                joinTeamsCount[_poolId][_msgSender()] < poolData[_poolId].joinTeamsLimit &&\\n                /* pool should not exceed */\\n                poolData[_poolId].teamsJoinedCount < poolData[_poolId].poolLimit.maximum \\n            ) == false\\n        )\\n            /* Fantazy :: Invalid join details */\\n            revert CustomError(19);\\n\\n        if (_paymentType == 1) {\\n            /* transfer entry fee after discount from user account to contract */\\n            if (poolData[_poolId].currencyId != 1) {\\n                token.safeTransferFrom(\\n                    _msgSender(),\\n                    address(this),\\n                    poolData[_poolId].entryFee\\n                );\\n            }\\n            /* update currency state and pool state for the amounts of users paid */\\n            currencyData[poolData[_poolId].currencyId].protocolPaidStakedAmount += poolData[_poolId].entryFee;\\n            poolData[_poolId].paidStakedAmount += poolData[_poolId].entryFee;\\n        } else {\\n            if (poolData[_poolId].currencyId != 1) {\\n                token.safeTransferFrom(\\n                    _msgSender(),\\n                    address(this),\\n                    poolData[_poolId].entryFee - getDiscountFee(_poolId)\\n                );\\n            }\\n            /* update currency state and pool state for the amounts of fantazy paid and user paid */\\n            currencyData[poolData[_poolId].currencyId].protocolBonusStakedAmount += getDiscountFee(_poolId);\\n            currencyData[poolData[_poolId].currencyId].protocolPaidStakedAmount += payableAmount;\\n            poolData[_poolId].bonusStakedAmount += getDiscountFee(_poolId);\\n            poolData[_poolId].paidStakedAmount += payableAmount;\\n        }\\n        /* increment the no of teams joined in this pool by an user */\\n        joinTeamsCount[_poolId][_msgSender()]++;\\n        /* increment the pool attendance */\\n        poolData[_poolId].teamsJoinedCount++;\\n        /* mark team participation in the pool to true */\\n        isTeamParticipated[_teamId][_poolId] = true;\\n        /* store the payment type of this pool for this team */\\n        paidPaymentType[_teamId][_poolId] = _paymentType;\\n  \\n        /* emit the event */\\n        emit JoinContest(\\n            _teamId,\\n            _poolId,\\n            _paymentType,\\n            _msgSender(),\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @dev getPrizeAmountByRank is to get the prize amount\\n     *      from distribution table for this rank\\n     * @param _poolId is the ID of the pool\\n     * @param _rank is the Rank of the team\\n     */\\n    function getPrizeAmountByRank(uint256 _poolId, uint256 _rank)\\n        private \\n        view\\n        returns (uint256 _prizeAmount)\\n    {\\n        /* loop through the distribution table and find the suitable row for this rank */\\n        for (uint8 i = 0; i < poolData[_poolId].winningsTable.length; i++) {\\n            if (\\n                poolData[_poolId].winningsTable[i].from > 0 &&\\n                (\\n                    _rank >= poolData[_poolId].winningsTable[i].from &&\\n                    _rank <= poolData[_poolId].winningsTable[i].to\\n                ) \\n                \\n            ) {\\n                /* return the prize amount for this rank */\\n                return poolData[_poolId].winningsTable[i].amount;\\n            /* return 0 prize amount if no more rows present in distribution table */\\n            }else if(poolData[_poolId].winningsTable[i].from == 0)\\n                return 0;\\n        }\\n        /* return the 0 prize amount if rank is not present in distribution table */\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev updateEditedTeam is to update the edited team\\n     *      please invoke this only when matches postponed or \\n     *      when team is edited multiple times but update the final team\\n     *      only when this team wins prizes and before claiming prize\\n     *      admin signature is required as a proof of match postponed\\n     * @param _teamId is the ID of the team\\n     * @param _selectedCaptain is the player ID of the captain\\n     * @param _selectedViceCaptain is the player ID of the vice captain\\n     * @param _selectedPlayers is the array of player IDs of the selected players\\n     * @param _v is the signature attribute v from admin signature\\n     * @param _r is the signature attribute r from admin signature\\n     * @param _s is the signature attribute s from admin signature\\n     */\\n    function updateEditedTeam(\\n        uint256 _teamId,\\n        uint256 _selectedCaptain,\\n        uint256 _selectedViceCaptain,\\n        uint256[] calldata _selectedPlayers,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) public nonReentrant whenNotPaused {\\n        /* hash out all the input parameters */\\n        bytes32 input = keccak256(\\n            abi.encodePacked(\\n                \\\"0x19\\\",\\n                _teamId,\\n                _selectedCaptain,\\n                _selectedViceCaptain,\\n                _selectedPlayers,\\n                address(this),\\n                _msgSender()\\n            )\\n        );\\n        /* hash out the EIP-191 standard input */\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", input)\\n        );\\n        require(teamData[_teamId].eventId != 0, \\\"Team doesnt exist to update edited team\\\");\\n        require(_msgSender() == teamData[_teamId].user, \\\"Only owner of the team can update team\\\");\\n        require(owner() == ecrecover(hash, _v, _r, _s), \\\"Only owner has to sign and approve the updated team\\\");\\n\\n        /* store selected players */\\n        teamData[_teamId].selectedPlayers = _selectedPlayers;\\n        teamData[_teamId].selectedCaptain = _selectedCaptain;\\n        teamData[_teamId].selectedViceCaptain = _selectedViceCaptain;\\n        /* emit the event */\\n        emit InsertTeam(\\n            _teamId,\\n            teamData[_teamId].eventId,\\n            _msgSender(),\\n            2,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @dev getTeamPoints is to get the total team points\\n     *      make sure that insertPlayerPoints is done\\n     * @param _teamId is the ID of the team\\n     * @return totalTeamPoints is the total team points\\n     */\\n    function getTeamPoints(uint256 _teamId)\\n        private\\n        view\\n        returns (uint256 totalTeamPoints)\\n    {\\n        /* loop through all players and find total team points */\\n        for (uint256 i = 0; i < teamData[_teamId].selectedPlayers.length; i++) {\\n            /* if player is captain add captain multiplier */\\n            if (\\n                teamData[_teamId].selectedPlayers[i] ==\\n                teamData[_teamId].selectedCaptain\\n            ) {\\n                totalTeamPoints += ((playerData[teamData[_teamId].eventId][\\n                    teamData[_teamId].selectedPlayers[i]\\n                ].points *\\n                    sportData[eventData[teamData[_teamId].eventId].sportId]\\n                        .captainMultiplier) / 10);\\n                continue;\\n            /* if player is vice captain add vicecaptain multiplier */\\n            } else if (\\n                teamData[_teamId].selectedPlayers[i] ==\\n                teamData[_teamId].selectedViceCaptain\\n            ) {\\n                totalTeamPoints += ((playerData[teamData[_teamId].eventId][\\n                    teamData[_teamId].selectedPlayers[i]\\n                ].points *\\n                    sportData[eventData[teamData[_teamId].eventId].sportId]\\n                        .viceCaptainMultiplier) / 10);\\n                continue;\\n            }\\n            /* add other team points */\\n            totalTeamPoints += (\\n                playerData[teamData[_teamId].eventId][\\n                    teamData[_teamId].selectedPlayers[i]\\n                ].points\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev claim is to claim prizes or refund\\n     *      owner  signature is the proof of rank or \\n     *      proof of match abandoned while refund or\\n     *      proof of match is completed\\n     * @param _teamId is the ID of the team\\n     * @param _poolId is the ID of the pool\\n     * @param _rank is the rank of the team\\n     * @param _magicValue is 1 if admin force refund when match is abandoned\\n     *                    is 0 if pool is not filled with minimum count\\n     *                    is total points if _isRefund is false\\n     * @param _isRefund is true if claim is for refund\\n     *                  is false if claim is for prize\\n     * @param _v is the signature attribute v from admin signature\\n     * @param _r is the signature attribute r from admin signature\\n     * @param _s is the signature attribute s from admin signature \\n     */\\n    function claim(\\n        uint256 _teamId,\\n        uint256 _poolId,\\n        uint256 _rank,\\n        uint256 _magicValue, \\n        // if _isRefund is true then _magicValue: 1(admin force refund), 0(non-force refund by admin )\\n        // if _isRefund is false then _magicValue: totalPoints\\n        bool _isRefund,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) public nonReentrant whenNotPaused {\\n        /* Ensure the _teamId and _poolId are valid */\\n        require(_teamId > 0 && _poolId > 0, \\\"Invalid teamId or poolId\\\");\\n        /* Verify that the team exists and is associated with the sender */\\n        require(teamData[_teamId].user == _msgSender(), \\\"Sender is not the team owner\\\");\\n        /* Ensure the pool exists */\\n        require(poolData[_poolId].eventId != 0, \\\"Pool does not exist\\\");\\n        /* Ensure the currency exists */\\n        require(poolData[_poolId].currencyId > 0, \\\"Invalid currencyId\\\");\\n        /* Ensure the claim is not already processed */\\n        if (!_isRefund) {\\n            require(!isPrizeClaimed[_poolId][_teamId], \\\"Prize already claimed\\\");\\n            require(poolData[_poolId].teamsJoinedCount >= poolData[_poolId].poolLimit.minimum, \\\"Not enough teams for prize\\\");\\n            require(_magicValue == getTeamPoints(_teamId), \\\"Invalid magicValue for prize\\\");\\n        } else {\\n            require(!isFeeRefunded[_poolId][_teamId], \\\"Refund already claimed\\\");\\n            if (_magicValue == 1) {\\n                require(poolData[_poolId].teamsJoinedCount >= 1, \\\"Admin force refund requires at least one team\\\");\\n            } else if (_magicValue == 0) {\\n                require(poolData[_poolId].teamsJoinedCount < poolData[_poolId].poolLimit.minimum, \\\"Non-force refund requires pool to be under the minimum limit\\\");\\n            } else {\\n                revert(\\\"Invalid magicValue for refund\\\");\\n            }\\n        }\\n\\n        /* Calculate claim amount */\\n        uint256 claimAmount = (!_isRefund)\\n            ? getPrizeAmountByRank(_poolId, _rank)\\n            : poolData[_poolId].entryFee - (\\n                paidPaymentType[_teamId][_poolId] == 1 ? 0 : getDiscountFee(_poolId)\\n            );\\n\\n        /* Verify the signature */\\n        bytes32 input = keccak256(\\n            abi.encodePacked(\\n                \\\"0x19\\\",\\n                _teamId,\\n                _poolId,\\n                (!_isRefund) ? _rank : 0,\\n                claimAmount,\\n                address(this),\\n                _msgSender(),\\n                _magicValue\\n            )\\n        );\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", input)\\n        );\\n        require(owner() == ecrecover(hash, _v, _r, _s), \\\"Invalid signature\\\");\\n\\n        \\n\\n        /* Ensure the contract has sufficient funds for the claim */\\n        if (poolData[_poolId].currencyId == 1) {\\n            require(address(this).balance >= claimAmount, \\\"Insufficient contract balance for claim\\\");\\n            /* Transfer Matic to the user */\\n            (bool success, ) = payable(_msgSender()).call{value: claimAmount}(\\\"\\\");\\n            require(success, \\\"Claim transfer failed\\\");\\n        } else {\\n            IERC20 token = IERC20(currencyData[poolData[_poolId].currencyId].erc20);\\n            require(token.balanceOf(address(this)) >= claimAmount, \\\"Insufficient token balance for claim\\\");\\n            /* Transfer ERC20 tokens to the user */\\n            token.safeTransfer(_msgSender(), claimAmount);\\n        }\\n\\n        /* Update claim status to avoid double spending */\\n        if (!_isRefund) {\\n            isPrizeClaimed[_poolId][_teamId] = true;\\n        } else {\\n            isFeeRefunded[_poolId][_teamId] = true;\\n        }\\n\\n        /* Update currency and pool state of funds */\\n        if (paidPaymentType[_teamId][_poolId] == 1) {\\n            currencyData[poolData[_poolId].currencyId].protocolPaidStakedAmount -= poolData[_poolId].entryFee;\\n            poolData[_poolId].paidStakedClaimedAmount += poolData[_poolId].entryFee;\\n        } else if (paidPaymentType[_teamId][_poolId] == 2) {\\n            uint256 discountFee = getDiscountFee(_poolId);\\n            currencyData[poolData[_poolId].currencyId].protocolPaidStakedAmount -= poolData[_poolId].entryFee - discountFee;\\n            currencyData[poolData[_poolId].currencyId].protocolBonusStakedAmount -= discountFee;\\n            poolData[_poolId].paidStakedClaimedAmount += poolData[_poolId].entryFee - discountFee;\\n            poolData[_poolId].bonusStakedClaimedAmount += discountFee;\\n        }\\n\\n        /* Emit the Claim event */\\n        emit Claim(_teamId, _poolId, _msgSender(), claimAmount, block.timestamp);\\n    }\\n\\n\\n    /**\\n     * @dev getPoolCommission is to get the pool commission amount\\n     * @param _poolId is the ID of the pool\\n     * @return amount is the commission amount to be received by owner from the given pool \\n     */\\n    function getPoolCommission(uint256 _poolId)\\n        private \\n        view\\n        returns (uint256 amount)\\n    {\\n        /* do the necessary validations */\\n        if(\\n            (\\n                (\\n                    /* if winnings table is false then pool should have filled */\\n                    poolData[_poolId].poolLimit.maximum ==\\n                    poolData[_poolId].teamsJoinedCount &&\\n                    !poolData[_poolId].isWinningsTableUpdated\\n                ) ||\\n                (\\n                    /* if winnings table is true then pool should not have filled full */\\n                    poolData[_poolId].poolLimit.maximum >\\n                    poolData[_poolId].teamsJoinedCount &&\\n                    poolData[_poolId].isWinningsTableUpdated\\n                )\\n            )\\n            == false\\n        ) \\n            /* Fantazy :: Invalid withdraw */\\n            revert CustomError(16);\\n\\n        /* return the commission fee */\\n        return\\n            (\\n                poolData[_poolId].entryFee *\\n                poolData[_poolId].teamsJoinedCount *\\n                protocolCommission.numerator\\n            ) / protocolCommission.denominator;\\n    }\\n\\n    /**\\n     * @dev withdraw is to withdraw pool commission or any currency in contract\\n     *      it is advised not to withdraw contract balance by force,\\n     *      instead withdraw pool by pool\\n     * @param _currencyId is the ID of the currency\\n     * @param _poolId is the ID of the pool\\n     * @param _isForce is true if you want to withdraw all contract balance of given currency\\n     *                 is false if you want to withdraw only the given pool commission\\n     */\\n    function withdraw(\\n        uint256 _currencyId,\\n        uint256 _poolId,\\n        bool _isForce\\n    ) public onlyOwner nonReentrant whenNotPaused {\\n        /* if currency is erc20, to store the token contract instance */\\n        IERC20 token;\\n        /* commission amount to withdraw */\\n        uint256 commissionAmount;\\n        /* if matic to check if withdrawal is success or not */\\n        bool success;\\n        if (!_isForce){\\n            /* get the pool commission amount */\\n            commissionAmount = getPoolCommission(_poolId);\\n        }else{\\n            if(_currencyId == 1){\\n                /* get the contract matic balance */\\n                commissionAmount = address(this).balance;\\n            }else{\\n                /* get the contract erc20 balance */\\n                commissionAmount = token.balanceOf(address(this));\\n                \\n            }\\n        }\\n        if(_currencyId != 1){\\n            /* store the erc20 token contract instance */\\n            token = IERC20(currencyData[_currencyId].erc20);\\n        }\\n\\n        if(\\n            /* check if withdrawing is owner or not */\\n            _msgSender() == owner() &&\\n            /* check if currency is enrolled or not */\\n            currencyData[_currencyId].decimals > 0 && \\n            (\\n                (\\n                    /* contract amount should be more than 0 */\\n                    _isForce &&\\n                    commissionAmount > 0\\n                ) ||\\n                (\\n                    /* pool should have commission amount to withdraw */\\n                    !_isForce &&\\n                    currencyData[_currencyId].protocolBonusStakedAmount +\\n                    currencyData[_currencyId].protocolPaidStakedAmount >= commissionAmount &&\\n                    poolData[_poolId].paidStakedAmount + \\n                    poolData[_poolId].bonusStakedAmount >= commissionAmount\\n                )\\n            )\\n            == false\\n        ) \\n            /* Fantazy :: Invalid withdraw details */\\n            revert CustomError(15);\\n\\n        /* withdraw amount to owner */\\n        if (_currencyId == 1) {\\n            (success, ) = payable(owner()).call{value: commissionAmount}(\\\"\\\");\\n            if(!success){\\n                /* Withdraw failed */\\n                revert CustomError(6);\\n            }\\n        } else if (_currencyId != 1) {\\n            token.safeTransfer(\\n                owner(),\\n                commissionAmount\\n            );\\n        }\\n\\n        /* update currency and pool state */\\n        if (!_isForce) {\\n            /* update commission withdrawn to true in pool */\\n            poolData[_poolId].isCommissionWithdrawn = true;\\n            currencyData[_currencyId].protocolPaidStakedAmount -= (\\n                poolData[_poolId].paidStakedAmount - poolData[_poolId].paidStakedClaimedAmount\\n            );\\n            currencyData[_currencyId].protocolBonusStakedAmount -= (\\n                poolData[_poolId].bonusStakedAmount - poolData[_poolId].bonusStakedClaimedAmount\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Retrieves data for a pool, event, team, and currency.\\n     * @param _poolId The ID of the pool to retrieve data for.\\n     * @param _eventId The ID of the event to retrieve data for.\\n     * @param _teamId The ID of the team to retrieve data for.\\n     * @param _currencyId The ID of the currency to retrieve data for.\\n     * @return _pool The retrieved pool data.\\n     * @return _event The retrieved event data.\\n     * @return _team The retrieved team data.\\n     * @return _currency The retrieved currency data.\\n     */\\n    function getData(\\n        uint256 _poolId, \\n        uint256 _eventId, \\n        uint256 _teamId,\\n        uint256 _currencyId\\n    ) \\n    public view returns(\\n        Pool memory _pool, \\n        Event memory _event, \\n        Team memory _team,\\n        Currency memory _currency\\n    ){\\n        return (\\n            poolData[_poolId], \\n            eventData[_eventId], \\n            teamData[_teamId],\\n            currencyData[_currencyId]\\n        );\\n    }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sportsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_eventsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_teamsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_usersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commissionNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commissionDenominator\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_appUrl\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorId\",\"type\":\"uint256\"}],\"name\":\"CustomError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_teamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_teamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_insertType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"InsertTeam\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_teamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_paymentType\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"JoinContest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sportId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"_teamAsquad\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_teamAsquadCategories\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_teamBsquad\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_teamBsquadCategories\",\"type\":\"uint8[]\"}],\"name\":\"addNewEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_contestType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currencyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_entryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userTeamsLimit\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"minimum\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maximum\",\"type\":\"uint8\"}],\"internalType\":\"struct FantazyV2.Range\",\"name\":\"_poolLimit\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_discountPercentNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_discountPercentDenominator\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct FantazyV2.PrizeBucket[]\",\"name\":\"_winningsTable\",\"type\":\"tuple[]\"}],\"name\":\"addNewPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"appUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_appUrl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_commissionNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commissionDenominator\",\"type\":\"uint256\"}],\"name\":\"changeData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_teamId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rank\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_magicValue\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isRefund\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_teamId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_selectedCaptain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_selectedViceCaptain\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_selectedPlayers\",\"type\":\"uint256[]\"}],\"name\":\"createNewTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currenciesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_teamId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currencyId\",\"type\":\"uint256\"}],\"name\":\"getData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contestType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currencyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountPercentNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountPercentDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamsJoinedCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidStakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusStakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidStakedClaimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusStakedClaimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"joinTeamsLimit\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"minimum\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maximum\",\"type\":\"uint8\"}],\"internalType\":\"struct FantazyV2.Range\",\"name\":\"poolLimit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct FantazyV2.PrizeBucket[20]\",\"name\":\"winningsTable\",\"type\":\"tuple[20]\"},{\"internalType\":\"bool\",\"name\":\"isWinningsTableUpdated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCommissionWithdrawn\",\"type\":\"bool\"}],\"internalType\":\"struct FantazyV2.Pool\",\"name\":\"_pool\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"eventName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"sportId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"teamAsquad\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"teamBsquad\",\"type\":\"uint256[]\"}],\"internalType\":\"struct FantazyV2.Event\",\"name\":\"_event\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"teamName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selectedCaptain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selectedViceCaptain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPlayersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamACount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamBCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"category1Count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"category2Count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"category3Count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"category4Count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"category5Count\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"selectedPlayers\",\"type\":\"uint256[]\"}],\"internalType\":\"struct FantazyV2.Team\",\"name\":\"_team\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isErc20\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"protocolBonusStakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolPaidStakedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct FantazyV2.Currency\",\"name\":\"_currency\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_currencyId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isErc20\",\"type\":\"bool\"}],\"name\":\"insertCurrencyData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_playerIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_playerPoints\",\"type\":\"uint256[]\"}],\"name\":\"insertPlayerPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_sportId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_captainMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_viceCaptainMultiplier\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"minimum\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maximum\",\"type\":\"uint8\"}],\"internalType\":\"struct FantazyV2.Range\",\"name\":\"totalPlayers\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"minimum\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maximum\",\"type\":\"uint8\"}],\"internalType\":\"struct FantazyV2.Range\",\"name\":\"eachTeam\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"minimum\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maximum\",\"type\":\"uint8\"}],\"internalType\":\"struct FantazyV2.Range\",\"name\":\"category1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"minimum\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maximum\",\"type\":\"uint8\"}],\"internalType\":\"struct FantazyV2.Range\",\"name\":\"category2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"minimum\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maximum\",\"type\":\"uint8\"}],\"internalType\":\"struct FantazyV2.Range\",\"name\":\"category3\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"minimum\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maximum\",\"type\":\"uint8\"}],\"internalType\":\"struct FantazyV2.Range\",\"name\":\"category4\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"minimum\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maximum\",\"type\":\"uint8\"}],\"internalType\":\"struct FantazyV2.Range\",\"name\":\"category5\",\"type\":\"tuple\"}],\"internalType\":\"struct FantazyV2.TeamCriteria\",\"name\":\"_teamCriteria\",\"type\":\"tuple\"}],\"name\":\"insertSportData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isFeeRefunded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isPrizeClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isTeamParticipated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_teamId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_paymentType\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"joinContest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paidPaymentType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sportsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_teamId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_selectedCaptain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_selectedViceCaptain\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_selectedPlayers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"updateEditedTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct FantazyV2.PrizeBucket[]\",\"name\":\"_winningsTable\",\"type\":\"tuple[]\"}],\"name\":\"updateWinnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currencyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isForce\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FantazyV2", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000258000000000000000000000000000000000000000000000000000000000000028a000000000000000000000000000000000000000000000000000000000000afc80000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000001768747470733a2f2f6170702e66616e74617a792e6f6e65000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}