{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"takara.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract Takara {\\n    uint256 public constant ticketPrice = 0.1 ether;\\n    uint256 public constant maxTickets = 1000; // maximum tickets per lottery\\n    uint256 public constant ticketCommission = 0.1 ether; // commition per ticket\\n    uint256 public constant duration = 180 minutes; // The duration set for the lottery\\n\\n    uint256 public expiration; // Timeout in case That the lottery was not carried out.\\n    address public lotteryOperator; // the crator of the lottery\\n    uint256 public operatorTotalCommission = 0; // the total commission balance\\n    address public lastWinner; // the last winner of the lottery\\n    uint256 public lastWinnerAmount; // the last winner amount of the lottery\\n\\n    mapping(address => uint256) public winnings; // maps the winners to there winnings\\n    address[] public tickets; //array of purchased Tickets\\n\\n    // modifier to check if caller is the lottery operator\\n    modifier isOperator() {\\n        require(\\n            (msg.sender == lotteryOperator),\\n            \\\"Caller is not the lottery operator\\\"\\n        );\\n        _;\\n    }\\n\\n    // modifier to check if caller is a winner\\n    modifier isWinner() {\\n        require(IsWinner(), \\\"Caller is not a winner\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        lotteryOperator = msg.sender;\\n        expiration = block.timestamp + duration;\\n    }\\n\\n    // return all the tickets\\n    function getTickets() public view returns (address[] memory) {\\n        return tickets;\\n    }\\n\\n    function getWinningsForAddress(address addr) public view returns (uint256) {\\n        return winnings[addr];\\n    }\\n\\n    function BuyTickets() public payable {\\n        require(\\n            msg.value % ticketPrice == 0,\\n            \\\"the value must be multiple of ticket price\\\"\\n        );\\n        uint256 numOfTicketsToBuy = msg.value / ticketPrice;\\n\\n        require(\\n            numOfTicketsToBuy <= RemainingTickets(),\\n            \\\"Not enough tickets available.\\\"\\n        );\\n\\n        for (uint256 i = 0; i < numOfTicketsToBuy; i++) {\\n            tickets.push(msg.sender);\\n        }\\n    }\\n\\n    function DrawWinnerTicket() public isOperator {\\n        require(tickets.length > 0, \\\"No tickets were purchased\\\");\\n\\n        bytes32 blockHash = blockhash(block.number - tickets.length);\\n        uint256 randomNumber = uint256(\\n            keccak256(abi.encodePacked(block.timestamp, blockHash))\\n        );\\n        uint256 winningTicket = randomNumber % tickets.length;\\n\\n        address winner = tickets[winningTicket];\\n        lastWinner = winner;\\n        winnings[winner] += (tickets.length * (ticketPrice - ticketCommission));\\n        lastWinnerAmount = winnings[winner];\\n        operatorTotalCommission += (tickets.length * ticketCommission);\\n        delete tickets;\\n        expiration = block.timestamp + duration;\\n    }\\n\\n    function restartDraw() public isOperator {\\n        require(tickets.length == 0, \\\"Cannot Restart Draw as Draw is in play\\\");\\n\\n        delete tickets;\\n        expiration = block.timestamp + duration;\\n    }\\n\\n    function checkWinningsAmount() public view returns (uint256) {\\n        address payable winner = payable(msg.sender);\\n\\n        uint256 reward2Transfer = winnings[winner];\\n\\n        return reward2Transfer;\\n    }\\n\\n    function WithdrawWinnings() public isWinner {\\n        address payable winner = payable(msg.sender);\\n\\n        uint256 reward2Transfer = winnings[winner];\\n        winnings[winner] = 0;\\n\\n        winner.transfer(reward2Transfer);\\n    }\\n\\n    function RefundAll() public {\\n        require(block.timestamp >= expiration, \\\"the lottery not expired yet\\\");\\n\\n        for (uint256 i = 0; i < tickets.length; i++) {\\n            address payable to = payable(tickets[i]);\\n            tickets[i] = address(0);\\n            to.transfer(ticketPrice);\\n        }\\n        delete tickets;\\n    }\\n\\n    function WithdrawCommission() public isOperator {\\n        address payable operator = payable(msg.sender);\\n\\n        uint256 commission2Transfer = operatorTotalCommission;\\n        operatorTotalCommission = 0;\\n\\n        operator.transfer(commission2Transfer);\\n    }\\n\\n    function IsWinner() public view returns (bool) {\\n        return winnings[msg.sender] > 0;\\n    }\\n\\n    function CurrentWinningReward() public view returns (uint256) {\\n        return tickets.length * ticketPrice;\\n    }\\n\\n    function RemainingTickets() public view returns (uint256) {\\n        return maxTickets - tickets.length;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BuyTickets\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CurrentWinningReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DrawWinnerTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IsWinner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RefundAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RemainingTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WithdrawCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WithdrawWinnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkWinningsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTickets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getWinningsForAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastWinnerAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorTotalCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restartDraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tickets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"winnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Takara", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}