{"SourceCode": "// File: ..\\..\\..\\..\\node_modules\\@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC721\\IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.        \r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.        \r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\security\\ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\utils\\math\\SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: contracts\\stake.sol\r\n\r\n\r\npragma solidity >=0.8.4;\r\ncontract NftStake is IERC721Receiver, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    IERC721 public nftToken;\r\n    IERC721 public nftToken2;\r\n    IERC20 public erc20Token;\r\n\r\n    address public daoAdmin;\r\n    uint256 coins;\r\n\r\n   \r\n\r\n    uint256 public tokensPerBlock = 0.000026315789474 ether;\r\n    uint256 public tokensPerBlock2 = 0.000526315789474 ether;\r\n\r\n    //nfts contracts 1\r\n    struct _Nft1 {\r\n        uint256 tokenId;\r\n        uint256 stakedFromBlock;\r\n        address owner;\r\n\r\n    }\r\n    struct playersNfts1{\r\n        uint256 mount;\r\n        uint256[] idnft;\r\n  \r\n\r\n    }\r\n\r\n    mapping(uint256 => _Nft1) public Nft1;\r\n    mapping(address => playersNfts1) public playerNfts1;\r\n\r\n\r\n    event NftStaked(address indexed staker, uint256 tokenId, uint256 blockNumber);\r\n    event NftUnStaked(address indexed staker, uint256 tokenId, uint256 blockNumber);\r\n    event StakePayout(address indexed staker, uint256 tokenId, uint256 stakeAmount, uint256 fromBlock, uint256 toBlock);\r\n\r\n    modifier onlyStaker(uint256 tokenId) {\r\n        // require that this contract has the NFT\r\n        require(nftToken.ownerOf(tokenId) == address(this), \"onlyStaker: Contract is not owner of this NFT\");\r\n\r\n        // require that this token is staked\r\n        require(Nft1[tokenId].stakedFromBlock != 0, \"onlyStaker: Token is not staked\");\r\n\r\n        // require that msg.sender is the owner of this nft\r\n        require(Nft1[tokenId].owner == msg.sender, \"onlyStaker: Caller is not NFT stake owner\");\r\n\r\n        _;\r\n    }\r\n\r\n    modifier requireTimeElapsed(uint256 tokenId) {\r\n        // require that some time has elapsed (IE you can not stake and unstake in the same block)\r\n        require(\r\n            Nft1[tokenId].stakedFromBlock < block.number,\r\n            \"requireTimeElapsed: Can not stake/unStake/harvest in same block\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyDao() {\r\n        require(msg.sender == daoAdmin, \"reclaimTokens: Caller is not the DAO\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        IERC721 _nftToken,\r\n        IERC721 _nftToken2,\r\n        IERC20 _erc20Token,\r\n        address _daoAdmin\r\n    ) {\r\n        nftToken = _nftToken;\r\n        nftToken2 = _nftToken2;\r\n        erc20Token = _erc20Token;\r\n        daoAdmin = _daoAdmin;\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n\r\n\r\n\r\n    //User must give this contract permission to take ownership of it.\r\n    function stakeNFT(uint256[] calldata tokenId) public nonReentrant returns (bool) {\r\n        // allow for staking multiple NFTS at one time.\r\n\r\n        for (uint256 i = 0; i < tokenId.length; i++) {\r\n            _stakeNFT(tokenId[i]);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function getStakeContractBalance() public view returns (uint256) {\r\n        return erc20Token.balanceOf(address(this));\r\n    }\r\n    function getStakeNftBalance() public view returns (uint256) {\r\n        return nftToken.balanceOf(address(this));\r\n    }\r\n    function getCurrentStakeEarned(uint256 tokenId) public view returns (uint256) {\r\n        \r\n            return _getTimeStaked(tokenId).mul(tokensPerBlock);\r\n\r\n        \r\n    }\r\n\r\n    function unStakeNFT(uint256[] calldata tokenId) public nonReentrant returns (bool) {\r\n\r\n         for (uint256 i = 0; i < tokenId.length; i++) {\r\n           _unStakeNFT(tokenId[i]);\r\n        }\r\n\r\n        return true;\r\n        //return _unStakeNFT(tokenId);\r\n    }\r\n\r\n\r\n    function _unStakeNFT(uint256 tokenId) internal onlyStaker(tokenId) requireTimeElapsed(tokenId) returns (bool) {\r\n        // payout stake, this should be safe as the function is non-reentrant\r\n        _payoutStake(tokenId);\r\n\r\n        // delete stake record, effectively unstaking it\r\n        delete Nft1[tokenId];\r\n        playerNfts1[msg.sender].mount = playerNfts1[msg.sender].mount - 1;\r\n        \r\n          \r\n      //  uint256 tokenCount = nftToken.balanceOf(address(this));\r\n        //uint256[] memory tokensId = new uint256[](tokenCount);\r\n\r\n        for (uint256 i = 0; i <  playerNfts1[msg.sender].idnft.length; i++) {\r\n            if ( playerNfts1[msg.sender].idnft[i] == tokenId) { \r\n                 //delete playerNfts1[msg.sender].idnft[i];\r\n               playerNfts1[msg.sender].idnft =  remove(playerNfts1[msg.sender].idnft,i);\r\n\r\n                 \r\n             }\r\n        }\r\n        \r\n\r\n        // return token\r\n        nftToken.safeTransferFrom(address(this), msg.sender, tokenId);\r\n\r\n        emit NftUnStaked(msg.sender, tokenId, block.number);\r\n\r\n        return true;\r\n    }\r\n \r\n    function remove(uint256[] memory array, uint256 index) internal returns(uint256[] memory value) {\r\n       \r\n        uint256[] memory arrayNew = new uint256[](array.length-1);\r\n        for (uint256 i = 0; i<arrayNew.length; i++){\r\n            if(i != index && i<index){\r\n                arrayNew[i] = array[i];\r\n            } else {\r\n                arrayNew[i] = array[i+1];\r\n            }\r\n        }\r\n        delete playerNfts1[msg.sender].idnft;\r\n        delete array;\r\n        return arrayNew;\r\n    }\r\n\r\n\r\n\r\n\r\n    function reclaimTokens() external onlyDao {\r\n        erc20Token.transfer(daoAdmin, erc20Token.balanceOf(address(this)));\r\n    }\r\n\r\n    function updateStakingReward(uint256 _tokensPerBlock,uint256 _tokensPerBlock2) public onlyDao {\r\n        tokensPerBlock = _tokensPerBlock;\r\n        tokensPerBlock2 = _tokensPerBlock2;\r\n       \r\n\r\n     }\r\n\r\n    function _stakeNFT(uint256 tokenId) internal returns (bool) {\r\n        // require this token is not already staked\r\n        require(Nft1[tokenId].stakedFromBlock == 0, \"Stake: Token is already staked\");\r\n\r\n        // require this token is not already owned by this contract\r\n        require(nftToken.ownerOf(tokenId) != address(this), \"Stake: Token is already staked in this contract\");\r\n\r\n        // take possession of the NFT\r\n        nftToken.safeTransferFrom(msg.sender, address(this), tokenId);\r\n\r\n        // check that this contract is the owner\r\n        require(nftToken.ownerOf(tokenId) == address(this), \"Stake: Failed to take possession of NFT\");\r\n\r\n        // start the staking from this block.\r\n        playerNfts1[msg.sender].mount = playerNfts1[msg.sender].mount + 1;\r\n        playerNfts1[msg.sender].idnft.push(tokenId);\r\n   \r\n        Nft1[tokenId].tokenId = tokenId;\r\n       \r\n        Nft1[tokenId].stakedFromBlock = block.number;\r\n        Nft1[tokenId].owner = msg.sender;\r\n\r\n        emit NftStaked(msg.sender, tokenId, block.number);\r\n\r\n        return true;\r\n    }\r\n    \r\n\r\n\r\n    function _payoutStake(uint256 tokenId) internal {\r\n        /* NOTE : Must be called from non-reentrant function to be safe!*/\r\n\r\n        // double check that the Nft1 exists and we're not staking from block 0\r\n        require(Nft1[tokenId].stakedFromBlock > 0, \"_payoutStake: Can not stake from block 0\");\r\n\r\n        // earned amount is difference between the stake start block, current block multiplied by stake amount\r\n        uint256 timeStaked = _getTimeStaked(tokenId).sub(1); // don't pay for the tx block of withdrawl\r\n        uint256 payout;\r\n        uint256 payoutReward;\r\n        if(playerNfts1[msg.sender].mount >= 10){\r\n\r\n              payout = timeStaked.mul(tokensPerBlock);\r\n              payoutReward =  (payout * 2) /100;\r\n              payout = payout +payoutReward;\r\n        }else if(playerNfts1[msg.sender].mount >= 30){\r\n\r\n              payout = timeStaked.mul(tokensPerBlock);\r\n              payoutReward =  (payout * 5) /100;\r\n              payout = payout +payoutReward;\r\n\r\n        }\r\n        else if(playerNfts1[msg.sender].mount >= 50){\r\n\r\n              payout = timeStaked.mul(tokensPerBlock);\r\n              payoutReward =  (payout * 8) /100;\r\n              payout = payout +payoutReward;\r\n\r\n        }\r\n        else if(playerNfts1[msg.sender].mount >= 100){\r\n\r\n              payout = timeStaked.mul(tokensPerBlock);\r\n              payoutReward =  (payout * 12) /100;\r\n              payout = payout +payoutReward;\r\n\r\n        }else{\r\n              payout = timeStaked.mul(tokensPerBlock);\r\n\r\n        }\r\n        // If contract does not have enough tokens to pay out, return the NFT without payment\r\n        // This prevent a NFT being locked in the contract when empty\r\n        if (erc20Token.balanceOf(address(this)) < payout) {\r\n            emit StakePayout(msg.sender, tokenId, 0, Nft1[tokenId].stakedFromBlock, block.number);\r\n            return;\r\n        }\r\n\r\n        // payout stake\r\n        erc20Token.transfer(Nft1[tokenId].owner, payout);\r\n\r\n        emit StakePayout(msg.sender, tokenId, payout, Nft1[tokenId].stakedFromBlock, block.number);\r\n    }\r\n\r\n    function _getTimeStaked(uint256 tokenId) internal view returns (uint256) {\r\n        if (Nft1[tokenId].stakedFromBlock == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return block.number.sub(Nft1[tokenId].stakedFromBlock);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n     function _mount() public view returns (uint256) {\r\n\r\n\r\n       return playerNfts1[msg.sender].mount;\r\n    }\r\n\r\n    function myNfts(address add)  public view returns(uint256[] memory){\r\n        \r\n        uint256 tokenCount = playerNfts1[add].idnft.length;\r\n        uint256[] memory tokensId = new uint256[](tokenCount);\r\n\r\n        for (uint256 i = 0; i <  tokenCount; i++) {\r\n            tokensId[i] = playerNfts1[add].idnft[i];\r\n        }\r\n        return tokensId;\r\n    }\r\n\r\n \r\n    \r\n    function ClaimTokens(uint256[] calldata tokenId) public nonReentrant returns (bool) {\r\n\r\n         for (uint256 i = 0; i < tokenId.length; i++) {\r\n           _ClaimTokens(tokenId[i]);\r\n        }\r\n\r\n        return true;\r\n        //return _unStakeNFT(tokenId);\r\n    }\r\n\r\n\r\n    function _ClaimTokens(uint256 tokenId)  internal onlyStaker(tokenId) requireTimeElapsed(tokenId) returns (bool) {\r\n\r\n\r\n            _payoutStake(tokenId);\r\n            Nft1[tokenId].stakedFromBlock = block.number;\r\n        \r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n   //CONTRATO DOS NFTS ESPECIALES\r\n     //nfts contracts 2\r\n       struct _Nft2 {\r\n        uint256 tokenId;\r\n        uint256 stakedFromBlock;\r\n        address owner;\r\n\r\n    }\r\n    struct playersNfts2{\r\n        uint256 mount;\r\n        uint256[] idnft;\r\n  \r\n\r\n    }\r\n\r\n    mapping(uint256 => _Nft2) public Nft2;\r\n    mapping(address => playersNfts2) public playerNfts2;\r\n\r\n \r\n\r\n  \r\n    modifier onlyStaker2(uint256 tokenId) {\r\n        // require that this contract has the NFT\r\n        require(nftToken2.ownerOf(tokenId) == address(this), \"onlyStaker: Contract is not owner of this NFT\");\r\n\r\n        // require that this token is staked\r\n        require(Nft2[tokenId].stakedFromBlock != 0, \"onlyStaker: Token is not staked\");\r\n\r\n        // require that msg.sender is the owner of this nft\r\n        require(Nft2[tokenId].owner == msg.sender, \"onlyStaker: Caller is not NFT stake owner\");\r\n\r\n        _;\r\n    }\r\n\r\n    modifier requireTimeElapsed2(uint256 tokenId) {\r\n        // require that some time has elapsed (IE you can not stake and unstake in the same block)\r\n        require(\r\n            Nft2[tokenId].stakedFromBlock < block.number,\r\n            \"requireTimeElapsed: Can not stake/unStake/harvest in same block\"\r\n        );\r\n        _;\r\n    }\r\n\r\n\r\n\r\n\r\n    //User must give this contract permission to take ownership of it.\r\n    function stakeNFT2(uint256[] calldata tokenId) public nonReentrant returns (bool) {\r\n        // allow for staking multiple NFTS at one time.\r\n\r\n        for (uint256 i = 0; i < tokenId.length; i++) {\r\n            _stakeNFT2(tokenId[i]);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n  \r\n    function getStakeNftBalance2() public view returns (uint256) {\r\n        return nftToken2.balanceOf(address(this));\r\n    }\r\n    function getCurrentStakeEarned2(uint256 tokenId) public view returns (uint256) {\r\n        \r\n            return _getTimeStaked2(tokenId).mul(tokensPerBlock2);\r\n\r\n        \r\n    }\r\n\r\n    function unStakeNFT2(uint256[] calldata tokenId) public nonReentrant returns (bool) {\r\n\r\n         for (uint256 i = 0; i < tokenId.length; i++) {\r\n           _unStakeNFT2(tokenId[i]);\r\n        }\r\n\r\n        return true;\r\n        //return _unStakeNFT(tokenId);\r\n    }\r\n\r\n\r\n    function _unStakeNFT2(uint256 tokenId) internal onlyStaker2(tokenId) requireTimeElapsed2(tokenId) returns (bool) {\r\n        // payout stake, this should be safe as the function is non-reentrant\r\n        _payoutStake2(tokenId);\r\n\r\n        // delete stake record, effectively unstaking it\r\n        delete Nft2[tokenId];\r\n        playerNfts2[msg.sender].mount = playerNfts2[msg.sender].mount - 1;\r\n        \r\n          \r\n      //  uint256 tokenCount = nftToken.balanceOf(address(this));\r\n        //uint256[] memory tokensId = new uint256[](tokenCount);\r\n\r\n        for (uint256 i = 0; i <  playerNfts2[msg.sender].idnft.length; i++) {\r\n            if ( playerNfts2[msg.sender].idnft[i] == tokenId) { \r\n                 //delete playerNfts1[msg.sender].idnft[i];\r\n               playerNfts2[msg.sender].idnft =  remove2(playerNfts2[msg.sender].idnft,i);\r\n\r\n                 \r\n             }\r\n        }\r\n        \r\n\r\n        // return token\r\n        nftToken2.safeTransferFrom(address(this), msg.sender, tokenId);\r\n\r\n        emit NftUnStaked(msg.sender, tokenId, block.number);\r\n\r\n        return true;\r\n    }\r\n \r\n    function remove2(uint256[] memory array, uint256 index) internal returns(uint256[] memory value) {\r\n       \r\n        uint256[] memory arrayNew = new uint256[](array.length-1);\r\n        for (uint256 i = 0; i<arrayNew.length; i++){\r\n            if(i != index && i<index){\r\n                arrayNew[i] = array[i];\r\n            } else {\r\n                arrayNew[i] = array[i+1];\r\n            }\r\n        }\r\n        delete playerNfts2[msg.sender].idnft;\r\n        delete array;\r\n        return arrayNew;\r\n    }\r\n\r\n\r\n\r\n    function _stakeNFT2(uint256 tokenId) internal returns (bool) {\r\n        // require this token is not already staked\r\n        require(Nft2[tokenId].stakedFromBlock == 0, \"Stake: Token is already staked\");\r\n\r\n        // require this token is not already owned by this contract\r\n        require(nftToken2.ownerOf(tokenId) != address(this), \"Stake: Token is already staked in this contract\");\r\n\r\n        // take possession of the NFT\r\n        nftToken2.safeTransferFrom(msg.sender, address(this), tokenId);\r\n\r\n        // check that this contract is the owner\r\n        require(nftToken2.ownerOf(tokenId) == address(this), \"Stake: Failed to take possession of NFT\");\r\n\r\n        // start the staking from this block.\r\n        playerNfts2[msg.sender].mount = playerNfts2[msg.sender].mount + 1;\r\n        playerNfts2[msg.sender].idnft.push(tokenId);\r\n   \r\n        Nft2[tokenId].tokenId = tokenId;\r\n       \r\n        Nft2[tokenId].stakedFromBlock = block.number;\r\n        Nft2[tokenId].owner = msg.sender;\r\n\r\n        emit NftStaked(msg.sender, tokenId, block.number);\r\n\r\n        return true;\r\n    }\r\n    \r\n\r\n\r\n    function _payoutStake2(uint256 tokenId) internal {\r\n        /* NOTE : Must be called from non-reentrant function to be safe!*/\r\n\r\n        // double check that the Nft1 exists and we're not staking from block 0\r\n        require(Nft2[tokenId].stakedFromBlock > 0, \"_payoutStake: Can not stake from block 0\");\r\n\r\n        // earned amount is difference between the stake start block, current block multiplied by stake amount\r\n        uint256 timeStaked = _getTimeStaked2(tokenId).sub(1); // don't pay for the tx block of withdrawl\r\n        uint256 payout;\r\n        uint256 payoutReward;\r\n        if(playerNfts2[msg.sender].mount >= 10){\r\n\r\n              payout = timeStaked.mul(tokensPerBlock2);\r\n              payoutReward =  (payout * 2) /100;\r\n              payout = payout +payoutReward;\r\n        }else if(playerNfts2[msg.sender].mount >= 30){\r\n\r\n              payout = timeStaked.mul(tokensPerBlock2);\r\n              payoutReward =  (payout * 5) /100;\r\n              payout = payout +payoutReward;\r\n\r\n        }\r\n        else if(playerNfts2[msg.sender].mount >= 50){\r\n\r\n              payout = timeStaked.mul(tokensPerBlock2);\r\n              payoutReward =  (payout * 8) /100;\r\n              payout = payout +payoutReward;\r\n\r\n        }\r\n        else if(playerNfts2[msg.sender].mount >= 100){\r\n\r\n              payout = timeStaked.mul(tokensPerBlock2);\r\n              payoutReward =  (payout * 12) /100;\r\n              payout = payout +payoutReward;\r\n\r\n        }else{\r\n              payout = timeStaked.mul(tokensPerBlock2);\r\n\r\n        }\r\n   \r\n                      \r\n        // If contract does not have enough tokens to pay out, return the NFT without payment\r\n        // This prevent a NFT being locked in the contract when empty\r\n        if (erc20Token.balanceOf(address(this)) < payout) {\r\n            emit StakePayout(msg.sender, tokenId, 0, Nft2[tokenId].stakedFromBlock, block.number);\r\n            return;\r\n        }\r\n\r\n        // payout stake\r\n        erc20Token.transfer(Nft2[tokenId].owner, payout);\r\n\r\n        emit StakePayout(msg.sender, tokenId, payout, Nft2[tokenId].stakedFromBlock, block.number);\r\n    }\r\n\r\n    function _getTimeStaked2(uint256 tokenId) internal view returns (uint256) {\r\n        if (Nft2[tokenId].stakedFromBlock == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return block.number.sub(Nft2[tokenId].stakedFromBlock);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n     function _mount2() public view returns (uint256) {\r\n\r\n\r\n       return playerNfts2[msg.sender].mount;\r\n    }\r\n\r\n    function myNfts2(address add)  public view returns(uint256[] memory){\r\n        \r\n        uint256 tokenCount = playerNfts2[add].idnft.length;\r\n        uint256[] memory tokensId = new uint256[](tokenCount);\r\n\r\n        for (uint256 i = 0; i <  tokenCount; i++) {\r\n            tokensId[i] = playerNfts2[add].idnft[i];\r\n        }\r\n        return tokensId;\r\n    }\r\n\r\n \r\n    \r\n    function ClaimTokens2(uint256[] calldata tokenId) public nonReentrant returns (bool) {\r\n\r\n         for (uint256 i = 0; i < tokenId.length; i++) {\r\n           _ClaimTokens2(tokenId[i]);\r\n        }\r\n\r\n        return true;\r\n        //return _unStakeNFT(tokenId);\r\n    }\r\n\r\n\r\n    function _ClaimTokens2(uint256 tokenId)  internal onlyStaker2(tokenId) requireTimeElapsed2(tokenId) returns (bool) {\r\n\r\n\r\n            _payoutStake2(tokenId);\r\n            Nft2[tokenId].stakedFromBlock = block.number;\r\n        \r\n\r\n        return true;\r\n\r\n    }\r\n    \r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_nftToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC721\",\"name\":\"_nftToken2\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_erc20Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_daoAdmin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"NftStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"NftUnStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toBlock\",\"type\":\"uint256\"}],\"name\":\"StakePayout\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"}],\"name\":\"ClaimTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"}],\"name\":\"ClaimTokens2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Nft1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedFromBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Nft2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedFromBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mount2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20Token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCurrentStakeEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCurrentStakeEarned2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeNftBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeNftBalance2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"myNfts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"myNfts2\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftToken\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftToken2\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerNfts1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerNfts2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reclaimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"}],\"name\":\"stakeNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"}],\"name\":\"stakeNFT2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensPerBlock2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"}],\"name\":\"unStakeNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"}],\"name\":\"unStakeNFT2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokensPerBlock2\",\"type\":\"uint256\"}],\"name\":\"updateStakingReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NftStake", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000283273d68f210d2faeeda9760ddc1e8cbd4a8c870000000000000000000000009a8aca517b84e442d55d82ea7110645e5441effe000000000000000000000000946bbe8fc162859626bad5ceb6edf47efd8244f900000000000000000000000088c6f785767b48898552f532478562d186c85d4f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7351a0583206b36545253f1188c57b7f6c597f38269d4807038493dd8dc60afc"}