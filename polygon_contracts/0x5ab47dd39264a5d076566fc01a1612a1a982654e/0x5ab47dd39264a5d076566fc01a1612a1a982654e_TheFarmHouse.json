{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TheFarmHouse.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity 0.8.9;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n    * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n    */\\r\\n    constructor () {\\r\\n      address msgSender = _msgSender();\\r\\n      _owner = msgSender;\\r\\n      emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Returns the address of the current owner.\\r\\n    */\\r\\n    function owner() public view returns (address) {\\r\\n      return _owner;\\r\\n    }\\r\\n\\r\\n    \\r\\n    modifier onlyOwner() {\\r\\n      require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n      _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n      emit OwnershipTransferred(_owner, address(0));\\r\\n      _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n      _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n      require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n      emit OwnershipTransferred(_owner, newOwner);\\r\\n      _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract TheFarmHouse is Context, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 private SEEDS_TO_PLANT_1MINERS = 1080000;//for final version should be seconds in a day\\r\\n    uint256 private PSN = 10000;\\r\\n    uint256 private PSNH = 5000;\\r\\n    uint256 private devFeeVal = 2;\\r\\n    bool private initialized = false;\\r\\n    address payable private recAddr;\\r\\n    mapping (address => uint256) private seedMiners;\\r\\n    mapping (address => uint256) private claimedSeeds;\\r\\n    mapping (address => uint256) private lastPlanted;\\r\\n    mapping (address => address) private referrals;\\r\\n    mapping (uint256 => ReferralData) public referralsData;\\r\\n    mapping (address=>uint256) public refIndex;\\r\\n    mapping (address => uint256) public refferalsAmountData;\\r\\n    uint256 public totalRefferalCount;\\r\\n    uint256 private marketSeeds;\\r\\n\\r\\n    struct ReferralData{\\r\\n        address refAddress;\\r\\n        uint256 amount;\\r\\n        uint256 refCount;\\r\\n    }\\r\\n    \\r\\n    constructor(address payable _benificiaryAddress) {\\r\\n        recAddr = _benificiaryAddress;\\r\\n    }\\r\\n    \\r\\n    function replantSeeds(address ref) public {\\r\\n        require(initialized);\\r\\n        \\r\\n        if(ref == msg.sender) {\\r\\n            ref = address(0);\\r\\n        }\\r\\n        \\r\\n        if(referrals[msg.sender] == address(0) && referrals[msg.sender] != msg.sender) {\\r\\n            referrals[msg.sender] = ref;\\r\\n        }\\r\\n        \\r\\n        uint256 seedsUsed = getMySeeds(msg.sender);\\r\\n        uint256 newMiners = SafeMath.div(seedsUsed,SEEDS_TO_PLANT_1MINERS);\\r\\n        seedMiners[msg.sender] = SafeMath.add(seedMiners[msg.sender],newMiners);\\r\\n        claimedSeeds[msg.sender] = 0;\\r\\n        lastPlanted[msg.sender] = block.timestamp;\\r\\n        \\r\\n        //send referral seeds\\r\\n        claimedSeeds[referrals[msg.sender]] = SafeMath.add(claimedSeeds[referrals[msg.sender]],SafeMath.div(seedsUsed.mul(100000000),740740741));\\r\\n       \\r\\n        if(referrals[msg.sender]!=address(0) && refferalsAmountData[referrals[msg.sender]]==0){\\r\\n            totalRefferalCount = totalRefferalCount.add(1);\\r\\n            refIndex[referrals[msg.sender]] = totalRefferalCount;\\r\\n        }\\r\\n        if(referrals[msg.sender]!=address(0)){\\r\\n            uint256 currentIndex = refIndex[referrals[msg.sender]];\\r\\n            refferalsAmountData[referrals[msg.sender]] = refferalsAmountData[referrals[msg.sender]].add(claimedSeeds[referrals[msg.sender]]);\\r\\n            referralsData[currentIndex] = ReferralData({\\r\\n                refAddress:referrals[msg.sender],\\r\\n                amount:referralsData[currentIndex].amount.add(SafeMath.div(seedsUsed.mul(100000000),740740741)),\\r\\n                refCount:referralsData[currentIndex].refCount.add(1)\\r\\n            });\\r\\n        }\\r\\n        //boost market to nerf miners hoarding\\r\\n        marketSeeds=SafeMath.add(marketSeeds,SafeMath.div(seedsUsed,5));\\r\\n    }\\r\\n    \\r\\n    function harvestSeeds() public {\\r\\n        require(initialized);\\r\\n        uint256 hasSeeds = getMySeeds(msg.sender);\\r\\n        uint256 seedValue = calculateSeedSell(hasSeeds);\\r\\n        uint256 fee = devFee(seedValue);\\r\\n        claimedSeeds[msg.sender] = 0;\\r\\n        lastPlanted[msg.sender] = block.timestamp;\\r\\n        marketSeeds = SafeMath.add(marketSeeds,hasSeeds);\\r\\n        recAddr.transfer(fee);\\r\\n        payable (msg.sender).transfer(SafeMath.sub(seedValue,fee));\\r\\n    }\\r\\n    \\r\\n    function seedRewards(address adr) public view returns(uint256) {\\r\\n        uint256 hasSeeds = getMySeeds(adr);\\r\\n        uint256 seedValue = calculateSeedSell(hasSeeds);\\r\\n        return seedValue;\\r\\n    }\\r\\n    \\r\\n    function plantSeeds(address ref) public payable {\\r\\n        require(initialized);\\r\\n        uint256 seedsBought = calculateSeedBuy(msg.value,SafeMath.sub(address(this).balance,msg.value));\\r\\n        seedsBought = SafeMath.sub(seedsBought,devFee(seedsBought));\\r\\n        uint256 fee = devFee(msg.value);\\r\\n        recAddr.transfer(fee);\\r\\n        claimedSeeds[msg.sender] = SafeMath.add(claimedSeeds[msg.sender],seedsBought);\\r\\n        replantSeeds(ref);\\r\\n    }\\r\\n    \\r\\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) private view returns(uint256) {\\r\\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\\r\\n    }\\r\\n    \\r\\n    function calculateSeedSell(uint256 seeds) public view returns(uint256) {\\r\\n        return calculateTrade(seeds,marketSeeds,address(this).balance);\\r\\n    }\\r\\n    \\r\\n    function calculateSeedBuy(uint256 eth,uint256 contractBalance) public view returns(uint256) {\\r\\n        return calculateTrade(eth,contractBalance,marketSeeds);\\r\\n    }\\r\\n    \\r\\n    function calculateSeedBuySimple(uint256 eth) public view returns(uint256) {\\r\\n        return calculateSeedBuy(eth,address(this).balance);\\r\\n    }\\r\\n    \\r\\n    function devFee(uint256 amount) private view returns(uint256) {\\r\\n        return SafeMath.div(SafeMath.mul(amount,devFeeVal),100);\\r\\n    }\\r\\n    \\r\\n    function seedMarket() public payable onlyOwner {\\r\\n        require(marketSeeds == 0);\\r\\n        initialized = true;\\r\\n        marketSeeds = 108000000000;\\r\\n    }\\r\\n    \\r\\n    function getBalance() public view returns(uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n    \\r\\n    function getMyMiners(address adr) public view returns(uint256) {\\r\\n        return seedMiners[adr];\\r\\n    }\\r\\n    \\r\\n    function getMySeeds(address adr) public view returns(uint256) {\\r\\n        return SafeMath.add(claimedSeeds[adr],getSeedsSincelastPlanted(adr));\\r\\n    }\\r\\n    \\r\\n    function getSeedsSincelastPlanted(address adr) public view returns(uint256) {\\r\\n        uint256 secondsPassed=min(SEEDS_TO_PLANT_1MINERS,SafeMath.sub(block.timestamp,lastPlanted[adr]));\\r\\n        return SafeMath.mul(secondsPassed,seedMiners[adr]);\\r\\n    }\\r\\n    \\r\\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_benificiaryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateSeedBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateSeedBuySimple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seeds\",\"type\":\"uint256\"}],\"name\":\"calculateSeedSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getMyMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getMySeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getSeedsSincelastPlanted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestSeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"plantSeeds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"refIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referralsData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"refAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"refferalsAmountData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"replantSeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seedMarket\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"seedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRefferalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TheFarmHouse", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000dffc5a78314d19d04abde2b46d361136e04f1047", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}