{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.19;\r\n\r\ninterface IERC20 {\r\n  function decimals() external pure returns (uint8);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IWRAP {\r\n  function wrapping(uint256 _amount,address _receiver) external returns (bool);\r\n}\r\n\r\ninterface IUSER {\r\n  function registerWithPermit(address _addr, address _ref) external returns (bool);\r\n  function distributeWithPermit(address _addr,address _token,uint256 _amount) external returns (bool);\r\n  function isRegistered(address _addr) external view returns (bool);\r\n  function getReferralAddr(address _addr) external view returns (address);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n      return msg.sender;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner,address indexed newOwner);\r\n\r\n    constructor() {\r\n      address msgSender = _msgSender();\r\n      _owner = msgSender;\r\n      emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n      return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n      require( _owner == _msgSender());\r\n      _;\r\n    }\r\n\r\n    function transferOwnership(address account) public virtual onlyOwner {\r\n      emit OwnershipTransferred(_owner, account);\r\n      _owner = account;\r\n    }\r\n}\r\n\r\ncontract HuskyFund_RewardPool is Context, Ownable {\r\n\r\n    struct User {\r\n      uint256 deposit;\r\n      uint256 claimed;\r\n      uint256 lastclaim;\r\n      uint256 genesis;\r\n    }\r\n\r\n    mapping(address => User) public user;\r\n\r\n    address distributor;\r\n    address public depositToken;\r\n    address public rewardToken;\r\n    uint256 public depositValue;\r\n    uint256 public maxWithdraw;\r\n    uint256 public rewardROI;\r\n    uint256 public claimwait;\r\n    bool public active;\r\n\r\n    address public usersContract;\r\n\r\n    uint256 day = 60 * 60 * 24;\r\n    uint256 month = day * 30;\r\n\r\n    uint256 public directRef = 50;\r\n    uint256 public matchingROI = 100;\r\n    uint256 public denominator = 1000;\r\n\r\n    constructor(uint256 _depositValue,uint256 _claimwait,uint256 _roipermonth) {\r\n      distributor = msg.sender;\r\n      usersContract = 0xbd41C2089A7611b34bafC04AFa153DAf67e2454d;\r\n      depositToken = 0xc2132D05D31c914a87C6611C10748AEb04B58e8F;\r\n      rewardToken = 0x8A5f3cEad32990fE032A1059e063e79990D915DF;\r\n      depositValue = _depositValue * 1e6;\r\n      maxWithdraw = 1600;\r\n      rewardROI = _roipermonth;\r\n      claimwait = _claimwait;\r\n      active = true;\r\n    }\r\n\r\n    function deposit(address _addr,address _ref) public returns (bool) {\r\n      require(IUSER(usersContract).isRegistered(_ref),\"Revert: Referral Address Must Be Registered\");\r\n      require(_addr!=_ref,\"Revert: Referral Address Cannot Be Self\");\r\n      require(active,\"Revert: Pool Was Not Actived\");\r\n      IUSER(usersContract).registerWithPermit(_addr,_ref);\r\n      address ref = IUSER(usersContract).getReferralAddr(_addr);\r\n      IERC20(depositToken).transferFrom(msg.sender,address(this),depositValue);\r\n      uint256 wrapped_amount = mulPercent(depositValue,directRef,denominator);\r\n      IERC20(depositToken).approve(rewardToken,wrapped_amount);\r\n      IWRAP(rewardToken).wrapping(wrapped_amount,ref);\r\n      uint256 distributeAmount = mulPercent(depositValue,120,denominator);\r\n      IERC20(depositToken).transfer(distributor,distributeAmount);\r\n      _claim(_addr);\r\n      if(user[_addr].deposit==0){ user[_addr].genesis = block.timestamp; }\r\n      user[_addr].deposit += depositValue;\r\n      return true;\r\n    }\r\n\r\n    function toggleSwitch() public onlyOwner returns (bool) {\r\n      active = !active;\r\n      return true;\r\n    }\r\n\r\n    function settingPoolState(address[] memory _addrs,uint256[] memory _value) public onlyOwner returns (bool) {\r\n      usersContract = _addrs[0];\r\n      depositToken = _addrs[1];\r\n      rewardToken = _addrs[2];\r\n      depositValue = _value[0];\r\n      maxWithdraw = _value[1];\r\n      rewardROI = _value[2];\r\n      claimwait = _value[3];\r\n      directRef = _value[4];\r\n      matchingROI = _value[5];\r\n      denominator = _value[6];\r\n      return true;\r\n    }\r\n\r\n    function execute(address _token,uint256 _amount) public onlyOwner returns (bool) {\r\n      IERC20(_token).transfer(msg.sender,_amount);\r\n      return true;\r\n    }\r\n\r\n    function claim(address _addr) public returns (bool) {\r\n      require(user[_addr].lastclaim+claimwait<block.timestamp,\"Revert: Claming Is In Cooldown\");\r\n      _claim(_addr);\r\n      return true;\r\n    }\r\n\r\n    function _claim(address _addr) internal returns (bool) {\r\n      uint256 amount = currentReward(_addr);\r\n      uint256 max = mulPercent(user[_addr].deposit,maxWithdraw,denominator);\r\n      if(user[_addr].claimed + amount > max){\r\n        amount = max - user[_addr].claimed;\r\n      }\r\n      user[_addr].claimed += amount;\r\n      user[_addr].lastclaim = block.timestamp;\r\n      if(amount > 0){\r\n        uint256 wrapped_amount = mulPercent(amount,matchingROI,denominator);\r\n        IERC20(depositToken).approve(rewardToken,wrapped_amount);\r\n        IWRAP(rewardToken).wrapping(wrapped_amount,usersContract);\r\n        IUSER(usersContract).distributeWithPermit(_addr,rewardToken,wrapped_amount);\r\n        uint256 paid_amount = subPercent(amount,matchingROI,denominator);\r\n        IERC20(depositToken).transfer(_addr,paid_amount);\r\n      }\r\n      return true;\r\n    }\r\n\r\n    function currentReward(address _addr) public view returns (uint256) {\r\n      if(user[_addr].lastclaim > 0) {\r\n        uint256 rewardPerBlock = mulPercent(user[_addr].deposit,rewardROI,denominator);\r\n        uint256 period = block.timestamp - user[_addr].lastclaim;\r\n        return period * rewardPerBlock / month;\r\n      }else{\r\n        return 0;\r\n      }\r\n    }\r\n\r\n    function currentCooldown(address _addr) public view returns (uint256) {\r\n      if(user[_addr].lastclaim + claimwait > block.timestamp){\r\n        return user[_addr].lastclaim + claimwait - block.timestamp;\r\n      }else{\r\n        return 0;\r\n      }\r\n    }\r\n\r\n    function mulPercent(uint256 _amount,uint256 _percent,uint256 _denominator) public pure returns (uint256) {\r\n      return _amount * _percent / _denominator;\r\n    }\r\n\r\n    function subPercent(uint256 _amount,uint256 _percent,uint256 _denominator) public pure returns (uint256) {\r\n      uint256 _sub = mulPercent(_amount,_percent,_denominator);\r\n      return _amount - _sub;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimwait\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_roipermonth\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimwait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"currentCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"currentReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"directRef\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"matchingROI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"mulPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardROI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"settingPoolState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"subPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleSwitch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastclaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"genesis\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usersContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "HuskyFund_RewardPool", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000093a800000000000000000000000000000000000000000000000000000000000000078", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://17101fb8c07bea72e976a9205e02e2c1434d02654c9d9ba6ff18161ee348e47a"}