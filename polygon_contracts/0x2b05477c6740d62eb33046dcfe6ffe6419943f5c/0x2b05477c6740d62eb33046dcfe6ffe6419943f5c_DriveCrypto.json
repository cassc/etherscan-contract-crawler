{"SourceCode": "{\"AttributeMap.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport \\\"./Authorized.sol\\\";\\r\\n\\r\\ncontract AttributeMap is Authorized {\\r\\n\\r\\n  mapping (address =\\u003e uint) internal _attributeMap;\\r\\n\\r\\n  // ------------- Public Views -------------\\r\\n  function isExemptFee(address target) public view returns(bool) { return checkMapAttribute(_attributeMap[target], 0); }\\r\\n  function isExemptFeeReceiver(address target) public view returns(bool) { return checkMapAttribute(_attributeMap[target], 1); }\\r\\n  function isExemptTxLimit(address target) public view returns(bool) { return checkMapAttribute(_attributeMap[target], 2); }\\r\\n  function isExemptAmountLimit(address target) public view returns(bool) { return checkMapAttribute(_attributeMap[target], 3); }\\r\\n  function isExemptOperatePausedToken(address target) public view returns(bool) { return checkMapAttribute(_attributeMap[target], 4); }\\r\\n  function isSpecialFeeWallet(address target) public view returns(bool) { return checkMapAttribute(_attributeMap[target], 5); }\\r\\n  function isSpecialFeeWalletReceiver(address target) public view returns(bool) { return checkMapAttribute(_attributeMap[target], 6); }\\r\\n  function isExemptSwapMaker(address target) public view returns(bool) { return checkMapAttribute(_attributeMap[target], 7); }\\r\\n  function isExemptReward(address target) public view returns(bool) { return checkMapAttribute(_attributeMap[target], 8); }\\r\\n\\r\\n  // ------------- Internal PURE GET Functions -------------\\r\\n  function isExemptFee(uint mapValue) internal pure returns(bool) { return checkMapAttribute(mapValue, 0); }\\r\\n  function isExemptFeeReceiver(uint mapValue) internal pure returns(bool) { return checkMapAttribute(mapValue, 1); }\\r\\n  function isExemptTxLimit(uint mapValue) internal pure returns(bool) { return checkMapAttribute(mapValue, 2); }\\r\\n  function isExemptAmountLimit(uint mapValue) internal pure returns(bool) { return checkMapAttribute(mapValue, 3); }\\r\\n  function isExemptOperatePausedToken(uint mapValue) internal pure returns(bool) { return checkMapAttribute(mapValue, 4); }\\r\\n  function isSpecialFeeWallet(uint mapValue) internal pure returns(bool) { return checkMapAttribute(mapValue, 5); }\\r\\n  function isSpecialFeeWalletReceiver(uint mapValue) internal pure returns(bool) { return checkMapAttribute(mapValue, 6); }\\r\\n  function isExemptSwapMaker(uint mapValue) internal pure returns(bool) { return checkMapAttribute(mapValue, 7); }\\r\\n  function isExemptReward(uint mapValue) internal pure returns(bool) { return checkMapAttribute(mapValue, 8); }\\r\\n\\r\\n  // ------------- Public Internal SET Functions -------------\\r\\n  function setExemptFee(uint mapValue, bool operation) internal pure returns(uint) { return setMapAttribute(mapValue, 0, operation); }\\r\\n  function setExemptFeeReceiver(uint mapValue, bool operation) internal pure returns(uint) { return setMapAttribute(mapValue, 1, operation); }\\r\\n  function setExemptTxLimit(uint mapValue, bool operation) internal pure returns(uint) { return setMapAttribute(mapValue, 2, operation); }\\r\\n  function setExemptAmountLimit(uint mapValue, bool operation) internal pure returns(uint) { return setMapAttribute(mapValue, 3, operation); }\\r\\n  function setExemptOperatePausedToken(uint mapValue, bool operation) internal pure returns(uint) { return setMapAttribute(mapValue, 4, operation); }\\r\\n  function setSpecialFeeWallet(uint mapValue, bool operation) internal pure returns(uint) { return setMapAttribute(mapValue, 5, operation); }\\r\\n  function setSpecialFeeWalletReceiver(uint mapValue, bool operation) internal pure returns(uint) { return setMapAttribute(mapValue, 6, operation); }\\r\\n  function setExemptSwapMaker(uint mapValue, bool operation) internal pure returns(uint) { return setMapAttribute(mapValue, 7, operation); }\\r\\n  function setExemptReward(uint mapValue, bool operation) internal pure returns(uint) { return setMapAttribute(mapValue, 8, operation); }\\r\\n\\r\\n\\r\\n  // ------------- Public Authorized SET Functions -------------\\r\\n  function setExemptFee(address target, bool operation) public isFinancial { _attributeMap[target] = setExemptFee(_attributeMap[target], operation); }\\r\\n  function setExemptFeeReceiver(address target, bool operation) public isFinancial { _attributeMap[target] = setExemptFeeReceiver(_attributeMap[target], operation); }\\r\\n  function setExemptTxLimit(address target, bool operation) public isFinancial { _attributeMap[target] = setExemptTxLimit(_attributeMap[target], operation); }\\r\\n  function setExemptAmountLimit(address target, bool operation) public isFinancial { _attributeMap[target] = setExemptAmountLimit(_attributeMap[target], operation); }\\r\\n  function setExemptOperatePausedToken(address target, bool operation) public isFinancial { _attributeMap[target] = setExemptOperatePausedToken(_attributeMap[target], operation); }\\r\\n  function setSpecialFeeWallet(address target, bool operation) public isFinancial { _attributeMap[target] = setSpecialFeeWallet(_attributeMap[target], operation); }\\r\\n  function setSpecialFeeWalletReceiver(address target, bool operation) public isFinancial { _attributeMap[target] = setSpecialFeeWalletReceiver(_attributeMap[target], operation); }\\r\\n  function setExemptSwapMaker(address target, bool operation) public isFinancial { _attributeMap[target] = setExemptSwapMaker(_attributeMap[target], operation); }\\r\\n  function setExemptReward(address target, bool operation) public isFinancial { _attributeMap[target] = setExemptReward(_attributeMap[target], operation); }\\r\\n\\r\\n\\r\\n}\"},\"Authorized.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ncontract Authorized is Ownable {\\r\\n  mapping(address =\\u003e uint) internal _permissions;\\r\\n\\r\\n  function safeApprove(address token, address spender, uint256 amount) external isWithdrawer { IERC20(token).approve(spender, amount); }\\r\\n  function safeTransfer(address token, address receiver, uint256 amount) external isWithdrawer { IERC20(token).transfer(receiver, amount); }\\r\\n  function safeWithdraw() external isWithdrawer { payable(_msgSender()).transfer(address(this).balance); }\\r\\n\\r\\n  function setPermission(address wallet, uint8 typeIndex, bool state) external isAdmin { _permissions[wallet] = setMapAttribute(_permissions[wallet], typeIndex, state); }\\r\\n  function checkMapAttribute(uint mapValue, uint8 shift) internal pure returns(bool) { return mapValue \\u003e\\u003e shift \\u0026 1 == 1; }\\r\\n  function setMapAttribute(uint mapValue, uint8 shift, bool include) internal pure returns(uint) { return include ? 1 \\u003c\\u003c shift | mapValue : 1 \\u003c\\u003c shift ^ type(uint).max \\u0026 mapValue; }\\r\\n  function hasPermission(address wallet, uint8 typeIndex) external view returns(bool) { return checkMapAttribute(_permissions[wallet], typeIndex) || owner() == msg.sender; }\\r\\n  function checkPermission(uint8 typeIndex) private view { require(checkMapAttribute(_permissions[msg.sender], typeIndex) || owner() == msg.sender, \\\"Wallet does not have permission\\\"); }\\r\\n\\r\\n  modifier isAdmin { checkPermission(0); _; }\\r\\n  modifier isFinancial { checkPermission(1); _; }\\r\\n  modifier isController { checkPermission(2); _; }\\r\\n  modifier isWithdrawer { checkPermission(3); _; }\\r\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"},\"DriveCrypto.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./IPancake.sol\\\";\\nimport \\\"./GasHelper.sol\\\";\\nimport \\\"./SwapHelper.sol\\\";\\n\\ncontract DriveCrypto is GasHelper, ERC20 {\\n  address constant private DEAD = 0x000000000000000000000000000000000000dEaD;\\n  address constant private ZERO = 0x0000000000000000000000000000000000000000;\\n   address constant private WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c; // BSC WBNB\\n   address constant private BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; // BSC BUSD\\n  // address constant private BUSD = 0x8516Fc284AEEaa0374E66037BD2309349FF728eA; // BSC BUSD TESTNET\\n  // address constant private WBNB = 0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd; // BSC WBNB TESTNET\\n\\n  string constant private _nameToken = \\\"Drive Crypto\\\";\\n  string constant private _symbolToken = \\\"DRIVECRYPTO\\\";\\n\\n  // Token Details\\n  uint8 constant private decimal = 18;\\n  uint256 constant private maxSupply = 1_000_000_000 * (10 ** decimal);\\n  \\n  // Blacklist mapping\\n  mapping(address=\\u003ebool) public isBlacklisted;\\n\\n  // Wallets limits\\n  uint256 public _maxTxAmount = (maxSupply * 1) / 100;\\n  uint256 public _maxAccountAmount = (maxSupply * 5) / 100;\\n  uint256 public _maxSellAmount = (maxSupply * 5) / 100;\\n  uint256 public _minAmountToAutoSwap =  1000 * (10 ** decimal); // min amount stored before swap to collect fee\\n\\n  // Fees\\n  uint256 public feeAdministrativeWallet; // 0%\\n  uint256 public feeInternalFundWallet; // 0%\\n  uint256 public feeReward; // 0%\\n  uint256 public feeBurn; // 0%\\n\\n  uint constant private maxTotalFee = 10000; // fee will never ever be higher than 100\\n  mapping(address =\\u003e uint) public specialFeesByWallet;\\n  mapping(address =\\u003e uint) public specialFeesByWalletReceiver;\\n\\n  // Helpers\\n  bool internal pausedToken;\\n  bool private _noReentrance;\\n\\n  bool public pausedSwapFee;\\n  bool public disabledReward;\\n\\n  // Counters\\n  uint256 public accumulatedToSwapFeeAdministrative;\\n  uint256 public accumulatedToSwapFeeInternalFund;\\n  uint256 public accumulatedToSwapFeeReward;\\n  uint256 public accumulatedToReward;\\n\\n  // Liquidity Pair\\n  address public liquidityPool;\\n  address public secondaryPair;\\n\\n  // Wallets\\n  address public administrativeWallet;\\n  address public internalFundWallet;\\n\\n  address public swapHelperAddress;\\n\\n  // Reward calculations\\n  mapping(address =\\u003e HolderShare) public holderMap;\\n  address[] public _holders;\\n\\n  uint256 public minTokenHoldToStake = 100 * (10 ** decimal); // min amount holder must have to be able to receive rewards\\n  uint256 public totalTokens;\\n  uint256 private stakePerShare;\\n  uint256 public rewardWithdrawWaitTime = 86400; // 1 day\\n  uint256 constant private stakePrecision = 10 ** 18;\\n\\n  struct Receivers { address wallet; uint256 amount; }\\n\\n  struct HolderShare { uint256 amountToken; uint256 totalReceived; uint256 pendingReceive; uint256 entryPointMarkup; uint256 arrayIndex; uint256 receivedAt; }\\n\\n  event RewardWithdraw( address indexed wallet, uint amount);\\n\\n  receive() external payable { }\\n\\n  constructor()ERC20(_nameToken, _symbolToken) {\\n    // PancakeRouter router = PancakeRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E); // BSC\\n    // PancakeRouter router = PancakeRouter(0xD99D1c33F9fC3444f8101754aBC46c52416550D1); // BSC TESTNET\\n    // address factory = router.factory();\\n    // liquidityPool = address(PancakeFactory(factory).createPair(WBNB, address(this)));\\n    // secondaryPair = address(PancakeFactory(factory).getPair(WBNB, BUSD));\\n\\n    // administrativeWallet = 0x7b6FfDE5E5Ef31001A651A93b49be5DAF14c8994;\\n    // _permissions[administrativeWallet] = 15; // exempt fee, fee receiver, tx limit and wallet limit\\n    // internalFundWallet = 0x29436850A44B0f1c39D230d6d609dE7539a56f06;\\n    // _permissions[internalFundWallet] = 15; // exempt fee, fee receiver, tx limit and wallet limit\\n\\n    // uint baseAttributes = 0;\\n    // baseAttributes = setExemptAmountLimit(baseAttributes, true);\\n    // baseAttributes = setSpecialFeeWallet(baseAttributes, true);\\n    // baseAttributes = setSpecialFeeWalletReceiver(baseAttributes, true);\\n    // baseAttributes = setExemptReward(baseAttributes, true);\\n\\n    // // _attributeMap[liquidityPool] = baseAttributes;\\n\\n    // setSpecialWalletFeeOnSend(liquidityPool, 200, 300, 100, 100);\\n    // setSpecialWalletFeeOnReceive(liquidityPool, 200, 300, 100, 400);\\n\\n    // baseAttributes = setSpecialFeeWallet(baseAttributes, false);\\n    // baseAttributes = setSpecialFeeWalletReceiver(baseAttributes, false);\\n\\n    // baseAttributes = setExemptTxLimit(baseAttributes, true);\\n    // _attributeMap[DEAD] = baseAttributes;\\n    // _attributeMap[ZERO] = baseAttributes;\\n\\n    // baseAttributes = setExemptFee(baseAttributes, true);\\n    // baseAttributes = setExemptSwapMaker(baseAttributes, true);\\n    // _attributeMap[address(this)] = baseAttributes;\\n\\n    // baseAttributes = setExemptOperatePausedToken(baseAttributes, true);\\n    // _attributeMap[_msgSender()] = baseAttributes;\\n\\n    // SwapHelper swapHelper = new SwapHelper();\\n    // swapHelper.safeApprove(WBNB, address(this), type(uint256).max);\\n    // swapHelper.safeApprove(BUSD, address(this), type(uint256).max);\\n    // swapHelper.transferOwnership(_msgSender());\\n    // swapHelperAddress = address(swapHelper);\\n\\n    // baseAttributes = setExemptOperatePausedToken(baseAttributes, false);\\n    // _attributeMap[swapHelperAddress] = baseAttributes;\\n\\n    _mint(_msgSender(), maxSupply);\\n\\n    pausedToken = true;\\n  }\\n\\n  // ----------------- Public Views -----------------\\n  function name() public pure override returns (string memory) { return _nameToken; }\\n  function symbol() public pure override returns (string memory) { return _symbolToken; }\\n  function getOwner() external view returns (address) { return owner(); }\\n  function decimals() public pure override returns (uint8) { return decimal; }\\n  function getFeeTotal() public view returns(uint256) { return feeAdministrativeWallet + feeInternalFundWallet + feeReward + feeBurn; }\\n  function getSpecialWalletFeeOnSend(address target) public view returns(uint administrativeFee, uint internalFundFee, uint rewardFee, uint burnFee ) { return getSpecialWalletFee(target, true); }\\n  function getSpecialWalletFeeOnReceive(address target) public view returns(uint administrativeFee, uint internalFundFee, uint rewardFee, uint burnFee ) { return getSpecialWalletFee(target, false); }\\n  function getStakeHoldersSize() public view returns (uint) { return _holders.length; }\\n  function getCalculatedWithdraw(address holder) external view returns (uint) {\\n    uint256 entryPointMarkup = holderMap[holder].entryPointMarkup;\\n    uint256 totalToBePaid = (holderMap[holder].amountToken * stakePerShare) / stakePrecision;\\n    if (totalToBePaid \\u003c= entryPointMarkup) return holderMap[holder].pendingReceive;\\n    return holderMap[holder].pendingReceive + (totalToBePaid - entryPointMarkup);\\n  }\\n  function isReadyToWithdraw(address holder) external view returns(bool) { return holderMap[holder].receivedAt + rewardWithdrawWaitTime \\u003c block.timestamp; }\\n  function getWithdrawTimeout(address holder) external view returns(uint) {\\n    if (holderMap[holder].receivedAt + rewardWithdrawWaitTime \\u003c= block.timestamp) return 0;\\n    return (holderMap[holder].receivedAt + rewardWithdrawWaitTime) - block.timestamp;\\n  }\\n\\n  // ----------------- Authorized Methods -----------------\\n\\n  function enableToken(bool _pausedToken) external isAdmin { pausedToken = _pausedToken; }\\n  function setLiquidityPool(address newPair) external isAdmin { require(newPair != address(0), \\\"invalid new pair address\\\"); liquidityPool = newPair; }\\n  function setSecondaryPair(address newPair) external isAdmin { require(newPair != address(0), \\\"invalid new pair address\\\"); secondaryPair = newPair; }\\n  function setPausedSwapFee(bool state) external isAdmin { pausedSwapFee = state; }\\n  function setDisabledReward(bool state) external isAdmin { disabledReward = state; }\\n  function setRewardWithdrawWaitTime(uint valueInSeconds) external isAdmin {     \\n      rewardWithdrawWaitTime = valueInSeconds; \\n    }\\n\\n  // ----------------- Wallets Settings -----------------\\n  function setAdministrativeWallet(address account) public isAdmin {\\n    require(account != address(0), \\\"administrativeWallet cannot be Zero\\\");\\n    administrativeWallet = account;\\n  }\\n\\n  function setInternalFundWallet(address account) public isAdmin {\\n    require(account != address(0), \\\"internalFundWallet cannot be Zero\\\");\\n    internalFundWallet = account;\\n  }\\n\\n  // ----------------- Fee Settings -----------------\\n  function setContractFees(uint administrative, uint internalFund, uint rewardFee, uint burnFee) public isFinancial {\\n    feeAdministrativeWallet = administrative;\\n    feeInternalFundWallet = internalFund;\\n    feeReward = rewardFee;\\n    feeBurn = burnFee;\\n    require(getFeeTotal() \\u003c= maxTotalFee, \\\"All rates and fee together must be equal or lower than 100%\\\");\\n  }\\n\\n  function setSpecialWallet(address target, bool isSender, uint administrative, uint internalFund, uint reward, uint burnFee) internal isFinancial {\\n    require(administrative + internalFund + reward + burnFee \\u003c= maxTotalFee, \\\"All rates and fee together must be equal or lower than 100%\\\");\\n    uint composedValue = administrative + (internalFund * 1e4) + (reward * 1e8) + (burnFee * 1e12);\\n    if (isSender) {\\n      specialFeesByWallet[target] = composedValue;\\n    } else {\\n      specialFeesByWalletReceiver[target] = composedValue;\\n    }\\n  }\\n\\n  function setSpecialWalletFeeOnSend(address target, uint administrative, uint internalFund, uint reward, uint burnFee) public isFinancial { return setSpecialWallet(target, true, administrative, internalFund, reward, burnFee); }\\n  function setSpecialWalletFeeOnReceive(address target, uint administrative, uint internalFund, uint reward, uint burnFee) public isFinancial { return setSpecialWallet(target, false, administrative, internalFund, reward, burnFee); }\\n\\n  // ----------------- Token Flow Settings -----------------\\n  function setMaxSellAmount(uint256 maxSellAmount) public isFinancial {\\n    _maxSellAmount = maxSellAmount;\\n  }\\n\\n  function setMaxTxAmount(uint256 maxTxAmount) public isFinancial {\\n    _maxTxAmount = maxTxAmount;\\n  }\\n\\n  function setMaxAccountAmount(uint256 maxAccountAmount) public isFinancial {\\n    _maxAccountAmount = maxAccountAmount;\\n  }\\n  function setMinAmountToAutoSwap(uint256 amount) public isFinancial {\\n    _minAmountToAutoSwap = amount;\\n  }\\n\\n  // ----------------- Special Authorized Operations -----------------\\n  function buyBackAndHoldWithDecimals(uint256 decimalAmount, address receiver) public isController { buyBackWithDecimals(decimalAmount, receiver); }\\n  function buyBackAndBurnWithDecimals(uint256 decimalAmount) public isController { buyBackWithDecimals(decimalAmount, address(0)); }\\n\\n  // ----------------- External Methods -----------------\\n  function burn(uint256 amount) external { _burn(_msgSender(), amount); }\\n\\n  function withdraw(address wallet) external {\\n    require(holderMap[wallet].receivedAt + rewardWithdrawWaitTime \\u003c block.timestamp);\\n    calculateDistribution(wallet, holderMap[wallet].amountToken, stakePerShare, stakePrecision);\\n    uint amountToTransfer = holderMap[wallet].pendingReceive;\\n    holderMap[wallet].pendingReceive = 0;\\n    holderMap[wallet].totalReceived += amountToTransfer;\\n    holderMap[wallet].receivedAt = block.timestamp;\\n    tokenTransfer(BUSD, wallet, amountToTransfer);\\n    emit RewardWithdraw(wallet, amountToTransfer);\\n  }\\n\\n  function multiTransfer(Receivers[] memory users) external {\\n    for ( uint i = 0; i \\u003c users.length; i++ ) transfer(users[i].wallet, users[i].amount);\\n  }\\n\\n  // ----------------- NEW Methods -----------------\\n  function blackList(address _user) public isAdmin {\\n        require(!isBlacklisted[_user], \\\"user already blacklisted\\\");\\n        isBlacklisted[_user] = true;\\n        // emit events as well\\n    }\\n  function removeFromBlacklist(address _user) public isAdmin {\\n        require(isBlacklisted[_user], \\\"user already whitelisted\\\");\\n        isBlacklisted[_user] = false;\\n        // emit events as well\\n    }\\n\\n    //OVERRIDE\\n  function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override(ERC20) {\\n        require (isBlacklisted[from] == false, \\\"Token transfer refused. Sender is on blacklist\\\");\\n        require (isBlacklisted[to] == false, \\\"Token transfer refused. Receiver is on blacklist\\\");\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n\\n\\n  // ----------------- Internal CORE -----------------\\n  function _transfer( address sender, address receiver,uint256 amount) internal override {\\n    require (isBlacklisted[sender] == false, \\\"Token transfer refused. Sender is on blacklist\\\");\\n    require (isBlacklisted[receiver] == false, \\\"Token transfer refused. Receiver is on blacklist\\\");\\n    require(amount \\u003e 0, \\\"Invalid Amount\\\");\\n    require(!_noReentrance, \\\"ReentranceGuard Alert\\\");\\n    _noReentrance = true;\\n\\n    uint senderAttributes = _attributeMap[sender];\\n    uint receiverAttributes = _attributeMap[receiver];\\n    // Initial Checks\\n    require(sender != address(0) \\u0026\\u0026 receiver != address(0), \\\"transfer from the zero address\\\");\\n    require(!pausedToken || isExemptOperatePausedToken(senderAttributes), \\\"Token is paused\\\");\\n    require(amount \\u003c= _maxTxAmount || isExemptTxLimit(senderAttributes), \\\"Exceeded the maximum transaction limit\\\");\\n\\n    uint256 senderBalance = _balances[sender];\\n    require(senderBalance \\u003e= amount, \\\"Transfer amount exceeds your balance\\\");\\n    uint256 newSenderBalance = senderBalance - amount;\\n    _balances[sender] = newSenderBalance;\\n\\n\\n    uint administrativeFee = feeAdministrativeWallet;\\n    uint internalFundFee = feeInternalFundWallet;\\n    uint rewardFee = feeReward;\\n    uint burnFee = feeBurn;\\n\\n    // Calculate Fees\\n    uint256 feeAmount = 0;\\n    if(!isExemptFee(senderAttributes) \\u0026\\u0026 !isExemptFeeReceiver(receiverAttributes)) {\\n      if(isSpecialFeeWallet(senderAttributes)) { // Check special wallet fee on sender\\n        (administrativeFee, internalFundFee, rewardFee, burnFee) = getSpecialWalletFee(sender, true);\\n      } else if(isSpecialFeeWalletReceiver(receiverAttributes)) { // Check special wallet fee on receiver\\n        require(amount \\u003c= _maxSellAmount || isExemptTxLimit(senderAttributes), \\\"Exceeded the maximum sell limit\\\");\\n        (administrativeFee, internalFundFee, rewardFee, burnFee) = getSpecialWalletFee(receiver, false);\\n      }\\n      feeAmount = ((administrativeFee + internalFundFee + rewardFee + burnFee) * amount) / 10000;\\n    }\\n\\n    if (feeAmount != 0) splitFee(feeAmount, sender, administrativeFee, internalFundFee, rewardFee, burnFee);\\n    if ((!pausedSwapFee) \\u0026\\u0026 !isExemptSwapMaker(senderAttributes)) autoSwap(sender);\\n\\n    // Update Recipient Balance\\n    uint256 newRecipientBalance = _balances[receiver] + (amount - feeAmount);\\n    _balances[receiver] = newRecipientBalance;\\n    require(newRecipientBalance \\u003c= _maxAccountAmount || isExemptAmountLimit(receiverAttributes), \\\"Exceeded the maximum tokens an wallet can hold\\\");\\n\\n    if (!disabledReward) executeRewardOperations(sender, receiver, newSenderBalance, newRecipientBalance, senderAttributes, receiverAttributes);\\n\\n    _noReentrance = false;\\n    emit Transfer(sender, receiver, amount);\\n  }\\n\\n  function autoSwap(address sender) private {\\n    // --------------------- Execute Auto Swap -------------------------\\n    address liquidityPair = liquidityPool;\\n    address secondaryPairLocal = secondaryPair;\\n\\n    if (sender == liquidityPair) return;\\n    uint accumulatedAdministrative = accumulatedToSwapFeeAdministrative;\\n    uint accumulatedInternalFund = accumulatedToSwapFeeInternalFund;\\n    uint accumulatedReward = accumulatedToSwapFeeReward;\\n\\n    uint totalAmount = accumulatedAdministrative + accumulatedInternalFund + accumulatedReward;\\n    if (totalAmount \\u003c _minAmountToAutoSwap) return;\\n\\n    // Execute auto swap\\n    address busdAddress = BUSD;\\n    address swapHelper = swapHelperAddress;\\n    uint256 amountOut = executeSwap(totalAmount, liquidityPair, secondaryPairLocal, swapHelper, busdAddress);\\n\\n    // --------------------- Transfer Swapped Amount -------------------------\\n    uint totalFee = accumulatedAdministrative + accumulatedInternalFund + accumulatedReward;\\n    if (accumulatedAdministrative \\u003e 0) { // Cost 2 cents\\n      uint amountToSend = (amountOut * accumulatedAdministrative) / (totalFee);\\n      tokenTransferFrom(busdAddress, swapHelper, administrativeWallet, amountToSend);\\n      accumulatedToSwapFeeAdministrative = 0;\\n    }\\n    if (accumulatedInternalFund \\u003e 0) { // Cost 2 cents\\n      uint amountToSend = (amountOut * accumulatedInternalFund) / (totalFee);\\n      tokenTransferFrom(busdAddress, swapHelper, internalFundWallet, amountToSend);\\n      accumulatedToSwapFeeInternalFund = 0;\\n    }\\n    if (accumulatedReward \\u003e 0) { // Cost 2 cents\\n      uint amountToSend = (amountOut * accumulatedReward) / (totalFee);\\n      tokenTransferFrom(busdAddress, swapHelper, address(this), amountToSend);\\n      accumulatedToReward += amountToSend;\\n      accumulatedToSwapFeeReward = 0;\\n    }\\n  }\\n\\n  function executeSwap(uint totalAmount, address liquidityPair, address secondaryPairLocal, address swapHelper, address busdAddress) private returns (uint amountOut) {\\n    {\\n      address wbnbAddress = WBNB;\\n      (uint112 reserve0, uint112 reserve1) = getTokenReserves(liquidityPair);\\n      bool reversed = isReversed(liquidityPair, wbnbAddress);\\n      if (reversed) { uint112 temp = reserve0; reserve0 = reserve1; reserve1 = temp; }\\n      _balances[liquidityPair] += totalAmount;\\n\\n      uint256 wbnbBalanceBefore = getTokenBalanceOf(wbnbAddress, secondaryPairLocal);\\n      uint256 wbnbAmount = getAmountOut(totalAmount, reserve1, reserve0);\\n      swapToken(liquidityPair, reversed ? 0 : wbnbAmount, reversed ? wbnbAmount : 0, secondaryPairLocal);\\n      uint256 wbnbBalanceNew = getTokenBalanceOf(wbnbAddress, secondaryPairLocal);\\n      require(wbnbBalanceNew == wbnbBalanceBefore + wbnbAmount, \\\"Wrong amount of swapped on WBNB\\\");\\n      amountOut = wbnbAmount;\\n    }\\n    {\\n      (uint112 reserve0, uint112 reserve1) = getTokenReserves(secondaryPairLocal);\\n      bool reversed = isReversed(secondaryPairLocal, busdAddress);\\n      if (reversed) { uint112 temp = reserve0; reserve0 = reserve1; reserve1 = temp; }\\n\\n      uint256 busdBalanceBefore = getTokenBalanceOf(busdAddress, swapHelper);\\n      uint256 busdAmount = getAmountOut(amountOut, reserve1, reserve0);\\n      swapToken(secondaryPairLocal, reversed ? 0 : busdAmount, reversed ? busdAmount : 0, swapHelper);\\n      uint256 busdBalanceNew = getTokenBalanceOf(busdAddress, swapHelper);\\n      require(busdBalanceNew == busdBalanceBefore + busdAmount, \\\"Wrong amount of swapped on BUSD\\\");\\n      amountOut = busdAmount;\\n    }\\n  }\\n\\n  function splitFee(uint256 incomingFeeTokenAmount, address sender, uint administrativeFee, uint internalFundFee, uint rewardFee, uint burnFee) private {\\n    uint256 totalFee = administrativeFee + internalFundFee + rewardFee + burnFee;\\n\\n    //Burn\\n    if (burnFee \\u003e 0) {\\n      uint256 burnAmount = (incomingFeeTokenAmount * burnFee) / totalFee;\\n      _balances[address(this)] += burnAmount;\\n      _burn(address(this), burnAmount);\\n    }\\n\\n    accumulatedToSwapFeeAdministrative =  (incomingFeeTokenAmount * administrativeFee) / totalFee;\\n    accumulatedToSwapFeeInternalFund =  (incomingFeeTokenAmount * internalFundFee) / totalFee;\\n    accumulatedToSwapFeeReward =  (incomingFeeTokenAmount * rewardFee) / totalFee;\\n    if (pausedSwapFee) {\\n      if (administrativeFee \\u003e 0) {\\n        address wallet = administrativeWallet;\\n        uint accumulated = accumulatedToSwapFeeAdministrative;\\n        uint256 walletBalance = _balances[wallet] + accumulated;\\n        _balances[wallet] = walletBalance;\\n        emit Transfer(sender, wallet, accumulated);\\n        accumulatedToSwapFeeAdministrative = 0;\\n        if(!isExemptReward(_attributeMap[wallet])) _updateHolder(wallet, walletBalance, minTokenHoldToStake, stakePerShare, stakePrecision);\\n      }\\n      if (internalFundFee \\u003e 0) {\\n        address wallet = internalFundWallet;\\n        uint accumulated = accumulatedToSwapFeeInternalFund;\\n        uint256 walletBalance = _balances[wallet] + accumulated;\\n        _balances[wallet] = walletBalance;\\n        emit Transfer(sender, wallet, accumulated);\\n        accumulatedToSwapFeeInternalFund = 0;\\n        if(!isExemptReward(_attributeMap[wallet])) _updateHolder(wallet, walletBalance, minTokenHoldToStake, stakePerShare, stakePrecision);\\n      }\\n      if (rewardFee \\u003e 0) {\\n        address wallet = address(this);\\n        uint accumulated = accumulatedToSwapFeeReward;\\n        uint256 walletBalance = _balances[wallet] + accumulated;\\n        _balances[wallet] = walletBalance;\\n        emit Transfer(sender, wallet, accumulated);\\n        accumulatedToSwapFeeReward = 0;\\n      }\\n    }\\n  }\\n\\n  function getSpecialWalletFee(address target, bool isSender) internal view returns(uint administrativeFee, uint internalFundFee, uint rewardFee, uint burnFee ) {\\n    uint composedValue = isSender ? specialFeesByWallet[target] : specialFeesByWalletReceiver[target];\\n    administrativeFee = composedValue % 1e4;\\n    composedValue = composedValue / 1e4;\\n    internalFundFee = composedValue % 1e4;\\n    composedValue = composedValue / 1e4;\\n    rewardFee = composedValue % 1e4;\\n    composedValue = composedValue / 1e4;\\n    burnFee = composedValue % 1e4;\\n  }\\n\\n  // --------------------- Stake Internal Methods -------------------------\\n  function setMinTokenHoldToStake(uint amount) external isFinancial { minTokenHoldToStake = amount; }\\n\\n  function executeRewardOperations(address sender, address receiver, uint senderAmount, uint receiverAmount, uint senderAttributes, uint receiverAttributes) private {\\n    uint minTokenHolder = minTokenHoldToStake;\\n    uint stakePerShareValue = stakePerShare;\\n    uint stakePrecisionValue = stakePrecision;\\n\\n    if(!isExemptReward(senderAttributes)) _updateHolder(sender, senderAmount, minTokenHolder, stakePerShareValue, stakePrecisionValue);\\n\\n    // Calculate new stake per share value\\n    uint accumulated = accumulatedToReward;\\n    if (accumulated \\u003e 0) {\\n      uint considerateTotalTokens = totalTokens;\\n      stakePerShareValue += (accumulated * stakePrecisionValue) / (considerateTotalTokens == 0 ? 1 : considerateTotalTokens);\\n      stakePerShare = stakePerShareValue;\\n      accumulatedToReward = 0;\\n    }\\n\\n    if(!isExemptReward(receiverAttributes)) _updateHolder(receiver, receiverAmount, minTokenHolder, stakePerShareValue, stakePrecisionValue);\\n  }\\n\\n  function _updateHolder(address holder, uint256 amount, uint minTokenHolder, uint stakePerShareValue, uint stakePrecisionValue) private {\\n    // If holder has less than minTokenHoldToStake, then does not participate on staking\\n    uint256 considerateAmount = minTokenHolder \\u003c= amount ? amount : 0;\\n    uint256 holderAmount = holderMap[holder].amountToken;\\n\\n    if (holderAmount \\u003e 0) calculateDistribution(holder, holderAmount, stakePerShareValue, stakePrecisionValue);\\n\\n    if (considerateAmount \\u003e 0 \\u0026\\u0026 holderAmount == 0 ) {\\n      addToHoldersList(holder);\\n    } else if (considerateAmount == 0 \\u0026\\u0026 holderAmount \\u003e 0) {\\n      removeFromHoldersList(holder);\\n    }\\n    totalTokens = (totalTokens - holderAmount) + considerateAmount;\\n    holderMap[holder].amountToken = considerateAmount;\\n    holderMap[holder].entryPointMarkup = (considerateAmount * stakePerShareValue) / stakePrecisionValue;\\n  }\\n\\n  function addToHoldersList(address holder) private {\\n    holderMap[holder].arrayIndex = _holders.length;\\n    _holders.push(holder);\\n  }\\n\\n  function removeFromHoldersList(address holder) private {\\n    address lastHolder = _holders[_holders.length - 1];\\n    uint256 holderIndexRemoved = holderMap[holder].arrayIndex;\\n    _holders[holderIndexRemoved] = lastHolder;\\n    _holders.pop();\\n    holderMap[lastHolder].arrayIndex = holderIndexRemoved;\\n    holderMap[holder].arrayIndex = 0;\\n  }\\n\\n  function calculateDistribution(address holder, uint amountToken, uint stakePerShareValue, uint stakePrecisionValue) private returns (uint) {\\n    uint256 entryPointMarkup = holderMap[holder].entryPointMarkup;\\n    uint256 totalToBePaid = (amountToken * stakePerShareValue) / stakePrecisionValue;\\n\\n    if (totalToBePaid \\u003c= entryPointMarkup) return holderMap[holder].pendingReceive;\\n    uint256 newPendingAmount = holderMap[holder].pendingReceive + (totalToBePaid - entryPointMarkup);\\n    holderMap[holder].pendingReceive = newPendingAmount;\\n    holderMap[holder].entryPointMarkup = totalToBePaid;\\n    return newPendingAmount;\\n  }\\n\\n  // --------------------- Private Methods -------------------------\\n\\n  function buyBackWithDecimals(uint256 decimalAmount, address destAddress) private {\\n    uint256 maxBalance = getTokenBalanceOf(WBNB, address(this));\\n    if (maxBalance \\u003c decimalAmount) revert(\\\"insufficient WBNB amount on contract\\\");\\n\\n    address liquidityPair = liquidityPool;\\n    uint liquidityAttribute = _attributeMap[liquidityPair];\\n\\n    uint newAttributes = setExemptTxLimit(liquidityAttribute, true);\\n    newAttributes = setExemptFee(liquidityAttribute, true);\\n    _attributeMap[liquidityPair] = newAttributes;\\n\\n    address helperAddress = swapHelperAddress;\\n\\n    (uint112 reserve0, uint112 reserve1) = getTokenReserves(liquidityPair);\\n    bool reversed = isReversed(liquidityPair, WBNB);\\n    if (reversed) { uint112 temp = reserve0; reserve0 = reserve1; reserve1 = temp; }\\n\\n    tokenTransfer(WBNB, liquidityPair, decimalAmount);\\n\\n    uint256 tokenAmount = getAmountOut(decimalAmount, reserve0, reserve1);\\n    if (destAddress == address(0)) {\\n      swapToken(liquidityPair, reversed ? tokenAmount : 0, reversed ? 0 : tokenAmount, helperAddress);\\n      _burn(helperAddress, tokenAmount);\\n    } else {\\n      swapToken(liquidityPair, reversed ? tokenAmount : 0, reversed ? 0 : tokenAmount, destAddress);\\n    }\\n    _attributeMap[liquidityPair] = liquidityAttribute;\\n  }\\n}\"},\"ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\r\\n// Modified version to provide _balances as internal instead private\\r\\n\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IERC20Metadata.sol\\\";\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\r\\n * instead returning `false` on failure. This behavior is nonetheless\\r\\n * conventional and does not conflict with the expectations of ERC20\\r\\n * applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn\\u0027t required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    mapping(address =\\u003e uint256) internal _balances;\\r\\n\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * The default value of {decimals} is 18. To select a different value for\\r\\n     * {decimals} you should overload it.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n     * overridden;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n        require(currentAllowance \\u003e= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n        unchecked {\\r\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\r\\n        require(currentAllowance \\u003e= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        unchecked {\\r\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\r\\n     *\\r\\n     * This internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(senderBalance \\u003e= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[sender] = senderBalance - amount;\\r\\n        }\\r\\n        _balances[recipient] += amount;\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n\\r\\n        _afterTokenTransfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance \\u003e= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n        }\\r\\n        _totalSupply -= amount;\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\r\\n     * will be transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\r\\n     * has been transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens have been burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\"},\"GasHelper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport \\\"./AttributeMap.sol\\\";\\r\\n\\r\\ncontract GasHelper is AttributeMap {\\r\\n  uint internal swapFee = 25;\\r\\n\\r\\n  function setSwapFee(uint amount) external isAdmin { swapFee = amount; }\\r\\n\\r\\n  function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) internal view returns (uint256 amountOut) {\\r\\n    require(amountIn \\u003e 0, \\u0027Insufficient amount in\\u0027);\\r\\n    require(reserveIn \\u003e 0 \\u0026\\u0026 reserveOut \\u003e 0, \\u0027Insufficient liquidity\\u0027);\\r\\n    uint256 amountInWithFee = amountIn * (10000 - swapFee);\\r\\n    uint256 numerator = amountInWithFee  * reserveOut;\\r\\n    uint256 denominator = (reserveIn * 10000) + amountInWithFee;\\r\\n    amountOut = numerator / denominator;\\r\\n  }\\r\\n\\r\\n  function isReversed(address pair, address tokenA) internal view returns (bool) {\\r\\n    address token0;\\r\\n    bool failed = false;\\r\\n    assembly {\\r\\n      let emptyPointer := mload(0x40)\\r\\n      mstore(emptyPointer, 0x0dfe168100000000000000000000000000000000000000000000000000000000)\\r\\n      failed := iszero(staticcall(gas(), pair, emptyPointer, 0x04, emptyPointer, 0x20))\\r\\n      token0 := mload(emptyPointer)\\r\\n    }\\r\\n    if (failed) revert(\\\"Unable to check tokens direction\\\");\\r\\n    return token0 != tokenA;\\r\\n  }\\r\\n\\r\\n  // gas optimization on transfer token\\r\\n  function tokenTransfer(address token, address recipient, uint256 amount) internal {\\r\\n    bool failed = false;\\r\\n    assembly {\\r\\n      let emptyPointer := mload(0x40)\\r\\n      mstore(emptyPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\r\\n      mstore(add(emptyPointer, 0x04), recipient)\\r\\n      mstore(add(emptyPointer, 0x24), amount)\\r\\n      failed := iszero(call(gas(), token, 0, emptyPointer, 0x44, 0, 0))\\r\\n    }\\r\\n    if (failed) revert(\\\"Unable to transfer token\\\");\\r\\n  }\\r\\n\\r\\n  // gas optimization on transfer from token method\\r\\n  function tokenTransferFrom(address token, address from, address recipient, uint256 amount) internal {\\r\\n    bool failed = false;\\r\\n    assembly {\\r\\n      let emptyPointer := mload(0x40)\\r\\n      mstore(emptyPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\r\\n      mstore(add(emptyPointer, 0x04), from)\\r\\n      mstore(add(emptyPointer, 0x24), recipient)\\r\\n      mstore(add(emptyPointer, 0x44), amount)\\r\\n      failed := iszero(call(gas(), token, 0, emptyPointer, 0x64, 0, 0))\\r\\n    }\\r\\n    if (failed) revert(\\\"Unable to transferFrom token\\\");\\r\\n  }\\r\\n\\r\\n  // gas optimization on swap operation using a liquidity pool\\r\\n  function swapToken(address pair, uint amount0Out, uint amount1Out, address receiver) internal {\\r\\n    bool failed = false;\\r\\n    assembly {\\r\\n      let emptyPointer := mload(0x40)\\r\\n      mstore(emptyPointer, 0x022c0d9f00000000000000000000000000000000000000000000000000000000)\\r\\n      mstore(add(emptyPointer, 0x04), amount0Out)\\r\\n      mstore(add(emptyPointer, 0x24), amount1Out)\\r\\n      mstore(add(emptyPointer, 0x44), receiver)\\r\\n      mstore(add(emptyPointer, 0x64), 0x80)\\r\\n      mstore(add(emptyPointer, 0x84), 0)\\r\\n      failed := iszero(call(gas(), pair, 0, emptyPointer, 0xa4, 0, 0))\\r\\n    }\\r\\n    if (failed) revert(\\\"Unable to swap Pair\\\");\\r\\n  }\\r\\n\\r\\n  // gas optimization on get balanceOf from BEP20 or ERC20 token\\r\\n  function getTokenBalanceOf(address token, address holder) internal view returns (uint112 tokenBalance) {\\r\\n    bool failed = false;\\r\\n    assembly {\\r\\n      let emptyPointer := mload(0x40)\\r\\n      mstore(emptyPointer, 0x70a0823100000000000000000000000000000000000000000000000000000000)\\r\\n      mstore(add(emptyPointer, 0x04), holder)\\r\\n      failed := iszero(staticcall(gas(), token, emptyPointer, 0x24, emptyPointer, 0x40))\\r\\n      tokenBalance := mload(emptyPointer)\\r\\n    }\\r\\n    if (failed) revert(\\\"Unable to get balance\\\");\\r\\n  }\\r\\n\\r\\n  // gas optimization on get reserves from liquidity pool\\r\\n  function getTokenReserves(address pairAddress) internal view returns (uint112 reserve0, uint112 reserve1) {\\r\\n    bool failed = false;\\r\\n    assembly {\\r\\n      let emptyPointer := mload(0x40)\\r\\n      mstore(emptyPointer, 0x0902f1ac00000000000000000000000000000000000000000000000000000000)\\r\\n      failed := iszero(staticcall(gas(), pairAddress, emptyPointer, 0x4, emptyPointer, 0x40))\\r\\n      reserve0 := mload(emptyPointer)\\r\\n      reserve1 := mload(add(emptyPointer, 0x20))\\r\\n    }\\r\\n    if (failed) revert(\\\"Unable to get reserves from pair\\\");\\r\\n  }\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\"},\"IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\"},\"IPancake.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity 0.8.16;\\r\\ninterface PancakeFactory {\\r\\n  function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n}\\r\\n\\r\\ninterface PancakeRouter {\\r\\n  function factory() external pure returns (address);\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\"},\"SwapHelper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ncontract SwapHelper is Ownable {\\r\\n  constructor() {}\\r\\n\\r\\n  function safeApprove(address token, address spender, uint256 amount) external onlyOwner { IERC20(token).approve(spender, amount); }\\r\\n\\r\\n  function safeWithdraw() external onlyOwner { payable(_msgSender()).transfer(address(this).balance); }\\r\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_holders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxAccountAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minAmountToAutoSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accumulatedToReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accumulatedToSwapFeeAdministrative\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accumulatedToSwapFeeInternalFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accumulatedToSwapFeeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"administrativeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"blackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"decimalAmount\",\"type\":\"uint256\"}],\"name\":\"buyBackAndBurnWithDecimals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"decimalAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"buyBackAndHoldWithDecimals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disabledReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_pausedToken\",\"type\":\"bool\"}],\"name\":\"enableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAdministrativeWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeInternalFundWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getCalculatedWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"getSpecialWalletFeeOnReceive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"administrativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"internalFundFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"getSpecialWalletFeeOnSend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"administrativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"internalFundFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeHoldersSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getWithdrawTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"typeIndex\",\"type\":\"uint8\"}],\"name\":\"hasPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"holderMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingReceive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryPointMarkup\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"arrayIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"internalFundWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isExemptAmountLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isExemptFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isExemptFeeReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isExemptOperatePausedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isExemptReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isExemptSwapMaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isExemptTxLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"isReadyToWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isSpecialFeeWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isSpecialFeeWalletReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokenHoldToStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct DriveCrypto.Receivers[]\",\"name\":\"users\",\"type\":\"tuple[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pausedSwapFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeFromBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardWithdrawWaitTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"safeApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"safeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondaryPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setAdministrativeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"administrative\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"internalFund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"name\":\"setContractFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setDisabledReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"operation\",\"type\":\"bool\"}],\"name\":\"setExemptAmountLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"operation\",\"type\":\"bool\"}],\"name\":\"setExemptFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"operation\",\"type\":\"bool\"}],\"name\":\"setExemptFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"operation\",\"type\":\"bool\"}],\"name\":\"setExemptOperatePausedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"operation\",\"type\":\"bool\"}],\"name\":\"setExemptReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"operation\",\"type\":\"bool\"}],\"name\":\"setExemptSwapMaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"operation\",\"type\":\"bool\"}],\"name\":\"setExemptTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setInternalFundWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPair\",\"type\":\"address\"}],\"name\":\"setLiquidityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAccountAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxAccountAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSellAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxSellAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinAmountToAutoSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinTokenHoldToStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setPausedSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"typeIndex\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"valueInSeconds\",\"type\":\"uint256\"}],\"name\":\"setRewardWithdrawWaitTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPair\",\"type\":\"address\"}],\"name\":\"setSecondaryPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"operation\",\"type\":\"bool\"}],\"name\":\"setSpecialFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"operation\",\"type\":\"bool\"}],\"name\":\"setSpecialFeeWalletReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"administrative\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"internalFund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"name\":\"setSpecialWalletFeeOnReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"administrative\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"internalFund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"name\":\"setSpecialWalletFeeOnSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"specialFeesByWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"specialFeesByWalletReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapHelperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DriveCrypto", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://08c83286dd13f22a19bb0abd922492f064e75530329c16711f447930d4cd6ff7"}