{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DefiEdgeStrategyFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSL\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./DefiEdgeStrategy.sol\\\";\\nimport \\\"./base/StrategyManager.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./interfaces/IDefiEdgeStrategyDeployer.sol\\\";\\nimport \\\"./interfaces/IStrategyBase.sol\\\";\\n\\n/**\\n * @title DefiEdge Strategy Factory\\n * @author DefiEdge Team\\n * @notice A factory contract used to launch strategie's to manage assets on Uniswap V3\\n * @dev Deployer deploys the straegy and this contract connects it with manager contract\\n */\\n\\ncontract DefiEdgeStrategyFactory is IStrategyFactory {\\n    using SafeMath for uint256;\\n\\n    mapping(uint256 => address) public override strategyByIndex; // map strategies by index\\n    mapping(address => bool) public override isValidStrategy; // make strategy valid when deployed\\n\\n    mapping(address => address) public override strategyByManager; // strategy manager contracts linked with strategies\\n\\n    mapping(address => bool) public override isAllowedOneInchCaller; // check if oneinch caller is valid or not\\n\\n    mapping(address => mapping(address => uint256)) internal _heartBeat; // map heartBeat for base and quote token\\n\\n    // total number of strategies\\n    uint256 public override totalIndex;\\n\\n    uint256 public constant MAX_PROTOCOL_PERFORMANCE_FEES_RATE = 20e6; // maximum 20%\\n    uint256 public override protocolPerformanceFeeRate; // 1e8 means 100%\\n\\n    uint256 public override protocolFeeRate; // 1e8 means 100%\\n\\n    uint256 public override defaultAllowedSlippage;\\n    uint256 public override defaultAllowedDeviation;\\n    uint256 public override defaultAllowedSwapDeviation;\\n\\n    mapping(address => uint256) internal _allowedSlippageByPool; // allowed slippage on the swap\\n    mapping(address => uint256) internal _allowedDeviationByPool; // allowed deviation between Chainlink price and pool price\\n    mapping(address => uint256) internal _allowedSwapDeviationByPool; // allowed swap deviation between slippage and per swap\\n\\n    uint256 public constant MAX_DECIMAL = 18; // pool token decimal should be less then 18\\n\\n    // governance address\\n    address public override governance;\\n\\n    // pending governance\\n    address public override pendingGovernance;\\n\\n    // protocol fee\\n    address public override feeTo; // receive protocol fees here\\n\\n    uint256 public override strategyCreationFee; // fee for strategy creation in native blockchain token\\n\\n    IDefiEdgeStrategyDeployer public override deployerProxy;\\n    IUniswapV3Factory public override uniswapV3Factory; // Uniswap V3 pool factory\\n    FeedRegistryInterface public override chainlinkRegistry; // Chainlink registry\\n    // Interface public swapRouter; // Uniswap V3 Swap Router\\n    IOneInchRouter public override oneInchRouter;\\n\\n    // mapping of blacklisted strategies\\n    mapping(address => bool) public override denied;\\n\\n    // when true emergency functions will be frozen forever\\n    bool public override freezeEmergency;\\n\\n    // Modifiers\\n    modifier onlyGovernance() {\\n        require(msg.sender == governance, \\\"NO\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _governance,\\n        IDefiEdgeStrategyDeployer _deployerProxy,\\n        FeedRegistryInterface _chainlinkRegistry,\\n        IUniswapV3Factory _uniswapV3factory,\\n        IOneInchRouter _oneInchRouter,\\n        uint256 _allowedSlippage,\\n        uint256 _allowedDeviation\\n    ) {\\n        require(_allowedSlippage <= 1e17); // should be <= 10%\\n        require(_allowedDeviation <= 1e17); // should be <= 10%\\n        governance = _governance;\\n        deployerProxy = _deployerProxy;\\n        uniswapV3Factory = _uniswapV3factory;\\n        chainlinkRegistry = _chainlinkRegistry;\\n        defaultAllowedSlippage = _allowedSlippage;\\n        defaultAllowedDeviation = _allowedDeviation;\\n        defaultAllowedSwapDeviation = _allowedDeviation.div(2);\\n        oneInchRouter = _oneInchRouter;\\n    }\\n\\n    /**\\n     * @inheritdoc IStrategyFactory\\n     */\\n    function createStrategy(CreateStrategyParams calldata params) external payable override {\\n        require(msg.value == strategyCreationFee, \\\"INSUFFICIENT_FEES\\\");\\n\\n        IUniswapV3Pool pool = IUniswapV3Pool(params.pool);\\n\\n        require(IERC20Minimal(pool.token0()).decimals() <= MAX_DECIMAL && IERC20Minimal(pool.token1()).decimals() <= MAX_DECIMAL, \\\"ID\\\");\\n\\n        address poolAddress = uniswapV3Factory.getPool(pool.token0(), pool.token1(), pool.fee());\\n\\n        require(poolAddress != address(0) && poolAddress == address(pool), \\\"IP\\\");\\n\\n        address manager = address(\\n            new StrategyManager(\\n                IStrategyFactory(address(this)),\\n                params.operator,\\n                params.feeTo,\\n                params.managementFeeRate,\\n                params.performanceFeeRate,\\n                params.limit\\n            )\\n        );\\n\\n        address strategy = deployerProxy.createStrategy(\\n            IStrategyFactory(address(this)),\\n            params.pool,\\n            oneInchRouter,\\n            chainlinkRegistry,\\n            IStrategyManager(manager),\\n            params.usdAsBase,\\n            params.ticks\\n        );\\n\\n        strategyByManager[manager] = strategy;\\n\\n        totalIndex = totalIndex.add(1);\\n\\n        strategyByIndex[totalIndex] = strategy;\\n\\n        isValidStrategy[strategy] = true;\\n        emit NewStrategy(strategy, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Changes allowed slippage for specific pool\\n     * @param _pool Address of the pool\\n     * @param _allowedSlippage New allowed slippage specific to the pool\\n     */\\n    function changeAllowedSlippage(address _pool, uint256 _allowedSlippage) external override onlyGovernance {\\n        _allowedSlippageByPool[_pool] = _allowedSlippage;\\n        emit ChangeAllowedSlippage(_pool, _allowedSlippage);\\n    }\\n\\n    /**\\n     * @notice Changes allowed deviation, it is used to check deviation against the pool\\n     * @param _pool Address of the pool\\n     * @param _allowedDeviation New allowed deviation\\n     */\\n    function changeAllowedDeviation(address _pool, uint256 _allowedDeviation) external override onlyGovernance {\\n        _allowedDeviationByPool[_pool] = _allowedDeviation;\\n        emit ChangeAllowedDeviation(_pool, _allowedDeviation);\\n    }\\n\\n    /**\\n     * @notice Change allowed swap deviation\\n     * @param _pool Address of the new pool\\n     * @param _allowedSwapDeviation New allowed swap deviation value\\n     */\\n    function changeAllowedSwapDeviation(address _pool, uint256 _allowedSwapDeviation) external override onlyGovernance {\\n        _allowedSwapDeviationByPool[_pool] = _allowedSwapDeviation;\\n        emit ChangeAllowedSwapDeviation(_pool, _allowedSwapDeviation);\\n    }\\n\\n    /**\\n     * @notice Current allowed slippage if the slippage for specific pool is not defined it'll return default allowed slippage\\n     * @param _pool Address of the pool\\n     * @return Current allowed slippage\\n     */\\n    function allowedSlippage(address _pool) public view override returns (uint256) {\\n        if (_allowedSlippageByPool[_pool] > 0) {\\n            return _allowedSlippageByPool[_pool];\\n        } else {\\n            return defaultAllowedSlippage;\\n        }\\n    }\\n\\n    /**\\n     * @notice Current allowed deviation, if specific to pool is defiened it'll return it otherwise returns the default value\\n     * @param _pool Address of the pool\\n     * @return Default value of for the allowed deviation.\\n     */\\n    function allowedDeviation(address _pool) public view override returns (uint256) {\\n        if (_allowedDeviationByPool[_pool] > 0) {\\n            return _allowedDeviationByPool[_pool];\\n        } else {\\n            return defaultAllowedDeviation;\\n        }\\n    }\\n\\n    /**\\n     * @notice Current allowed swap deviation by pool, if by pool is not defiened it'll return the default vallue\\n     * @param _pool Address of the pool\\n     * @return Current allowed swap deviation\\n     */\\n    function allowedSwapDeviation(address _pool) public view override returns (uint256) {\\n        if (_allowedSwapDeviationByPool[_pool] > 0) {\\n            return _allowedSwapDeviationByPool[_pool];\\n        } else {\\n            return defaultAllowedSwapDeviation;\\n        }\\n    }\\n\\n    /**\\n     * @notice Changes default values for the slippage and deviation\\n     * @param _allowedSlippage New default allowed slippage\\n     * @param _allowedDeviation New Default allowed deviation\\n     * @param _allowedSwapDeviation New default allowed deviation for the swap.\\n     */\\n    function changeDefaultValues(\\n        uint256 _allowedSlippage,\\n        uint256 _allowedDeviation,\\n        uint256 _allowedSwapDeviation\\n    ) external override onlyGovernance {\\n        if (_allowedSlippage > 0) {\\n            defaultAllowedSlippage = _allowedSlippage;\\n            emit ChangeAllowedSlippage(address(0), defaultAllowedSlippage);\\n        }\\n\\n        if (_allowedDeviation > 0) {\\n            defaultAllowedDeviation = _allowedDeviation;\\n            emit ChangeAllowedDeviation(address(0), defaultAllowedDeviation);\\n        }\\n\\n        if (_allowedSwapDeviation > 0) {\\n            defaultAllowedSwapDeviation = _allowedSwapDeviation;\\n            emit ChangeAllowedSwapDeviation(address(0), defaultAllowedSwapDeviation);\\n        }\\n    }\\n\\n    /**\\n     * @notice Changes protocol fees\\n     * @param _fee New fee in 1e8 format\\n     */\\n    function changeProtocolFeeRate(uint256 _fee) external onlyGovernance {\\n        require(_fee <= 1e7, \\\"IA\\\"); // should be less than 10%\\n        protocolFeeRate = _fee;\\n        emit ChangeProtocolFee(protocolFeeRate);\\n    }\\n\\n    /**\\n     * @notice Changes protocol performance fees\\n     * @param _feeRate New fee in 1e8 format\\n     */\\n    function changeProtocolPerformanceFeeRate(uint256 _feeRate) external onlyGovernance {\\n        require(_feeRate <= MAX_PROTOCOL_PERFORMANCE_FEES_RATE, \\\"IA\\\"); // should be less than 20%\\n        protocolPerformanceFeeRate = _feeRate;\\n        emit ChangeProtocolPerformanceFee(protocolPerformanceFeeRate);\\n    }\\n\\n    /**\\n     * @notice Change feeTo address\\n     * @param _feeTo New fee to address\\n     */\\n    function changeFeeTo(address _feeTo) external onlyGovernance {\\n        feeTo = _feeTo;\\n    }\\n\\n    /**\\n     * @notice Change the governance address\\n     * @param _governance Address of the new governance\\n     */\\n    function changeGovernance(address _governance) external onlyGovernance {\\n        pendingGovernance = _governance;\\n    }\\n\\n    /**\\n     * @notice Change the governance\\n     */\\n    function acceptGovernance() external {\\n        require(msg.sender == pendingGovernance);\\n        governance = pendingGovernance;\\n    }\\n\\n    /**\\n     * @notice Adds strategy to Denylist, rebalance and add liquidity will be stopped\\n     * @param _strategy Address of the strategy\\n     * @param _status If true, it'll be blacklisted.\\n     */\\n    function deny(address _strategy, bool _status) external onlyGovernance {\\n        denied[_strategy] = _status;\\n        emit StrategyStatusChanged(_status);\\n    }\\n\\n    /**\\n     * @notice Changes strategy creation fees\\n     * @param _fee New fee in 1e18 format\\n     */\\n    function changeFeeForStrategyCreation(uint256 _fee) external onlyGovernance {\\n        strategyCreationFee = _fee;\\n        emit ChangeStrategyCreationFee(strategyCreationFee);\\n    }\\n\\n    /**\\n     * @notice Governance claims fees received from strategy creation\\n     * @param _to Address where the fees should be sent\\n     */\\n    function claimFees(address _to) external onlyGovernance {\\n        uint256 balance = address(this).balance;\\n        if (balance > 0) {\\n            payable(_to).transfer(balance);\\n            emit ClaimFees(_to, balance);\\n        }\\n    }\\n\\n    /**\\n     * @notice Update heartBeat for specific feeds\\n     * @param _base base token address\\n     * @param _quote quote token address\\n     * @param _period heartbeat in seconds\\n     */\\n    function setMinHeartbeat(\\n        address _base,\\n        address _quote,\\n        uint256 _period\\n    ) external onlyGovernance {\\n        _heartBeat[_base][_quote] = _period;\\n        _heartBeat[_quote][_base] = _period;\\n    }\\n\\n    /**\\n     * @notice Fetch heartBeat for specific feeds, if hearbeat is 0 then it will return 3600 seconds by default\\n     * @param _base base token address\\n     * @param _quote quote token address\\n     */\\n    function getHeartBeat(address _base, address _quote) external view override returns (uint256) {\\n        if (_heartBeat[_base][_quote] == 0) {\\n            return 3600;\\n        } else {\\n            return _heartBeat[_base][_quote];\\n        }\\n    }\\n\\n    /**\\n     * @notice Add or remove OneInch caller contract address\\n     * @param _caller Contract address of OneInch caller\\n     * @param _status whether to add or remove caller address\\n     */\\n    function addOrRemoveOneInchCaller(\\n        address _caller,\\n        bool _status\\n    ) external onlyGovernance {\\n        isAllowedOneInchCaller[_caller] = _status;\\n    }\\n\\n    /**\\n     * @notice Freeze emergency function, can be done only once\\n     */\\n    function freezeEmergencyFunctions() external override onlyGovernance {\\n        freezeEmergency = true;\\n        emit EmergencyFrozen();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/DefiEdgeStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSL\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\n// contracts\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\\\";\\nimport \\\"./base/UniswapV3LiquidityManager.sol\\\";\\n\\n// libraries\\nimport \\\"./libraries/LiquidityHelper.sol\\\";\\n\\ncontract DefiEdgeStrategy is UniswapV3LiquidityManager {\\n    using SafeMath for uint256;\\n\\n    // events\\n    event Mint(address indexed user, uint256 share, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed user, uint256 share, uint256 amount0, uint256 amount1);\\n    event Hold();\\n    event Rebalance(NewTick[] ticks);\\n    event PartialRebalance(PartialTick[] ticks);\\n\\n    struct NewTick {\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0;\\n        uint256 amount1;\\n    }\\n\\n    struct PartialTick {\\n        uint256 index;\\n        bool burn;\\n        uint256 amount0;\\n        uint256 amount1;\\n    }\\n\\n    /**\\n     * @param _factory Address of the strategy factory\\n     * @param _pool Address of the pool\\n     * @param _oneInchRouter Address of the Uniswap V3 periphery swap router\\n     * @param _chainlinkRegistry Chainlink registry address\\n     * @param _manager Address of the manager\\n     * @param _usdAsBase If the Chainlink feed is pegged with USD\\n     * @param _ticks Array of the ticks\\n     */\\n    constructor(\\n        IStrategyFactory _factory,\\n        IUniswapV3Pool _pool,\\n        IOneInchRouter _oneInchRouter,\\n        FeedRegistryInterface _chainlinkRegistry,\\n        IStrategyManager _manager,\\n        bool[2] memory _usdAsBase,\\n        Tick[] memory _ticks\\n    ) {\\n        require(!isInvalidTicks(_ticks), \\\"IT\\\");\\n        // checks for valid ticks length\\n        require(_ticks.length <= MAX_TICK_LENGTH, \\\"ITL\\\");\\n        manager = _manager;\\n        factory = _factory;\\n        oneInchRouter = _oneInchRouter;\\n        chainlinkRegistry = _chainlinkRegistry;\\n        pool = _pool;\\n        token0 = IERC20(pool.token0());\\n        token1 = IERC20(pool.token1());\\n        usdAsBase = _usdAsBase;\\n        for (uint256 i = 0; i < _ticks.length; i++) {\\n            ticks.push(Tick(_ticks[i].tickLower, _ticks[i].tickUpper));\\n        }\\n    }\\n\\n    /**\\n     * @notice Adds liquidity to the primary range\\n     * @param _amount0 Amount of token0\\n     * @param _amount1 Amount of token1\\n     * @param _amount0Min Minimum amount of token0 to be minted\\n     * @param _amount1Min Minimum amount of token1 to be minted\\n     * @param _minShare Minimum amount of shares to be received to the user\\n     * @return amount0 Amount of token0 deployed\\n     * @return amount1 Amount of token1 deployed\\n     * @return share Number of shares minted\\n     */\\n    function mint(\\n        uint256 _amount0,\\n        uint256 _amount1,\\n        uint256 _amount0Min,\\n        uint256 _amount1Min,\\n        uint256 _minShare\\n    )\\n        external\\n        nonReentrant\\n        onlyValidStrategy\\n        returns (\\n            uint256 amount0,\\n            uint256 amount1,\\n            uint256 share\\n        )\\n    {\\n        require(manager.isUserWhiteListed(msg.sender), \\\"UA\\\");\\n\\n        // get total amounts with fees\\n        (uint256 totalAmount0, uint256 totalAmount1, , ) = this.getAUMWithFees(true);\\n\\n        if (_amount0 > 0 && _amount1 > 0 && ticks.length > 0) {\\n            Tick storage tick = ticks[0];\\n            // index 0 will always be an primary tick\\n            (amount0, amount1) = mintLiquidity(tick.tickLower, tick.tickUpper, _amount0, _amount1, msg.sender);\\n        } else {\\n            amount0 = _amount0;\\n            amount1 = _amount1;\\n\\n            if (amount0 > 0) {\\n                TransferHelper.safeTransferFrom(address(token0), msg.sender, address(this), amount0);\\n            }\\n            if (amount1 > 0) {\\n                TransferHelper.safeTransferFrom(address(token1), msg.sender, address(this), amount1);\\n            }\\n        }\\n\\n        // issue share based on the liquidity added\\n        share = issueShare(amount0, amount1, totalAmount0, totalAmount1, msg.sender);\\n\\n        // prevent front running of strategy fee\\n        require(share >= _minShare, \\\"SC\\\");\\n\\n        // price slippage check\\n        require(amount0 >= _amount0Min && amount1 >= _amount1Min, \\\"S\\\");\\n\\n        uint256 _shareLimit = manager.limit();\\n        // share limit\\n        if (_shareLimit != 0) {\\n            require(totalSupply() <= _shareLimit, \\\"L\\\");\\n        }\\n        emit Mint(msg.sender, share, amount0, amount1);\\n    }\\n\\n    /**\\n     * @notice Burn liquidity and transfer tokens back to the user\\n     * @param _shares Shares to be burned\\n     * @param _amount0Min Mimimum amount of token0 to be received\\n     * @param _amount1Min Minimum amount of token1 to be received\\n     * @return collect0 The amount of token0 returned to the user\\n     * @return collect1 The amount of token1 returned to the user\\n     */\\n    function burn(\\n        uint256 _shares,\\n        uint256 _amount0Min,\\n        uint256 _amount1Min\\n    ) external nonReentrant returns (uint256 collect0, uint256 collect1) {\\n        // check if the user has sufficient shares\\n        require(balanceOf(msg.sender) >= _shares && _shares != 0, \\\"INS\\\");\\n\\n        uint256 amount0;\\n        uint256 amount1;\\n\\n        // burn liquidity based on shares from existing ticks\\n        for (uint256 i = 0; i < ticks.length; i++) {\\n            Tick storage tick = ticks[i];\\n\\n            uint256 fee0;\\n            uint256 fee1;\\n            // burn liquidity and collect fees\\n            (amount0, amount1, fee0, fee1) = burnLiquidity(tick.tickLower, tick.tickUpper, _shares, 0);\\n\\n            // add to total amounts\\n            collect0 = collect0.add(amount0);\\n            collect1 = collect1.add(amount1);\\n        }\\n\\n        // give from unused amounts\\n        uint256 total0 = IERC20(token0).balanceOf(address(this));\\n        uint256 total1 = IERC20(token1).balanceOf(address(this));\\n\\n        uint256 _totalSupply = totalSupply();\\n\\n        if (total0 > collect0) {\\n            collect0 = collect0.add(FullMath.mulDiv(total0 - collect0, _shares, _totalSupply));\\n        }\\n\\n        if (total1 > collect1) {\\n            collect1 = collect1.add(FullMath.mulDiv(total1 - collect1, _shares, _totalSupply));\\n        }\\n\\n        // check slippage\\n        require(_amount0Min <= collect0 && _amount1Min <= collect1, \\\"S\\\");\\n\\n        // burn shares\\n        _burn(msg.sender, _shares);\\n\\n        // transfer tokens\\n        if (collect0 > 0) {\\n            TransferHelper.safeTransfer(address(token0), msg.sender, collect0);\\n        }\\n        if (collect1 > 0) {\\n            TransferHelper.safeTransfer(address(token1), msg.sender, collect1);\\n        }\\n\\n        emit Burn(msg.sender, _shares, collect0, collect1);\\n    }\\n\\n    /**\\n     * @notice Rebalances the strategy\\n     * @param _swapData Swap data to perform exchange from 1inch\\n     * @param _existingTicks Array of existing ticks to rebalance\\n     * @param _newTicks New ticks in case there are any\\n     * @param _burnAll When burning into new ticks, should we burn all liquidity?\\n     */\\n    function rebalance(\\n        bytes calldata _swapData,\\n        PartialTick[] calldata _existingTicks,\\n        NewTick[] calldata _newTicks,\\n        bool _burnAll\\n    ) external onlyOperator onlyValidStrategy nonReentrant {\\n        if (_burnAll) {\\n            require(_existingTicks.length == 0, \\\"IA\\\");\\n            onHold = true;\\n            burnAllLiquidity();\\n            delete ticks;\\n            emit Hold();\\n        }\\n\\n        //swap from 1inch if needed\\n        if (_swapData.length > 0) {\\n            _swap(_swapData);\\n        }\\n\\n        // redeploy the partial ticks\\n        if (_existingTicks.length > 0) {\\n            for (uint256 i = 0; i < _existingTicks.length; i++) {\\n                if (i > 0) require(_existingTicks[i - 1].index > _existingTicks[i].index, \\\"IO\\\"); // invalid order\\n\\n                Tick memory _tick = ticks[_existingTicks[i].index];\\n\\n                if (_existingTicks[i].burn) {\\n                    // burn liquidity from range\\n                    _burnLiquiditySingle(_existingTicks[i].index);\\n                }\\n\\n                if (_existingTicks[i].amount0 > 0 || _existingTicks[i].amount1 > 0) {\\n                    // mint liquidity\\n                    mintLiquidity(_tick.tickLower, _tick.tickUpper, _existingTicks[i].amount0, _existingTicks[i].amount1, address(this));\\n                } else if (_existingTicks[i].burn) {\\n                    // shift the index element at last of array\\n                    ticks[_existingTicks[i].index] = ticks[ticks.length - 1];\\n                    // remove last element\\n                    ticks.pop();\\n                }\\n            }\\n\\n            emit PartialRebalance(_existingTicks);\\n        }\\n\\n        // deploy liquidity into new ticks\\n        if (_newTicks.length > 0) {\\n            redeploy(_newTicks);\\n            emit Rebalance(_newTicks);\\n        }\\n\\n        require(!isInvalidTicks(ticks), \\\"IT\\\");\\n        // checks for valid ticks length\\n        require(ticks.length <= MAX_TICK_LENGTH + 10, \\\"ITL\\\");\\n    }\\n\\n    /**\\n     * @notice Redeploys between ticks\\n     * @param _ticks Array of the ticks with amounts\\n     */\\n    function redeploy(NewTick[] memory _ticks) internal onlyHasDeviation {\\n        // set hold false\\n        onHold = false;\\n        // redeploy the liquidity\\n        for (uint256 i = 0; i < _ticks.length; i++) {\\n            NewTick memory tick = _ticks[i];\\n\\n            // mint liquidity\\n            mintLiquidity(tick.tickLower, tick.tickUpper, tick.amount0, tick.amount1, address(this));\\n\\n            // push to ticks array\\n            ticks.push(Tick(tick.tickLower, tick.tickUpper));\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraws funds from the contract in case of emergency\\n     * @dev only governance can withdraw the funds, it can be frozen from the factory permenently\\n     * @param _token Token to transfer\\n     * @param _to Where to transfer the token\\n     * @param _amount Amount to be withdrawn\\n     * @param _newTicks Ticks data to burn liquidity from\\n     */\\n    function emergencyWithdraw(\\n        address _token,\\n        address _to,\\n        uint256 _amount,\\n        NewTick[] calldata _newTicks\\n    ) external {\\n        require(msg.sender == factory.governance() && !factory.freezeEmergency());\\n        if (_newTicks.length > 0) {\\n            for (uint256 tickIndex = 0; tickIndex < _newTicks.length; tickIndex++) {\\n                NewTick memory tick = _newTicks[tickIndex];\\n                (uint128 currentLiquidity, , , , ) = pool.positions(PositionKey.compute(address(this), tick.tickLower, tick.tickUpper));\\n                pool.burn(tick.tickLower, tick.tickUpper, currentLiquidity);\\n                pool.collect(address(this), tick.tickLower, tick.tickUpper, type(uint128).max, type(uint128).max);\\n            }\\n        }\\n        if (_amount > 0) {\\n            TransferHelper.safeTransfer(_token, _to, _amount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/StrategyManager.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BSL\\npragma solidity ^0.7.6;\\n\\n// libraries\\nimport \\\"../libraries/ShareHelper.sol\\\";\\nimport \\\"../libraries/OracleLibrary.sol\\\";\\n\\n// interfaces\\nimport \\\"../interfaces/IStrategyFactory.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract StrategyManager is AccessControl, IStrategyManager {\\n    using SafeMath for uint256;\\n\\n    event FeeChanged(uint256 tier);\\n    event FeeToChanged(address feeTo);\\n    event OperatorProposed(address indexed operator);\\n    event OperatorChanged(address indexed operator);\\n    event LimitChanged(uint256 limit);\\n    event MaxSwapLimitChanged(uint256 limit);\\n    event ClaimFee(uint256 managerFee, uint256 protocolFee);\\n    event PerformanceFeeChanged(uint256 performanceFeeRate);\\n    event StrategyModeUpdated(bool status); // true - private, false - public\\n\\n    uint256 public constant MIN_FEE = 20e6; // minimum 20%\\n    uint256 public constant MIN_DEVIATION = 2e17; // minimum 20%\\n\\n    IStrategyFactory public override factory;\\n    address public override operator;\\n    address public pendingOperator;\\n    address public override feeTo;\\n\\n    // fee to take when user adds the liquidity\\n    uint256 public override managementFeeRate; // 1e8 is 100%\\n\\n    // fees for the manager\\n    uint256 public override performanceFeeRate; // 1e8 is 100%\\n\\n    // max number of shares to be minted\\n    // if set 0, allows unlimited deposits\\n    uint256 public override limit;\\n\\n    // number of times user can perform swap in a day\\n    uint256 public maxAllowedSwap = 5;\\n\\n    // current swap counter\\n    uint256 public swapCounter = 0;\\n\\n    // tracks timestamp of the last swap happened\\n    uint256 public lastSwapTimestamp = 0;\\n\\n    bool public isStrategyPrivate = false; // if strategy is private or public\\n\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\"); // can only rebalance and swap\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\"); // can control everything\\n    bytes32 public constant BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\"); /// only can burn the liquidity\\n\\n    bytes32 public constant USER_WHITELIST_ROLE = keccak256(\\\"USER_WHITELIST_ROLE\\\"); /// user have access to strategy - mint & burn\\n\\n    constructor(\\n        IStrategyFactory _factory,\\n        address _operator,\\n        address _feeTo,\\n        uint256 _managementFeeRate,\\n        uint256 _performanceFeeRate,\\n        uint256 _limit\\n    ) {\\n        require(_managementFeeRate <= MIN_FEE); // should be less than 20%\\n        require(_performanceFeeRate <= MIN_FEE); // should be less than 20%\\n\\n        factory = _factory;\\n        operator = _operator;\\n        feeTo = _feeTo;\\n\\n        managementFeeRate = _managementFeeRate;\\n        performanceFeeRate = _performanceFeeRate;\\n        limit = _limit;\\n\\n        _setupRole(ADMIN_ROLE, _operator);\\n        _setupRole(USER_WHITELIST_ROLE, _operator);\\n        _setRoleAdmin(MANAGER_ROLE, ADMIN_ROLE);\\n        _setRoleAdmin(BURNER_ROLE, ADMIN_ROLE);\\n        _setRoleAdmin(USER_WHITELIST_ROLE, ADMIN_ROLE);\\n    }\\n\\n    // Modifiers\\n    modifier onlyOperator() {\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"N\\\");\\n        _;\\n    }\\n\\n    // Modifiers\\n    modifier onlyGovernance() {\\n        require(msg.sender == factory.governance(), \\\"N\\\");\\n        _;\\n    }\\n\\n    modifier onlyStrategy() {\\n        require(msg.sender == strategy(), \\\"N\\\");\\n        _;\\n    }\\n\\n    function isUserWhiteListed(address _account) public view override returns (bool) {\\n        return isStrategyPrivate ? hasRole(USER_WHITELIST_ROLE, _account) : true;\\n    }\\n\\n    function isAllowedToManage(address _account) public view override returns (bool) {\\n        return hasRole(ADMIN_ROLE, _account) || hasRole(MANAGER_ROLE, _account);\\n    }\\n\\n    function isAllowedToBurn(address _account) public view override returns (bool) {\\n        return hasRole(ADMIN_ROLE, _account) || hasRole(MANAGER_ROLE, _account) || hasRole(BURNER_ROLE, _account);\\n    }\\n\\n    function strategy() public view returns (address) {\\n        return factory.strategyByManager(address(this));\\n    }\\n\\n    /**\\n     * @notice Changes the fee\\n     * @dev 1e8 is 100%\\n     * @param _fee Fee tier from indexes 0 to 2\\n     */\\n    function changeManagementFeeRate(uint256 _fee) public onlyOperator {\\n        require(_fee <= MIN_FEE); // should be less than 20%\\n        managementFeeRate = _fee;\\n        emit FeeChanged(managementFeeRate);\\n    }\\n\\n    /**\\n     * @notice changes address where the operator is receiving the fee\\n     * @param _newFeeTo New address where fees should be received\\n     */\\n    function changeFeeTo(address _newFeeTo) external onlyOperator {\\n        feeTo = _newFeeTo;\\n        emit FeeToChanged(feeTo);\\n    }\\n\\n    /**\\n     * @notice Change the operator\\n     * @param _operator Address of the new operator\\n     */\\n    function changeOperator(address _operator) external onlyOperator {\\n        require(_operator != operator);\\n        pendingOperator = _operator;\\n        emit OperatorProposed(pendingOperator);\\n    }\\n\\n    /**\\n     * @notice Change the operator\\n     */\\n    function acceptOperator() external {\\n        require(msg.sender == pendingOperator);\\n        operator = pendingOperator;\\n        pendingOperator = address(0);\\n        emit OperatorChanged(operator);\\n    }\\n\\n    /**\\n     * @notice Change strategy limit in terms of share\\n     * @param _limit Number of shares the strategy can mint, 0 means unlimited\\n     */\\n    function changeLimit(uint256 _limit) external onlyOperator {\\n        limit = _limit;\\n        emit LimitChanged(limit);\\n    }\\n\\n    /**\\n     * @notice Manager can set the performance fee\\n     * @param _performanceFeeRate New performance fee, should not be more than 20%\\n     */\\n    function changePerformanceFeeRate(uint256 _performanceFeeRate) external onlyOperator {\\n        require(_performanceFeeRate <= MIN_FEE); // should be less than 20%\\n        performanceFeeRate = _performanceFeeRate;\\n        emit PerformanceFeeChanged(performanceFeeRate);\\n    }\\n\\n    /**\\n     * @notice Manager can update strategy mode -  public, private\\n     * @param _isPrivate true - private strategy, false - public strategy\\n     */\\n    function updateStrategyMode(bool _isPrivate) external onlyOperator {\\n        isStrategyPrivate = _isPrivate;\\n        emit StrategyModeUpdated(isStrategyPrivate);\\n    }\\n\\n    function allowedDeviation() public view override returns (uint256) {\\n        return factory.allowedDeviation(address(IStrategyBase(strategy()).pool()));\\n    }\\n\\n    function allowedSwapDeviation() public view override returns (uint256) {\\n        return factory.allowedSwapDeviation(address(IStrategyBase(strategy()).pool()));\\n    }\\n\\n    /**\\n     * @notice Track total swap performed in a day and revert if maximum swap limit reached.\\n     *         Can only be called by strategy contract\\n     */\\n    function increamentSwapCounter() external override onlyStrategy {\\n        uint256 currentDay = block.timestamp / 1 days;\\n        uint256 swapDay = lastSwapTimestamp / 1 days;\\n\\n        if (currentDay == swapDay) {\\n            // last swap happened on same day\\n            uint256 _counter = swapCounter;\\n\\n            require(maxAllowedSwap > _counter, \\\"LR\\\");\\n\\n            lastSwapTimestamp = block.timestamp;\\n            swapCounter = _counter + 1;\\n        } else {\\n            // last swap happened on other day\\n            swapCounter = 1;\\n            lastSwapTimestamp = block.timestamp;\\n        }\\n    }\\n\\n    /**\\n     * @notice Change strategy maximum swap limit for a day\\n     * @param _limit Maximum number of swap that can be performed in a day\\n     */\\n    function changeMaxSwapLimit(uint256 _limit) external onlyGovernance {\\n        maxAllowedSwap = _limit;\\n        emit MaxSwapLimitChanged(maxAllowedSwap);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDefiEdgeStrategyDeployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSL\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./IStrategyFactory.sol\\\";\\nimport \\\"./IOneInchRouter.sol\\\";\\nimport \\\"./IStrategyManager.sol\\\";\\nimport \\\"./IStrategyBase.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.7/interfaces/FeedRegistryInterface.sol\\\";\\n\\ninterface IDefiEdgeStrategyDeployer {\\n    function createStrategy(\\n        IStrategyFactory _factory,\\n        IUniswapV3Pool _pool,\\n        IOneInchRouter _swapRouter,\\n        FeedRegistryInterface _chainlinkRegistry,\\n        IStrategyManager _manager,\\n        bool[2] memory _usdAsBase,\\n        IStrategyBase.Tick[] memory _ticks\\n    ) external returns (address);\\n\\n    event StrategyDeployed(address strategy);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStrategyBase.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./IStrategyFactory.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport \\\"./IOneInchRouter.sol\\\";\\nimport \\\"./IStrategyManager.sol\\\";\\n\\ninterface IStrategyBase {\\n    struct Tick {\\n        int24 tickLower;\\n        int24 tickUpper;\\n    }\\n\\n    event ClaimFee(uint256 managerFee, uint256 protocolFee);\\n\\n    function onHold() external view returns (bool);\\n\\n    function accManagementFeeShares() external view returns (uint256);\\n\\n    function accPerformanceFeeShares() external view returns (uint256);\\n\\n    function accProtocolPerformanceFeeShares() external view returns (uint256);\\n\\n    function factory() external view returns (IStrategyFactory);\\n\\n    function pool() external view returns (IUniswapV3Pool);\\n\\n    function oneInchRouter() external view returns (IOneInchRouter);\\n\\n    function manager() external view returns (IStrategyManager);\\n\\n    function usdAsBase(uint256 index) external view returns (bool);\\n\\n    function claimFee() external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\"\r\n    },\r\n    \"contracts/base/UniswapV3LiquidityManager.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BSL\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\n// contracts\\nimport \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport \\\"../base/StrategyBase.sol\\\";\\n\\n// interfaces\\nimport \\\"../libraries/LiquidityHelper.sol\\\";\\nimport \\\"../libraries/OneInchHelper.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"../interfaces/IOneInch.sol\\\";\\n\\n// libraries\\nimport \\\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ncontract UniswapV3LiquidityManager is StrategyBase, ReentrancyGuard, IUniswapV3MintCallback {\\n    using SafeMath for uint256;\\n    using SafeCast for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event Swap(uint256 amountIn, uint256 amountOut, bool _zeroForOne);\\n\\n    event FeesClaim(address indexed strategy, uint256 amount0, uint256 amount1);\\n\\n    struct MintCallbackData {\\n        address payer;\\n        IUniswapV3Pool pool;\\n    }\\n\\n    // to handle stake too deep error inside swap function\\n    struct LocalVariables_Balances {\\n        uint256 tokenInBalBefore;\\n        uint256 tokenOutBalBefore;\\n        uint256 tokenInBalAfter;\\n        uint256 tokenOutBalAfter;\\n        uint256 shareSupplyBefore;\\n    }\\n\\n    /**\\n     * @notice Mints liquidity from V3 Pool\\n     * @param _tickLower Lower tick\\n     * @param _tickUpper Upper tick\\n     * @param _amount0 Amount of token0\\n     * @param _amount1 Amount of token1\\n     * @param _payer Address which is adding the liquidity\\n     * @return amount0 Amount of token0 deployed to the pool\\n     * @return amount1 Amount of token1 deployed to the pool\\n     */\\n    function mintLiquidity(\\n        int24 _tickLower,\\n        int24 _tickUpper,\\n        uint256 _amount0,\\n        uint256 _amount1,\\n        address _payer\\n    ) internal onlyHasDeviation returns (uint256 amount0, uint256 amount1) {\\n        uint128 liquidity = LiquidityHelper.getLiquidityForAmounts(pool, _tickLower, _tickUpper, _amount0, _amount1);\\n        // add liquidity to Uniswap pool\\n        (amount0, amount1) = pool.mint(\\n            address(this),\\n            _tickLower,\\n            _tickUpper,\\n            liquidity,\\n            abi.encode(MintCallbackData({payer: _payer, pool: pool}))\\n        );\\n    }\\n\\n    /**\\n     * @notice Burns liquidity in the given range\\n     * @param _tickLower Lower Tick\\n     * @param _tickUpper Upper Tick\\n     * @param _shares The amount of liquidity to be burned based on shares\\n     * @param _currentLiquidity Liquidity to be burned\\n     */\\n    function burnLiquidity(\\n        int24 _tickLower,\\n        int24 _tickUpper,\\n        uint256 _shares,\\n        uint128 _currentLiquidity\\n    )\\n        internal\\n        onlyHasDeviation\\n        returns (\\n            uint256 tokensBurned0,\\n            uint256 tokensBurned1,\\n            uint256 fee0,\\n            uint256 fee1\\n        )\\n    {\\n        uint256 collect0;\\n        uint256 collect1;\\n\\n        if (_shares > 0) {\\n            (_currentLiquidity, , , , ) = pool.positions(PositionKey.compute(address(this), _tickLower, _tickUpper));\\n            if (_currentLiquidity > 0) {\\n                uint256 liquidity = FullMath.mulDiv(_currentLiquidity, _shares, totalSupply());\\n\\n                (tokensBurned0, tokensBurned1) = pool.burn(_tickLower, _tickUpper, liquidity.toUint128());\\n            }\\n        } else {\\n            (tokensBurned0, tokensBurned1) = pool.burn(_tickLower, _tickUpper, _currentLiquidity);\\n        }\\n        // collect fees\\n        (collect0, collect1) = pool.collect(address(this), _tickLower, _tickUpper, type(uint128).max, type(uint128).max);\\n\\n        fee0 = collect0 > tokensBurned0 ? uint256(collect0).sub(tokensBurned0) : 0;\\n        fee1 = collect1 > tokensBurned1 ? uint256(collect1).sub(tokensBurned1) : 0;\\n\\n        // mint performance fees\\n        addPerformanceFees(fee0, fee1);\\n    }\\n\\n    /**\\n     * @notice Splits and stores the performance feees in the local variables\\n     * @param _fee0 Amount of accumulated fee for token0\\n     * @param _fee1 Amount of accumulated fee for token1\\n     */\\n    function addPerformanceFees(uint256 _fee0, uint256 _fee1) internal {\\n        // transfer performance fee to manager\\n        uint256 performanceFeeRate = manager.performanceFeeRate();\\n        // address feeTo = manager.feeTo();\\n\\n        // get total amounts with fees\\n        (uint256 totalAmount0, uint256 totalAmount1, , ) = this.getAUMWithFees(false);\\n\\n        accPerformanceFeeShares = accPerformanceFeeShares.add(\\n            ShareHelper.calculateShares(\\n                factory,\\n                chainlinkRegistry,\\n                pool,\\n                usdAsBase,\\n                FullMath.mulDiv(_fee0, performanceFeeRate, FEE_PRECISION),\\n                FullMath.mulDiv(_fee1, performanceFeeRate, FEE_PRECISION),\\n                totalAmount0,\\n                totalAmount1,\\n                totalSupply()\\n            )\\n        );\\n\\n        // protocol performance fee\\n        uint256 _protocolPerformanceFee = factory.protocolPerformanceFeeRate();\\n\\n        accProtocolPerformanceFeeShares = accProtocolPerformanceFeeShares.add(\\n            ShareHelper.calculateShares(\\n                factory,\\n                chainlinkRegistry,\\n                pool,\\n                usdAsBase,\\n                FullMath.mulDiv(_fee0, _protocolPerformanceFee, FEE_PRECISION),\\n                FullMath.mulDiv(_fee1, _protocolPerformanceFee, FEE_PRECISION),\\n                totalAmount0,\\n                totalAmount1,\\n                totalSupply()\\n            )\\n        );\\n\\n        emit FeesClaim(address(this), _fee0, _fee1);\\n    }\\n\\n    /**\\n     * @notice Burns all the liquidity and collects fees\\n     */\\n    function burnAllLiquidity() internal {\\n        for (uint256 _tickIndex = 0; _tickIndex < ticks.length; _tickIndex++) {\\n            Tick storage tick = ticks[_tickIndex];\\n\\n            (uint128 currentLiquidity, , , , ) = pool.positions(PositionKey.compute(address(this), tick.tickLower, tick.tickUpper));\\n\\n            if (currentLiquidity > 0) {\\n                burnLiquidity(tick.tickLower, tick.tickUpper, 0, currentLiquidity);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Burn liquidity from specific tick\\n     * @param _tickIndex Index of tick which needs to be burned\\n     * @return amount0 Amount of token0's liquidity burned\\n     * @return amount1 Amount of token1's liquidity burned\\n     * @return fee0 Fee of token0 accumulated in the position which is being burned\\n     * @return fee1 Fee of token1 accumulated in the position which is being burned\\n     */\\n    function burnLiquiditySingle(uint256 _tickIndex)\\n        public\\n        nonReentrant\\n        onlyHasDeviation\\n        returns (\\n            uint256 amount0,\\n            uint256 amount1,\\n            uint256 fee0,\\n            uint256 fee1\\n        )\\n    {\\n        require(manager.isAllowedToBurn(msg.sender), \\\"N\\\");\\n        (amount0, amount1, fee0, fee1) = _burnLiquiditySingle(_tickIndex);\\n        // shift the index element at last of array\\n        ticks[_tickIndex] = ticks[ticks.length - 1];\\n        // remove last element\\n        ticks.pop();\\n    }\\n\\n    /**\\n     * @notice Burn liquidity from specific tick\\n     * @param _tickIndex Index of tick which needs to be burned\\n     */\\n    function _burnLiquiditySingle(uint256 _tickIndex)\\n        internal\\n        returns (\\n            uint256 amount0,\\n            uint256 amount1,\\n            uint256 fee0,\\n            uint256 fee1\\n        )\\n    {\\n        Tick storage tick = ticks[_tickIndex];\\n\\n        (uint128 currentLiquidity, , , , ) = pool.positions(PositionKey.compute(address(this), tick.tickLower, tick.tickUpper));\\n\\n        if (currentLiquidity > 0) {\\n            (amount0, amount1, fee0, fee1) = burnLiquidity(tick.tickLower, tick.tickUpper, 0, currentLiquidity);\\n        }\\n    }\\n\\n    /**\\n     * @notice Swap the funds to 1Inch\\n     * @param data Swap data to perform exchange from 1inch\\n     */\\n    function swap(bytes calldata data) public onlyOperator onlyValidStrategy nonReentrant {\\n        _swap(data);\\n    }\\n\\n    /**\\n     * @notice Swap the funds to 1Inch\\n     * @param data Swap data to perform exchange from 1inch\\n     */\\n    function _swap(bytes calldata data) internal onlyHasDeviation {\\n        LocalVariables_Balances memory balances;\\n\\n        (IERC20 srcToken, IERC20 dstToken, uint256 amount) = OneInchHelper.decodeData(\\n            address(factory),\\n            IERC20(token0),\\n            IERC20(token1),\\n            data\\n        );\\n\\n        require((srcToken == token0 && dstToken == token1) || (srcToken == token1 && dstToken == token0), \\\"IA\\\");\\n\\n        balances.tokenInBalBefore = srcToken.balanceOf(address(this));\\n        balances.tokenOutBalBefore = dstToken.balanceOf(address(this));\\n        balances.shareSupplyBefore = totalSupply();\\n\\n        srcToken.safeIncreaseAllowance(address(oneInchRouter), amount);\\n\\n        // Interact with 1inch through contract call with data\\n        (bool success, bytes memory returnData) = address(oneInchRouter).call{value: 0}(data);\\n\\n        // Verify return status and data\\n        if (!success) {\\n            uint256 length = returnData.length;\\n            if (length < 68) {\\n                // If the returnData length is less than 68, then the transaction failed silently.\\n                revert(\\\"swap\\\");\\n            } else {\\n                // Look for revert reason and bubble it up if present\\n                uint256 t;\\n                assembly {\\n                    returnData := add(returnData, 4)\\n                    t := mload(returnData) // Save the content of the length slot\\n                    mstore(returnData, sub(length, 4)) // Set proper length\\n                }\\n                string memory reason = abi.decode(returnData, (string));\\n                assembly {\\n                    mstore(returnData, t) // Restore the content of the length slot\\n                }\\n                revert(reason);\\n            }\\n        }\\n\\n        require(balances.shareSupplyBefore == totalSupply(), \\\"MS\\\");\\n\\n        balances.tokenInBalAfter = srcToken.balanceOf(address(this));\\n        balances.tokenOutBalAfter = dstToken.balanceOf(address(this));\\n\\n        uint256 amountIn = balances.tokenInBalBefore.sub(balances.tokenInBalAfter);\\n        uint256 amountOut = balances.tokenOutBalAfter.sub(balances.tokenOutBalBefore);\\n\\n        manager.increamentSwapCounter();\\n\\n        require(\\n            OracleLibrary.allowSwap(pool, factory, amountIn, amountOut, address(srcToken), address(dstToken), [usdAsBase[0], usdAsBase[1]]),\\n            \\\"S\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Callback for Uniswap V3 pool.\\n     */\\n    function uniswapV3MintCallback(\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external override {\\n        require(msg.sender == address(pool));\\n        MintCallbackData memory decoded = abi.decode(data, (MintCallbackData));\\n        // check if the callback is received from Uniswap V3 Pool\\n        if (decoded.payer == address(this)) {\\n            // transfer tokens already in the contract\\n            if (amount0 > 0) {\\n                TransferHelper.safeTransfer(address(token0), msg.sender, amount0);\\n            }\\n            if (amount1 > 0) {\\n                TransferHelper.safeTransfer(address(token1), msg.sender, amount1);\\n            }\\n        } else {\\n            // take and transfer tokens to Uniswap V3 pool from the user\\n            if (amount0 > 0) {\\n                TransferHelper.safeTransferFrom(address(token0), decoded.payer, msg.sender, amount0);\\n            }\\n            if (amount1 > 0) {\\n                TransferHelper.safeTransferFrom(address(token1), decoded.payer, msg.sender, amount1);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get's assets under management with realtime fees\\n     * @param _includeFee Whether to include pool fees in AUM or not. (passing true will also collect fees from pool)\\n     * @param amount0 Total AUM of token0 including the fees  ( if _includeFee is passed true)\\n     * @param amount1 Total AUM of token1 including the fees  ( if _includeFee is passed true)\\n     * @param totalFee0 Total fee of token0 including the fees  ( if _includeFee is passed true)\\n     * @param totalFee1 Total fee of token1 including the fees  ( if _includeFee is passed true)\\n     */\\n    function getAUMWithFees(bool _includeFee)\\n        external\\n        returns (\\n            uint256 amount0,\\n            uint256 amount1,\\n            uint256 totalFee0,\\n            uint256 totalFee1\\n        )\\n    {\\n        // get unused amounts\\n        amount0 = IERC20(token0).balanceOf(address(this));\\n        amount1 = IERC20(token1).balanceOf(address(this));\\n\\n        // get fees accumulated in each tick\\n        for (uint256 i = 0; i < ticks.length; i++) {\\n            Tick memory tick = ticks[i];\\n\\n            // get current liquidity from the pool\\n            (uint128 currentLiquidity, , , , ) = pool.positions(PositionKey.compute(address(this), tick.tickLower, tick.tickUpper));\\n\\n            if (currentLiquidity > 0) {\\n                // calculate current positions in the pool from currentLiquidity\\n                (uint256 position0, uint256 position1) = LiquidityHelper.getAmountsForLiquidity(\\n                    pool,\\n                    tick.tickLower,\\n                    tick.tickUpper,\\n                    currentLiquidity\\n                );\\n\\n                amount0 = amount0.add(position0);\\n                amount1 = amount1.add(position1);\\n            }\\n\\n            // collect fees\\n            if (_includeFee && currentLiquidity > 0) {\\n                // update fees earned in Uniswap pool\\n                // Uniswap recalculates the fees and updates the variables when amount is passed as 0\\n                pool.burn(tick.tickLower, tick.tickUpper, 0);\\n\\n                (uint256 fee0, uint256 fee1) = pool.collect(\\n                    address(this),\\n                    tick.tickLower,\\n                    tick.tickUpper,\\n                    type(uint128).max,\\n                    type(uint128).max\\n                );\\n\\n                totalFee0 = totalFee0.add(fee0);\\n                totalFee1 = totalFee1.add(fee1);\\n\\n                emit FeesClaim(address(this), totalFee0, totalFee1);\\n            }\\n        }\\n\\n        if (_includeFee && (totalFee0 > 0 || totalFee1 > 0)) {\\n            amount0 = amount0.add(totalFee0);\\n            amount1 = amount1.add(totalFee1);\\n\\n            // mint performance fees\\n            addPerformanceFees(totalFee0, totalFee1);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LiquidityHelper.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\n// contracts\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n// libraries\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/libraries/TickMath.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol\\\";\\n\\nlibrary LiquidityHelper {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @notice Calculates the liquidity amount using current ranges\\n     * @param _pool Pool instance\\n     * @param _tickLower Lower tick\\n     * @param _tickUpper Upper tick\\n     * @param _amount0 Amount to be added for token0\\n     * @param _amount1 Amount to be added for token1\\n     * @return liquidity Liquidity amount derived from token amounts\\n     */\\n    function getLiquidityForAmounts(\\n        IUniswapV3Pool _pool,\\n        int24 _tickLower,\\n        int24 _tickUpper,\\n        uint256 _amount0,\\n        uint256 _amount1\\n    ) public view returns (uint128 liquidity) {\\n        // get sqrtRatios required to calculate liquidity\\n        (uint160 sqrtRatioX96, , , , , , ) = _pool.slot0();\\n\\n        // calculate liquidity needs to be added\\n        liquidity = LiquidityAmounts.getLiquidityForAmounts(\\n            sqrtRatioX96,\\n            TickMath.getSqrtRatioAtTick(_tickLower),\\n            TickMath.getSqrtRatioAtTick(_tickUpper),\\n            _amount0,\\n            _amount1\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculates the liquidity amount using current ranges\\n     * @param _pool Instance of the pool\\n     * @param _tickLower Lower tick\\n     * @param _tickUpper Upper tick\\n     * @param _liquidity Liquidity of the pool\\n     */\\n    function getAmountsForLiquidity(\\n        IUniswapV3Pool _pool,\\n        int24 _tickLower,\\n        int24 _tickUpper,\\n        uint128 _liquidity\\n    ) public view returns (uint256 amount0, uint256 amount1) {\\n        // get sqrtRatios required to calculate liquidity\\n        (uint160 sqrtRatioX96, , , , , , ) = _pool.slot0();\\n\\n        // calculate liquidity needs to be added\\n        (amount0, amount1) = LiquidityAmounts.getAmountsForLiquidity(\\n            sqrtRatioX96,\\n            TickMath.getSqrtRatioAtTick(_tickLower),\\n            TickMath.getSqrtRatioAtTick(_tickUpper),\\n            _liquidity\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/StrategyBase.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BSL\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\n// contracts\\nimport \\\"../ERC20.sol\\\";\\n\\n// libraries\\nimport \\\"../libraries/ShareHelper.sol\\\";\\nimport \\\"../libraries/OracleLibrary.sol\\\";\\n\\ncontract StrategyBase is ERC20, IStrategyBase {\\n    using SafeMath for uint256;\\n\\n    uint256 public constant FEE_PRECISION = 1e8;\\n    bool public override onHold;\\n\\n    uint256 public constant MINIMUM_LIQUIDITY = 1e12;\\n\\n    // store ticks\\n    Tick[] public ticks;\\n\\n    uint256 public override accManagementFeeShares; // stores the management fee shares\\n    uint256 public override accPerformanceFeeShares; // stores the performance fee shares\\n    uint256 public override accProtocolPerformanceFeeShares; // stores the protocol performance fee shares\\n\\n    IStrategyFactory public override factory; // instance of the strategy factory\\n    IUniswapV3Pool public override pool; // instance of the Uniswap V3 pool\\n\\n    IERC20 internal token0;\\n    IERC20 internal token1;\\n\\n    IOneInchRouter public override oneInchRouter; // instance of the Uniswap V3 Periphery Swap Router\\n    FeedRegistryInterface internal chainlinkRegistry;\\n\\n    IStrategyManager public override manager; // instance of manager contract\\n\\n    bool[2] public override usdAsBase; // for Chainlink oracle\\n\\n    uint256 public constant MAX_TICK_LENGTH = 20;\\n\\n    // Modifiers\\n    modifier onlyOperator() {\\n        require(manager.isAllowedToManage(msg.sender), \\\"N\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Replaces old ticks with new ticks\\n     * @param _ticks New ticks\\n     * @return invalid true if the ticks are valid and not repeated\\n     */\\n    function isInvalidTicks(Tick[] memory _ticks) internal pure returns (bool invalid) {\\n        for (uint256 i = 0; i < _ticks.length; i++) {\\n            int24 tickLower = _ticks[i].tickLower;\\n            int24 tickUpper = _ticks[i].tickUpper;\\n\\n            // check that two tick upper and tick lowers are not in array cannot be same\\n            for (uint256 j = 0; j < i; j++) {\\n                if (tickLower == _ticks[j].tickLower) {\\n                    if (tickUpper == _ticks[j].tickUpper) {\\n                        invalid = true;\\n                        return invalid;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks if it's valid strategy or not\\n     */\\n    modifier onlyValidStrategy() {\\n        // check if strategy is in denylist\\n        require(!factory.denied(address(this)), \\\"DL\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev checks if the pool is manipulated\\n     */\\n    modifier onlyHasDeviation() {\\n        require(!OracleLibrary.hasDeviation(factory, pool, chainlinkRegistry, usdAsBase, address(manager)), \\\"D\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Updates the shares of the user\\n     * @param _amount0 Amount of token0\\n     * @param _amount1 Amount of token1\\n     * @param _totalAmount0 Total amount0 in the specific strategy\\n     * @param _totalAmount1 Total amount1 in the specific strategy\\n     * @param _user address where shares should be issued\\n     * @return share Number of shares issued\\n     */\\n    function issueShare(\\n        uint256 _amount0,\\n        uint256 _amount1,\\n        uint256 _totalAmount0,\\n        uint256 _totalAmount1,\\n        address _user\\n    ) internal returns (uint256 share) {\\n        uint256 _shareTotalSupply = totalSupply();\\n        // calculate number of shares\\n        share = ShareHelper.calculateShares(\\n            factory,\\n            chainlinkRegistry,\\n            pool,\\n            usdAsBase,\\n            _amount0,\\n            _amount1,\\n            _totalAmount0,\\n            _totalAmount1,\\n            _shareTotalSupply\\n        );\\n\\n        uint256 managerShare;\\n        uint256 managementFeeRate = manager.managementFeeRate();\\n\\n        if (_shareTotalSupply == 0) {\\n            share = share.sub(MINIMUM_LIQUIDITY);\\n            _mint(address(0), MINIMUM_LIQUIDITY);\\n        }\\n\\n        // strategy owner fees\\n        if (managementFeeRate > 0) {\\n            managerShare = share.mul(managementFeeRate).div(FEE_PRECISION);\\n            accManagementFeeShares = accManagementFeeShares.add(managerShare);\\n            share = share.sub(managerShare);\\n        }\\n\\n        // issue shares\\n        _mint(_user, share);\\n    }\\n\\n    /**\\n     * @notice Adds all the shares stored in the state variables\\n     * @return total supply of shares, including virtual supply\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply.add(accManagementFeeShares).add(accPerformanceFeeShares).add(accProtocolPerformanceFeeShares);\\n    }\\n\\n    /**\\n     * @notice Claims the fee for protocol and management\\n     * Protocol receives X percentage from manager fee\\n     */\\n    function claimFee() external override {\\n        (address managerFeeTo, address protocolFeeTo, uint256 managerShare, uint256 protocolShare) = ShareHelper.calculateFeeShares(\\n            factory,\\n            manager,\\n            accManagementFeeShares,\\n            accPerformanceFeeShares,\\n            accProtocolPerformanceFeeShares\\n        );\\n\\n        if (managerShare > 0) {\\n            _mint(managerFeeTo, managerShare);\\n        }\\n\\n        if (protocolShare > 0) {\\n            _mint(protocolFeeTo, protocolShare);\\n        }\\n\\n        // set the variables to 0\\n        accManagementFeeShares = 0;\\n        accPerformanceFeeShares = 0;\\n        accProtocolPerformanceFeeShares = 0;\\n\\n        emit ClaimFee(managerShare, protocolShare);\\n    }\\n\\n    /**\\n     * @notice Returns the current ticks\\n     * @return Array of the ticks\\n     */\\n    function getTicks() public view returns (Tick[] memory) {\\n        return ticks;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/OneInchHelper.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BSL\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../interfaces/IOneInch.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDEFactory {\\n    function isAllowedOneInchCaller(address) external view returns (bool);\\n}\\n\\nlibrary OneInchHelper {\\n    /**\\n     * @dev Function decodeds srcToken, dstToken and source swap amount from the given data\\n     * @param factory DefiEdge factory address\\n     * @param token0 token0 address of strategy\\n     * @param token1 token1 address of strategy\\n     * @param data bytes data to decode\\n     */\\n    function decodeData(\\n        address factory,\\n        IERC20 token0,\\n        IERC20 token1,\\n        bytes calldata data\\n    )\\n        public\\n        view\\n        returns (\\n            IERC20 srcToken,\\n            IERC20 dstToken,\\n            uint256 amount\\n        )\\n    {\\n        IOneInch.SwapDescription memory description;\\n\\n        bytes memory _data = data;\\n\\n        bytes4 selector;\\n        assembly {\\n            selector := mload(add(_data, 0x20))\\n        }\\n\\n        if (selector == 0x7c025200) {\\n            address caller;\\n            // call swap() method\\n            (caller, description, ) = abi.decode(data[4:], (address, IOneInch.SwapDescription, bytes));\\n\\n            require(IDEFactory(factory).isAllowedOneInchCaller(caller), \\\"IC\\\");\\n\\n            srcToken = IERC20(description.srcToken);\\n            dstToken = IERC20(description.dstToken);\\n            amount = description.amount;\\n        } else if (selector == 0x2e95b6c8) {\\n            // call unoswap() method\\n            address tokenIn;\\n            (tokenIn, amount, , ) = abi.decode(data[4:], (address, uint256, uint256, bytes32[]));\\n\\n            srcToken = IERC20(tokenIn);\\n            dstToken = srcToken == token0 ? token1 : token0;\\n        } else if (selector == 0xe449022e) {\\n            // call uniswapV3Swap() method\\n            uint256[] memory pools;\\n            (amount, , pools) = abi.decode(data[4:], (uint256, uint256, uint256[]));\\n\\n            uint256 _pool = pools[0];\\n            bool zeroForOne = _pool >> 255 == 0;\\n\\n            address tokenIn = zeroForOne ? IUniswapV3Pool(_pool).token0() : IUniswapV3Pool(_pool).token1();\\n            srcToken = IERC20(tokenIn);\\n            dstToken = srcToken == token0 ? token1 : token0;\\n        } else {\\n            revert(\\\"IM\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOneInch.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.6;\\n\\ninterface IOneInch {\\n    struct SwapDescription {\\n        address srcToken;\\n        address dstToken;\\n        address srcReceiver;\\n        address dstReceiver;\\n        uint256 amount;\\n        uint256 minReturnAmount;\\n        uint256 flags;\\n        bytes permit;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#mint\\n/// @notice Any contract that calls IUniswapV3PoolActions#mint must implement this interface\\ninterface IUniswapV3MintCallback {\\n    /// @notice Called to `msg.sender` after minting liquidity to a position from IUniswapV3Pool#mint.\\n    /// @dev In the implementation you must pay the pool tokens owed for the minted liquidity.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// @param amount0Owed The amount of token0 due to the pool for the minted liquidity\\n    /// @param amount1Owed The amount of token1 due to the pool for the minted liquidity\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#mint call\\n    function uniswapV3MintCallback(\\n        uint256 amount0Owed,\\n        uint256 amount1Owed,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\nabstract contract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) public override allowance; // map approval of from to to address\\n\\n    uint256 internal _totalSupply;\\n\\n    bytes32 public constant name = \\\"DefiEdge Share\\\";\\n    bytes32 public constant symbol = \\\"DEShare\\\";\\n    uint8 public constant decimals = 18;\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            allowance[sender][_msgSender()].sub(amount, \\\"a\\\")\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            allowance[_msgSender()][spender].add(addedValue)\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            allowance[_msgSender()][spender].sub(subtractedValue, \\\"a\\\")\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(\\n            amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"b\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        allowance[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/ShareHelper.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BSL\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/libraries/FullMath.sol\\\";\\n\\nimport \\\"./OracleLibrary.sol\\\";\\n\\nlibrary ShareHelper {\\n    using SafeMath for uint256;\\n\\n    uint256 public constant DIVISOR = 100e18;\\n\\n    /**\\n     * @dev Calculates the shares to be given for specific position\\n     * @param _registry Chainlink registry interface\\n     * @param _pool The token0\\n     * @param _isBase Is USD used as base\\n     * @param _amount0 Amount of token0\\n     * @param _amount1 Amount of token1\\n     * @param _totalAmount0 Total amount of token0\\n     * @param _totalAmount1 Total amount of token1\\n     * @param _totalShares Total Number of shares\\n     */\\n    function calculateShares(\\n        IStrategyFactory _factory,\\n        FeedRegistryInterface _registry,\\n        IUniswapV3Pool _pool,\\n        bool[2] memory _isBase,\\n        uint256 _amount0,\\n        uint256 _amount1,\\n        uint256 _totalAmount0,\\n        uint256 _totalAmount1,\\n        uint256 _totalShares\\n    ) public view returns (uint256 share) {\\n        address _token0 = _pool.token0();\\n        address _token1 = _pool.token1();\\n\\n        _amount0 = OracleLibrary.normalise(_token0, _amount0);\\n        _amount1 = OracleLibrary.normalise(_token1, _amount1);\\n        _totalAmount0 = OracleLibrary.normalise(_token0, _totalAmount0);\\n        _totalAmount1 = OracleLibrary.normalise(_token1, _totalAmount1);\\n\\n        // price in USD\\n        uint256 token0Price = OracleLibrary.getPriceInUSD(_factory, _registry, _token0, _isBase[0]);\\n\\n        uint256 token1Price = OracleLibrary.getPriceInUSD(_factory, _registry, _token1, _isBase[1]);\\n\\n        if (_totalShares > 0) {\\n            uint256 numerator = (token0Price.mul(_amount0)).add(token1Price.mul(_amount1));\\n\\n            uint256 denominator = (token0Price.mul(_totalAmount0)).add(token1Price.mul(_totalAmount1));\\n\\n            share = FullMath.mulDiv(numerator, _totalShares, denominator);\\n        } else {\\n            share = ((token0Price.mul(_amount0)).add(token1Price.mul(_amount1))).div(DIVISOR);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the fee shares from accumulated fees\\n     * @param _factory Strategy factory address\\n     * @param _manager Strategy manager contract address\\n     * @param _accManagementFee Accumulated management fees in terms of shares, decimal 18\\n     * @param _accPerformanceFee Accumulated performance fee in terms of shares, decimal 18\\n     * @param _accProtocolPerformanceFee Accumulated performance fee in terms of shares, decimal 18\\n     */\\n    function calculateFeeShares(\\n        IStrategyFactory _factory,\\n        IStrategyManager _manager,\\n        uint256 _accManagementFee,\\n        uint256 _accPerformanceFee,\\n        uint256 _accProtocolPerformanceFee\\n    )\\n        public\\n        view\\n        returns (\\n            address managerFeeTo,\\n            address protocolFeeTo,\\n            uint256 managerShare,\\n            uint256 protocolShare\\n        )\\n    {\\n        uint256 managementProtocolShare;\\n        uint256 managementManagerShare;\\n        uint256 protocolFeeRate = _factory.protocolFeeRate();\\n\\n        // calculate the fees for protocol and manager from management fees\\n        if (_accManagementFee > 0) {\\n            managementProtocolShare = FullMath.mulDiv(_accManagementFee, protocolFeeRate, 1e8);\\n            managementManagerShare = _accManagementFee.sub(managementProtocolShare);\\n        }\\n\\n        // calculate the fees for protocol and manager from performance fees\\n        if (_accPerformanceFee > 0) {\\n            protocolShare = FullMath.mulDiv(_accPerformanceFee, protocolFeeRate, 1e8);\\n            managerShare = _accPerformanceFee.sub(protocolShare);\\n        }\\n\\n        managerShare = managementManagerShare.add(managerShare);\\n        protocolShare = managementProtocolShare.add(protocolShare).add(_accProtocolPerformanceFee);\\n\\n        // moved here for saving bytecode\\n        managerFeeTo = _manager.feeTo();\\n        protocolFeeTo = _factory.feeTo();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/OracleLibrary.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BSL\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\n// contracts\\nimport \\\"@chainlink/contracts/src/v0.7/Denominations.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\n\\n// libraries\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/PositionKey.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/libraries/FullMath.sol\\\";\\nimport \\\"./CommonMath.sol\\\";\\n\\n// interfaces\\nimport \\\"@chainlink/contracts/src/v0.7/interfaces/FeedRegistryInterface.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport \\\"../interfaces/IStrategyFactory.sol\\\";\\nimport \\\"../interfaces/IStrategyManager.sol\\\";\\nimport \\\"../interfaces/IERC20Minimal.sol\\\";\\n\\nlibrary OracleLibrary {\\n    uint256 public constant BASE = 1e18;\\n\\n    using SafeMath for uint256;\\n\\n    function normalise(address _token, uint256 _amount) internal view returns (uint256 normalised) {\\n        // return uint256(_amount) * (10**(18 - IERC20Minimal(_token).decimals()));\\n        normalised = _amount;\\n        uint256 _decimals = IERC20Minimal(_token).decimals();\\n\\n        if (_decimals < 18) {\\n            uint256 missingDecimals = uint256(18).sub(_decimals);\\n            normalised = uint256(_amount).mul(10**(missingDecimals));\\n        } else if (_decimals > 18) {\\n            uint256 extraDecimals = _decimals.sub(uint256(18));\\n            normalised = uint256(_amount).div(10**(extraDecimals));\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets latest Uniswap price in the pool, price of token1 represented in token0\\n     * @notice _pool Address of the Uniswap V3 pool\\n     */\\n    function getUniswapPrice(IUniswapV3Pool _pool) internal view returns (uint256 price) {\\n        (uint160 sqrtPriceX96, , , , , , ) = _pool.slot0();\\n        uint256 priceX192 = uint256(sqrtPriceX96).mul(sqrtPriceX96);\\n        price = FullMath.mulDiv(priceX192, BASE, 1 << 192);\\n\\n        uint256 token0Decimals = IERC20Minimal(_pool.token0()).decimals();\\n        uint256 token1Decimals = IERC20Minimal(_pool.token1()).decimals();\\n\\n        bool decimalCheck = token0Decimals > token1Decimals;\\n\\n        uint256 decimalsDelta = decimalCheck ? token0Decimals - token1Decimals : token1Decimals - token0Decimals;\\n\\n        // normalise the price to 18 decimals\\n\\n        if (token0Decimals == token1Decimals) {\\n            return price;\\n        }\\n\\n        if (decimalCheck) {\\n            price = price.mul(CommonMath.safePower(10, decimalsDelta));\\n        } else {\\n            price = price.div(CommonMath.safePower(10, decimalsDelta));\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns latest Chainlink price, and normalise it\\n     * @param _registry registry\\n     * @param _base Base Asset\\n     * @param _quote Quote Asset\\n     */\\n    function getChainlinkPrice(\\n        FeedRegistryInterface _registry,\\n        address _base,\\n        address _quote,\\n        uint256 _validPeriod\\n    ) internal view returns (uint256 price) {\\n        (, int256 _price, , uint256 updatedAt, ) = _registry.latestRoundData(_base, _quote);\\n\\n        require(block.timestamp.sub(updatedAt) < _validPeriod, \\\"OLD_PRICE\\\");\\n\\n        if (_price <= 0) {\\n            return 0;\\n        }\\n\\n        // normalise the price to 18 decimals\\n        uint256 _decimals = _registry.decimals(_base, _quote);\\n\\n        if (_decimals < 18) {\\n            uint256 missingDecimals = uint256(18).sub(_decimals);\\n            price = uint256(_price).mul(10**(missingDecimals));\\n        } else if (_decimals > 18) {\\n            uint256 extraDecimals = _decimals.sub(uint256(18));\\n            price = uint256(_price).div(10**(extraDecimals));\\n        }\\n\\n        return price;\\n    }\\n\\n    /**\\n     * @notice Gets price in USD, if USD feed is not available use ETH feed\\n     * @param _registry Interface of the Chainlink registry\\n     * @param _token the token we want to convert into USD\\n     * @param _isBase if the token supports base as USD or requires conversion from ETH\\n     */\\n    function getPriceInUSD(\\n        IStrategyFactory _factory,\\n        FeedRegistryInterface _registry,\\n        address _token,\\n        bool _isBase\\n    ) internal view returns (uint256 price) {\\n        if (_isBase) {\\n            price = getChainlinkPrice(_registry, _token, Denominations.USD, _factory.getHeartBeat(_token, Denominations.USD));\\n        } else {\\n            price = getChainlinkPrice(_registry, _token, Denominations.ETH, _factory.getHeartBeat(_token, Denominations.ETH));\\n\\n            price = FullMath.mulDiv(\\n                price,\\n                getChainlinkPrice(\\n                    _registry,\\n                    Denominations.ETH,\\n                    Denominations.USD,\\n                    _factory.getHeartBeat(Denominations.ETH, Denominations.USD)\\n                ),\\n                BASE\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the the current price has deviation from the pool price\\n     * @param _pool Address of the pool\\n     * @param _registry Chainlink registry interface\\n     * @param _usdAsBase checks if pegged to USD\\n     * @param _manager Manager contract address to check allowed deviation\\n     */\\n    function hasDeviation(\\n        IStrategyFactory _factory,\\n        IUniswapV3Pool _pool,\\n        FeedRegistryInterface _registry,\\n        bool[2] memory _usdAsBase,\\n        address _manager\\n    ) public view returns (bool) {\\n        // get price of token0 Uniswap and convert it to USD\\n        uint256 uniswapPriceInUSD = FullMath.mulDiv(\\n            getUniswapPrice(_pool),\\n            getPriceInUSD(_factory, _registry, _pool.token1(), _usdAsBase[1]),\\n            BASE\\n        );\\n\\n        // get price of token0 from Chainlink in USD\\n        uint256 chainlinkPriceInUSD = getPriceInUSD(_factory, _registry, _pool.token0(), _usdAsBase[0]);\\n\\n        uint256 diff;\\n\\n        diff = FullMath.mulDiv(uniswapPriceInUSD, BASE, chainlinkPriceInUSD);\\n\\n        uint256 _allowedDeviation = IStrategyManager(_manager).allowedDeviation();\\n\\n        // check if the price is above deviation and return\\n        return diff > BASE.add(_allowedDeviation) || diff < BASE.sub(_allowedDeviation);\\n    }\\n\\n    // /**\\n    //  * @notice Checks the if swap exceed allowed swap deviation or not\\n    //  * @param _pool Address of the pool\\n    //  * @param _registry Chainlink registry interface\\n    //  * @param _amountIn Amount to be swapped\\n    //  * @param _amountOut Amount received after swap\\n    //  * @param _tokenIn Token to be swapped\\n    //  * @param _tokenOut Token to which tokenIn should be swapped\\n    //  * @param _usdAsBase checks if pegged to USD\\n    //  * @param _manager Manager contract address to check allowed deviation\\n    //  */\\n    // function isSwapExceedDeviation(\\n    //     IStrategyFactory _factory,\\n    //     IUniswapV3Pool _pool,\\n    //     FeedRegistryInterface _registry,\\n    //     uint256 _amountIn,\\n    //     uint256 _amountOut,\\n    //     address _tokenIn,\\n    //     address _tokenOut,\\n    //     bool[2] memory _usdAsBase,\\n    //     address _manager\\n    // ) public view returns (bool) {\\n    //     _amountIn = normalise(_tokenIn, _amountIn);\\n    //     _amountOut = normalise(_tokenOut, _amountOut);\\n\\n    //     (bool usdAsBaseAmountIn, bool usdAsBaseAmountOut) = _pool.token0() == _tokenIn\\n    //         ? (_usdAsBase[0], _usdAsBase[1])\\n    //         : (_usdAsBase[1], _usdAsBase[0]);\\n\\n    //     // get tokenIn prce in USD fron chainlink\\n    //     uint256 amountInUSD = _amountIn.mul(getPriceInUSD(_factory, _registry, _tokenIn, usdAsBaseAmountIn));\\n\\n    //     // get tokenout prce in USD fron chainlink\\n    //     uint256 amountOutUSD = _amountOut.mul(getPriceInUSD(_factory, _registry, _tokenOut, usdAsBaseAmountOut));\\n\\n    //     uint256 diff;\\n\\n    //     diff = amountInUSD.div(amountOutUSD.div(BASE));\\n\\n    //     // check price deviation\\n    //     uint256 deviation;\\n    //     if (diff > BASE) {\\n    //         deviation = diff.sub(BASE);\\n    //     } else {\\n    //         deviation = BASE.sub(diff);\\n    //     }\\n\\n    //     if (deviation > IStrategyManager(_manager).allowedSwapDeviation()) {\\n    //         return true;\\n    //     }\\n    //     return false;\\n    // }\\n\\n    /**\\n     * @notice Checks for price slippage at the time of swap\\n     * @param _pool Address of the pool\\n     * @param _factory Address of the DefiEdge strategy factory\\n     * @param _amountIn Amount to be swapped\\n     * @param _amountOut Amount received after swap\\n     * @param _tokenIn Token to be swapped\\n     * @param _tokenOut Token to which tokenIn should be swapped\\n     * @param _isBase to take token as bas etoken or not\\n     * @return true if the swap is allowed, else false\\n     */\\n    function allowSwap(\\n        IUniswapV3Pool _pool,\\n        IStrategyFactory _factory,\\n        uint256 _amountIn,\\n        uint256 _amountOut,\\n        address _tokenIn,\\n        address _tokenOut,\\n        bool[2] memory _isBase\\n    ) public view returns (bool) {\\n        _amountIn = normalise(_tokenIn, _amountIn);\\n        _amountOut = normalise(_tokenOut, _amountOut);\\n\\n        (bool usdAsBaseAmountIn, bool usdAsBaseAmountOut) = _pool.token0() == _tokenIn\\n            ? (_isBase[0], _isBase[1])\\n            : (_isBase[1], _isBase[0]);\\n\\n        // get price of token0 Uniswap and convert it to USD\\n        uint256 amountInUSD = _amountIn.mul(\\n            getPriceInUSD(_factory, FeedRegistryInterface(_factory.chainlinkRegistry()), _tokenIn, usdAsBaseAmountIn)\\n        );\\n\\n        // get price of token0 Uniswap and convert it to USD\\n        uint256 amountOutUSD = _amountOut.mul(\\n            getPriceInUSD(_factory, FeedRegistryInterface(_factory.chainlinkRegistry()), _tokenOut, usdAsBaseAmountOut)\\n        );\\n\\n        uint256 diff;\\n\\n        diff = amountInUSD.div(amountOutUSD.div(BASE));\\n\\n        uint256 _allowedSlippage = _factory.allowedSlippage(address(_pool));\\n        // check if the price is above deviation\\n        if (diff > (BASE.add(_allowedSlippage)) || diff < (BASE.sub(_allowedSlippage))) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/libraries/FullMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.7/Denominations.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nlibrary Denominations {\\n  address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n  address public constant BTC = 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB;\\n\\n  // Fiat currencies follow https://en.wikipedia.org/wiki/ISO_4217\\n  address public constant USD = address(840);\\n  address public constant GBP = address(826);\\n  address public constant EUR = address(978);\\n  address public constant JPY = address(392);\\n  address public constant KRW = address(410);\\n  address public constant CNY = address(156);\\n  address public constant AUD = address(36);\\n  address public constant CAD = address(124);\\n  address public constant CHF = address(756);\\n  address public constant ARS = address(32);\\n  address public constant PHP = address(608);\\n  address public constant NZD = address(554);\\n  address public constant SGD = address(702);\\n  address public constant NGN = address(566);\\n  address public constant ZAR = address(710);\\n  address public constant RUB = address(643);\\n  address public constant INR = address(356);\\n  address public constant BRL = address(986);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport '@uniswap/v3-core/contracts/libraries/FullMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/FixedPoint96.sol';\\n\\n/// @title Liquidity amount functions\\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\\nlibrary LiquidityAmounts {\\n    /// @notice Downcasts uint256 to uint128\\n    /// @param x The uint258 to be downcasted\\n    /// @return y The passed value, downcasted to uint128\\n    function toUint128(uint256 x) private pure returns (uint128 y) {\\n        require((y = uint128(x)) == x);\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount0 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount0(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);\\n        return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount1 The amount1 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount1(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        return toUint128(FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96));\\n    }\\n\\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount of token0 being sent in\\n    /// @param amount1 The amount of token1 being sent in\\n    /// @return liquidity The maximum amount of liquidity received\\n    function getLiquidityForAmounts(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\\n\\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\n        } else {\\n            liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\\n        }\\n    }\\n\\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    function getAmount0ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            FullMath.mulDiv(\\n                uint256(liquidity) << FixedPoint96.RESOLUTION,\\n                sqrtRatioBX96 - sqrtRatioAX96,\\n                sqrtRatioBX96\\n            ) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount1 The amount of token1\\n    function getAmount1ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n\\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function getAmountsForLiquidity(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\\n        } else {\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts/libraries/PositionKey.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nlibrary PositionKey {\\n    /// @dev Returns the key of the position in the core library\\n    function compute(\\n        address owner,\\n        int24 tickLower,\\n        int24 tickUpper\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(owner, tickLower, tickUpper));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/CommonMath.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BSL\\n\\npragma solidity ^0.7.6;\\n\\n/*\\n    Copyright 2018 Set Labs Inc.\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n*/\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary CommonMath {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * Calculates and returns the maximum value for a uint256\\n     *\\n     * @return  The maximum value for uint256\\n     */\\n    function maxUInt256() internal pure returns (uint256) {\\n        return 2**256 - 1;\\n    }\\n\\n    /**\\n     * @dev Performs the power on a specified value, reverts on overflow.\\n     */\\n    function safePower(uint256 a, uint256 pow) internal pure returns (uint256) {\\n        require(a > 0);\\n\\n        uint256 result = 1;\\n        for (uint256 i = 0; i < pow; i++) {\\n            uint256 previousResult = result;\\n\\n            // Using safemath multiplication prevents overflows\\n            result = previousResult.mul(a);\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * Checks for rounding errors and returns value of potential partial amounts of a principal\\n     *\\n     * @param  _principal       Number fractional amount is derived from\\n     * @param  _numerator       Numerator of fraction\\n     * @param  _denominator     Denominator of fraction\\n     * @return uint256          Fractional amount of principal calculated\\n     */\\n    function getPartialAmount(\\n        uint256 _principal,\\n        uint256 _numerator,\\n        uint256 _denominator\\n    ) internal pure returns (uint256) {\\n        // Get remainder of partial amount (if 0 not a partial amount)\\n        uint256 remainder = mulmod(_principal, _numerator, _denominator);\\n\\n        // Return if not a partial amount\\n        if (remainder == 0) {\\n            return _principal.mul(_numerator).div(_denominator);\\n        }\\n\\n        // Calculate error percentage\\n        uint256 errPercentageTimes1000000 = remainder.mul(1000000).div(\\n            _numerator.mul(_principal)\\n        );\\n\\n        // Require error percentage is less than 0.1%.\\n        require(\\n            errPercentageTimes1000000 < 1000,\\n            \\\"CommonMath.getPartialAmount: Rounding error exceeds bounds\\\"\\n        );\\n\\n        return _principal.mul(_numerator).div(_denominator);\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.7/interfaces/FeedRegistryInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"./AggregatorV2V3Interface.sol\\\";\\n\\ninterface FeedRegistryInterface {\\n  struct Phase {\\n    uint16 phaseId;\\n    uint80 startingAggregatorRoundId;\\n    uint80 endingAggregatorRoundId;\\n  }\\n\\n  event FeedProposed(\\n    address indexed asset,\\n    address indexed denomination,\\n    address indexed proposedAggregator,\\n    address currentAggregator,\\n    address sender\\n  );\\n  event FeedConfirmed(\\n    address indexed asset,\\n    address indexed denomination,\\n    address indexed latestAggregator,\\n    address previousAggregator,\\n    uint16 nextPhaseId,\\n    address sender\\n  );\\n\\n  // V3 AggregatorV3Interface\\n\\n  function decimals(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  function latestRoundData(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function getRoundData(\\n    address base,\\n    address quote,\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  // V2 AggregatorInterface\\n\\n  function latestAnswer(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      int256 answer\\n    );\\n\\n  function latestTimestamp(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 timestamp\\n    );\\n\\n  function latestRound(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 roundId\\n    );\\n\\n  function getAnswer(\\n    address base,\\n    address quote,\\n    uint256 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      int256 answer\\n    );\\n\\n  function getTimestamp(\\n    address base,\\n    address quote,\\n    uint256 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 timestamp\\n    );\\n\\n  // Registry getters\\n\\n  function getFeed(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      AggregatorV2V3Interface aggregator\\n    );\\n\\n  function getPhaseFeed(\\n    address base,\\n    address quote,\\n    uint16 phaseId\\n  )\\n    external\\n    view\\n    returns (\\n      AggregatorV2V3Interface aggregator\\n    );\\n\\n  function isFeedEnabled(\\n    address aggregator\\n  )\\n    external\\n    view\\n    returns (\\n      bool\\n    );\\n\\n  function getPhase(\\n    address base,\\n    address quote,\\n    uint16 phaseId\\n  )\\n    external\\n    view\\n    returns (\\n      Phase memory phase\\n    );\\n\\n  // Round helpers\\n\\n  function getRoundFeed(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      AggregatorV2V3Interface aggregator\\n    );\\n\\n  function getPhaseRange(\\n    address base,\\n    address quote,\\n    uint16 phaseId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 startingRoundId,\\n      uint80 endingRoundId\\n    );\\n\\n  function getPreviousRoundId(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  ) external\\n    view\\n    returns (\\n      uint80 previousRoundId\\n    );\\n\\n  function getNextRoundId(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  ) external\\n    view\\n    returns (\\n      uint80 nextRoundId\\n    );\\n\\n  // Feed management\\n\\n  function proposeFeed(\\n    address base,\\n    address quote,\\n    address aggregator\\n  ) external;\\n\\n  function confirmFeed(\\n    address base,\\n    address quote,\\n    address aggregator\\n  ) external;\\n\\n  // Proposed aggregator\\n\\n  function getProposedFeed(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      AggregatorV2V3Interface proposedAggregator\\n    );\\n\\n  function proposedGetRoundData(\\n    address base,\\n    address quote,\\n    uint80 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 id,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function proposedLatestRoundData(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 id,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  // Phases\\n  function getCurrentPhaseId(\\n    address base,\\n    address quote\\n  )\\n    external\\n    view\\n    returns (\\n      uint16 currentPhaseId\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStrategyFactory.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.7/interfaces/FeedRegistryInterface.sol\\\";\\nimport \\\"./IOneInchRouter.sol\\\";\\nimport \\\"./IStrategyBase.sol\\\";\\nimport \\\"./IDefiEdgeStrategyDeployer.sol\\\";\\n\\ninterface IStrategyFactory {\\n    struct CreateStrategyParams {\\n        // address of the strategy operator (manager)\\n        address operator;\\n        // address where all the strategy's fees should go\\n        address feeTo;\\n        // management fee rate, 1e8 is 100%\\n        uint256 managementFeeRate;\\n        // performance fee rate, 1e8 is 100%\\n        uint256 performanceFeeRate;\\n        // limit in the form of shares\\n        uint256 limit;\\n        // address of the pool\\n        IUniswapV3Pool pool;\\n        // Chainlink's pair with USD, if token0 has pair with USD it should be true and v.v. same for token1\\n        bool[2] usdAsBase;\\n        // initial ticks to setup\\n        IStrategyBase.Tick[] ticks;\\n    }\\n\\n    function totalIndex() external view returns (uint256);\\n\\n    function strategyCreationFee() external view returns (uint256); // fee for strategy creation in native token\\n\\n    function defaultAllowedSlippage() external view returns (uint256); // 1e18 means 100%\\n\\n    function defaultAllowedDeviation() external view returns (uint256); // 1e18 means 100%\\n\\n    function defaultAllowedSwapDeviation() external view returns (uint256); // 1e18 means 100%\\n\\n    function allowedDeviation(address _pool) external view returns (uint256); // 1e18 means 100%\\n\\n    function allowedSwapDeviation(address _pool) external view returns (uint256); // 1e18 means 100%\\n\\n    function allowedSlippage(address _pool) external view returns (uint256); // 1e18 means 100%\\n\\n    function isValidStrategy(address) external view returns (bool);\\n    \\n    function isAllowedOneInchCaller(address) external view returns (bool);\\n\\n    function strategyByIndex(uint256) external view returns (address);\\n\\n    function strategyByManager(address) external view returns (address);\\n\\n    function feeTo() external view returns (address);\\n\\n    function denied(address) external view returns (bool);\\n\\n    function protocolFeeRate() external view returns (uint256); // 1e8 means 100%\\n\\n    function protocolPerformanceFeeRate() external view returns (uint256); // 1e8 means 100%\\n\\n    function governance() external view returns (address);\\n\\n    function pendingGovernance() external view returns (address);\\n\\n    function deployerProxy() external view returns (IDefiEdgeStrategyDeployer);\\n\\n    function uniswapV3Factory() external view returns (IUniswapV3Factory);\\n\\n    function chainlinkRegistry() external view returns (FeedRegistryInterface);\\n\\n    function oneInchRouter() external view returns (IOneInchRouter);\\n\\n    function freezeEmergency() external view returns (bool);\\n\\n    function getHeartBeat(address _base, address _quote) external view returns (uint256);\\n\\n    function createStrategy(CreateStrategyParams calldata params) external payable;\\n\\n    function freezeEmergencyFunctions() external;\\n\\n    function changeAllowedSlippage(address, uint256) external;\\n\\n    function changeAllowedDeviation(address, uint256) external;\\n\\n    function changeAllowedSwapDeviation(address, uint256) external;\\n\\n    function changeDefaultValues(\\n        uint256,\\n        uint256,\\n        uint256\\n    ) external;\\n\\n    event NewStrategy(address indexed strategy, address indexed creater);\\n    event ChangeProtocolFee(uint256 fee);\\n    event ChangeProtocolPerformanceFee(uint256 fee);\\n    event StrategyStatusChanged(bool status);\\n    event ChangeStrategyCreationFee(uint256 amount);\\n    event ClaimFees(address to, uint256 amount);\\n    event ChangeAllowedSlippage(address pool, uint256 value);\\n    event ChangeAllowedDeviation(address pool, uint256 value);\\n    event ChangeAllowedSwapDeviation(address pool, uint256 value);\\n    event EmergencyFrozen();\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStrategyManager.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.6;\\n\\nimport \\\"./IStrategyFactory.sol\\\";\\n\\ninterface IStrategyManager {\\n    function isUserWhiteListed(address _account) external view returns (bool);\\n\\n    function isAllowedToManage(address) external view returns (bool);\\n\\n    function isAllowedToBurn(address) external view returns (bool);\\n\\n    function managementFeeRate() external view returns (uint256); // 1e8 decimals\\n\\n    function performanceFeeRate() external view returns (uint256); // 1e8 decimals\\n\\n    function operator() external view returns (address);\\n\\n    function limit() external view returns (uint256);\\n\\n    function allowedDeviation() external view returns (uint256); // 1e18 decimals\\n\\n    function allowedSwapDeviation() external view returns (uint256); // 1e18 decimals\\n\\n    function feeTo() external view returns (address);\\n\\n    function factory() external view returns (IStrategyFactory);\\n\\n    function increamentSwapCounter() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Minimal.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.6;\\n\\ninterface IERC20Minimal {\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.7/interfaces/AggregatorV2V3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface\\n{\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.7/interfaces/AggregatorInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer()\\n    external\\n    view\\n    returns (\\n      int256\\n    );\\n  \\n  function latestTimestamp()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  function latestRound()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  function getAnswer(\\n    uint256 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      int256\\n    );\\n\\n  function getTimestamp(\\n    uint256 roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  event AnswerUpdated(\\n    int256 indexed current,\\n    uint256 indexed roundId,\\n    uint256 updatedAt\\n  );\\n\\n  event NewRound(\\n    uint256 indexed roundId,\\n    address indexed startedBy,\\n    uint256 startedAt\\n  );\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOneInchRouter.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IOneInchRouter {\\n    function swap(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 minReturn,\\n        uint256[] memory distribution,\\n        uint256 flags\\n    ) external returns (uint256 returnAmount);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/libraries/TickMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(MAX_TICK), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"contract IDefiEdgeStrategyDeployer\",\"name\":\"_deployerProxy\",\"type\":\"address\"},{\"internalType\":\"contract FeedRegistryInterface\",\"name\":\"_chainlinkRegistry\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV3Factory\",\"name\":\"_uniswapV3factory\",\"type\":\"address\"},{\"internalType\":\"contract IOneInchRouter\",\"name\":\"_oneInchRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allowedSlippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allowedDeviation\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ChangeAllowedDeviation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ChangeAllowedSlippage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ChangeAllowedSwapDeviation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"ChangeProtocolFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"ChangeProtocolPerformanceFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ChangeStrategyCreationFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EmergencyFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creater\",\"type\":\"address\"}],\"name\":\"NewStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"StrategyStatusChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_DECIMAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PROTOCOL_PERFORMANCE_FEES_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"addOrRemoveOneInchCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"allowedDeviation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"allowedSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"allowedSwapDeviation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainlinkRegistry\",\"outputs\":[{\"internalType\":\"contract FeedRegistryInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allowedDeviation\",\"type\":\"uint256\"}],\"name\":\"changeAllowedDeviation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allowedSlippage\",\"type\":\"uint256\"}],\"name\":\"changeAllowedSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allowedSwapDeviation\",\"type\":\"uint256\"}],\"name\":\"changeAllowedSwapDeviation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allowedSlippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allowedDeviation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allowedSwapDeviation\",\"type\":\"uint256\"}],\"name\":\"changeDefaultValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"changeFeeForStrategyCreation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"changeFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"changeGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"changeProtocolFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"}],\"name\":\"changeProtocolPerformanceFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"managementFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"performanceFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"contract IUniswapV3Pool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool[2]\",\"name\":\"usdAsBase\",\"type\":\"bool[2]\"},{\"components\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"internalType\":\"struct IStrategyBase.Tick[]\",\"name\":\"ticks\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IStrategyFactory.CreateStrategyParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createStrategy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultAllowedDeviation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultAllowedSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultAllowedSwapDeviation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"denied\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"deny\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployerProxy\",\"outputs\":[{\"internalType\":\"contract IDefiEdgeStrategyDeployer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeEmergency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeEmergencyFunctions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_quote\",\"type\":\"address\"}],\"name\":\"getHeartBeat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAllowedOneInchCaller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidStrategy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneInchRouter\",\"outputs\":[{\"internalType\":\"contract IOneInchRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolPerformanceFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_quote\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setMinHeartbeat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"strategyByIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategyByManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyCreationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV3Factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV3Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DefiEdgeStrategyFactory", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "000000000000000000000000001530e763fe9de4dcfe31bbd8548bcb579ebf3a0000000000000000000000004ed5761c1a964fc17ba3d60747876185983cab29000000000000000000000000e7edf6ed8197247589a9c59510e428e6955f82070000000000000000000000001f98431c8ad98523631ae4a59f267346ea31f9840000000000000000000000001111111254fb6c44bac0bed2854e76f90643097d00000000000000000000000000000000000000000000000000470de4df82000000000000000000000000000000000000000000000000000000470de4df820000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}