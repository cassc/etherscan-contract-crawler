{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/ControllerV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./inheritance/Governable.sol\\\";\\n\\nimport \\\"./interface/IStrategy.sol\\\";\\nimport \\\"./interface/IVault.sol\\\";\\n\\nimport \\\"./RewardForwarderV2.sol\\\";\\n\\n\\ncontract ControllerV2 is Governable {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    // ========================= Fields =========================\\n\\n    // external parties\\n    address public targetToken;\\n    address public protocolFeeReceiver;\\n    address public profitSharingReceiver;\\n    address public rewardForwarder;\\n    address public universalLiquidator;\\n\\n    uint256 public nextImplementationDelay;\\n\\n    /// 15% of fees captured go to iFARM stakers\\n    uint256 public profitSharingNumerator = 500;\\n    uint256 public nextProfitSharingNumerator = 0;\\n    uint256 public nextProfitSharingNumeratorTimestamp = 0;\\n\\n    /// 5% of fees captured go to strategists\\n    uint256 public strategistFeeNumerator = 0;\\n    uint256 public nextStrategistFeeNumerator = 0;\\n    uint256 public nextStrategistFeeNumeratorTimestamp = 0;\\n\\n    /// 5% of fees captured go to the devs of the platform\\n    uint256 public platformFeeNumerator = 300;\\n    uint256 public nextPlatformFeeNumerator = 0;\\n    uint256 public nextPlatformFeeNumeratorTimestamp = 0;\\n\\n    /// used for queuing a new delay\\n    uint256 public tempNextImplementationDelay = 0;\\n    uint256 public tempNextImplementationDelayTimestamp = 0;\\n\\n    uint256 public constant MAX_TOTAL_FEE = 3000;\\n    uint256 public constant FEE_DENOMINATOR = 10000;\\n\\n    /// @notice This mapping allows certain contracts to stake on a user's behalf\\n    mapping (address => bool) public addressWhitelist;\\n    mapping (bytes32 => bool) public codeWhitelist;\\n\\n    // All eligible hardWorkers that we have\\n    mapping (address => bool) public hardWorkers;\\n\\n    // ========================= Events =========================\\n\\n    event QueueProfitSharingChange(uint profitSharingNumerator, uint validAtTimestamp);\\n    event ConfirmProfitSharingChange(uint profitSharingNumerator);\\n\\n    event QueueStrategistFeeChange(uint strategistFeeNumerator, uint validAtTimestamp);\\n    event ConfirmStrategistFeeChange(uint strategistFeeNumerator);\\n\\n    event QueuePlatformFeeChange(uint platformFeeNumerator, uint validAtTimestamp);\\n    event ConfirmPlatformFeeChange(uint platformFeeNumerator);\\n\\n    event QueueNextImplementationDelay(uint implementationDelay, uint validAtTimestamp);\\n    event ConfirmNextImplementationDelay(uint implementationDelay);\\n\\n    event AddedAddressToWhitelist(address indexed _address);\\n    event RemovedAddressFromWhitelist(address indexed _address);\\n\\n    event AddedCodeToWhitelist(address indexed _address);\\n    event RemovedCodeFromWhitelist(address indexed _address);\\n\\n    event SharePriceChangeLog(\\n        address indexed vault,\\n        address indexed strategy,\\n        uint256 oldSharePrice,\\n        uint256 newSharePrice,\\n        uint256 timestamp\\n    );\\n\\n    // ========================= Modifiers =========================\\n\\n    modifier onlyHardWorkerOrGovernance() {\\n        require(hardWorkers[msg.sender] || (msg.sender == governance()),\\n            \\\"only hard worker can call this\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _storage,\\n        address _targetToken,\\n        address _protocolFeeReceiver,\\n        address _profitSharingReceiver,\\n        address _rewardForwarder,\\n        address _universalLiquidator,\\n        uint _nextImplementationDelay\\n    )\\n    Governable(_storage)\\n    public {\\n        require(_targetToken != address(0), \\\"_targetToken should not be empty\\\");\\n        require(_protocolFeeReceiver != address(0), \\\"_protocolFeeReceiver should not be empty\\\");\\n        require(_profitSharingReceiver != address(0), \\\"_profitSharingReceiver should not be empty\\\");\\n        require(_rewardForwarder != address(0), \\\"_rewardForwarder should not be empty\\\");\\n        require(_nextImplementationDelay > 0, \\\"_nextImplementationDelay should be gt 0\\\");\\n\\n        targetToken = _targetToken;\\n        protocolFeeReceiver = _protocolFeeReceiver;\\n        profitSharingReceiver = _profitSharingReceiver;\\n        rewardForwarder = _rewardForwarder;\\n        universalLiquidator = _universalLiquidator;\\n        nextImplementationDelay = _nextImplementationDelay;\\n    }\\n\\n        // [Grey list]\\n    // An EOA can safely interact with the system no matter what.\\n    // If you're using Metamask, you're using an EOA.\\n    // Only smart contracts may be affected by this grey list.\\n    //\\n    // This contract will not be able to ban any EOA from the system\\n    // even if an EOA is being added to the greyList, he/she will still be able\\n    // to interact with the whole system as if nothing happened.\\n    // Only smart contracts will be affected by being added to the greyList.\\n    function greyList(address _addr) public view returns (bool) {\\n        return !addressWhitelist[_addr] && !codeWhitelist[getContractHash(_addr)];\\n    }\\n\\n    // Only smart contracts will be affected by the whitelist.\\n    function addToWhitelist(address _target) public onlyGovernance {\\n        addressWhitelist[_target] = true;\\n        emit AddedAddressToWhitelist(_target);\\n    }\\n\\n    function addMultipleToWhitelist(address[] memory _targets) public onlyGovernance {\\n        for (uint256 i = 0; i < _targets.length; i++) {\\n        addressWhitelist[_targets[i]] = true;\\n        }\\n    }\\n\\n    function removeFromWhitelist(address _target) public onlyGovernance {\\n        addressWhitelist[_target] = false;\\n        emit RemovedAddressFromWhitelist(_target);\\n    }\\n\\n    function removeMultipleFromWhitelist(address[] memory _targets) public onlyGovernance {\\n        for (uint256 i = 0; i < _targets.length; i++) {\\n        addressWhitelist[_targets[i]] = false;\\n        }\\n    }\\n\\n    function getContractHash(address a) public view returns (bytes32 hash) {\\n        assembly {\\n        hash := extcodehash(a)\\n        }\\n    }\\n\\n    function addCodeToWhitelist(address _target) public onlyGovernance {\\n        codeWhitelist[getContractHash(_target)] = true;\\n        emit AddedCodeToWhitelist(_target);\\n    }\\n\\n    function removeCodeFromWhitelist(address _target) public onlyGovernance {\\n        codeWhitelist[getContractHash(_target)] = false;\\n        emit RemovedCodeFromWhitelist(_target);\\n    }\\n\\n    function setRewardForwarder(address _rewardForwarder) public onlyGovernance {\\n        require(_rewardForwarder != address(0), \\\"new reward forwarder should not be empty\\\");\\n        rewardForwarder = _rewardForwarder;\\n    }\\n\\n    function setTargetToken(address _targetToken) public onlyGovernance {\\n        require(_targetToken != address(0), \\\"new target token should not be empty\\\");\\n        targetToken = _targetToken;\\n    }\\n\\n    function setProfitSharingReceiver(address _profitSharingReceiver) public onlyGovernance {\\n        require(_profitSharingReceiver != address(0), \\\"new profit sharing receiver should not be empty\\\");\\n        profitSharingReceiver = _profitSharingReceiver;\\n    }\\n\\n    function setProtocolFeeReceiver(address _protocolFeeReceiver) public onlyGovernance {\\n        require(_protocolFeeReceiver != address(0), \\\"new protocol fee receiver should not be empty\\\");\\n        protocolFeeReceiver = _protocolFeeReceiver;\\n    }\\n\\n    function setUniversalLiquidator(address _universalLiquidator) public onlyGovernance {\\n        require(_universalLiquidator != address(0), \\\"new universal liquidator should not be empty\\\");\\n        universalLiquidator = _universalLiquidator;\\n    }\\n\\n    function getPricePerFullShare(address _vault) public view returns (uint256) {\\n        return IVault(_vault).getPricePerFullShare();\\n    }\\n\\n    function doHardWork(address _vault) external onlyHardWorkerOrGovernance {\\n        uint256 oldSharePrice = IVault(_vault).getPricePerFullShare();\\n        IVault(_vault).doHardWork();\\n        emit SharePriceChangeLog(\\n            _vault,\\n            IVault(_vault).strategy(),\\n            oldSharePrice,\\n            IVault(_vault).getPricePerFullShare(),\\n            block.timestamp\\n        );\\n    }\\n\\n    function notifyFee(address _token, uint256 _feeAmount) external {\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _feeAmount);\\n        uint256 totalFee = profitSharingNumerator.add(strategistFeeNumerator).add(platformFeeNumerator);\\n        uint256 profitShareAmount = _feeAmount.mul(profitSharingNumerator).div(totalFee);\\n        uint256 strategistAmount = _feeAmount.mul(strategistFeeNumerator).div(totalFee);\\n        uint256 platformAmount = _feeAmount.mul(platformFeeNumerator).div(totalFee);\\n\\n        IERC20(_token).safeApprove(rewardForwarder, 0);\\n        IERC20(_token).safeApprove(rewardForwarder, _feeAmount);\\n        RewardForwarderV2(rewardForwarder).notifyFee(_token, profitShareAmount, strategistAmount, platformAmount);\\n    }\\n\\n    function addHardWorker(address _worker) public onlyGovernance {\\n        require(_worker != address(0), \\\"_worker must be defined\\\");\\n        hardWorkers[_worker] = true;\\n    }\\n\\n    function removeHardWorker(address _worker) public onlyGovernance {\\n        require(_worker != address(0), \\\"_worker must be defined\\\");\\n        hardWorkers[_worker] = false;\\n    }\\n\\n    // transfers token in the controller contract to the governance\\n    function salvage(address _token, uint256 _amount) external onlyGovernance {\\n        IERC20(_token).safeTransfer(governance(), _amount);\\n    }\\n\\n    function salvageStrategy(address _strategy, address _token, uint256 _amount) external onlyGovernance {\\n        // the strategy is responsible for maintaining the list of\\n        // salvageable tokens, to make sure that governance cannot come\\n        // in and take away the coins\\n        IStrategy(_strategy).salvageToken(governance(), _token, _amount);\\n    }\\n\\n    function feeDenominator() public pure returns (uint) {\\n        // keep the interface for this function as a `view` for now, in case it changes in the future\\n        return FEE_DENOMINATOR;\\n    }\\n\\n    function setProfitSharingNumerator(uint _profitSharingNumerator) public onlyGovernance {\\n        require(\\n            _profitSharingNumerator + strategistFeeNumerator + platformFeeNumerator <= MAX_TOTAL_FEE,\\n            \\\"total fee too high\\\"\\n        );\\n\\n        nextProfitSharingNumerator = _profitSharingNumerator;\\n        nextProfitSharingNumeratorTimestamp = block.timestamp + nextImplementationDelay;\\n        emit QueueProfitSharingChange(nextProfitSharingNumerator, nextProfitSharingNumeratorTimestamp);\\n    }\\n\\n    function confirmSetProfitSharingNumerator() public onlyGovernance {\\n        require(\\n            nextProfitSharingNumerator != 0\\n            && nextProfitSharingNumeratorTimestamp != 0\\n            && block.timestamp >= nextProfitSharingNumeratorTimestamp,\\n            \\\"invalid timestamp or no new profit sharing numerator confirmed\\\"\\n        );\\n        require(\\n            nextProfitSharingNumerator + strategistFeeNumerator + platformFeeNumerator <= MAX_TOTAL_FEE,\\n            \\\"total fee too high\\\"\\n        );\\n\\n        profitSharingNumerator = nextProfitSharingNumerator;\\n        nextProfitSharingNumerator = 0;\\n        nextProfitSharingNumeratorTimestamp = 0;\\n        emit ConfirmProfitSharingChange(profitSharingNumerator);\\n    }\\n\\n    function setStrategistFeeNumerator(uint _strategistFeeNumerator) public onlyGovernance {\\n        require(\\n            _strategistFeeNumerator + platformFeeNumerator + profitSharingNumerator <= MAX_TOTAL_FEE,\\n            \\\"total fee too high\\\"\\n        );\\n\\n        nextStrategistFeeNumerator = _strategistFeeNumerator;\\n        nextStrategistFeeNumeratorTimestamp = block.timestamp + nextImplementationDelay;\\n        emit QueueStrategistFeeChange(nextStrategistFeeNumerator, nextStrategistFeeNumeratorTimestamp);\\n    }\\n\\n    function confirmSetStrategistFeeNumerator() public onlyGovernance {\\n        require(\\n            nextStrategistFeeNumerator != 0\\n            && nextStrategistFeeNumeratorTimestamp != 0\\n            && block.timestamp >= nextStrategistFeeNumeratorTimestamp,\\n            \\\"invalid timestamp or no new strategist fee numerator confirmed\\\"\\n        );\\n        require(\\n            nextStrategistFeeNumerator + platformFeeNumerator + profitSharingNumerator <= MAX_TOTAL_FEE,\\n            \\\"total fee too high\\\"\\n        );\\n\\n        strategistFeeNumerator = nextStrategistFeeNumerator;\\n        nextStrategistFeeNumerator = 0;\\n        nextStrategistFeeNumeratorTimestamp = 0;\\n        emit ConfirmStrategistFeeChange(strategistFeeNumerator);\\n    }\\n\\n    function setPlatformFeeNumerator(uint _platformFeeNumerator) public onlyGovernance {\\n        require(\\n            _platformFeeNumerator + strategistFeeNumerator + profitSharingNumerator <= MAX_TOTAL_FEE,\\n            \\\"total fee too high\\\"\\n        );\\n\\n        nextPlatformFeeNumerator = _platformFeeNumerator;\\n        nextPlatformFeeNumeratorTimestamp = block.timestamp + nextImplementationDelay;\\n        emit QueuePlatformFeeChange(nextPlatformFeeNumerator, nextPlatformFeeNumeratorTimestamp);\\n    }\\n\\n    function confirmSetPlatformFeeNumerator() public onlyGovernance {\\n        require(\\n            nextPlatformFeeNumerator != 0\\n            && nextPlatformFeeNumeratorTimestamp != 0\\n            && block.timestamp >= nextPlatformFeeNumeratorTimestamp,\\n            \\\"invalid timestamp or no new platform fee numerator confirmed\\\"\\n        );\\n        require(\\n            nextPlatformFeeNumerator + strategistFeeNumerator + profitSharingNumerator <= MAX_TOTAL_FEE,\\n            \\\"total fee too high\\\"\\n        );\\n\\n        platformFeeNumerator = nextPlatformFeeNumerator;\\n        nextPlatformFeeNumerator = 0;\\n        nextPlatformFeeNumeratorTimestamp = 0;\\n        emit ConfirmPlatformFeeChange(platformFeeNumerator);\\n    }\\n\\n    function setNextImplementationDelay(uint256 _nextImplementationDelay) public onlyGovernance {\\n        require(\\n            _nextImplementationDelay > 0,\\n            \\\"invalid _nextImplementationDelay\\\"\\n        );\\n\\n        tempNextImplementationDelay = _nextImplementationDelay;\\n        tempNextImplementationDelayTimestamp = block.timestamp + nextImplementationDelay;\\n        emit QueueNextImplementationDelay(tempNextImplementationDelay, tempNextImplementationDelayTimestamp);\\n    }\\n\\n    function confirmNextImplementationDelay() public onlyGovernance {\\n        require(\\n            tempNextImplementationDelayTimestamp != 0 && block.timestamp >= tempNextImplementationDelayTimestamp,\\n            \\\"invalid timestamp or no new implementation delay confirmed\\\"\\n        );\\n        nextImplementationDelay = tempNextImplementationDelay;\\n        tempNextImplementationDelay = 0;\\n        tempNextImplementationDelayTimestamp = 0;\\n        emit ConfirmNextImplementationDelay(nextImplementationDelay);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/inheritance/Controllable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./Governable.sol\\\";\\n\\ncontract Controllable is Governable {\\n\\n  constructor(address _storage) Governable(_storage) public {\\n  }\\n\\n  modifier onlyController() {\\n    require(store.isController(msg.sender), \\\"Not a controller\\\");\\n    _;\\n  }\\n\\n  modifier onlyControllerOrGovernance(){\\n    require((store.isController(msg.sender) || store.isGovernance(msg.sender)),\\n      \\\"The caller must be controller or governance\\\");\\n    _;\\n  }\\n\\n  function controller() public view returns (address) {\\n    return store.controller();\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/base/inheritance/Governable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./Storage.sol\\\";\\n\\ncontract Governable {\\n\\n  Storage public store;\\n\\n  constructor(address _store) public {\\n    require(_store != address(0), \\\"new storage shouldn't be empty\\\");\\n    store = Storage(_store);\\n  }\\n\\n  modifier onlyGovernance() {\\n    require(store.isGovernance(msg.sender), \\\"Not governance\\\");\\n    _;\\n  }\\n\\n  function setStorage(address _store) public onlyGovernance {\\n    require(_store != address(0), \\\"new storage shouldn't be empty\\\");\\n    store = Storage(_store);\\n  }\\n\\n  function governance() public view returns (address) {\\n    return store.governance();\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/base/inheritance/Storage.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity 0.6.12;\\n\\ncontract Storage {\\n\\n  address public governance;\\n  address public controller;\\n\\n  constructor() public {\\n    governance = msg.sender;\\n  }\\n\\n  modifier onlyGovernance() {\\n    require(isGovernance(msg.sender), \\\"Not governance\\\");\\n    _;\\n  }\\n\\n  function setGovernance(address _governance) public onlyGovernance {\\n    require(_governance != address(0), \\\"new governance shouldn't be empty\\\");\\n    governance = _governance;\\n  }\\n\\n  function setController(address _controller) public onlyGovernance {\\n    require(_controller != address(0), \\\"new controller shouldn't be empty\\\");\\n    controller = _controller;\\n  }\\n\\n  function isGovernance(address account) public view returns (bool) {\\n    return account == governance;\\n  }\\n\\n  function isController(address account) public view returns (bool) {\\n    return account == controller;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/IControllerV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity 0.6.12;\\n\\n\\ninterface IControllerV2 {\\n\\n    // ========================= Events =========================\\n\\n    event QueueProfitSharingChange(uint profitSharingNumerator, uint validAtTimestamp);\\n    event ConfirmProfitSharingChange(uint profitSharingNumerator);\\n\\n    event QueueStrategistFeeChange(uint strategistFeeNumerator, uint validAtTimestamp);\\n    event ConfirmStrategistFeeChange(uint strategistFeeNumerator);\\n\\n    event QueuePlatformFeeChange(uint platformFeeNumerator, uint validAtTimestamp);\\n    event ConfirmPlatformFeeChange(uint platformFeeNumerator);\\n\\n    event QueueNextImplementationDelay(uint implementationDelay, uint validAtTimestamp);\\n    event ConfirmNextImplementationDelay(uint implementationDelay);\\n\\n    event AddedStakingContract(address indexed stakingContract);\\n    event RemovedStakingContract(address indexed stakingContract);\\n\\n    event SharePriceChangeLog(\\n        address indexed vault,\\n        address indexed strategy,\\n        uint256 oldSharePrice,\\n        uint256 newSharePrice,\\n        uint256 timestamp\\n    );\\n\\n    // ==================== Functions ====================\\n\\n    /**\\n     * An EOA can safely interact with the system no matter what. If you're using Metamask, you're using an EOA. Only\\n     * smart contracts may be affected by this grey list. This contract will not be able to ban any EOA from the system\\n     * even if an EOA is being added to the greyList, he/she will still be able to interact with the whole system as if\\n     * nothing happened. Only smart contracts will be affected by being added to the greyList. This grey list is only\\n     * used in VaultV3.sol, see the code there for reference\\n     */\\n    function greyList(address _target) external view returns (bool);\\n\\n    function addressWhiteList(address _target) external view returns (bool);\\n\\n    function codeWhiteList(address _target) external view returns (bool);\\n\\n    function addToWhitelist(address _target) external;\\n\\n    function addCodeToWhitelist(address _target) external;\\n\\n    function store() external view returns (address);\\n\\n    function governance() external view returns (address);\\n\\n    function notifyFee(address _underlying, uint256 fee) external;\\n\\n    function doHardWork(address _vault) external;\\n\\n    function addHardWorker(address _worker) external;\\n\\n    function removeHardWorker(address _worker) external;\\n\\n    function salvage(address _token, uint256 amount) external;\\n\\n    function salvageStrategy(address _strategy, address _token, uint256 amount) external;\\n\\n    /**\\n     * @return The targeted profit token to convert all-non-compounding rewards to. Defaults to WETH.\\n     */\\n    function targetToken() external view returns (address);\\n\\n    function setTargetToken(address _targetToken) external;\\n\\n    function profitSharingReceiver() external view returns (address);\\n\\n    function setProfitSharingReceiver(address _profitSharingReceiver) external;\\n\\n    function protocolFeeReceiver() external view returns (address);\\n\\n    function setProtocolFeeReceiver(address _protocolFeeReceiver) external;\\n\\n    function rewardForwarder() external view returns (address);\\n\\n    function setRewardForwarder(address _rewardForwarder) external;\\n\\n    function universalLiquidator() external view returns (address);\\n\\n    function setUniversalLiquidator(address _universalLiquidator) external;\\n\\n    function dolomiteYieldFarmingRouter() external view returns (address);\\n\\n    function setDolomiteYieldFarmingRouter(address _value) external;\\n\\n    function nextImplementationDelay() external view returns (uint256);\\n\\n    function profitSharingNumerator() external view returns (uint256);\\n\\n    function strategistFeeNumerator() external view returns (uint256);\\n\\n    function platformFeeNumerator() external view returns (uint256);\\n\\n    function feeDenominator() external view returns (uint256);\\n\\n    function setProfitSharingNumerator(uint _profitSharingNumerator) external;\\n\\n    function confirmSetProfitSharingNumerator() external;\\n\\n    function setStrategistFeeNumerator(uint _strategistFeeNumerator) external;\\n\\n    function confirmSetStrategistFeeNumerator() external;\\n\\n    function setPlatformFeeNumerator(uint _platformFeeNumerator) external;\\n\\n    function confirmSetPlatformFeeNumerator() external;\\n\\n    function setNextImplementationDelay(uint256 _nextImplementationDelay) external;\\n\\n    function confirmNextImplementationDelay() external;\\n\\n    function nextProfitSharingNumerator() external view returns (uint256);\\n\\n    function nextProfitSharingNumeratorTimestamp() external view returns (uint256);\\n\\n    function nextStrategistFeeNumerator() external view returns (uint256);\\n\\n    function nextStrategistFeeNumeratorTimestamp() external view returns (uint256);\\n\\n    function nextPlatformFeeNumerator() external view returns (uint256);\\n\\n    function nextPlatformFeeNumeratorTimestamp() external view returns (uint256);\\n\\n    function tempNextImplementationDelay() external view returns (uint256);\\n\\n    function tempNextImplementationDelayTimestamp() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/IProfitSharingReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity 0.6.12;\\n\\n\\ninterface IProfitSharingReceiver {\\n\\n    function governance() external view returns (address);\\n\\n    function withdrawTokens(address[] calldata _tokens) external;\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/IRewardForwarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity 0.6.12;\\n\\n\\n/**\\n * @dev A routing contract that is responsible for taking the harvested gains and routing them into FARM and additional\\n *      buyback tokens for the corresponding strategy\\n */\\ninterface IRewardForwarder {\\n\\n    function store() external view returns (address);\\n\\n    function governance() external view returns (address);\\n\\n    /**\\n     * @dev This function sends converted `_buybackTokens` to `msg.sender`. The returned amounts will match the\\n     *      `amounts` return value. The fee amounts are converted to the profit sharing token and sent to the proper\\n     *      addresses (profit sharing, strategist, and governance (platform)).\\n     *\\n     * @param _token            the token that will be compounded or sold into the profit sharing token for the Harvest\\n     *                          collective (users that stake iFARM)\\n     * @param _profitSharingFee the amount of `_token` that will be sold into the profit sharing token\\n     * @param _strategistFee    the amount of `_token` that will be sold into the profit sharing token for the\\n     *                          strategist\\n     * @param _platformFee      the amount of `_token` that will be sold into the profit sharing token for the Harvest\\n     *                          treasury\\n     * @param _buybackTokens    the output tokens that `_buyBackAmounts` should be swapped to (outputToken)\\n     * @param _buybackAmounts   the amounts of `_token` that will be bought into more `_buybackTokens` token\\n     * @return amounts The amounts that were purchased of _buybackTokens\\n     */\\n    function notifyFeeAndBuybackAmounts(\\n        address _token,\\n        uint256 _profitSharingFee,\\n        uint256 _strategistFee,\\n        uint256 _platformFee,\\n        address[] calldata _buybackTokens,\\n        uint256[] calldata _buybackAmounts\\n    ) external returns (uint[] memory amounts);\\n\\n    /**\\n     * @dev This function converts the fee amounts to the profit sharing token and sends them to the proper addresses\\n     *      (profit sharing, strategist, and governance (platform)).\\n     *\\n     * @param _token            the token that will be compounded or sold into the profit sharing token for the Harvest\\n     *                          collective (users that stake iFARM)\\n     * @param _profitSharingFee the amount of `_token` that will be sold into the profit sharing token\\n     * @param _strategistFee    the amount of `_token` that will be sold into the profit sharing token for the\\n     *                          strategist\\n     * @param _platformFee      the amount of `_token` that will be sold into the profit sharing token for the Harvest\\n     *                          treasury\\n     */\\n    function notifyFee(\\n        address _token,\\n        uint256 _profitSharingFee,\\n        uint256 _strategistFee,\\n        uint256 _platformFee\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/IStrategy.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity 0.6.12;\\n\\ninterface IStrategy {\\n\\n    function unsalvagableTokens(address tokens) external view returns (bool);\\n\\n    function underlying() external view returns (address);\\n    function vault() external view returns (address);\\n\\n    function withdrawAllToVault() external;\\n    function withdrawToVault(uint256 amount) external;\\n\\n    function investedUnderlyingBalance() external view returns (uint256); // itsNotMuch()\\n\\n    // should only be called by controller\\n    function salvage(address recipient, address token, uint256 amount) external;\\n\\n    function doHardWork() external;\\n    function depositArbCheck() external view returns(bool);\\n\\n    function strategist() external view returns (address);\\n    function salvageToken(address recipient, address token, uint amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/IUniversalLiquidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface IUniversalLiquidator {\\r\\n    event Swap(\\r\\n        address indexed sellToken,\\r\\n        address indexed buyToken,\\r\\n        address indexed receiver,\\r\\n        address initiator,\\r\\n        uint256 sellAmount,\\r\\n        uint256 minBuyAmount\\r\\n    );\\r\\n\\r\\n    function swap(\\r\\n        address _sellToken,\\r\\n        address _buyToken,\\r\\n        uint256 _sellAmount,\\r\\n        uint256 _minBuyAmount,\\r\\n        address _receiver\\r\\n    ) external returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/base/interface/IVault.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity 0.6.12;\\n\\ninterface IVault {\\n\\n    function initializeVault(\\n      address _storage,\\n      address _underlying,\\n      uint256 _toInvestNumerator,\\n      uint256 _toInvestDenominator\\n    ) external ;\\n\\n    function underlyingBalanceInVault() external view returns (uint256);\\n    function underlyingBalanceWithInvestment() external view returns (uint256);\\n\\n    function underlying() external view returns (address);\\n    function strategy() external view returns (address);\\n\\n    function setStrategy(address _strategy) external;\\n    function announceStrategyUpdate(address _strategy) external;\\n    function setVaultFractionToInvest(uint256 numerator, uint256 denominator) external;\\n\\n    function deposit(uint256 amountWei) external;\\n    function depositFor(uint256 amountWei, address holder) external;\\n\\n    function withdrawAll() external;\\n    function withdraw(uint256 numberOfShares) external;\\n    function getPricePerFullShare() external view returns (uint256);\\n\\n    function underlyingBalanceWithInvestmentForHolder(address holder) view external returns (uint256);\\n\\n    // hard work should be callable only by the controller (by the hard worker) or by governance\\n    function doHardWork() external;\\n}\\n\"\r\n    },\r\n    \"contracts/base/RewardForwarderV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./inheritance/Governable.sol\\\";\\nimport \\\"./interface/IControllerV2.sol\\\";\\nimport \\\"./interface/IRewardForwarder.sol\\\";\\nimport \\\"./interface/IProfitSharingReceiver.sol\\\";\\nimport \\\"./interface/IStrategy.sol\\\";\\nimport \\\"./interface/IUniversalLiquidator.sol\\\";\\nimport \\\"./inheritance/Controllable.sol\\\";\\n\\n/**\\n * @dev This contract receives rewards from strategies and is responsible for routing the reward's liquidation into\\n *      specific buyback tokens and profit tokens for the DAO.\\n */\\ncontract RewardForwarderV2 is Controllable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    address public constant iFARM = address(0xab0b2ddB9C7e440fAc8E140A89c0dbCBf2d7Bbff);\\n\\n    constructor(\\n        address _storage\\n    ) public Controllable(_storage) {}\\n\\n    function notifyFee(\\n        address _token,\\n        uint256 _profitSharingFee,\\n        uint256 _strategistFee,\\n        uint256 _platformFee\\n    ) external {\\n        _notifyFee(\\n            _token,\\n            _profitSharingFee,\\n            _strategistFee,\\n            _platformFee\\n        );\\n    }\\n\\n    function _notifyFee(\\n        address _token,\\n        uint256 _profitSharingFee,\\n        uint256 _strategistFee,\\n        uint256 _platformFee\\n    ) internal {\\n        address _controller = controller();\\n        address liquidator = IControllerV2(_controller).universalLiquidator();\\n\\n        uint totalTransferAmount = _profitSharingFee.add(_strategistFee).add(_platformFee);\\n        require(totalTransferAmount > 0, \\\"totalTransferAmount should not be 0\\\");\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), totalTransferAmount);\\n\\n        address _targetToken = IControllerV2(_controller).targetToken();\\n\\n        if (_token != _targetToken) {\\n            IERC20(_token).safeApprove(liquidator, 0);\\n            IERC20(_token).safeApprove(liquidator, _platformFee);\\n\\n            uint amountOutMin = 1;\\n\\n            if (_platformFee > 0) {\\n                IUniversalLiquidator(liquidator).swap(\\n                    _token,\\n                    _targetToken,\\n                    _platformFee,\\n                    amountOutMin,\\n                    IControllerV2(_controller).protocolFeeReceiver()\\n                );\\n            }\\n        } else {\\n            IERC20(_targetToken).safeTransfer(IControllerV2(_controller).protocolFeeReceiver(), _platformFee);\\n        }\\n\\n        if (_token != iFARM) {\\n            IERC20(_token).safeApprove(liquidator, 0);\\n            IERC20(_token).safeApprove(liquidator, _profitSharingFee.add(_strategistFee));\\n\\n            uint amountOutMin = 1;\\n\\n            if (_profitSharingFee > 0) {\\n                IUniversalLiquidator(liquidator).swap(\\n                    _token,\\n                    iFARM,\\n                    _profitSharingFee,\\n                    amountOutMin,\\n                    IControllerV2(_controller).profitSharingReceiver()\\n                );\\n            }\\n            if (_strategistFee > 0) {\\n                IUniversalLiquidator(liquidator).swap(\\n                    _token,\\n                    iFARM,\\n                    _strategistFee,\\n                    amountOutMin,\\n                    IStrategy(msg.sender).strategist()\\n                );\\n            }\\n        } else {\\n            if (_strategistFee > 0) {\\n                IERC20(iFARM).safeTransfer(IStrategy(msg.sender).strategist(), _strategistFee);\\n            }\\n            IERC20(iFARM).safeTransfer(IControllerV2(_controller).profitSharingReceiver(), _profitSharingFee);\\n        }\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_targetToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_profitSharingReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_universalLiquidator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nextImplementationDelay\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"AddedAddressToWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"AddedCodeToWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"implementationDelay\",\"type\":\"uint256\"}],\"name\":\"ConfirmNextImplementationDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformFeeNumerator\",\"type\":\"uint256\"}],\"name\":\"ConfirmPlatformFeeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitSharingNumerator\",\"type\":\"uint256\"}],\"name\":\"ConfirmProfitSharingChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strategistFeeNumerator\",\"type\":\"uint256\"}],\"name\":\"ConfirmStrategistFeeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"implementationDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validAtTimestamp\",\"type\":\"uint256\"}],\"name\":\"QueueNextImplementationDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformFeeNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validAtTimestamp\",\"type\":\"uint256\"}],\"name\":\"QueuePlatformFeeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitSharingNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validAtTimestamp\",\"type\":\"uint256\"}],\"name\":\"QueueProfitSharingChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strategistFeeNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validAtTimestamp\",\"type\":\"uint256\"}],\"name\":\"QueueStrategistFeeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"RemovedAddressFromWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"RemovedCodeFromWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSharePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSharePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SharePriceChangeLog\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOTAL_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"addCodeToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_worker\",\"type\":\"address\"}],\"name\":\"addHardWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"}],\"name\":\"addMultipleToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"codeWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmNextImplementationDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmSetPlatformFeeNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmSetProfitSharingNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmSetStrategistFeeNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"doHardWork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"getContractHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getPricePerFullShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"greyList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hardWorkers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextImplementationDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextPlatformFeeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextPlatformFeeNumeratorTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextProfitSharingNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextProfitSharingNumeratorTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextStrategistFeeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextStrategistFeeNumeratorTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"notifyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFeeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitSharingNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitSharingReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"removeCodeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_worker\",\"type\":\"address\"}],\"name\":\"removeHardWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"}],\"name\":\"removeMultipleFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"salvage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"salvageStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nextImplementationDelay\",\"type\":\"uint256\"}],\"name\":\"setNextImplementationDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_platformFeeNumerator\",\"type\":\"uint256\"}],\"name\":\"setPlatformFeeNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_profitSharingNumerator\",\"type\":\"uint256\"}],\"name\":\"setProfitSharingNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_profitSharingReceiver\",\"type\":\"address\"}],\"name\":\"setProfitSharingReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolFeeReceiver\",\"type\":\"address\"}],\"name\":\"setProtocolFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardForwarder\",\"type\":\"address\"}],\"name\":\"setRewardForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_store\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_strategistFeeNumerator\",\"type\":\"uint256\"}],\"name\":\"setStrategistFeeNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_targetToken\",\"type\":\"address\"}],\"name\":\"setTargetToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_universalLiquidator\",\"type\":\"address\"}],\"name\":\"setUniversalLiquidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"store\",\"outputs\":[{\"internalType\":\"contract Storage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategistFeeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tempNextImplementationDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tempNextImplementationDelayTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"universalLiquidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ControllerV2", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c95cbe4ca30055c787cb784be99d6a8494d0d1970000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f61900000000000000000000000039cc360806b385c96969ce9ff26c23476017f65200000000000000000000000055b4b48b96e9a54075ee2597ec2537b0fc41c5f700000000000000000000000066b169585b95d96fcd9f0d6982060c84a8b2b21f000000000000000000000000612cc8d1f3f4620cdc544ca60580110d81a4ba87000000000000000000000000000000000000000000000000000000000000a8c0", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}