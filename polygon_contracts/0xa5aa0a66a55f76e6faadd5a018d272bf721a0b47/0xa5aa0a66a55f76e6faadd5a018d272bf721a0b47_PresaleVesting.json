{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"ERC677/HasERC677TokenParent.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./IERC677Metadata.sol\\\";\\r\\n\\r\\ncontract HasERC677TokenParent is Ownable {\\r\\n    event ParentTokenUpdated(address from, address to);\\r\\n\\r\\n    IERC677Metadata public parentToken;\\r\\n\\r\\n    constructor(address token) Ownable(msg.sender) {\\r\\n        _setParentToken(token);\\r\\n    }\\r\\n\\r\\n    function setBits(address token) public onlyOwner {\\r\\n        _setParentToken(token);\\r\\n    }\\r\\n\\r\\n    function _setParentToken(address to) internal {\\r\\n        address from = address(parentToken);\\r\\n\\r\\n        require(from != address(to), \\\"HasERC677TokenParent: useless to update to same BITS token\\\");\\r\\n\\r\\n        parentToken = IERC677Metadata(to);\\r\\n\\r\\n        emit ParentTokenUpdated(from, to);\\r\\n\\r\\n        /* test the token */\\r\\n        parentToken.decimals();\\r\\n    }\\r\\n\\r\\n    modifier onlyParentParent() {\\r\\n        require(address(parentToken) == _msgSender(), \\\"HasERC677TokenParent: caller is not the BITS token\\\");\\r\\n        _;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"ERC677/IERC677.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\ninterface IERC677 is IERC20 {\\r\\n    /**\\r\\n     * @dev transfer token to a contract address with additional data if the recipient is a contact.\\r\\n     * @param recipient The address to transfer to.\\r\\n     * @param amount The amount to be transferred.\\r\\n     * @param data The extra data to be passed to the receiving contract.\\r\\n     */\\r\\n    function transferAndCall(\\r\\n        address recipient,\\r\\n        uint256 amount,\\r\\n        bytes memory data\\r\\n    ) external returns (bool success);\\r\\n\\r\\n    event TransferAndCall(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 value,\\r\\n        bytes data\\r\\n    );\\r\\n}\"\r\n    },\r\n    \"ERC677/IERC677Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"./IERC677.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\n\\r\\ninterface IERC677Metadata is IERC677, IERC20Metadata {}\"\r\n    },\r\n    \"contracts/LinearVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"../ERC677/HasERC677TokenParent.sol\\\";\\n\\n//Implement the Linearvesting of multiple users using only one contract.\\n\\ncontract PresaleVesting is HasERC677TokenParent {\\n    //Events\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event VestingBegin(\\n        uint256 startDate\\n    );\\n   \\n    event TokensReleased(\\n        uint256 indexed vestingId,\\n        address indexed beneficiary,\\n        uint256 amount\\n    );\\n\\n    event VestingCreated(\\n        uint256 indexed vestingId,\\n        address indexed beneficiary,\\n        uint256 amount,\\n        uint256 cliffDuration,\\n        uint256 duration,\\n        bool revocable\\n    );\\n\\n    event VestingRevoked(\\n        uint256 indexed vestingId,\\n        address indexed beneficiary,\\n        uint256 refund\\n    );\\n   \\n    event VestingTransfered(\\n        uint256 indexed vestingId,\\n        address indexed from,\\n        address indexed to\\n    );\\n\\n    struct Vesting {\\n        /** vesting id. */\\n        uint256 id;\\n        /** address that will receive the token. */\\n        address beneficiary;\\n        /** the amount of token to vest. */\\n        uint256 amount;\\n        /** the cliff time of the token vesting. */\\n        uint256 cliffDuration;\\n        /** the duration of the token vesting. */\\n        uint256 duration;\\n        /** whether the vesting can be revoked. */\\n        bool revocable;\\n        /** whether the vesting is revoked. */\\n        bool revoked;\\n        /** the amount of the token released. */\\n        uint256 released;\\n    }\\n\\n    /** currently locked tokens that are being used by all of the vestings */\\n    uint256 public totalSupply;\\n\\n    uint256 public startDate;\\n\\n    /** mapping to vesting list */\\n    mapping(uint256 => Vesting) public vestings;\\n\\n    /** mapping to list of address's owning vesting id */\\n    mapping(address => uint256[]) public owned;\\n\\n    /** always incrementing value to generate the next vesting id */\\n    uint256 _idCounter;\\n\\n    //Param BITS Token Address\\n    constructor(address bits) HasERC677TokenParent(bits) {}\\n  \\n  //========= FUNCTIONS ======\\n    /**\\n     * @notice Create a new vesting. \\n     *\\n     * @param beneficiary Address that will receive BITS tokens.\\n     * @param amount Amount of BITS to vest.\\n     * @param cliffDuration Cliff duration in seconds.\\n     * @param duration Vesting duration in seconds.\\n     */\\n    function vest(\\n        address beneficiary,\\n        uint256 amount,\\n        uint256 cliffDuration,\\n        uint256 duration,\\n        bool revocable\\n    ) external onlyOwner onlyWhenNotStarted {\\n        require(duration > 0, \\\"LinearVesting: Duration should be greater than zero\\\");\\n        _vest(beneficiary, amount, cliffDuration, duration, revocable);\\n    }\\n\\n\\n    function vestMultiple(\\n        address[] calldata beneficiaries,\\n        uint256[] calldata amounts,\\n        uint256 cliffDuration,\\n        uint256 duration,\\n        bool revocable\\n    ) external onlyOwner onlyWhenNotStarted {\\n        require(beneficiaries.length == amounts.length, \\\"Arrays are not the same length\\\");\\n        require(beneficiaries.length != 0, \\\"Must vest at least one person\\\");\\n        require(duration > 0, \\\"LinearVesting: Duration should be greater than zero\\\");\\n\\n        for (uint256 index = 0; index < beneficiaries.length; ++index) {\\n            _vest(beneficiaries[index], amounts[index], cliffDuration, duration, revocable);\\n        }\\n    }\\n\\n \\n    /**\\n     * Globally Begin the vesting of everyone at a specified timestamp.\\n     * @param timestamp Timestamp to use as a startDate.\\n     */\\n    function beginAt(uint256 timestamp) external onlyOwner {\\n        require(timestamp != 0, \\\"Oops! Timestamp cannot be zero\\\");\\n        _begin(timestamp);\\n    }\\n\\n    /**\\n     * @notice Release the tokens of a specified vesting.     \\n     * @param vestingId Vesting ID to release.\\n     */\\n    function release(uint256 vestingId) external returns (uint256) {\\n        return _release(_getVesting(vestingId, _msgSender()));\\n    }\\n\\n   //Release all unlocked tokens that has vested    \\n    function claim() external returns (uint256) {\\n        return _releaseAll(_msgSender());\\n    }\\n\\n    /**\\n     * Revoke a vesting.     \\n     * @param vestingId Vesting ID to revoke.\\n     * @param sendBack Should the revoked tokens stay in the contract or be sent back to the owner?\\n     */\\n    function revoke(uint256 vestingId, bool sendBack) public onlyOwner returns (uint256) {\\n        return _revoke(_getVesting(vestingId), sendBack);\\n    }\\n\\n      /**\\n     * @notice Transfer a vesting to another person.     \\n     * @param to Receiving address.\\n     * @param vestingId Vesting ID to transfer.\\n     */\\n    function transfer(address to, uint256 vestingId) external {\\n        _transfer(_getVesting(vestingId, _msgSender()), to);\\n    }\\n\\n    /**\\n     * @notice Send the available token back to the owner.\\n     */\\n    function emptyAvailableReserve() external onlyOwner {\\n        uint256 available = availableReserve();\\n        require(available > 0, \\\"LinearVesting:: no token available\\\");\\n\\n        parentToken.transfer(owner(), available);\\n    }\\n\\n    \\n    //============ VIEWS=========\\n    //Return User's Total Allocation\\n    function totalAllocation(address beneficiary) external view returns (uint256 balance) {\\n        uint256[] storage indexes = owned[beneficiary];\\n\\n        for (uint256 index = 0; index < indexes.length; ++index) {\\n            uint256 vestingId = indexes[index];\\n\\n            balance += userAllocation(vestingId);\\n        }\\n    }\\n\\n\\n    //Return Claimable Tokens\\n    function claimableTokens(address beneficiary) external view returns (uint256 balance) {\\n        uint256[] storage indexes = owned[beneficiary];\\n\\n        for (uint256 index = 0; index < indexes.length; ++index) {\\n            uint256 vestingId = indexes[index];\\n\\n            balance += releasableAmount(vestingId);\\n        }\\n    }\\n\\n    \\n    //Return Claimed Tokens\\n    function claimedTokens(address beneficiary) external view returns (uint256 balance) {\\n        uint256[] storage indexes = owned[beneficiary];\\n\\n        for (uint256 index = 0; index < indexes.length; ++index) {\\n            uint256 vestingId = indexes[index];\\n\\n            balance += claimedTokens(vestingId);\\n        }\\n    }\\n\\n  \\n    \\n    //Return user's unlocked tokens\\n    function unlockedTokens(address beneficiary) external view returns (uint256 balance) {\\n        uint256[] storage indexes = owned[beneficiary];\\n\\n        for (uint256 index = 0; index < indexes.length; ++index) {\\n            uint256 vestingId = indexes[index];\\n\\n            balance += vestedAmount(vestingId);\\n        }\\n    }\\n\\n   //======= MUTATIVE VIEWS ========\\n   /**\\n     * @notice Get the current reserve (or balance) of the contract in BITS.\\n     * @return The balance of BITS this contract has.\\n     */\\n    function reserve() public view returns (uint256) {\\n        return parentToken.balanceOf(address(this));\\n    }\\n\\n    //return The number of BITS that can be used to create anothBISTbitser vesting.\\n    function availableReserve() public view returns (uint256) {\\n        return reserve() - totalSupply;\\n    }\\n\\n  //Return Name assigned to vested tokens\\n  function name() external pure returns (string memory) {\\n        return \\\"vested BitStarters\\\";\\n    }\\n\\n    function symbol() external pure returns (string memory) {\\n        return \\\"vBITS\\\";\\n    }\\n\\n    //Get the number of vesting for an address.\\n    function ownedCount(address beneficiary) public view returns (uint256) {\\n        return owned[beneficiary].length;\\n    }\\n\\n   //====== FUNCTIONS Internal Logic =======\\n   \\n     //Begin the vesting for everyone at a specified timeStamp\\n    function _begin(uint256 timestamp) internal onlyWhenNotStarted {\\n        startDate = timestamp;\\n\\n        emit VestingBegin(startDate);\\n    }\\n\\n    // Create a Vesting\\n    function _vest(\\n        address beneficiary,\\n        uint256 amount,\\n        uint256 cliffDuration,\\n        uint256 duration,\\n        bool revocable\\n    ) internal {\\n        require(beneficiary != address(0), \\\"LinearVesting: beneficiary is the zero address\\\");\\n        require(amount > 0, \\\"LinearVesting: amount is 0\\\");\\n        require(availableReserve() >= amount, \\\"LinearVesting: available reserve is not enough\\\");\\n\\n        uint256 vestingId = _idCounter++; /* post-increment */\\n\\n        // prettier-ignore\\n        vestings[vestingId] = Vesting({\\n            id: vestingId,\\n            beneficiary: beneficiary,\\n            amount: amount,\\n            cliffDuration: cliffDuration,\\n            duration: duration,\\n            revocable: revocable,\\n            revoked: false,\\n            released: 0\\n        });\\n\\n        _addOwnership(beneficiary, vestingId);\\n\\n        totalSupply += amount;\\n\\n        emit VestingCreated(vestingId, beneficiary, amount, cliffDuration, duration, revocable);\\n        emit Transfer(address(0), beneficiary, amount);\\n    }\\n\\n\\n    //Transfer a vesting to another address.\\n    function _transfer(Vesting storage vesting, address to) internal {\\n        address from = vesting.beneficiary;\\n\\n        require(from != to, \\\"LinearVesting:: cannot transfer to itself\\\");\\n        require(to != address(0), \\\"LinearVesting: target is the zero address\\\");\\n\\n        _removeOwnership(from, vesting.id);\\n        _addOwnership(to, vesting.id);\\n\\n        vesting.beneficiary = to;\\n\\n        emit VestingTransfered(vesting.id, from, to);\\n        emit Transfer(from, to, _balanceOfVesting(vesting));\\n    }\\n\\n\\n    // Revoke a vesting and send the extra BITS back to the owner.\\n    function _revoke(Vesting storage vesting, bool sendBack) internal returns (uint256 refund) {\\n        require(vesting.revocable, \\\"LinearVesting: token not revocable\\\");\\n        require(!vesting.revoked, \\\"LinearVesting: token already revoked\\\");\\n\\n        uint256 unreleased = _releasableAmount(vesting);\\n        refund = vesting.amount - vesting.released - unreleased;\\n\\n        vesting.revoked = true;\\n        vesting.amount -= refund;\\n        totalSupply -= refund;\\n\\n        if (sendBack) {\\n            parentToken.transfer(owner(), refund);\\n        }\\n\\n        emit VestingRevoked(vesting.id, vesting.beneficiary, refund);\\n        emit Transfer(vesting.beneficiary, address(0), refund);\\n    }\\n\\n    //Internal implementation of the release() method.\\n    //The methods will fail if there is no tokens due.\\n    function _release(Vesting storage vesting) internal returns (uint256 unreleased) {\\n        unreleased = _doRelease(vesting);\\n        _checkAmount(unreleased);\\n    }\\n\\n\\n    // Internal implementation of the releaseAll() method.\\n    function _releaseAll(address beneficiary) internal returns (uint256 unreleased) {\\n        uint256[] storage indexes = owned[beneficiary];\\n\\n        for (uint256 index = 0; index < indexes.length; ++index) {\\n            uint256 vestingId = indexes[index];\\n            Vesting storage vesting = vestings[vestingId];\\n\\n            unreleased += _doRelease(vesting);\\n        }\\n\\n        _checkAmount(unreleased);\\n    }\\n\\n    /**\\n     * @dev Actually releasing the vestiong.\\n     * @dev This method will not fail. (aside from a lack of reserve, which should never happen!)\\n     */\\n    function _doRelease(Vesting storage vesting) internal returns (uint256 unreleased) {\\n        unreleased = _releasableAmount(vesting);\\n\\n        if (unreleased != 0) {\\n            parentToken.transfer(vesting.beneficiary, unreleased);\\n\\n            vesting.released += unreleased;\\n            totalSupply -= unreleased;\\n\\n            emit TokensReleased(vesting.id, vesting.beneficiary, unreleased);\\n            emit Transfer(vesting.beneficiary, address(0), unreleased);\\n        }\\n    }\\n\\n    /**\\n     * @dev Revert the transaction if the value is zero.\\n     */\\n    function _checkAmount(uint256 unreleased) internal pure {\\n        require(unreleased > 0, \\\"LinearVesting: no tokens are due\\\");\\n    }\\n \\n\\n //====== VIEWS INTERNAL LOGICS =========\\n\\n    /**\\n     * @notice Get the amount of tokens (userAllocation, vested, claimed,  )\\n     * @param vestingId Vesting ID to check.\\n     * @return The vested amount of the vestings.\\n     */ \\n  \\n    function userAllocation(uint256 vestingId) public view returns (uint256) {\\n        return _userAllocation(_getVesting(vestingId));\\n    }\\n    function vestedAmount(uint256 vestingId) public view returns (uint256) {\\n        return _vestedAmount(_getVesting(vestingId));\\n    }\\n\\n    function releasableAmount(uint256 vestingId) public view returns (uint256) {\\n        return _releasableAmount(_getVesting(vestingId));\\n    }\\n\\n    function balanceOfVesting(uint256 vestingId) public view returns (uint256) {\\n        return _balanceOfVesting(_getVesting(vestingId));\\n    }\\n    \\n    function claimedTokens(uint256 vestingId) public view returns (uint256) {\\n        return _claimedTokens(_getVesting(vestingId));\\n    }\\n\\n//=========== VIEW LOGIC COMPUTATION================================= \\n\\n    //Compute the vested amount(unlocked tokens)\\n    function _vestedAmount(Vesting memory vesting) internal view returns (uint256) {\\n        if (startDate == 0) {\\n            return 0;\\n        }\\n\\n        uint256 cliffEnd = startDate + vesting.cliffDuration;\\n\\n        if (block.timestamp < cliffEnd) {\\n            return 0;\\n        }\\n\\n        if ((block.timestamp >= cliffEnd + vesting.duration) || vesting.revoked) {\\n            return vesting.amount;\\n        }\\n\\n        return (vesting.amount * (block.timestamp - cliffEnd)) / vesting.duration;\\n    }\\n\\n    //Compute the releasable amount(claimable)\\n    function _releasableAmount(Vesting memory vesting) internal view returns (uint256) {\\n        return _vestedAmount(vesting) - vesting.released;\\n    }\\n\\n    //Compute balance(locked tokens)\\n    function _balanceOfVesting(Vesting storage vesting) internal view returns (uint256) {\\n        return vesting.amount - vesting.released;\\n    }\\n    \\n    //Compute total tokens\\n    function _userAllocation(Vesting storage vesting) internal view returns (uint256) {\\n        return vesting.amount;\\n    }\\n\\n    //Compute released tokens(claimed)\\n    function _claimedTokens(Vesting storage vesting) internal view returns (uint256) {\\n        return vesting.released;\\n    }\\n\\n    /**\\n     * @dev Get a vesting.\\n     * @return vesting struct stored in the storage.\\n     */\\n    function _getVesting(uint256 vestingId) internal view returns (Vesting storage vesting) {\\n        vesting = vestings[vestingId];\\n        require(vesting.beneficiary != address(0), \\\"LinearVesting: vesting does not exists\\\");\\n    }\\n\\n    /**\\n     * @dev Get a vesting and make sure it is from the right beneficiary.\\n     * @param beneficiary Address to get it from.\\n     * @return vesting struct stored in the storage.\\n     */\\n    function _getVesting(uint256 vestingId, address beneficiary) internal view returns (Vesting storage vesting) {\\n        vesting = _getVesting(vestingId);\\n        require(vesting.beneficiary == beneficiary, \\\"LinearVesting: not the beneficiary\\\");\\n    }\\n\\n   //Test if an address is the beneficiary of a vesting.\\n    function isBeneficiary(uint256 vestingId, address account) public view returns (bool) {\\n        return _isBeneficiary(_getVesting(vestingId), account);\\n    }\\n\\n    /**\\n     * @dev Test if the vesting's beneficiary is the same as the specified address.\\n     */\\n    function _isBeneficiary(Vesting storage vesting, address account) internal view returns (bool) {\\n        return vesting.beneficiary == account;\\n    }\\n\\n    //Test if an address has at least one vesting.\\n    function isVested(address beneficiary) public view returns (bool) {\\n        return ownedCount(beneficiary) != 0;\\n    }\\n\\n\\n    /**\\n     * @dev Remove the vesting from the ownership mapping.\\n     */\\n    function _removeOwnership(address account, uint256 vestingId) internal returns (bool) {\\n        uint256[] storage indexes = owned[account];\\n\\n        (bool found, uint256 index) = _indexOf(indexes, vestingId);\\n        if (!found) {\\n            return false;\\n        }\\n\\n        if (indexes.length <= 1) {\\n            delete owned[account];\\n        } else {\\n            indexes[index] = indexes[indexes.length - 1];\\n            indexes.pop();\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Add the vesting ID to the ownership mapping.\\n     */\\n    function _addOwnership(address account, uint256 vestingId) internal {\\n        owned[account].push(vestingId);\\n    }\\n\\n    /**\\n     * @dev Find the index of a value in an array.\\n     * @param array Haystack.\\n     * @param value Needle.\\n     * @return If the first value is `true`, that mean that the needle has been found and the index is stored in the second value. Else if `false`, the value isn't in the array and the second value should be discarded.\\n     */\\n    function _indexOf(uint256[] storage array, uint256 value) internal view returns (bool, uint256) {\\n        for (uint256 index = 0; index < array.length; ++index) {\\n            if (array[index] == value) {\\n                return (true, index);\\n            }\\n        }\\n\\n        return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Revert if the start date is not zero.\\n     */\\n    modifier onlyWhenNotStarted() {\\n        require(startDate == 0, \\\"LinearVesting: already started\\\");\\n        _;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bits\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ParentTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vestingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"}],\"name\":\"VestingBegin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vestingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"}],\"name\":\"VestingCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vestingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refund\",\"type\":\"uint256\"}],\"name\":\"VestingRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vestingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"VestingTransfered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"availableReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vestingId\",\"type\":\"uint256\"}],\"name\":\"balanceOfVesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"beginAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"claimableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"claimedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vestingId\",\"type\":\"uint256\"}],\"name\":\"claimedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emptyAvailableReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vestingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBeneficiary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"isVested\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"ownedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parentToken\",\"outputs\":[{\"internalType\":\"contract IERC677Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vestingId\",\"type\":\"uint256\"}],\"name\":\"releasableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vestingId\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vestingId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sendBack\",\"type\":\"bool\"}],\"name\":\"revoke\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setBits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"totalAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vestingId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"unlockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vestingId\",\"type\":\"uint256\"}],\"name\":\"userAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"}],\"name\":\"vest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"beneficiaries\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"}],\"name\":\"vestMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vestingId\",\"type\":\"uint256\"}],\"name\":\"vestedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PresaleVesting", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005f5f7ca63a9d2c5200bc03ca3335a975d8f771d9", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}