{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\ninterface IERC20Token {\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ncontract Lock30 {\r\n    struct StakingInfo {\r\n        address owner;\r\n        uint256 lockedAmount;\r\n        uint256 lockTime;\r\n        uint256 lastClaim;\r\n        uint256 nasmgPaidOutRewards;\r\n        uint256 diboPaidOutRewards;\r\n        uint256 diboInterestPerSecond;\r\n    }\r\n\r\n    IERC20Token private nasmgToken;\r\n    IERC20Token private diboToken;\r\n    uint256 public diboInterestForPeriod = 3000000000000000000;\r\n    uint256 public diboPriceKRW = 1250000000000000000000;\r\n    uint256 private nasmgInterestPerSecond = 4822530865; //formula: 10^18 * (interest/100) / lockPeriod\r\n    address public owner;\r\n    address[] private stakers;\r\n    uint256 public lockPeriod = 2592000; //in seconds\r\n    uint256 public totalValueLocked;\r\n\r\n    mapping(address => StakingInfo) public lockOf;\r\n\r\n    event Deposit(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 timestamp,\r\n        uint256 totalValueLocked\r\n    );\r\n    event Withdraw(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 timestamp,\r\n        uint256 totalValueLocked\r\n    );\r\n\r\n    constructor(address nasmg, address dibo) {\r\n        nasmgToken = IERC20Token(nasmg);\r\n        diboToken = IERC20Token(dibo);\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function setDiboInterest(uint256 _newInterest) public returns (bool) {\r\n        require(msg.sender == owner, \"You are not the owner of the contract\");\r\n        require(_newInterest > 0, \"Interest should be more than 0\");\r\n        diboInterestForPeriod = _newInterest;\r\n        return true;\r\n    }\r\n\r\n    function setDiboPriceKRW(uint256 _newPrice) public returns (bool) {\r\n        require(msg.sender == owner, \"You are not the owner of the contract\");\r\n        require(_newPrice > 0, \"Interest should be more than 0\");\r\n        diboPriceKRW = _newPrice;\r\n        return true;\r\n    }\r\n\r\n    function setNasmgInterest(uint256 _newInterest) public returns (bool) {\r\n        require(msg.sender == owner, \"You are not the owner of the contract\");\r\n        require(_newInterest > 0, \"Interest should be more than 0\");\r\n        nasmgInterestPerSecond = _newInterest;\r\n        return true;\r\n    }\r\n\r\n    function lock(uint256 _amount, uint256 _diboInterestPerSecond) public {\r\n        require(\r\n            lockOf[msg.sender].lockedAmount == 0,\r\n            \"You have already staked\"\r\n        );\r\n        require(_amount >= 1e18, \"You cannot stake nothing\");\r\n        lockOf[msg.sender] = StakingInfo(\r\n            msg.sender,\r\n            _amount,\r\n            block.timestamp,\r\n            block.timestamp,\r\n            lockOf[msg.sender].nasmgPaidOutRewards,\r\n            lockOf[msg.sender].diboPaidOutRewards,\r\n            _diboInterestPerSecond\r\n        );\r\n        nasmgToken.transferFrom(msg.sender, address(this), _amount);\r\n        totalValueLocked = totalValueLocked + _amount;\r\n        emit Deposit(msg.sender, _amount, block.timestamp, totalValueLocked);\r\n    }\r\n\r\n    function withdraw() public {\r\n        require(\r\n            lockOf[msg.sender].lockedAmount > 0,\r\n            \"You are not staking anything\"\r\n        );\r\n        require(\r\n            block.timestamp >= lockOf[msg.sender].lockTime + lockPeriod,\r\n            \"Assets are still locked\"\r\n        );\r\n        uint256 reward = nasmgInterestPerSecond *\r\n            lockPeriod *\r\n            (lockOf[msg.sender].lockedAmount / 1e18);\r\n        nasmgToken.transferFrom(owner, msg.sender, reward);\r\n        lockOf[msg.sender].nasmgPaidOutRewards =\r\n            lockOf[msg.sender].nasmgPaidOutRewards +\r\n            reward;\r\n        uint256 diboPeriod = lockOf[msg.sender].lockTime +\r\n            lockPeriod -\r\n            lockOf[msg.sender].lastClaim;\r\n        uint256 diboReward = lockOf[msg.sender].diboInterestPerSecond *\r\n            diboPeriod;\r\n\r\n        if (diboReward > 0) {\r\n            diboToken.transferFrom(owner, msg.sender, diboReward);\r\n            lockOf[msg.sender].diboPaidOutRewards =\r\n                lockOf[msg.sender].diboPaidOutRewards +\r\n                diboReward;\r\n            lockOf[msg.sender].lastClaim = block.timestamp;\r\n        }\r\n        nasmgToken.transfer(msg.sender, lockOf[msg.sender].lockedAmount);\r\n        totalValueLocked = totalValueLocked - lockOf[msg.sender].lockedAmount;\r\n        emit Withdraw(\r\n            msg.sender,\r\n            lockOf[msg.sender].lockedAmount,\r\n            block.timestamp,\r\n            totalValueLocked\r\n        );\r\n        lockOf[msg.sender].lockedAmount = 0;\r\n    }\r\n\r\n    function claimDiboRewards() public {\r\n        require(claimableRewards() > 0, \"Nothing to claim\");\r\n        require(\r\n            lockOf[msg.sender].lockedAmount > 0,\r\n            \"You are not staking anything\"\r\n        );\r\n        uint256 period;\r\n        if (block.timestamp >= lockOf[msg.sender].lockTime + lockPeriod) {\r\n            period =\r\n                (lockOf[msg.sender].lockTime + lockPeriod) -\r\n                lockOf[msg.sender].lastClaim;\r\n            lockOf[msg.sender].lastClaim =\r\n                lockOf[msg.sender].lockTime +\r\n                lockPeriod;\r\n        } else {\r\n            period = block.timestamp - lockOf[msg.sender].lastClaim;\r\n            lockOf[msg.sender].lastClaim = block.timestamp;\r\n        }\r\n        uint256 reward = period * lockOf[msg.sender].diboInterestPerSecond;\r\n        diboToken.transferFrom(owner, msg.sender, reward);\r\n        lockOf[msg.sender].diboPaidOutRewards =\r\n            lockOf[msg.sender].diboPaidOutRewards +\r\n            reward;\r\n    }\r\n\r\n    function claimableRewards() public view returns (uint256) {\r\n        if (lockOf[msg.sender].lockedAmount > 0) {\r\n            uint256 period;\r\n            if (block.timestamp >= lockOf[msg.sender].lockTime + lockPeriod) {\r\n                period =\r\n                    (lockOf[msg.sender].lockTime + lockPeriod) -\r\n                    lockOf[msg.sender].lastClaim;\r\n            } else {\r\n                period = block.timestamp - lockOf[msg.sender].lastClaim;\r\n            }\r\n            uint256 claimableReward;\r\n            claimableReward = period * lockOf[msg.sender].diboInterestPerSecond;\r\n            return claimableReward;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nasmg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dibo\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalValueLocked\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalValueLocked\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimDiboRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"diboInterestForPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"diboPriceKRW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_diboInterestPerSecond\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nasmgPaidOutRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"diboPaidOutRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"diboInterestPerSecond\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newInterest\",\"type\":\"uint256\"}],\"name\":\"setDiboInterest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setDiboPriceKRW\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newInterest\",\"type\":\"uint256\"}],\"name\":\"setNasmgInterest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValueLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Lock30", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d247c2163d39263a1ab2391ad106c534aa3d2a48000000000000000000000000324fb8eae64918f14be44fac7e6d663b82228642", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ee8fa3afecb8841d2c740c6309f9bcec5cf6b2efa9321ba7c893216d6ad4e851"}