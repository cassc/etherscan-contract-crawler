{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ProjectRealNewWorld.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: encrypto.bite\\npragma solidity ^0.8.9;\\n\\ncontract HtgP {\\n    struct Campaign {\\n        string name;\\n        address owner;\\n        string title;\\n        string description;\\n        uint256 target;\\n        uint256 deadline;\\n        uint256 realAmountCollected;\\n        uint256 sumAmountCollected;\\n        string image;\\n        string typeOfCampaign;\\n        address[] donators;\\n        uint256[] donations;\\n        string[] comments;\\n        bool cashedOut;\\n    }\\n\\n    // Events\\n    event CampaignCreated(uint256 campaignId, address owner, string title);\\n    event DonationReceived(uint256 campaignId, address donor, uint256 amount);\\n    event CampaignWithdrawn(uint256 campaignId, address owner, uint256 amount);\\n    event ContractWithdrawn(address owner, uint256 amount);\\n    event CampaignExterminated(uint256 campaignId, address exterminator);\\n    event CommentLiked(uint256 campaignId, uint256 commentIndex, address liker);\\n    event ModeratorAdded(address moderator);\\n    event ModeratorRemoved(address moderator);\\n    event CampaignReported(uint256 campaignId, address reporter);\\n    event CampaignFlagged(uint256 campaignId);\\n\\n    mapping (uint256 => Campaign) public campaigns;\\n    uint256[] public activeCampaignIDs;\\n    uint256 public numberOfCampaigns = 0;\\n    \\n    address public contractOwner;\\n    uint256 public contractBalance = 0;\\n    \\n    // New data structures for \\\"like comment\\\" feature\\n    uint256 constant LIKE_COST = 0.0001 ether;\\n    mapping(uint256 => mapping(uint256 => mapping(address => bool))) public hasLiked;\\n    mapping(uint256 => mapping(uint256 => uint256)) public commentLikes;\\n     \\n    mapping(uint256 => mapping(address => uint256)) public individualReportAmounts; // Mapping to store individual report amounts for campaigns\\n    mapping(uint256 => address[]) public campaignReporters; // Mapping to store addresses of all reporters for a campaign\\n    mapping(uint256 => mapping(address => bool)) public hasReported;\\n    \\n    mapping(uint256 => mapping(address => string)) public reportReasons;\\n\\n    bool internal locked = false;\\n    modifier reentrancyGuard() {\\n        require(!locked, \\\"Reentrant call\\\");\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n\\n    constructor() {\\n        contractOwner = msg.sender;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == contractOwner, \\\"Only the contract owner can execute this\\\");\\n        _;\\n    }\\n\\n    modifier onlyModerator() {\\n        require(moderators[msg.sender], \\\"Only a moderator can execute this\\\");\\n        _;\\n    }\\n\\n    function createCampaign(string memory _name , string memory _title, string memory _description, uint256 _target, uint256 _deadline, string memory _image, string memory _type) public returns (uint256) {\\n        require(_deadline > block.timestamp, \\\"The deadline should be a date in the future\\\");\\n        Campaign storage campaign = campaigns[numberOfCampaigns];\\n        campaign.owner = msg.sender;\\n        campaign.name = _name;\\n        campaign.title = _title;\\n        campaign.description = _description;\\n        campaign.target = _target;\\n        campaign.deadline = _deadline;\\n        campaign.image = _image;\\n        campaign.typeOfCampaign = _type;\\n        campaign.realAmountCollected = 0;\\n        campaign.sumAmountCollected = 0;\\n        campaign.cashedOut = false;\\n        activeCampaignIDs.push(numberOfCampaigns);\\n        numberOfCampaigns++;\\n\\n        emit CampaignCreated(numberOfCampaigns-1, msg.sender, _title);\\n\\n        return numberOfCampaigns-1;\\n    }\\n\\n    function donateToCampaign(uint256 _id, string memory _comment) public payable {\\n        require(_id < numberOfCampaigns && campaigns[_id].owner != address(0) && msg.value >= 1 ether, \\\"Invalid campaign ID\\\");\\n        Campaign storage campaign = campaigns[_id];\\n        require(block.timestamp < campaign.deadline, \\\"Donation period for this campaign has ended\\\");\\n        campaign.comments.push(_comment);\\n        uint256 amount = msg.value;\\n        campaign.donators.push(msg.sender);\\n        campaign.donations.push(amount);\\n        campaign.realAmountCollected += amount;\\n        campaign.sumAmountCollected +=amount;\\n        emit DonationReceived(_id, msg.sender, amount);\\n    }\\n\\n    function getDonators(uint256 _id) view public returns (address[] memory, uint256[] memory, string[] memory) {\\n        return (campaigns[_id].donators, campaigns[_id].donations, campaigns[_id].comments);\\n    }\\n\\n    function getCampaigns() public view returns (Campaign[] memory) {\\n        Campaign[] memory allCampaigns = new Campaign[](numberOfCampaigns);\\n        for (uint256 i = 0; i < numberOfCampaigns; i++) {\\n            Campaign storage item = campaigns[i];\\n            allCampaigns[i] = item;\\n        }\\n        return allCampaigns;\\n    }\\n\\n    function getNumberOfActiveCampaigns() private view returns (uint256) {\\n        uint256 count = 0;\\n        for (uint256 i = 0; i < numberOfCampaigns; i++) {\\n            if (campaigns[i].owner != address(0)) {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n\\n    function withdrawDonationAfterEndTime(uint256 _id) public reentrancyGuard {\\n        Campaign storage campaign = campaigns[_id];\\n        require(msg.sender == campaign.owner, \\\"Only the campaign owner can withdraw\\\");\\n        require( campaign.target <= campaign.sumAmountCollected || block.timestamp > campaign.deadline, \\\"Cannot withdraw before reaching the target amount or before the campaign's end time\\\");\\n        \\n        uint256 fee = campaign.realAmountCollected * 7 / 100;\\n        uint256 amountToWithdraw = campaign.realAmountCollected - fee;\\n        \\n        contractBalance += fee;\\n        payable(campaign.owner).transfer(amountToWithdraw);\\n\\n        for (uint256 i = 0; i < activeCampaignIDs.length; i++) {\\n            if (activeCampaignIDs[i] == _id) {\\n                activeCampaignIDs[i] = activeCampaignIDs[activeCampaignIDs.length - 1];\\n                activeCampaignIDs.pop();\\n                break;\\n            }\\n        }\\n        \\n        campaign.realAmountCollected = 0;\\n\\n        campaign.cashedOut = true;\\n\\n        emit CampaignWithdrawn(_id, campaign.owner, amountToWithdraw);\\n    }\\n\\n    function withdraw() public reentrancyGuard {\\n        require(msg.sender == contractOwner, \\\"Only the contract owner can withdraw\\\");\\n        require(contractBalance > 0, \\\"No funds to withdraw\\\");\\n        uint256 amount = contractBalance;\\n        contractBalance = 0;\\n        payable(contractOwner).transfer(amount);\\n\\n        emit ContractWithdrawn(contractOwner, amount);\\n    }\\n\\n    function distributeReportFunds(uint256 _campaignId) internal {\\n        uint256 totalReportFunds = reportBalances[_campaignId];\\n        address[] memory reporters = campaignReporters[_campaignId];\\n\\n        for (uint256 i = 0; i < reporters.length; i++) {\\n            address reporter = reporters[i];\\n            uint256 refundAmount = individualReportAmounts[_campaignId][reporter];\\n\\n            if (refundAmount > 0 && totalReportFunds >= refundAmount) {\\n                payable(reporter).transfer(refundAmount);\\n                totalReportFunds -= refundAmount;\\n\\n                // Reset the individual report amount for the reporter\\n                individualReportAmounts[_campaignId][reporter] = 0;\\n            }\\n        }\\n\\n        // Reset the total report balance for the campaign\\n        reportBalances[_campaignId] = 0;\\n    }\\n\\n    function exterminateCampaign(uint256 _id) public onlyOwner {\\n        Campaign storage toDelete = campaigns[_id];\\n        uint256 fundsToDistribute = toDelete.realAmountCollected;\\n\\n        delete campaigns[_id];\\n        for (uint256 i = 0; i < activeCampaignIDs.length; i++) {\\n            if (activeCampaignIDs[i] == _id) {\\n                activeCampaignIDs[i] = activeCampaignIDs[activeCampaignIDs.length - 1];\\n                activeCampaignIDs.pop();\\n                break;\\n            }\\n        }\\n\\n        // Distribute report funds\\n        distributeReportFunds(_id);\\n\\n        uint256 splitAmount = activeCampaignIDs.length > 0 ? fundsToDistribute / activeCampaignIDs.length : 0;\\n        uint256 totalDistributed = 0;\\n        \\n        for (uint256 i = 0; i < activeCampaignIDs.length; i++) {\\n            campaigns[activeCampaignIDs[i]].realAmountCollected += splitAmount;\\n            totalDistributed += splitAmount;\\n        }\\n        \\n        uint256 leftover = fundsToDistribute - totalDistributed;\\n        contractBalance += leftover;\\n\\n        emit CampaignExterminated(_id, msg.sender);\\n    }\\n\\n    mapping(address => bool) public moderators; // Mapping to check if an address is a moderator\\n    mapping(uint256 => uint256) public reportBalances; // Mapping to store report balances for campaigns\\n    mapping(uint256 => uint256) public reportCounts; // Mapping to store report counts for campaigns\\n    uint256 constant REPORT_COST = 5 ether; // Cost to report a campaign\\n\\n    function addModerator(address _moderator) public onlyOwner {\\n        moderators[_moderator] = true;\\n        emit ModeratorAdded(_moderator);\\n    }\\n\\n    function removeModerator(address _moderator) public onlyOwner {\\n            moderators[_moderator] = false;\\n            emit ModeratorRemoved(_moderator);\\n        }\\n\\n    function reportCampaign(uint256 _campaignId, string memory _reason) public payable {\\n        require(msg.value >= REPORT_COST, \\\"Insufficient report fee\\\");\\n        require(!hasReported[_campaignId][msg.sender], \\\"You have already reported this campaign\\\");\\n        \\n        hasReported[_campaignId][msg.sender] = true;\\n        \\n        if(individualReportAmounts[_campaignId][msg.sender] == 0) {\\n            campaignReporters[_campaignId].push(msg.sender);\\n        }\\n\\n        individualReportAmounts[_campaignId][msg.sender] += msg.value;\\n        reportBalances[_campaignId] += msg.value;\\n        reportCounts[_campaignId]++;\\n\\n        emit CampaignReported(_campaignId, msg.sender);\\n\\n        if(reportCounts[_campaignId] > 60) {\\n            flagCampaign(_campaignId);\\n        }\\n\\n        reportReasons[_campaignId][msg.sender] = _reason;\\n    }\\n\\n    function flagCampaign(uint256 _campaignId) public onlyModerator {\\n        emit CampaignFlagged(_campaignId);\\n    }\\n\\n    function returnFundsToDonators(uint256 _campaignId) public onlyModerator{\\n        require(msg.sender == campaigns[_campaignId].owner, \\\"Only the campaign owner\\\");\\n        \\n        for (uint256 i = 0; i < campaigns[_campaignId].donators.length; i++) {\\n            payable(campaigns[_campaignId].donators[i]).transfer(campaigns[_campaignId].donations[i]);\\n        }\\n        \\n        distributeReportFunds(_campaignId);\\n\\n        campaigns[_campaignId].realAmountCollected = 0;\\n    }\\n\\n    function likeComment(uint256 _campaignId, uint256 _commentIndex) public payable {\\n        require(msg.value >= LIKE_COST, \\\"You must send 0.0001 ETH to like a comment\\\");\\n        require(!hasLiked[_campaignId][_commentIndex][msg.sender], \\\"You've already liked this comment\\\");\\n\\n        hasLiked[_campaignId][_commentIndex][msg.sender] = true;\\n        commentLikes[_campaignId][_commentIndex]++;\\n\\n        emit CommentLiked(_campaignId, _commentIndex, msg.sender);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"}],\"name\":\"CampaignCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"exterminator\",\"type\":\"address\"}],\"name\":\"CampaignExterminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"}],\"name\":\"CampaignFlagged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"}],\"name\":\"CampaignReported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CampaignWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commentIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liker\",\"type\":\"address\"}],\"name\":\"CommentLiked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ContractWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DonationReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"moderator\",\"type\":\"address\"}],\"name\":\"ModeratorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"moderator\",\"type\":\"address\"}],\"name\":\"ModeratorRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeCampaignIDs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_moderator\",\"type\":\"address\"}],\"name\":\"addModerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"campaignReporters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"campaigns\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"realAmountCollected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sumAmountCollected\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"typeOfCampaign\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"cashedOut\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"commentLikes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_type\",\"type\":\"string\"}],\"name\":\"createCampaign\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_comment\",\"type\":\"string\"}],\"name\":\"donateToCampaign\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"exterminateCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"}],\"name\":\"flagCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCampaigns\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"realAmountCollected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sumAmountCollected\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"typeOfCampaign\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"donators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"donations\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"comments\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"cashedOut\",\"type\":\"bool\"}],\"internalType\":\"struct HtgP.Campaign[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getDonators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasLiked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasReported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"individualReportAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commentIndex\",\"type\":\"uint256\"}],\"name\":\"likeComment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"moderators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfCampaigns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_moderator\",\"type\":\"address\"}],\"name\":\"removeModerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reportBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"reportCampaign\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reportCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reportReasons\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_campaignId\",\"type\":\"uint256\"}],\"name\":\"returnFundsToDonators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"withdrawDonationAfterEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HtgP", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}