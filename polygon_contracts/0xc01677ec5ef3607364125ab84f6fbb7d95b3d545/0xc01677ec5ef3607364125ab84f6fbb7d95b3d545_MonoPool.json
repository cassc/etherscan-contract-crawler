{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lib/swap-pool/src/MonoPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport { SafeTransferLib } from \\\"solady/utils/SafeTransferLib.sol\\\";\\nimport { SafeCastLib } from \\\"solady/utils/SafeCastLib.sol\\\";\\nimport { ERC20 } from \\\"solady/tokens/ERC20.sol\\\";\\nimport { Pool } from \\\"./libs/PoolLib.sol\\\";\\nimport { Accounter } from \\\"./libs/AccounterLib.sol\\\";\\nimport { Token } from \\\"./libs/TokenLib.sol\\\";\\nimport { BPS } from \\\"./libs/SwapLib.sol\\\";\\nimport { Ops } from \\\"./Ops.sol\\\";\\n\\nimport { ReentrancyGuard } from \\\"./utils/ReentrancyGuard.sol\\\";\\nimport { DecoderLib } from \\\"./encoder/DecoderLib.sol\\\";\\n\\n/// @title MonoPool\\n/// @notice Same as the original MegaTokenPool, but with a single ERC_20 base token (useful for project that want a pool\\n/// for their internal swap)\\n/// @author KONFeature <https://github.com/KONFeature>\\n/// @author Inspired from (https://github.com/Philogy/singleton-swapper/blob/main/src/MegaPool.sol) by Phylogy\\ncontract MonoPool is ReentrancyGuard {\\n    using SafeTransferLib for address;\\n    using SafeCastLib for uint256;\\n    using DecoderLib for uint256;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 Constant's                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @dev The max swap fee (5%)\\n    uint256 private constant MAX_PROTOCOL_FEE = 500;\\n\\n    /// @dev The token state to handle reserves & protocol fees\\n    struct TokenState {\\n        uint128 totalReserves;\\n        uint128 protocolFees;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                               Custom error's                               */\\n    /* -------------------------------------------------------------------------- */\\n\\n    error InvalidOp(uint256 op);\\n    error LeftOverDelta();\\n    error DeadlineExpired();\\n    error NegativeSend();\\n    error NegativeReceive();\\n    error AmountOutsideBounds();\\n    error NotFeeReceiver();\\n    error Swap0Amount();\\n\\n    /// @dev 'bytes4(keccak256(\\\"Swap0Amount()\\\"))'\\n    uint256 private constant _SWAP_0_AMOUNT_SELECTOR = 0x5509f2e4;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   Event's                                  */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @dev Event emitted after a swap\\n    event Swap(bool zeroForOne, uint256 amountIn);\\n\\n    /// @dev Event emitted after a liquidity update (addition or suppression)\\n    event LiquidityUpdate(address indexed provider, int256 amount0, int256 amount1);\\n\\n    /// @dev Event emitted after a protocol fee update\\n    event ProtocolFeeUpdate(address feesColector, uint256 protocolFee);\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   Storage                                  */\\n    /* -------------------------------------------------------------------------- */\\n\\n    // slither-disable-start naming-convention\\n\\n    /// @dev The token's we will use for the pool\\n    Token private immutable TOKEN_0;\\n    Token private immutable TOKEN_1;\\n\\n    /// @dev The fee that will be taken from each swaps\\n    uint256 private immutable FEE_BPS;\\n\\n    // slither-disable-end naming-convention\\n\\n    /// @dev The fee that will be taken from each swaps\\n    uint256 private protocolFee;\\n\\n    /// @dev The receiver for the swap fees\\n    address private feeReceiver;\\n\\n    /// @dev The pool managed by this contract\\n    Pool private pool;\\n\\n    /// @dev The current token state's\\n    TokenState private token0State;\\n    TokenState private token1State;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 Constructor                                */\\n    /* -------------------------------------------------------------------------- */\\n\\n    constructor(address token0, address token1, uint256 feeBps, address _feeReceiver, uint256 _protocolFee) payable {\\n        require(feeBps < BPS);\\n        require(_protocolFee < MAX_PROTOCOL_FEE);\\n        // We can only have one 0 address (representing native pool)\\n        require(token0 != address(0) || token1 != address(0));\\n\\n        // If no fees receiver passed, pass 0 arguments\\n        if (_feeReceiver == address(0)) {\\n            require(_protocolFee == 0);\\n        }\\n\\n        // Save base pool info's\\n        FEE_BPS = feeBps;\\n        TOKEN_0 = Token.wrap(token0);\\n        TOKEN_1 = Token.wrap(token1);\\n\\n        // Save info's about protocol receiver\\n        feeReceiver = _feeReceiver;\\n        protocolFee = _protocolFee;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                           External write method's                          */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @notice Update the fee receiver and the fee amount\\n    /// @dev Only the current fee receiver can update the fee receiver and the amount\\n    /// @dev The protocol can decide to stop receiving fees, by doing so he need to send the 0 address & 0 protocol fees\\n    /// @param _feeReceiver The new fee receiver\\n    /// @param _protocolFee The new fee amount per thousand\\n    function updateFeeReceiver(address _feeReceiver, uint256 _protocolFee) external {\\n        if (feeReceiver != msg.sender) revert NotFeeReceiver();\\n\\n        require(_protocolFee < MAX_PROTOCOL_FEE);\\n\\n        if (_feeReceiver == address(0)) {\\n            require(_protocolFee == 0);\\n        }\\n\\n        feeReceiver = _feeReceiver;\\n        protocolFee = _protocolFee;\\n\\n        // Emit event\\n        emit ProtocolFeeUpdate(_feeReceiver, _protocolFee);\\n    }\\n\\n    /**\\n     * @notice Execute a program of operations on pools. The `program` is a serialized list of operations, encoded in a\\n     * specific format.\\n     * @dev This function uses a non-ABI encoding to ensure a custom set of operations, each taking on a different\\n     * amount of data while keeping calldata size minimal. It is not reentrant.\\n     * @param program Serialized list of operations, with each operation consisting of an 8-bit operation specifier and\\n     * parameters. The structure is as follows:\\n     *  For every operation:\\n     *    1 byte:  8-bit operation (4-bits operation id and 4-bits flags)\\n     *    n bytes: opcode data\\n     * Refer to the function documentation for details on individual operations.\\n     */\\n    function execute(bytes calldata program) external payable nonReentrant {\\n        (uint256 ptr, uint256 endPtr) = _getPc(program);\\n\\n        // Initialize the accounter\\n        Accounter memory accounter = Accounter(0, 0);\\n\\n        // Interpret each operations\\n        uint256 op;\\n        while (ptr < endPtr) {\\n            (ptr, op) = ptr.readUint8();\\n            ptr = _interpretOp(accounter, ptr, op);\\n        }\\n\\n        // If there are any leftover deltas, revert\\n        if (accounter.token0Change != 0 || accounter.token1Change != 0) revert LeftOverDelta();\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                           Internal write method's                          */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @notice Interpret an `op` from a programm encoded in a `ptr`, saving accounting changes in the `accounter`\\n    function _interpretOp(Accounter memory accounter, uint256 ptr, uint256 op) internal returns (uint256) {\\n        // Extract the operation\\n        uint256 mop = op & Ops.MASK_OP;\\n\\n        if (mop == Ops.SWAP) {\\n            return _swap(accounter, ptr, op);\\n        }\\n\\n        // Send & Receive ALL op's\\n        if (mop == Ops.RECEIVE_ALL) {\\n            return _receiveAll(accounter, ptr, op);\\n        }\\n        if (mop == Ops.SEND_ALL) {\\n            return _sendAll(accounter, ptr, op);\\n        }\\n\\n        // Send & Receive op's\\n        if (mop == Ops.RECEIVE) {\\n            return _receive(accounter, ptr);\\n        }\\n        if (mop == Ops.SEND) {\\n            return _send(accounter, ptr);\\n        }\\n\\n        // Permit helper's\\n        if (mop == Ops.PERMIT_WITHDRAW_VIA_SIG) {\\n            return _permitViaSig(ptr);\\n        }\\n\\n        // Add & Remove liquidity op's\\n        if (mop == Ops.ADD_LIQ) {\\n            return _addLiquidity(accounter, ptr);\\n        }\\n        if (mop == Ops.RM_LIQ) {\\n            return _removeLiquidity(accounter, ptr);\\n        }\\n\\n        // Claim fees op's\\n        if (mop == Ops.CLAIM_ALL_FEES) {\\n            return _claimFees(accounter, ptr);\\n        }\\n\\n        // Revert cause of an invalid OP\\n        revert InvalidOp(op);\\n    }\\n\\n    /// @notice Perform a swap operation\\n    function _swap(Accounter memory accounter, uint256 ptr, uint256 op) internal returns (uint256) {\\n        uint256 amount;\\n\\n        bool zeroForOne = (op & Ops.SWAP_DIR) != 0;\\n        (ptr, amount) = ptr.readUint128();\\n\\n        // If we got a deadline, ensure we didn't go through it\\n        if ((op & Ops.SWAP_DEADLINE) != 0) {\\n            uint256 deadline;\\n            (ptr, deadline) = ptr.readUint48();\\n            if (deadline < block.timestamp) revert DeadlineExpired();\\n        }\\n\\n        // If we got a swap fee, deduce it from the amount to swap\\n        uint256 swapFee;\\n        unchecked {\\n            swapFee = (amount * protocolFee) / BPS;\\n            // Decrease the amount of the fees we will take\\n            amount = amount - swapFee;\\n        }\\n\\n        // Get the deltas\\n        int256 delta0;\\n        int256 delta1;\\n\\n        // Perform the swap and compute the delta\\n        (delta0, delta1) = pool.swap(zeroForOne, amount, FEE_BPS);\\n\\n        // If we got either of one to 0, revert cause of swapping 0 amount\\n        assembly {\\n            if or(iszero(delta0), iszero(delta1)) {\\n                mstore(0x00, _SWAP_0_AMOUNT_SELECTOR)\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n\\n        // Emit the swap event\\n        emit Swap(zeroForOne, amount);\\n\\n        // Then register the changes (depending on the direction, add the swap fees)\\n        // We can perform all of this stuff in an uncheck block since all the value has been checked before\\n        // If he swap fee cause an overflow, it would be triggered before with the swap amount directly\\n        unchecked {\\n            if (zeroForOne && swapFee != 0) {\\n                accounter.accountChange(delta0 + swapFee.toInt256(), delta1);\\n                // Save protocol fee\\n                token0State.protocolFees = token0State.protocolFees + swapFee.toUint128();\\n            } else if (swapFee != 0) {\\n                accounter.accountChange(delta0, delta1 + swapFee.toInt256());\\n                // Save protocol fee\\n                token1State.protocolFees = token1State.protocolFees + swapFee.toUint128();\\n            } else {\\n                accounter.accountChange(delta0, delta1);\\n            }\\n        }\\n\\n        return ptr;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                        Token sending / pulling op's                        */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @notice Perform the receive operation\\n    function _receive(Accounter memory accounter, uint256 ptr) internal returns (uint256) {\\n        // Get the right token depending on the input\\n        Token token;\\n        TokenState storage tokenState;\\n        (ptr, token, tokenState,) = _getTokenFromBoolInPtr(ptr);\\n\\n        // Get the amount\\n        uint256 amount;\\n        (ptr, amount) = ptr.readUint128();\\n\\n        // Perform the transfer\\n        token.transferFromSender(address(this), amount);\\n\\n        // Mark the reception state\\n        _accountReceived(accounter, tokenState, token, amount);\\n\\n        return ptr;\\n    }\\n\\n    /// @notice Perform the send operation\\n    function _send(Accounter memory accounter, uint256 ptr) internal returns (uint256) {\\n        // Get address & token state\\n        Token token;\\n        TokenState storage tokenState;\\n        bool isToken0;\\n        (ptr, token, tokenState, isToken0) = _getTokenFromBoolInPtr(ptr);\\n\\n        // Get receiver & amount\\n        address to;\\n        uint256 amount;\\n        (ptr, to) = ptr.readAddress();\\n        (ptr, amount) = ptr.readUint128();\\n\\n        // Register the account changes\\n        accounter.accountChange(isToken0, amount.toInt256());\\n        tokenState.totalReserves = tokenState.totalReserves - amount.toUint128();\\n\\n        // Simply transfer the tokens\\n        token.transfer(to, amount);\\n\\n        return ptr;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                      Token sending / pulling ALL op's                      */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @notice Perform the send all operation\\n    function _sendAll(Accounter memory accounter, uint256 ptr, uint256 op) internal returns (uint256) {\\n        // Get the right token depending on the input\\n        Token token;\\n        TokenState storage tokenState;\\n        bool isToken0;\\n        (ptr, token, tokenState, isToken0) = _getTokenFromBoolInPtr(ptr);\\n\\n        // Get the delta for the current accounting\\n        int256 delta = accounter.resetChange(isToken0);\\n        if (delta > 0) revert NegativeSend();\\n\\n        // Get the limits\\n        uint256 minSend = 0;\\n        uint256 maxSend = type(uint128).max;\\n\\n        if (op & Ops.ALL_MIN_BOUND != 0) (ptr, minSend) = ptr.readUint128();\\n        if (op & Ops.ALL_MAX_BOUND != 0) (ptr, maxSend) = ptr.readUint128();\\n\\n        uint256 amount = uint256(-delta);\\n        if (amount < minSend || amount > maxSend) revert AmountOutsideBounds();\\n\\n        // Get the recipient of the transfer\\n        address to;\\n        (ptr, to) = ptr.readAddress();\\n\\n        // Decrease the total reserve\\n        tokenState.totalReserves = tokenState.totalReserves - amount.toUint128();\\n\\n        // Simply transfer the tokens\\n        token.transfer(to, amount);\\n\\n        return ptr;\\n    }\\n\\n    /// @notice Perform the receive all operation\\n    function _receiveAll(Accounter memory accounter, uint256 ptr, uint256 op) internal returns (uint256) {\\n        // Get the right token depending on the input\\n        Token token;\\n        TokenState storage tokenState;\\n        bool isToken0;\\n        (ptr, token, tokenState, isToken0) = _getTokenFromBoolInPtr(ptr);\\n\\n        // Get the limits\\n        uint256 minReceive = 0;\\n        uint256 maxReceive = type(uint128).max;\\n\\n        if (op & Ops.ALL_MIN_BOUND != 0) (ptr, minReceive) = ptr.readUint128();\\n        if (op & Ops.ALL_MAX_BOUND != 0) (ptr, maxReceive) = ptr.readUint128();\\n\\n        // Get the delta for the current accounting\\n        int256 delta = accounter.getChange(isToken0);\\n        if (delta < 0) revert NegativeReceive();\\n\\n        // Get the amount to receive\\n        uint256 amount = uint256(delta);\\n        if (amount < minReceive || amount > maxReceive) revert AmountOutsideBounds();\\n\\n        // Perform the transfer\\n        token.transferFromSender(address(this), amount);\\n\\n        // Mark the reception state\\n        _accountReceived(accounter, tokenState, token, amount);\\n\\n        return ptr;\\n    }\\n\\n    /// @dev Function called after we received token from an account, update our total reserve and the account changes\\n    function _accountReceived(\\n        Accounter memory accounter,\\n        TokenState storage tokenState,\\n        Token token,\\n        uint256 targetAmount\\n    )\\n        internal\\n    {\\n        uint256 directBalance = token.selfBalance();\\n        uint256 totalReceived = directBalance - tokenState.totalReserves;\\n\\n        // If we got more than the target amount, add the overflow as protocol fees\\n        if (totalReceived > targetAmount) {\\n            uint256 overflow = totalReceived - targetAmount;\\n            tokenState.protocolFees += overflow.toUint128();\\n            totalReceived = targetAmount;\\n        }\\n\\n        // Register the change for either token 0 or 1 (based on the equality check)\\n        accounter.accountChange(token == TOKEN_0, -totalReceived.toInt256());\\n        // Increase the total reservices for this token state\\n        tokenState.totalReserves = directBalance.toUint128();\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                           Liquidity specific op's                          */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @notice Perform the add liquidity operation\\n    function _addLiquidity(Accounter memory accounter, uint256 ptr) internal returns (uint256) {\\n        uint256 maxAmount0;\\n        uint256 maxAmount1;\\n        (ptr, maxAmount0) = ptr.readUint128();\\n        (ptr, maxAmount1) = ptr.readUint128();\\n\\n        // Add the liquidity to the pool\\n        (int256 delta0, int256 delta1) = pool.addLiquidity(msg.sender, maxAmount0, maxAmount1);\\n\\n        // Register the account changes\\n        accounter.accountChange(delta0, delta1);\\n\\n        // Send the event\\n        emit LiquidityUpdate(msg.sender, delta0, delta1);\\n\\n        return ptr;\\n    }\\n\\n    /// @notice Perform the remove liquidity operation\\n    function _removeLiquidity(Accounter memory accounter, uint256 ptr) internal returns (uint256) {\\n        uint256 liq;\\n        (ptr, liq) = ptr.readUint256();\\n\\n        // Remove the liquidity from the pool\\n        (int256 delta0, int256 delta1) = pool.removeLiquidity(msg.sender, liq);\\n\\n        // Register the account changes\\n        accounter.accountChange(delta0, delta1);\\n\\n        // Send the event\\n        emit LiquidityUpdate(msg.sender, delta0, delta1);\\n\\n        return ptr;\\n    }\\n\\n    /// @notice Perform the claim fees operation\\n    function _claimFees(Accounter memory accounter, uint256 ptr) internal returns (uint256) {\\n        // Ensure the sender of the message is the fee receiver\\n        if (feeReceiver != msg.sender) revert NotFeeReceiver();\\n\\n        // Then check each tokens he has to claims\\n        uint256 protocolFees0 = token0State.protocolFees;\\n        uint256 protocolFees1 = token1State.protocolFees;\\n\\n        // Update the state only if he got something to claim\\n        if (protocolFees0 != 0) {\\n            accounter.accountChange(true, -(protocolFees0.toInt256()));\\n            token0State.protocolFees = 0;\\n        }\\n        if (protocolFees1 != 0) {\\n            accounter.accountChange(false, -(protocolFees1.toInt256()));\\n            token1State.protocolFees = 0;\\n        }\\n\\n        return ptr;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                              Token helper op's                             */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @notice Perform the permit operation\\n    function _permitViaSig(uint256 ptr) internal returns (uint256) {\\n        Token token;\\n        TokenState storage tokenState;\\n        uint256 amount;\\n        uint256 deadline;\\n        uint256 v;\\n        bytes32 r;\\n        bytes32 s;\\n\\n        (ptr, token, tokenState,) = _getTokenFromBoolInPtr(ptr);\\n        (ptr, amount) = ptr.readUint128();\\n        (ptr, deadline) = ptr.readUint48();\\n        (ptr, v) = ptr.readUint8();\\n        (ptr, r) = ptr.readBytes32();\\n        (ptr, s) = ptr.readBytes32();\\n\\n        // Perform the permit operation\\n        token.permit(msg.sender, address(this), amount, deadline, uint8(v), r, s);\\n\\n        return ptr;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                        Internal pure helper method's                       */\\n    /* -------------------------------------------------------------------------- */\\n\\n    function _getPc(bytes calldata program) internal pure returns (uint256 ptr, uint256 endPtr) {\\n        assembly (\\\"memory-safe\\\") {\\n            ptr := program.offset\\n            endPtr := add(ptr, program.length)\\n        }\\n    }\\n\\n    function _getTokenFromBoolInPtr(uint256 ptr)\\n        internal\\n        view\\n        returns (uint256, Token token, TokenState storage tokenState, bool isToken0)\\n    {\\n        (ptr, isToken0) = ptr.readBool();\\n\\n        // Get the right token & state depending on the bool\\n        if (isToken0) {\\n            token = TOKEN_0;\\n            tokenState = token0State;\\n        } else {\\n            token = TOKEN_1;\\n            tokenState = token1State;\\n        }\\n        return (ptr, token, tokenState, isToken0);\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                           External view method's                           */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @notice Get the current tokens\\n    function getTokens() external view returns (Token token0, Token token1) {\\n        return (TOKEN_0, TOKEN_1);\\n    }\\n\\n    /// @notice Get the current pool\\n    /// @return totalLiquidity\\n    /// @return reserve0\\n    /// @return reserve1\\n    function getPoolState() external view returns (uint256, uint256, uint256) {\\n        return (pool.totalLiquidity, pool.reserves0, pool.reserves1);\\n    }\\n\\n    /// @notice Get the current pool position of the given `liquidityProvider`\\n    /// @return position\\n    function getPosition(address liquidityProvider) external view returns (uint256) {\\n        return pool.positions[liquidityProvider];\\n    }\\n\\n    /// @notice Get the current token states\\n    /// @return totalReserves0\\n    /// @return totalReserves1\\n    function getReserves() external view returns (uint256, uint256) {\\n        return (token0State.totalReserves, token1State.totalReserves);\\n    }\\n\\n    /// @notice Get the current protocol fees\\n    /// @return protocolFees0\\n    /// @return protocolFees1\\n    function getProtocolFees() external view returns (uint256, uint256) {\\n        return (token0State.protocolFees, token1State.protocolFees);\\n    }\\n\\n    /// @notice Get the current fees\\n    /// @return feeBps\\n    /// @return protocolFee\\n    function getFees() external view returns (uint256, uint256) {\\n        return (FEE_BPS, protocolFee);\\n    }\\n\\n    /// @dev Returns the `amountOut` of token that will be received in exchange of `inAmount` in the direction\\n    /// `zeroForOne`.\\n    function estimateSwap(\\n        uint256 inAmount,\\n        bool zeroForOne\\n    )\\n        external\\n        view\\n        returns (uint256 outAmount, uint256 feeAmount, uint256 lpFee)\\n    {\\n        // Compute the liquidity providers fee\\n        lpFee = inAmount * FEE_BPS / BPS;\\n\\n        // Deduce the swap fee from the protocol\\n        feeAmount = (inAmount * protocolFee) / BPS;\\n        inAmount -= feeAmount;\\n\\n        // Get our pour reservices\\n        uint256 reserves0 = pool.reserves0;\\n        uint256 reserves1 = pool.reserves1;\\n\\n        if (zeroForOne) {\\n            outAmount = reserves1 - (reserves0 * reserves1) / (reserves0 + inAmount * (BPS - FEE_BPS) / BPS);\\n        } else {\\n            outAmount = reserves0 - (reserves0 * reserves1) / (reserves1 + inAmount * (BPS - FEE_BPS) / BPS);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solady/src/utils/SafeTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/SafeTransferLib.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n///\\n/// @dev Note:\\n/// - For ETH transfers, please use `forceSafeTransferETH` for gas griefing protection.\\n/// - For ERC20s, this implementation won't check that a token has code,\\n///   responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev The ETH transfer has failed.\\n    error ETHTransferFailed();\\n\\n    /// @dev The ERC20 `transferFrom` has failed.\\n    error TransferFromFailed();\\n\\n    /// @dev The ERC20 `transfer` has failed.\\n    error TransferFailed();\\n\\n    /// @dev The ERC20 `approve` has failed.\\n    error ApproveFailed();\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Suggested gas stipend for contract receiving ETH that disallows any storage writes.\\n    uint256 internal constant GAS_STIPEND_NO_STORAGE_WRITES = 2300;\\n\\n    /// @dev Suggested gas stipend for contract receiving ETH to perform a few\\n    /// storage reads and writes, but low enough to prevent griefing.\\n    uint256 internal constant GAS_STIPEND_NO_GRIEF = 100000;\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                       ETH OPERATIONS                       */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    // If gas griefing protection is needed, please use the force variants.\\n    //\\n    // The regular variants:\\n    // - Forwards all remaining gas to the target.\\n    // - Reverts if the target reverts.\\n    // - Reverts if the current contract has insufficient balance.\\n    //\\n    // The force variants:\\n    // - Forwards with an optional gas stipend\\n    //   (defaults to `GAS_STIPEND_NO_GRIEF`, which is sufficient for most cases).\\n    // - If the target reverts, or if the gas stipend is exhausted,\\n    //   creates a temporary contract to force send the ETH via `SELFDESTRUCT`.\\n    //   Future compatible with `SENDALL`: https://eips.ethereum.org/EIPS/eip-4758.\\n    // - Reverts if the current contract has insufficient balance.\\n    //\\n    // The try variants:\\n    // - Forwards with a mandatory gas stipend.\\n    // - Instead of reverting, returns whether the transfer succeeded.\\n\\n    /// @dev Sends `amount` (in wei) ETH to `to`.\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(call(gas(), to, amount, gas(), 0x00, gas(), 0x00)) {\\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Sends all the ETH in the current contract to `to`.\\n    function safeTransferAllETH(address to) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer all the ETH and check if it succeeded or not.\\n            if iszero(call(gas(), to, selfbalance(), gas(), 0x00, gas(), 0x00)) {\\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\\n    function forceSafeTransferETH(address to, uint256 amount, uint256 gasStipend) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if lt(selfbalance(), amount) {\\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            if iszero(call(gasStipend, to, amount, gas(), 0x00, gas(), 0x00)) {\\n                mstore(0x00, to) // Store the address in scratch space.\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\n                if iszero(create(amount, 0x0b, 0x16)) {\\n                    returndatacopy(gas(), returndatasize(), shr(20, gas())) // For gas estimation.\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Force sends all the ETH in the current contract to `to`, with a `gasStipend`.\\n    function forceSafeTransferAllETH(address to, uint256 gasStipend) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(call(gasStipend, to, selfbalance(), gas(), 0x00, gas(), 0x00)) {\\n                mstore(0x00, to) // Store the address in scratch space.\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\n                if iszero(create(selfbalance(), 0x0b, 0x16)) {\\n                    returndatacopy(gas(), returndatasize(), shr(20, gas())) // For gas estimation.\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with `GAS_STIPEND_NO_GRIEF`.\\n    function forceSafeTransferETH(address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if lt(selfbalance(), amount) {\\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            if iszero(call(GAS_STIPEND_NO_GRIEF, to, amount, gas(), 0x00, gas(), 0x00)) {\\n                mstore(0x00, to) // Store the address in scratch space.\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\n                if iszero(create(amount, 0x0b, 0x16)) {\\n                    returndatacopy(gas(), returndatasize(), shr(20, gas())) // For gas estimation.\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Force sends all the ETH in the current contract to `to`, with `GAS_STIPEND_NO_GRIEF`.\\n    function forceSafeTransferAllETH(address to) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(call(GAS_STIPEND_NO_GRIEF, to, selfbalance(), gas(), 0x00, gas(), 0x00)) {\\n                mstore(0x00, to) // Store the address in scratch space.\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\n                if iszero(create(selfbalance(), 0x0b, 0x16)) {\\n                    returndatacopy(gas(), returndatasize(), shr(20, gas())) // For gas estimation.\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\\n    function trySafeTransferETH(address to, uint256 amount, uint256 gasStipend)\\n        internal\\n        returns (bool success)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            success := call(gasStipend, to, amount, gas(), 0x00, gas(), 0x00)\\n        }\\n    }\\n\\n    /// @dev Sends all the ETH in the current contract to `to`, with a `gasStipend`.\\n    function trySafeTransferAllETH(address to, uint256 gasStipend)\\n        internal\\n        returns (bool success)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            success := call(gasStipend, to, selfbalance(), gas(), 0x00, gas(), 0x00)\\n        }\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                      ERC20 OPERATIONS                      */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Sends `amount` of ERC20 `token` from `from` to `to`.\\n    /// Reverts upon failure.\\n    ///\\n    /// The `from` account must have at least `amount` approved for\\n    /// the current contract to manage.\\n    function safeTransferFrom(address token, address from, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40) // Cache the free memory pointer.\\n            mstore(0x60, amount) // Store the `amount` argument.\\n            mstore(0x40, to) // Store the `to` argument.\\n            mstore(0x2c, shl(96, from)) // Store the `from` argument.\\n            mstore(0x0c, 0x23b872dd000000000000000000000000) // `transferFrom(address,address,uint256)`.\\n            // Perform the transfer, reverting upon failure.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\\n                )\\n            ) {\\n                mstore(0x00, 0x7939f424) // `TransferFromFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, m) // Restore the free memory pointer.\\n        }\\n    }\\n\\n    /// @dev Sends all of ERC20 `token` from `from` to `to`.\\n    /// Reverts upon failure.\\n    ///\\n    /// The `from` account must have their entire balance approved for\\n    /// the current contract to manage.\\n    function safeTransferAllFrom(address token, address from, address to)\\n        internal\\n        returns (uint256 amount)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40) // Cache the free memory pointer.\\n            mstore(0x40, to) // Store the `to` argument.\\n            mstore(0x2c, shl(96, from)) // Store the `from` argument.\\n            mstore(0x0c, 0x70a08231000000000000000000000000) // `balanceOf(address)`.\\n            // Read the balance, reverting upon failure.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                    staticcall(gas(), token, 0x1c, 0x24, 0x60, 0x20)\\n                )\\n            ) {\\n                mstore(0x00, 0x7939f424) // `TransferFromFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x00, 0x23b872dd) // `transferFrom(address,address,uint256)`.\\n            amount := mload(0x60) // The `amount` is already at 0x60. We'll need to return it.\\n            // Perform the transfer, reverting upon failure.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\\n                )\\n            ) {\\n                mstore(0x00, 0x7939f424) // `TransferFromFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, m) // Restore the free memory pointer.\\n        }\\n    }\\n\\n    /// @dev Sends `amount` of ERC20 `token` from the current contract to `to`.\\n    /// Reverts upon failure.\\n    function safeTransfer(address token, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x14, to) // Store the `to` argument.\\n            mstore(0x34, amount) // Store the `amount` argument.\\n            mstore(0x00, 0xa9059cbb000000000000000000000000) // `transfer(address,uint256)`.\\n            // Perform the transfer, reverting upon failure.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                mstore(0x00, 0x90b8ec18) // `TransferFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\\n        }\\n    }\\n\\n    /// @dev Sends all of ERC20 `token` from the current contract to `to`.\\n    /// Reverts upon failure.\\n    function safeTransferAll(address token, address to) internal returns (uint256 amount) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, 0x70a08231) // Store the function selector of `balanceOf(address)`.\\n            mstore(0x20, address()) // Store the address of the current contract.\\n            // Read the balance, reverting upon failure.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                    staticcall(gas(), token, 0x1c, 0x24, 0x34, 0x20)\\n                )\\n            ) {\\n                mstore(0x00, 0x90b8ec18) // `TransferFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x14, to) // Store the `to` argument.\\n            amount := mload(0x34) // The `amount` is already at 0x34. We'll need to return it.\\n            mstore(0x00, 0xa9059cbb000000000000000000000000) // `transfer(address,uint256)`.\\n            // Perform the transfer, reverting upon failure.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                mstore(0x00, 0x90b8ec18) // `TransferFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\\n        }\\n    }\\n\\n    /// @dev Sets `amount` of ERC20 `token` for `to` to manage on behalf of the current contract.\\n    /// Reverts upon failure.\\n    function safeApprove(address token, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x14, to) // Store the `to` argument.\\n            mstore(0x34, amount) // Store the `amount` argument.\\n            mstore(0x00, 0x095ea7b3000000000000000000000000) // `approve(address,uint256)`.\\n            // Perform the approval, reverting upon failure.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                mstore(0x00, 0x3e3f8f73) // `ApproveFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\\n        }\\n    }\\n\\n    /// @dev Sets `amount` of ERC20 `token` for `to` to manage on behalf of the current contract.\\n    /// If the initial attempt to approve fails, attempts to reset the approved amount to zero,\\n    /// then retries the approval again (some tokens, e.g. USDT, requires this).\\n    /// Reverts upon failure.\\n    function safeApproveWithRetry(address token, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x14, to) // Store the `to` argument.\\n            mstore(0x34, amount) // Store the `amount` argument.\\n            mstore(0x00, 0x095ea7b3000000000000000000000000) // `approve(address,uint256)`.\\n            // Perform the approval, retrying upon failure.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                mstore(0x34, 0) // Store 0 for the `amount`.\\n                mstore(0x00, 0x095ea7b3000000000000000000000000) // `approve(address,uint256)`.\\n                pop(call(gas(), token, 0, 0x10, 0x44, 0x00, 0x00)) // Reset the approval.\\n                mstore(0x34, amount) // Store back the original `amount`.\\n                // Retry the approval, reverting upon failure.\\n                if iszero(\\n                    and(\\n                        or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\n                        call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\n                    )\\n                ) {\\n                    mstore(0x00, 0x3e3f8f73) // `ApproveFailed()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\\n        }\\n    }\\n\\n    /// @dev Returns the amount of ERC20 `token` owned by `account`.\\n    /// Returns zero if the `token` does not exist.\\n    function balanceOf(address token, address account) internal view returns (uint256 amount) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x14, account) // Store the `account` argument.\\n            mstore(0x00, 0x70a08231000000000000000000000000) // `balanceOf(address)`.\\n            amount :=\\n                mul(\\n                    mload(0x20),\\n                    and( // The arguments of `and` are evaluated from right to left.\\n                        gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                        staticcall(gas(), token, 0x10, 0x24, 0x20, 0x20)\\n                    )\\n                )\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solady/src/utils/SafeCastLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Safe integer casting library that reverts on overflow.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/SafeCastLib.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeCast.sol)\\nlibrary SafeCastLib {\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    error Overflow();\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*          UNSIGNED INTEGER SAFE CASTING OPERATIONS          */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    function toUint8(uint256 x) internal pure returns (uint8) {\\n        if (x >= 1 << 8) _revertOverflow();\\n        return uint8(x);\\n    }\\n\\n    function toUint16(uint256 x) internal pure returns (uint16) {\\n        if (x >= 1 << 16) _revertOverflow();\\n        return uint16(x);\\n    }\\n\\n    function toUint24(uint256 x) internal pure returns (uint24) {\\n        if (x >= 1 << 24) _revertOverflow();\\n        return uint24(x);\\n    }\\n\\n    function toUint32(uint256 x) internal pure returns (uint32) {\\n        if (x >= 1 << 32) _revertOverflow();\\n        return uint32(x);\\n    }\\n\\n    function toUint40(uint256 x) internal pure returns (uint40) {\\n        if (x >= 1 << 40) _revertOverflow();\\n        return uint40(x);\\n    }\\n\\n    function toUint48(uint256 x) internal pure returns (uint48) {\\n        if (x >= 1 << 48) _revertOverflow();\\n        return uint48(x);\\n    }\\n\\n    function toUint56(uint256 x) internal pure returns (uint56) {\\n        if (x >= 1 << 56) _revertOverflow();\\n        return uint56(x);\\n    }\\n\\n    function toUint64(uint256 x) internal pure returns (uint64) {\\n        if (x >= 1 << 64) _revertOverflow();\\n        return uint64(x);\\n    }\\n\\n    function toUint72(uint256 x) internal pure returns (uint72) {\\n        if (x >= 1 << 72) _revertOverflow();\\n        return uint72(x);\\n    }\\n\\n    function toUint80(uint256 x) internal pure returns (uint80) {\\n        if (x >= 1 << 80) _revertOverflow();\\n        return uint80(x);\\n    }\\n\\n    function toUint88(uint256 x) internal pure returns (uint88) {\\n        if (x >= 1 << 88) _revertOverflow();\\n        return uint88(x);\\n    }\\n\\n    function toUint96(uint256 x) internal pure returns (uint96) {\\n        if (x >= 1 << 96) _revertOverflow();\\n        return uint96(x);\\n    }\\n\\n    function toUint104(uint256 x) internal pure returns (uint104) {\\n        if (x >= 1 << 104) _revertOverflow();\\n        return uint104(x);\\n    }\\n\\n    function toUint112(uint256 x) internal pure returns (uint112) {\\n        if (x >= 1 << 112) _revertOverflow();\\n        return uint112(x);\\n    }\\n\\n    function toUint120(uint256 x) internal pure returns (uint120) {\\n        if (x >= 1 << 120) _revertOverflow();\\n        return uint120(x);\\n    }\\n\\n    function toUint128(uint256 x) internal pure returns (uint128) {\\n        if (x >= 1 << 128) _revertOverflow();\\n        return uint128(x);\\n    }\\n\\n    function toUint136(uint256 x) internal pure returns (uint136) {\\n        if (x >= 1 << 136) _revertOverflow();\\n        return uint136(x);\\n    }\\n\\n    function toUint144(uint256 x) internal pure returns (uint144) {\\n        if (x >= 1 << 144) _revertOverflow();\\n        return uint144(x);\\n    }\\n\\n    function toUint152(uint256 x) internal pure returns (uint152) {\\n        if (x >= 1 << 152) _revertOverflow();\\n        return uint152(x);\\n    }\\n\\n    function toUint160(uint256 x) internal pure returns (uint160) {\\n        if (x >= 1 << 160) _revertOverflow();\\n        return uint160(x);\\n    }\\n\\n    function toUint168(uint256 x) internal pure returns (uint168) {\\n        if (x >= 1 << 168) _revertOverflow();\\n        return uint168(x);\\n    }\\n\\n    function toUint176(uint256 x) internal pure returns (uint176) {\\n        if (x >= 1 << 176) _revertOverflow();\\n        return uint176(x);\\n    }\\n\\n    function toUint184(uint256 x) internal pure returns (uint184) {\\n        if (x >= 1 << 184) _revertOverflow();\\n        return uint184(x);\\n    }\\n\\n    function toUint192(uint256 x) internal pure returns (uint192) {\\n        if (x >= 1 << 192) _revertOverflow();\\n        return uint192(x);\\n    }\\n\\n    function toUint200(uint256 x) internal pure returns (uint200) {\\n        if (x >= 1 << 200) _revertOverflow();\\n        return uint200(x);\\n    }\\n\\n    function toUint208(uint256 x) internal pure returns (uint208) {\\n        if (x >= 1 << 208) _revertOverflow();\\n        return uint208(x);\\n    }\\n\\n    function toUint216(uint256 x) internal pure returns (uint216) {\\n        if (x >= 1 << 216) _revertOverflow();\\n        return uint216(x);\\n    }\\n\\n    function toUint224(uint256 x) internal pure returns (uint224) {\\n        if (x >= 1 << 224) _revertOverflow();\\n        return uint224(x);\\n    }\\n\\n    function toUint232(uint256 x) internal pure returns (uint232) {\\n        if (x >= 1 << 232) _revertOverflow();\\n        return uint232(x);\\n    }\\n\\n    function toUint240(uint256 x) internal pure returns (uint240) {\\n        if (x >= 1 << 240) _revertOverflow();\\n        return uint240(x);\\n    }\\n\\n    function toUint248(uint256 x) internal pure returns (uint248) {\\n        if (x >= 1 << 248) _revertOverflow();\\n        return uint248(x);\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*           SIGNED INTEGER SAFE CASTING OPERATIONS           */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    function toInt8(int256 x) internal pure returns (int8) {\\n        int8 y = int8(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt16(int256 x) internal pure returns (int16) {\\n        int16 y = int16(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt24(int256 x) internal pure returns (int24) {\\n        int24 y = int24(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt32(int256 x) internal pure returns (int32) {\\n        int32 y = int32(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt40(int256 x) internal pure returns (int40) {\\n        int40 y = int40(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt48(int256 x) internal pure returns (int48) {\\n        int48 y = int48(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt56(int256 x) internal pure returns (int56) {\\n        int56 y = int56(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt64(int256 x) internal pure returns (int64) {\\n        int64 y = int64(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt72(int256 x) internal pure returns (int72) {\\n        int72 y = int72(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt80(int256 x) internal pure returns (int80) {\\n        int80 y = int80(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt88(int256 x) internal pure returns (int88) {\\n        int88 y = int88(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt96(int256 x) internal pure returns (int96) {\\n        int96 y = int96(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt104(int256 x) internal pure returns (int104) {\\n        int104 y = int104(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt112(int256 x) internal pure returns (int112) {\\n        int112 y = int112(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt120(int256 x) internal pure returns (int120) {\\n        int120 y = int120(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt128(int256 x) internal pure returns (int128) {\\n        int128 y = int128(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt136(int256 x) internal pure returns (int136) {\\n        int136 y = int136(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt144(int256 x) internal pure returns (int144) {\\n        int144 y = int144(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt152(int256 x) internal pure returns (int152) {\\n        int152 y = int152(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt160(int256 x) internal pure returns (int160) {\\n        int160 y = int160(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt168(int256 x) internal pure returns (int168) {\\n        int168 y = int168(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt176(int256 x) internal pure returns (int176) {\\n        int176 y = int176(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt184(int256 x) internal pure returns (int184) {\\n        int184 y = int184(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt192(int256 x) internal pure returns (int192) {\\n        int192 y = int192(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt200(int256 x) internal pure returns (int200) {\\n        int200 y = int200(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt208(int256 x) internal pure returns (int208) {\\n        int208 y = int208(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt216(int256 x) internal pure returns (int216) {\\n        int216 y = int216(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt224(int256 x) internal pure returns (int224) {\\n        int224 y = int224(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt232(int256 x) internal pure returns (int232) {\\n        int232 y = int232(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt240(int256 x) internal pure returns (int240) {\\n        int240 y = int240(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    function toInt248(int256 x) internal pure returns (int248) {\\n        int248 y = int248(x);\\n        if (x != y) _revertOverflow();\\n        return y;\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*               OTHER SAFE CASTING OPERATIONS                */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    function toInt256(uint256 x) internal pure returns (int256) {\\n        if (x >= 1 << 255) _revertOverflow();\\n        return int256(x);\\n    }\\n\\n    function toUint256(int256 x) internal pure returns (uint256) {\\n        if (x < 0) _revertOverflow();\\n        return uint256(x);\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                      PRIVATE HELPERS                       */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    function _revertOverflow() private pure {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Store the function selector of `Overflow()`.\\n            mstore(0x00, 0x35278d12)\\n            // Revert with (offset, size).\\n            revert(0x1c, 0x04)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solady/src/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Simple ERC20 + EIP-2612 implementation.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol)\\n///\\n/// @dev Note:\\n/// The ERC20 standard allows minting and transferring to and from the zero address,\\n/// minting and transferring zero tokens, as well as self-approvals.\\n/// For performance, this implementation WILL NOT revert for such actions.\\n/// Please add any checks with overrides if desired.\\nabstract contract ERC20 {\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev The total supply has overflowed.\\n    error TotalSupplyOverflow();\\n\\n    /// @dev The allowance has overflowed.\\n    error AllowanceOverflow();\\n\\n    /// @dev The allowance has underflowed.\\n    error AllowanceUnderflow();\\n\\n    /// @dev Insufficient balance.\\n    error InsufficientBalance();\\n\\n    /// @dev Insufficient allowance.\\n    error InsufficientAllowance();\\n\\n    /// @dev The permit is invalid.\\n    error InvalidPermit();\\n\\n    /// @dev The permit has expired.\\n    error PermitExpired();\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                           EVENTS                           */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Emitted when `amount` tokens is transferred from `from` to `to`.\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    /// @dev Emitted when `amount` tokens is approved by `owner` to be used by `spender`.\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /// @dev `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    uint256 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    /// @dev `keccak256(bytes(\\\"Approval(address,address,uint256)\\\"))`.\\n    uint256 private constant _APPROVAL_EVENT_SIGNATURE =\\n        0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925;\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                          STORAGE                           */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev The storage slot for the total supply.\\n    uint256 private constant _TOTAL_SUPPLY_SLOT = 0x05345cdf77eb68f44c;\\n\\n    /// @dev The balance slot of `owner` is given by:\\n    /// ```\\n    ///     mstore(0x0c, _BALANCE_SLOT_SEED)\\n    ///     mstore(0x00, owner)\\n    ///     let balanceSlot := keccak256(0x0c, 0x20)\\n    /// ```\\n    uint256 private constant _BALANCE_SLOT_SEED = 0x87a211a2;\\n\\n    /// @dev The allowance slot of (`owner`, `spender`) is given by:\\n    /// ```\\n    ///     mstore(0x20, spender)\\n    ///     mstore(0x0c, _ALLOWANCE_SLOT_SEED)\\n    ///     mstore(0x00, owner)\\n    ///     let allowanceSlot := keccak256(0x0c, 0x34)\\n    /// ```\\n    uint256 private constant _ALLOWANCE_SLOT_SEED = 0x7f5e9f20;\\n\\n    /// @dev The nonce slot of `owner` is given by:\\n    /// ```\\n    ///     mstore(0x0c, _NONCES_SLOT_SEED)\\n    ///     mstore(0x00, owner)\\n    ///     let nonceSlot := keccak256(0x0c, 0x20)\\n    /// ```\\n    uint256 private constant _NONCES_SLOT_SEED = 0x38377508;\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                       ERC20 METADATA                       */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Returns the name of the token.\\n    function name() public view virtual returns (string memory);\\n\\n    /// @dev Returns the symbol of the token.\\n    function symbol() public view virtual returns (string memory);\\n\\n    /// @dev Returns the decimals places of the token.\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                           ERC20                            */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Returns the amount of tokens in existence.\\n    function totalSupply() public view virtual returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := sload(_TOTAL_SUPPLY_SLOT)\\n        }\\n    }\\n\\n    /// @dev Returns the amount of tokens owned by `owner`.\\n    function balanceOf(address owner) public view virtual returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x0c, _BALANCE_SLOT_SEED)\\n            mstore(0x00, owner)\\n            result := sload(keccak256(0x0c, 0x20))\\n        }\\n    }\\n\\n    /// @dev Returns the amount of tokens that `spender` can spend on behalf of `owner`.\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        virtual\\n        returns (uint256 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x20, spender)\\n            mstore(0x0c, _ALLOWANCE_SLOT_SEED)\\n            mstore(0x00, owner)\\n            result := sload(keccak256(0x0c, 0x34))\\n        }\\n    }\\n\\n    /// @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n    ///\\n    /// Emits a {Approval} event.\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute the allowance slot and store the amount.\\n            mstore(0x20, spender)\\n            mstore(0x0c, _ALLOWANCE_SLOT_SEED)\\n            mstore(0x00, caller())\\n            sstore(keccak256(0x0c, 0x34), amount)\\n            // Emit the {Approval} event.\\n            mstore(0x00, amount)\\n            log3(0x00, 0x20, _APPROVAL_EVENT_SIGNATURE, caller(), shr(96, mload(0x2c)))\\n        }\\n        return true;\\n    }\\n\\n    /// @dev Atomically increases the allowance granted to `spender` by the caller.\\n    ///\\n    /// Emits a {Approval} event.\\n    function increaseAllowance(address spender, uint256 difference) public virtual returns (bool) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute the allowance slot and load its value.\\n            mstore(0x20, spender)\\n            mstore(0x0c, _ALLOWANCE_SLOT_SEED)\\n            mstore(0x00, caller())\\n            let allowanceSlot := keccak256(0x0c, 0x34)\\n            let allowanceBefore := sload(allowanceSlot)\\n            // Add to the allowance.\\n            let allowanceAfter := add(allowanceBefore, difference)\\n            // Revert upon overflow.\\n            if lt(allowanceAfter, allowanceBefore) {\\n                mstore(0x00, 0xf9067066) // `AllowanceOverflow()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Store the updated allowance.\\n            sstore(allowanceSlot, allowanceAfter)\\n            // Emit the {Approval} event.\\n            mstore(0x00, allowanceAfter)\\n            log3(0x00, 0x20, _APPROVAL_EVENT_SIGNATURE, caller(), shr(96, mload(0x2c)))\\n        }\\n        return true;\\n    }\\n\\n    /// @dev Atomically decreases the allowance granted to `spender` by the caller.\\n    ///\\n    /// Emits a {Approval} event.\\n    function decreaseAllowance(address spender, uint256 difference) public virtual returns (bool) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute the allowance slot and load its value.\\n            mstore(0x20, spender)\\n            mstore(0x0c, _ALLOWANCE_SLOT_SEED)\\n            mstore(0x00, caller())\\n            let allowanceSlot := keccak256(0x0c, 0x34)\\n            let allowanceBefore := sload(allowanceSlot)\\n            // Revert if will underflow.\\n            if lt(allowanceBefore, difference) {\\n                mstore(0x00, 0x8301ab38) // `AllowanceUnderflow()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Subtract and store the updated allowance.\\n            let allowanceAfter := sub(allowanceBefore, difference)\\n            sstore(allowanceSlot, allowanceAfter)\\n            // Emit the {Approval} event.\\n            mstore(0x00, allowanceAfter)\\n            log3(0x00, 0x20, _APPROVAL_EVENT_SIGNATURE, caller(), shr(96, mload(0x2c)))\\n        }\\n        return true;\\n    }\\n\\n    /// @dev Transfer `amount` tokens from the caller to `to`.\\n    ///\\n    /// Requirements:\\n    /// - `from` must at least have `amount`.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        _beforeTokenTransfer(msg.sender, to, amount);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute the balance slot and load its value.\\n            mstore(0x0c, _BALANCE_SLOT_SEED)\\n            mstore(0x00, caller())\\n            let fromBalanceSlot := keccak256(0x0c, 0x20)\\n            let fromBalance := sload(fromBalanceSlot)\\n            // Revert if insufficient balance.\\n            if gt(amount, fromBalance) {\\n                mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Subtract and store the updated balance.\\n            sstore(fromBalanceSlot, sub(fromBalance, amount))\\n            // Compute the balance slot of `to`.\\n            mstore(0x00, to)\\n            let toBalanceSlot := keccak256(0x0c, 0x20)\\n            // Add and store the updated balance of `to`.\\n            // Will not overflow because the sum of all user balances\\n            // cannot exceed the maximum uint256 value.\\n            sstore(toBalanceSlot, add(sload(toBalanceSlot), amount))\\n            // Emit the {Transfer} event.\\n            mstore(0x20, amount)\\n            log3(0x20, 0x20, _TRANSFER_EVENT_SIGNATURE, caller(), shr(96, mload(0x0c)))\\n        }\\n        _afterTokenTransfer(msg.sender, to, amount);\\n        return true;\\n    }\\n\\n    /// @dev Transfers `amount` tokens from `from` to `to`.\\n    ///\\n    /// Note: Does not update the allowance if it is the maximum uint256 value.\\n    ///\\n    /// Requirements:\\n    /// - `from` must at least have `amount`.\\n    /// - The caller must have at least `amount` of allowance to transfer the tokens of `from`.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function transferFrom(address from, address to, uint256 amount) public virtual returns (bool) {\\n        _beforeTokenTransfer(from, to, amount);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let from_ := shl(96, from)\\n            // Compute the allowance slot and load its value.\\n            mstore(0x20, caller())\\n            mstore(0x0c, or(from_, _ALLOWANCE_SLOT_SEED))\\n            let allowanceSlot := keccak256(0x0c, 0x34)\\n            let allowance_ := sload(allowanceSlot)\\n            // If the allowance is not the maximum uint256 value.\\n            if iszero(eq(allowance_, not(0))) {\\n                // Revert if the amount to be transferred exceeds the allowance.\\n                if gt(amount, allowance_) {\\n                    mstore(0x00, 0x13be252b) // `InsufficientAllowance()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                // Subtract and store the updated allowance.\\n                sstore(allowanceSlot, sub(allowance_, amount))\\n            }\\n            // Compute the balance slot and load its value.\\n            mstore(0x0c, or(from_, _BALANCE_SLOT_SEED))\\n            let fromBalanceSlot := keccak256(0x0c, 0x20)\\n            let fromBalance := sload(fromBalanceSlot)\\n            // Revert if insufficient balance.\\n            if gt(amount, fromBalance) {\\n                mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Subtract and store the updated balance.\\n            sstore(fromBalanceSlot, sub(fromBalance, amount))\\n            // Compute the balance slot of `to`.\\n            mstore(0x00, to)\\n            let toBalanceSlot := keccak256(0x0c, 0x20)\\n            // Add and store the updated balance of `to`.\\n            // Will not overflow because the sum of all user balances\\n            // cannot exceed the maximum uint256 value.\\n            sstore(toBalanceSlot, add(sload(toBalanceSlot), amount))\\n            // Emit the {Transfer} event.\\n            mstore(0x20, amount)\\n            log3(0x20, 0x20, _TRANSFER_EVENT_SIGNATURE, shr(96, from_), shr(96, mload(0x0c)))\\n        }\\n        _afterTokenTransfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                          EIP-2612                          */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Returns the current nonce for `owner`.\\n    /// This value is used to compute the signature for EIP-2612 permit.\\n    function nonces(address owner) public view virtual returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute the nonce slot and load its value.\\n            mstore(0x0c, _NONCES_SLOT_SEED)\\n            mstore(0x00, owner)\\n            result := sload(keccak256(0x0c, 0x20))\\n        }\\n    }\\n\\n    /// @dev Sets `value` as the allowance of `spender` over the tokens of `owner`,\\n    /// authorized by a signed approval by `owner`.\\n    ///\\n    /// Emits a {Approval} event.\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        bytes32 domainSeparator = DOMAIN_SEPARATOR();\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Grab the free memory pointer.\\n            let m := mload(0x40)\\n            // Revert if the block timestamp greater than `deadline`.\\n            if gt(timestamp(), deadline) {\\n                mstore(0x00, 0x1a15a3cc) // `PermitExpired()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Clean the upper 96 bits.\\n            owner := shr(96, shl(96, owner))\\n            spender := shr(96, shl(96, spender))\\n            // Compute the nonce slot and load its value.\\n            mstore(0x0c, _NONCES_SLOT_SEED)\\n            mstore(0x00, owner)\\n            let nonceSlot := keccak256(0x0c, 0x20)\\n            let nonceValue := sload(nonceSlot)\\n            // Increment and store the updated nonce.\\n            sstore(nonceSlot, add(nonceValue, 1))\\n            // Prepare the inner hash.\\n            // `keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\")`.\\n            // forgefmt: disable-next-item\\n            mstore(m, 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9)\\n            mstore(add(m, 0x20), owner)\\n            mstore(add(m, 0x40), spender)\\n            mstore(add(m, 0x60), value)\\n            mstore(add(m, 0x80), nonceValue)\\n            mstore(add(m, 0xa0), deadline)\\n            // Prepare the outer hash.\\n            mstore(0, 0x1901)\\n            mstore(0x20, domainSeparator)\\n            mstore(0x40, keccak256(m, 0xc0))\\n            // Prepare the ecrecover calldata.\\n            mstore(0, keccak256(0x1e, 0x42))\\n            mstore(0x20, and(0xff, v))\\n            mstore(0x40, r)\\n            mstore(0x60, s)\\n            pop(staticcall(gas(), 1, 0, 0x80, 0x20, 0x20))\\n            // If the ecrecover fails, the returndatasize will be 0x00,\\n            // `owner` will be be checked if it equals the hash at 0x00,\\n            // which evaluates to false (i.e. 0), and we will revert.\\n            // If the ecrecover succeeds, the returndatasize will be 0x20,\\n            // `owner` will be compared against the returned address at 0x20.\\n            if iszero(eq(mload(returndatasize()), owner)) {\\n                mstore(0x00, 0xddafbaef) // `InvalidPermit()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Compute the allowance slot and store the value.\\n            // The `owner` is already at slot 0x20.\\n            mstore(0x40, or(shl(160, _ALLOWANCE_SLOT_SEED), spender))\\n            sstore(keccak256(0x2c, 0x34), value)\\n            // Emit the {Approval} event.\\n            log3(add(m, 0x60), 0x20, _APPROVAL_EVENT_SIGNATURE, owner, spender)\\n            mstore(0x40, m) // Restore the free memory pointer.\\n            mstore(0x60, 0) // Restore the zero pointer.\\n        }\\n    }\\n\\n    /// @dev Returns the EIP-2612 domains separator.\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40) // Grab the free memory pointer.\\n        }\\n        //  We simply calculate it on-the-fly to allow for cases where the `name` may change.\\n        bytes32 nameHash = keccak256(bytes(name()));\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := result\\n            // `keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")`.\\n            // forgefmt: disable-next-item\\n            mstore(m, 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f)\\n            mstore(add(m, 0x20), nameHash)\\n            // `keccak256(\\\"1\\\")`.\\n            // forgefmt: disable-next-item\\n            mstore(add(m, 0x40), 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6)\\n            mstore(add(m, 0x60), chainid())\\n            mstore(add(m, 0x80), address())\\n            result := keccak256(m, 0xa0)\\n        }\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                  INTERNAL MINT FUNCTIONS                   */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Mints `amount` tokens to `to`, increasing the total supply.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _mint(address to, uint256 amount) internal virtual {\\n        _beforeTokenTransfer(address(0), to, amount);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let totalSupplyBefore := sload(_TOTAL_SUPPLY_SLOT)\\n            let totalSupplyAfter := add(totalSupplyBefore, amount)\\n            // Revert if the total supply overflows.\\n            if lt(totalSupplyAfter, totalSupplyBefore) {\\n                mstore(0x00, 0xe5cfe957) // `TotalSupplyOverflow()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Store the updated total supply.\\n            sstore(_TOTAL_SUPPLY_SLOT, totalSupplyAfter)\\n            // Compute the balance slot and load its value.\\n            mstore(0x0c, _BALANCE_SLOT_SEED)\\n            mstore(0x00, to)\\n            let toBalanceSlot := keccak256(0x0c, 0x20)\\n            // Add and store the updated balance.\\n            sstore(toBalanceSlot, add(sload(toBalanceSlot), amount))\\n            // Emit the {Transfer} event.\\n            mstore(0x20, amount)\\n            log3(0x20, 0x20, _TRANSFER_EVENT_SIGNATURE, 0, shr(96, mload(0x0c)))\\n        }\\n        _afterTokenTransfer(address(0), to, amount);\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                  INTERNAL BURN FUNCTIONS                   */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Burns `amount` tokens from `from`, reducing the total supply.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _burn(address from, uint256 amount) internal virtual {\\n        _beforeTokenTransfer(from, address(0), amount);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute the balance slot and load its value.\\n            mstore(0x0c, _BALANCE_SLOT_SEED)\\n            mstore(0x00, from)\\n            let fromBalanceSlot := keccak256(0x0c, 0x20)\\n            let fromBalance := sload(fromBalanceSlot)\\n            // Revert if insufficient balance.\\n            if gt(amount, fromBalance) {\\n                mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Subtract and store the updated balance.\\n            sstore(fromBalanceSlot, sub(fromBalance, amount))\\n            // Subtract and store the updated total supply.\\n            sstore(_TOTAL_SUPPLY_SLOT, sub(sload(_TOTAL_SUPPLY_SLOT), amount))\\n            // Emit the {Transfer} event.\\n            mstore(0x00, amount)\\n            log3(0x00, 0x20, _TRANSFER_EVENT_SIGNATURE, shr(96, shl(96, from)), 0)\\n        }\\n        _afterTokenTransfer(from, address(0), amount);\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                INTERNAL TRANSFER FUNCTIONS                 */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Moves `amount` of tokens from `from` to `to`.\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        _beforeTokenTransfer(from, to, amount);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let from_ := shl(96, from)\\n            // Compute the balance slot and load its value.\\n            mstore(0x0c, or(from_, _BALANCE_SLOT_SEED))\\n            let fromBalanceSlot := keccak256(0x0c, 0x20)\\n            let fromBalance := sload(fromBalanceSlot)\\n            // Revert if insufficient balance.\\n            if gt(amount, fromBalance) {\\n                mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Subtract and store the updated balance.\\n            sstore(fromBalanceSlot, sub(fromBalance, amount))\\n            // Compute the balance slot of `to`.\\n            mstore(0x00, to)\\n            let toBalanceSlot := keccak256(0x0c, 0x20)\\n            // Add and store the updated balance of `to`.\\n            // Will not overflow because the sum of all user balances\\n            // cannot exceed the maximum uint256 value.\\n            sstore(toBalanceSlot, add(sload(toBalanceSlot), amount))\\n            // Emit the {Transfer} event.\\n            mstore(0x20, amount)\\n            log3(0x20, 0x20, _TRANSFER_EVENT_SIGNATURE, shr(96, from_), shr(96, mload(0x0c)))\\n        }\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                INTERNAL ALLOWANCE FUNCTIONS                */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Updates the allowance of `owner` for `spender` based on spent `amount`.\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute the allowance slot and load its value.\\n            mstore(0x20, spender)\\n            mstore(0x0c, _ALLOWANCE_SLOT_SEED)\\n            mstore(0x00, owner)\\n            let allowanceSlot := keccak256(0x0c, 0x34)\\n            let allowance_ := sload(allowanceSlot)\\n            // If the allowance is not the maximum uint256 value.\\n            if iszero(eq(allowance_, not(0))) {\\n                // Revert if the amount to be transferred exceeds the allowance.\\n                if gt(amount, allowance_) {\\n                    mstore(0x00, 0x13be252b) // `InsufficientAllowance()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                // Subtract and store the updated allowance.\\n                sstore(allowanceSlot, sub(allowance_, amount))\\n            }\\n        }\\n    }\\n\\n    /// @dev Sets `amount` as the allowance of `spender` over the tokens of `owner`.\\n    ///\\n    /// Emits a {Approval} event.\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let owner_ := shl(96, owner)\\n            // Compute the allowance slot and store the amount.\\n            mstore(0x20, spender)\\n            mstore(0x0c, or(owner_, _ALLOWANCE_SLOT_SEED))\\n            sstore(keccak256(0x0c, 0x34), amount)\\n            // Emit the {Approval} event.\\n            mstore(0x00, amount)\\n            log3(0x00, 0x20, _APPROVAL_EVENT_SIGNATURE, shr(96, owner_), shr(96, mload(0x2c)))\\n        }\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                     HOOKS TO OVERRIDE                      */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Hook that is called before any transfer of tokens.\\n    /// This includes minting and burning.\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /// @dev Hook that is called after any transfer of tokens.\\n    /// This includes minting and burning.\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"lib/swap-pool/src/libs/PoolLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport { SafeCastLib } from \\\"solady/utils/SafeCastLib.sol\\\";\\nimport { FixedPointMathLib as Math } from \\\"solady/utils/FixedPointMathLib.sol\\\";\\nimport { SwapLib } from \\\"./SwapLib.sol\\\";\\n\\n/// @dev Define the pool structure and state\\nstruct Pool {\\n    uint256 totalLiquidity;\\n    mapping(address holders => uint256 position) positions;\\n    uint128 reserves0;\\n    uint128 reserves1;\\n}\\n\\nusing PoolLib for Pool global;\\n\\n/// @title PoolLib\\n/// @notice This contract manage all the pool actions\\n/// @author KONFeature <https://github.com/KONFeature>\\n/// @author Modified from (https://github.com/Philogy/singleton-swapper/blob/main/src/libs/PoolLib.sol) by Phylogy\\nlibrary PoolLib {\\n    using SafeCastLib for uint256;\\n\\n    error InsufficientLiquidity();\\n\\n    /// @notice Swap tokens in the pool\\n    /// @param self The pool\\n    /// @param zeroForOne Whether to swap token0 for token1 or token1 for token0\\n    /// @param amount The amount of token0 or token1 to swap\\n    /// @param fee The fee to charge for the liquidity providers\\n    /// @return delta0 The amount of token0 swapped\\n    /// @return delta1 The amount of token1 swapped\\n    function swap(\\n        Pool storage self,\\n        bool zeroForOne,\\n        uint256 amount,\\n        uint256 fee\\n    )\\n        internal\\n        returns (int256 delta0, int256 delta1)\\n    {\\n        uint256 newReserves0;\\n        uint256 newReserves1;\\n        (newReserves0, newReserves1, delta0, delta1) =\\n            SwapLib.swap(self.reserves0, self.reserves1, zeroForOne, amount, fee);\\n\\n        // Update the reserve of the pool\\n        self.reserves0 = newReserves0.toUint128();\\n        self.reserves1 = newReserves1.toUint128();\\n    }\\n\\n    /// @notice Add liquidity to the pool\\n    /// @param self The pool\\n    /// @param to The address of the liquidity provider\\n    /// @param maxAmount0 The maximum amount of token0 to add\\n    /// @param maxAmount1 The maximum amount of token1 to add\\n    /// @return delta0 The amount of token0 added\\n    /// @return delta1 The amount of token1 added\\n    function addLiquidity(\\n        Pool storage self,\\n        address to,\\n        uint256 maxAmount0,\\n        uint256 maxAmount1\\n    )\\n        internal\\n        returns (int256 delta0, int256 delta1)\\n    {\\n        uint256 total = self.totalLiquidity;\\n\\n        uint256 amount0;\\n        uint256 amount1;\\n        uint256 newLiquidity;\\n\\n        if (total == 0) {\\n            newLiquidity = Math.sqrt(maxAmount0 * maxAmount1);\\n            amount0 = maxAmount0;\\n            amount1 = maxAmount1;\\n\\n            self.totalLiquidity = newLiquidity;\\n            self.positions[to] = newLiquidity;\\n            self.reserves0 = amount0.toUint128();\\n            self.reserves1 = amount1.toUint128();\\n        } else {\\n            uint256 reserves0 = self.reserves0;\\n            uint256 reserves1 = self.reserves1;\\n\\n            uint256 liq0 = total * maxAmount0 / reserves0;\\n            uint256 liq1 = total * maxAmount1 / reserves1;\\n\\n            if (liq0 > liq1) {\\n                newLiquidity = liq1;\\n                amount1 = maxAmount1;\\n                amount0 = reserves0 * amount1 / reserves1;\\n            } else {\\n                newLiquidity = liq0;\\n                amount0 = maxAmount0;\\n                amount1 = reserves1 * amount0 / reserves0;\\n            }\\n            self.totalLiquidity = total + newLiquidity;\\n            self.positions[to] += newLiquidity;\\n            self.reserves0 = (reserves0 + amount0).toUint128();\\n            self.reserves1 = (reserves1 + amount1).toUint128();\\n        }\\n\\n        delta0 = amount0.toInt256();\\n        delta1 = amount1.toInt256();\\n    }\\n\\n    /// @notice Remove liquidity from the pool\\n    /// @param from The address of the user\\n    /// @param liquidity The amount of liquidity to remove\\n    /// @return delta0 The amount of token0 that should be transfered to the user\\n    /// @return delta1 The amount of token1 that should be transfered to the user\\n    function removeLiquidity(\\n        Pool storage self,\\n        address from,\\n        uint256 liquidity\\n    )\\n        internal\\n        returns (int256 delta0, int256 delta1)\\n    {\\n        // Ensure the user has enough liquidity\\n        uint256 position = self.positions[from];\\n        if (liquidity > position) revert InsufficientLiquidity();\\n        uint256 total = self.totalLiquidity;\\n\\n        uint256 reserves0 = self.reserves0;\\n        uint256 reserves1 = self.reserves1;\\n\\n        // Compute the amount that should be transfered\\n        uint256 amount0 = reserves0 * liquidity / total;\\n        uint256 amount1 = reserves1 * liquidity / total;\\n\\n        // Decrease user position\\n        self.positions[from] = position - liquidity;\\n\\n        // Decrease reserves and total liquidity\\n        self.reserves0 = (reserves0 - amount0).toUint128();\\n        self.reserves1 = (reserves1 - amount1).toUint128();\\n        self.totalLiquidity -= liquidity;\\n\\n        // Compute the delta for the user\\n        delta0 = -amount0.toInt256();\\n        delta1 = -amount1.toInt256();\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/swap-pool/src/libs/AccounterLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nstruct Accounter {\\n    int256 token0Change;\\n    int256 token1Change;\\n}\\n\\n/// @dev Tell to use the lib below for every Accounter instance\\nusing AccounterLib for Accounter global;\\n\\n/// @title AccounterLib\\n/// @notice A library for tracking changes to an account.\\n/// @author KONFeature <https://github.com/KONFeature>\\n/// @author Modified from (https://github.com/Philogy/singleton-swapper/blob/main/src/libs/AccounterLib.sol) by Philogy\\nlibrary AccounterLib {\\n    /// @notice Register a `change` of `isToken0` for the current sender, on the current accounting: `self`.\\n    function accountChange(Accounter memory self, bool isToken0, int256 change) internal pure {\\n        if (isToken0) {\\n            self.token0Change = self.token0Change + change;\\n        } else {\\n            self.token1Change = self.token1Change + change;\\n        }\\n    }\\n\\n    /// @notice Register the changes for both token, respectively `token0Change` and `token1Change` for the current\\n    /// sender, on the current accounting: `self`.\\n    function accountChange(Accounter memory self, int256 token0Change, int256 token1Change) internal pure {\\n        self.token0Change = self.token0Change + token0Change;\\n        self.token1Change = self.token1Change + token1Change;\\n    }\\n\\n    /// @notice Reset all the of `isToken0` change for the current sender, on the current accounting: `self`.\\n    /// @return change The total change for the asset that was cleared.\\n    function resetChange(Accounter memory self, bool isToken0) internal pure returns (int256 change) {\\n        // Get the change depending on the token\\n        if (isToken0) {\\n            change = self.token0Change;\\n            self.token0Change = 0;\\n        } else {\\n            change = self.token1Change;\\n            self.token1Change = 0;\\n        }\\n    }\\n\\n    /// @notice Get the total change for the current sender on the `isToken0`, on the current accounting: `self`.\\n    function getChange(Accounter memory self, bool isToken0) internal pure returns (int256 change) {\\n        if (isToken0) {\\n            change = self.token0Change;\\n        } else {\\n            change = self.token1Change;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/swap-pool/src/libs/TokenLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport { SafeTransferLib } from \\\"solady/utils/SafeTransferLib.sol\\\";\\nimport { ERC20 } from \\\"solady/tokens/ERC20.sol\\\";\\n\\n/// @dev Type to manage swappable token, with ease of ease for native token\\ntype Token is address;\\n\\n/// @dev Tell to use the lib below for every Token instance\\nusing TokenLib for Token global;\\n\\n/// @dev Tell to use the equals functions for the equals operator\\nusing { unsafeEquals as == } for Token global;\\n\\n/// @notice Check if a token equals another\\n/// @dev Mark it as unsafe since we don't have any upper byte cleaning, so address 0x00000000000011111111111111111111\\n/// will not be considered equals to 0xdead0000000011111111111111111111, even if they are the same if we were to used\\n/// address(...) == address(...)\\nfunction unsafeEquals(Token self, Token other) pure returns (bool isEquals) {\\n    assembly {\\n        isEquals := eq(self, other)\\n    }\\n}\\n\\n/// @title TokenLib\\n/// @notice A library for managing a token in the swap pool.\\n/// @dev This lib can also handle native token\\n/// @dev A native token is represented by the address(0)\\n/// @author KONFeature <https://github.com/KONFeature>\\nlibrary TokenLib {\\n    using SafeTransferLib for address;\\n\\n    /// @dev Error throwned when the token is the native token and we try to perform a permit operation\\n    error PermitOnNativeToken();\\n\\n    /// @dev Error throwned when the token is the native token and the transfer amount doesn't match the receive value\\n    error InvalidNativeTransferAmount();\\n\\n    /// @dev 'bytes4(keccak256(\\\"PermitOnNativeToken()\\\"))'\\n    uint256 private constant _PERMIT_ON_NATIVE_TOKEN_SELECTOR = 0x5d478b89;\\n\\n    /// @notice Check if the current token is a representation of the native token\\n    function isNative(Token self) internal pure returns (bool isSelfNative) {\\n        assembly {\\n            isSelfNative := iszero(self)\\n        }\\n    }\\n\\n    /// @notice Transfer `amount` of `token` to `to`.\\n    function transfer(Token self, address to, uint256 amount) internal {\\n        if (self.isNative()) {\\n            // Perform a native transfer of the amount\\n            to.safeTransferETH(amount);\\n        } else {\\n            // Perform the transfer of the token\\n            Token.unwrap(self).safeTransfer(to, amount);\\n        }\\n    }\\n\\n    /// @notice Transfer `amount` of `token` to `to` from `msg.sender`.\\n    function transferFromSender(Token self, address to, uint256 amount) internal {\\n        // In the case of a native token, no transfer from is possible, so whe just check the sent amount\\n        if (self.isNative()) {\\n            // Check if the amount is the same as the receive value\\n            if (amount != msg.value) revert TokenLib.InvalidNativeTransferAmount();\\n            // Just return if we are here, all good\\n            return;\\n        }\\n\\n        // Try to perform the transfer\\n        Token.unwrap(self).safeTransferFrom(msg.sender, to, amount);\\n    }\\n\\n    /// @notice Get the current balance of the caller\\n    function selfBalance(Token self) internal view returns (uint256 amount) {\\n        assembly {\\n            switch self\\n            case 0 {\\n                // Get the self balance directly in case of native token\\n                amount := selfbalance()\\n            }\\n            default {\\n                // Otherwise, get balance from the token\\n                // from:\\n                // https://github.com/Vectorized/solady/blob/9ea395bd66b796c7f08afd18a565eea021c98127/src/utils/SafeTransferLib.sol#L366\\n                mstore(0x14, address()) // Store the `account` argument.\\n                mstore(0x00, 0x70a08231000000000000000000000000) // `balanceOf(address)`.\\n                amount :=\\n                    mul(\\n                        mload(0x20),\\n                        and( // The arguments of `and` are evaluated from right to left.\\n                            gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                            staticcall(gas(), self, 0x10, 0x24, 0x20, 0x20)\\n                        )\\n                    )\\n            }\\n        }\\n    }\\n\\n    /// @notice Get the current balance of `owner`\\n    function balanceOf(Token self, address owner) internal view returns (uint256 amount) {\\n        assembly {\\n            switch self\\n            case 0 {\\n                // Get the native balance of the owner in case of native token\\n                amount := balance(owner)\\n            }\\n            default {\\n                // Otherwise, get balance from the token\\n                // From:\\n                // https://github.com/Vectorized/solady/blob/9ea395bd66b796c7f08afd18a565eea021c98127/src/utils/SafeTransferLib.sol#L366\\n                mstore(0x14, owner) // Store the `account` argument.\\n                mstore(0x00, 0x70a08231000000000000000000000000) // `balanceOf(address)`.\\n                amount :=\\n                    mul(\\n                        mload(0x20),\\n                        and( // The arguments of `and` are evaluated from right to left.\\n                            gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                            staticcall(gas(), self, 0x10, 0x24, 0x20, 0x20)\\n                        )\\n                    )\\n            }\\n        }\\n    }\\n\\n    /// @notice Perform the permit op on the given token\\n    function permit(\\n        Token self,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n        internal\\n    {\\n        // Permit is not supported on native token\\n        assembly {\\n            if iszero(self) {\\n                mstore(0x00, _PERMIT_ON_NATIVE_TOKEN_SELECTOR)\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n\\n        // Perform the permit operation\\n        // Disable Slither warning about the loop, cause in case of a pool with 2\\n        // erc20 implementing eip2612, a user can decide to use a signature approval when adding liquidity to both\\n        // tokens\\n        // slither-disable-next-line calls-loop\\n        ERC20(Token.unwrap(self)).permit(owner, spender, value, deadline, v, r, s);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/swap-pool/src/libs/SwapLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport { SafeCastLib } from \\\"solady/utils/SafeCastLib.sol\\\";\\n\\nuint256 constant BPS = 10_000;\\n\\n/// @title SwapLib\\n/// @notice Library for calculating swap amounts and reserves\\n/// @author KONFeature <https://github.com/KONFeature>\\n/// @author Modified from (https://github.com/Philogy/singleton-swapper/blob/main/src/libs/SwapLib.sol) by Phylogy\\nlibrary SwapLib {\\n    using SafeCastLib for uint256;\\n\\n    error MathOverflow();\\n    error TooLargeSwap();\\n\\n    /// @dev 'bytes4(keccak256(\\\"MathOverflow()\\\"))'\\n    uint256 private constant _MATH_OVERFLOW_SELECTOR = 0x9d565d4e;\\n\\n    /// @dev 'bytes4(keccak256(\\\"TooLargeSwap()\\\"))'\\n    uint256 private constant _TOO_LARGE_SWAP_SELECTOR = 0xa4b94c7d;\\n\\n    /// @notice Calculate a swap amount given a pair reserves, direction and feeBps\\n    function swap(\\n        uint256 reserves0,\\n        uint256 reserves1,\\n        bool zeroForOne,\\n        uint256 amount,\\n        uint256 feeBps\\n    )\\n        internal\\n        pure\\n        returns (uint256 newReserves0, uint256 newReserves1, int256 delta0, int256 delta1)\\n    {\\n        if (zeroForOne) {\\n            delta0 = amount.toInt256();\\n            (newReserves0, newReserves1) = swapXForY(reserves0, reserves1, amount, feeBps);\\n            delta1 = newReserves1.toInt256() - reserves1.toInt256();\\n        } else {\\n            delta1 = amount.toInt256();\\n            (newReserves1, newReserves0) = swapXForY(reserves1, reserves0, amount, feeBps);\\n            delta0 = newReserves0.toInt256() - reserves0.toInt256();\\n        }\\n    }\\n\\n    /// @notice Calculates the `newX` and `newY` of a pool after swapping `amount` from the current reserve `x` and `y`\\n    /// @notice Applying `feeBps` fee to the pool\\n    /// @dev It will also ensure that the user isn't swapping more than the reserves, too prevent too large\\n    /// liquidity movment\\n    function swapXForY(\\n        uint256 x,\\n        uint256 y,\\n        uint256 amount,\\n        uint256 feeBps\\n    )\\n        internal\\n        pure\\n        returns (uint256 newX, uint256 newY)\\n    {\\n        assembly {\\n            // Ensure the swap isn't too large\\n            if gt(amount, x) {\\n                mstore(0x00, _TOO_LARGE_SWAP_SELECTOR)\\n                revert(0x1c, 0x04)\\n            }\\n            // Compute the new X\\n            newX := add(amount, x)\\n\\n            // Ensure the math didn't overflow\\n            if gt(amount, newX) {\\n                mstore(0x00, _MATH_OVERFLOW_SELECTOR)\\n                revert(0x1c, 0x04)\\n            }\\n\\n            // xToY = x * y\\n            // newXSubFees = x + (amount * (BPS - feeBps)) /  / BPS\\n            let xToY := mul(x, y)\\n            let newXSubFees := add(x, div(mul(amount, sub(BPS, feeBps)), BPS))\\n\\n            // Ensure it didn't overflow\\n            if or(gt(x, xToY), gt(x, newXSubFees)) {\\n                mstore(0x00, _MATH_OVERFLOW_SELECTOR)\\n                revert(0x1c, 0x04)\\n            }\\n\\n            // Compute new y reserve (xToY / newXSubFees)\\n            newY := div(xToY, newXSubFees)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/swap-pool/src/Ops.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Ops\\n/// @notice This library contains all the operations that can be performed by the swap contracts\\n/// @author KONFeature <https://github.com/KONFeature>\\n/// @author Modified from Philogy (https://github.com/Philogy/singleton-swapper/blob/main/src/Ops.sol) by Philogy\\nlibrary Ops {\\n    /// @dev The mask used to extract the operation type\\n    uint256 internal constant MASK_OP = 0xf0;\\n\\n    /// @dev The Ops for the swap operation\\n    uint256 internal constant SWAP = 0x00;\\n\\n    /// @dev The mask used to extract the operation direction (0001)\\n    uint256 internal constant SWAP_DIR = 0x01;\\n\\n    /// @dev Tell if we need to have a deadline to our `SWAP` operation (0010)\\n    uint256 internal constant SWAP_DEADLINE = 0x02;\\n\\n    /// @dev The Ops for the send all token operation (from pool to user)\\n    uint256 internal constant SEND_ALL = 0x10;\\n\\n    /// @dev The Ops for the receive all token operation (from user to pool)\\n    uint256 internal constant RECEIVE_ALL = 0x20;\\n\\n    /// @dev The Ops for the send token operation (from pool to user)\\n    uint256 internal constant SEND = 0x30;\\n\\n    /// @dev The Ops for the receive token operation (from user to pool)\\n    uint256 internal constant RECEIVE = 0x40;\\n\\n    /// @dev The Ops for the permit operation (using EIP-2612)\\n    uint256 internal constant PERMIT_WITHDRAW_VIA_SIG = 0x50;\\n\\n    /// @dev The Ops for the add liquidity operation\\n    uint256 internal constant ADD_LIQ = 0x60;\\n\\n    /// @dev The Ops for the remove liquidity operation\\n    uint256 internal constant RM_LIQ = 0x70;\\n\\n    /// @dev The Ops for the claim fees operation from the operator\\n    uint256 internal constant CLAIM_ALL_FEES = 0x80;\\n\\n    /// @dev The minimum amount of token for the `ALL` operations (0001)\\n    uint256 internal constant ALL_MIN_BOUND = 0x01;\\n    /// @dev The maximum amount of token for the `ALL` operations (0010)\\n    uint256 internal constant ALL_MAX_BOUND = 0x02;\\n}\\n\"\r\n    },\r\n    \"lib/swap-pool/src/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/// @notice Reentrancy protection for smart contracts\\nabstract contract ReentrancyGuard {\\n    uint256 private reentrancyLock = 1;\\n\\n    modifier nonReentrant() virtual {\\n        require(reentrancyLock == 1);\\n        reentrancyLock = 2;\\n\\n        _;\\n\\n        reentrancyLock = 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/swap-pool/src/encoder/DecoderLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/// @title DecoderLib\\n/// @notice A library for decoding data inside a programm\\n/// @author KONFeature <https://github.com/KONFeature>\\n/// @author Inspired by (https://github.com/Philogy/singleton-swapper/blob/main/src/MegaPool.sol) by Philogy\\nlibrary DecoderLib {\\n    /// @dev Reads an address from an encoded program: `self`\\n    function readAddress(uint256 self) internal pure returns (uint256 newPtr, address addr) {\\n        assembly (\\\"memory-safe\\\") {\\n            newPtr := add(self, 20)\\n            addr := shr(96, calldataload(self))\\n        }\\n    }\\n\\n    /// @dev Reads a boolean from an encoded program: `self`\\n    /// @dev Warning, the output boolean will be false if 0, or true if > 1 (encoded on 0xF)\\n    function readBool(uint256 self) internal pure returns (uint256 newPtr, bool boolean) {\\n        assembly (\\\"memory-safe\\\") {\\n            newPtr := add(self, 1)\\n            boolean := shr(248, calldataload(self))\\n        }\\n    }\\n\\n    /// @dev Reads an uint from an encoded program, `self`, encoded on 1 bytes\\n    function readUint8(uint256 self) internal pure returns (uint256 newPtr, uint256 x) {\\n        assembly (\\\"memory-safe\\\") {\\n            newPtr := add(self, 1)\\n            x := shr(248, calldataload(self))\\n        }\\n    }\\n\\n    /// @dev Reads an uint from an encoded program, `self`, encoded on 6 bytes\\n    function readUint48(uint256 self) internal pure returns (uint256 newPtr, uint256 x) {\\n        assembly (\\\"memory-safe\\\") {\\n            newPtr := add(self, 6)\\n            x := shr(208, calldataload(self))\\n        }\\n    }\\n\\n    /// @dev Reads an uint from an encoded program, `self`, encoded on 16 bytes\\n    function readUint128(uint256 self) internal pure returns (uint256 newPtr, uint256 x) {\\n        assembly (\\\"memory-safe\\\") {\\n            newPtr := add(self, 16)\\n            x := shr(128, calldataload(self))\\n        }\\n    }\\n\\n    /// @dev Reads an uint from an encoded program, `self`, encoded on 32 bytes\\n    function readUint256(uint256 self) internal pure returns (uint256 newPtr, uint256 x) {\\n        assembly (\\\"memory-safe\\\") {\\n            newPtr := add(self, 32)\\n            x := calldataload(self)\\n        }\\n    }\\n\\n    /// @dev Reads a bytes from an encoded program: `self`, encoded on 32 bytes\\n    function readBytes32(uint256 self) internal pure returns (uint256 newPtr, bytes32 x) {\\n        assembly (\\\"memory-safe\\\") {\\n            newPtr := add(self, 32)\\n            x := calldataload(self)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solady/src/utils/FixedPointMathLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\nlibrary FixedPointMathLib {\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev The operation failed, as the output exceeds the maximum value of uint256.\\n    error ExpOverflow();\\n\\n    /// @dev The operation failed, as the output exceeds the maximum value of uint256.\\n    error FactorialOverflow();\\n\\n    /// @dev The operation failed, due to an overflow.\\n    error RPowOverflow();\\n\\n    /// @dev The operation failed, due to an multiplication overflow.\\n    error MulWadFailed();\\n\\n    /// @dev The operation failed, either due to a\\n    /// multiplication overflow, or a division by a zero.\\n    error DivWadFailed();\\n\\n    /// @dev The multiply-divide operation failed, either due to a\\n    /// multiplication overflow, or a division by a zero.\\n    error MulDivFailed();\\n\\n    /// @dev The division failed, as the denominator is zero.\\n    error DivFailed();\\n\\n    /// @dev The full precision multiply-divide operation failed, either due\\n    /// to the result being larger than 256 bits, or a division by a zero.\\n    error FullMulDivFailed();\\n\\n    /// @dev The output is undefined, as the input is less-than-or-equal to zero.\\n    error LnWadUndefined();\\n\\n    /// @dev The output is undefined, as the input is zero.\\n    error Log2Undefined();\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev The scalar of ETH and most ERC20s.\\n    uint256 internal constant WAD = 1e18;\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*              SIMPLIFIED FIXED POINT OPERATIONS             */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Equivalent to `(x * y) / WAD` rounded down.\\n    function mulWad(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to `require(y == 0 || x <= type(uint256).max / y)`.\\n            if mul(y, gt(x, div(not(0), y))) {\\n                // Store the function selector of `MulWadFailed()`.\\n                mstore(0x00, 0xbac65e5b)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            z := div(mul(x, y), WAD)\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * y) / WAD` rounded up.\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to `require(y == 0 || x <= type(uint256).max / y)`.\\n            if mul(y, gt(x, div(not(0), y))) {\\n                // Store the function selector of `MulWadFailed()`.\\n                mstore(0x00, 0xbac65e5b)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            z := add(iszero(iszero(mod(mul(x, y), WAD))), div(mul(x, y), WAD))\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * WAD) / y` rounded down.\\n    function divWad(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to `require(y != 0 && (WAD == 0 || x <= type(uint256).max / WAD))`.\\n            if iszero(mul(y, iszero(mul(WAD, gt(x, div(not(0), WAD)))))) {\\n                // Store the function selector of `DivWadFailed()`.\\n                mstore(0x00, 0x7c5f487d)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            z := div(mul(x, WAD), y)\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * WAD) / y` rounded up.\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to `require(y != 0 && (WAD == 0 || x <= type(uint256).max / WAD))`.\\n            if iszero(mul(y, iszero(mul(WAD, gt(x, div(not(0), WAD)))))) {\\n                // Store the function selector of `DivWadFailed()`.\\n                mstore(0x00, 0x7c5f487d)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            z := add(iszero(iszero(mod(mul(x, WAD), y))), div(mul(x, WAD), y))\\n        }\\n    }\\n\\n    /// @dev Equivalent to `x` to the power of `y`.\\n    /// because `x ** y = (e ** ln(x)) ** y = e ** (ln(x) * y)`.\\n    function powWad(int256 x, int256 y) internal pure returns (int256) {\\n        // Using `ln(x)` means `x` must be greater than 0.\\n        return expWad((lnWad(x) * y) / int256(WAD));\\n    }\\n\\n    /// @dev Returns `exp(x)`, denominated in `WAD`.\\n    function expWad(int256 x) internal pure returns (int256 r) {\\n        unchecked {\\n            // When the result is < 0.5 we return zero. This happens when\\n            // x <= floor(log(0.5e18) * 1e18) ~ -42e18\\n            if (x <= -42139678854452767551) return r;\\n\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // When the result is > (2**255 - 1) / 1e18 we can not represent it as an\\n                // int. This happens when x >= floor(log((2**255 - 1) / 1e18) * 1e18) ~ 135.\\n                if iszero(slt(x, 135305999368893231589)) {\\n                    // Store the function selector of `ExpOverflow()`.\\n                    mstore(0x00, 0xa37bfec9)\\n                    // Revert with (offset, size).\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n\\n            // x is now in the range (-42, 136) * 1e18. Convert to (-42, 136) * 2**96\\n            // for more intermediate precision and a binary basis. This base conversion\\n            // is a multiplication by 1e18 / 2**96 = 5**18 / 2**78.\\n            x = (x << 78) / 5 ** 18;\\n\\n            // Reduce range of x to (-\u00bd ln 2, \u00bd ln 2) * 2**96 by factoring out powers\\n            // of two such that exp(x) = exp(x') * 2**k, where k is an integer.\\n            // Solving this gives k = round(x / log(2)) and x' = x - k * log(2).\\n            int256 k = ((x << 96) / 54916777467707473351141471128 + 2 ** 95) >> 96;\\n            x = x - k * 54916777467707473351141471128;\\n\\n            // k is in the range [-61, 195].\\n\\n            // Evaluate using a (6, 7)-term rational approximation.\\n            // p is made monic, we'll multiply by a scale factor later.\\n            int256 y = x + 1346386616545796478920950773328;\\n            y = ((y * x) >> 96) + 57155421227552351082224309758442;\\n            int256 p = y + x - 94201549194550492254356042504812;\\n            p = ((p * y) >> 96) + 28719021644029726153956944680412240;\\n            p = p * x + (4385272521454847904659076985693276 << 96);\\n\\n            // We leave p in 2**192 basis so we don't need to scale it back up for the division.\\n            int256 q = x - 2855989394907223263936484059900;\\n            q = ((q * x) >> 96) + 50020603652535783019961831881945;\\n            q = ((q * x) >> 96) - 533845033583426703283633433725380;\\n            q = ((q * x) >> 96) + 3604857256930695427073651918091429;\\n            q = ((q * x) >> 96) - 14423608567350463180887372962807573;\\n            q = ((q * x) >> 96) + 26449188498355588339934803723976023;\\n\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // Div in assembly because solidity adds a zero check despite the unchecked.\\n                // The q polynomial won't have zeros in the domain as all its roots are complex.\\n                // No scaling is necessary because p is already 2**96 too large.\\n                r := sdiv(p, q)\\n            }\\n\\n            // r should be in the range (0.09, 0.25) * 2**96.\\n\\n            // We now need to multiply r by:\\n            // * the scale factor s = ~6.031367120.\\n            // * the 2**k factor from the range reduction.\\n            // * the 1e18 / 2**96 factor for base conversion.\\n            // We do this all at once, with an intermediate result in 2**213\\n            // basis, so the final right shift is always by a positive amount.\\n            r = int256(\\n                (uint256(r) * 3822833074963236453042738258902158003155416615667) >> uint256(195 - k)\\n            );\\n        }\\n    }\\n\\n    /// @dev Returns `ln(x)`, denominated in `WAD`.\\n    function lnWad(int256 x) internal pure returns (int256 r) {\\n        unchecked {\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                if iszero(sgt(x, 0)) {\\n                    // Store the function selector of `LnWadUndefined()`.\\n                    mstore(0x00, 0x1615e638)\\n                    // Revert with (offset, size).\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n\\n            // We want to convert x from 10**18 fixed point to 2**96 fixed point.\\n            // We do this by multiplying by 2**96 / 10**18. But since\\n            // ln(x * C) = ln(x) + ln(C), we can simply do nothing here\\n            // and add ln(2**96 / 10**18) at the end.\\n\\n            // Compute k = log2(x) - 96.\\n            int256 k;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let v := x\\n                k := shl(7, lt(0xffffffffffffffffffffffffffffffff, v))\\n                k := or(k, shl(6, lt(0xffffffffffffffff, shr(k, v))))\\n                k := or(k, shl(5, lt(0xffffffff, shr(k, v))))\\n\\n                // For the remaining 32 bits, use a De Bruijn lookup.\\n                // See: https://graphics.stanford.edu/~seander/bithacks.html\\n                v := shr(k, v)\\n                v := or(v, shr(1, v))\\n                v := or(v, shr(2, v))\\n                v := or(v, shr(4, v))\\n                v := or(v, shr(8, v))\\n                v := or(v, shr(16, v))\\n\\n                // forgefmt: disable-next-item\\n                k := sub(or(k, byte(shr(251, mul(v, shl(224, 0x07c4acdd))),\\n                    0x0009010a0d15021d0b0e10121619031e080c141c0f111807131b17061a05041f)), 96)\\n            }\\n\\n            // Reduce range of x to (1, 2) * 2**96\\n            // ln(2^k * x) = k * ln(2) + ln(x)\\n            x <<= uint256(159 - k);\\n            x = int256(uint256(x) >> 159);\\n\\n            // Evaluate using a (8, 8)-term rational approximation.\\n            // p is made monic, we will multiply by a scale factor later.\\n            int256 p = x + 3273285459638523848632254066296;\\n            p = ((p * x) >> 96) + 24828157081833163892658089445524;\\n            p = ((p * x) >> 96) + 43456485725739037958740375743393;\\n            p = ((p * x) >> 96) - 11111509109440967052023855526967;\\n            p = ((p * x) >> 96) - 45023709667254063763336534515857;\\n            p = ((p * x) >> 96) - 14706773417378608786704636184526;\\n            p = p * x - (795164235651350426258249787498 << 96);\\n\\n            // We leave p in 2**192 basis so we don't need to scale it back up for the division.\\n            // q is monic by convention.\\n            int256 q = x + 5573035233440673466300451813936;\\n            q = ((q * x) >> 96) + 71694874799317883764090561454958;\\n            q = ((q * x) >> 96) + 283447036172924575727196451306956;\\n            q = ((q * x) >> 96) + 401686690394027663651624208769553;\\n            q = ((q * x) >> 96) + 204048457590392012362485061816622;\\n            q = ((q * x) >> 96) + 31853899698501571402653359427138;\\n            q = ((q * x) >> 96) + 909429971244387300277376558375;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // Div in assembly because solidity adds a zero check despite the unchecked.\\n                // The q polynomial is known not to have zeros in the domain.\\n                // No scaling required because p is already 2**96 too large.\\n                r := sdiv(p, q)\\n            }\\n\\n            // r is in the range (0, 0.125) * 2**96\\n\\n            // Finalization, we need to:\\n            // * multiply by the scale factor s = 5.549\u2026\\n            // * add ln(2**96 / 10**18)\\n            // * add k * ln(2)\\n            // * multiply by 10**18 / 2**96 = 5**18 >> 78\\n\\n            // mul s * 5e18 * 2**96, base is now 5**18 * 2**192\\n            r *= 1677202110996718588342820967067443963516166;\\n            // add ln(2) * k * 5e18 * 2**192\\n            r += 16597577552685614221487285958193947469193820559219878177908093499208371 * k;\\n            // add ln(2**96 / 10**18) * 5e18 * 2**192\\n            r += 600920179829731861736702779321621459595472258049074101567377883020018308;\\n            // base conversion: mul 2**18 / 2**192\\n            r >>= 174;\\n        }\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                  GENERAL NUMBER UTILITIES                  */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Calculates `floor(a * b / d)` with full precision.\\n    /// Throws if result overflows a uint256 or when `d` is zero.\\n    /// Credit to Remco Bloemen under MIT license: https://2\u03c0.com/21/muldiv\\n    function fullMulDiv(uint256 x, uint256 y, uint256 d) internal pure returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // forgefmt: disable-next-item\\n            for {} 1 {} {\\n                // 512-bit multiply `[prod1 prod0] = x * y`.\\n                // Compute the product mod `2**256` and mod `2**256 - 1`\\n                // then use the Chinese Remainder Theorem to reconstruct\\n                // the 512 bit result. The result is stored in two 256\\n                // variables such that `product = prod1 * 2**256 + prod0`.\\n\\n                // Least significant 256 bits of the product.\\n                let prod0 := mul(x, y)\\n                let mm := mulmod(x, y, not(0))\\n                // Most significant 256 bits of the product.\\n                let prod1 := sub(mm, add(prod0, lt(mm, prod0)))\\n\\n                // Handle non-overflow cases, 256 by 256 division.\\n                if iszero(prod1) {\\n                    if iszero(d) {\\n                        // Store the function selector of `FullMulDivFailed()`.\\n                        mstore(0x00, 0xae47f702)\\n                        // Revert with (offset, size).\\n                        revert(0x1c, 0x04)\\n                    }\\n                    result := div(prod0, d)\\n                    break       \\n                }\\n\\n                // Make sure the result is less than `2**256`.\\n                // Also prevents `d == 0`.\\n                if iszero(gt(d, prod1)) {\\n                    // Store the function selector of `FullMulDivFailed()`.\\n                    mstore(0x00, 0xae47f702)\\n                    // Revert with (offset, size).\\n                    revert(0x1c, 0x04)\\n                }\\n\\n                ///////////////////////////////////////////////\\n                // 512 by 256 division.\\n                ///////////////////////////////////////////////\\n\\n                // Make division exact by subtracting the remainder from `[prod1 prod0]`.\\n                // Compute remainder using mulmod.\\n                let remainder := mulmod(x, y, d)\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n                // Factor powers of two out of `d`.\\n                // Compute largest power of two divisor of `d`.\\n                // Always greater or equal to 1.\\n                let twos := and(d, sub(0, d))\\n                // Divide d by power of two.\\n                d := div(d, twos)\\n                // Divide [prod1 prod0] by the factors of two.\\n                prod0 := div(prod0, twos)\\n                // Shift in bits from `prod1` into `prod0`. For this we need\\n                // to flip `twos` such that it is `2**256 / twos`.\\n                // If `twos` is zero, then it becomes one.\\n                prod0 := or(prod0, mul(prod1, add(div(sub(0, twos), twos), 1)))\\n                // Invert `d mod 2**256`\\n                // Now that `d` is an odd number, it has an inverse\\n                // modulo `2**256` such that `d * inv = 1 mod 2**256`.\\n                // Compute the inverse by starting with a seed that is correct\\n                // correct for four bits. That is, `d * inv = 1 mod 2**4`.\\n                let inv := xor(mul(3, d), 2)\\n                // Now use Newton-Raphson iteration to improve the precision.\\n                // Thanks to Hensel's lifting lemma, this also works in modular\\n                // arithmetic, doubling the correct bits in each step.\\n                inv := mul(inv, sub(2, mul(d, inv))) // inverse mod 2**8\\n                inv := mul(inv, sub(2, mul(d, inv))) // inverse mod 2**16\\n                inv := mul(inv, sub(2, mul(d, inv))) // inverse mod 2**32\\n                inv := mul(inv, sub(2, mul(d, inv))) // inverse mod 2**64\\n                inv := mul(inv, sub(2, mul(d, inv))) // inverse mod 2**128\\n                result := mul(prod0, mul(inv, sub(2, mul(d, inv)))) // inverse mod 2**256\\n                break\\n            }\\n        }\\n    }\\n\\n    /// @dev Calculates `floor(x * y / d)` with full precision, rounded up.\\n    /// Throws if result overflows a uint256 or when `d` is zero.\\n    /// Credit to Uniswap-v3-core under MIT license:\\n    /// https://github.com/Uniswap/v3-core/blob/contracts/libraries/FullMath.sol\\n    function fullMulDivUp(uint256 x, uint256 y, uint256 d) internal pure returns (uint256 result) {\\n        result = fullMulDiv(x, y, d);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if mulmod(x, y, d) {\\n                if iszero(add(result, 1)) {\\n                    // Store the function selector of `FullMulDivFailed()`.\\n                    mstore(0x00, 0xae47f702)\\n                    // Revert with (offset, size).\\n                    revert(0x1c, 0x04)\\n                }\\n                result := add(result, 1)\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns `floor(x * y / d)`.\\n    /// Reverts if `x * y` overflows, or `d` is zero.\\n    function mulDiv(uint256 x, uint256 y, uint256 d) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(d != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(mul(d, iszero(mul(y, gt(x, div(not(0), y)))))) {\\n                // Store the function selector of `MulDivFailed()`.\\n                mstore(0x00, 0xad251c27)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            z := div(mul(x, y), d)\\n        }\\n    }\\n\\n    /// @dev Returns `ceil(x * y / d)`.\\n    /// Reverts if `x * y` overflows, or `d` is zero.\\n    function mulDivUp(uint256 x, uint256 y, uint256 d) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(d != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(mul(d, iszero(mul(y, gt(x, div(not(0), y)))))) {\\n                // Store the function selector of `MulDivFailed()`.\\n                mstore(0x00, 0xad251c27)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            z := add(iszero(iszero(mod(mul(x, y), d))), div(mul(x, y), d))\\n        }\\n    }\\n\\n    /// @dev Returns `ceil(x / d)`.\\n    /// Reverts if `d` is zero.\\n    function divUp(uint256 x, uint256 d) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(d) {\\n                // Store the function selector of `DivFailed()`.\\n                mstore(0x00, 0x65244e4e)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            z := add(iszero(iszero(mod(x, d))), div(x, d))\\n        }\\n    }\\n\\n    /// @dev Returns `max(0, x - y)`.\\n    function zeroFloorSub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := mul(gt(x, y), sub(x, y))\\n        }\\n    }\\n\\n    /// @dev Exponentiate `x` to `y` by squaring, denominated in base `b`.\\n    /// Reverts if the computation overflows.\\n    function rpow(uint256 x, uint256 y, uint256 b) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // `0 ** 0 = 1`. Otherwise, `0 ** n = 0`.\\n            z := mul(b, iszero(y))\\n            if x {\\n                // `z = isEven(y) ? scale : x`\\n                z := xor(b, mul(xor(b, x), and(y, 1)))\\n                // Divide `b` by 2.\\n                let half := shr(1, b)\\n                // Divide `y` by 2 every iteration.\\n                for { y := shr(1, y) } y { y := shr(1, y) } {\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n                    // Revert if `xx + half` overflowed,\\n                    // or if `x ** 2` overflows.\\n                    if or(lt(xxRound, xx), shr(128, x)) {\\n                        // Store the function selector of `RPowOverflow()`.\\n                        mstore(0x00, 0x49f7642b)\\n                        // Revert with (offset, size).\\n                        revert(0x1c, 0x04)\\n                    }\\n                    // Set `x` to scaled `xxRound`.\\n                    x := div(xxRound, b)\\n                    // If `y` is odd:\\n                    if and(y, 1) {\\n                        // Compute `z * x`.\\n                        let zx := mul(z, x)\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n                        // If `z * x` overflowed or `zx + half` overflowed:\\n                        if or(xor(div(zx, x), z), lt(zxRound, zx)) {\\n                            // Revert if `x` is non-zero.\\n                            if iszero(iszero(x)) {\\n                                // Store the function selector of `RPowOverflow()`.\\n                                mstore(0x00, 0x49f7642b)\\n                                // Revert with (offset, size).\\n                                revert(0x1c, 0x04)\\n                            }\\n                        }\\n                        // Return properly scaled `zxRound`.\\n                        z := div(zxRound, b)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the square root of `x`.\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // `floor(sqrt(2**15)) = 181`. `sqrt(2**15) - 181 = 2.84`.\\n            z := 181 // The \\\"correct\\\" value is 1, but this saves a multiplication later.\\n\\n            // This segment is to get a reasonable initial estimate for the Babylonian method. With a bad\\n            // start, the correct # of bits increases ~linearly each iteration instead of ~quadratically.\\n\\n            // Let `y = x / 2**r`.\\n            // We check `y >= 2**(k + 8)` but shift right by `k` bits\\n            // each branch to ensure that if `x >= 256`, then `y >= 256`.\\n            let r := shl(7, lt(0xffffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffffff, shr(r, x))))\\n            z := shl(shr(1, r), z)\\n\\n            // Goal was to get `z*z*y` within a small factor of `x`. More iterations could\\n            // get y in a tighter range. Currently, we will have y in `[256, 256*(2**16))`.\\n            // We ensured `y >= 256` so that the relative difference between `y` and `y+1` is small.\\n            // That's not possible if `x < 256` but we can just verify those cases exhaustively.\\n\\n            // Now, `z*z*y <= x < z*z*(y+1)`, and `y <= 2**(16+8)`, and either `y >= 256`, or `x < 256`.\\n            // Correctness can be checked exhaustively for `x < 256`, so we assume `y >= 256`.\\n            // Then `z*sqrt(y)` is within `sqrt(257)/sqrt(256)` of `sqrt(x)`, or about 20bps.\\n\\n            // For `s` in the range `[1/256, 256]`, the estimate `f(s) = (181/1024) * (s+1)`\\n            // is in the range `(1/2.84 * sqrt(s), 2.84 * sqrt(s))`,\\n            // with largest error when `s = 1` and when `s = 256` or `1/256`.\\n\\n            // Since `y` is in `[256, 256*(2**16))`, let `a = y/65536`, so that `a` is in `[1/256, 256)`.\\n            // Then we can estimate `sqrt(y)` using\\n            // `sqrt(65536) * 181/1024 * (a + 1) = 181/4 * (y + 65536)/65536 = 181 * (y + 65536)/2**18`.\\n\\n            // There is no overflow risk here since `y < 2**136` after the first branch above.\\n            z := shr(18, mul(z, add(shr(r, x), 65536))) // A `mul()` is saved from starting `z` at 181.\\n\\n            // Given the worst case multiplicative error of 2.84 above, 7 iterations should be enough.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // If `x+1` is a perfect square, the Babylonian method cycles between\\n            // `floor(sqrt(x))` and `ceil(sqrt(x))`. This statement ensures we return floor.\\n            // See: https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\\n            // Since the ceil is rare, we save gas on the assignment and repeat division in the rare case.\\n            // If you don't care whether the floor or ceil square root is returned, you can remove this statement.\\n            z := sub(z, lt(div(x, z), z))\\n        }\\n    }\\n\\n    /// @dev Returns the cube root of `x`.\\n    /// Credit to bout3fiddy and pcaversaccio under AGPLv3 license:\\n    /// https://github.com/pcaversaccio/snekmate/blob/main/src/utils/Math.vy\\n    function cbrt(uint256 x) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n\\n            z := shl(add(div(r, 3), lt(0xf, shr(r, x))), 0xff)\\n            z := div(z, byte(mod(r, 3), shl(232, 0x7f624b)))\\n\\n            z := div(add(add(div(x, mul(z, z)), z), z), 3)\\n            z := div(add(add(div(x, mul(z, z)), z), z), 3)\\n            z := div(add(add(div(x, mul(z, z)), z), z), 3)\\n            z := div(add(add(div(x, mul(z, z)), z), z), 3)\\n            z := div(add(add(div(x, mul(z, z)), z), z), 3)\\n            z := div(add(add(div(x, mul(z, z)), z), z), 3)\\n            z := div(add(add(div(x, mul(z, z)), z), z), 3)\\n\\n            z := sub(z, lt(div(x, mul(z, z)), z))\\n        }\\n    }\\n\\n    /// @dev Returns the factorial of `x`.\\n    function factorial(uint256 x) internal pure returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(lt(x, 58)) {\\n                // Store the function selector of `FactorialOverflow()`.\\n                mstore(0x00, 0xaba0f2a2)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            for { result := 1 } x {} {\\n                result := mul(result, x)\\n                x := sub(x, 1)\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the log2 of `x`.\\n    /// Equivalent to computing the index of the most significant bit (MSB) of `x`.\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(x) {\\n                // Store the function selector of `Log2Undefined()`.\\n                mstore(0x00, 0x5be3aa5c)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n\\n            // For the remaining 32 bits, use a De Bruijn lookup.\\n            // See: https://graphics.stanford.edu/~seander/bithacks.html\\n            x := shr(r, x)\\n            x := or(x, shr(1, x))\\n            x := or(x, shr(2, x))\\n            x := or(x, shr(4, x))\\n            x := or(x, shr(8, x))\\n            x := or(x, shr(16, x))\\n\\n            // forgefmt: disable-next-item\\n            r := or(r, byte(shr(251, mul(x, shl(224, 0x07c4acdd))),\\n                0x0009010a0d15021d0b0e10121619031e080c141c0f111807131b17061a05041f))\\n        }\\n    }\\n\\n    /// @dev Returns the log2 of `x`, rounded up.\\n    function log2Up(uint256 x) internal pure returns (uint256 r) {\\n        unchecked {\\n            uint256 isNotPo2;\\n            assembly {\\n                isNotPo2 := iszero(iszero(and(x, sub(x, 1))))\\n            }\\n            return log2(x) + isNotPo2;\\n        }\\n    }\\n\\n    /// @dev Returns the average of `x` and `y`.\\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            z = (x & y) + ((x ^ y) >> 1);\\n        }\\n    }\\n\\n    /// @dev Returns the average of `x` and `y`.\\n    function avg(int256 x, int256 y) internal pure returns (int256 z) {\\n        unchecked {\\n            z = (x >> 1) + (y >> 1) + (((x & 1) + (y & 1)) >> 1);\\n        }\\n    }\\n\\n    /// @dev Returns the absolute value of `x`.\\n    function abs(int256 x) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let mask := sub(0, shr(255, x))\\n            z := xor(mask, add(mask, x))\\n        }\\n    }\\n\\n    /// @dev Returns the absolute distance between `x` and `y`.\\n    function dist(int256 x, int256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let a := sub(y, x)\\n            z := xor(a, mul(xor(a, sub(x, y)), sgt(x, y)))\\n        }\\n    }\\n\\n    /// @dev Returns the minimum of `x` and `y`.\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := xor(x, mul(xor(x, y), lt(y, x)))\\n        }\\n    }\\n\\n    /// @dev Returns the minimum of `x` and `y`.\\n    function min(int256 x, int256 y) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := xor(x, mul(xor(x, y), slt(y, x)))\\n        }\\n    }\\n\\n    /// @dev Returns the maximum of `x` and `y`.\\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := xor(x, mul(xor(x, y), gt(y, x)))\\n        }\\n    }\\n\\n    /// @dev Returns the maximum of `x` and `y`.\\n    function max(int256 x, int256 y) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := xor(x, mul(xor(x, y), sgt(y, x)))\\n        }\\n    }\\n\\n    /// @dev Returns `x`, bounded to `minValue` and `maxValue`.\\n    function clamp(uint256 x, uint256 minValue, uint256 maxValue)\\n        internal\\n        pure\\n        returns (uint256 z)\\n    {\\n        z = min(max(x, minValue), maxValue);\\n    }\\n\\n    /// @dev Returns `x`, bounded to `minValue` and `maxValue`.\\n    function clamp(int256 x, int256 minValue, int256 maxValue) internal pure returns (int256 z) {\\n        z = min(max(x, minValue), maxValue);\\n    }\\n\\n    /// @dev Returns greatest common divisor of `x` and `y`.\\n    function gcd(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // forgefmt: disable-next-item\\n            for { z := x } y {} {\\n                let t := y\\n                y := mod(z, y)\\n                z := t\\n            }\\n        }\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                   RAW NUMBER OPERATIONS                    */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Returns `x + y`, without checking for overflow.\\n    function rawAdd(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            z = x + y;\\n        }\\n    }\\n\\n    /// @dev Returns `x + y`, without checking for overflow.\\n    function rawAdd(int256 x, int256 y) internal pure returns (int256 z) {\\n        unchecked {\\n            z = x + y;\\n        }\\n    }\\n\\n    /// @dev Returns `x - y`, without checking for underflow.\\n    function rawSub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            z = x - y;\\n        }\\n    }\\n\\n    /// @dev Returns `x - y`, without checking for underflow.\\n    function rawSub(int256 x, int256 y) internal pure returns (int256 z) {\\n        unchecked {\\n            z = x - y;\\n        }\\n    }\\n\\n    /// @dev Returns `x * y`, without checking for overflow.\\n    function rawMul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            z = x * y;\\n        }\\n    }\\n\\n    /// @dev Returns `x * y`, without checking for overflow.\\n    function rawMul(int256 x, int256 y) internal pure returns (int256 z) {\\n        unchecked {\\n            z = x * y;\\n        }\\n    }\\n\\n    /// @dev Returns `x / y`, returning 0 if `y` is zero.\\n    function rawDiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := div(x, y)\\n        }\\n    }\\n\\n    /// @dev Returns `x / y`, returning 0 if `y` is zero.\\n    function rawSDiv(int256 x, int256 y) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := sdiv(x, y)\\n        }\\n    }\\n\\n    /// @dev Returns `x % y`, returning 0 if `y` is zero.\\n    function rawMod(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := mod(x, y)\\n        }\\n    }\\n\\n    /// @dev Returns `x % y`, returning 0 if `y` is zero.\\n    function rawSMod(int256 x, int256 y) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := smod(x, y)\\n        }\\n    }\\n\\n    /// @dev Returns `(x + y) % d`, return 0 if `d` if zero.\\n    function rawAddMod(uint256 x, uint256 y, uint256 d) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := addmod(x, y, d)\\n        }\\n    }\\n\\n    /// @dev Returns `(x * y) % d`, return 0 if `d` if zero.\\n    function rawMulMod(uint256 x, uint256 y, uint256 d) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := mulmod(x, y, d)\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@frak/=contracts/\",\r\n      \"@prb/test/=lib/prb-test/src/\",\r\n      \"@forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@oz-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"swap-pool/=lib/swap-pool/src/\",\r\n      \"solady/=lib/solady/src/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/node_modules/@openzeppelin/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"hardhat/=lib/openzeppelin-contracts/node_modules/hardhat/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"prb-test/=lib/prb-test/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100000,\r\n      \"details\": {\r\n        \"constantOptimizer\": true,\r\n        \"yul\": true\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"none\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AmountOutsideBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeadlineExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientLiquidity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNativeTransferAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"op\",\"type\":\"uint256\"}],\"name\":\"InvalidOp\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LeftOverDelta\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NegativeReceive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NegativeSend\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFeeReceiver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Swap0Amount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"name\":\"LiquidityUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feesColector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"}],\"name\":\"estimateSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"program\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"Token\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"Token\",\"name\":\"token1\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"}],\"name\":\"updateFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MonoPool", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "100000", "ConstructorArguments": "0000000000000000000000006261e4a478c98419eafa6289509c49058d21df8c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064000000000000000000000000517ecfa01e2f9a6955d8dd04867613e41309213d0000000000000000000000000000000000000000000000000000000000000064", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}