{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/AdminAccess.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport \\\"./utils/Ownable.sol\\\";\\r\\nimport \\\"./utils/ReentrancyGuard.sol\\\";\\r\\n\\r\\nerror VotingEnded();\\r\\nerror AlreadyVoted();\\r\\nerror AdminAlreadyExists();\\r\\nerror AdminDoesNotExists();\\r\\nerror canNotRemoveContractOwnerFromAdmin();\\r\\nerror AdminCanNotRemoveHimself();\\r\\nerror propsalAlreadySent();\\r\\nerror propsalNotInitialized();\\r\\n\\r\\ncontract AdminAccess is Ownable, ReentrancyGuard {\\r\\n    struct AddAdminRequest {\\r\\n        address Admin;\\r\\n        mapping(address => bool) approvals;\\r\\n        uint256 approvalCount;\\r\\n        bool executed;\\r\\n        bool initialized;\\r\\n    }\\r\\n\\r\\n    struct RemoveAdminRequest {\\r\\n        address Admin;\\r\\n        mapping(address => bool) approvals;\\r\\n        uint256 approvalCount;\\r\\n        bool executed;\\r\\n        bool initialized;\\r\\n    }\\r\\n\\r\\n    struct PauseVesting {\\r\\n        mapping(address => bool) approvals;\\r\\n        uint256 approvalCount;\\r\\n        bool executed;\\r\\n        bool initialized;\\r\\n    }\\r\\n\\r\\n    struct StartVesting {\\r\\n        mapping(address => bool) approvals;\\r\\n        uint256 approvalCount;\\r\\n        bool executed;\\r\\n        bool initialized;\\r\\n    }\\r\\n\\r\\n    mapping(address => bool) private admins;\\r\\n    mapping(address => AddAdminRequest) private addingAdminRequestNo;\\r\\n    mapping(address => RemoveAdminRequest) private RemovingAdminRequestNo;\\r\\n    mapping(uint256 => PauseVesting) private PauseVestings;\\r\\n    mapping(uint256 => StartVesting) private StartVestings;\\r\\n    address[] private _adminAddresses;\\r\\n    bool public paused = false;\\r\\n    uint256 public pauseProposalNo;\\r\\n    uint256 public StartVestingProposalNo;\\r\\n\\r\\n    event AdminAdded(address _admin);\\r\\n    event AdminRemoved(address _admin);\\r\\n\\r\\n    constructor() {\\r\\n        admins[owner()] = true;\\r\\n        _adminAddresses.push(owner());\\r\\n    }\\r\\n\\r\\n    function _addAdmin(address _admin) internal {\\r\\n        admins[_admin] = true;\\r\\n        _adminAddresses.push(_admin);\\r\\n        emit AdminAdded(_admin);\\r\\n    }\\r\\n\\r\\n    function addAdminProposal(\\r\\n        address _newAdmin\\r\\n    ) external onlyAdmin nonReentrant {\\r\\n        AddAdminRequest storage proposal = addingAdminRequestNo[_newAdmin];\\r\\n        if (admins[_newAdmin]) {\\r\\n            revert AdminAlreadyExists();\\r\\n        }\\r\\n        if (proposal.Admin == _newAdmin) {\\r\\n            revert propsalAlreadySent();\\r\\n        }\\r\\n        proposal.Admin = _newAdmin;\\r\\n        proposal.approvals[msg.sender] = false;\\r\\n        proposal.approvalCount = 0;\\r\\n        proposal.executed = false;\\r\\n        proposal.initialized = true;\\r\\n    }\\r\\n\\r\\n    function approveAddAdmin(\\r\\n        address _newAdmin\\r\\n    ) external onlyAdmin nonReentrant {\\r\\n        AddAdminRequest storage proposal = addingAdminRequestNo[_newAdmin];\\r\\n        if (!proposal.initialized) {\\r\\n            revert propsalNotInitialized();\\r\\n        }\\r\\n        if (admins[_newAdmin]) {\\r\\n            revert AdminAlreadyExists();\\r\\n        }\\r\\n        if (proposal.executed) {\\r\\n            revert VotingEnded();\\r\\n        }\\r\\n        if (proposal.approvals[msg.sender]) {\\r\\n            revert AlreadyVoted();\\r\\n        }\\r\\n        proposal.approvals[msg.sender] = true;\\r\\n        proposal.approvalCount++;\\r\\n\\r\\n        if (proposal.approvalCount >= getAdminCount()) {\\r\\n            proposal.executed = true;\\r\\n            _addAdmin(_newAdmin);\\r\\n            delete addingAdminRequestNo[_newAdmin];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _removeAdmin(address _admin) internal {\\r\\n        admins[_admin] = false;\\r\\n        _adminAddresses.pop();\\r\\n        emit AdminRemoved(_admin);\\r\\n    }\\r\\n\\r\\n    function removeAdminProposal(\\r\\n        address _admin\\r\\n    ) external onlyAdmin nonReentrant {\\r\\n        RemoveAdminRequest storage proposal = RemovingAdminRequestNo[_admin];\\r\\n        if (!admins[_admin]) {\\r\\n            revert AdminDoesNotExists();\\r\\n        }\\r\\n        if (msg.sender == _admin) {\\r\\n            revert AdminCanNotRemoveHimself();\\r\\n        }\\r\\n        if (proposal.Admin == _admin) {\\r\\n            revert propsalAlreadySent();\\r\\n        }\\r\\n        proposal.Admin = _admin;\\r\\n        proposal.approvals[msg.sender] = false;\\r\\n        proposal.approvalCount = 1;\\r\\n        proposal.executed = false;\\r\\n        proposal.initialized = true;\\r\\n    }\\r\\n\\r\\n    function approveRemoveAdmin(\\r\\n        address _admin\\r\\n    ) external onlyAdmin nonReentrant {\\r\\n        RemoveAdminRequest storage proposal = RemovingAdminRequestNo[_admin];\\r\\n        if (!proposal.initialized) {\\r\\n            revert propsalNotInitialized();\\r\\n        }\\r\\n        if (msg.sender == _admin) {\\r\\n            revert AdminCanNotRemoveHimself();\\r\\n        }\\r\\n        if (proposal.executed) {\\r\\n            revert VotingEnded();\\r\\n        }\\r\\n        if (proposal.approvals[msg.sender]) {\\r\\n            revert AlreadyVoted();\\r\\n        }\\r\\n        proposal.approvals[msg.sender] = true;\\r\\n        proposal.approvalCount++;\\r\\n\\r\\n        if (proposal.approvalCount >= getAdminCount()) {\\r\\n            proposal.executed = true;\\r\\n            _removeAdmin(_admin);\\r\\n            delete RemovingAdminRequestNo[_admin];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function createPauseVestingProposal() external onlyAdmin nonReentrant {\\r\\n        uint256 proposalId = pauseProposalNo++;\\r\\n        PauseVesting storage proposal = PauseVestings[proposalId];\\r\\n        proposal.approvals[msg.sender] = false;\\r\\n        proposal.approvalCount = 0;\\r\\n        proposal.executed = false;\\r\\n        proposal.initialized = true;\\r\\n    }\\r\\n\\r\\n    function approvePauseVestingProposal(\\r\\n        uint256 _ProposalId\\r\\n    ) external onlyAdmin nonReentrant {\\r\\n        PauseVesting storage proposal = PauseVestings[_ProposalId];\\r\\n        if (!proposal.initialized) {\\r\\n            revert propsalNotInitialized();\\r\\n        }\\r\\n        if (proposal.executed) {\\r\\n            revert VotingEnded();\\r\\n        }\\r\\n        if (proposal.approvals[msg.sender]) {\\r\\n            revert AlreadyVoted();\\r\\n        }\\r\\n        proposal.approvals[msg.sender] = true;\\r\\n        proposal.approvalCount++;\\r\\n\\r\\n        if (proposal.approvalCount >= getAdminCount()) {\\r\\n            proposal.executed = true;\\r\\n            paused = true;\\r\\n            delete PauseVestings[_ProposalId];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function createStartVestingProposal() external onlyAdmin nonReentrant {\\r\\n        uint256 proposalId = StartVestingProposalNo++;\\r\\n        StartVesting storage proposal = StartVestings[proposalId];\\r\\n        proposal.approvals[msg.sender] = false;\\r\\n        proposal.approvalCount = 0;\\r\\n        proposal.executed = false;\\r\\n        proposal.initialized = true;\\r\\n    }\\r\\n\\r\\n    function approveStartVestingProposal(\\r\\n        uint256 _ProposalId\\r\\n    ) external onlyAdmin nonReentrant {\\r\\n        StartVesting storage proposal = StartVestings[_ProposalId];\\r\\n        if (!proposal.initialized) {\\r\\n            revert propsalNotInitialized();\\r\\n        }\\r\\n        if (proposal.executed) {\\r\\n            revert VotingEnded();\\r\\n        }\\r\\n        if (proposal.approvals[msg.sender]) {\\r\\n            revert AlreadyVoted();\\r\\n        }\\r\\n        proposal.approvals[msg.sender] = true;\\r\\n        proposal.approvalCount++;\\r\\n\\r\\n        if (proposal.approvalCount >= getAdminCount()) {\\r\\n            proposal.executed = true;\\r\\n            paused = false;\\r\\n            delete StartVestings[_ProposalId];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isAdmin(address admin) public view returns (bool) {\\r\\n        return admins[admin];\\r\\n    }\\r\\n\\r\\n    function getAdminCount() public view returns (uint256) {\\r\\n        return _adminAddresses.length;\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(\\r\\n            admins[_msgSender()] || _msgSender() == owner(),\\r\\n            \\\"Caller does not have Admin Access\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/FloyxTokenVesting.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport \\\"./IFloyx.sol\\\";\\r\\nimport \\\"./AdminAccess.sol\\\";\\r\\nimport \\\"./utils/SafeMath.sol\\\";\\r\\n\\r\\n// Custom error for indicating that all tokens have been released for a beneficiary\\r\\nerror AllTokensAreReleleased(address _beneficiary);\\r\\nerror ZeroAddress();\\r\\nerror Zero_amount();\\r\\nerror VestingScheduleExists();\\r\\nerror VestingNotStarted();\\r\\nerror NoTokensToRelease();\\r\\nerror TokenMintingFailed();\\r\\nerror TokenCanNotBeMintedToAdmins();\\r\\nerror ReceiverShouldNotBeAddressZero();\\r\\nerror ownerShipCouldNotBeTransferred();\\r\\nerror InvalidRound();\\r\\nerror VestingSheduleIsPausedByAdmins();\\r\\nerror AirdropSheduleExists();\\r\\n\\r\\n/**\\r\\n * @title FloyxTokenVesting\\r\\n * @dev A token vesting contract that allows the controlled release of tokens over a specified period of time.\\r\\n */\\r\\ncontract FloyxTokenVesting is AdminAccess {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    IFloyx private immutable token;\\r\\n    uint256 private totalReleasedAmount;\\r\\n    uint256 private totalVestedAmount;\\r\\n    uint256 private seedStartTime;\\r\\n    uint256 private _startTime;\\r\\n    uint256 private _slicePeriod;\\r\\n    uint256 private _cliffPeriod;\\r\\n    uint256 private _releasedPercent;\\r\\n    uint256 private _tgePercent;\\r\\n    uint256 private _duration;\\r\\n    uint8 private VestingRoundNo;\\r\\n\\r\\n    struct VestingSchedule {\\r\\n        bool initialized;\\r\\n        uint256 startTime;\\r\\n        uint256 duration;\\r\\n        uint256 slicePeriod;\\r\\n        uint256 cliff;\\r\\n        uint256 amountTotal;\\r\\n        uint256 released;\\r\\n        uint256 releasedPercent;\\r\\n        uint256 tgePercent;\\r\\n    }\\r\\n\\r\\n    enum VestingRound {\\r\\n        Seed, //0\\r\\n        PrivateSale, //1\\r\\n        PublicSale, //2\\r\\n        StakingReward, //3\\r\\n        Liquidity, //4\\r\\n        PartnerShips, //5\\r\\n        Ecosystem, //6\\r\\n        Team, //7\\r\\n        Marketing, //8\\r\\n        Development, //9\\r\\n        Advisors, //10\\r\\n        Airdrop //11\\r\\n    }\\r\\n\\r\\n    mapping(address => mapping(uint8 => VestingSchedule))\\r\\n        public vestingSchedules;\\r\\n    mapping(uint8 => uint256) public vestedAmountInRounds;\\r\\n\\r\\n    // mapping(address => VestingSchedule) public vestingSchedules;\\r\\n\\r\\n    /**\\r\\n     * @dev Constructor function\\r\\n     * @param _token The address of the token contract\\r\\n     */\\r\\n    constructor(address _token) {\\r\\n        token = IFloyx(_token);\\r\\n    }\\r\\n\\r\\n    // Events\\r\\n    event addVesting(\\r\\n        address indexed beneficiary,\\r\\n        uint256 startTime,\\r\\n        uint256 duration,\\r\\n        uint256 slicePeriod,\\r\\n        uint256 cliff,\\r\\n        uint256 amountTotal,\\r\\n        uint256 releasedPercent,\\r\\n        uint256 tgePercent\\r\\n    );\\r\\n\\r\\n    event addAirdrop(\\r\\n        address indexed beneficiary,\\r\\n        uint256 startTime,\\r\\n        uint256 duration,\\r\\n        uint256 slicePeriod,\\r\\n        uint256 cliff,\\r\\n        uint256 amountTotal,\\r\\n        uint256 releasedPercent,\\r\\n        uint256 tgePercent\\r\\n    );\\r\\n\\r\\n    event withdraw(address indexed beneficiary, uint256 amount);\\r\\n    event ModifyVesting(address indexed beneficiary, uint256 amount);\\r\\n\\r\\n    modifier onlyIfVestingScheduleInitialized(\\r\\n        address _beneficiary,\\r\\n        uint8 _round\\r\\n    ) {\\r\\n        if (!vestingSchedules[_beneficiary][_round].initialized) {\\r\\n            revert VestingScheduleExists();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds a private sale vesting schedule for a beneficiary\\r\\n     * @param _beneficiary The address of the beneficiary\\r\\n     * @param _amount The total amount of tokens to be vested\\r\\n     */\\r\\n\\r\\n    function sheduleTheVesting(\\r\\n        address _beneficiary,\\r\\n        uint256 _amount\\r\\n    ) external onlyAdmin nonReentrant {\\r\\n        _sheduleTheVesting(_beneficiary, _amount);\\r\\n    }\\r\\n\\r\\n    function _sheduleTheVesting(\\r\\n        address _beneficiary,\\r\\n        uint256 _amount\\r\\n    ) internal {\\r\\n        if (_beneficiary == address(0)) {\\r\\n            revert ZeroAddress();\\r\\n        }\\r\\n        if (isAdmin(_beneficiary)) {\\r\\n            revert TokenCanNotBeMintedToAdmins();\\r\\n        }\\r\\n        if (paused) {\\r\\n            revert VestingSheduleIsPausedByAdmins();\\r\\n        }\\r\\n        if (_amount <= 0) {\\r\\n            revert Zero_amount();\\r\\n        }\\r\\n        if (vestingSchedules[_beneficiary][VestingRoundNo].initialized) {\\r\\n            revert VestingScheduleExists();\\r\\n        }\\r\\n\\r\\n        VestingSchedule memory vestingSchedule = VestingSchedule({\\r\\n            initialized: true,\\r\\n            startTime: _startTime,\\r\\n            duration: _duration + _startTime,\\r\\n            slicePeriod: _slicePeriod,\\r\\n            cliff: _cliffPeriod,\\r\\n            amountTotal: _amount,\\r\\n            released: 0,\\r\\n            releasedPercent: _releasedPercent,\\r\\n            tgePercent: _tgePercent\\r\\n        });\\r\\n\\r\\n        vestingSchedules[_beneficiary][VestingRoundNo] = vestingSchedule;\\r\\n        vestedAmountInRounds[VestingRoundNo] = vestedAmountInRounds[\\r\\n            VestingRoundNo\\r\\n        ].add(_amount);\\r\\n        totalVestedAmount = totalVestedAmount.add(_amount);\\r\\n        emit addVesting(\\r\\n            _beneficiary,\\r\\n            _startTime,\\r\\n            _duration,\\r\\n            _slicePeriod,\\r\\n            _cliffPeriod,\\r\\n            _amount,\\r\\n            _releasedPercent,\\r\\n            _tgePercent\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Schedules airdrops for a group of beneficiaries.\\r\\n     * @param _beneficiaries List of beneficiary addresses.\\r\\n     * @param _amount Amount of tokens to distribute to each beneficiary.\\r\\n     */\\r\\n    function scheduleAirdropForGroup(\\r\\n        address[] calldata _beneficiaries,\\r\\n        uint256 _amount\\r\\n    ) external onlyAdmin nonReentrant {\\r\\n        if (_amount == 0) {\\r\\n            revert Zero_amount();\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i < _beneficiaries.length; i++) {\\r\\n            address beneficiary = _beneficiaries[i];\\r\\n\\r\\n            if (isAdmin(beneficiary)) {\\r\\n                revert TokenCanNotBeMintedToAdmins();\\r\\n            }\\r\\n            if (paused) {\\r\\n                revert VestingSheduleIsPausedByAdmins();\\r\\n            }\\r\\n\\r\\n            if (beneficiary == address(0)) {\\r\\n                revert ReceiverShouldNotBeAddressZero();\\r\\n            }\\r\\n            if (vestingSchedules[beneficiary][11].initialized) {\\r\\n                revert AirdropSheduleExists();\\r\\n            }\\r\\n\\r\\n            VestingSchedule memory vestingSchedule = VestingSchedule({\\r\\n                initialized: true,\\r\\n                startTime: _startTime,\\r\\n                duration: _duration + _startTime,\\r\\n                slicePeriod: _slicePeriod,\\r\\n                cliff: _cliffPeriod,\\r\\n                amountTotal: _amount,\\r\\n                released: 0,\\r\\n                releasedPercent: _releasedPercent,\\r\\n                tgePercent: _tgePercent\\r\\n            });\\r\\n\\r\\n            vestingSchedules[beneficiary][11] = vestingSchedule;\\r\\n            vestedAmountInRounds[11] = vestedAmountInRounds[11].add(_amount);\\r\\n            totalVestedAmount = totalVestedAmount.add(_amount);\\r\\n            emit addAirdrop(\\r\\n                beneficiary,\\r\\n                _startTime,\\r\\n                _duration,\\r\\n                _slicePeriod,\\r\\n                _cliffPeriod,\\r\\n                _amount,\\r\\n                _releasedPercent,\\r\\n                _tgePercent\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Retrieves the amount of tokens claimable by a beneficiary based on their vesting schedule\\r\\n     * @return The amount of tokens claimable by the beneficiary\\r\\n     */\\r\\n\\r\\n    function getClaimableAmount(\\r\\n        address _beneficiary,\\r\\n        uint8 _round\\r\\n    ) external view returns (uint256) {\\r\\n        VestingSchedule storage vestingSchedule = vestingSchedules[\\r\\n            _beneficiary\\r\\n        ][_round];\\r\\n        isValidRound(_round);\\r\\n        uint256 currentTime = getCurrentTime();\\r\\n        if (currentTime < vestingSchedule.startTime) {\\r\\n            return 0;\\r\\n        }\\r\\n        if (vestingSchedule.released == vestingSchedule.amountTotal) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 releaseAmount = _getClaimableAmount(_beneficiary, _round);\\r\\n        if (\\r\\n            releaseAmount.add(vestingSchedule.released) >\\r\\n            vestingSchedule.amountTotal\\r\\n        ) {\\r\\n            releaseAmount = vestingSchedule.amountTotal.sub(\\r\\n                vestingSchedule.released\\r\\n            );\\r\\n        }\\r\\n        return releaseAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Retrieves the total amount of tokens to be vested\\r\\n     * @return The total amount of tokens to be vested\\r\\n     */\\r\\n    function getTotalVestingAmount() public view returns (uint256) {\\r\\n        return totalVestedAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Retrieves the total amount of tokens released from the vesting contract\\r\\n     * @return The total amount of tokens released\\r\\n     */\\r\\n\\r\\n    function getTotalReleasedAmount() external view returns (uint256) {\\r\\n        return totalReleasedAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Retrieves the total amount of tokens that have been released to a specific beneficiary\\r\\n     * @param _beneficiary The address of the beneficiary\\r\\n     * @return The total amount of tokens released to the beneficiary\\r\\n     */\\r\\n\\r\\n    function getReleasedAmount(\\r\\n        address _beneficiary,\\r\\n        uint8 _round\\r\\n    ) external view returns (uint256) {\\r\\n        VestingSchedule storage vestingSchedule = vestingSchedules[\\r\\n            _beneficiary\\r\\n        ][_round];\\r\\n        isValidRound(_round);\\r\\n        return vestingSchedule.released;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Retrieves the slice period duration for a specific beneficiary's vesting schedule\\r\\n     * @param _beneficiary The address of the beneficiary\\r\\n     * @return The duration of a slice period for the beneficiary's vesting schedule\\r\\n     */\\r\\n    function getSlicePeriod(\\r\\n        address _beneficiary,\\r\\n        uint8 _round\\r\\n    ) external view returns (uint256) {\\r\\n        VestingSchedule storage vestingSchedule = vestingSchedules[\\r\\n            _beneficiary\\r\\n        ][_round];\\r\\n        isValidRound(_round);\\r\\n        uint256 _getSheduleAmount = vestingSchedule.amountTotal;\\r\\n        uint256 _totalReleaseAmount = vestingSchedule.released;\\r\\n\\r\\n        if (_getSheduleAmount == _totalReleaseAmount) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return vestingSchedule.slicePeriod;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Retrieves the start time of the vesting period for a specific beneficiary\\r\\n     * @param _beneficiary The address of the beneficiary\\r\\n     * @return The start time of the vesting period for the beneficiary\\r\\n     */\\r\\n    function getStartTimePeriod(\\r\\n        address _beneficiary,\\r\\n        uint8 _round\\r\\n    ) external view returns (uint256) {\\r\\n        VestingSchedule storage vestingSchedule = vestingSchedules[\\r\\n            _beneficiary\\r\\n        ][_round];\\r\\n        isValidRound(_round);\\r\\n        uint256 _getSheduleAmount = vestingSchedule.amountTotal;\\r\\n        uint256 _totalReleaseAmount = vestingSchedule.released;\\r\\n\\r\\n        if (_getSheduleAmount == _totalReleaseAmount) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return vestingSchedule.cliff;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Retrieves the total amount of tokens scheduled to be vested for a specific beneficiary\\r\\n     * @param _beneficiary The address of the beneficiary\\r\\n     * @return The total amount of tokens scheduled for vesting for the beneficiary\\r\\n     */\\r\\n    function getTototalSheduleAmount(\\r\\n        address _beneficiary,\\r\\n        uint8 _round\\r\\n    ) external view returns (uint256) {\\r\\n        VestingSchedule storage vestingSchedule = vestingSchedules[\\r\\n            _beneficiary\\r\\n        ][_round];\\r\\n        isValidRound(_round);\\r\\n        return vestingSchedule.amountTotal;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Retrieves the address of the token contract\\r\\n     * @return The address of the token contract\\r\\n     */\\r\\n\\r\\n    function getToken() external view returns (address) {\\r\\n        return address(token);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Claims the vested tokens for a beneficiary\\r\\n     */\\r\\n\\r\\n    function claimVestedToken(\\r\\n        address _beneficiary,\\r\\n        uint8 _round\\r\\n    )\\r\\n        external\\r\\n        nonReentrant\\r\\n        onlyIfVestingScheduleInitialized(_beneficiary, _round)\\r\\n    {\\r\\n        _claimVestedToken(_beneficiary, _round);\\r\\n    }\\r\\n\\r\\n    function _claimVestedToken(address _to, uint8 _round) internal {\\r\\n        isValidRound(_round);\\r\\n        VestingSchedule storage vestingSchedule = vestingSchedules[_to][_round];\\r\\n        uint256 currentTime = getCurrentTime();\\r\\n        if (currentTime < vestingSchedule.startTime) {\\r\\n            revert VestingNotStarted();\\r\\n        }\\r\\n        if (vestingSchedule.amountTotal == vestingSchedule.released) {\\r\\n            revert AllTokensAreReleleased(_to);\\r\\n        }\\r\\n        uint256 releaseAmount = _getClaimableAmount(_to, _round);\\r\\n        if (releaseAmount == 0) {\\r\\n            revert NoTokensToRelease();\\r\\n        }\\r\\n        if (\\r\\n            releaseAmount.add(vestingSchedule.released) >\\r\\n            vestingSchedule.amountTotal\\r\\n        ) {\\r\\n            releaseAmount = vestingSchedule.amountTotal.sub(\\r\\n                vestingSchedule.released\\r\\n            );\\r\\n        }\\r\\n        vestingSchedule.released = vestingSchedule.released.add(releaseAmount);\\r\\n        totalVestedAmount = totalVestedAmount.sub(releaseAmount);\\r\\n        totalReleasedAmount = totalReleasedAmount.add(releaseAmount);\\r\\n        bool success = token.mint(_to, releaseAmount);\\r\\n        if (!success) {\\r\\n            revert TokenMintingFailed();\\r\\n        }\\r\\n\\r\\n        emit withdraw(msg.sender, releaseAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the start time of the vesting period for all beneficiaries\\r\\n     * @param __startTime The new start time for the vesting period\\r\\n     */\\r\\n    function setStartTimeOfVesting(uint256 __startTime) external onlyAdmin {\\r\\n        _startTime = __startTime;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the duration of a slice period for all beneficiaries' vesting schedules\\r\\n     * @param __slicePeriod The new duration of a slice period in seconds\\r\\n     */\\r\\n    function setSlicePeriod(uint256 __slicePeriod) external onlyAdmin {\\r\\n        _slicePeriod = __slicePeriod;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the cliff period of the vesting period for all beneficiaries\\r\\n     * @param _cliff The new start time for the vesting period\\r\\n     */\\r\\n    function setCliffPeriod(uint256 _cliff) external onlyAdmin {\\r\\n        _cliffPeriod = _cliff;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the released percentage for all beneficiaries' vesting schedules\\r\\n     * @param __releasePercentinMultipleof100 The new released percentage (in multiple of 100)\\r\\n     */\\r\\n    function setReleasePercent(\\r\\n        uint256 __releasePercentinMultipleof100\\r\\n    ) external onlyAdmin {\\r\\n        _releasedPercent = __releasePercentinMultipleof100;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the TGE (Token Generation Event) percentage for all beneficiaries' vesting schedules\\r\\n     * @param __tgePercentinMuptipleof100 The new TGE percentage (in multiple of 100)\\r\\n     */\\r\\n    function setTgePercent(\\r\\n        uint256 __tgePercentinMuptipleof100\\r\\n    ) external onlyAdmin {\\r\\n        _tgePercent = __tgePercentinMuptipleof100;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the duration of the vesting period for all beneficiaries' vesting schedules\\r\\n     * @param __durationinMonth The new duration of the vesting period in months\\r\\n     */\\r\\n    function setDuration(uint256 __durationinMonth) external onlyAdmin {\\r\\n        _duration = __durationinMonth * 30 days;\\r\\n    }\\r\\n\\r\\n    function setRound(uint8 _round) external onlyAdmin {\\r\\n        isValidRound(_round);\\r\\n        VestingRoundNo = _round;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calculates the amount of tokens that are claimable by a beneficiary at the current time\\r\\n     * @param _beneficiary The address of the beneficiary\\r\\n     * @return The amount of claimable tokens for the beneficiary\\r\\n     */\\r\\n    function _getClaimableAmount(\\r\\n        address _beneficiary,\\r\\n        uint8 _round\\r\\n    ) internal view returns (uint256) {\\r\\n        VestingSchedule storage vestingSchedule = vestingSchedules[\\r\\n            _beneficiary\\r\\n        ][_round];\\r\\n        // If all tokens have already been released, revert with an error\\r\\n        if (vestingSchedule.released >= vestingSchedule.amountTotal) {\\r\\n            revert AllTokensAreReleleased(_beneficiary);\\r\\n        }\\r\\n        // Calculate the TGE (Token Generation Event) amount and vested amount\\r\\n        uint256 tgeAmount = _getTgeAmount(vestingSchedule);\\r\\n        uint256 vestedAmount = _computeReleasableAmount(vestingSchedule);\\r\\n        // Calculate the total amount that can be released now\\r\\n        uint256 releaseableAmount = tgeAmount.add(vestedAmount);\\r\\n        // Subtract the previously released amount to get the claimable amount\\r\\n        return releaseableAmount.sub(vestingSchedule.released);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Computes the amount of tokens that have vested based on the current time\\r\\n     * @param vestingSchedule The beneficiary's vesting schedule\\r\\n     * @return The amount of tokens that have vested\\r\\n     */\\r\\n    function _computeReleasableAmount(\\r\\n        VestingSchedule memory vestingSchedule\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 currentTime = getCurrentTime();\\r\\n        uint256 calculateTime = vestingSchedule.cliff.sub(\\r\\n            vestingSchedule.slicePeriod\\r\\n        );\\r\\n        // If the current time is before the vesting start time, no tokens have vested\\r\\n        if (currentTime < vestingSchedule.cliff) {\\r\\n            return 0;\\r\\n        }\\r\\n        // If the current time is after or equal to the vesting end time, all remaining tokens are vested\\r\\n        else if (\\r\\n            currentTime >=\\r\\n            vestingSchedule.duration.add(vestingSchedule.startTime)\\r\\n        ) {\\r\\n            return vestingSchedule.amountTotal.sub(vestingSchedule.released);\\r\\n        }\\r\\n        // Calculate the vested amount as per slice period\\r\\n        else {\\r\\n            uint256 timeFromStart = currentTime.sub(calculateTime);\\r\\n            uint256 secondsPerSlice = vestingSchedule.slicePeriod;\\r\\n            uint256 vestedSlicePeriods = timeFromStart.div(secondsPerSlice);\\r\\n            uint256 vestedAmountPerSlice = _calculateReleasableAmount(\\r\\n                vestingSchedule\\r\\n            );\\r\\n            uint256 vestedAmount = vestedAmountPerSlice.mul(vestedSlicePeriods);\\r\\n            return vestedAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calculates the amount of tokens that have vested in a single slice period\\r\\n     * @param vestingSchedule The beneficiary's vesting schedule\\r\\n     * @return The amount of tokens that have vested in a slice period\\r\\n     */\\r\\n    function _calculateReleasableAmount(\\r\\n        VestingSchedule memory vestingSchedule\\r\\n    ) internal pure returns (uint256) {\\r\\n        uint256 totalAmount = vestingSchedule.amountTotal;\\r\\n        uint256 releasedPercent = uint256(vestingSchedule.releasedPercent);\\r\\n        return totalAmount.mul(releasedPercent).div(10000);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calculates the amount of tokens that will be released at the Token Generation Event (TGE)\\r\\n     * @param vestingSchedule The beneficiary's vesting schedule\\r\\n     * @return The amount of tokens released at the TGE\\r\\n     */\\r\\n    function _getTgeAmount(\\r\\n        VestingSchedule memory vestingSchedule\\r\\n    ) internal pure returns (uint256) {\\r\\n        uint256 totalAmount = vestingSchedule.amountTotal;\\r\\n        uint256 tgePercent_ = uint256(vestingSchedule.tgePercent);\\r\\n        return ((totalAmount.mul(tgePercent_)).div(10000));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current timestamp\\r\\n     * @return The current timestamp\\r\\n     */\\r\\n    function getCurrentTime() internal view returns (uint256) {\\r\\n        return block.timestamp;\\r\\n    }\\r\\n\\r\\n    function isValidRound(uint8 _round) internal pure {\\r\\n        if (\\r\\n            !(_round == uint8(VestingRound.Seed) ||\\r\\n                _round == uint8(VestingRound.PrivateSale) ||\\r\\n                _round == uint8(VestingRound.PublicSale) ||\\r\\n                _round == uint8(VestingRound.StakingReward) ||\\r\\n                _round == uint8(VestingRound.Liquidity) ||\\r\\n                _round == uint8(VestingRound.PartnerShips) ||\\r\\n                _round == uint8(VestingRound.Ecosystem) ||\\r\\n                _round == uint8(VestingRound.Team) ||\\r\\n                _round == uint8(VestingRound.Marketing) ||\\r\\n                _round == uint8(VestingRound.Development) ||\\r\\n                _round == uint8(VestingRound.Advisors) ||\\r\\n                _round == uint8(VestingRound.Airdrop))\\r\\n        ) {\\r\\n            revert InvalidRound();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function transferTokenOwnership(address _newOwner) external onlyAdmin {\\r\\n        if (_newOwner == address(0)) {\\r\\n            revert ZeroAddress();\\r\\n        }\\r\\n        if (!isAdmin(_newOwner)) {\\r\\n            revert ownerShipCouldNotBeTransferred();\\r\\n        }\\r\\n        if (msg.sender == _newOwner) {\\r\\n            revert ownerShipCouldNotBeTransferred();\\r\\n        }\\r\\n        token.transferOwnership(_newOwner);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/IFloyx.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IFloyx {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function mint(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferOwnership(address newOwner) external;\\r\\n\\r\\n    function burn(uint256 amount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/PrivateSeedClaimer.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"./FloyxTokenVesting.sol\\\";\\r\\nimport \\\"./utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./utils/SafeMath.sol\\\";\\r\\n\\r\\ncontract PrivateSeedVestingClaimer is ReentrancyGuard {\\r\\n    using SafeMath for uint256;\\r\\n    FloyxTokenVesting public floyxVestingContract;\\r\\n\\r\\n    constructor(address _floyxVestingContractAddress) {\\r\\n        floyxVestingContract = FloyxTokenVesting(_floyxVestingContractAddress);\\r\\n    }\\r\\n\\r\\n    function claimPrivateVesting(address account) external nonReentrant {\\r\\n        // Call both claimVestedToken functions here\\r\\n        floyxVestingContract.claimVestedToken(account, 1);\\r\\n        floyxVestingContract.claimVestedToken(account, 3);\\r\\n    }\\r\\n\\r\\n    function getPrivateClaimableAmount(\\r\\n        address _wallet\\r\\n    ) external view returns (uint256) {\\r\\n        uint256 amount1 = floyxVestingContract.getClaimableAmount(_wallet, 1);\\r\\n        uint256 amount2 = floyxVestingContract.getClaimableAmount(_wallet, 3);\\r\\n        return amount1 + amount2;\\r\\n    }\\r\\n\\r\\n    function getPrivateReleasedAmount(\\r\\n        address _wallet\\r\\n    ) external view returns (uint256) {\\r\\n        uint256 amount1 = floyxVestingContract.getReleasedAmount(_wallet, 1);\\r\\n        uint256 amount2 = floyxVestingContract.getReleasedAmount(_wallet, 3);\\r\\n        return amount1 + amount2;\\r\\n    }\\r\\n\\r\\n    function getPrivateTototalAmount(\\r\\n        address _wallet\\r\\n    ) external view returns (uint256) {\\r\\n        uint256 amount1 = floyxVestingContract.getTototalSheduleAmount(\\r\\n            _wallet,\\r\\n            1\\r\\n        );\\r\\n        uint256 amount2 = floyxVestingContract.getTototalSheduleAmount(\\r\\n            _wallet,\\r\\n            3\\r\\n        );\\r\\n        return amount1 + amount2;\\r\\n    }\\r\\n\\r\\n    function claimSeedVesting(address account) public {\\r\\n        // Call both claimVestedToken functions here\\r\\n        floyxVestingContract.claimVestedToken(account, 0);\\r\\n        floyxVestingContract.claimVestedToken(account, 2);\\r\\n    }\\r\\n\\r\\n    function getSeedClaimableAmount(\\r\\n        address _wallet\\r\\n    ) external view returns (uint256) {\\r\\n        uint256 amount1 = floyxVestingContract.getClaimableAmount(_wallet, 0);\\r\\n        uint256 amount2 = floyxVestingContract.getClaimableAmount(_wallet, 2);\\r\\n        return amount1 + amount2;\\r\\n    }\\r\\n\\r\\n    function getSeedReleasedAmount(\\r\\n        address _wallet\\r\\n    ) external view returns (uint256) {\\r\\n        uint256 amount1 = floyxVestingContract.getReleasedAmount(_wallet, 0);\\r\\n        uint256 amount2 = floyxVestingContract.getReleasedAmount(_wallet, 2);\\r\\n        return amount1 + amount2;\\r\\n    }\\r\\n\\r\\n    function getSeedTototalAmount(\\r\\n        address _wallet\\r\\n    ) external view returns (uint256) {\\r\\n        uint256 amount1 = floyxVestingContract.getTototalSheduleAmount(\\r\\n            _wallet,\\r\\n            0\\r\\n        );\\r\\n        uint256 amount2 = floyxVestingContract.getTototalSheduleAmount(\\r\\n            _wallet,\\r\\n            2\\r\\n        );\\r\\n        return amount1 + amount2;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby disabling any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler's defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and making it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _nonReentrantBefore();\\r\\n        _;\\r\\n        _nonReentrantAfter();\\r\\n    }\\r\\n\\r\\n    function _nonReentrantBefore() private {\\r\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n    }\\r\\n\\r\\n    function _nonReentrantAfter() private {\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\r\\n     * `nonReentrant` function in the call stack.\\r\\n     */\\r\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\r\\n        return _status == _ENTERED;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\r\\n\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler's built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(\\r\\n        uint256 a,\\r\\n        uint256 b\\r\\n    ) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_floyxVestingContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimPrivateVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimSeedVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"floyxVestingContract\",\"outputs\":[{\"internalType\":\"contract FloyxTokenVesting\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getPrivateClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getPrivateReleasedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getPrivateTototalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getSeedClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getSeedReleasedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getSeedTototalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PrivateSeedVestingClaimer", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000009487e24a3137cfcf8cf40a3a9d60235bd5f7c802", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}