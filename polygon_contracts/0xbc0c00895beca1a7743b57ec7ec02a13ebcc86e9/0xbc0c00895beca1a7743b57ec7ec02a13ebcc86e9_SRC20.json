{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/token/SRC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/cryptography/ECDSA.sol';\\n\\nimport '../minters/TokenMinter.sol';\\nimport '../registry/SRC20Registry.sol';\\nimport '../rules/TransferRules.sol';\\nimport './features/Features.sol';\\n\\n/**\\n * @title SRC20 contract\\n * @author 0x5W4RM\\n * @dev Base SRC20 contract.\\n */\\ncontract SRC20 is ERC20, Ownable {\\n  using SafeMath for uint256;\\n  using ECDSA for bytes32;\\n\\n  mapping(address => uint256) private _balances; // need this copied from ERC20 to be able to access\\n\\n  string public kyaUri;\\n\\n  uint256 public nav;\\n  uint256 public maxTotalSupply;\\n\\n  address public registry;\\n\\n  TransferRules public transferRules;\\n  Features public features;\\n\\n  modifier onlyMinter() {\\n    require(msg.sender == getMinter(), 'SRC20: Minter is not the caller');\\n    _;\\n  }\\n\\n  modifier onlyTransferRules() {\\n    require(msg.sender == address(transferRules), 'SRC20: TransferRules is not the caller');\\n    _;\\n  }\\n\\n  modifier enabled(uint8 feature) {\\n    require(features.isEnabled(feature), 'SRC20: Token feature is not enabled');\\n    _;\\n  }\\n\\n  event TransferRulesUpdated(address transferRrules);\\n  event KyaUpdated(string kyaUri);\\n  event NavUpdated(uint256 nav);\\n  event SupplyMinted(uint256 amount, address account);\\n  event SupplyBurned(uint256 amount, address account);\\n\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    uint256 _maxTotalSupply,\\n    string memory _kyaUri,\\n    uint256 _netAssetValueUSD,\\n    uint8 _features,\\n    bytes memory _options,\\n    address _registry,\\n    address _minter\\n  ) ERC20(_name, _symbol) {\\n    maxTotalSupply = _maxTotalSupply;\\n    kyaUri = _kyaUri;\\n    nav = _netAssetValueUSD;\\n\\n    features = new Features(msg.sender, _features, _options);\\n\\n    if (features.isEnabled(features.TransferRules())) {\\n      transferRules = new TransferRules(address(this), msg.sender);\\n    }\\n\\n    registry = _registry;\\n    SRC20Registry(registry).register(address(this), _minter);\\n  }\\n\\n  function updateTransferRules(address _transferRules)\\n    external\\n    enabled(features.TransferRules())\\n    onlyOwner\\n    returns (bool)\\n  {\\n    return _updateTransferRules(_transferRules);\\n  }\\n\\n  function updateKya(string memory _kyaUri, uint256 _nav) external onlyOwner returns (bool) {\\n    kyaUri = _kyaUri;\\n    emit KyaUpdated(_kyaUri);\\n    if (_nav != 0) {\\n      nav = _nav;\\n      emit NavUpdated(_nav);\\n    }\\n    return true;\\n  }\\n\\n  function updateNav(uint256 _nav) external onlyOwner returns (bool) {\\n    nav = _nav;\\n    emit NavUpdated(_nav);\\n    return true;\\n  }\\n\\n  function getMinter() public view returns (address) {\\n    return SRC20Registry(registry).getMinter(address(this));\\n  }\\n\\n  function balanceOf(address account) public view override returns (uint256) {\\n    if (features.isAutoburned()) {\\n      return 0;\\n    }\\n    return super.balanceOf(account);\\n  }\\n\\n  function transfer(address recipient, uint256 amount) public override returns (bool) {\\n    require(\\n      features.checkTransfer(msg.sender, recipient),\\n      'SRC20: Cannot transfer due to disabled feature'\\n    );\\n\\n    if (_needTransferRulesCheck()) {\\n      require(transferRules.doTransfer(msg.sender, recipient, amount), 'SRC20: Transfer failed');\\n    } else {\\n      _transfer(msg.sender, recipient, amount);\\n    }\\n\\n    return true;\\n  }\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) public override returns (bool) {\\n    require(features.checkTransfer(sender, recipient), 'SRC20: Feature transfer check');\\n\\n    _approve(sender, msg.sender, allowance(sender, msg.sender).sub(amount));\\n    if (_needTransferRulesCheck()) {\\n      require(transferRules.doTransfer(sender, recipient, amount), 'SRC20: Transfer failed');\\n    } else {\\n      _transfer(sender, recipient, amount);\\n    }\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Force transfer tokens from one address to another. This\\n   * call expects the from address to have enough tokens, all other checks are\\n   * skipped.\\n   * Allowed only to token owners. Require 'ForceTransfer' feature enabled.\\n   *\\n   * @param sender The address which you want to send tokens from.\\n   * @param recipient The address to send tokens to.\\n   * @param amount The amount of tokens to send.\\n   * @return true on success.\\n   */\\n  function forceTransfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external enabled(features.ForceTransfer()) onlyOwner returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev This method is intended to be executed by the TransferRules contract when doTransfer is called in transfer\\n   * and transferFrom methods to check where funds should go.\\n   *\\n   * @param sender The address to transfer from.\\n   * @param recipient The address to send tokens to.\\n   * @param amount The amount of tokens to send.\\n   */\\n  function executeTransfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external onlyTransferRules returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * Perform multiple token transfers from the token owner's address.\\n   * The tokens should already be minted. Needs to be called by owner.\\n   *\\n   * @param _addresses an array of addresses to transfer to\\n   * @param _amounts an array of amounts\\n   * @return true on success\\n   */\\n  function bulkTransfer(address[] calldata _addresses, uint256[] calldata _amounts)\\n    external\\n    onlyOwner\\n    returns (bool)\\n  {\\n    require(_addresses.length == _amounts.length, 'SRC20: Input dataset length mismatch');\\n\\n    uint256 count = _addresses.length;\\n    for (uint256 i = 0; i < count; i++) {\\n      address to = _addresses[i];\\n      uint256 value = _amounts[i];\\n      _transfer(owner(), to, value);\\n    }\\n\\n    return true;\\n  }\\n\\n  function burnAccount(address account, uint256 amount)\\n    external\\n    enabled(features.AccountBurning())\\n    onlyOwner\\n    returns (bool)\\n  {\\n    _burn(account, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @param _percent 4 decimals. 15% = 150000\\n   */\\n  function burnAccountsPercent(address[] memory _accounts, uint256 _percent)\\n    external\\n    enabled(features.AccountBurning())\\n    onlyOwner\\n    returns (bool)\\n  {\\n    require(_percent <= 100_0000, 'SRC20: Cannot burn more than 100%');\\n    uint256 count = _accounts.length;\\n    for (uint256 i = 0; i < count; i++) {\\n      address account = _accounts[i];\\n      uint256 amount = super.balanceOf(account).mul(_percent).div(100_0000);\\n      _burn(account, amount);\\n    }\\n    return true;\\n  }\\n\\n  function burn(uint256 amount) external onlyOwner returns (bool) {\\n    require(amount != 0, 'SRC20: Burn amount must be greater than zero');\\n    TokenMinter(getMinter()).burn(address(this), msg.sender, amount);\\n    return true;\\n  }\\n\\n  function executeBurn(address account, uint256 amount) external onlyMinter returns (bool) {\\n    require(account == owner(), 'SRC20: Only owner can burn');\\n    _burn(account, amount);\\n    emit SupplyBurned(amount, account);\\n    return true;\\n  }\\n\\n  function mint(uint256 amount) external onlyOwner returns (bool) {\\n    require(amount != 0, 'SRC20: Mint amount must be greater than zero');\\n    TokenMinter(getMinter()).mint(address(this), msg.sender, amount);\\n\\n    return true;\\n  }\\n\\n  function executeMint(address recipient, uint256 amount) external onlyMinter returns (bool) {\\n    uint256 newSupply = totalSupply().add(amount);\\n\\n    require(\\n      newSupply <= maxTotalSupply || maxTotalSupply == 0,\\n      'SRC20: Mint amount exceeds maximum supply'\\n    );\\n\\n    _mint(recipient, amount);\\n    emit SupplyMinted(amount, recipient);\\n    return true;\\n  }\\n\\n  function _updateTransferRules(address _transferRules) internal returns (bool) {\\n    transferRules = TransferRules(_transferRules);\\n    if (_transferRules != address(0)) {\\n      require(transferRules.setSRC(address(this)), 'SRC20 contract already set in transfer rules');\\n    }\\n\\n    emit TransferRulesUpdated(_transferRules);\\n\\n    return true;\\n  }\\n\\n  function _needTransferRulesCheck() internal view returns (bool) {\\n    if (transferRules == TransferRules(0)) return false;\\n    // sender is fundraiser (token claim)\\n    if (SRC20Registry(registry).fundraise(address(this), msg.sender)) return false;\\n    return true;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/minters/TokenMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\nimport '../token/SRC20.sol';\\nimport '../registry/SRC20Registry.sol';\\nimport '../interfaces/IPriceUSD.sol';\\n\\n/**\\n * @title TokenMinter\\n * @dev Serves as proxy (manager) for SRC20 minting.\\n * @dev To be called by the token issuer or fundraise.\\n * The swm/src ratio comes from a price oracle\\n * This contract is meant to be replaced if Swarm Governance decides to change\\n * the fee structure of the protocol.\\n */\\ncontract TokenMinter is Ownable {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  IPriceUSD public SWMPriceOracle;\\n  address public swm;\\n\\n  mapping(address => uint256) netAssetValue;\\n\\n  constructor(address _swm, address _swmPriceOracle) {\\n    SWMPriceOracle = IPriceUSD(_swmPriceOracle);\\n    swm = _swm;\\n  }\\n\\n  modifier onlyAuthorised(address _src20) {\\n    SRC20Registry registry = _getRegistry(_src20);\\n\\n    require(\\n      SRC20(_src20).getMinter() == address(this),\\n      'TokenMinter: Not registered to manage token'\\n    );\\n    require(\\n      _src20 == msg.sender || registry.fundraise(_src20, msg.sender),\\n      'TokenMinter: Caller not authorized'\\n    );\\n    _;\\n  }\\n\\n  event Minted(address token, uint256 amount, uint256 fee, address account);\\n  event FeeApplied(address token, uint256 treasury, uint256 rewardPool);\\n  event Burned(address token, uint256 amount, address account);\\n\\n  function updateOracle(address oracle) external onlyOwner {\\n    SWMPriceOracle = IPriceUSD(oracle);\\n  }\\n\\n  /**\\n   *  Calculate how many SWM tokens need to be paid as fee to tokenize an asset\\n   *  @param _nav Tokenized Asset Value in USD\\n   *  @return the number of SWM tokens\\n   */\\n  function calcFee(uint256 _nav) public view returns (uint256) {\\n    uint256 feeUSD;\\n\\n    if (_nav == 0) return 0;\\n\\n    // Up to 10,000 NAV the fee is flat at 1 SWM\\n    // We return zero because the rest of the values are calculated based on SWM price.\\n    if (_nav >= 0 && _nav <= 10000) feeUSD = 0;\\n\\n    // From 10000K up to 1M fee is 0.5%\\n    if (_nav > 10000 && _nav <= 1000000) feeUSD = _nav.mul(5).div(1000);\\n\\n    // From 1M up to 5M fee is 0.45%\\n    if (_nav > 1000000 && _nav <= 5000000) feeUSD = _nav.mul(45).div(10000);\\n\\n    // From 5M up to 15M fee is 0.40%\\n    if (_nav > 5000000 && _nav <= 15000000) feeUSD = _nav.mul(4).div(1000);\\n\\n    // From 15M up to 50M fee is 0.25%\\n    if (_nav > 15000000 && _nav <= 50000000) feeUSD = _nav.mul(25).div(10000);\\n\\n    // From 50M up to 100M fee is 0.20%\\n    if (_nav > 50000000 && _nav <= 100000000) feeUSD = _nav.mul(2).div(1000);\\n\\n    // From 100M up to 150M fee is 0.15%\\n    if (_nav > 100000000 && _nav <= 150000000) feeUSD = _nav.mul(15).div(10000);\\n\\n    // From 150M up fee is 0.10%\\n    if (_nav > 150000000) feeUSD = _nav.mul(1).div(1000);\\n\\n    // 0.04 is returned as (4, 100)\\n    (uint256 numerator, uint256 denominator) = SWMPriceOracle.getPrice();\\n\\n    // 10**18 because we return Wei\\n    if (feeUSD != 0) {\\n      return feeUSD.mul(denominator).mul(10**18).div(numerator);\\n    } else {\\n      // User must pay one SWM\\n      return 1 ether;\\n    }\\n  }\\n\\n  function getAdditionalFee(address _src20) public view returns (uint256) {\\n    if (SRC20(_src20).nav() > netAssetValue[_src20]) {\\n      return calcFee(SRC20(_src20).nav()).sub(calcFee(netAssetValue[_src20]));\\n    } else {\\n      return 0;\\n    }\\n  }\\n\\n  /**\\n   *  This function mints SRC20 tokens\\n   *  Only the SRC20 token or fundraiser can call this function\\n   *  Minter must be registered for the specific SRC20\\n   *\\n   *  @param _src20 The address of the SRC20 token to mint tokens for\\n   *  @param _recipient The address of the recipient\\n   *  @param _amount Number of SRC20 tokens to mint\\n   *  @return true on success\\n   */\\n  function mint(\\n    address _src20,\\n    address _recipient,\\n    uint256 _amount\\n  ) external onlyAuthorised(_src20) returns (bool) {\\n    uint256 swmAmount = getAdditionalFee(_src20);\\n\\n    if (swmAmount != 0) {\\n      IERC20(swm).safeTransferFrom(SRC20(_src20).owner(), address(this), swmAmount);\\n      require(_applyFee(swm, swmAmount, _src20), 'TokenMinter: Fee application failed');\\n    }\\n\\n    require(SRC20(_src20).executeMint(_recipient, _amount), 'TokenMinter: Token minting failed');\\n\\n    netAssetValue[_src20] = SRC20(_src20).nav();\\n\\n    emit Minted(_src20, _amount, swmAmount, _recipient);\\n    return true;\\n  }\\n\\n  function burn(\\n    address _src20,\\n    address _account,\\n    uint256 _amount\\n  ) external onlyAuthorised(_src20) returns (bool) {\\n    SRC20(_src20).executeBurn(_account, _amount);\\n\\n    emit Burned(_src20, _amount, _account);\\n    return true;\\n  }\\n\\n  function _applyFee(\\n    address _feeToken,\\n    uint256 _feeAmount,\\n    address _src20\\n  ) internal returns (bool) {\\n    SRC20Registry registry = _getRegistry(_src20);\\n    uint256 treasuryAmount = _feeAmount.mul(2).div(10);\\n    uint256 rewardAmount = _feeAmount.sub(treasuryAmount);\\n    address treasury = registry.treasury();\\n    address rewardPool = registry.rewardPool();\\n\\n    IERC20(_feeToken).safeTransfer(treasury, treasuryAmount);\\n    IERC20(_feeToken).safeTransfer(rewardPool, rewardAmount);\\n\\n    emit FeeApplied(_src20, treasuryAmount, rewardAmount);\\n    return true;\\n  }\\n\\n  function _getRegistry(address _token) internal view returns (SRC20Registry) {\\n    return SRC20Registry(SRC20(_token).registry());\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/registry/SRC20Registry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\n\\nimport '../token/SRC20.sol';\\n\\n/**\\n * @dev SRC20 registry contains the address of every created\\n * SRC20 token. Registered factories can add addresses of\\n * new tokens, public can query tokens.\\n */\\ncontract SRC20Registry is Ownable {\\n  using SafeMath for uint256;\\n\\n  struct SRC20Record {\\n    address minter;\\n    bool isRegistered;\\n  }\\n\\n  address public treasury;\\n  address public rewardPool;\\n\\n  mapping(address => mapping(address => bool)) public fundraise;\\n  mapping(address => bool) public authorizedMinters;\\n  mapping(address => bool) public authorizedFactories;\\n  mapping(address => SRC20Record) public registry;\\n\\n  event Deployed(address treasury, address rewardPool);\\n  event TreasuryUpdated(address treasury);\\n  event RewardPoolUpdated(address rewardPool);\\n  event SRC20Registered(address token, address minter);\\n  event SRC20Unregistered(address token);\\n  event MinterAdded(address minter);\\n  event MinterRemoved(address minter);\\n  event FundraiserRegistered(address fundraiser, address registrant, address token);\\n\\n  constructor(address _treasury, address _rewardPool) {\\n    require(_treasury != address(0), 'SRC20Registry: Treasury must be set');\\n    require(_rewardPool != address(0), 'SRC20Registry: Reward pool must be set');\\n    treasury = _treasury;\\n    rewardPool = _rewardPool;\\n    emit Deployed(treasury, rewardPool);\\n  }\\n\\n  function updateTreasury(address _treasury) external onlyOwner returns (bool) {\\n    require(_treasury != address(0), 'SRC20Registry: Treasury cannot be the zero address');\\n    treasury = _treasury;\\n    emit TreasuryUpdated(_treasury);\\n    return true;\\n  }\\n\\n  function updateRewardPool(address _rewardPool) external onlyOwner returns (bool) {\\n    require(_rewardPool != address(0), 'SRC20Registry: Reward pool cannot be the zero address');\\n    rewardPool = _rewardPool;\\n    emit RewardPoolUpdated(_rewardPool);\\n    return true;\\n  }\\n\\n  function registerFundraise(address _registrant, address _token) external returns (bool) {\\n    require(_registrant == SRC20(_token).owner(), 'SRC20Registry: Registrant not token owner');\\n    require(registry[_token].isRegistered, 'SRC20Registry: Token not in registry');\\n    require(\\n      fundraise[_token][msg.sender] == false,\\n      'SRC20Registry: Fundraiser already in registry'\\n    );\\n\\n    fundraise[_token][msg.sender] = true;\\n    emit FundraiserRegistered(msg.sender, _registrant, _token);\\n\\n    return true;\\n  }\\n\\n  function register(address _token, address _minter) external returns (bool) {\\n    require(_token != address(0), 'SRC20Registry: Token is zero address');\\n    require(authorizedMinters[_minter], 'SRC20Registry: Minter not authorized');\\n    require(registry[_token].isRegistered == false, 'SRC20Registry: Token already in registry');\\n\\n    registry[_token].minter = _minter;\\n    registry[_token].isRegistered = true;\\n\\n    emit SRC20Registered(_token, _minter);\\n\\n    return true;\\n  }\\n\\n  function unregister(address _token) external onlyOwner returns (bool) {\\n    require(_token != address(0), 'SRC20Registry: Token is zero address');\\n    require(registry[_token].isRegistered, 'SRC20Registry: Token not in registry');\\n\\n    registry[_token].minter = address(0);\\n    registry[_token].isRegistered = false;\\n\\n    emit SRC20Unregistered(_token);\\n\\n    return true;\\n  }\\n\\n  function contains(address _token) external view returns (bool) {\\n    return registry[_token].minter != address(0);\\n  }\\n\\n  function getMinter(address _token) external view returns (address) {\\n    return registry[_token].minter;\\n  }\\n\\n  function addMinter(address _minter) external onlyOwner returns (bool) {\\n    require(_minter != address(0), 'SRC20Registry: Minter is zero address');\\n    require(authorizedMinters[_minter] == false, 'SRC20Registry: Minter is already authorized');\\n\\n    authorizedMinters[_minter] = true;\\n\\n    emit MinterAdded(_minter);\\n\\n    return true;\\n  }\\n\\n  function removeMinter(address _minter) external onlyOwner returns (bool) {\\n    require(_minter != address(0), 'SRC20Registry: Minter is zero address');\\n    require(authorizedMinters[_minter], 'SRC20Registry: Minter is not authorized');\\n\\n    authorizedMinters[_minter] = false;\\n\\n    emit MinterRemoved(_minter);\\n\\n    return true;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/rules/TransferRules.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport './ManualApproval.sol';\\nimport './Whitelisted.sol';\\nimport '../token/SRC20.sol';\\nimport '../interfaces/ITransferRules.sol';\\n\\n/*\\n * @title TransferRules contract\\n * @dev Contract that is checking if on-chain rules for token transfers are concluded.\\n * It implements whitelist and grey list.\\n */\\ncontract TransferRules is ITransferRules, ManualApproval, Whitelisted {\\n  modifier onlySRC20 {\\n    require(msg.sender == address(src20), 'TransferRules: Caller not SRC20');\\n    _;\\n  }\\n\\n  constructor(address _src20, address _owner) {\\n    src20 = SRC20(_src20);\\n    transferOwnership(_owner);\\n    whitelisted[_owner] = true;\\n  }\\n\\n  /**\\n   * @dev Set for what contract this rules are.\\n   *\\n   * @param _src20 - Address of SRC20 contract.\\n   */\\n  function setSRC(address _src20) external override returns (bool) {\\n    require(address(src20) == address(0), 'SRC20 already set');\\n    src20 = SRC20(_src20);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Checks if transfer passes transfer rules.\\n   *\\n   * @param sender The address to transfer from.\\n   * @param recipient The address to send tokens to.\\n   * @param amount The amount of tokens to send.\\n   */\\n  function authorize(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) public view returns (bool) {\\n    uint256 v;\\n    v = amount; // eliminate compiler warning\\n    return\\n      (isWhitelisted(sender) || isGreylisted(sender)) &&\\n      (isWhitelisted(recipient) || isGreylisted(recipient));\\n  }\\n\\n  /**\\n   * @dev Do transfer and checks where funds should go. If both from and to are\\n   * on the whitelist funds should be transferred but if one of them are on the\\n   * grey list token-issuer/owner need to approve transfer.\\n   *\\n   * @param sender The address to transfer from.\\n   * @param recipient The address to send tokens to.\\n   * @param amount The amount of tokens to send.\\n   */\\n  function doTransfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external override onlySRC20 returns (bool) {\\n    require(authorize(sender, recipient, amount), 'Transfer not authorized');\\n\\n    if (isGreylisted(sender) || isGreylisted(recipient)) {\\n      _requestTransfer(sender, recipient, amount);\\n      return true;\\n    }\\n\\n    require(SRC20(src20).executeTransfer(sender, recipient, amount), 'SRC20 transfer failed');\\n\\n    return true;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/token/features/Features.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\npragma abicoder v2;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\nimport './PausableFeature.sol';\\nimport './FreezableFeature.sol';\\nimport \\\"./AutoburnFeature.sol\\\";\\n\\n/**\\n * @dev Support for \\\"SRC20 feature\\\" modifier.\\n */\\ncontract Features is PausableFeature, FreezableFeature, AutoburnFeature, Ownable {\\n  uint8 public features;\\n  uint8 public constant ForceTransfer = 0x01;\\n  uint8 public constant Pausable = 0x02;\\n  uint8 public constant AccountBurning = 0x04;\\n  uint8 public constant AccountFreezing = 0x08;\\n  uint8 public constant TransferRules = 0x10;\\n  uint8 public constant AutoBurn = 0x20;\\n\\n  modifier enabled(uint8 feature) {\\n    require(isEnabled(feature), 'Features: Token feature is not enabled');\\n    _;\\n  }\\n\\n  event FeaturesUpdated(\\n    bool forceTransfer,\\n    bool tokenFreeze,\\n    bool accountFreeze,\\n    bool accountBurn,\\n    bool transferRules,\\n    bool autoburn\\n  );\\n\\n  constructor(address _owner, uint8 _features, bytes memory _options) {\\n    _enable(_features, _options);\\n    transferOwnership(_owner);\\n  }\\n\\n  function _enable(uint8 _features, bytes memory _options) internal {\\n    features = _features;\\n    emit FeaturesUpdated(\\n      _features & ForceTransfer != 0,\\n      _features & Pausable != 0,\\n      _features & AccountBurning != 0,\\n      _features & AccountFreezing != 0,\\n      _features & TransferRules != 0,\\n      _features & AutoBurn != 0\\n    );\\n\\n    if (_features & AutoBurn != 0) {\\n      _setAutoburnTs(_options);\\n    }\\n  }\\n\\n  function isEnabled(uint8 _feature) public view returns (bool) {\\n    return features & _feature != 0;\\n  }\\n\\n  function isAutoburned() public view returns (bool) {\\n    return isEnabled(AutoBurn) && _isAutoburned();\\n  }\\n\\n  function checkTransfer(address _from, address _to) external view returns (bool) {\\n    return !_isAccountFrozen(_from) && !_isAccountFrozen(_to) && !paused && !isAutoburned();\\n  }\\n\\n  function isAccountFrozen(address _account) external view returns (bool) {\\n    return _isAccountFrozen(_account);\\n  }\\n\\n  function freezeAccount(address _account) external enabled(AccountFreezing) onlyOwner {\\n    _freezeAccount(_account);\\n  }\\n\\n  function unfreezeAccount(address _account) external enabled(AccountFreezing) onlyOwner {\\n    _unfreezeAccount(_account);\\n  }\\n\\n  function pause() external enabled(Pausable) onlyOwner {\\n    _pause();\\n  }\\n\\n  function unpause() external enabled(Pausable) onlyOwner {\\n    _unpause();\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPriceUSD.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n    @title The interface for the exchange rate provider contracts\\n */\\ninterface IPriceUSD {\\n  function getPrice() external view returns (uint256 numerator, uint256 denominator);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/rules/ManualApproval.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\nimport '../interfaces/ITransferRules.sol';\\nimport '../token/SRC20.sol';\\n\\n/*\\n * @title ManualApproval contract\\n * @dev On-chain transfer rules that handle transfer request/execution for\\n * grey-listed accounts\\n */\\ncontract ManualApproval is Ownable {\\n  struct TransferRequest {\\n    address from;\\n    address to;\\n    uint256 value;\\n  }\\n\\n  uint256 public requestCounter = 1;\\n  SRC20 public src20;\\n\\n  mapping(uint256 => TransferRequest) public transferRequests;\\n  mapping(address => bool) public greylist;\\n\\n  event AccountGreylisted(address account, address sender);\\n  event AccountUnGreylisted(address account, address sender);\\n  event TransferRequested(uint256 indexed requestId, address from, address to, uint256 value);\\n\\n  event TransferApproved(\\n    uint256 indexed requestId,\\n    address indexed from,\\n    address indexed to,\\n    uint256 value\\n  );\\n\\n  event TransferDenied(\\n    uint256 indexed requestId,\\n    address indexed from,\\n    address indexed to,\\n    uint256 value\\n  );\\n\\n  function approveTransfer(uint256 _requestId) external onlyOwner returns (bool) {\\n    TransferRequest memory req = transferRequests[_requestId];\\n\\n    require(src20.executeTransfer(address(this), req.to, req.value), 'SRC20 transfer failed');\\n\\n    delete transferRequests[_requestId];\\n    emit TransferApproved(_requestId, req.from, req.to, req.value);\\n    return true;\\n  }\\n\\n  function denyTransfer(uint256 _requestId) external returns (bool) {\\n    TransferRequest memory req = transferRequests[_requestId];\\n    require(\\n      owner() == msg.sender || req.from == msg.sender,\\n      'Not owner or sender of the transfer request'\\n    );\\n\\n    require(\\n      src20.executeTransfer(address(this), req.from, req.value),\\n      'SRC20: External transfer failed'\\n    );\\n\\n    delete transferRequests[_requestId];\\n    emit TransferDenied(_requestId, req.from, req.to, req.value);\\n\\n    return true;\\n  }\\n\\n  function isGreylisted(address _account) public view returns (bool) {\\n    return greylist[_account];\\n  }\\n\\n  function greylistAccount(address _account) external onlyOwner returns (bool) {\\n    greylist[_account] = true;\\n    emit AccountGreylisted(_account, msg.sender);\\n    return true;\\n  }\\n\\n  function bulkGreylistAccount(address[] calldata _accounts) external onlyOwner returns (bool) {\\n    for (uint256 i = 0; i < _accounts.length; i++) {\\n      address account = _accounts[i];\\n      greylist[account] = true;\\n      emit AccountGreylisted(account, msg.sender);\\n    }\\n    return true;\\n  }\\n\\n  function unGreylistAccount(address _account) external onlyOwner returns (bool) {\\n    delete greylist[_account];\\n    emit AccountUnGreylisted(_account, msg.sender);\\n    return true;\\n  }\\n\\n  function bulkUnGreylistAccount(address[] calldata _accounts) external onlyOwner returns (bool) {\\n    for (uint256 i = 0; i < _accounts.length; i++) {\\n      address account = _accounts[i];\\n      delete greylist[account];\\n      emit AccountUnGreylisted(account, msg.sender);\\n    }\\n    return true;\\n  }\\n\\n  function _requestTransfer(\\n    address _from,\\n    address _to,\\n    uint256 _value\\n  ) internal returns (bool) {\\n    require(src20.executeTransfer(_from, address(this), _value), 'SRC20 transfer failed');\\n\\n    transferRequests[requestCounter] = TransferRequest(_from, _to, _value);\\n\\n    emit TransferRequested(requestCounter, _from, _to, _value);\\n    requestCounter = requestCounter + 1;\\n\\n    return true;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/rules/Whitelisted.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\n/**\\n * @title Whitelisted transfer restriction example\\n * @dev Example of simple transfer rule, having a list\\n * of whitelisted addresses manged by owner, and checking\\n * that from and to address in src20 transfer are whitelisted.\\n */\\ncontract Whitelisted is Ownable {\\n  mapping(address => bool) internal whitelisted;\\n\\n  event AccountWhitelisted(address account, address sender);\\n  event AccountUnWhitelisted(address account, address sender);\\n\\n  function whitelistAccount(address _account) external virtual onlyOwner {\\n    whitelisted[_account] = true;\\n    emit AccountWhitelisted(_account, msg.sender);\\n  }\\n\\n  function bulkWhitelistAccount(address[] calldata _accounts) external virtual onlyOwner {\\n    for (uint256 i = 0; i < _accounts.length; i++) {\\n      address account = _accounts[i];\\n      whitelisted[account] = true;\\n      emit AccountWhitelisted(account, msg.sender);\\n    }\\n  }\\n\\n  function unWhitelistAccount(address _account) external virtual onlyOwner {\\n    delete whitelisted[_account];\\n    emit AccountUnWhitelisted(_account, msg.sender);\\n  }\\n\\n  function bulkUnWhitelistAccount(address[] calldata _accounts) external virtual onlyOwner {\\n    for (uint256 i = 0; i < _accounts.length; i++) {\\n      address account = _accounts[i];\\n      delete whitelisted[account];\\n      emit AccountUnWhitelisted(account, msg.sender);\\n    }\\n  }\\n\\n  function isWhitelisted(address _account) public view returns (bool) {\\n    return whitelisted[_account];\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITransferRules.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title ITransferRules interface\\n * @dev The interface for any on-chain SRC20 transfer rule\\n * Transfer Rules are expected to have the same interface\\n * This interface is used by the SRC20 token\\n */\\ninterface ITransferRules {\\n  function setSRC(address src20) external returns (bool);\\n\\n  function doTransfer(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/token/features/PausableFeature.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\ncontract PausableFeature {\\n  bool public paused;\\n\\n  event Paused(address account);\\n  event Unpaused(address account);\\n\\n  constructor() {\\n    paused = false;\\n  }\\n\\n  function _pause() internal {\\n    paused = true;\\n    emit Paused(msg.sender);\\n  }\\n\\n  function _unpause() internal {\\n    paused = false;\\n    emit Unpaused(msg.sender);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/token/features/FreezableFeature.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\ncontract FreezableFeature {\\n  mapping(address => bool) private frozen;\\n\\n  event AccountFrozen(address indexed account);\\n  event AccountUnfrozen(address indexed account);\\n\\n  function _freezeAccount(address _account) internal {\\n    frozen[_account] = true;\\n    emit AccountFrozen(_account);\\n  }\\n\\n  function _unfreezeAccount(address _account) internal {\\n    frozen[_account] = false;\\n    emit AccountUnfrozen(_account);\\n  }\\n\\n  function _isAccountFrozen(address _account) internal view returns (bool) {\\n    return frozen[_account];\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/token/features/AutoburnFeature.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\ncontract AutoburnFeature {\\n  uint256 public autoburnTs;\\n\\n  event AutoburnTsSet(uint256 ts);\\n\\n  function _setAutoburnTs(bytes memory _options) internal {\\n    (autoburnTs) = abi.decode(_options, (uint256));\\n    emit AutoburnTsSet(autoburnTs);\\n  }\\n\\n  function _isAutoburned() internal view returns (bool) {\\n    return block.timestamp >= autoburnTs;\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_maxTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_kyaUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_netAssetValueUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_features\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"kyaUri\",\"type\":\"string\"}],\"name\":\"KyaUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nav\",\"type\":\"uint256\"}],\"name\":\"NavUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SupplyBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SupplyMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"transferRrules\",\"type\":\"address\"}],\"name\":\"TransferRulesUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"bulkTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"burnAccountsPercent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"executeBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"executeMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"executeTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"features\",\"outputs\":[{\"internalType\":\"contract Features\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"forceTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kyaUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nav\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferRules\",\"outputs\":[{\"internalType\":\"contract TransferRules\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_kyaUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_nav\",\"type\":\"uint256\"}],\"name\":\"updateKya\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nav\",\"type\":\"uint256\"}],\"name\":\"updateNav\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_transferRules\",\"type\":\"address\"}],\"name\":\"updateTransferRules\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SRC20", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "10", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000d3c21bcecceda100000000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000000000000000000000000000000000000000001f00000000000000000000000000000000000000000000000000000000000002000000000000000000000000004e5370b262e83ead732fb184205510b78ec0fbda00000000000000000000000018f98d695aaeed2f2705512d885b0d4fa6b33062000000000000000000000000000000000000000000000000000000000000001654657374696e6720536563757269747920546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000354535400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000033697066733a516d575a7a58364267443837387069514d396d437365384d6641464c6d623671314b31673351475739534647756a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}