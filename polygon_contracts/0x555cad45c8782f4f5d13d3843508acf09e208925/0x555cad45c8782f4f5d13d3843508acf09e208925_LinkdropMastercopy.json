{"SourceCode": "// Dependency file: openzeppelin-solidity/contracts/introspection/IERC165.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// Dependency file: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// Dependency file: openzeppelin-solidity/contracts/cryptography/ECDSA.sol\r\n\r\n\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * // importANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        return recover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (281): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"ECDSA: invalid signature 's' value\");\r\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        require(signer != address(0), \"ECDSA: invalid signature\");\r\n\r\n        return signer;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * replicates the behavior of the\r\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\r\n     * JSON-RPC method.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/storage/LinkdropStorage.sol\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\ncontract LinkdropStorage {\r\n\r\n    // Address of owner deploying this contract (usually factory)\r\n    address public owner;\r\n\r\n    // Address corresponding to linkdrop master key\r\n    address payable public linkdropMaster;\r\n\r\n    // Version of mastercopy contract\r\n    uint public version;\r\n\r\n    // Network id\r\n    uint public chainId;\r\n\r\n    // Indicates whether an address corresponds to linkdrop signing key\r\n    mapping (address => bool) public isLinkdropSigner;\r\n\r\n    // Indicates who the link is claimed to\r\n    mapping (address => address) public claimedTo;\r\n\r\n    // Indicates whether the link is canceled or not\r\n    mapping (address => bool) internal _canceled;\r\n\r\n    // Indicates whether the initializer function has been called or not\r\n    bool public initialized;\r\n\r\n    // Indicates whether the contract is paused or not\r\n    bool internal _paused;\r\n\r\n    address payable public constant feeReceiver = 0xbE9ad35449A5822B0863D2DeB3147c2a42e07C06;\r\n    uint256 public constant sponsoredFeeAmount = 0.02 ether; // per sponsored claim\r\n    \r\n    // Events\r\n    event Canceled(address linkId);\r\n    event Claimed(address indexed linkId, uint ethAmount, address indexed token, uint tokenAmount, address receiver);\r\n    event ClaimedERC721(address indexed linkId, uint ethAmount, address indexed nft, uint tokenId, address receiver);\r\n    event ClaimedERC1155(address indexed linkId, uint ethAmount, address indexed nft, uint tokenId, uint tokenAmount, address receiver);    \r\n    event Paused();\r\n    event Unpaused();\r\n    event AddedSigningKey(address linkdropSigner);\r\n    event RemovedSigningKey(address linkdropSigner);\r\n\r\n}\r\n\r\n// Dependency file: contracts/interfaces/ILinkdropCommon.sol\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\ninterface ILinkdropCommon {\r\n\r\n    function initialize\r\n    (\r\n        address _owner,\r\n        address payable _linkdropMaster,\r\n        uint _version,\r\n        uint _chainId\r\n    )\r\n    external returns (bool);\r\n\r\n    function isClaimedLink(address _linkId) external view returns (bool);\r\n    function isCanceledLink(address _linkId) external view returns (bool);\r\n    function paused() external view returns (bool);\r\n    function cancel(address _linkId) external  returns (bool);\r\n    function withdraw() external returns (bool);\r\n    function pause() external returns (bool);\r\n    function unpause() external returns (bool);\r\n    function addSigner(address _linkdropSigner) external payable returns (bool);\r\n    function removeSigner(address _linkdropSigner) external returns (bool);\r\n    function destroy() external;\r\n    function getMasterCopyVersion() external view returns (uint);\r\n    function verifyReceiverSignature( address _linkId,\r\n                                      address _receiver,\r\n                                      bytes calldata _signature\r\n                                      )  external view returns (bool);\r\n    receive() external payable;\r\n\r\n}\r\n\r\n// Dependency file: openzeppelin-solidity/contracts/token/ERC1155/IERC1155.sol\r\n\r\n\r\n\r\n// pragma solidity >=0.6.2 <0.8.0;\r\n\r\n// import \"../../introspection/IERC165.sol\";\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\r\n}\r\n\r\n// Dependency file: interfaces/ILinkdropERC1155.sol\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\ninterface ILinkdropERC1155 {\r\n\r\n    function verifyLinkdropSignerSignatureERC1155\r\n    (\r\n        uint _weiAmount,\r\n        address _nftAddress,\r\n        uint _tokenId,\r\n        uint _tokenAmount,\r\n        uint _expiration,\r\n        address _linkId,\r\n        bytes calldata _signature\r\n    )\r\n    external view returns (bool);\r\n\r\n    function checkClaimParamsERC1155\r\n    (\r\n        uint _weiAmount,\r\n        address _nftAddress,\r\n        uint _tokenId,\r\n        uint _tokenAmount,        \r\n        uint _expiration,\r\n        address _linkId,\r\n        bytes calldata _linkdropSignerSignature,\r\n        address _receiver,\r\n        bytes calldata _receiverSignature\r\n     )\r\n    external view returns (bool);\r\n\r\n    function claimERC1155\r\n    (\r\n        uint _weiAmount,\r\n        address _nftAddress,\r\n        uint _tokenId,\r\n        uint _tokenAmount,\r\n        uint _expiration,\r\n        address _linkId,\r\n        bytes calldata _linkdropSignerSignature,\r\n        address payable _receiver,\r\n        bytes calldata _receiverSignature\r\n    )\r\n    external returns (bool);\r\n\r\n}\r\n\r\n// Dependency file: openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n\r\n// pragma solidity >=0.6.2 <0.8.0;\r\n\r\n// import \"../../introspection/IERC165.sol\";\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - `from` cannot be the zero address.\r\n      * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n// Dependency file: interfaces/ILinkdropERC721.sol\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\ninterface ILinkdropERC721 {\r\n\r\n    function verifyLinkdropSignerSignatureERC721\r\n    (\r\n        uint _weiAmount,\r\n        address _nftAddress,\r\n        uint _tokenId,\r\n        uint _expiration,\r\n        address _linkId,\r\n        bytes calldata _signature\r\n    )\r\n    external view returns (bool);\r\n\r\n    function verifyReceiverSignatureERC721\r\n    (\r\n        address _linkId,\r\n\t    address _receiver,\r\n\t\tbytes calldata _signature\r\n    )\r\n    external view returns (bool);\r\n\r\n    function checkClaimParamsERC721\r\n    (\r\n        uint _weiAmount,\r\n        address _nftAddress,\r\n        uint _tokenId,\r\n        uint _expiration,\r\n        address _linkId,\r\n        bytes calldata _linkdropSignerSignature,\r\n        address _receiver,\r\n        bytes calldata _receiverSignature\r\n    )\r\n    external view returns (bool);\r\n\r\n    function claimERC721\r\n    (\r\n        uint _weiAmount,\r\n        address _nftAddress,\r\n        uint _tokenId,\r\n        uint _expiration,\r\n        address _linkId,\r\n        bytes calldata _linkdropSignerSignature,\r\n        address payable _receiver,\r\n        bytes calldata _receiverSignature\r\n    )\r\n    external returns (bool);\r\n\r\n}\r\n\r\n// Dependency file: contracts/linkdrop/LinkdropCommon.sol\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n// import \"../interfaces/ILinkdropCommon.sol\";\r\n// import \"../storage/LinkdropStorage.sol\";\r\n// import \"openzeppelin-solidity/contracts/cryptography/ECDSA.sol\";\r\n// import \"openzeppelin-solidity/contracts/math/SafeMath.sol\";\r\n\r\ncontract LinkdropCommon is ILinkdropCommon, LinkdropStorage {\r\n\r\n    /**\r\n    * @dev Function called only once to set owner, linkdrop master, contract version and chain id\r\n    * @param _owner Owner address\r\n    * @param _linkdropMaster Address corresponding to master key\r\n    * @param _version Contract version\r\n    * @param _chainId Network id\r\n    */\r\n    function initialize\r\n    (\r\n        address _owner,\r\n        address payable _linkdropMaster,\r\n        uint _version,\r\n        uint _chainId\r\n    )\r\n    public\r\n    override      \r\n    returns (bool)\r\n    {\r\n        require(!initialized, \"LINKDROP_PROXY_CONTRACT_ALREADY_INITIALIZED\");\r\n        owner = _owner;\r\n        linkdropMaster = _linkdropMaster;\r\n        isLinkdropSigner[linkdropMaster] = true;\r\n        version = _version;\r\n        chainId = _chainId;\r\n        initialized = true;\r\n        return true;\r\n    }\r\n\r\n    modifier onlyLinkdropMaster() {\r\n        require(msg.sender == linkdropMaster, \"ONLY_LINKDROP_MASTER\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyLinkdropMasterOrFactory() {\r\n        require (msg.sender == linkdropMaster || msg.sender == owner, \"ONLY_LINKDROP_MASTER_OR_FACTORY\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyFactory() {\r\n        require(msg.sender == owner, \"ONLY_FACTORY\");\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"LINKDROP_PROXY_CONTRACT_PAUSED\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Indicates whether a link is claimed or not\r\n    * @param _linkId Address corresponding to link key\r\n    * @return True if claimed\r\n    */\r\n    function isClaimedLink(address _linkId) public override view returns (bool) {\r\n        return claimedTo[_linkId] != address(0);\r\n    }\r\n\r\n    /**\r\n    * @dev Indicates whether a link is canceled or not\r\n    * @param _linkId Address corresponding to link key\r\n    * @return True if canceled\r\n    */\r\n    function isCanceledLink(address _linkId) public override view returns (bool) {\r\n        return _canceled[_linkId];\r\n    }\r\n\r\n    /**\r\n    * @dev Indicates whether a contract is paused or not\r\n    * @return True if paused\r\n    */\r\n    function paused() public override view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to cancel a link, can only be called by linkdrop master\r\n    * @param _linkId Address corresponding to link key\r\n    * @return True if success\r\n    */\r\n    function cancel(address _linkId) external override onlyLinkdropMaster returns (bool) {\r\n        require(!isClaimedLink(_linkId), \"LINK_CLAIMED\");\r\n        _canceled[_linkId] = true;\r\n        emit Canceled(_linkId);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to withdraw eth to linkdrop master, can only be called by linkdrop master\r\n    * @return True if success\r\n    */\r\n    function withdraw() external override onlyLinkdropMaster returns (bool) {\r\n        linkdropMaster.transfer(address(this).balance);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to pause contract, can only be called by linkdrop master\r\n    * @return True if success\r\n    */\r\n    function pause() external override onlyLinkdropMaster whenNotPaused returns (bool) {\r\n        _paused = true;\r\n        emit Paused();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to unpause contract, can only be called by linkdrop master\r\n    * @return True if success\r\n    */\r\n    function unpause() external override onlyLinkdropMaster returns (bool) {\r\n        require(paused(), \"LINKDROP_CONTRACT_ALREADY_UNPAUSED\");\r\n        _paused = false;\r\n        emit Unpaused();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to add new signing key, can only be called by linkdrop master or owner (factory contract)\r\n    * @param _linkdropSigner Address corresponding to signing key\r\n    * @return True if success\r\n    */\r\n    function addSigner(address _linkdropSigner) external override payable onlyLinkdropMasterOrFactory returns (bool) {\r\n        require(_linkdropSigner != address(0), \"INVALID_LINKDROP_SIGNER_ADDRESS\");\r\n        isLinkdropSigner[_linkdropSigner] = true;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to remove signing key, can only be called by linkdrop master\r\n    * @param _linkdropSigner Address corresponding to signing key\r\n    * @return True if success\r\n    */\r\n    function removeSigner(address _linkdropSigner) external override onlyLinkdropMaster returns (bool) {\r\n        require(_linkdropSigner != address(0), \"INVALID_LINKDROP_SIGNER_ADDRESS\");\r\n        isLinkdropSigner[_linkdropSigner] = false;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to destroy this contract, can only be called by owner (factory) or linkdrop master\r\n    * Withdraws all the remaining ETH to linkdrop master\r\n    */\r\n    function destroy() external override onlyLinkdropMasterOrFactory {\r\n        selfdestruct(linkdropMaster);\r\n    }\r\n\r\n    /**\r\n    * @dev Function for other contracts to be able to fetch the mastercopy version\r\n    * @return Master copy version\r\n    */\r\n    function getMasterCopyVersion() external override view returns (uint) {\r\n        return version;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Function to verify linkdrop receiver's signature\r\n    * @param _linkId Address corresponding to link key\r\n    * @param _receiver Address of linkdrop receiver\r\n    * @param _signature ECDSA signature of linkdrop receiver\r\n    * @return True if signed with link key\r\n    */\r\n    function verifyReceiverSignature\r\n    (\r\n        address _linkId,\r\n        address _receiver,\r\n        bytes memory _signature\r\n    )\r\n    public view\r\n    override       \r\n    returns (bool)\r\n    {\r\n        bytes32 prefixedHash = ECDSA.toEthSignedMessageHash(keccak256(abi.encodePacked(_receiver)));\r\n        address signer = ECDSA.recover(prefixedHash, _signature);\r\n        return signer == _linkId;\r\n    }\r\n    \r\n    /**\r\n    * @dev Fallback function to accept ETH\r\n    */\r\n    receive() external override payable {}    \r\n}\r\n\r\n// Dependency file: contracts/interfaces/ILinkdropERC20.sol\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\ninterface ILinkdropERC20 {\r\n\r\n    function verifyLinkdropSignerSignature\r\n    (\r\n        uint _weiAmount,\r\n        address _tokenAddress,\r\n        uint _tokenAmount,\r\n        uint _expiration,\r\n        address _linkId,\r\n        bytes calldata _signature\r\n    )\r\n    external view returns (bool);\r\n\r\n    function checkClaimParams\r\n    (\r\n        uint _weiAmount,\r\n        address _tokenAddress,\r\n        uint _tokenAmount,\r\n        uint _expiration,\r\n        address _linkId,\r\n        bytes calldata _linkdropSignerSignature,\r\n        address _receiver,\r\n        bytes calldata _receiverSignature\r\n    )\r\n    external view returns (bool);\r\n\r\n    function claim\r\n    (\r\n        uint _weiAmount,\r\n        address _tokenAddress,\r\n        uint _tokenAmount,\r\n        uint _expiration,\r\n        address _linkId,\r\n        bytes calldata _linkdropSignerSignature,\r\n        address payable _receiver,\r\n        bytes calldata _receiverSignature\r\n    )\r\n    external returns (bool);\r\n\r\n}\r\n\r\n// Dependency file: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * // importANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// Dependency file: contracts/linkdrop/LinkdropERC1155.sol\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n// import \"./LinkdropCommon.sol\";\r\n// import \"../../interfaces/ILinkdropERC1155.sol\";\r\n// import \"openzeppelin-solidity/contracts/token/ERC1155/IERC1155.sol\";\r\n\r\ncontract LinkdropERC1155 is ILinkdropERC1155, LinkdropCommon {\r\n    using SafeMath for uint;\r\n    /**\r\n    * @dev Function to verify linkdrop signer's signature\r\n    * @param _weiAmount Amount of wei to be claimed\r\n    * @param _nftAddress NFT address\r\n    * @param _tokenId Token id to be claimed\r\n    * @param _tokenAmount Token amount to be claimed\r\n    * @param _expiration Unix timestamp of link expiration time\r\n    * @param _linkId Address corresponding to link key\r\n    * @param _signature ECDSA signature of linkdrop signer\r\n    * @return True if signed with linkdrop signer's private key\r\n    */\r\n    function verifyLinkdropSignerSignatureERC1155\r\n    (\r\n        uint _weiAmount,\r\n        address _nftAddress,\r\n        uint _tokenId,\r\n        uint _tokenAmount,\r\n        uint _expiration,\r\n        address _linkId,\r\n        bytes memory _signature\r\n    )\r\n    public view\r\n    override       \r\n    returns (bool)\r\n    {\r\n        bytes32 prefixedHash = ECDSA.toEthSignedMessageHash\r\n        (\r\n            keccak256\r\n            (\r\n                abi.encodePacked\r\n                (\r\n                    _weiAmount,\r\n                    _nftAddress,\r\n                    _tokenId,\r\n                    _tokenAmount,\r\n                    _expiration,\r\n                    version,\r\n                    chainId,\r\n                    _linkId,\r\n                    address(this)\r\n                )\r\n            )\r\n        );\r\n        address signer = ECDSA.recover(prefixedHash, _signature);\r\n        return isLinkdropSigner[signer];\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Function to verify claim params and make sure the link is not claimed or canceled\r\n    * @param _weiAmount Amount of wei to be claimed\r\n    * @param _nftAddress NFT address\r\n    * @param _tokenId Token id to be claimed\r\n    * @param _tokenAmount Token amount to be claimed\r\n    * @param _expiration Unix timestamp of link expiration time\r\n    * @param _linkId Address corresponding to link key\r\n    * @param _linkdropSignerSignature ECDSA signature of linkdrop signer\r\n    * @param _receiver Address of linkdrop receiver\r\n    * @param _receiverSignature ECDSA signature of linkdrop receiver\r\n    * @return True if success\r\n    */\r\n    function checkClaimParamsERC1155\r\n    (\r\n        uint _weiAmount,\r\n        address _nftAddress,\r\n        uint _tokenId,\r\n        uint _tokenAmount,\r\n        uint _expiration,\r\n        address _linkId,\r\n        bytes memory _linkdropSignerSignature,\r\n        address _receiver,\r\n        bytes memory _receiverSignature\r\n    )\r\n    public view\r\n    override       \r\n    whenNotPaused\r\n    returns (bool)\r\n    {\r\n        // Make sure nft address is not equal to address(0)\r\n        require(_nftAddress != address(0), \"INVALID_NFT_ADDRESS\");\r\n\r\n        // Make sure link is not claimed\r\n        require(isClaimedLink(_linkId) == false, \"LINK_CLAIMED\");\r\n\r\n        // Make sure link is not canceled\r\n        require(isCanceledLink(_linkId) == false, \"LINK_CANCELED\");\r\n\r\n        // Make sure link is not expired\r\n        require(_expiration >= now, \"LINK_EXPIRED\");\r\n\r\n        // Make sure eth amount is available for this contract\r\n        require(address(this).balance >= _weiAmount, \"INSUFFICIENT_ETHERS\");\r\n\r\n        // Make sure linkdrop master has enough tokens of corresponding tokenId\r\n        require(IERC1155(_nftAddress).balanceOf(linkdropMaster, _tokenId) >= _tokenAmount, \"LINKDROP_MASTER_DOES_NOT_HAVE_ENOUGH_TOKENS\");\r\n\r\n        // Verify that link key is legit and signed by linkdrop signer's private key\r\n        require\r\n        (\r\n            verifyLinkdropSignerSignatureERC1155\r\n            (\r\n                _weiAmount,\r\n                _nftAddress,\r\n                _tokenId,\r\n                _tokenAmount,\r\n                _expiration,\r\n                _linkId,\r\n                _linkdropSignerSignature\r\n            ),\r\n            \"INVALID_LINKDROP_SIGNER_SIGNATURE\"\r\n        );\r\n\r\n        // Verify that receiver address is signed by ephemeral key assigned to claim link (link key)\r\n        require\r\n        (\r\n            verifyReceiverSignature(_linkId, _receiver, _receiverSignature),\r\n            \"INVALID_RECEIVER_SIGNATURE\"\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to claim ETH and/or ERC1155 token. Can only be called when contract is not paused\r\n    * @param _weiAmount Amount of wei to be claimed\r\n    * @param _nftAddress NFT address\r\n    * @param _tokenId Token id to be claimed\r\n    * @param _tokenAmount Token amount to be claimed\r\n    * @param _expiration Unix timestamp of link expiration time\r\n    * @param _linkId Address corresponding to link key\r\n    * @param _linkdropSignerSignature ECDSA signature of linkdrop signer\r\n    * @param _receiver Address of linkdrop receiver\r\n    * @param _receiverSignature ECDSA signature of linkdrop receiver\r\n    * @return True if success\r\n    */\r\n    function claimERC1155\r\n    (\r\n        uint _weiAmount,\r\n        address _nftAddress,\r\n        uint _tokenId,\r\n        uint _tokenAmount,\r\n        uint _expiration,\r\n        address _linkId,\r\n        bytes calldata _linkdropSignerSignature,\r\n        address payable _receiver,\r\n        bytes calldata _receiverSignature\r\n    )\r\n    external\r\n    override \r\n    whenNotPaused\r\n    returns (bool)\r\n    {\r\n\r\n        // Make sure params are valid\r\n        require\r\n        (\r\n            checkClaimParamsERC1155\r\n            (\r\n                _weiAmount,\r\n                _nftAddress,\r\n                _tokenId,\r\n                _tokenAmount,\r\n                _expiration,                \r\n                _linkId,\r\n                _linkdropSignerSignature,\r\n                _receiver,\r\n                _receiverSignature\r\n            ),\r\n            \"INVALID_CLAIM_PARAMS\"\r\n        );\r\n\r\n        // Mark link as claimed\r\n        claimedTo[_linkId] = _receiver;\r\n\r\n        // Make sure transfer succeeds\r\n        require(_transferFundsERC1155(_weiAmount, _nftAddress, _tokenId, _tokenAmount, _receiver), \"TRANSFER_FAILED\");\r\n\r\n        // Log claim\r\n        emit ClaimedERC1155(_linkId, _weiAmount, _nftAddress, _tokenId, _tokenAmount, _receiver);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to transfer ethers and/or ERC1155 tokens\r\n    * @param _weiAmount Amount of wei to be claimed\r\n    * @param _nftAddress NFT address\r\n    * @param _tokenId token id to transfer\r\n    * @param _tokenAmount Token amount to transfer\r\n    * @param _receiver Address to transfer funds to\r\n    * @return True if success\r\n    */\r\n    function _transferFundsERC1155\r\n    (\r\n        uint _weiAmount,\r\n        address _nftAddress,\r\n        uint _tokenId,\r\n        uint _tokenAmount,\r\n        address payable _receiver\r\n    )\r\n    internal returns (bool) {\r\n      // should send fees to fee receiver\r\n      if (tx.origin != _receiver) { \r\n        feeReceiver.transfer(sponsoredFeeAmount);\r\n      }\r\n      \r\n      // Transfer ethers\r\n      if (_weiAmount > 0) {\r\n        _receiver.transfer(_weiAmount);\r\n      }\r\n      \r\n      // Transfer NFT\r\n      IERC1155(_nftAddress).safeTransferFrom(linkdropMaster, _receiver, _tokenId, _tokenAmount, new bytes(0));\r\n      \r\n      return true;\r\n    }\r\n\r\n}\r\n\r\n// Dependency file: contracts/linkdrop/LinkdropERC721.sol\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n// import \"./LinkdropCommon.sol\";\r\n// import \"../../interfaces/ILinkdropERC721.sol\";\r\n// import \"openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\";\r\n\r\ncontract LinkdropERC721 is ILinkdropERC721, LinkdropCommon {\r\n    using SafeMath for uint;\r\n    /**\r\n    * @dev Function to verify linkdrop signer's signature\r\n    * @param _weiAmount Amount of wei to be claimed\r\n    * @param _nftAddress NFT address\r\n    * @param _tokenId Token id to be claimed\r\n    * @param _expiration Unix timestamp of link expiration time\r\n    * @param _linkId Address corresponding to link key\r\n    * @param _signature ECDSA signature of linkdrop signer\r\n    * @return True if signed with linkdrop signer's private key\r\n    */\r\n    function verifyLinkdropSignerSignatureERC721\r\n    (\r\n        uint _weiAmount,\r\n        address _nftAddress,\r\n        uint _tokenId,\r\n        uint _expiration,\r\n        address _linkId,\r\n        bytes memory _signature\r\n    )\r\n    public view\r\n    override       \r\n    returns (bool)\r\n    {\r\n        bytes32 prefixedHash = ECDSA.toEthSignedMessageHash\r\n        (\r\n            keccak256\r\n            (\r\n                abi.encodePacked\r\n                (\r\n                    _weiAmount,\r\n                    _nftAddress,\r\n                    _tokenId,\r\n                    _expiration,\r\n                    version,\r\n                    chainId,\r\n                    _linkId,\r\n                    address(this)\r\n                )\r\n            )\r\n        );\r\n        address signer = ECDSA.recover(prefixedHash, _signature);\r\n        return isLinkdropSigner[signer];\r\n    }\r\n\r\n    /**\r\n    * @dev Function to verify linkdrop receiver's signature\r\n    * @param _linkId Address corresponding to link key\r\n    * @param _receiver Address of linkdrop receiver\r\n    * @param _signature ECDSA signature of linkdrop receiver\r\n    * @return True if signed with link key\r\n    */\r\n    function verifyReceiverSignatureERC721\r\n    (\r\n        address _linkId,\r\n        address _receiver,\r\n        bytes memory _signature\r\n    )\r\n    public view\r\n    override       \r\n    returns (bool)\r\n    {\r\n        bytes32 prefixedHash = ECDSA.toEthSignedMessageHash(keccak256(abi.encodePacked(_receiver)));\r\n        address signer = ECDSA.recover(prefixedHash, _signature);\r\n        return signer == _linkId;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to verify claim params and make sure the link is not claimed or canceled\r\n    * @param _weiAmount Amount of wei to be claimed\r\n    * @param _nftAddress NFT address\r\n    * @param _tokenId Token id to be claimed\r\n    * @param _expiration Unix timestamp of link expiration time\r\n    * @param _linkId Address corresponding to link key\r\n    * @param _linkdropSignerSignature ECDSA signature of linkdrop signer\r\n    * @param _receiver Address of linkdrop receiver\r\n    * @param _receiverSignature ECDSA signature of linkdrop receiver\r\n    * @return True if success\r\n    */\r\n    function checkClaimParamsERC721\r\n    (\r\n        uint _weiAmount,\r\n        address _nftAddress,\r\n        uint _tokenId,\r\n        uint _expiration,\r\n        address _linkId,\r\n        bytes memory _linkdropSignerSignature,\r\n        address _receiver,\r\n        bytes memory _receiverSignature\r\n    )\r\n    public view\r\n    override       \r\n    whenNotPaused\r\n    returns (bool)\r\n    {\r\n        // Make sure nft address is not equal to address(0)\r\n        require(_nftAddress != address(0), \"INVALID_NFT_ADDRESS\");\r\n\r\n        // Make sure link is not claimed\r\n        require(isClaimedLink(_linkId) == false, \"LINK_CLAIMED\");\r\n\r\n        // Make sure link is not canceled\r\n        require(isCanceledLink(_linkId) == false, \"LINK_CANCELED\");\r\n\r\n        // Make sure link is not expired\r\n        require(_expiration >= now, \"LINK_EXPIRED\");\r\n\r\n        // Make sure eth amount is available for this contract\r\n        require(address(this).balance >= _weiAmount, \"INSUFFICIENT_ETHERS\");\r\n\r\n        // Make sure linkdrop master is owner of token\r\n        require(IERC721(_nftAddress).ownerOf(_tokenId) == linkdropMaster, \"LINKDROP_MASTER_DOES_NOT_OWN_TOKEN_ID\");\r\n\r\n        // Verify that link key is legit and signed by linkdrop signer's private key\r\n        require\r\n        (\r\n            verifyLinkdropSignerSignatureERC721\r\n            (\r\n                _weiAmount,\r\n                _nftAddress,\r\n                _tokenId,\r\n                _expiration,\r\n                _linkId,\r\n                _linkdropSignerSignature\r\n            ),\r\n            \"INVALID_LINKDROP_SIGNER_SIGNATURE\"\r\n        );\r\n\r\n        // Verify that receiver address is signed by ephemeral key assigned to claim link (link key)\r\n        require\r\n        (\r\n            verifyReceiverSignatureERC721(_linkId, _receiver, _receiverSignature),\r\n            \"INVALID_RECEIVER_SIGNATURE\"\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to claim ETH and/or ERC721 token. Can only be called when contract is not paused\r\n    * @param _weiAmount Amount of wei to be claimed\r\n    * @param _nftAddress NFT address\r\n    * @param _tokenId Token id to be claimed\r\n    * @param _expiration Unix timestamp of link expiration time\r\n    * @param _linkId Address corresponding to link key\r\n    * @param _linkdropSignerSignature ECDSA signature of linkdrop signer\r\n    * @param _receiver Address of linkdrop receiver\r\n    * @param _receiverSignature ECDSA signature of linkdrop receiver\r\n    * @return True if success\r\n    */\r\n    function claimERC721\r\n    (\r\n        uint _weiAmount,\r\n        address _nftAddress,\r\n        uint _tokenId,\r\n        uint _expiration,\r\n        address _linkId,\r\n        bytes calldata _linkdropSignerSignature,\r\n        address payable _receiver,\r\n        bytes calldata _receiverSignature\r\n    )\r\n    external\r\n    override \r\n    onlyFactory\r\n    whenNotPaused\r\n    returns (bool)\r\n    {\r\n\r\n        // Make sure params are valid\r\n        require\r\n        (\r\n            checkClaimParamsERC721\r\n            (\r\n                _weiAmount,\r\n                _nftAddress,\r\n                _tokenId,\r\n                _expiration,\r\n                _linkId,\r\n                _linkdropSignerSignature,\r\n                _receiver,\r\n                _receiverSignature\r\n            ),\r\n            \"INVALID_CLAIM_PARAMS\"\r\n        );\r\n\r\n        // Mark link as claimed\r\n        claimedTo[_linkId] = _receiver;\r\n\r\n        // Make sure transfer succeeds\r\n        require(_transferFundsERC721(_weiAmount, _nftAddress, _tokenId, _receiver), \"TRANSFER_FAILED\");\r\n\r\n        // Log claim\r\n        emit ClaimedERC721(_linkId, _weiAmount, _nftAddress, _tokenId, _receiver);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to transfer ethers and/or ERC721 tokens\r\n    * @param _weiAmount Amount of wei to be claimed\r\n    * @param _nftAddress NFT address\r\n    * @param _tokenId Amount of tokens to be claimed (in atomic value)\r\n    * @param _receiver Address to transfer funds to\r\n    * @return True if success\r\n    */\r\n    function _transferFundsERC721\r\n    (\r\n        uint _weiAmount,\r\n        address _nftAddress,\r\n        uint _tokenId,\r\n        address payable _receiver\r\n    )\r\n    internal returns (bool)\r\n    {\r\n\r\n      // should send fees to fee receiver\r\n      if (tx.origin != _receiver) { \r\n        feeReceiver.transfer(sponsoredFeeAmount);\r\n      }\r\n      \r\n      // Transfer ethers\r\n      if (_weiAmount > 0) {\r\n        _receiver.transfer(_weiAmount);\r\n      }\r\n\r\n      // Transfer NFT\r\n      IERC721(_nftAddress).transferFrom(linkdropMaster, _receiver, _tokenId);\r\n      \r\n      return true;\r\n    }\r\n\r\n}\r\n\r\n// Dependency file: contracts/linkdrop/LinkdropERC20.sol\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n// import \"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\";\r\n// import \"../interfaces/ILinkdropERC20.sol\";\r\n// import \"./LinkdropCommon.sol\";\r\n\r\ncontract LinkdropERC20 is ILinkdropERC20, LinkdropCommon {\r\n  \r\n    using SafeMath for uint;\r\n    \r\n    /**\r\n    * @dev Function to verify linkdrop signer's signature\r\n    * @param _weiAmount Amount of wei to be claimed\r\n    * @param _tokenAddress Token address\r\n    * @param _tokenAmount Amount of tokens to be claimed (in atomic value)\r\n    * @param _expiration Unix timestamp of link expiration time\r\n    * @param _linkId Address corresponding to link key\r\n    * @param _signature ECDSA signature of linkdrop signer\r\n    * @return True if signed with linkdrop signer's private key\r\n    */\r\n    function verifyLinkdropSignerSignature\r\n    (\r\n        uint _weiAmount,\r\n        address _tokenAddress,\r\n        uint _tokenAmount,\r\n        uint _expiration,\r\n        address _linkId,\r\n        bytes memory _signature\r\n    )\r\n    public view\r\n      override \r\n    returns (bool)\r\n    {\r\n        bytes32 prefixedHash = ECDSA.toEthSignedMessageHash\r\n        (\r\n            keccak256\r\n            (\r\n                abi.encodePacked\r\n                (\r\n                    _weiAmount,\r\n                    _tokenAddress,\r\n                    _tokenAmount,\r\n                    _expiration,\r\n                    version,\r\n                    chainId,\r\n                    _linkId,\r\n                    address(this)\r\n                )\r\n            )\r\n        );\r\n        address signer = ECDSA.recover(prefixedHash, _signature);\r\n        return isLinkdropSigner[signer];\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Function to verify claim params and make sure the link is not claimed or canceled\r\n    * @param _weiAmount Amount of wei to be claimed\r\n    * @param _tokenAddress Token address\r\n    * @param _tokenAmount Amount of tokens to be claimed (in atomic value)\r\n    * @param _expiration Unix timestamp of link expiration time\r\n    * @param _linkId Address corresponding to link key\r\n    * @param _linkdropSignerSignature ECDSA signature of linkdrop signer\r\n    * @param _receiver Address of linkdrop receiver\r\n    * @param _receiverSignature ECDSA signature of linkdrop receiver,\r\n    * @return True if success\r\n    */\r\n    function checkClaimParams\r\n    (\r\n        uint _weiAmount,\r\n        address _tokenAddress,\r\n        uint _tokenAmount,\r\n        uint _expiration,\r\n        address _linkId,\r\n        bytes memory _linkdropSignerSignature,\r\n        address _receiver,\r\n        bytes memory _receiverSignature\r\n     )\r\n    public view\r\n    override       \r\n    whenNotPaused\r\n    returns (bool)\r\n    {\r\n        // If tokens are being claimed\r\n        if (_tokenAmount > 0) {\r\n            require(_tokenAddress != address(0), \"INVALID_TOKEN_ADDRESS\");\r\n        }\r\n\r\n        // Make sure link is not claimed\r\n        require(isClaimedLink(_linkId) == false, \"LINK_CLAIMED\");\r\n\r\n        // Make sure link is not canceled\r\n        require(isCanceledLink(_linkId) == false, \"LINK_CANCELED\");\r\n\r\n        // Make sure link is not expired\r\n        require(_expiration >= now, \"LINK_EXPIRED\");\r\n\r\n        // Make sure eth amount is available for this contract\r\n        require(address(this).balance >= _weiAmount, \"INSUFFICIENT_ETHERS\");\r\n\r\n        // Make sure tokens are available for this contract\r\n        if (_tokenAddress != address(0)) {\r\n            require\r\n            (\r\n                IERC20(_tokenAddress).balanceOf(linkdropMaster) >= _tokenAmount,\r\n                \"INSUFFICIENT_TOKENS\"\r\n            );\r\n\r\n            require\r\n            (\r\n                IERC20(_tokenAddress).allowance(linkdropMaster, address(this)) >= _tokenAmount, \"INSUFFICIENT_ALLOWANCE\"\r\n            );\r\n        }\r\n\r\n        // Verify that link key is legit and signed by linkdrop signer\r\n        require\r\n        (\r\n            verifyLinkdropSignerSignature\r\n            (\r\n                _weiAmount,\r\n                _tokenAddress,\r\n                _tokenAmount,\r\n                _expiration,\r\n                _linkId,\r\n                _linkdropSignerSignature\r\n            ),\r\n            \"INVALID_LINKDROP_SIGNER_SIGNATURE\"\r\n        );\r\n\r\n        // Verify that receiver address is signed by ephemeral key assigned to claim link (link key)\r\n        require\r\n        (\r\n            verifyReceiverSignature(_linkId, _receiver, _receiverSignature),\r\n            \"INVALID_RECEIVER_SIGNATURE\"\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to claim ETH and/or ERC20 tokens. Can only be called when contract is not paused\r\n    * @param _weiAmount Amount of wei to be claimed\r\n    * @param _tokenAddress Token address\r\n    * @param _tokenAmount Amount of tokens to be claimed (in atomic value)\r\n    * @param _expiration Unix timestamp of link expiration time\r\n    * @param _linkId Address corresponding to link key\r\n    * @param _linkdropSignerSignature ECDSA signature of linkdrop signer\r\n    * @param _receiver Address of linkdrop receiver\r\n    * @param _receiverSignature ECDSA signature of linkdrop receiver\r\n    * @return True if success\r\n    */\r\n    function claim\r\n    (\r\n        uint _weiAmount,\r\n        address _tokenAddress,\r\n        uint _tokenAmount,\r\n        uint _expiration,\r\n        address _linkId,\r\n        bytes calldata _linkdropSignerSignature,\r\n        address payable _receiver,\r\n        bytes calldata _receiverSignature\r\n    )\r\n    external\r\n    override       \r\n    onlyFactory\r\n    whenNotPaused\r\n    returns (bool)\r\n    {\r\n\r\n        // Make sure params are valid\r\n        require\r\n        (\r\n            checkClaimParams\r\n            (\r\n                _weiAmount,\r\n                _tokenAddress,\r\n                _tokenAmount,\r\n                _expiration,\r\n                _linkId,\r\n                _linkdropSignerSignature,\r\n                _receiver,\r\n                _receiverSignature\r\n            ),\r\n            \"INVALID_CLAIM_PARAMS\"\r\n        );\r\n\r\n        // Mark link as claimed\r\n        claimedTo[_linkId] = _receiver;\r\n\r\n        // Make sure transfer succeeds\r\n        require(_transferFunds(_weiAmount, _tokenAddress, _tokenAmount, _receiver), \"TRANSFER_FAILED\");\r\n\r\n        // Emit claim event\r\n        emit Claimed(_linkId, _weiAmount, _tokenAddress, _tokenAmount, _receiver);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function to transfer ethers and/or ERC20 tokens\r\n    * @param _weiAmount Amount of wei to be claimed\r\n    * @param _tokenAddress Token address\r\n    * @param _tokenAmount Amount of tokens to be claimed (in atomic value)\r\n    * @param _receiver Address to transfer funds to\r\n\r\n    * @return True if success\r\n    */\r\n    function _transferFunds\r\n    (\r\n        uint _weiAmount,\r\n        address _tokenAddress,\r\n        uint _tokenAmount,\r\n        address payable _receiver\r\n    )\r\n    internal returns (bool)\r\n    {\r\n\r\n      // should send fees to fee receiver\r\n      if (tx.origin != _receiver) { \r\n        feeReceiver.transfer(sponsoredFeeAmount);\r\n      }\r\n      \r\n        // Transfer ethers\r\n        if (_weiAmount > 0) {\r\n            _receiver.transfer(_weiAmount);\r\n        }\r\n\r\n        // Transfer tokens\r\n        if (_tokenAmount > 0) {\r\n            IERC20(_tokenAddress).transferFrom(linkdropMaster, _receiver, _tokenAmount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n// import \"./LinkdropERC20.sol\";\r\n// import \"./LinkdropERC721.sol\";\r\n// import \"./LinkdropERC1155.sol\";\r\n\r\ncontract LinkdropMastercopy is LinkdropERC20, LinkdropERC721, LinkdropERC1155 {\r\n\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"linkdropSigner\",\"type\":\"address\"}],\"name\":\"AddedSigningKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"linkId\",\"type\":\"address\"}],\"name\":\"Canceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"linkId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"linkId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ClaimedERC1155\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"linkId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ClaimedERC721\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"linkdropSigner\",\"type\":\"address\"}],\"name\":\"RemovedSigningKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_linkdropSigner\",\"type\":\"address\"}],\"name\":\"addSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_linkId\",\"type\":\"address\"}],\"name\":\"cancel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_weiAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_linkId\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_linkdropSignerSignature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_receiverSignature\",\"type\":\"bytes\"}],\"name\":\"checkClaimParams\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_weiAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_linkId\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_linkdropSignerSignature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_receiverSignature\",\"type\":\"bytes\"}],\"name\":\"checkClaimParamsERC1155\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_weiAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_linkId\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_linkdropSignerSignature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_receiverSignature\",\"type\":\"bytes\"}],\"name\":\"checkClaimParamsERC721\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_weiAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_linkId\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_linkdropSignerSignature\",\"type\":\"bytes\"},{\"internalType\":\"address payable\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_receiverSignature\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_weiAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_linkId\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_linkdropSignerSignature\",\"type\":\"bytes\"},{\"internalType\":\"address payable\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_receiverSignature\",\"type\":\"bytes\"}],\"name\":\"claimERC1155\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_weiAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_linkId\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_linkdropSignerSignature\",\"type\":\"bytes\"},{\"internalType\":\"address payable\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_receiverSignature\",\"type\":\"bytes\"}],\"name\":\"claimERC721\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMasterCopyVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_linkdropMaster\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_linkId\",\"type\":\"address\"}],\"name\":\"isCanceledLink\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_linkId\",\"type\":\"address\"}],\"name\":\"isClaimedLink\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLinkdropSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkdropMaster\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_linkdropSigner\",\"type\":\"address\"}],\"name\":\"removeSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sponsoredFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_weiAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_linkId\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"verifyLinkdropSignerSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_weiAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_linkId\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"verifyLinkdropSignerSignatureERC1155\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_weiAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_linkId\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"verifyLinkdropSignerSignatureERC721\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_linkId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"verifyReceiverSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_linkId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"verifyReceiverSignatureERC721\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LinkdropMastercopy", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4314ee1f1b9ea5093367e80add3e85cdbc8c39f781b7f6912651a61854e756ed"}