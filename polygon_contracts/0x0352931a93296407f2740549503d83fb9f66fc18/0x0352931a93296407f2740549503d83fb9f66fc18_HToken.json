{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/htoken/HToken.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"./HTokenInternal.sol\\\";\\n\\n/**\\n * @title   Honey Finance's HToken contract\\n * @notice  ERC-1155 contract which wraps an ERC-20 underlying liquid asset and an ERC-721 underlying collateral asset\\n * @author  Honey Labs Inc.\\n * @custom:coauthor BowTiedPickle\\n * @custom:coauthor m4rio\\n */\\ncontract HToken is HTokenInternal {\\n  using SafeERC20 for IERC20;\\n\\n  /// @notice Version of the contract. 1_000_000 corresponds to 1.0.0\\n  uint256 public constant version = 1_000_000;\\n\\n  // Reentrancy parameters and event\\n  uint256 private constant _NOT_ENTERED = 1;\\n  uint256 private constant _ENTERED = 2;\\n  uint256 private _status;\\n  error Reentrant();\\n\\n  /**\\n   * @notice  Initialize the market\\n   * @param   _underlyingToken              address of the underlying ERC-20 liquid asset\\n   * @param   _collateralToken              address of the underlying ERC-721 collateral asset\\n   * @param   _controller                   address of the controller\\n   * @param   _interestRateModel            address of the interest rate model\\n   * @param   _liquidator                   address of the liquidator\\n   * @param   _initialExchangeRateMantissa  initial exchange rate, mantissa formatted\\n   * @param   _adminCommissionReceiver      address that receives admin commission\\n   * @param   _protocolCommissionReceiver   address that receives protocol commission\\n   * @param   _roleReceiver                 address to recieve DEFAULT_ADMIN_ROLE\\n   * @param   _name                         name of the token\\n   * @param   _symbol                       symbol of the token\\n   */\\n  constructor(\\n    address _underlyingToken,\\n    address _collateralToken,\\n    address _controller,\\n    address _interestRateModel,\\n    address _liquidator,\\n    uint256 _initialExchangeRateMantissa,\\n    address _adminCommissionReceiver,\\n    address _protocolCommissionReceiver,\\n    address _roleReceiver,\\n    string memory _name,\\n    string memory _symbol\\n  )\\n    HTokenInternal(\\n      _underlyingToken,\\n      _collateralToken,\\n      _controller,\\n      _interestRateModel,\\n      _liquidator,\\n      _initialExchangeRateMantissa,\\n      _adminCommissionReceiver,\\n      _protocolCommissionReceiver,\\n      _roleReceiver,\\n      _name,\\n      _symbol\\n    )\\n  {}\\n\\n  // ----- Lend side functions -----\\n\\n  /**\\n   * @notice  Deposit underlying ERC-20 asset and mint hTokens\\n   * @dev     Pull pattern, user must approve the contract before calling. If _to is address(0) then it becomes msg.sender\\n   * @param   _amount   Quantity of underlying ERC-20 to transfer in\\n   * @param   _to       Target address to mint hTokens to\\n   */\\n  function depositUnderlying(uint256 _amount, address _to) external {\\n    checkReentrant();\\n    if (_to == address(0)) _to = msg.sender;\\n    depositUnderlyingInternal(_amount, _to);\\n    _status = _NOT_ENTERED;\\n  }\\n\\n  /**\\n   * @notice  Redeem a specified amount of hTokens for their underlying ERC-20 asset\\n   * @param   _amount   Quantity of hTokens to redeem for underlying ERC-20\\n   */\\n  function redeem(uint256 _amount) external {\\n    checkReentrant();\\n    redeemInternal(_amount);\\n    _status = _NOT_ENTERED;\\n  }\\n\\n  /**\\n   * @notice  Withdraws the specified amount of underlying ERC-20 asset, consuming the minimum amount of hTokens necessary\\n   * @param   _amount   Quantity of underlying ERC-20 tokens to withdraw\\n   */\\n  function withdraw(uint256 _amount) external {\\n    checkReentrant();\\n    withdrawInternal(_amount);\\n    _status = _NOT_ENTERED;\\n  }\\n\\n  /**\\n   * @notice  Deposit multiple specified tokens of the underlying ERC-721 asset and mint ERC-1155 deposit coupon NFTs\\n   * @dev     Pull pattern, user must approve the contract before calling.\\n   * @param   _collateralIds  Token IDs of underlying ERC-721 to be transferred in\\n   */\\n  function depositCollateral(uint256[] calldata _collateralIds) external {\\n    checkReentrant();\\n    uint256 len = _collateralIds.length;\\n    for (uint256 i; i < len; ) {\\n      depositCollateralInternal(_collateralIds[i]);\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    _status = _NOT_ENTERED;\\n  }\\n\\n  /**\\n   * @notice  Sender borrows assets from the protocol against the specified collateral asset, without a referral code\\n   * @dev     Collateral must be deposited first.\\n   * @param   _borrowAmount   Amount of underlying ERC-20 to borrow\\n   * @param   _collateralId   Token ID of underlying ERC-721 to be borrowed against\\n   */\\n  function borrow(uint256 _borrowAmount, uint256 _collateralId) external {\\n    checkReentrant();\\n    borrowInternal(_borrowAmount, _collateralId, \\\"\\\", new bytes(0));\\n    _status = _NOT_ENTERED;\\n  }\\n\\n  /**\\n   * @notice  Sender borrows assets from the protocol against the specified collateral asset, using a referral code\\n   * @param   _borrowAmount   Amount of underlying ERC-20 to borrow\\n   * @param   _collateralId   Token ID of underlying ERC-721 to be borrowed against\\n   * @param   _referral       Referral code as a plain string\\n   * @param   _signature      Signed message authorizing the referral, provided by Honey Labs\\n   */\\n  function borrowReferred(\\n    uint256 _borrowAmount,\\n    uint256 _collateralId,\\n    string calldata _referral,\\n    bytes calldata _signature\\n  ) external {\\n    checkReentrant();\\n    borrowInternal(_borrowAmount, _collateralId, _referral, _signature);\\n    _status = _NOT_ENTERED;\\n  }\\n\\n  /**\\n   * @notice  Sender repays a borrow taken against the specified collateral asset\\n   * @dev     Pull pattern, user must approve the contract before calling.\\n   * @param   _repayAmount    Amount of underlying ERC-20 to repay\\n   * @param   _collateralId   Token ID of underlying ERC-721 to be repaid against\\n   * @param   _owner   Owner of the coupon ID associated with this collateral\\n   */\\n  function repayBorrow(\\n    uint256 _repayAmount,\\n    uint256 _collateralId,\\n    address _owner\\n  ) external {\\n    checkReentrant();\\n    if (_owner == address(0)) _owner = msg.sender;\\n    repayBorrowInternal(_owner, _repayAmount, _collateralId, false);\\n    _status = _NOT_ENTERED;\\n  }\\n\\n  /**\\n   * @notice  Burn deposit coupon NFTs and withdraw the associated underlying ERC-721 NFTs\\n   * @param   _collateralIds  Token IDs of underlying ERC-721 to be withdrawn\\n   */\\n  function withdrawCollateral(uint256[] calldata _collateralIds) external {\\n    checkReentrant();\\n    uint256 len = _collateralIds.length;\\n    for (uint256 i; i < len; ) {\\n      withdrawCollateralInternal(_collateralIds[i]);\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    _status = _NOT_ENTERED;\\n  }\\n\\n  /**\\n   * @notice  Trigger transfer of an NFT to the liquidation contract\\n   * @param   _collateralId   Token ID of underlying ERC-721 to be liquidated\\n   */\\n  function liquidateBorrow(uint256 _collateralId) external {\\n    checkReentrant();\\n    liquidateBorrowInternal(_collateralId);\\n    _status = _NOT_ENTERED;\\n  }\\n\\n  /**\\n   * @notice  Pay off the entirety of a liquidated debt position and burn the coupon\\n   * @dev     May only be called by the liquidator\\n   * @param   _borrower       Owner of the debt position\\n   * @param   _collateralId   Token ID of underlying ERC-721 to be closed out\\n   */\\n  function closeoutLiquidation(address _borrower, uint256 _collateralId) external {\\n    checkReentrant();\\n    if (!hasRole(LIQUIDATOR_ROLE, msg.sender)) revert Unauthorized();\\n    closeoutLiquidationInternal(_borrower, _collateralId);\\n    _status = _NOT_ENTERED;\\n  }\\n\\n  /**\\n   * @notice  Accrues all interest due to the protocol\\n   * @dev     Call this before performing calculations using 'totalBorrows' or other contract-wide quantities\\n   */\\n  function accrueInterest() external {\\n    checkReentrant();\\n    accrueInterestInternal();\\n    _status = _NOT_ENTERED;\\n  }\\n\\n  // ----- Utility functions -----\\n\\n  /**\\n   * @notice  Sweep accidental ERC-20 transfers to this contract.\\n   * @dev     Tokens are sent to the DAO for later distribution\\n   * @param   _token  The address of the ERC-20 token to sweep\\n   */\\n  function sweepToken(IERC20 _token) external {\\n    if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender) || _token == underlyingToken) revert Unauthorized();\\n    uint256 balance = _token.balanceOf(address(this));\\n    if (balance > 0) {\\n      _token.safeTransfer(dao, balance);\\n    }\\n  }\\n\\n  function checkReentrant() private {\\n    if (_status == _ENTERED) revert Reentrant();\\n    _status = _ENTERED;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/htoken/HTokenInternal.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nimport \\\".././interfaces/ControllerI.sol\\\";\\nimport \\\".././interfaces/HTokenHelperI.sol\\\";\\nimport \\\".././interfaces/HTokenI.sol\\\";\\nimport \\\".././interfaces/InterestRateModelI.sol\\\";\\nimport \\\".././utils/ErrorReporter.sol\\\";\\n\\n/**\\n * @title   Honey Finance's HToken Internal structure contract implemented by HToken\\n * @notice  ERC-1155 contract which wraps an ERC-20 underlying liquid asset and an ERC-721 underlying collateral asset\\n * @author  Honey Labs Inc.\\n * @custom:coauthor BowTiedPickle\\n * @custom:coauthor m4rio\\n */\\ncontract HTokenInternal is ERC1155, IERC721Receiver, AccessControl {\\n  // ----- Imports -----\\n\\n  using SafeERC20 for IERC20Metadata;\\n\\n  // ----- Access Control -----\\n\\n  bytes32 public constant SUPPLIER_ROLE = keccak256(\\\"SUPPLIER_ROLE\\\");\\n  bytes32 public constant MARKET_ADMIN_ROLE = keccak256(\\\"MARKET_ADMIN_ROLE\\\");\\n  bytes32 public constant LIQUIDATOR_ROLE = keccak256(\\\"LIQUIDATOR_ROLE\\\");\\n\\n  // ----- Parameters -----\\n\\n  /// @notice The mantissa-formatted maximum borrow rate which can ever be applied (.0005% / block)\\n  uint256 private constant borrowRateMaxMantissa = 0.0005e16;\\n\\n  /// @notice The mantissa-formatted exchange rate used when hToken totalSupply = 0\\n  uint256 private immutable initialExchangeRateMantissa;\\n\\n  /// @notice The mantissa-formatted fraction of interest set aside for reserves\\n  uint256 private reserveFactorMantissa;\\n\\n  /// @notice The mantissa-formatted fraction of interest accrued to the hToken admin\\n  uint256 private adminComissionMantissa;\\n\\n  /// @notice The mantissa-formatted fraction of interest accrued to the protocol\\n  uint256 private protocolComissionMantissa;\\n\\n  /// @notice  The mantissa-formatted maximum fraction of interest which can be ever be accrued to reserves or fees\\n  uint256 private constant reserveFactorPlusFeesMaxMantissa = 0.5e18; // 50% - TODO: change later\\n\\n  /// @notice the name of the token\\n  string public name;\\n\\n  /// @notice the symbol of the token\\n  string public symbol;\\n\\n  /// @notice decimals of the ERC-20 underlying token\\n  uint8 public immutable decimals;\\n\\n  // ----- Addresses -----\\n\\n  /// @notice Receiver of admin fees\\n  address private adminCommisionReceiver;\\n\\n  /// @notice Receiver of hive fees\\n  address private protocolCommisionReceiver;\\n\\n  /// @notice DAO address where swept tokens will be transmitted\\n  address internal dao;\\n\\n  /// @notice Liquidation handler contract\\n  address private liquidator;\\n\\n  /// @notice Referrer Pool where the referral program fees are collected\\n  address private referralPool;\\n\\n  /// @notice Contract which oversees inter-hToken operations\\n  ControllerI private controller;\\n\\n  /// @notice Model which tells what the current interest rate should be\\n  InterestRateModelI private interestRateModel;\\n\\n  /// @notice Helper contract which handles URI\\n  HTokenHelperI private hTokenHelper;\\n\\n  /// @notice Underlying ERC-20 borrowable/lendable token\\n  IERC20Metadata public immutable underlyingToken;\\n\\n  /// @notice Underlying ERC-721 collateral token\\n  IERC721 public immutable collateralToken;\\n\\n  // ----- State Variables -----\\n\\n  // Bookkeeping\\n  uint256 public totalBorrows;\\n  uint256 public totalShares;\\n  uint256 public totalReserves;\\n  uint256 public totalSupply;\\n  uint256 public totalProtocolCommission;\\n  uint256 public totalAdminCommission;\\n  uint256 public totalBorrowFees;\\n  uint256 public totalReferredBorrowFees;\\n\\n  /// @notice Block number that interest was last accrued at\\n  uint256 public accrualBlockNumber;\\n\\n  /// @notice Interest that will be earned for each unit of borrow principal\\n  uint256 public interestIndexStored;\\n\\n  /* a coupon can be in 3 states: when never created is COUPON_UNINITIALIZED,\\n     if it is active then COUPON_ACTIVE, if deleted then COUPON_INACTIVE */\\n  uint8 private constant COUPON_UNINITIALIZED = 0;\\n  uint8 private constant COUPON_INACTIVE = 1;\\n  uint8 private constant COUPON_ACTIVE = 2;\\n  uint8 private constant COUPON_LIQUIDATED = 3;\\n\\n  uint256 public idCounter;\\n\\n  /// @notice Mapping of collateralId => Coupon struct\\n  mapping(uint256 => Coupon) public borrowCoupons;\\n\\n  /// @notice Mapping of couponId => Collateral struct\\n  mapping(uint256 => Collateral) public collateralPerBorrowCouponId;\\n\\n  /// @notice Stores how many coupons a user has\\n  mapping(address => uint256) public userToCoupons;\\n\\n  /// @notice Stores the sharesBalancePerUser so we don't iterate through the coupons to calculate it\\n  mapping(address => uint256) public sharesBalancePerUser;\\n\\n  struct Coupon {\\n    uint32 id; //Coupon's token ID\\n    uint8 active; // Coupon activity status\\n    address owner; // Who is the current owner of this coupon\\n    uint256 collateralId; // tokenId of the collateral collection that is borrowed against\\n    uint256 borrowAmount; // Principal borrow balance, denominated in underlying ERC20 token.\\n    uint256 debtShares; // Debt shares, keeps the shares of total debt by the protocol\\n  }\\n\\n  struct Collateral {\\n    uint256 collateralId; // TokenId of the collateral\\n    bool active; // Collateral activity status\\n  }\\n\\n  constructor(\\n    address _underlyingToken,\\n    address _collateralToken,\\n    address _controllerAddress,\\n    address _interestRateModel,\\n    address _liquidator,\\n    uint256 _initialExchangeRateMantissa,\\n    address _adminCommissionReceiver,\\n    address _protocolCommissionReceiver,\\n    address _roleReceiver,\\n    string memory _name,\\n    string memory _symbol\\n  ) ERC1155(\\\"\\\") {\\n    if (\\n      _liquidator == address(0) ||\\n      _adminCommissionReceiver == address(0) ||\\n      _protocolCommissionReceiver == address(0) ||\\n      _underlyingToken == address(0) ||\\n      _collateralToken == address(0)\\n    ) revert WrongParams();\\n\\n    // Set initial exchange rate\\n    if (_initialExchangeRateMantissa == 0) revert HTokenError(Error.INITIAL_EXCHANGE_MANTISSA);\\n    initialExchangeRateMantissa = _initialExchangeRateMantissa;\\n\\n    // Setup the collateral NFT collection\\n    if (!IERC721(_collateralToken).supportsInterface(type(IERC721).interfaceId)) revert WrongParams();\\n    collateralToken = IERC721(_collateralToken);\\n\\n    // Setting roles\\n    _grantRole(DEFAULT_ADMIN_ROLE, _roleReceiver);\\n    _grantRole(LIQUIDATOR_ROLE, _liquidator);\\n\\n    // Setup underlying token\\n    underlyingToken = IERC20Metadata(_underlyingToken);\\n\\n    // Setup decimals\\n    decimals = IERC20Metadata(_underlyingToken).decimals();\\n\\n    // Set liquidator contract\\n    liquidator = _liquidator;\\n\\n    // Increment to reserve id 0 for hTokens\\n    ++idCounter;\\n\\n    // Setup controller\\n    controller = ControllerI(_controllerAddress);\\n\\n    // Initialize block number\\n    accrualBlockNumber = block.number;\\n\\n    // Setup interest rate\\n    interestRateModel = InterestRateModelI(_interestRateModel);\\n\\n    // Set fee receivers\\n    adminCommisionReceiver = _adminCommissionReceiver;\\n    protocolCommisionReceiver = _protocolCommissionReceiver;\\n\\n    name = _name;\\n    symbol = _symbol;\\n  }\\n\\n  // ---------- Lending functions ----------\\n\\n  /**\\n   * @dev     Deposit underlying tokens and receive hTokens as proof of deposit\\n   * @dev     Must be approved to transfer amount of underlying tokens. Accrues interest and updates exchange rate.\\n   * @param   _amount   Quantity of underlying ERC-20 to transfer in\\n   * @param   _to       Target address to mint hTokens to\\n   */\\n  function depositUnderlyingInternal(uint256 _amount, address _to) internal {\\n    controller.depositUnderlyingAllowed(HTokenI(address(this)), _to, _amount);\\n\\n    accrueInterestInternal();\\n\\n    uint256 tokensToMint = (_amount * 1e18) / exchangeRateStored();\\n    doUnderlyingTransferIn(msg.sender, _amount);\\n\\n    totalSupply += tokensToMint;\\n\\n    _mint(_to, 0, tokensToMint, \\\"\\\");\\n    emit UnderlyingDeposited(msg.sender, _to, _amount, tokensToMint, totalSupply);\\n  }\\n\\n  /**\\n   * @dev     Redeem a specified amount of hTokens for the corresponding amount of the underlying ERC-20 asset\\n   * @dev     Accrues interest and updates exchange rate.\\n   * @param   _amount   Quantity of hTokens to redeem for underlying ERC-20\\n   */\\n  function redeemInternal(uint256 _amount) internal {\\n    controller.redeemAllowed(HTokenI(address(this)), msg.sender, _amount);\\n\\n    accrueInterestInternal();\\n    uint256 underlyingToWithdraw = (_amount * exchangeRateStored()) / 1e18;\\n\\n    totalSupply -= _amount;\\n\\n    _burn(msg.sender, 0, _amount);\\n\\n    doUnderlyingTransferOut(msg.sender, underlyingToWithdraw);\\n\\n    emit Redeem(msg.sender, _amount, underlyingToWithdraw, totalSupply);\\n  }\\n\\n  /**\\n   * @dev     Withdraw a specified quantity of the underlying ERC-20 asset, redeeming any amount of hTokens necessary\\n   * @dev     Accrues interest and updates exchange rate.\\n   * @param   _amount   Amount of ERC-20 underlying to be withdrawn\\n   */\\n  function withdrawInternal(uint256 _amount) internal {\\n    accrueInterestInternal();\\n    uint256 tokensToRedeem = (_amount * 1e18) / exchangeRateStored();\\n\\n    controller.redeemAllowed(HTokenI(address(this)), msg.sender, tokensToRedeem);\\n\\n    totalSupply -= tokensToRedeem;\\n\\n    _burn(msg.sender, 0, tokensToRedeem);\\n\\n    doUnderlyingTransferOut(msg.sender, _amount);\\n\\n    emit Withdraw(msg.sender, tokensToRedeem, _amount, totalSupply);\\n  }\\n\\n  /**\\n   * @dev     Transfers the ERC-20 underlying token from the contract to the recipient\\n   * @param   _to       Destination address\\n   * @param   _amount   Amount to withdraw\\n   */\\n  function doUnderlyingTransferOut(address _to, uint256 _amount) internal {\\n    underlyingToken.safeTransfer(_to, _amount);\\n  }\\n\\n  /**\\n   * @dev     Transfers the ERC-20 underlying token to the contract\\n   * @dev     `_from` needs to approve before hand\\n   * @param   _from     Source of the funds\\n   * @param   _amount   Amount to transfer\\n   */\\n  function doUnderlyingTransferIn(address _from, uint256 _amount) internal {\\n    underlyingToken.safeTransferFrom(_from, address(this), _amount);\\n  }\\n\\n  // ---------- Borrowing functions ----------\\n\\n  /**\\n   * @dev     Deposit an ERC-721 collateral NFt\\n   * @param   _collateralId   Token ID of underlying ERC-721 to be transferred in\\n   */\\n  function depositCollateralInternal(uint256 _collateralId) internal {\\n    controller.depositCollateralAllowed(HTokenI(address(this)), msg.sender, _collateralId);\\n    collateralToken.safeTransferFrom(msg.sender, address(this), _collateralId);\\n\\n    uint256 couponId = mintCoupon(msg.sender, _collateralId);\\n\\n    emit CollateralDeposited(msg.sender, _collateralId, couponId);\\n  }\\n\\n  /**\\n   * @dev     Borrow an amount against a specific collateral and accrue it to the coupon\\n   * @param   _borrowAmount   Amount of underlying ERC-20 to borrow\\n   * @param   _collateralId   Token ID of underlying ERC-721 to be borrowed against\\n   * @param   _referral       Referral code as a plain string\\n   * @param   _signature      Signed message authorizing the referral, provided by Honey Labs\\n   */\\n  function borrowInternal(\\n    uint256 _borrowAmount,\\n    uint256 _collateralId,\\n    string memory _referral,\\n    bytes memory _signature\\n  ) internal {\\n    Coupon storage coupon = borrowCoupons[_collateralId];\\n\\n    // Coupon must exist\\n    if (coupon.active == COUPON_UNINITIALIZED) revert HTokenError(Error.COUPON_LOOKUP);\\n\\n    // Sanity check to make sure the coupon was found correctly\\n    if (coupon.collateralId != _collateralId) revert WrongParams();\\n\\n    // Only the owner may borrow against a collateral\\n    address couponOwner = coupon.owner;\\n    if (couponOwner != msg.sender) revert NotOwner();\\n\\n    // The contract must own the relevant tokenId\\n    if (collateralToken.ownerOf(_collateralId) != address(this)) revert HTokenError(Error.TOKEN_NOT_PRESENT);\\n\\n    accrueInterestInternal();\\n\\n    (uint256 borrowFeeMantissa, bool referred) = controller.getBorrowFeePerMarket(\\n      HTokenI(address(this)),\\n      _referral,\\n      _signature\\n    );\\n\\n    uint256 borrowFee = (_borrowAmount * borrowFeeMantissa) / 1e18;\\n\\n    uint256 borrowIncurred = _borrowAmount + borrowFee;\\n\\n    // Check for borrow allowed\\n    controller.borrowAllowed(HTokenI(address(this)), msg.sender, _collateralId, borrowIncurred);\\n\\n    uint256 shares = (totalBorrows == 0) ? borrowIncurred : (totalShares * borrowIncurred) / totalBorrows;\\n\\n    totalShares += shares;\\n    coupon.debtShares += shares;\\n    sharesBalancePerUser[couponOwner] += shares;\\n\\n    // Add the borrow amount to the token\\n    coupon.borrowAmount += borrowIncurred;\\n\\n    // Update accounting variables\\n    totalBorrows += borrowIncurred;\\n    if (referred) {\\n      uint256 balanceToReferralPool = (borrowFee * borrowFeeMantissa) / 1e18;\\n\\n      totalReferredBorrowFees += balanceToReferralPool;\\n      borrowFee -= balanceToReferralPool;\\n      emit BorrowReferred(msg.sender, _referral, _borrowAmount, balanceToReferralPool);\\n    }\\n    totalBorrowFees += borrowFee;\\n\\n    // Transfer the funds to borrower\\n    doUnderlyingTransferOut(msg.sender, _borrowAmount);\\n\\n    emit Borrow(msg.sender, _borrowAmount, _collateralId, borrowIncurred);\\n  }\\n\\n  /**\\n   * @dev     Repay a borrow for a given collateral\\n   * @param   _repayAmount    Amount to repay\\n   * @param   _collateralId   Token ID of the ERC-721 collateral asset being repaid against\\n   */\\n  function repayBorrowInternal(\\n    address _borrower,\\n    uint256 _repayAmount,\\n    uint256 _collateralId,\\n    bool _repayAgainstLiquidated\\n  ) internal {\\n    // Can't repay 0 amount\\n    if (_repayAmount == 0) revert HTokenError(Error.AMOUNT_ZERO);\\n\\n    // Accrue interest\\n    accrueInterestInternal();\\n\\n    // Controller check for repayBorrow\\n    controller.repayBorrowAllowed(HTokenI(address(this)), _repayAmount, _collateralId);\\n\\n    // Find the user's coupon\\n    Coupon storage coupon = borrowCoupons[_collateralId];\\n    address couponOwner = coupon.owner;\\n    if (couponOwner != _borrower) revert Unauthorized();\\n\\n    // Sanity check to make sure the coupon was found correctly\\n    if (coupon.collateralId != _collateralId) revert WrongParams();\\n\\n    if (_repayAgainstLiquidated) {\\n      if (coupon.active != COUPON_LIQUIDATED) revert HTokenError(Error.REPAY_NOT_ALLOWED);\\n    } else {\\n      if (coupon.active == COUPON_LIQUIDATED) revert HTokenError(Error.REPAY_NOT_ALLOWED);\\n    }\\n\\n    // Get outstanding debt\\n    uint256 debt = getDebtForCollateral(_collateralId);\\n    if (debt == 0) revert HTokenError(Error.NO_DEBT);\\n\\n    // Set amount to repay\\n    uint256 payment = (_repayAmount > debt) ? debt : _repayAmount;\\n\\n    doUnderlyingTransferIn(msg.sender, payment);\\n\\n    uint256 interest = debt - coupon.borrowAmount;\\n    uint256 borrowAmount = coupon.borrowAmount;\\n    unchecked {\\n      // If paid amount is > interest, we update borrow amount with the difference, we first pay interest\\n      // then we pay the borrowed amount\\n      if (interest < payment) {\\n        uint256 paidBorrow = payment - interest;\\n        borrowAmount = borrowAmount < paidBorrow ? 0 : borrowAmount - paidBorrow;\\n      }\\n    }\\n\\n    // If fully repaid, wipe the whole shares to avoid rounding dust\\n    uint256 shares = borrowAmount == 0 ? coupon.debtShares : (totalShares * payment) / totalBorrows;\\n\\n    // Decrease balances\\n    uint256 newTotalBorrows = totalBorrows - payment;\\n    totalBorrows = newTotalBorrows;\\n    totalShares -= shares;\\n    coupon.debtShares -= shares;\\n    coupon.borrowAmount = borrowAmount;\\n    sharesBalancePerUser[couponOwner] -= shares;\\n\\n    emit RepayBorrow(msg.sender, couponOwner, payment, debt, newTotalBorrows, _collateralId);\\n  }\\n\\n  /**\\n   * @dev     Withdraw collateral\\n   * @param   _collateralId   Token ID of the ERC-721 collateral asset to withdraw\\n   */\\n  function withdrawCollateralInternal(uint256 _collateralId) internal {\\n    Coupon storage activeCoupon = borrowCoupons[_collateralId];\\n    if (activeCoupon.owner != msg.sender) revert Unauthorized();\\n\\n    // checks if withdrawal is allowed, if not will fail\\n    controller.withdrawCollateralAllowed(HTokenI(address(this)), _collateralId);\\n\\n    uint256 _activeCollateralId = activeCoupon.collateralId;\\n    burnAndDelete(msg.sender, _activeCollateralId, activeCoupon.id);\\n\\n    collateralToken.safeTransferFrom(address(this), msg.sender, _activeCollateralId);\\n\\n    emit CollateralWithdrawn(msg.sender, _collateralId);\\n  }\\n\\n  /**\\n   * @dev     Mint a borrow coupon NFT on collateral deposit\\n   * @dev     Reuses old coupon IDs if they have been previously minted and burned\\n   * @param   _to             Recipient of the coupon\\n   * @param   _collateralId   Token ID of the ERC-721 collateral asset being deposited\\n   */\\n  function mintCoupon(address _to, uint256 _collateralId) internal returns (uint256) {\\n    uint256 currentId = idCounter;\\n    Coupon storage coupon = borrowCoupons[_collateralId];\\n    if (coupon.active > COUPON_UNINITIALIZED) {\\n      currentId = coupon.id;\\n    } else {\\n      ++idCounter;\\n      coupon.id = uint32(currentId);\\n    }\\n\\n    // Construct a coupon\\n    coupon.collateralId = _collateralId;\\n    coupon.borrowAmount = 0;\\n    coupon.active = COUPON_ACTIVE;\\n    coupon.debtShares = 0;\\n    coupon.owner = _to;\\n\\n    collateralPerBorrowCouponId[currentId] = Collateral(_collateralId, true);\\n\\n    // Mint NFT\\n    _mint(_to, currentId, 1, \\\"\\\");\\n    return currentId;\\n  }\\n\\n  // ---------- Liquidation functions ----------\\n\\n  /**\\n   * @dev     Liquidate a borrow and send the collateral to the liquidator contract\\n   * @param   _collateralId   Token ID of the ERC-721 collateral asset to liquidate\\n   */\\n  function liquidateBorrowInternal(uint256 _collateralId) internal {\\n    Coupon storage activeCoupon = borrowCoupons[_collateralId];\\n    if (activeCoupon.active != COUPON_ACTIVE) revert HTokenError(Error.LIQUIDATION_NOT_ALLOWED);\\n\\n    accrueInterestInternal();\\n\\n    //checks if liquidation is allowed, e.g. debt > collateral factor\\n    controller.liquidationAllowed(HTokenI(address(this)), _collateralId);\\n\\n    activeCoupon.active = COUPON_LIQUIDATED;\\n\\n    bytes memory data = abi.encode(address(this));\\n    address cachedLiquidator = liquidator;\\n\\n    collateralToken.safeTransferFrom(address(this), cachedLiquidator, _collateralId, data);\\n\\n    emit BorrowLiquidated(msg.sender, cachedLiquidator, activeCoupon.owner, _collateralId);\\n  }\\n\\n  /**\\n   * @notice  Pay off the entirety of a borrow position and burn the coupon\\n   * @dev     May only be called by the liquidator\\n   * @param   _borrower       Owner of the debt position\\n   * @param   _collateralId   Token ID of underlying ERC-721 to be closed out\\n   */\\n  function closeoutLiquidationInternal(address _borrower, uint256 _collateralId) internal {\\n    accrueInterestInternal();\\n\\n    Coupon storage coupon = borrowCoupons[_collateralId];\\n    if (coupon.owner != _borrower) revert Unauthorized();\\n\\n    // Repay borrow\\n    uint256 cachedBorrowAmount = getDebtForCollateral(_collateralId);\\n    repayBorrowInternal(_borrower, cachedBorrowAmount, _collateralId, true);\\n\\n    // Burn the NFT coupon\\n    burnAndDelete(_borrower, coupon.collateralId, coupon.id);\\n    emit LiquidationClosed(msg.sender, _borrower, _collateralId, cachedBorrowAmount);\\n  }\\n\\n  /**\\n   * @dev     Burns a coupon and deletes it from the data structure\\n   * @param   _account        User to burn from\\n   * @param   _collateralId   Collateral associated with this coupon\\n   * @param   _couponId       Coupon ID to burn\\n   */\\n  function burnAndDelete(\\n    address _account,\\n    uint256 _collateralId,\\n    uint256 _couponId\\n  ) internal {\\n    // makes coupon inactive and deletes it from user coupons\\n    _burn(_account, _couponId, 1);\\n    Coupon storage borrowCoupon = borrowCoupons[_collateralId];\\n    borrowCoupon.active = COUPON_INACTIVE;\\n    borrowCoupon.owner = address(0);\\n    borrowCoupon.borrowAmount = 0;\\n    borrowCoupon.debtShares = 0;\\n    collateralPerBorrowCouponId[_couponId].active = false;\\n  }\\n\\n  // ---------- Exchange rate functions ----------\\n\\n  /**\\n   * @notice  Calculates the exchange rate from the ERC-20 underlying to the HToken\\n   * @dev     This function does not accrue interest before calculating the exchange rate.\\n   * @dev     Call accrueInterest first to get an accurate quantity.\\n   * @return  Calculated exchange rate scaled by 1e18\\n   */\\n  function exchangeRateStored() public view returns (uint256) {\\n    uint256 cachedTotalSupply = totalSupply;\\n    if (cachedTotalSupply == 0) {\\n      // If there are no tokens minted: exchangeRate = initialExchangeRate\\n      return initialExchangeRateMantissa;\\n    } else {\\n      /*\\n       * Otherwise:\\n       *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\\n       */\\n      uint256 cashPlusBorrowsMinusReserves = getCashPrior() + totalBorrows - totalReserves;\\n      uint256 exchangeRate = (cashPlusBorrowsMinusReserves * 1e18) / cachedTotalSupply;\\n      return exchangeRate;\\n    }\\n  }\\n\\n  // ----------  View Helper functions ----------\\n\\n  /**\\n   * @notice  Get the outstanding debt of a collateral\\n   * @dev     Simulates accrual of interest\\n   * @param   _collateralId   Token ID of underlying ERC-721\\n   * @return  Outstanding debt in units of underlying ERC-20\\n   */\\n  function getDebtForCollateral(uint256 _collateralId) public view returns (uint256) {\\n    Coupon storage borrowCoupon = borrowCoupons[_collateralId];\\n    return totalShares == 0 ? 0 : (getDebt() * borrowCoupon.debtShares) / totalShares;\\n  }\\n\\n  /**\\n   * @notice  Returns the current per-block borrow interest rate for this hToken\\n   * @return  The borrow interest rate per block, scaled by 1e18\\n   */\\n  function borrowRatePerBlock() external view returns (uint256) {\\n    return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\\n  }\\n\\n  /**\\n   * @notice  Get the outstanding debt of a coupon\\n   * @dev     Simulates accrual of interest\\n   * @param   _couponId   ID of the coupon\\n   * @return  Outstanding debt in units of underlying ERC-20\\n   */\\n  function getDebtForCoupon(uint256 _couponId) external view returns (uint256) {\\n    uint256 collateralId = collateralPerBorrowCouponId[_couponId].collateralId;\\n    return getDebtForCollateral(collateralId);\\n  }\\n\\n  /**\\n   * @notice  Gets balance of this contract in terms of the underlying excluding the fees\\n   * @dev     This excludes the value of the current message, if any\\n   * @return  The quantity of underlying ERC-20 tokens owned by this contract\\n   */\\n  function getCashPrior() public view returns (uint256) {\\n    uint256 totalFees = totalAdminCommission + totalProtocolCommission + totalBorrowFees + totalReferredBorrowFees;\\n    uint256 balance = underlyingToken.balanceOf(address(this));\\n    unchecked {\\n      if (totalFees > balance) return 0;\\n      else return balance - totalFees;\\n    }\\n  }\\n\\n  /**\\n   * @notice  Get a snapshot of the account's balances, and the cached exchange rate\\n   * @dev     This is used by controller to more efficiently perform liquidity checks.\\n   * @dev     Does not accrue interest before calculation.\\n   * @param   _account  Address of the account to snapshot\\n   * @return  (hToken balance, borrow balance, exchange rate mantissa)\\n   */\\n  function getAccountSnapshot(address _account)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    uint256 userDebt;\\n    if (totalShares > 0) userDebt = (sharesBalancePerUser[_account] * totalBorrows) / totalShares;\\n\\n    return (balanceOf(_account, 0), userDebt, exchangeRateStored());\\n  }\\n\\n  /**\\n   * @notice  Get the outstanding debt of the protocol\\n   * @return  Protocol debt\\n   */\\n  function getDebt() public view returns (uint256) {\\n    uint256 cachedDecimals = decimals;\\n    if (decimals < 18) cachedDecimals = 18 - decimals;\\n    return totalBorrows + ((totalBorrows * (interestIndex() - interestIndexStored)) / 10**cachedDecimals);\\n  }\\n\\n  /**\\n   * @notice  Returns protocol fees\\n   * @return  Reserve factor mantissa\\n   * @return  Admin fee mantissa\\n   * @return  Hive fee mantissa\\n   * @return  Initial exchange rate mantissa\\n   * @return  Maximum borrow rate mantissa\\n   */\\n  function getProtocolFees()\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    return (\\n      reserveFactorMantissa,\\n      adminComissionMantissa,\\n      protocolComissionMantissa,\\n      initialExchangeRateMantissa,\\n      borrowRateMaxMantissa\\n    );\\n  }\\n\\n  /**\\n   * @notice  Returns different addresses of the protocol\\n   * @return  Liquidator address\\n   * @return  HTokenHelper address\\n   * @return  Controller address\\n   * @return  Admin Fee Receiver address\\n   * @return  Hive Fee Receiver address\\n   * @return  Interest Model address\\n   * @return  Referral Pool address\\n   * @return  DAO address\\n   */\\n  function getAddresses()\\n    external\\n    view\\n    returns (\\n      address,\\n      address,\\n      address,\\n      address,\\n      address,\\n      address,\\n      address,\\n      address\\n    )\\n  {\\n    return (\\n      address(liquidator),\\n      address(hTokenHelper),\\n      address(controller),\\n      adminCommisionReceiver,\\n      protocolCommisionReceiver,\\n      address(interestRateModel),\\n      referralPool,\\n      dao\\n    );\\n  }\\n\\n  /**\\n   * @notice  Get the coupon for a specific collateral NFT\\n   * @param   _collateralId   Token ID of underlying ERC-721\\n   * @return  Coupon\\n   */\\n  function getSpecificCouponByCollateralId(uint256 _collateralId) external view returns (Coupon memory) {\\n    return borrowCoupons[_collateralId];\\n  }\\n\\n  // ---------- Interest functions ----------\\n\\n  /**\\n   * @notice  Calculate the prevailing interest due per token of debt principal\\n   * @return  Mantissa formatted interest rate per token of debt\\n   */\\n  function interestIndex() public view returns (uint256) {\\n    // Calculate the number of blocks elapsed since the last accrual\\n    uint256 blockDelta = block.number - accrualBlockNumber;\\n\\n    // Short-circuit if no protocol debt or no blocks elapsed since last calculation\\n    uint256 borrowsPrior = totalBorrows;\\n    if (borrowsPrior == 0 || blockDelta == 0) {\\n      return interestIndexStored;\\n    }\\n\\n    // Calculate and validate the current borrow interest rate\\n    uint256 borrowRateMantissa = interestRateModel.getBorrowRate(getCashPrior(), borrowsPrior, totalReserves);\\n\\n    if (borrowRateMantissa > borrowRateMaxMantissa) revert AccrueInterestError(Error.BORROW_RATE_TOO_BIG);\\n\\n    uint256 simpleInterestFactor = borrowRateMantissa * blockDelta;\\n\\n    return interestIndexStored + (simpleInterestFactor);\\n  }\\n\\n  /**\\n   * @notice  Accrues all interest due to the protocol\\n   * @dev     Call this before performing calculations using 'totalBorrows' or other contract-wide quantities\\n   */\\n  function accrueInterestInternal() internal {\\n    /*\\n     * Calculate the interest accumulated into borrows, fees, and reserves:\\n     *  interestAccumulated = SUM(individual coupon interest accumulated)\\n     *  totalBorrows = interestAccumulated + totalBorrows\\n     *  totalReserves = interestAccumulated * reserveFactor + totalReserves\\n     *  totalProtocolCommission = interestAccumulated * hiveFee + totalProtocolCommission\\n     *  totalAdminCommission = interestAccumulated * adminFee + totalAdminCommission\\n     */\\n\\n    // We cache the old index\\n    uint256 interestIndexStoredCached = interestIndexStored;\\n\\n    // Only update if they have not already been updated.\\n    if (block.number > accrualBlockNumber) {\\n      interestIndexStored = interestIndex();\\n      accrualBlockNumber = block.number;\\n    }\\n\\n    uint256 cachedDecimals = decimals;\\n    if (decimals < 18) {\\n      unchecked {\\n        cachedDecimals = 18 - decimals;\\n      }\\n    }\\n\\n    // update interest accumulated\\n    uint256 interestAccumulated = ((totalBorrows * (interestIndexStored - interestIndexStoredCached)) /\\n      10**cachedDecimals);\\n    totalBorrows += interestAccumulated;\\n\\n    totalReserves += (reserveFactorMantissa * interestAccumulated) / 1e18;\\n    totalProtocolCommission += (protocolComissionMantissa * interestAccumulated) / 1e18;\\n    totalAdminCommission += (adminComissionMantissa * interestAccumulated) / 1e18;\\n\\n    emit InterestAccrued(interestAccumulated, interestIndexStored, totalBorrows);\\n  }\\n\\n  /**\\n   * @notice Checks if the last accrue interest was called within the same block\\n   */\\n  function verifyFreshnessInternal() internal view {\\n    if (accrualBlockNumber != block.number) {\\n      revert AdminError(Error.MARKET_NOT_FRESH);\\n    }\\n  }\\n\\n  // ---------- Admin Functions ----------\\n\\n  /**\\n   * @notice  Add to or take away from reserves\\n   * @dev     Accrues interest\\n   * @param   _amount   Quantity of underlying ERC-20 token to change the reserves by\\n   * @param   _add      True to add reserves, false to remove reserves\\n   */\\n  function _modifyReserves(uint256 _amount, bool _add) external {\\n    _checkRole(SUPPLIER_ROLE, msg.sender);\\n\\n    accrueInterestInternal();\\n\\n    verifyFreshnessInternal();\\n\\n    if (_add) {\\n      doUnderlyingTransferIn(msg.sender, _amount);\\n      uint256 totalReservesNew = totalReserves + _amount;\\n      totalReserves = totalReservesNew;\\n\\n      emit ReservesAdded(msg.sender, _amount, totalReservesNew);\\n    } else {\\n      if (getCashPrior() + totalReserves < _amount) {\\n        revert AdminError(Error.TOKEN_INSUFFICIENT_CASH);\\n      }\\n\\n      if (_amount > totalReserves) {\\n        revert AdminError(Error.BAD_INPUT);\\n      }\\n\\n      unchecked {\\n        totalReserves -= _amount;\\n      }\\n\\n      doUnderlyingTransferOut(msg.sender, _amount);\\n\\n      emit ReservesReduced(msg.sender, _amount, totalReserves);\\n    }\\n  }\\n\\n  /**\\n   * @notice  Set new protocol fee and reserve factor mantissas\\n   * @dev     Accrues interest\\n   * @param   _newProtocolCommissionMantissa         New protocol fee mantissa\\n   * @param   _newReserveFactorMantissa   New reserve factor mantissa\\n   */\\n  function _setProtocolFees(uint256 _newProtocolCommissionMantissa, uint256 _newReserveFactorMantissa) external {\\n    _checkRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n    accrueInterestInternal();\\n\\n    uint256 cachedAdminCommissionMantissa = adminComissionMantissa;\\n\\n    if (\\n      _newReserveFactorMantissa + cachedAdminCommissionMantissa + _newProtocolCommissionMantissa >\\n      reserveFactorPlusFeesMaxMantissa\\n    ) {\\n      revert AdminError(Error.BAD_INPUT);\\n    }\\n\\n    emit ProtocolFeesUpdated(\\n      protocolComissionMantissa,\\n      _newProtocolCommissionMantissa,\\n      cachedAdminCommissionMantissa,\\n      cachedAdminCommissionMantissa,\\n      reserveFactorMantissa,\\n      _newReserveFactorMantissa\\n    );\\n\\n    protocolComissionMantissa = _newProtocolCommissionMantissa;\\n    reserveFactorMantissa = _newReserveFactorMantissa;\\n  }\\n\\n  /**\\n   * @notice  Set new admin fee mantissa\\n   * @dev     Accrues interest\\n   * @param   _newAdminCommissionMantissa   New admin fee mantissa\\n   */\\n  function _setAdminCommission(uint256 _newAdminCommissionMantissa) external {\\n    _checkRole(MARKET_ADMIN_ROLE, msg.sender);\\n\\n    accrueInterestInternal();\\n\\n    uint256 cachedProtocolCommissionMantissa = protocolComissionMantissa;\\n    uint256 cachedReserveFactorMantissa = reserveFactorMantissa;\\n\\n    if (\\n      cachedReserveFactorMantissa + _newAdminCommissionMantissa + cachedProtocolCommissionMantissa >\\n      reserveFactorPlusFeesMaxMantissa\\n    ) {\\n      revert AdminError(Error.BAD_INPUT);\\n    }\\n\\n    emit ProtocolFeesUpdated(\\n      cachedProtocolCommissionMantissa,\\n      cachedProtocolCommissionMantissa,\\n      adminComissionMantissa,\\n      _newAdminCommissionMantissa,\\n      cachedReserveFactorMantissa,\\n      cachedReserveFactorMantissa\\n    );\\n\\n    adminComissionMantissa = _newAdminCommissionMantissa;\\n  }\\n\\n  /**\\n   * @notice  Withdraw admin fees\\n   * @param   _amount   Quantity of underlying ERC-20 token to withdraw\\n   */\\n  function _withdrawAdminCommissions(uint256 _amount) external {\\n    _checkRole(MARKET_ADMIN_ROLE, msg.sender);\\n\\n    accrueInterestInternal();\\n\\n    verifyFreshnessInternal();\\n\\n    uint256 cachedTotalAdminCommissions = totalAdminCommission;\\n    if (cachedTotalAdminCommissions < _amount) {\\n      revert AdminError(Error.AMOUNT_TOO_BIG);\\n    }\\n\\n    unchecked {\\n      totalAdminCommission = cachedTotalAdminCommissions - _amount;\\n    }\\n\\n    doUnderlyingTransferOut(adminCommisionReceiver, _amount);\\n\\n    emit AdminCommissionsWithdrawn(_amount);\\n  }\\n\\n  /**\\n   * @notice  Withdraw hive fees\\n   * @param   _amount   Quantity of underlying ERC-20 token to withdraw\\n   */\\n  function _withdrawProtocolCommissions(uint256 _amount) external {\\n    _checkRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n    accrueInterestInternal();\\n\\n    verifyFreshnessInternal();\\n\\n    uint256 cachedTotalProtocolCommissions = totalProtocolCommission;\\n    if (cachedTotalProtocolCommissions < _amount) {\\n      revert AdminError(Error.AMOUNT_TOO_BIG);\\n    }\\n\\n    unchecked {\\n      totalProtocolCommission = cachedTotalProtocolCommissions - _amount;\\n    }\\n\\n    doUnderlyingTransferOut(protocolCommisionReceiver, _amount);\\n\\n    emit ProtocolCommissionsWithdrawn(_amount);\\n  }\\n\\n  /**\\n   * @notice  Withdraw protocol fees\\n   * @param   _amount         Quantity of underlying ERC-20 token to withdraw\\n   * @param   _referralFees   True to withdraw referral fees, false to withdraw borrow fees\\n   */\\n  function _withdrawBorrowFees(uint256 _amount, bool _referralFees) external {\\n    _checkRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n    accrueInterestInternal();\\n\\n    verifyFreshnessInternal();\\n\\n    if (_amount == 0) revert WrongParams();\\n\\n    if ((!_referralFees && totalBorrowFees < _amount) || (_referralFees && totalReferredBorrowFees < _amount)) {\\n      revert AdminError(Error.AMOUNT_TOO_BIG);\\n    }\\n\\n    if (_referralFees) {\\n      totalReferredBorrowFees -= _amount;\\n      doUnderlyingTransferOut(referralPool, _amount);\\n    } else {\\n      totalBorrowFees -= _amount;\\n      doUnderlyingTransferOut(dao, _amount);\\n    }\\n\\n    emit BorrowFeesWithdrawn(_amount, _referralFees);\\n  }\\n\\n  /**\\n   * @notice  Sets a new protocol address parameter\\n   * @dev     Callable only by MARKET_ADMIN_ROLE\\n   * @dev     Target of 3 is reserved by convention for admin fee receiver\\n   * @dev     Target of 5 is reserved by convention for interest rate model\\n   * @param   _newAddress   Address of the new contract\\n   * @param   _target       Target ID of the address to be set\\n   */\\n  function _setAddressMarketAdmin(address _newAddress, uint256 _target) external {\\n    if (_newAddress == address(0)) revert WrongParams();\\n    _checkRole(MARKET_ADMIN_ROLE, msg.sender);\\n    address oldAddress;\\n    if (_target == 3) {\\n      oldAddress = adminCommisionReceiver;\\n      adminCommisionReceiver = _newAddress;\\n    } else if (_target == 5) {\\n      oldAddress = address(interestRateModel);\\n      interestRateModel = InterestRateModelI(_newAddress);\\n    } else revert WrongParams();\\n\\n    emit AddressUpdated(_newAddress, oldAddress, _target);\\n  }\\n\\n  /**\\n   * @notice  Sets a new protocol address parameter\\n   * @dev     Callable only by DEFAULT_ADMIN_ROLE\\n   * @dev     Target of 3 is reserved by convention for admin fee receiver\\n   * @dev     Target of 5 is reserved by convention for interest rate model\\n   * @param   _newAddress   Address of the new contract\\n   * @param   _target       Target ID of the address to be set\\n   */\\n  function _setAddress(address _newAddress, uint256 _target) external {\\n    if (_newAddress == address(0)) revert WrongParams();\\n    _checkRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n    address oldAddress;\\n    if (_target == 0) {\\n      oldAddress = address(liquidator);\\n      liquidator = _newAddress;\\n    } else if (_target == 1) {\\n      oldAddress = address(hTokenHelper);\\n      hTokenHelper = HTokenHelperI(_newAddress);\\n    } else if (_target == 2) {\\n      oldAddress = address(controller);\\n      controller = ControllerI(_newAddress);\\n    } else if (_target == 4) {\\n      oldAddress = protocolCommisionReceiver;\\n      protocolCommisionReceiver = _newAddress;\\n    } else if (_target == 5) {\\n      oldAddress = address(interestRateModel);\\n      interestRateModel = InterestRateModelI(_newAddress);\\n    } else if (_target == 6) {\\n      oldAddress = referralPool;\\n      referralPool = _newAddress;\\n    } else if (_target == 7) {\\n      oldAddress = dao;\\n      dao = _newAddress;\\n    } else revert WrongParams();\\n    emit AddressUpdated(_newAddress, oldAddress, _target);\\n  }\\n\\n  // ---------- Overrides ----------\\n\\n  /**\\n   * @notice  Returns the URI by calling the hTokenHelper\\n   * @param   _id   ID of the token to fetch the URI for\\n   */\\n  function uri(uint256 _id) public view virtual override returns (string memory) {\\n    return hTokenHelper.uri(_id, address(this));\\n  }\\n\\n  /**\\n   * @dev         See {IERC165-supportsInterface}.\\n   * @inheritdoc  IERC165\\n   */\\n  function supportsInterface(bytes4 _interfaceId) public view virtual override(ERC1155, AccessControl) returns (bool) {\\n    return\\n      _interfaceId == type(IERC1155).interfaceId ||\\n      _interfaceId == type(AccessControl).interfaceId ||\\n      _interfaceId == type(IERC721Receiver).interfaceId ||\\n      _interfaceId == type(HTokenI).interfaceId;\\n  }\\n\\n  /**\\n   * @inheritdoc  IERC721Receiver\\n   */\\n  function onERC721Received(\\n    address,\\n    address,\\n    uint256,\\n    bytes memory\\n  ) public virtual override returns (bytes4) {\\n    return this.onERC721Received.selector;\\n  }\\n\\n  function _beforeTokenTransfer(\\n    address _operator,\\n    address _from,\\n    address _to,\\n    uint256[] memory _ids,\\n    uint256[] memory _amounts,\\n    bytes memory _data\\n  ) internal virtual override(ERC1155) {\\n    if (_from == _to) {\\n      super._beforeTokenTransfer(_operator, _from, _to, _ids, _amounts, _data);\\n      return;\\n    }\\n    uint256 len = _ids.length;\\n    uint256 lengthToModify;\\n    for (uint256 i; i < len; ) {\\n      // HTokens don't require coupon management\\n      if (_ids[i] > 0) {\\n        Collateral storage collateral = collateralPerBorrowCouponId[_ids[i]];\\n        if (!collateral.active) {\\n          unchecked {\\n            ++i;\\n          }\\n          continue;\\n        }\\n\\n        Coupon storage coupon = borrowCoupons[collateral.collateralId];\\n        coupon.owner = _to;\\n        uint256 _shares = coupon.debtShares;\\n        sharesBalancePerUser[_from] -= _shares;\\n        sharesBalancePerUser[_to] += _shares;\\n        unchecked {\\n          ++lengthToModify;\\n        }\\n      }\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    controller.transferAllowed(HTokenI(address(this)));\\n\\n    if (_from != address(0)) {\\n      userToCoupons[_from] -= lengthToModify;\\n    }\\n    if (_to != address(0)) {\\n      userToCoupons[_to] += lengthToModify;\\n    }\\n    super._beforeTokenTransfer(_operator, _from, _to, _ids, _amounts, _data);\\n  }\\n\\n  // ---------- Events ----------\\n\\n  // ---------- Market Events ----------\\n\\n  event InterestAccrued(uint256 _interestAccumulated, uint256 _interestIndex, uint256 _totalBorrows);\\n  event Redeem(address indexed _initiator, uint256 _redeemAmount, uint256 _tokensWithdrawn, uint256 _totalHTokenSupply);\\n  event Withdraw(\\n    address indexed _initiator,\\n    uint256 _redeemAmount,\\n    uint256 _tokensWithdrawn,\\n    uint256 _totalHTokenSupply\\n  );\\n  event UnderlyingDeposited(\\n    address indexed _initiator,\\n    address indexed _to,\\n    uint256 _amount,\\n    uint256 _tokensToMint,\\n    uint256 _totalhTokenSupply\\n  );\\n\\n  event Borrow(address indexed _borrower, uint256 _borrowAmount, uint256 _tokenId, uint256 _totalBorrows);\\n  event BorrowReferred(address indexed _initiator, string _referrer, uint256 _amount, uint256 _fee);\\n  event RepayBorrow(\\n    address indexed _payer,\\n    address indexed _borrower,\\n    uint256 _repayAmount,\\n    uint256 _accountBorrows,\\n    uint256 _totalBorrows,\\n    uint256 _collateralId\\n  );\\n  event CollateralDeposited(address indexed _initiator, uint256 _collateralId, uint256 _couponId);\\n  event CollateralWithdrawn(address indexed _initiator, uint256 _collateralId);\\n\\n  event BorrowLiquidated(\\n    address indexed _initiator,\\n    address indexed _liquidator,\\n    address _owner,\\n    uint256 _collateralId\\n  );\\n  event LiquidationClosed(\\n    address indexed _initiator,\\n    address indexed _borrower,\\n    uint256 _collateralId,\\n    uint256 _borrowAmount\\n  );\\n\\n  // ---------- Admin Events ----------\\n\\n  event AddressUpdated(address indexed _oldAddress, address indexed _newAddress, uint256 _target);\\n  event ReservesAdded(address indexed _supplier, uint256 _addAmount, uint256 _newTotalReserves);\\n  event ReservesReduced(address indexed _supplier, uint256 _reduceAmount, uint256 _newTotalReserves);\\n  event AdminCommissionsWithdrawn(uint256 _amount);\\n  event ProtocolCommissionsWithdrawn(uint256 _amount);\\n  event BorrowFeesWithdrawn(uint256 _amount, bool _referralFees);\\n  event ProtocolFeesUpdated(\\n    uint256 _oldProtocolCommission,\\n    uint256 _newProtocolCommission,\\n    uint256 _oldAdminCommission,\\n    uint256 _newAdminCommission,\\n    uint256 _oldReserveFactor,\\n    uint256 _newReserveFactor\\n  );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ControllerI.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.4;\\n\\nimport \\\"./HTokenI.sol\\\";\\nimport \\\"./PermissionlessOracleI.sol\\\";\\n\\n/**\\n * @title   Interface of Controller\\n * @author  Honey Labs Inc.\\n * @custom:coauthor     m4rio\\n * @custom:contributor  BowTiedPickle\\n */\\ninterface ControllerI {\\n  /**\\n   * @notice returns the oracle per market\\n   */\\n  function oracle(HTokenI _hToken) external view returns (PermissionlessOracleI);\\n\\n  /**\\n   * @notice Add assets to be included in account liquidity calculation\\n   * @param _hTokens The list of addresses of the hToken markets to be enabled\\n   */\\n  function enterMarkets(HTokenI[] calldata _hTokens) external;\\n\\n  /**\\n   * @notice Removes asset from sender's account liquidity calculation\\n   * @dev Sender must not have an outstanding borrow balance in the asset,\\n   *  or be providing necessary collateral for an outstanding borrow.\\n   * @param _hToken The address of the asset to be removed\\n   */\\n  function exitMarket(HTokenI _hToken) external;\\n\\n  /**\\n   * @notice Checks if the account should be allowed to deposit underlying in the market\\n   * @param _hToken The market to verify the redeem against\\n   * @param _depositor The account which that wants to deposit\\n   * @param _amount The number of underlying it wants to deposit\\n   */\\n  function depositUnderlyingAllowed(\\n    HTokenI _hToken,\\n    address _depositor,\\n    uint256 _amount\\n  ) external;\\n\\n  /**\\n   * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\\n   * @param _hToken The market to verify the borrow against\\n   * @param _borrower The account which would borrow the asset\\n   * @param _collateralId collateral Id, aka the NFT token Id\\n   * @param _borrowAmount The amount of underlying the account would borrow\\n   */\\n  function borrowAllowed(\\n    HTokenI _hToken,\\n    address _borrower,\\n    uint256 _collateralId,\\n    uint256 _borrowAmount\\n  ) external;\\n\\n  /**\\n   * @notice Checks if the account should be allowed to deposit a collateral\\n   * @param _hToken The market to verify the deposit of the collateral\\n   * @param _depositor The account which deposits the collateral\\n   * @param _collateralId The collateral token id\\n   */\\n  function depositCollateralAllowed(\\n    HTokenI _hToken,\\n    address _depositor,\\n    uint256 _collateralId\\n  ) external;\\n\\n  /**\\n   * @notice Checks if the account should be allowed to redeem tokens in the given market\\n   * @param _hToken The market to verify the redeem against\\n   * @param _redeemer The account which would redeem the tokens\\n   * @param _redeemTokens The number of hTokens to exchange for the underlying asset in the market\\n   */\\n  function redeemAllowed(\\n    HTokenI _hToken,\\n    address _redeemer,\\n    uint256 _redeemTokens\\n  ) external view;\\n\\n  /**\\n   * @notice Checks if the collateral is at risk of being liquidated\\n   * @param _hToken The market to verify the liquidation\\n   * @param _collateralId collateral Id, aka the NFT token Id\\n   */\\n  function liquidationAllowed(HTokenI _hToken, uint256 _collateralId) external view;\\n\\n  /**\\n   * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n   * @param _hToken The market to hypothetically redeem/borrow in\\n   * @param _account The account to determine liquidity for\\n   * @param _redeemTokens The number of tokens to hypothetically redeem\\n   * @param _borrowAmount The amount of underlying to hypothetically borrow\\n   * @param _collateralId collateral Id, aka the NFT token Id\\n   * @return liquidity - hypothetical account liquidity in excess of collateral requirements\\n   * @return shortfall - hypothetical account shortfall below collateral requirements\\n   * @return ltvShortfall - Loan to value shortfall, this is the max a user can borrow\\n   */\\n  function getHypotheticalAccountLiquidity(\\n    HTokenI _hToken,\\n    address _account,\\n    uint256 _collateralId,\\n    uint256 _redeemTokens,\\n    uint256 _borrowAmount\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 liquidity,\\n      uint256 shortfall,\\n      uint256 ltvShortfall\\n    );\\n\\n  /**\\n   * @notice Returns whether the given account is entered in the given asset\\n   * @param _hToken The hToken to check\\n   * @param _account The address of the account to check\\n   * @return True if the account is in the asset, otherwise false.\\n   */\\n  function checkMembership(HTokenI _hToken, address _account) external view returns (bool);\\n\\n  /**\\n   * @notice Checks if the account should be allowed to transfer tokens in the given market\\n   * @param _hToken The market to verify the transfer against\\n   */\\n  function transferAllowed(HTokenI _hToken) external;\\n\\n  /**\\n   * @notice Checks if the account should be allowed to repay a borrow in the given market\\n   * @param _hToken The market to verify the repay against\\n   * @param _repayAmount The amount of the underlying asset the account would repay\\n   * @param _collateralId collateral Id, aka the NFT token Id\\n   */\\n  function repayBorrowAllowed(\\n    HTokenI _hToken,\\n    uint256 _repayAmount,\\n    uint256 _collateralId\\n  ) external view;\\n\\n  /**\\n   * @notice checks if withdrawal are allowed for this token id\\n   * @param _hToken The market to verify the withdrawal from\\n   * @param _collateralId what to pay for\\n   */\\n  function withdrawCollateralAllowed(HTokenI _hToken, uint256 _collateralId) external view;\\n\\n  /**\\n   * @notice checks if a market exists and it's listed\\n   * @param _hToken the market we check to see if it exists\\n   * @return bool true or false\\n   */\\n  function marketExists(HTokenI _hToken) external view returns (bool);\\n\\n  /**\\n   * @notice Returns market data for a specific market\\n   * @param _hToken the market we want to retrieved Controller data\\n   * @return bool If the market is listed\\n   * @return uint256 MAX Factor Mantissa\\n   * @return uint256 Collateral Factor Mantissa\\n   */\\n  function getMarketData(HTokenI _hToken)\\n    external\\n    view\\n    returns (\\n      bool,\\n      uint256,\\n      uint256\\n    );\\n\\n  /**\\n   * @notice checks if an underlying exists in the market\\n   * @param _underlying the underlying to check if exists\\n   * @return bool true or false\\n   */\\n  function underlyingExistsInMarkets(address _underlying) external view returns (bool);\\n\\n  /**\\n   * @notice checks if a collateral exists in the market\\n   * @param _collateral the collateral to check if exists\\n   * @return bool true or false\\n   */\\n  function collateralExistsInMarkets(address _collateral) external view returns (bool);\\n\\n  /**\\n   * @notice  Checks if a certain action is paused within a market\\n   * @param   _hToken   The market we want to check if an action is paused\\n   * @param   _target   The action we want to check if it's paused\\n   * @return  bool true or false\\n   */\\n  function isActionPaused(HTokenI _hToken, uint256 _target) external view returns (bool);\\n\\n  /**\\n   * @notice returns the borrow fee per market, accounts for referral\\n   * @param _hToken the market we want the borrow fee for\\n   * @param _referral referral code for Referral program of Honey Labs\\n   * @param _signature signed message provided by Honey Labs\\n   */\\n  function getBorrowFeePerMarket(\\n    HTokenI _hToken,\\n    string calldata _referral,\\n    bytes calldata _signature\\n  ) external view returns (uint256, bool);\\n\\n  /**\\n   * @notice returns the borrow fee per market if provided a referral code, accounts for referral\\n   * @param _hToken the market we want the borrow fee for\\n   */\\n  function getReferralBorrowFeePerMarket(HTokenI _hToken) external view returns (uint256);\\n\\n  // ---------- Permissioned Functions ----------\\n\\n  function _supportMarket(HTokenI _hToken) external;\\n\\n  function _setPriceOracle(HTokenI _hToken, PermissionlessOracleI _newOracle) external;\\n\\n  function _setFactors(\\n    HTokenI _hToken,\\n    uint256 _newMaxLTVFactorMantissa,\\n    uint256 _newCollateralFactorMantissa\\n  ) external;\\n\\n  function _setBorrowFeePerMarket(\\n    HTokenI _market,\\n    uint256 _fee,\\n    uint256 _referralFee\\n  ) external;\\n\\n  function _pauseComponent(\\n    HTokenI _hToken,\\n    bool _state,\\n    uint256 _target\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/HTokenHelperI.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.4;\\n\\nimport \\\".././interfaces/HTokenI.sol\\\";\\nimport \\\".././interfaces/PriceOracleI.sol\\\";\\nimport \\\".././interfaces/ControllerI.sol\\\";\\n\\n/**\\n * @title   Interface for HTokenHelper\\n * @author  Honey Labs Inc.\\n * @custom:coauthor     m4rio\\n * @custom:contributor  BowTiedPickle\\n */\\ninterface HTokenHelperI {\\n  /**\\n   * @notice Get cash balance of this hToken in the underlying asset\\n   * @return The quantity of underlying asset owned by this contract\\n   */\\n  function getCash(HTokenI _hToken) external view returns (uint256);\\n\\n  /**\\n   * @notice Get underlying balance that is available for withdrawal or borrow\\n   * @return The quantity of underlying not tied up\\n   */\\n  function getAvailableUnderlying(HTokenI _hToken) external view returns (uint256);\\n\\n  /**\\n   * @notice Get underlying balance for an account\\n   * @param _account the account to check the balance for\\n   * @return The quantity of underlying asset owned by this account\\n   */\\n  function getAvailableUnderlyingForUser(HTokenI _hToken, address _account) external view returns (uint256);\\n\\n  /**\\n   * @notice Get underlying balance that is available to be withdrawn\\n   * @return The quantity of underlying that can be borrowed\\n   */\\n  function getAvailableUnderlyingToBorrow(HTokenI _hToken) external view returns (uint256);\\n\\n  /**\\n   * @notice returns different assets per a hToken, helper method to reduce frontend calls\\n   * @param _hToken the hToken to get the assets for\\n   * @return total borrows\\n   * @return total reserves\\n   * @return total underlying balance\\n   * @return active coupons\\n   */\\n  function getAssets(HTokenI _hToken)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      HTokenI.Coupon[] memory\\n    );\\n\\n  /**\\n   * @notice Get all a user's coupons\\n   * @param _hToken The HToken we want to get the user's coupons from\\n   * @param _user The user to search for\\n   * @return Array of all coupons belonging to the user\\n   */\\n  function getUserCoupons(HTokenI _hToken, address _user) external view returns (HTokenI.Coupon[] memory);\\n\\n  /**\\n   * @notice Get the number of coupons deposited aka active\\n   * @param _hToken The HToken we want to get the active User Coupons\\n   * @param _hasDebt if the coupon has debt or not\\n   * @return Array of all active coupons\\n   */\\n  function getActiveCoupons(HTokenI _hToken, bool _hasDebt) external view returns (HTokenI.Coupon[] memory);\\n\\n  /**\\n   * @notice Get tokenIds of all a user's coupons\\n   * @param _hToken The HToken we want to get the User Coupon Indices\\n   * @param _user The user to search for\\n   * @return Array of indices of all coupons belonging to the user\\n   */\\n  function getUserCouponIndices(HTokenI _hToken, address _user) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice returns prices for a market to reduce frontend calls\\n   * @param _hToken the hToken to get the prices for\\n   * @return collection floor price in underlying value\\n   * @return underlying price in usd\\n   */\\n  function getMarketOraclePrices(HTokenI _hToken) external view returns (uint256, uint256);\\n\\n  /**\\n   * @notice Returns the borrow fee for a market, it can also return the discounted fee for referred borrow\\n   * @param _hToken The market we want to get the borrow fee for\\n   * @param _referred Flag that needs to be true in case we want to get the referred borrow fee\\n   * @return fee - The borrow fee mantissa denominated in 1e18\\n   */\\n  function getMarketBorrowFee(HTokenI _hToken, bool _referred) external view returns (uint256 fee);\\n\\n  /**\\n   * @notice returns the collection price floor in usd\\n   * @param _hToken the hToken to get the price for\\n   * @return collection floor price in usd\\n   */\\n  function getFloorPriceInUSD(HTokenI _hToken) external view returns (uint256);\\n\\n  /**\\n   * @notice returns the collection price floor in underlying value\\n   * @param _hToken the hToken to get the price for\\n   * @return collection floor price in underlying\\n   */\\n  function getFloorPriceInUnderlying(HTokenI _hToken) external view returns (uint256);\\n\\n  /**\\n   * @notice get the underlying price in usd for a hToken\\n   * @param _hToken the hToken to get the price for\\n   * @return underlying price in usd\\n   */\\n  function getUnderlyingPriceInUSD(HTokenI _hToken) external view returns (uint256);\\n\\n  /**\\n   * @notice get the max borrowable amount for a market\\n   * @notice it computes the floor price in usd and take the % of collateral factor that can be max borrowed\\n   *         then it divides it by the underlying price in usd.\\n   * @param _hToken the hToken to get the price for\\n   * @param _hivemind the controller used to get the collateral factor\\n   * @return underlying price in underlying\\n   */\\n  function getMaxBorrowableAmountInUnderlying(HTokenI _hToken, ControllerI _hivemind) external view returns (uint256);\\n\\n  /**\\n   * @notice get the max borrowable amount for a market\\n   * @notice it computes the floor price in usd and take the % of collateral factor that can be max borrowed\\n   * @param _hToken the hToken to get the price for\\n   * @param _hivemind the controller used to get the collateral factor\\n   * @return underlying price in usd\\n   */\\n  function getMaxBorrowableAmountInUSD(HTokenI _hToken, ControllerI _hivemind) external view returns (uint256);\\n\\n  /**\\n   * @notice get's all the coupons that have deposited collateral\\n   * @param _hToken market to get the collateral from\\n   * @param _startTokenId start token id of the collateral collection, as we don't know how big the collection will be we have\\n   * to do pagination\\n   * @param _endTokenId end of token id we want to get.\\n   * @return coupons list of coupons that are active\\n   */\\n  function getAllCollateralPerHToken(\\n    HTokenI _hToken,\\n    uint256 _startTokenId,\\n    uint256 _endTokenId\\n  ) external view returns (HTokenI.Coupon[] memory coupons);\\n\\n  /**\\n   * @notice Gets data about a market for frontend display\\n   * @param _hToken the market we want the data for\\n   * @return interest rate of the market\\n   * @return total underlying supplied in a market\\n   * @return total underlying available to be borrowed\\n   */\\n  function getFrontendMarketData(HTokenI _hToken)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  /**\\n   * @notice Gets data about a coupon for frontend display\\n   * @param _hToken   The market we want the coupon for\\n   * @param _couponId The coupon id we want to get the data for\\n   * @return debt of this coupon\\n   * @return allowance - how much liquidity can borrow till hitting LTV\\n   * @return nft floor price\\n   */\\n  function getFrontendCouponData(HTokenI _hToken, uint256 _couponId)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  /**\\n   * @notice Gets Liquidation data for a market, for frontend purposes\\n   * @param _hToken the market we want the data for\\n   * @return Liquidation threshold of a market (collateral factor)\\n   * @return Total debt of the market\\n   * @return TVL of a market which consists of the total coupons that have debt\\n   */\\n  function getFrontendLiquidationData(HTokenI _hToken)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  /**\\n   * @notice uri function called from the HToken that returns the uri metadata for a coupon\\n   * @param _id id of the hToken\\n   * @param _hTokenAddress address of the hToken\\n   */\\n  function uri(uint256 _id, address _hTokenAddress) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/HTokenI.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.4;\\nimport \\\"./HTokenInternalI.sol\\\";\\n\\n/**\\n * @title   Interface of HToken\\n * @author  Honey Labs Inc.\\n * @custom:coauthor BowTiedPickle\\n * @custom:coauthor m4rio\\n */\\ninterface HTokenI is HTokenInternalI {\\n  /**\\n   * @notice  Deposit underlying ERC-20 asset and mint hTokens\\n   * @dev     Pull pattern, user must approve the contract before calling. If _to is address(0) then it becomes msg.sender\\n   * @param   _amount   Quantity of underlying ERC-20 to transfer in\\n   * @param   _to       Target address to mint hTokens to\\n   */\\n  function depositUnderlying(uint256 _amount, address _to) external;\\n\\n  /**\\n   * @notice  Redeem a specified amount of hTokens for their underlying ERC-20 asset\\n   * @param   _amount   Quantity of hTokens to redeem for underlying ERC-20\\n   */\\n  function redeem(uint256 _amount) external;\\n\\n  /**\\n   * @notice  Withdraws the specified amount of underlying ERC-20 asset, consuming the minimum amount of hTokens necessary\\n   * @param   _amount   Quantity of underlying ERC-20 tokens to withdraw\\n   */\\n  function withdraw(uint256 _amount) external;\\n\\n  /**\\n   * @notice  Deposit multiple specified tokens of the underlying ERC-721 asset and mint ERC-1155 deposit coupon NFTs\\n   * @dev     Pull pattern, user must approve the contract before calling.\\n   * @param   _collateralIds  Token IDs of underlying ERC-721 to be transferred in\\n   */\\n  function depositCollateral(uint256[] calldata _collateralIds) external;\\n\\n  /**\\n   * @notice  Sender borrows assets from the protocol against the specified collateral asset, without a referral code\\n   * @dev     Collateral must be deposited first.\\n   * @param   _borrowAmount   Amount of underlying ERC-20 to borrow\\n   * @param   _collateralId   Token ID of underlying ERC-721 to be borrowed against\\n   */\\n  function borrow(uint256 _borrowAmount, uint256 _collateralId) external;\\n\\n  /**\\n   * @notice  Sender borrows assets from the protocol against the specified collateral asset, using a referral code\\n   * @param   _borrowAmount   Amount of underlying ERC-20 to borrow\\n   * @param   _collateralId   Token ID of underlying ERC-721 to be borrowed against\\n   * @param   _referral       Referral code as a plain string\\n   * @param   _signature      Signed message authorizing the referral, provided by Honey Labs\\n   */\\n  function borrowReferred(\\n    uint256 _borrowAmount,\\n    uint256 _collateralId,\\n    string calldata _referral,\\n    bytes calldata _signature\\n  ) external;\\n\\n  /**\\n   * @notice  Sender repays a borrow taken against the specified collateral asset\\n   * @dev     Pull pattern, user must approve the contract before calling.\\n   * @param   _repayAmount    Amount of underlying ERC-20 to repay\\n   * @param   _collateralId   Token ID of underlying ERC-721 to be repaid against\\n   */\\n  function repayBorrow(\\n    uint256 _repayAmount,\\n    uint256 _collateralId,\\n    address _to\\n  ) external;\\n\\n  /**\\n   * @notice  Burn deposit coupon NFTs and withdraw the associated underlying ERC-721 NFTs\\n   * @param   _collateralIds  Token IDs of underlying ERC-721 to be withdrawn\\n   */\\n  function withdrawCollateral(uint256[] calldata _collateralIds) external;\\n\\n  /**\\n   * @notice  Trigger transfer of an NFT to the liquidation contract\\n   * @param   _collateralId   Token ID of underlying ERC-721 to be liquidated\\n   */\\n  function liquidateBorrow(uint256 _collateralId) external;\\n\\n  /**\\n   * @notice  Pay off the entirety of a liquidated debt position and burn the coupon\\n   * @dev     May only be called by the liquidator\\n   * @param   _borrower       Owner of the debt position\\n   * @param   _collateralId   Token ID of underlying ERC-721 to be closed out\\n   */\\n  function closeoutLiquidation(address _borrower, uint256 _collateralId) external;\\n\\n  /**\\n   * @notice  Accrues all interest due to the protocol\\n   * @dev     Call this before performing calculations using 'totalBorrows' or other contract-wide quantities\\n   */\\n  function accrueInterest() external;\\n\\n  // ----- Utility functions -----\\n\\n  /**\\n   * @notice  Sweep accidental ERC-20 transfers to this contract.\\n   * @dev     Tokens are sent to the DAO for later distribution\\n   * @param   _token  The address of the ERC-20 token to sweep\\n   */\\n  function sweepToken(IERC20 _token) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/HTokenInternalI.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\n/**\\n * @title   Interface of HToken Internal\\n * @author  Honey Labs Inc.\\n * @custom:coauthor m4rio\\n * @custom:coauthor BowTiedPickle\\n */\\ninterface HTokenInternalI is IERC1155, IAccessControl {\\n  struct Coupon {\\n    uint32 id; //Coupon's id\\n    uint8 active; // Coupon activity status\\n    address owner; // Who is the current owner of this coupon\\n    uint256 collateralId; // tokenId of the collateral collection that is borrowed against\\n    uint256 borrowAmount; // Principal borrow balance, denominated in underlying ERC20 token.\\n    uint256 debtShares; // Debt shares, keeps the shares of total debt by the protocol\\n  }\\n\\n  struct Collateral {\\n    uint256 collateralId; // TokenId of the collateral\\n    bool active; // Collateral activity status\\n  }\\n\\n  // ----- Informational -----\\n\\n  function decimals() external view returns (uint8);\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  // ----- Addresses -----\\n\\n  function collateralToken() external view returns (IERC721);\\n\\n  function underlyingToken() external view returns (IERC20);\\n\\n  // ----- Protocol Accounting -----\\n\\n  function totalBorrows() external view returns (uint256);\\n\\n  function totalReserves() external view returns (uint256);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function totalFuseFees() external view returns (uint256);\\n\\n  function totalAdminCommission() external view returns (uint256);\\n\\n  function accrualBlockNumber() external view returns (uint256);\\n\\n  function interestIndexStored() external view returns (uint256);\\n\\n  function totalProtocolCommissions() external view returns (uint256);\\n\\n  function userToCoupons(address _user) external view returns (uint256);\\n\\n  function collateralPerBorrowCouponId(uint256 _couponId) external view returns (Collateral memory);\\n\\n  function borrowCoupons(uint256 _collateralId) external view returns (Coupon memory);\\n\\n  // ----- Views -----\\n\\n  /**\\n   * @notice  Get the outstanding debt of a collateral\\n   * @dev     Simulates accrual of interest\\n   * @param   _collateralId   Token ID of underlying ERC-721\\n   * @return  Outstanding debt in units of underlying ERC-20\\n   */\\n  function getDebtForCollateral(uint256 _collateralId) external view returns (uint256);\\n\\n  /**\\n   * @notice  Returns the current per-block borrow interest rate for this hToken\\n   * @return  The borrow interest rate per block, scaled by 1e18\\n   */\\n  function borrowRatePerBlock() external view returns (uint256);\\n\\n  /**\\n   * @notice  Get the outstanding debt of a coupon\\n   * @dev     Simulates accrual of interest\\n   * @param   _couponId   ID of the coupon\\n   * @return  Outstanding debt in units of underlying ERC-20\\n   */\\n  function getDebtForCoupon(uint256 _couponId) external view returns (uint256);\\n\\n  /**\\n   * @notice  Gets balance of this contract in terms of the underlying excluding the fees\\n   * @dev     This excludes the value of the current message, if any\\n   * @return  The quantity of underlying ERC-20 tokens owned by this contract\\n   */\\n  function getCashPrior() external view returns (uint256);\\n\\n  /**\\n   * @notice  Get a snapshot of the account's balances, and the cached exchange rate\\n   * @dev     This is used by controller to more efficiently perform liquidity checks.\\n   * @param   _account  Address of the account to snapshot\\n   * @return  (token balance, borrow balance, exchange rate mantissa)\\n   */\\n  function getAccountSnapshot(address _account)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  /**\\n   * @notice  Get the outstanding debt of the protocol\\n   * @return  Protocol debt\\n   */\\n  function getDebt() external view returns (uint256);\\n\\n  /**\\n   * @notice  Returns protocol fees\\n   * @return  Reserve factor mantissa\\n   * @return  Admin fee mantissa\\n   * @return  Hive fee mantissa\\n   * @return  Initial exchange rate mantissa\\n   * @return  Maximum borrow rate mantissa\\n   */\\n  function getProtocolFees()\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  /**\\n   * @notice  Returns different addresses of the protocol\\n   * @return  Liquidator address\\n   * @return  HTokenHelper address\\n   * @return  Controller address\\n   * @return  Admin Fee Receiver address\\n   * @return  Hive Fee Receiver address\\n   * @return  Interest Model address\\n   * @return  Referral Pool address\\n   * @return  DAO address\\n   */\\n  function getAddresses()\\n    external\\n    view\\n    returns (\\n      address,\\n      address,\\n      address,\\n      address,\\n      address,\\n      address,\\n      address,\\n      address\\n    );\\n\\n  /**\\n   * @notice  Get the last minted coupon ID\\n   * @return  The last minted coupon ID\\n   */\\n  function idCounter() external view returns (uint256);\\n\\n  /**\\n   * @notice  Get the coupon for a specific collateral NFT\\n   * @param   _collateralId   Token ID of underlying ERC-721\\n   * @return  Coupon\\n   */\\n  function getSpecificCouponByCollateralId(uint256 _collateralId) external view returns (Coupon memory);\\n\\n  /**\\n   * @notice  Calculate the prevailing interest due per token of debt principal\\n   * @return  Mantissa formatted interest rate per token of debt\\n   */\\n  function interestIndex() external view returns (uint256);\\n\\n  /**\\n   * @notice  Accrue interest then return the up-to-date exchange rate from the ERC-20 underlying to the HToken\\n   * @return  Calculated exchange rate scaled by 1e18\\n   */\\n  function exchangeRateCurrent() external returns (uint256);\\n\\n  /**\\n   * @notice  Calculates the exchange rate from the ERC-20 underlying to the HToken\\n   * @dev     This function does not accrue interest before calculating the exchange rate\\n   * @return  Calculated exchange rate scaled by 1e18\\n   */\\n  function exchangeRateStored() external view returns (uint256);\\n\\n  /**\\n   * @notice  Add to or take away from reserves\\n   * @dev     Accrues interest\\n   * @param   _amount  Quantity of underlying ERC-20 token to change the reserves by\\n   */\\n  function _modifyReserves(uint256 _amount, bool _add) external;\\n\\n  /**\\n   * @notice  Set new admin fee mantissas\\n   * @dev     Accrues interest\\n   * @param   _newAdminCommissionMantissa        New admin fee mantissa\\n   */\\n  function _setAdminCommission(uint256 _newAdminCommissionMantissa) external;\\n\\n  /**\\n   * @notice  Set new protocol commission and reserve factor mantissas\\n   * @dev     Accrues interest\\n   * @param   _newProtocolCommissionMantissa         New protocol commission mantissa\\n   * @param   _newReserveFactorMantissa   New reserve factor mantissa\\n   */\\n  function _setProtocolFees(uint256 _newProtocolCommissionMantissa, uint256 _newReserveFactorMantissa) external;\\n\\n  /**\\n   * @notice  Sets a new admin fee receiver\\n   * @param   _newAddress   Address of the new admin fee receiver\\n   * @param   _target       Target ID of the address to be set\\n   */\\n  function _setAddressMarketAdmin(address _newAddress, uint256 _target) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/InterestRateModelI.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.4;\\n\\n/**\\n * @title   Modified Compound's InterestRateModel Interface\\n * @author  Honey Labs Inc.\\n * @custom:coauthor BowTiedPickle\\n * @custom:contributor m4rio\\n */\\ninterface InterestRateModelI {\\n  /**\\n   * @notice Calculates the current borrow rate per block\\n   * @param _cash The amount of cash in the market\\n   * @param _borrows The amount of borrows in the market\\n   * @param _reserves The amount of reserves in the market\\n   * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)\\n   */\\n  function getBorrowRate(\\n    uint256 _cash,\\n    uint256 _borrows,\\n    uint256 _reserves\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @notice Calculates the current supply rate per block\\n   * @param _cash The amount of cash in the market\\n   * @param _borrows The amount of borrows in the market\\n   * @param _reserves The amount of reserves in the market\\n   * @param _reserveFactorMantissa The current reserve factor for the market\\n   * @return The supply rate percentage per block as a mantissa (scaled by 1e18)\\n   */\\n  function getSupplyRate(\\n    uint256 _cash,\\n    uint256 _borrows,\\n    uint256 _reserves,\\n    uint256 _reserveFactorMantissa\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\\n   * @param _cash The amount of cash in the market\\n   * @param _borrows The amount of borrows in the market\\n   * @param _reserves The amount of reserves in the market\\n   * @return The utilization rate as a mantissa between [0, 1e18]\\n   */\\n  function utilizationRate(\\n    uint256 _cash,\\n    uint256 _borrows,\\n    uint256 _reserves\\n  ) external pure returns (uint256);\\n\\n  /**\\n   *\\n   * @param _interfaceId The interface identifier, as specified in ERC-165\\n   */\\n  function supportsInterface(bytes4 _interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/PermissionlessOracleI.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.4;\\n\\nimport \\\"./HTokenI.sol\\\";\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n/**\\n * @title   PermissionlessOracleI interface for the Permissionless oracle\\n * @author  Honey Labs Inc.\\n * @custom:coauthor BowTiedPickle\\n * @custom:coauthor m4rio\\n */\\ninterface PermissionlessOracleI {\\n  /**\\n   * @notice returns the price (in eth) for the floor of a collection\\n   * @param _collection address of the collection\\n   * @param _decimals adjust decimals of the returned price\\n   */\\n  function getFloorPrice(address _collection, uint256 _decimals) external view returns (uint128, uint128);\\n\\n  /**\\n   * @notice returns the latest price for a given pair\\n   * @param _erc20 the erc20 we want to get the price for in USD\\n   * @param _decimals decimals to denote the result in\\n   */\\n  function getUnderlyingPriceInUSD(IERC20 _erc20, uint256 _decimals) external view returns (uint256);\\n\\n  /**\\n   * @notice get price of eth\\n   * @param _decimals adjust decimals of the returned price\\n   */\\n  function getEthPrice(uint256 _decimals) external view returns (uint256);\\n\\n  /**\\n   * @notice get price feeds for a token\\n   * @return returns the Chainlink Aggregator interface\\n   */\\n  function priceFeeds(IERC20 _token) external view returns (AggregatorV3Interface);\\n\\n  /**\\n   * @notice returns the update threshold for a specific _collection\\n   */\\n  function updateThreshold(address _collection) external view returns (uint256);\\n\\n  /**\\n   * @notice returns the number of floors for a specific _collection\\n   * @param _address address of the collection\\n   *\\n   */\\n  function getNoOfFloors(address _address) external view returns (uint256);\\n\\n  /**\\n   * @notice returns the last updated timestamp for a specific _collection\\n   * @param _collection address of the collection\\n   *\\n   */\\n  function getLastUpdated(address _collection) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/PriceOracleI.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.4;\\n\\nimport \\\"./HTokenI.sol\\\";\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n/**\\n * @title   PriceOracle interface for Chainlink oracles\\n * @author  Honey Labs Inc.\\n * @custom:coauthor BowTiedPickle\\n * @custom:coauthor m4rio\\n */\\ninterface PriceOracleI {\\n  /**\\n   * @notice returns the underlying price for the floor of a collection\\n   * @param _collection address of the collection\\n   * @param _decimals adjust decimals of the returned price\\n   */\\n  function getFloorPrice(address _collection, uint256 _decimals) external view returns (uint128, uint128);\\n\\n  /**\\n   * @notice returns the underlying price for an individual token id\\n   * @param _collection address of the collection\\n   * @param _tokenId token id within this collection\\n   * @param _decimals adjust decimals of the returned price\\n   */\\n  function getUnderlyingIndividualNFTPrice(\\n    address _collection,\\n    uint256 _tokenId,\\n    uint256 _decimals\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @notice returns the latest price for a given pair\\n   * @param _erc20 the erc20 we want to get the price for in USD\\n   * @param _decimals decimals to denote the result in\\n   */\\n  function getUnderlyingPriceInUSD(IERC20 _erc20, uint256 _decimals) external view returns (uint256);\\n\\n  /**\\n   * @notice get price of eth\\n   * @param _decimals adjust decimals of the returned price\\n   */\\n  function getEthPrice(uint256 _decimals) external view returns (uint256);\\n\\n  /**\\n   * @notice get price feeds for a token\\n   * @return returns the Chainlink Aggregator interface\\n   */\\n  function priceFeeds(IERC20 _token) external view returns (AggregatorV3Interface);\\n\\n  /**\\n   * @notice returns the update threshold\\n   */\\n  function updateThreshold() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ErrorReporter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.15;\\n\\nerror Unauthorized();\\nerror AccrueInterestError(Error error);\\nerror WrongParams();\\nerror Unexpected(string error);\\nerror InvalidCoupon();\\nerror ControllerError(Error error);\\nerror AdminError(Error error);\\nerror MarketError(Error error);\\nerror HTokenError(Error error);\\nerror LiquidatorError(Error error);\\nerror ControlPanelError(Error error);\\nerror HTokenFactoryError(Error error);\\nerror PausedAction();\\nerror NotOwner();\\nerror ExternalFailure(string error);\\nerror Initialized();\\nerror Uninitialized();\\nerror OracleNotUpdated();\\nerror TransferError();\\nerror StalePrice();\\n\\n/**\\n * @title   Errors reported across Honey Labs Inc. contracts\\n * @author  Honey Labs Inc.\\n * @custom:coauthor BowTiedPickle\\n * @custom:coauthor m4rio\\n */\\nenum Error {\\n  UNAUTHORIZED, //0\\n  INSUFFICIENT_LIQUIDITY,\\n  INVALID_COLLATERAL_FACTOR,\\n  MAX_MARKETS_IN,\\n  MARKET_NOT_LISTED,\\n  MARKET_ALREADY_LISTED, //5\\n  MARKET_CAP_BORROW_REACHED,\\n  MARKET_NOT_FRESH,\\n  PRICE_ERROR,\\n  BAD_INPUT,\\n  AMOUNT_ZERO, //10\\n  NO_DEBT,\\n  LIQUIDATION_NOT_ALLOWED,\\n  WITHDRAW_NOT_ALLOWED,\\n  INITIAL_EXCHANGE_MANTISSA,\\n  TRANSFER_ERROR, //15\\n  COUPON_LOOKUP,\\n  TOKEN_INSUFFICIENT_CASH,\\n  BORROW_RATE_TOO_BIG,\\n  NONZERO_BORROW_BALANCE,\\n  AMOUNT_TOO_BIG, //20\\n  AUCTION_NOT_ACTIVE,\\n  AUCTION_FINISHED,\\n  AUCTION_NOT_FINISHED,\\n  AUCTION_BID_TOO_LOW,\\n  AUCTION_NO_BIDS, //25\\n  CLAWBACK_WINDOW_EXPIRED,\\n  CLAWBACK_WINDOW_NOT_EXPIRED,\\n  REFUND_NOT_OWED,\\n  TOKEN_LOOKUP_ERROR,\\n  INSUFFICIENT_WINNING_BID, //30\\n  TOKEN_DEBT_NONEXISTENT,\\n  AUCTION_SETTLE_FORBIDDEN,\\n  NFT20_PAIR_NOT_FOUND,\\n  NFTX_PAIR_NOT_FOUND,\\n  TOKEN_NOT_PRESENT, //35\\n  CANCEL_TOO_SOON,\\n  AUCTION_USER_NOT_FOUND,\\n  NOT_FOUND,\\n  INVALID_MAX_LTV_FACTOR,\\n  BALANCE_INSUFFICIENT, //40\\n  ORACLE_NOT_SET,\\n  MARKET_INVALID,\\n  FACTORY_INVALID_COLLATERAL,\\n  FACTORY_INVALID_UNDERLYING,\\n  FACTORY_INVALID_ORACLE, //45\\n  FACTORY_DEPLOYMENT_FAILED,\\n  REPAY_NOT_ALLOWED,\\n  NONZERO_UNDERLYING_BALANCE,\\n  INVALID_ACTION,\\n  ORACLE_IS_PRESENT, //50\\n  FACTORY_INVALID_UNDERLYING_DECIMALS,\\n  FACTORY_INVALID_INTEREST_RATE_MODEL\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 300\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_interestRateModel\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialExchangeRateMantissa\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_adminCommissionReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolCommissionReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_roleReceiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"enum Error\",\"name\":\"error\",\"type\":\"uint8\"}],\"name\":\"AccrueInterestError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum Error\",\"name\":\"error\",\"type\":\"uint8\"}],\"name\":\"AdminError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum Error\",\"name\":\"error\",\"type\":\"uint8\"}],\"name\":\"HTokenError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Reentrant\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongParams\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"}],\"name\":\"AddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AdminCommissionsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_borrowAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalBorrows\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_referralFees\",\"type\":\"bool\"}],\"name\":\"BorrowFeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collateralId\",\"type\":\"uint256\"}],\"name\":\"BorrowLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_referrer\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"BorrowReferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collateralId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_couponId\",\"type\":\"uint256\"}],\"name\":\"CollateralDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collateralId\",\"type\":\"uint256\"}],\"name\":\"CollateralWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_interestAccumulated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_interestIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalBorrows\",\"type\":\"uint256\"}],\"name\":\"InterestAccrued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collateralId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_borrowAmount\",\"type\":\"uint256\"}],\"name\":\"LiquidationClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolCommissionsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldProtocolCommission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newProtocolCommission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldAdminCommission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newAdminCommission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldReserveFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newReserveFactor\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_redeemAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokensWithdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalHTokenSupply\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_accountBorrows\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalBorrows\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collateralId\",\"type\":\"uint256\"}],\"name\":\"RepayBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_supplier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_addAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newTotalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_supplier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reduceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newTotalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesReduced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokensToMint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalhTokenSupply\",\"type\":\"uint256\"}],\"name\":\"UnderlyingDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_redeemAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokensWithdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalHTokenSupply\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKET_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUPPLIER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_add\",\"type\":\"bool\"}],\"name\":\"_modifyReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"}],\"name\":\"_setAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"}],\"name\":\"_setAddressMarketAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newAdminCommissionMantissa\",\"type\":\"uint256\"}],\"name\":\"_setAdminCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newProtocolCommissionMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newReserveFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_withdrawAdminCommissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_referralFees\",\"type\":\"bool\"}],\"name\":\"_withdrawBorrowFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_withdrawProtocolCommissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accrualBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accrueInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collateralId\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"borrowCoupons\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"active\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collateralId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_referral\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"borrowReferred\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralId\",\"type\":\"uint256\"}],\"name\":\"closeoutLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collateralPerBorrowCouponId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_collateralIds\",\"type\":\"uint256[]\"}],\"name\":\"depositCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"depositUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRateStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAccountSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCashPrior\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateralId\",\"type\":\"uint256\"}],\"name\":\"getDebtForCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_couponId\",\"type\":\"uint256\"}],\"name\":\"getDebtForCoupon\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateralId\",\"type\":\"uint256\"}],\"name\":\"getSpecificCouponByCollateralId\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"active\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtShares\",\"type\":\"uint256\"}],\"internalType\":\"struct HTokenInternal.Coupon\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestIndexStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateralId\",\"type\":\"uint256\"}],\"name\":\"liquidateBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collateralId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"repayBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sharesBalancePerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAdminCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBorrowFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBorrows\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalProtocolCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReferredBorrowFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingToken\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userToCoupons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_collateralIds\",\"type\":\"uint256[]\"}],\"name\":\"withdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HToken", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "300", "ConstructorArguments": "0000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000009d305a42a3975ee4c1c57555bed5919889dce63f0000000000000000000000009a1edb903b058298dd0b06f52876d9d45358b7cb0000000000000000000000006cdd6eddba720edda2e651384ab958ed42386a1d0000000000000000000000003318923722cd52c7c1752a62056532bef328772000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000007f8cefd165b9e4a84b60ce47f4c3784c2eb408a00000000000000000000000007f8cefd165b9e4a84b60ce47f4c3784c2eb408a0000000000000000000000003c681140690b7dfe0dcb2c8d44d5713afaf67bcd000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000000f486f6e65792057455448204c414e440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000968574554484c414e440000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}