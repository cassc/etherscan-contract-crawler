{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\n\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\ncontract LystoHandler is Ownable {\r\n\r\n    struct MintAndTransferInfo {\r\n        address tokenContractAddress; //address of contract to mint token from\r\n        address receiverAddr; //address to transfer token after minting\r\n        uint256 tokenId;\r\n    }\r\n\r\n    struct TokenInfo {\r\n        address tokenContractAddress; //address of contract to fetch information\r\n        uint256[] tokenIds; \r\n    }\r\n\r\n    mapping (address => bool) public approvedAddresses; //list of approved addresses\r\n    address public manager; \r\n\r\n    event managerChanged(address indexed managerAddr);\r\n    event approvedAddressAdded(address indexed addr);\r\n    event approvedAddressRemoved(address indexed addr);\r\n\r\n    constructor (address _managerAddress) {\r\n        setManager(_managerAddress);\r\n    }\r\n\r\n    //function to add a approved address\r\n    function setManager(address addr) public onlyOwner {\r\n        require(addr != address(0), \"Can not be zero!\");\r\n        manager = addr;\r\n        emit managerChanged(addr);\r\n    }\r\n\r\n    //function to add a approved address\r\n    function addApprovedAddress(address addr) external isManagerOrOwner {\r\n        approvedAddresses[addr] = true;\r\n        emit approvedAddressAdded(addr);\r\n    }\r\n\r\n    // function to remove address from list of approved address\r\n    function removeApprovedAddress(address addr) external isManagerOrOwner {\r\n        approvedAddresses[addr] = false;\r\n        emit approvedAddressRemoved(addr);\r\n    } \r\n\r\n    // function to mint and transfer token from another contract\r\n    function mintAndTransfer(MintAndTransferInfo memory info) public isApprovedAddress {\r\n        PoPPInterface poPP = PoPPInterface(info.tokenContractAddress);\r\n        poPP.mint(info.receiverAddr, info.tokenId);\r\n    }\r\n\r\n    // function to bulk mint and transfer token from another contract\r\n    function bulkMintAndTransfer(MintAndTransferInfo[] memory info) public isApprovedAddress {\r\n        for(uint i = 0; i < info.length; i++) {\r\n            mintAndTransfer(info[i]);\r\n        }\r\n    }\r\n\r\n    // function to get tokenIds owned by user across multiple contracts\r\n    function getOwnedTokenDetails(address[] memory addrs, address user) external view returns(TokenInfo[] memory) {\r\n        TokenInfo[] memory tokensInfo = new TokenInfo[](addrs.length);\r\n        for(uint i = 0; i < addrs.length; i++) {\r\n            TokenInfo memory tokenInfo = getTokenIds(addrs[i], user);\r\n            tokensInfo[i] = tokenInfo;\r\n        }\r\n        return tokensInfo;\r\n    }\r\n\r\n    // function to get tokenIds owned by user in given contract\r\n    function getTokenIds(address contractAddr, address user) public  view returns (TokenInfo memory) {\r\n        PoPPInterface poPP = PoPPInterface(contractAddr);\r\n        uint256 totalTokens = poPP.balanceOf(user);\r\n        uint256[] memory tokenIds = new uint256[](totalTokens);\r\n        if (totalTokens > 0) {\r\n            for(uint i = 0; i < totalTokens; i++) {\r\n                uint256 tokenId = poPP.tokenOfOwnerByIndex(user, i);\r\n                tokenIds[i]= tokenId;\r\n            }\r\n        } \r\n        TokenInfo memory tokenInfo = TokenInfo(contractAddr, tokenIds);\r\n        return tokenInfo;\r\n        \r\n    }\r\n\r\n    // function to get total count of tokens owned by user across multiple contracts\r\n    function getTokenCount(address[] memory addrs, address user) external view returns(uint256) {\r\n        uint256 totalTokens = 0;\r\n        for(uint i = 0; i < addrs.length; i++) {\r\n            PoPPInterface poPP = PoPPInterface(addrs[i]);\r\n            uint256 tokenCount = poPP.balanceOf(user);\r\n            totalTokens = totalTokens + tokenCount;\r\n        }\r\n        return totalTokens;\r\n    }\r\n\r\n    \r\n\r\n    //pause minting in a particular contract\r\n    function pauseMint(address contractAddr) public isManagerOrOwner {\r\n        PoPPInterface poPP = PoPPInterface(contractAddr);\r\n        poPP.pauseMinting();\r\n    }\r\n\r\n    //Unpause minting in a particular contract\r\n    function unpauseMint(address contractAddr) public isManagerOrOwner {\r\n        PoPPInterface poPP = PoPPInterface(contractAddr);\r\n        poPP.unPauseMinting();\r\n    }\r\n\r\n    //set base uri in a particular contract\r\n    function setBaseURI(address contractAddr, string memory nftBaseURI) public isManagerOrOwner {\r\n        PoPPInterface poPP = PoPPInterface(contractAddr);\r\n        poPP.setBaseURI(nftBaseURI);\r\n    }\r\n\r\n    //set this contract as handlerAddress in a particular contract\r\n    function setHandler(address[] memory contractAddr, address handlerAddress) public isManagerOrOwner {\r\n        for(uint i = 0; i < contractAddr.length; i++) {\r\n            PoPPInterface poPP = PoPPInterface(contractAddr[i]);\r\n            poPP.setHandlerAddress(handlerAddress);\r\n        }\r\n    }\r\n\r\n    function deployPoPP(string memory name, string memory symbol,\r\n        string memory baseURI, string memory contractType, address ownerAddress, address contractAddr) public isManagerOrOwner {\r\n            PoPPFactoryInterface poPPFactory = PoPPFactoryInterface(contractAddr);\r\n            poPPFactory.createPoPP(name, symbol, baseURI, contractType, ownerAddress);\r\n    }\r\n\r\n\r\n    // check if address is allowed to mint from this contract\r\n    modifier isApprovedAddress() {\r\n        require(msg.sender==owner() || approvedAddresses[msg.sender]==true, \"Unauthorised\");\r\n        _;\r\n    } \r\n\r\n    // check if address is allowed to mint from this contract\r\n    modifier isManagerOrOwner() {\r\n        require(msg.sender==owner() || msg.sender==manager, \"Unauthorised\");\r\n        _;\r\n    }     \r\n\r\n}\r\n\r\ninterface PoPPInterface {\r\n  function mint(address receiver, uint256 tokenId) external;\r\n  function balanceOf(address user) external view returns (uint256);\r\n  function tokenOfOwnerByIndex(address user, uint256 index) external view returns (uint256);\r\n  function pauseMinting() external;\r\n  function unPauseMinting() external;\r\n  function setBaseURI(string memory nftBaseURI) external;\r\n  function setHandlerAddress(address addr) external;\r\n}\r\n\r\ninterface PoPPFactoryInterface {\r\n    function createPoPP(string memory name, string memory symbol,\r\n        string memory baseURI, string memory contractType, address ownerAddress) external;\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_managerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"approvedAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"approvedAddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"managerAddr\",\"type\":\"address\"}],\"name\":\"managerChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addApprovedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct LystoHandler.MintAndTransferInfo[]\",\"name\":\"info\",\"type\":\"tuple[]\"}],\"name\":\"bulkMintAndTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"}],\"name\":\"deployPoPP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getOwnedTokenDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct LystoHandler.TokenInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTokenIds\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct LystoHandler.TokenInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct LystoHandler.MintAndTransferInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"mintAndTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"}],\"name\":\"pauseMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeApprovedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"nftBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"contractAddr\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"}],\"name\":\"setHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"}],\"name\":\"unpauseMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LystoHandler", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000008312e4e8defd01366b0f841c51e812523f0fb63f", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://55c93e2ae4931ebc803fda61fd8d52d1bd7945d927342d9b24da8f0827425126"}