{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/escrow/StackEscrow.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\nimport \\\"./BaseEscrow.sol\\\";\\nimport \\\"./EscrowLib.sol\\\";\\n\\n// /// @title StackEscrow is derived from the BaseEscrow Contract\\n// /// @notice Major contract responsible for user to purchase or update StackOS's resources from Stack Token\\ncontract StackEscrow is BaseEscrow {\\n    /*\\n     * @dev - constructor (being called at contract deployment)\\n     * @param Address of stackToken deployed contract\\n     * @param Address of ResourceFeed deployed contract\\n     * @param Address of Staking deployed contract\\n     * @param Address of DnsClusterMetadataStore deployed contract\\n     * @param Factory Contract of DEX\\n     * @param Router Contract of DEX\\n     * @param DAO Address\\n     * @param Governance Address\\n     * @param WETH Contract Address\\n     * @param USDT Contract Address\\n     * @param Oracle Contract Address\\n     */\\n    constructor(\\n        address _stackToken,\\n        address _resourceFeed,\\n        address _staking,\\n        address _dnsStore,\\n        IUniswapV2Factory _factory,\\n        IUniswapV2Router02 _router,\\n        address _dao,\\n        address _gov,\\n        address _weth,\\n        address _usdt,\\n        address _oracle\\n    )\\n        public\\n        BaseEscrow(\\n            _stackToken,\\n            _resourceFeed,\\n            _staking,\\n            _dnsStore,\\n            _factory,\\n            _router,\\n            _dao,\\n            _gov,\\n            _weth,\\n            _usdt,\\n            _oracle\\n        )\\n    {\\n        stackToken = _stackToken;\\n    }\\n\\n    /*\\n     * @title Update the user's resources from STACK token\\n     * @param DNS Cluster\\n     * @param Resources being boight. A list of 8 item. List of available resources and their order -> resourceVar(id) (1-8)\\n     * @dev User should have the Amount of Stack Token in his wallet that will be used for the resources he/she is accesseing\\n     */\\n    function updateResourcesFromStack(\\n        bytes32 clusterDns,\\n        EscrowLib.ResourceUnits memory resourceUnits,\\n        uint256 depositAmount\\n    ) public {\\n        {\\n            EscrowLib.Deposit storage deposit = deposits[msg.sender][\\n                clusterDns\\n            ];\\n            if (deposit.lastTxTime > 0) {\\n                settleAccounts(msg.sender, clusterDns);\\n                reduceClusterCap(clusterDns, msg.sender);\\n            } else {\\n                require(depositAmount >= minPurchase);\\n            }\\n        }\\n\\n        _createDepositInternal(\\n            clusterDns,\\n            resourceUnits,\\n            depositAmount,\\n            msg.sender,\\n            true,\\n            false\\n        );\\n    }\\n\\n    /*\\n     * @title Cluster Owner send a rebate in stack tokens to developers\\n     * @param Amount of Stack\\n     * @param Address for whom the rebate is being done\\n     * @param ClusterDNS to whom the rebate will be credited\\n     * @param Specify if the funds are withdrawable\\n     */\\n\\n    function rebateAccount(\\n        uint256 amount,\\n        address account,\\n        bytes32 clusterDns,\\n        bool withdrawable\\n    ) public {\\n        address clusterOwner = IDnsClusterMetadataStore(dnsStore)\\n            .getClusterOwner(clusterDns);\\n        require(clusterOwner == msg.sender);\\n        _rechargeAccountInternal(\\n            amount,\\n            account,\\n            clusterDns,\\n            withdrawable,\\n            false\\n        );\\n    }\\n\\n    /*\\n     * @title Fetches the cummulative dripRate of Resources in STACK\\n     * @param Resources being boight. A list of 8 item. List of available resources and their order -> resourceVar(id) (1-8)\\n     * @return Total resources drip rate measured in STACK\\n     * @param Cluster DNS that will be checked for prices.\\n     */\\n    function getResourcesDripRateInSTACK(\\n        bytes32 clusterDns,\\n        EscrowLib.ResourceUnits memory resourceUnits\\n    ) public view returns (uint256) {\\n        uint256 amountInUSDT = getResourcesDripRateInUSDT(\\n            clusterDns,\\n            resourceUnits\\n        );\\n        uint256 amountInSTACK = usdtToSTACK(amountInUSDT);\\n        return amountInSTACK;\\n    }\\n\\n    /*\\n     * @title TopUp the user's Account with input Amount\\n     * @param Amount of Stack Token to TopUp the account with\\n     * @param Cluster DNS where the balance will be added to.\\n     */\\n    function rechargeAccount(uint256 amount, bytes32 clusterDns) public {\\n        _rechargeAccountInternal(amount, msg.sender, clusterDns, true, false);\\n    }\\n\\n    /*\\n     * @title Withdraw user total deposited Funds & settles his pending balances\\n     */\\n    function withdrawFunds(bytes32 clusterDns) public {\\n        _settleAndWithdraw(msg.sender, clusterDns, 0, true);\\n    }\\n\\n    /*\\n     * @title Set portion and token that will be recived when settelment happens that is not stack.\\n     * @param Address of Token user wants to receive.\\n     * @param Porton of token in relation to stack in %\\n     */\\n\\n    function setWithdrawTokenPortion(address token, uint256 percent) public {\\n        require(percent <= 10000);\\n        EscrowLib.WithdrawSetting storage withdrawsetup = withdrawSettings[\\n            msg.sender\\n        ];\\n        withdrawsetup.token = token;\\n        withdrawsetup.percent = percent;\\n    }\\n\\n    /*\\n     * @title Withdraw user deposited Funds partially\\n     * @param Amount of Stack Token user wants to withdraw\\n     * @param Cluster DNS where the withdraw should be done from\\n     */\\n    function withdrawFundsPartial(uint256 amount, bytes32 clusterDns) public {\\n        _settleAndWithdraw(msg.sender, clusterDns, amount, false);\\n    }\\n\\n    /*\\n     * @title Contrubute Stack tokens for issuing grants\\n     * @param Amount of Stack\\n     */\\n\\n    function communityDeposit(uint256 amount) public {\\n        _pullStackTokens(amount);\\n        communityDeposits = communityDeposits.add(amount);\\n    }\\n\\n    /*\\n     * @title Issuing a grant to a new account\\n     * @param address of grant reciever\\n     * @param Amount of Stack issued as grant\\n     * @param Resources being boight. A list of 8 item. List of available resources and their order -> resourceVar(id) (1-8)\\n     */\\n\\n    function issueGrantNewAccount(\\n        address developer,\\n        uint256 amount,\\n        bytes32 clusterDns,\\n        EscrowLib.ResourceUnits memory resourceUnits\\n    ) public onlyOwner {\\n        require(amount <= communityDeposits);\\n        EscrowLib.Deposit storage deposit = deposits[developer][clusterDns];\\n        require(deposit.lastTxTime == 0);\\n        require(deposit.totalDeposit == 0);\\n        require(amount > 0);\\n        communityDeposits = communityDeposits - amount;\\n        _createDepositInternal(\\n            clusterDns,\\n            resourceUnits,\\n            amount,\\n            developer,\\n            false,\\n            true\\n        );\\n    }\\n\\n    /*\\n     * @title Issue a grant to an existing account.\\n     * @param Address of grant reciever\\n     * @param Amount of Stack issued as grant\\n     * @param ClusterDNS\\n     */\\n\\n    function issueGrantRechargeAccount(\\n        address developer,\\n        uint256 amount,\\n        bytes32 clusterDns\\n    ) public onlyOwner {\\n        require(amount <= communityDeposits);\\n        communityDeposits = communityDeposits - amount;\\n        _rechargeAccountInternal(amount, developer, clusterDns, false, true);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/escrow/BaseEscrow.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./EscrowStorage.sol\\\";\\nimport \\\"../cluster-metadata/IDnsClusterMetadataStore.sol\\\";\\nimport \\\"../resource-feed/IResourceFeed.sol\\\";\\nimport \\\"./uniswap/IUniswapV2Pair.sol\\\";\\nimport \\\"./uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"./uniswap/IUniswapV2Factory.sol\\\";\\nimport \\\"../oracle/IPriceOracle.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./EscrowLib.sol\\\";\\n\\n/// @title BaseEscrow is parent contract of Stack Escrow\\n/// @notice Serves as base layer contract responsible for all major tasks\\ncontract BaseEscrow is Ownable, EscrowStorage {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    event WITHDRAW(\\n        address accountOwner,\\n        uint256 amountDeposited,\\n        uint256 amountWithdrawn,\\n        uint256 depositedAt\\n    );\\n\\n    event DEPOSIT(\\n        bytes32 clusterDns,\\n        address indexed owner,\\n        uint256 totalDeposit,\\n        uint256 lastTxTime,\\n        uint256 indexed dripRate\\n    );\\n\\n    /*\\n     * @dev - constructor (being called internally at Stack Escrow contract deployment)\\n     * @param Address of stackToken deployed contract\\n     * @param Address of ResourceFeed deployed contract\\n     * @param Address of Staking deployed contract\\n     * @param Address of DnsClusterMetadataStore deployed contract\\n     * @param Factory Contract of DEX\\n     * @param Router Contract of DEX\\n     * @param Dao address\\n     * @param Gov address\\n     * @param WETH Contract Address\\n     * @param USDT Contract Address\\n     * @param Oracle Contract Address\\n     */\\n    constructor(\\n        address _stackToken,\\n        address _resourceFeed,\\n        address _staking,\\n        address _dnsStore,\\n        IUniswapV2Factory _factory,\\n        IUniswapV2Router02 _router,\\n        address _dao,\\n        address _gov,\\n        address _weth,\\n        address _usdt,\\n        address _oracle\\n    ) public {\\n        stackToken = _stackToken;\\n        resourceFeed = _resourceFeed;\\n        staking = _staking;\\n        dnsStore = _dnsStore;\\n        factory = _factory;\\n        router = _router;\\n        weth = _weth;\\n        dao = _dao;\\n        gov = _gov;\\n        usdt = _usdt;\\n        oracle = _oracle;\\n    }\\n\\n    /*\\n     * @title Update the Platform Variable Fees. These fees are in percentages.\\n     * @param Updated Platform Governance Fee\\n     * @param Updated Platform DAO Fee\\n     * @dev Could only be invoked by the contract owner\\n     */\\n    function setVariableFees(uint16 _govFee, uint16 _daoFee) public onlyOwner {\\n        govFee = _govFee;\\n        daoFee = _daoFee;\\n    }\\n\\n    /*\\n     * @title Update the Platform fee receiver address\\n     * @param DAO address\\n     * @param Governance address\\n     * @param Oracle address\\n     * @param Resource Feed address\\n     * @param Staking address\\n     * @param Dns Store address\\n     * @dev Could only be invoked by the contract owner\\n     */\\n\\n    function setAddressSettings(\\n        address _daoAddress,\\n        address _govAddress,\\n        address _oracle,\\n        address _resourceFeed,\\n        address _staking,\\n        address _dnsStore\\n    ) public onlyOwner {\\n        dao = _daoAddress;\\n        gov = _govAddress;\\n        oracle = _oracle;\\n        resourceFeed = _resourceFeed;\\n        staking = _staking;\\n        dnsStore = _dnsStore;\\n    }\\n\\n    /*\\n     * @title Update the Platform Minimum\\n     * @param Minimum resource purchaise amount.\\n     * @dev Could only be invoked by the contract owner\\n     */\\n\\n    function setMinPurchase(uint256 minStackAmount) public onlyOwner {\\n        minPurchase = minStackAmount;\\n    }\\n\\n    /*\\n     * @title Update the Platform Minimum\\n     * @param Minimum resource purchaise amount.\\n     * @dev Could only be invoked by the contract owner\\n     */\\n\\n    function getDeposits(address depositer, bytes32 clusterDns)\\n        external\\n        view\\n        returns (EscrowLib.Deposit memory)\\n    {\\n        return deposits[depositer][clusterDns];\\n    }\\n\\n    function getResouceVar(uint8 _id) external view returns (string memory) {\\n        return resourceVar[_id];\\n    }\\n\\n    /*\\n     * @title Withdraw a depositer funds\\n     * @param Depositer Address\\n     * @param ClusterDNS that is being settled\\n     * @dev Could only be invoked by the contract owner\\n     */\\n    function withdrawFundsAdmin(address depositer, bytes32 clusterDns)\\n        public\\n        onlyOwner\\n    {\\n        _settleAndWithdraw(depositer, clusterDns, 0, true);\\n    }\\n\\n    /*\\n     * @title Emergency refund\\n     * @param Depositer Address\\n     * @param ClusterDNS that is being settled\\n     * @dev Could only be invoked by the cluster owner\\n     */\\n    function EmergencyRefundByClusterOwner(\\n        address depositer,\\n        bytes32 clusterDns\\n    ) public {\\n        (address clusterOwner, , , , , , , , , ) = IDnsClusterMetadataStore(\\n            dnsStore\\n        ).dnsToClusterMetadata(clusterDns);\\n        require(clusterOwner == msg.sender);\\n        EscrowLib.Deposit storage deposit = deposits[depositer][clusterDns];\\n        uint256 depositAmount = deposit.totalDeposit;\\n        require(depositAmount > 0);\\n        reduceClusterCap(clusterDns, depositer);\\n        delete deposits[depositer][clusterDns];\\n        IERC20(stackToken).transfer(depositer, depositAmount);\\n    }\\n\\n    /*\\n     * @title Settle Depositer Account\\n     * @param Depositer Address\\n     * @param ClusterDNS that is being settled\\n     */\\n\\n    function settleAccounts(address depositer, bytes32 clusterDns) public {\\n        uint256 utilisedFunds;\\n        EscrowLib.Deposit storage deposit = deposits[depositer][clusterDns];\\n        uint256 elapsedTime = block.timestamp.sub(deposit.lastTxTime);\\n        deposit.lastTxTime = block.timestamp;\\n\\n        (\\n            address clusterOwner,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            uint256 qualityFactor,\\n            ,\\n            ,\\n\\n        ) = IDnsClusterMetadataStore(dnsStore).dnsToClusterMetadata(clusterDns);\\n        uint256 MaxPossibleElapsedTime;\\n        if (\\n            IPriceOracle(oracle).usdtToSTACKOracle(\\n                deposit.totalDripRatePerSecond\\n            ) == 0\\n        ) MaxPossibleElapsedTime = ~uint256(0);\\n        else\\n            MaxPossibleElapsedTime = deposit.totalDeposit.div(\\n                IPriceOracle(oracle).usdtToSTACKOracle(\\n                    deposit.totalDripRatePerSecond\\n                )\\n            );\\n\\n        if (elapsedTime > MaxPossibleElapsedTime) {\\n            elapsedTime = MaxPossibleElapsedTime;\\n            utilisedFunds = deposit.totalDeposit;\\n        } else {\\n            utilisedFunds = elapsedTime.mul(deposit.totalDripRatePerSecond);\\n            utilisedFunds = IPriceOracle(oracle).usdtToSTACKOracle(\\n                utilisedFunds\\n            );\\n        }\\n\\n        // Add fees to utilised funds.\\n        uint256 VarDaoGovFee = _AddFeesAndDeduct(utilisedFunds);\\n\\n        utilisedFunds = utilisedFunds.add(VarDaoGovFee);\\n        if (\\n            deposit.notWithdrawable > 0 &&\\n            deposit.notWithdrawable >= utilisedFunds\\n        ) deposit.notWithdrawable = deposit.notWithdrawable.sub(utilisedFunds);\\n        if (deposit.notWithdrawable <= utilisedFunds)\\n            deposit.notWithdrawable = 0;\\n        if (utilisedFunds >= deposit.totalDeposit) {\\n            utilisedFunds = deposit.totalDeposit.sub(VarDaoGovFee);\\n            reduceClusterCap(clusterDns, depositer);\\n            delete deposits[depositer][clusterDns];\\n            removeClusterAddresConnection(\\n                clusterDns,\\n                findAddressIndex(clusterDns, depositer)\\n            );\\n        } else {\\n            deposit.totalDeposit = deposit.totalDeposit.sub(utilisedFunds);\\n            utilisedFunds = utilisedFunds.sub(VarDaoGovFee);\\n        }\\n\\n        _withdraw(utilisedFunds, 0, depositer, clusterOwner, qualityFactor);\\n    }\\n\\n    function reduceClusterCap(bytes32 clusterDns, address depositer) internal {\\n        if (resourceCapacityState[clusterDns].resourceOne > 0)\\n            resourceCapacityState[clusterDns]\\n                .resourceOne = resourceCapacityState[clusterDns]\\n                .resourceOne\\n                .sub(deposits[depositer][clusterDns].resourceOneUnits);\\n        if (resourceCapacityState[clusterDns].resourceTwo > 0)\\n            resourceCapacityState[clusterDns]\\n                .resourceTwo = resourceCapacityState[clusterDns]\\n                .resourceTwo\\n                .sub(deposits[depositer][clusterDns].resourceTwoUnits);\\n        if (resourceCapacityState[clusterDns].resourceThree > 0)\\n            resourceCapacityState[clusterDns]\\n                .resourceThree = resourceCapacityState[clusterDns]\\n                .resourceThree\\n                .sub(deposits[depositer][clusterDns].resourceThreeUnits);\\n        if (resourceCapacityState[clusterDns].resourceFour > 0)\\n            resourceCapacityState[clusterDns]\\n                .resourceFour = resourceCapacityState[clusterDns]\\n                .resourceFour\\n                .sub(deposits[depositer][clusterDns].resourceFourUnits);\\n        if (resourceCapacityState[clusterDns].resourceFive > 0)\\n            resourceCapacityState[clusterDns]\\n                .resourceFive = resourceCapacityState[clusterDns]\\n                .resourceFive\\n                .sub(deposits[depositer][clusterDns].resourceFiveUnits);\\n        if (resourceCapacityState[clusterDns].resourceSix > 0)\\n            resourceCapacityState[clusterDns]\\n                .resourceSix = resourceCapacityState[clusterDns]\\n                .resourceSix\\n                .sub(deposits[depositer][clusterDns].resourceSixUnits);\\n        if (resourceCapacityState[clusterDns].resourceSeven > 0)\\n            resourceCapacityState[clusterDns]\\n                .resourceSeven = resourceCapacityState[clusterDns]\\n                .resourceSeven\\n                .sub(deposits[depositer][clusterDns].resourceSevenUnits);\\n        if (resourceCapacityState[clusterDns].resourceEight > 0)\\n            resourceCapacityState[clusterDns]\\n                .resourceEight = resourceCapacityState[clusterDns]\\n                .resourceEight\\n                .sub(deposits[depositer][clusterDns].resourceEightUnits);\\n    }\\n\\n    /*\\n     * @title Deduct Variable Fees\\n     * @param Utilised funds in stack\\n     * @param Time since the last deposit or settelment\\n     * @param Resource Units.\\n     * @dev Part of the settelmet functions\\n     */\\n\\n    function _AddFeesAndDeduct(uint256 utilisedFunds)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 variableDaoFee = utilisedFunds.mul(daoFee).div(10000);\\n        uint256 variableGovFee = utilisedFunds.mul(govFee).div(10000);\\n\\n        if (variableDaoFee > 0)\\n            IERC20(stackToken).transfer(dao, variableDaoFee);\\n        if (variableGovFee > 0)\\n            IERC20(stackToken).transfer(gov, variableGovFee);\\n        return variableDaoFee.add(variableGovFee);\\n    }\\n\\n    /*\\n     * @title Deposit Stack to start using the cluster\\n     * @param Cluster DNS\\n     * @param ResourcesFees. A list of 8 item that includes fee per resource. Available resources and their order -> resourceVar(id) (1-8)\\n     * @param Amount of Stack to Deposit to use these recources.\\n     * @param The address of resource buyer.\\n     * @param is it withdrawable\\n     * @param Is it a grant\\n     * @dev Part of the settelmet functions\\n     */\\n\\n    function _createDepositInternal(\\n        bytes32 clusterDns,\\n        EscrowLib.ResourceUnits memory resourceUnits,\\n        uint256 depositAmount,\\n        address depositer,\\n        bool withdrawable,\\n        bool grant\\n    ) internal {\\n        (, , , , , , , bool active, , ) = IDnsClusterMetadataStore(dnsStore)\\n            .dnsToClusterMetadata(clusterDns);\\n        require(active == true);\\n\\n        EscrowLib.Deposit storage deposit = deposits[depositer][clusterDns];\\n\\n        _capacityCheck(clusterDns, resourceUnits);\\n\\n        deposit.lastTxTime = block.timestamp;\\n        deposit.resourceOneUnits = resourceUnits.resourceOne; //CPU\\n        deposit.resourceTwoUnits = resourceUnits.resourceTwo; // diskSpaceUnits\\n        deposit.resourceThreeUnits = resourceUnits.resourceThree; // bandwidthUnits\\n        deposit.resourceFourUnits = resourceUnits.resourceFour; // memoryUnits\\n        deposit.resourceFiveUnits = resourceUnits.resourceFive;\\n        deposit.resourceSixUnits = resourceUnits.resourceSix;\\n        deposit.resourceSevenUnits = resourceUnits.resourceSeven;\\n        deposit.resourceEightUnits = resourceUnits.resourceEight;\\n\\n        deposit.totalDripRatePerSecond = getResourcesDripRateInUSDT(\\n            clusterDns,\\n            resourceUnits\\n        );\\n\\n        addClusterAddresConnection(clusterDns, depositer);\\n        if (grant == false) _pullStackTokens(depositAmount);\\n        if (withdrawable == false) {\\n            deposit.notWithdrawable = depositAmount;\\n        }\\n        deposit.totalDeposit = deposit.totalDeposit.add(depositAmount);\\n    }\\n\\n    function _capacityCheck(\\n        bytes32 clusterDns,\\n        EscrowLib.ResourceUnits memory resourceUnits\\n    ) internal {\\n        resourceCapacityState[clusterDns].resourceOne = resourceCapacityState[\\n            clusterDns\\n        ].resourceOne.add(resourceUnits.resourceOne);\\n        resourceCapacityState[clusterDns].resourceTwo = resourceCapacityState[\\n            clusterDns\\n        ].resourceTwo.add(resourceUnits.resourceTwo);\\n        resourceCapacityState[clusterDns].resourceThree = resourceCapacityState[\\n            clusterDns\\n        ].resourceThree.add(resourceUnits.resourceThree);\\n        resourceCapacityState[clusterDns].resourceFour = resourceCapacityState[\\n            clusterDns\\n        ].resourceFour.add(resourceUnits.resourceFour);\\n        resourceCapacityState[clusterDns].resourceFive = resourceCapacityState[\\n            clusterDns\\n        ].resourceFive.add(resourceUnits.resourceFive);\\n        resourceCapacityState[clusterDns].resourceSix = resourceCapacityState[\\n            clusterDns\\n        ].resourceSix.add(resourceUnits.resourceSix);\\n        resourceCapacityState[clusterDns].resourceSeven = resourceCapacityState[\\n            clusterDns\\n        ].resourceSeven.add(resourceUnits.resourceSeven);\\n        resourceCapacityState[clusterDns].resourceEight = resourceCapacityState[\\n            clusterDns\\n        ].resourceEight.add(resourceUnits.resourceEight);\\n\\n        bool OverLimit = false;\\n        if (\\n            resourceUnits.resourceOne > 1 &&\\n            resourceUnits.resourceOne >\\n            IResourceFeed(resourceFeed)\\n                .getResourceMaxCapacity(clusterDns)\\n                .resourceOne\\n        ) OverLimit = true;\\n        if (\\n            resourceUnits.resourceTwo > 1 &&\\n            resourceUnits.resourceTwo >\\n            IResourceFeed(resourceFeed)\\n                .getResourceMaxCapacity(clusterDns)\\n                .resourceTwo\\n        ) OverLimit = true;\\n        if (\\n            resourceUnits.resourceThree > 1 &&\\n            resourceUnits.resourceThree >\\n            IResourceFeed(resourceFeed)\\n                .getResourceMaxCapacity(clusterDns)\\n                .resourceThree\\n        ) OverLimit = true;\\n        if (\\n            resourceUnits.resourceFour > 1 &&\\n            resourceUnits.resourceFour >\\n            IResourceFeed(resourceFeed)\\n                .getResourceMaxCapacity(clusterDns)\\n                .resourceFour\\n        ) OverLimit = true;\\n        if (\\n            resourceUnits.resourceFive > 1 &&\\n            resourceUnits.resourceFive >\\n            IResourceFeed(resourceFeed)\\n                .getResourceMaxCapacity(clusterDns)\\n                .resourceFive\\n        ) OverLimit = true;\\n        if (\\n            resourceUnits.resourceSix > 1 &&\\n            resourceUnits.resourceSix >\\n            IResourceFeed(resourceFeed)\\n                .getResourceMaxCapacity(clusterDns)\\n                .resourceSix\\n        ) OverLimit = true;\\n        if (\\n            resourceUnits.resourceSeven > 1 &&\\n            resourceUnits.resourceSeven >\\n            IResourceFeed(resourceFeed)\\n                .getResourceMaxCapacity(clusterDns)\\n                .resourceSeven\\n        ) OverLimit = true;\\n        if (\\n            resourceUnits.resourceEight > 1 &&\\n            resourceUnits.resourceEight >\\n            IResourceFeed(resourceFeed)\\n                .getResourceMaxCapacity(clusterDns)\\n                .resourceEight\\n        ) OverLimit = true;\\n        require(OverLimit == false);\\n    }\\n\\n    function _rechargeAccountInternal(\\n        uint256 amount,\\n        address depositer,\\n        bytes32 clusterDns,\\n        bool withdrawable,\\n        bool grant\\n    ) internal {\\n        EscrowLib.Deposit storage deposit = deposits[depositer][clusterDns];\\n        deposit.totalDeposit = deposit.totalDeposit.add(amount);\\n        // If fund's given though grant, make them not withdrawable.\\n        if (withdrawable == false) {\\n            deposit.notWithdrawable = deposit.notWithdrawable.add(amount);\\n        }\\n        if (grant == false) _pullStackTokens(amount);\\n    }\\n\\n    function _settleAndWithdraw(\\n        address depositer,\\n        bytes32 clusterDns,\\n        uint256 amount,\\n        bool everything\\n    ) internal {\\n        uint256 withdrawAmount;\\n        settleAccounts(depositer, clusterDns);\\n        EscrowLib.Deposit storage deposit = deposits[depositer][clusterDns];\\n        require(deposit.totalDeposit.sub(deposit.notWithdrawable) > amount);\\n        (\\n            address clusterOwner,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            uint256 qualityFactor,\\n            ,\\n            ,\\n\\n        ) = IDnsClusterMetadataStore(dnsStore).dnsToClusterMetadata(clusterDns);\\n        if (everything == false) {\\n            require(amount < deposit.totalDeposit);\\n            deposit.totalDeposit = deposit.totalDeposit.sub(amount);\\n            withdrawAmount = amount;\\n        } else {\\n            withdrawAmount = deposit.totalDeposit.sub(deposit.notWithdrawable);\\n\\n            if (deposit.notWithdrawable == 0) {\\n                delete deposits[depositer][clusterDns];\\n                removeClusterAddresConnection(\\n                    clusterDns,\\n                    findAddressIndex(clusterDns, depositer)\\n                );\\n            } else {\\n                deposit.totalDeposit = deposit.totalDeposit.sub(withdrawAmount);\\n            }\\n        }\\n\\n        _withdraw(0, withdrawAmount, depositer, clusterOwner, qualityFactor);\\n    }\\n\\n    /*\\n     * @title Settle multiple accounts in one transaction\\n     * @param Cluster DNS\\n     * @param amount of accounts to settle.\\n     */\\n\\n    function settleMultipleAccounts(bytes32 clusterDns, uint256 nrOfAccounts)\\n        public\\n    {\\n        for (uint256 i = nrOfAccounts; i > 0; i--) {\\n            settleAccounts(clusterUsers[clusterDns][i - 1], clusterDns);\\n        }\\n    }\\n\\n    /*\\n     * @title Find the index for ClusterDNS => Address link\\n     * @param Cluster DNS\\n     * @param Depositer Address\\n     * @dev Part of the settelmet function\\n     */\\n\\n    function findAddressIndex(bytes32 clusterDns, address _address)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        for (uint256 i; i < clusterUsers[clusterDns].length; i++) {\\n            if (clusterUsers[clusterDns][i] == _address) {\\n                return i;\\n            }\\n        }\\n    }\\n\\n    /*\\n     * @title Remove link between ClusterDNS => Address\\n     * @param Cluster DNS\\n     * @param List index\\n     * @dev Part of the settelmet function\\n     */\\n\\n    function removeClusterAddresConnection(bytes32 clusterDns, uint256 index)\\n        internal\\n    {\\n        for (uint256 a = index; a < clusterUsers[clusterDns].length - 1; a++) {\\n            clusterUsers[clusterDns][a] = clusterUsers[clusterDns][a + 1];\\n        }\\n        clusterUsers[clusterDns].pop();\\n    }\\n\\n    /*\\n     * @title Create link between ClusterDNS => Address\\n     * @param Cluster DNS\\n     * @param Deployer wallet address\\n     * @dev Part of deposit function\\n     */\\n\\n    function addClusterAddresConnection(bytes32 clusterDns, address _address)\\n        internal\\n    {\\n        clusterUsers[clusterDns].push(_address);\\n    }\\n\\n    /*\\n     * @title Create link between ClusterDNS => Address\\n     * @param Cluster DNS\\n     * @param Deployer wallet address\\n     * @dev Part of deposit function\\n     */\\n\\n    function _calcResourceUnitsDripRateUSDT(\\n        bytes32 clusterDns,\\n        string memory resourceName,\\n        uint256 resourceUnits\\n    ) internal view returns (uint256) {\\n        uint256 dripRatePerUnit = IResourceFeed(resourceFeed)\\n            .getResourceDripRateUSDT(clusterDns, resourceName);\\n        return dripRatePerUnit.mul(resourceUnits);\\n    }\\n\\n    function _calcResourceUnitsDripRateSTACK(\\n        bytes32 clusterDns,\\n        string memory resourceName,\\n        uint256 resourceUnits\\n    ) internal view returns (uint256) {\\n        uint256 dripRatePerUnit = IResourceFeed(resourceFeed)\\n            .getResourceDripRateUSDT(clusterDns, resourceName);\\n        return usdtToSTACK(dripRatePerUnit.mul(resourceUnits));\\n    }\\n\\n    function _pullStackTokens(uint256 amount) internal {\\n        IERC20(stackToken).transferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function _getQuote(\\n        uint256 _amountIn,\\n        address _fromTokenAddress,\\n        address _toTokenAddress\\n    ) internal view returns (uint256 amountOut) {\\n        address pair = IUniswapV2Factory(factory).getPair(\\n            _fromTokenAddress,\\n            _toTokenAddress\\n        );\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pair)\\n            .getReserves();\\n        address token0 = IUniswapV2Pair(pair).token0();\\n        (uint256 reserveIn, uint256 reserveOut) = token0 == _fromTokenAddress\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n        uint256 amountInWithFee = _amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator.div(denominator);\\n    }\\n\\n    function stackToUSDT(uint256 _stackAmount)\\n        public\\n        view\\n        returns (uint256 USDVALUE)\\n    {\\n        uint256 ETHVALUE = _getQuote(_stackAmount, stackToken, weth);\\n        USDVALUE = _getQuote(ETHVALUE, weth, usdt);\\n    }\\n\\n    function usdtToSTACK(uint256 _usdtAmount)\\n        public\\n        view\\n        returns (uint256 STACKVALUE)\\n    {\\n        uint256 ETHVALUE = _getQuote(_usdtAmount, usdt, weth);\\n        STACKVALUE = _getQuote(ETHVALUE, weth, stackToken);\\n    }\\n\\n    function stackToTokenRate(address _token, uint256 _stackAmount)\\n        public\\n        view\\n        returns (uint256 TOKENVALUE)\\n    {\\n        uint256 ETHVALUE = _getQuote(_stackAmount, stackToken, weth);\\n        TOKENVALUE = _getQuote(ETHVALUE, weth, _token);\\n    }\\n\\n    function _withdraw(\\n        uint256 utilisedFunds,\\n        uint256 withdrawAmount,\\n        address depositer,\\n        address clusterOwner,\\n        uint256 qualityFactor\\n    ) internal {\\n        // Check the quality Facror and reduce a portion of payout if necessery.\\n        uint256 utilisedFundsAfterQualityCheck = qualityFactor\\n            .mul(10**18)\\n            .mul(utilisedFunds)\\n            .div(100)\\n            .div(10**18);\\n\\n        if (utilisedFundsAfterQualityCheck > 0) {\\n            EscrowLib.WithdrawSetting storage withdrawsetup = withdrawSettings[\\n                clusterOwner\\n            ];\\n            if (withdrawsetup.percent > 0) {\\n                uint256 stacktoToken = utilisedFundsAfterQualityCheck\\n                    .mul(withdrawsetup.percent)\\n                    .div(10000);\\n                uint256 stackWithdraw = utilisedFundsAfterQualityCheck.sub(\\n                    stacktoToken\\n                );\\n\\n                IERC20(stackToken).approve(\\n                    address(router),\\n                    999999999999999999999999999999\\n                );\\n                _swapTokens(\\n                    stackToken,\\n                    withdrawsetup.token,\\n                    stacktoToken,\\n                    stackToTokenRate(withdrawsetup.token, stacktoToken),\\n                    clusterOwner\\n                );\\n                IERC20(stackToken).transfer(clusterOwner, stackWithdraw);\\n            } else {\\n                IERC20(stackToken).transfer(\\n                    clusterOwner,\\n                    utilisedFundsAfterQualityCheck\\n                );\\n            }\\n\\n            uint256 penalty = utilisedFunds.sub(utilisedFundsAfterQualityCheck);\\n            if (penalty > 0) {\\n                IERC20(stackToken).transfer(dao, penalty);\\n            }\\n        }\\n\\n        if (withdrawAmount > 0) {\\n            IERC20(stackToken).transfer(depositer, withdrawAmount);\\n        }\\n    }\\n\\n    function _swapTokens(\\n        address _FromTokenContractAddress,\\n        address _ToTokenContractAddress,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address forWallet\\n    ) internal returns (uint256 tokenBought) {\\n        address[] memory path = new address[](3);\\n        path[0] = _FromTokenContractAddress;\\n        path[1] = weth;\\n        path[2] = _ToTokenContractAddress;\\n\\n        tokenBought = IUniswapV2Router02(router).swapExactTokensForTokens(\\n            amountOut,\\n            amountInMax,\\n            path,\\n            forWallet,\\n            block.timestamp + 1200\\n        )[path.length - 1];\\n    }\\n\\n    /*\\n     * @title Define Recource Strings\\n     * @param Resource ID from 1 to 8\\n     * @param Name of the resource.\\n     */\\n\\n    function defineResourceVar(uint8 resouceNr, string memory resourceName)\\n        public\\n        onlyOwner\\n    {\\n        require(resouceNr <= 8 && resouceNr != 0);\\n        resourceVar[resouceNr] = resourceName;\\n    }\\n\\n    /*\\n     * @title Fetches the cummulative dripRate of Resources\\n     * @param ResourcesFees. A list of 8 item that includes fee per resource. Available resources and their order -> resourceVar(id) (1-8)\\n     * @return Total resources drip rate measured in USDT\\n     */\\n    function getResourcesDripRateInUSDT(\\n        bytes32 clusterDns,\\n        EscrowLib.ResourceUnits memory resourceUnits\\n    ) public view returns (uint256) {\\n        uint256 amountInUSDT = _calcResourceUnitsDripRateUSDT(\\n            clusterDns,\\n            resourceVar[1],\\n            resourceUnits.resourceOne\\n        ) +\\n            _calcResourceUnitsDripRateUSDT(\\n                clusterDns,\\n                resourceVar[2],\\n                resourceUnits.resourceTwo\\n            ) +\\n            _calcResourceUnitsDripRateUSDT(\\n                clusterDns,\\n                resourceVar[3],\\n                resourceUnits.resourceThree\\n            ) +\\n            _calcResourceUnitsDripRateUSDT(\\n                clusterDns,\\n                resourceVar[4],\\n                resourceUnits.resourceFour\\n            ) +\\n            _calcResourceUnitsDripRateUSDT(\\n                clusterDns,\\n                resourceVar[5],\\n                resourceUnits.resourceFive\\n            ) +\\n            _calcResourceUnitsDripRateUSDT(\\n                clusterDns,\\n                resourceVar[6],\\n                resourceUnits.resourceSix\\n            ) +\\n            _calcResourceUnitsDripRateUSDT(\\n                clusterDns,\\n                resourceVar[7],\\n                resourceUnits.resourceSeven\\n            ) +\\n            _calcResourceUnitsDripRateUSDT(\\n                clusterDns,\\n                resourceVar[8],\\n                resourceUnits.resourceEight\\n            );\\n        return amountInUSDT;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/escrow/EscrowLib.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nlibrary EscrowLib {\\n    struct Deposit {\\n        uint256 resourceOneUnits; // cpuCoresUnits\\n        uint256 resourceTwoUnits; // diskSpaceUnits\\n        uint256 resourceThreeUnits; // bandwidthUnits\\n        uint256 resourceFourUnits; // memoryUnits\\n        uint256 resourceFiveUnits;\\n        uint256 resourceSixUnits;\\n        uint256 resourceSevenUnits;\\n        uint256 resourceEightUnits;\\n        uint256 totalDeposit;\\n        uint256 lastTxTime;\\n        uint256 totalDripRatePerSecond;\\n        uint256 notWithdrawable;\\n    }\\n\\n    // Address of Token contract.\\n    // What percentage is exchanged to this token on withdrawl.\\n    struct WithdrawSetting {\\n        address token;\\n        uint256 percent;\\n    }\\n\\n    struct ResourceUnits {\\n        uint256 resourceOne; // cpuCoresUnits\\n        uint256 resourceTwo; // diskSpaceUnits\\n        uint256 resourceThree; // bandwidthUnits\\n        uint256 resourceFour; // memoryUnits\\n        uint256 resourceFive;\\n        uint256 resourceSix;\\n        uint256 resourceSeven;\\n        uint256 resourceEight;\\n    }\\n\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/escrow/EscrowStorage.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\nimport \\\"./uniswap/IUniswapV2Factory.sol\\\";\\nimport \\\"./uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"./EscrowLib.sol\\\";\\n\\ncontract EscrowStorage {\\n    address internal stackToken;\\n    address internal resourceFeed;\\n    address internal staking;\\n    address internal dao;\\n    address internal gov;\\n    uint16 public govFee;\\n    uint16 public daoFee;\\n    uint256 public communityDeposits;\\n    address internal dnsStore;\\n    IUniswapV2Factory internal factory;\\n    IUniswapV2Router02 internal router;\\n    address internal weth;\\n    address internal usdt;\\n    address internal oracle;\\n    uint256 internal minPurchase;\\n\\n    mapping(uint8 => string) internal resourceVar;\\n    mapping(address => EscrowLib.WithdrawSetting) internal withdrawSettings;\\n    mapping(address => mapping(bytes32 => EscrowLib.Deposit)) internal deposits;\\n    mapping(bytes32 => EscrowLib.ResourceUnits) public resourceCapacityState;\\n    mapping(bytes32 => address[]) public clusterUsers;\\n}\\n\"\r\n    },\r\n    \"contracts/cluster-metadata/IDnsClusterMetadataStore.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IDnsClusterMetadataStore {\\n    function dnsToClusterMetadata(bytes32)\\n        external\\n        returns (\\n            address,\\n            string memory,\\n            string memory,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256,\\n            bool,\\n            string memory,\\n            bool\\n        );\\n\\n    function addDnsToClusterEntry(\\n        bytes32 _dns,\\n        address _clusterOwner,\\n        string memory ipAddress,\\n        string memory _whitelistedIps,\\n        string memory _clusterType,\\n        bool _isPrivate\\n    ) external;\\n\\n    function removeDnsToClusterEntry(bytes32 _dns) external;\\n\\n    function upvoteCluster(bytes32 _dns) external;\\n\\n    function downvoteCluster(bytes32 _dns) external;\\n\\n    function markClusterAsDefaulter(bytes32 _dns) external;\\n\\n    function getClusterOwner(bytes32 clusterDns) external returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/resource-feed/IResourceFeed.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\nimport \\\"../escrow/EscrowLib.sol\\\";\\n\\ninterface IResourceFeed {\\n\\n    function getResourceDripRateUSDT(bytes32 clusterDns, string calldata name)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getResourceVotingWeight(bytes32 clusterDns, string calldata name)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getResourceMaxCapacity(bytes32 clusterDns)\\n        external\\n        returns (EscrowLib.ResourceUnits memory);\\n}\\n\"\r\n    },\r\n    \"contracts/escrow/uniswap/IUniswapV2Pair.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: \\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\"\r\n    },\r\n    \"contracts/escrow/uniswap/IUniswapV2Router02.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: \\npragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\"\r\n    },\r\n    \"contracts/escrow/uniswap/IUniswapV2Factory.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier:\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/IPriceOracle.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\ninterface IPriceOracle {\\n    function update() external;\\n\\n    function usdtToSTACKOracle(uint256 amountIn)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/escrow/uniswap/IUniswapV2Router01.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: \\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stackToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_resourceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dnsStore\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"clusterDns\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastTxTime\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dripRate\",\"type\":\"uint256\"}],\"name\":\"DEPOSIT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accountOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountDeposited\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositedAt\",\"type\":\"uint256\"}],\"name\":\"WITHDRAW\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"clusterDns\",\"type\":\"bytes32\"}],\"name\":\"EmergencyRefundByClusterOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"clusterUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"communityDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"resouceNr\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"resourceName\",\"type\":\"string\"}],\"name\":\"defineResourceVar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"clusterDns\",\"type\":\"bytes32\"}],\"name\":\"getDeposits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"resourceOneUnits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceTwoUnits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceThreeUnits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceFourUnits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceFiveUnits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceSixUnits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceSevenUnits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceEightUnits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTxTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDripRatePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"notWithdrawable\",\"type\":\"uint256\"}],\"internalType\":\"struct EscrowLib.Deposit\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_id\",\"type\":\"uint8\"}],\"name\":\"getResouceVar\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"clusterDns\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"resourceOne\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceTwo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceThree\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceFour\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceFive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceSix\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceSeven\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceEight\",\"type\":\"uint256\"}],\"internalType\":\"struct EscrowLib.ResourceUnits\",\"name\":\"resourceUnits\",\"type\":\"tuple\"}],\"name\":\"getResourcesDripRateInSTACK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"clusterDns\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"resourceOne\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceTwo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceThree\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceFour\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceFive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceSix\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceSeven\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceEight\",\"type\":\"uint256\"}],\"internalType\":\"struct EscrowLib.ResourceUnits\",\"name\":\"resourceUnits\",\"type\":\"tuple\"}],\"name\":\"getResourcesDripRateInUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"developer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"clusterDns\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"resourceOne\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceTwo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceThree\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceFour\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceFive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceSix\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceSeven\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceEight\",\"type\":\"uint256\"}],\"internalType\":\"struct EscrowLib.ResourceUnits\",\"name\":\"resourceUnits\",\"type\":\"tuple\"}],\"name\":\"issueGrantNewAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"developer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"clusterDns\",\"type\":\"bytes32\"}],\"name\":\"issueGrantRechargeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"clusterDns\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"withdrawable\",\"type\":\"bool\"}],\"name\":\"rebateAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"clusterDns\",\"type\":\"bytes32\"}],\"name\":\"rechargeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"resourceCapacityState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"resourceOne\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceTwo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceThree\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceFour\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceFive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceSix\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceSeven\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceEight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_daoAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_govAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_resourceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dnsStore\",\"type\":\"address\"}],\"name\":\"setAddressSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minStackAmount\",\"type\":\"uint256\"}],\"name\":\"setMinPurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_govFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_daoFee\",\"type\":\"uint16\"}],\"name\":\"setVariableFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setWithdrawTokenPortion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"clusterDns\",\"type\":\"bytes32\"}],\"name\":\"settleAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"clusterDns\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nrOfAccounts\",\"type\":\"uint256\"}],\"name\":\"settleMultipleAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stackAmount\",\"type\":\"uint256\"}],\"name\":\"stackToTokenRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"TOKENVALUE\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stackAmount\",\"type\":\"uint256\"}],\"name\":\"stackToUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"USDVALUE\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"clusterDns\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"resourceOne\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceTwo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceThree\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceFour\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceFive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceSix\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceSeven\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resourceEight\",\"type\":\"uint256\"}],\"internalType\":\"struct EscrowLib.ResourceUnits\",\"name\":\"resourceUnits\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"updateResourcesFromStack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdtAmount\",\"type\":\"uint256\"}],\"name\":\"usdtToSTACK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"STACKVALUE\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"clusterDns\",\"type\":\"bytes32\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"clusterDns\",\"type\":\"bytes32\"}],\"name\":\"withdrawFundsAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"clusterDns\",\"type\":\"bytes32\"}],\"name\":\"withdrawFundsPartial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StackEscrow", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000003a72f94ebdc8f3846ee7c657dbf8fb2391056e5a000000000000000000000000cb7f0b25c80098b37a186f1c8ba3a2c6a5ff7387000000000000000000000000fe19d03df05b5a6d9eb608396e96237c78920d6c000000000000000000000000b031ba16cf571e6340c6082ceec49014e4e4265f0000000000000000000000005757371414417b8c6caad45baef941abc7d3ab32000000000000000000000000a5e0829caced8ffdd4de3c43696c57f7d7a678ff000000000000000000000000e22195fcf831427912bb6681dbbd5b050814e154000000000000000000000000e22195fcf831427912bb6681dbbd5b050814e1540000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f0000000000000000000000007fbf478414bf0b4dffb1ee66b84819b4a752998b", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}