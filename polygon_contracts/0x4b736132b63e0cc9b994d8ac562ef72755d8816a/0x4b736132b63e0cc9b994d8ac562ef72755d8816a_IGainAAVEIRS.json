{"SourceCode": "{\"IGainAAVEIRS.sol\":{\"content\":\"pragma solidity 0.8.7;\\n\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"./IGainBase.sol\\\";\\n\\ninterface ILendingPool {\\n    function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n    function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n}\\n\\ncontract IGainAAVEIRS is IGainBase {\\n\\n    ILendingPool public AAVE; // AAVE LendingPool\\n    address public asset; // underlying asset\\u0027s address\\n\\n    uint256 public initialRate;\\n    uint256 public endRate;\\n    uint256 public leverage; // in 1e18\\n\\n    function init(address _baseToken, address _lendingPool, address _asset, address _treasury, string calldata _batchName, uint256 _leverage, uint256 _duration, uint256 _a, uint256 _b) public {\\n        _init(_baseToken, _treasury, _batchName, _duration, _a, _b);\\n        AAVE = ILendingPool(_lendingPool);\\n        asset = _asset;\\n        leverage = _leverage;\\n        initialRate = AAVE.getReserveNormalizedVariableDebt(asset);\\n        require(initialRate \\u003e 0, \\\"initialRate = 0\\\");\\n    }\\n\\n    // 1 - swap fee (numerator, in 1e18 format)\\n    function fee() public override view returns (uint256) {\\n        uint256 time = _blockTimestamp();\\n        uint256 _fee;\\n        if(time \\u003c closeTime) {\\n            _fee = maxFee - (\\n                (time - openTime) * (maxFee - minFee) / (closeTime - openTime)\\n            );\\n        }\\n        else {\\n            _fee = minFee;\\n        }\\n        return 1e18 - _fee;\\n    }\\n\\n    function close() external override {\\n        require(_blockTimestamp() \\u003e= closeTime, \\\"Not yet\\\");\\n        require(canBuy, \\\"Closed\\\");\\n        canBuy = false;\\n        endRate = AAVE.getReserveNormalizedVariableDebt(asset);\\n\\n        if (endRate \\u003c initialRate) endRate = initialRate; // wierd cases prevention?\\n\\n        uint256 ratio = (endRate - initialRate) * 1e18 / initialRate;\\n        uint256 _bPrice = ratio * leverage / 1e18; // leverage\\n        bPrice = _bPrice \\u003e 1e18 ? 1e18 : _bPrice;\\n    }\\n\\n}\\n\"},\"IGainBase.sol\":{\"content\":\"pragma solidity 0.8.7;\\n\\n// SPDX-License-Identifier: MIT\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance \\u003e= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length \\u003e 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    mapping(address =\\u003e uint256) internal _balances;\\n\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) internal _allowances;\\n\\n    uint256 internal _totalSupply;\\n\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance \\u003e= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance \\u003e= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance \\u003e= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n}\\n\\ninterface ERC20Mintable is IERC20 {\\n    function mint(address to, uint256 amount) external;\\n    function burn(address from, uint256 amount) external;\\n}\\n\\ninterface TokenFactory {\\n    function newToken(address _owner, string calldata _name, string calldata _symbol, uint8 _decimals) external returns (address token);\\n}\\n\\nabstract contract Timestamp {\\n    function _blockTimestamp() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n}\\n\\nabstract contract IGainBase is ERC20, Timestamp {\\n    using SafeERC20 for IERC20;\\n\\n    bool public canBuy;\\n\\n    address public treasury;\\n    address public baseToken;\\n\\n    TokenFactory public constant Factory = TokenFactory(0x47Ca2166A5b837e891E6E64E780d1B43FC0a4E95);\\n\\n    ERC20Mintable public a;\\n    ERC20Mintable public b;\\n\\n    uint256 public openTime;\\n    uint256 public closeTime;\\n\\n    uint256 public constant protocolFee = 0.01e18;\\n    uint256 public constant minFee = 0.003e18;\\n    uint256 public constant maxFee = 0.03e18;\\n\\n\\n    // a + b = $1\\n    // b = the synth\\n    // a = 1 - b\\n    uint256 public bPrice;\\n\\n    uint256 public poolA;\\n    uint256 public poolB;\\n\\n    event Mint(address indexed minter, uint256 amount);\\n    event Burn(address indexed burner, uint256 amount);\\n    event Swap(address indexed user, bool indexed a2b, uint256 input, uint256 output);\\n    event AddLP(address indexed provider, uint256 a, uint256 b, uint256 lp);\\n    event RemoveLP(address indexed provider, uint256 a, uint256 b, uint256 lp);\\n\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        uint256 z = x \\u003e\\u003e 1 + 1;\\n        uint256 y = x;\\n        while (z \\u003c y)\\n        {\\n            y = z;\\n            z = (x / z + z) / 2;\\n        }\\n        return y;\\n    }\\n\\n    // initializer, derived contracts must call this in its public init() function\\n    function _init(address _baseToken, address _treasury, string memory _batchName, uint256 _duration, uint256 _a, uint256 _b) internal {\\n        require(openTime == 0, \\\"Initialized\\\");\\n        require(_a \\u003e 0 \\u0026\\u0026 _b \\u003e 0, \\\"No initial liquidity\\\");\\n        baseToken = _baseToken;\\n\\n        treasury = _treasury;\\n        openTime = _blockTimestamp();\\n        closeTime = _blockTimestamp() + _duration;\\n\\n        canBuy = true;\\n\\n        name = string(abi.encodePacked(\\\"iGain LP token \\\", _batchName));\\n        symbol = string(abi.encodePacked(\\\"iGLP \\\", _batchName));\\n        decimals = ERC20(baseToken).decimals();\\n\\n        a = ERC20Mintable(Factory.newToken(address(this), string(abi.encodePacked(\\\"iGain A token \\\", _batchName)), string(abi.encodePacked(\\\"iG-A \\\", _batchName)), decimals));\\n        b = ERC20Mintable(Factory.newToken(address(this), string(abi.encodePacked(\\\"iGain B token \\\", _batchName)), string(abi.encodePacked(\\\"iG-B \\\", _batchName)), decimals));\\n\\n        uint256 _lp = sqrt(_a * _b);\\n        poolA = _a;\\n        poolB = _b;\\n        _mint(_msgSender(), _lp);\\n        _mint(address(0), 1000); //lock liquidity \\n        if(_b \\u003e _a) {\\n            a.mint(_msgSender(), _b - _a);\\n            doTransferIn(baseToken, _msgSender(), _b);\\n        }\\n        else {\\n            b.mint(_msgSender(), _a - _b);\\n            doTransferIn(baseToken, _msgSender(), _a);\\n        }\\n        emit AddLP(_msgSender(), _a, _b, _lp);\\n    }\\n\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut, uint256 f) internal pure returns (uint amountOut) {\\n        uint256 amountInWithFee = amountIn * f;\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = reserveIn * 1e18 + amountInWithFee;\\n        amountOut = numerator / denominator;\\n    }\\n\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut, uint256 f) internal pure returns (uint amountIn) {\\n        uint numerator = reserveIn * amountOut * 1e18;\\n        uint denominator = (reserveOut - amountOut) * f;\\n        amountIn = numerator / denominator + 1;\\n    }\\n\\n    // calculate how many token needs to be swapped when minting/burning\\n    function swapPartialHelper(uint256 amountIn, uint256 reserveIn, uint256 reserveOut, uint256 f) internal pure returns (uint256 x) {\\n        uint256 r = amountIn * 4 * reserveIn * f / 1e18; //prevent stack too deep\\n        x = (reserveOut - amountIn) * f / 1e18 + reserveIn; // (reserveOut - a) * fee + reserveIn\\n        x = sqrt(x * x + r) - x;\\n        x = x * 1e18 / f / 2;\\n    }\\n\\n    // 1 - swap fee (numerator, in 1e18 format)\\n    function fee() public virtual view returns (uint256) {\\n        uint256 time = _blockTimestamp();\\n        uint256 _fee;\\n        if(time \\u003c closeTime) {\\n            _fee = minFee + (\\n                (time - openTime) * (maxFee - minFee) / (closeTime - openTime)\\n            );\\n        }\\n        else {\\n            _fee = maxFee;\\n        }\\n        return 1e18 - _fee;\\n    }\\n\\n    /***********************************|\\n    |          mint/burn token          |\\n    |__________________________________*/\\n\\n    // pay `amount` baseToken, get the same amount of a and b\\n    function mint(uint256 amount) external {\\n        require(canBuy, \\\"cannot buy\\\");\\n        a.mint(_msgSender(), amount);\\n        b.mint(_msgSender(), amount);\\n        doTransferIn(baseToken, _msgSender(), amount);\\n    }\\n\\n    // burn `amount` of a and b, get `amount` baseToken \\n    function burn(uint256 amount) external {\\n        require(canBuy, \\\"cannot buy\\\");\\n        a.burn(_msgSender(), amount);\\n        b.burn(_msgSender(), amount);\\n        doTransferOut(baseToken, _msgSender(), amount);\\n    }\\n\\n    // pay `amount` baseToken, get more than `min_a` of a\\n    function mintA(uint256 amount, uint256 min_a) external returns (uint256 _a) {\\n        require(canBuy, \\\"cannot buy\\\");\\n        _a = getAmountOut(amount, poolB, poolA, fee());\\n        poolB = poolB + amount;\\n        poolA = poolA - _a;\\n        emit Swap(_msgSender(), false, amount, _a);\\n        _a = _a + amount;\\n        require(_a \\u003e= min_a, \\\"SLIPPAGE_DETECTED\\\");\\n        a.mint(_msgSender(), _a);\\n        doTransferIn(baseToken, _msgSender(), amount);\\n    }\\n\\n    // mint `_a` of a, pay no more than `max_amount` of baseToken\\n    function mintExactA(uint256 _a, uint256 max_amount) external returns (uint256 amount) {\\n        require(canBuy, \\\"cannot buy\\\");\\n        amount = swapPartialHelper(_a, poolB, poolA, fee());\\n        require(amount \\u003c= max_amount, \\\"SLIPPAGE_DETECTED\\\");\\n        // y = _a - amount\\n        uint256 y = _a - amount;\\n        // A = A - y\\n        // B = B + amount\\n        poolA = poolA - y;\\n        poolB = poolB + amount;\\n        a.mint(_msgSender(), _a);\\n        emit Swap(_msgSender(), false, amount, y);\\n        doTransferIn(baseToken, _msgSender(), amount);\\n    }\\n\\n    // burn `_a` of a, receive more than `min_amount` of baseToken\\n    function burnA(uint256 _a, uint256 min_amount) external returns (uint256 amount) {\\n        require(canBuy, \\\"cannot buy\\\");\\n        // amount = _a - x\\n        uint256 x = swapPartialHelper(_a, poolA, poolB, fee());\\n        amount = _a - x;\\n        require(amount \\u003e= min_amount, \\\"SLIPPAGE_DETECTED\\\");\\n        \\n        // A = A + x\\n        // B = B - amount\\n        poolA = poolA + x;\\n        poolB = poolB - amount;\\n        a.burn(_msgSender(), _a);\\n        emit Swap(_msgSender(), true, x, amount);\\n        doTransferOut(baseToken, _msgSender(), amount);\\n    }\\n\\n    // pay `amount` baseToken, get more than `min_b` of b\\n    function mintB(uint256 amount, uint256 min_b) external returns (uint256 _b) {\\n        require(canBuy, \\\"cannot buy\\\");\\n        _b = getAmountOut(amount, poolA, poolB, fee());\\n        poolA = poolA + amount;\\n        poolB = poolB - _b;\\n        emit Swap(_msgSender(), true, amount, _b);\\n        _b = _b + amount;\\n        require(_b \\u003e= min_b, \\\"SLIPPAGE_DETECTED\\\");\\n        b.mint(_msgSender(), _b);\\n        doTransferIn(baseToken, _msgSender(), amount);\\n    }\\n\\n    // mint `_b` of b, pay no more than `max_amount` of baseToken\\n    function mintExactB(uint256 _b, uint256 max_amount) external returns (uint256 amount) {\\n        require(canBuy, \\\"cannot buy\\\");\\n        amount = swapPartialHelper(_b, poolA, poolB, fee());\\n        require(amount \\u003c= max_amount, \\\"SLIPPAGE_DETECTED\\\");\\n        // y = _b - amount\\n        uint256 y = _b - amount;\\n        // B = B - y\\n        // A = A + amount\\n        poolB = poolB - y;\\n        poolA = poolA + amount;\\n        b.mint(_msgSender(), _b);\\n        emit Swap(_msgSender(), true, amount, y);\\n        doTransferIn(baseToken, _msgSender(), amount);\\n    }\\n\\n    // burn `b` of b, receive more than `min_amount` of baseToken\\n    function burnB(uint256 _b, uint256 min_amount) external returns (uint256 amount) {\\n        require(canBuy, \\\"cannot buy\\\");\\n        // amount = _b - x\\n        uint256 x = swapPartialHelper(_b, poolB, poolA, fee());\\n        amount = _b - x;\\n        require(amount \\u003e= min_amount, \\\"SLIPPAGE_DETECTED\\\");\\n        \\n        // B = B + x\\n        // A = A - amount\\n        poolB = poolB + x;\\n        poolA = poolA - amount;\\n        b.burn(_msgSender(), _b);\\n        emit Swap(_msgSender(), false, x, amount);\\n        doTransferOut(baseToken, _msgSender(), amount);\\n    }\\n\\n    // pay `amount` baseToken, get more than `min_lp` liquidity provider share\\n    function mintLP(uint256 amount, uint256 min_lp) external returns (uint256 _lp) {\\n        require(canBuy, \\\"cannot buy\\\");\\n        // k = poolA * poolB\\n        // _lp = ( sqrt(_k)/sqrt(k) - 1 ) * LP\\n        uint256 k = sqrt(poolA * poolB);\\n        uint256 _k = sqrt((poolA + amount) * (poolB + amount));\\n        _lp = (_k * 1e18 / k - 1e18) * _totalSupply / 1e18;\\n        _lp = _lp * fee() / 1e18; //fee\\n\\n        require(_lp \\u003e= min_lp, \\\"SLIPPAGE_DETECTED\\\");\\n        poolA = poolA + amount;\\n        poolB = poolB + amount;\\n        _mint(_msgSender(), _lp);\\n        doTransferIn(baseToken, _msgSender(), amount);\\n        emit AddLP(_msgSender(), amount, amount, _lp);\\n    }\\n\\n    // burn `lp` of liquidity provider share, recieve more than `min_amount` of baseToken\\n    function burnLP(uint256 lp, uint256 min_amount) external returns (uint256 amount) {\\n        require(canBuy, \\\"cannot buy\\\");\\n        uint256 s = poolA + poolB;\\n\\n        uint256 f = fee() * lp / _totalSupply;\\n        amount = poolA * poolB * 4 * f / 1e18;\\n        amount = amount * (2e18 - f) / 1e18;\\n        amount = sqrt(s * s - amount);\\n        amount = (s - amount) / 2;\\n        require(amount \\u003e= min_amount, \\\"SLIPPAGE_DETECTED\\\");\\n        poolA = poolA - amount;\\n        poolB = poolB - amount;\\n        _burn(_msgSender(), lp);\\n        doTransferOut(baseToken, _msgSender(), amount);\\n        emit RemoveLP(_msgSender(), amount, amount, lp);\\n    }\\n\\n    /***********************************|\\n    |               swap                |\\n    |__________________________________*/\\n\\n    function swapAtoB(uint256 _a, uint256 min_b) external returns (uint256 _b) {\\n        require(canBuy, \\\"cannot buy\\\");\\n        _b = getAmountOut(_a, poolA, poolB, fee());\\n        require(_b \\u003e= min_b, \\\"SLIPPAGE_DETECTED\\\");\\n        poolA = poolA + _a;\\n        poolB = poolB - _b;\\n        a.burn(_msgSender(), _a);\\n        b.mint(_msgSender(), _b);\\n        emit Swap(_msgSender(), true, _a, _b);\\n    }\\n\\n    function swapBtoA(uint256 _b, uint256 min_a) external returns (uint256 _a) {\\n        require(canBuy, \\\"cannot buy\\\");\\n        _a = getAmountOut(_b, poolB, poolA, fee());\\n        require(_a \\u003e= min_a, \\\"SLIPPAGE_DETECTED\\\");\\n        poolB = poolB + _b;\\n        poolA = poolA - _a;\\n        b.burn(_msgSender(), _b);\\n        a.mint(_msgSender(), _a);\\n        emit Swap(_msgSender(), false, _b, _a);\\n    }\\n\\n\\n    /***********************************|\\n    |       add/remove liquidity        |\\n    |__________________________________*/\\n\\n    // deposit `_a` of a and `_b` of b, get more than `min_lp` of liquidity provider share\\n    function depositLP(uint256 _a, uint256 _b, uint256 min_lp) external returns (uint256 _lp) {\\n        require(canBuy, \\\"cannot buy\\\");\\n        // k = poolA * poolB\\n        // _lp = ( sqrt(_k)/sqrt(k) - 1 ) * LP\\n        uint256 k = sqrt(poolA * poolB);\\n        uint256 _k = sqrt((poolA + _a) * (poolB + _b));\\n        _lp = (_k * 1e18 / k - 1e18) * _totalSupply / 1e18;\\n        _lp = _lp * fee() / 1e18; //fee\\n\\n        require(_lp \\u003e= min_lp, \\\"SLIPPAGE_DETECTED\\\");\\n        poolA = poolA + _a;\\n        poolB = poolB + _b;\\n        a.burn(_msgSender(), _a);\\n        b.burn(_msgSender(), _b);\\n        _mint(_msgSender(), _lp);\\n        emit AddLP(_msgSender(), _a, _b, _lp);\\n    }\\n\\n    // burn no more than `max_lp` of liquidity provider share, withdraw `_a` of a and `_b` of b\\n    function withdrawLP(uint256 _a, uint256 _b, uint256 max_lp) external returns (uint256 _lp) {\\n        require(canBuy, \\\"cannot buy\\\");\\n        // k = poolA * poolB\\n        // _lp = ( 1 - sqrt(_k)/sqrt(k) ) * LP\\n        uint256 k = sqrt(poolA * poolB);\\n        uint256 _k = sqrt((poolA - _a) * (poolB - _b));\\n        _lp = (1e18 - _k * 1e18 / k) * _totalSupply / 1e18;\\n        _lp = _lp * 1e18 / fee(); //fee\\n\\n        require(_lp \\u003c= max_lp, \\\"SLIPPAGE_DETECTED\\\");\\n        poolA = poolA - _a;\\n        poolB = poolB - _b;\\n        a.mint(_msgSender(), _a);\\n        b.mint(_msgSender(), _b);\\n        _burn(_msgSender(), _lp);\\n        emit RemoveLP(_msgSender(), _a, _b, _lp);\\n    }\\n\\n\\n    /***********************************|\\n    |             settlement            |\\n    |__________________________________*/\\n\\n    // can only call once after closeTime\\n    // settle bPrice\\n    function close() external virtual;\\n\\n    // burn a, b, and lp and receive baseToken\\n    function claim() external returns (uint256 amount) {\\n        require(!canBuy, \\\"Not yet\\\");\\n\\n        uint256 _lp = _balances[_msgSender()];\\n        uint256 _a = a.balanceOf(_msgSender());\\n        uint256 _b = b.balanceOf(_msgSender());\\n\\n        a.burn(_msgSender(), _a);\\n        b.burn(_msgSender(), _b);\\n\\n        if(_lp \\u003e 0) {\\n            uint256 __a = poolA * _lp / _totalSupply;\\n            uint256 __b = poolB * _lp / _totalSupply;\\n\\n            poolA = poolA - __a;\\n            poolB = poolB - __b;\\n            _a = _a + __a;\\n            _b = _b + __b;\\n            _burn(_msgSender(), _lp);\\n            emit RemoveLP(_msgSender(), _a, _b, _lp);\\n        }\\n\\n        amount = (_a * (1e18 - bPrice) + _b * bPrice) / 1e18;\\n        doTransferOut(baseToken, _msgSender(), amount);\\n    }\\n\\n\\n    /***********************************|\\n    |          helper function          |\\n    |__________________________________*/\\n\\n    function doTransferIn(address tokenAddr, address from, uint amount) internal {\\n        IERC20 token = IERC20(tokenAddr);\\n        token.safeTransferFrom(from, address(this), amount);\\n\\n        emit Mint(from, amount);\\n    }\\n\\n    function doTransferOut(address tokenAddr, address to, uint amount) internal {\\n        uint256 _fee = amount * protocolFee / 1e18;\\n\\n        IERC20 token = IERC20(tokenAddr);\\n        token.safeTransfer(to, amount - _fee);\\n        token.safeTransfer(treasury, _fee);\\n\\n        emit Burn(to, amount);\\n    }\\n\\n}\\n\"}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lp\",\"type\":\"uint256\"}],\"name\":\"AddLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lp\",\"type\":\"uint256\"}],\"name\":\"RemoveLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"a2b\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"input\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"output\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AAVE\",\"outputs\":[{\"internalType\":\"contract ILendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Factory\",\"outputs\":[{\"internalType\":\"contract TokenFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"a\",\"outputs\":[{\"internalType\":\"contract ERC20Mintable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"b\",\"outputs\":[{\"internalType\":\"contract ERC20Mintable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_amount\",\"type\":\"uint256\"}],\"name\":\"burnA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_b\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_amount\",\"type\":\"uint256\"}],\"name\":\"burnB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_amount\",\"type\":\"uint256\"}],\"name\":\"burnLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_b\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_lp\",\"type\":\"uint256\"}],\"name\":\"depositLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lp\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lendingPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_batchName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_b\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_a\",\"type\":\"uint256\"}],\"name\":\"mintA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_a\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_b\",\"type\":\"uint256\"}],\"name\":\"mintB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_b\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max_amount\",\"type\":\"uint256\"}],\"name\":\"mintExactA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_b\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max_amount\",\"type\":\"uint256\"}],\"name\":\"mintExactB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_lp\",\"type\":\"uint256\"}],\"name\":\"mintLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lp\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_b\",\"type\":\"uint256\"}],\"name\":\"swapAtoB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_b\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_b\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_a\",\"type\":\"uint256\"}],\"name\":\"swapBtoA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_a\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_b\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max_lp\",\"type\":\"uint256\"}],\"name\":\"withdrawLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lp\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "IGainAAVEIRS", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "54088", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c12babf8e98e76b8e589bc44270e30ae8a73b53a311225783d60019b29ec13db"}