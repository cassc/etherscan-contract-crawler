{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/payloads/V2PolLiquidationSentinelPayload.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.6.12;\\n\\nimport {AaveV2Polygon} from 'aave-address-book/AaveV2Polygon.sol';\\n\\ncontract V2PolLiquidationSentinelPayload {\\n  address public immutable NEW_COLLATERAL_MANAGER;\\n\\n  constructor(address collateralManager) public {\\n    NEW_COLLATERAL_MANAGER = collateralManager;\\n  }\\n\\n  function execute() public {\\n    AaveV2Polygon.POOL_ADDRESSES_PROVIDER.setLendingPoolCollateralManager(NEW_COLLATERAL_MANAGER);\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/aave-helpers/lib/aave-address-book/src/AaveV2Polygon.sol\": {\r\n      \"content\": \"// AUTOGENERATED - MANUALLY CHANGES WILL BE REVERTED BY THE GENERATOR\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\nimport {ILendingPoolAddressesProvider, ILendingPool, ILendingPoolConfigurator, IAaveOracle, IAaveProtocolDataProvider, ILendingRateOracle} from './AaveV2.sol';\\nimport {ICollector} from './common/ICollector.sol';\\n\\nlibrary AaveV2Polygon {\\n  // https://polygonscan.com/address/0xd05e3E715d945B59290df0ae8eF85c1BdB684744\\n  ILendingPoolAddressesProvider internal constant POOL_ADDRESSES_PROVIDER =\\n    ILendingPoolAddressesProvider(0xd05e3E715d945B59290df0ae8eF85c1BdB684744);\\n\\n  // https://polygonscan.com/address/0x8dFf5E27EA6b7AC08EbFdf9eB090F32ee9a30fcf\\n  ILendingPool internal constant POOL = ILendingPool(0x8dFf5E27EA6b7AC08EbFdf9eB090F32ee9a30fcf);\\n\\n  // https://polygonscan.com/address/0x26db2B833021583566323E3b8985999981b9F1F3\\n  ILendingPoolConfigurator internal constant POOL_CONFIGURATOR =\\n    ILendingPoolConfigurator(0x26db2B833021583566323E3b8985999981b9F1F3);\\n\\n  // https://polygonscan.com/address/0x0229F777B0fAb107F9591a41d5F02E4e98dB6f2d\\n  IAaveOracle internal constant ORACLE = IAaveOracle(0x0229F777B0fAb107F9591a41d5F02E4e98dB6f2d);\\n\\n  // https://polygonscan.com/address/0x17F73aEaD876CC4059089ff815EDA37052960dFB\\n  ILendingRateOracle internal constant LENDING_RATE_ORACLE =\\n    ILendingRateOracle(0x17F73aEaD876CC4059089ff815EDA37052960dFB);\\n\\n  // https://polygonscan.com/address/0x7551b5D2763519d4e37e8B81929D336De671d46d\\n  IAaveProtocolDataProvider internal constant AAVE_PROTOCOL_DATA_PROVIDER =\\n    IAaveProtocolDataProvider(0x7551b5D2763519d4e37e8B81929D336De671d46d);\\n\\n  // https://polygonscan.com/address/0xDf7d0e6454DB638881302729F5ba99936EaAB233\\n  address internal constant POOL_ADMIN = 0xDf7d0e6454DB638881302729F5ba99936EaAB233;\\n\\n  // https://polygonscan.com/address/0x1450F2898D6bA2710C98BE9CAF3041330eD5ae58\\n  address internal constant EMERGENCY_ADMIN = 0x1450F2898D6bA2710C98BE9CAF3041330eD5ae58;\\n\\n  // https://polygonscan.com/address/0xe8599F3cc5D38a9aD6F3684cd5CEa72f10Dbc383\\n  ICollector internal constant COLLECTOR = ICollector(0xe8599F3cc5D38a9aD6F3684cd5CEa72f10Dbc383);\\n\\n  // https://polygonscan.com/address/0x357D51124f59836DeD84c8a1730D72B749d8BC23\\n  address internal constant DEFAULT_INCENTIVES_CONTROLLER =\\n    0x357D51124f59836DeD84c8a1730D72B749d8BC23;\\n\\n  // https://polygonscan.com/address/0x2bB25175d9B0F8965780209EB558Cc3b56cA6d32\\n  address internal constant EMISSION_MANAGER = 0x2bB25175d9B0F8965780209EB558Cc3b56cA6d32;\\n\\n  // https://polygonscan.com/address/0x1E623A311948b531B07B6EA7CC34a9A2bCADADd0\\n  address internal constant DEBT_SWAP_ADAPTER = 0x1E623A311948b531B07B6EA7CC34a9A2bCADADd0;\\n\\n  // https://polygonscan.com/address/0x9eCed0293e7B73CFf4a2b4F9C82aAc8346158bd9\\n  address internal constant CONFIG_ENGINE = 0x9eCed0293e7B73CFf4a2b4F9C82aAc8346158bd9;\\n\\n  // https://polygonscan.com/address/0x3db487975aB1728DB5787b798866c2021B24ec52\\n  address internal constant MIGRATION_HELPER = 0x3db487975aB1728DB5787b798866c2021B24ec52;\\n\\n  // https://polygonscan.com/address/0x3ac4e9aa29940770aeC38fe853a4bbabb2dA9C19\\n  address internal constant POOL_ADDRESSES_PROVIDER_REGISTRY =\\n    0x3ac4e9aa29940770aeC38fe853a4bbabb2dA9C19;\\n\\n  // https://polygonscan.com/address/0xD05003a24A17d9117B11eC04cF9743b050779c08\\n  address internal constant RATES_FACTORY = 0xD05003a24A17d9117B11eC04cF9743b050779c08;\\n\\n  // https://polygonscan.com/address/0xE84cF064a0a65290Ae5673b500699f3753063936\\n  address internal constant REPAY_WITH_COLLATERAL_ADAPTER =\\n    0xE84cF064a0a65290Ae5673b500699f3753063936;\\n\\n  // https://polygonscan.com/address/0x35784a624D4FfBC3594f4d16fA3801FeF063241c\\n  address internal constant SWAP_COLLATERAL_ADAPTER = 0x35784a624D4FfBC3594f4d16fA3801FeF063241c;\\n\\n  // https://polygonscan.com/address/0x645654D59A5226CBab969b1f5431aA47CBf64ab8\\n  address internal constant UI_INCENTIVE_DATA_PROVIDER = 0x645654D59A5226CBab969b1f5431aA47CBf64ab8;\\n\\n  // https://polygonscan.com/address/0x204f2Eb81D996729829debC819f7992DCEEfE7b1\\n  address internal constant UI_POOL_DATA_PROVIDER = 0x204f2Eb81D996729829debC819f7992DCEEfE7b1;\\n\\n  // https://polygonscan.com/address/0x34aa032bC416Cf2CdC45c0C8f065b1F19463D43e\\n  address internal constant WALLET_BALANCE_PROVIDER = 0x34aa032bC416Cf2CdC45c0C8f065b1F19463D43e;\\n\\n  // https://polygonscan.com/address/0xAeBF56223F044a73A513FAD7E148A9075227eD9b\\n  address internal constant WETH_GATEWAY = 0xAeBF56223F044a73A513FAD7E148A9075227eD9b;\\n}\\n\\nlibrary AaveV2PolygonAssets {\\n  // https://polygonscan.com/address/0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063\\n  address internal constant DAI_UNDERLYING = 0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063;\\n\\n  uint256 internal constant DAI_DECIMALS = 18;\\n\\n  // https://polygonscan.com/address/0x27F8D03b3a2196956ED754baDc28D73be8830A6e\\n  address internal constant DAI_A_TOKEN = 0x27F8D03b3a2196956ED754baDc28D73be8830A6e;\\n\\n  // https://polygonscan.com/address/0x75c4d1Fb84429023170086f06E682DcbBF537b7d\\n  address internal constant DAI_V_TOKEN = 0x75c4d1Fb84429023170086f06E682DcbBF537b7d;\\n\\n  // https://polygonscan.com/address/0x2238101B7014C279aaF6b408A284E49cDBd5DB55\\n  address internal constant DAI_S_TOKEN = 0x2238101B7014C279aaF6b408A284E49cDBd5DB55;\\n\\n  // https://polygonscan.com/address/0xFC539A559e170f848323e19dfD66007520510085\\n  address internal constant DAI_ORACLE = 0xFC539A559e170f848323e19dfD66007520510085;\\n\\n  // https://polygonscan.com/address/0x499e74993FFa39dd314782C4262a7443c31f8422\\n  address internal constant DAI_INTEREST_RATE_STRATEGY = 0x499e74993FFa39dd314782C4262a7443c31f8422;\\n\\n  // https://polygonscan.com/address/0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\\n  address internal constant USDC_UNDERLYING = 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174;\\n\\n  uint256 internal constant USDC_DECIMALS = 6;\\n\\n  // https://polygonscan.com/address/0x1a13F4Ca1d028320A707D99520AbFefca3998b7F\\n  address internal constant USDC_A_TOKEN = 0x1a13F4Ca1d028320A707D99520AbFefca3998b7F;\\n\\n  // https://polygonscan.com/address/0x248960A9d75EdFa3de94F7193eae3161Eb349a12\\n  address internal constant USDC_V_TOKEN = 0x248960A9d75EdFa3de94F7193eae3161Eb349a12;\\n\\n  // https://polygonscan.com/address/0xdeb05676dB0DB85cecafE8933c903466Bf20C572\\n  address internal constant USDC_S_TOKEN = 0xdeb05676dB0DB85cecafE8933c903466Bf20C572;\\n\\n  // https://polygonscan.com/address/0xefb7e6be8356cCc6827799B6A7348eE674A80EaE\\n  address internal constant USDC_ORACLE = 0xefb7e6be8356cCc6827799B6A7348eE674A80EaE;\\n\\n  // https://polygonscan.com/address/0xCE5870016D3cFa4e1c71Fb7c7EE8Cef67712a7a3\\n  address internal constant USDC_INTEREST_RATE_STRATEGY =\\n    0xCE5870016D3cFa4e1c71Fb7c7EE8Cef67712a7a3;\\n\\n  // https://polygonscan.com/address/0xc2132D05D31c914a87C6611C10748AEb04B58e8F\\n  address internal constant USDT_UNDERLYING = 0xc2132D05D31c914a87C6611C10748AEb04B58e8F;\\n\\n  uint256 internal constant USDT_DECIMALS = 6;\\n\\n  // https://polygonscan.com/address/0x60D55F02A771d515e077c9C2403a1ef324885CeC\\n  address internal constant USDT_A_TOKEN = 0x60D55F02A771d515e077c9C2403a1ef324885CeC;\\n\\n  // https://polygonscan.com/address/0x8038857FD47108A07d1f6Bf652ef1cBeC279A2f3\\n  address internal constant USDT_V_TOKEN = 0x8038857FD47108A07d1f6Bf652ef1cBeC279A2f3;\\n\\n  // https://polygonscan.com/address/0xe590cfca10e81FeD9B0e4496381f02256f5d2f61\\n  address internal constant USDT_S_TOKEN = 0xe590cfca10e81FeD9B0e4496381f02256f5d2f61;\\n\\n  // https://polygonscan.com/address/0xf9d5AAC6E5572AEFa6bd64108ff86a222F69B64d\\n  address internal constant USDT_ORACLE = 0xf9d5AAC6E5572AEFa6bd64108ff86a222F69B64d;\\n\\n  // https://polygonscan.com/address/0xAcBbD7E2e8C14DBdBB974B1Be2FB29f34C1E5048\\n  address internal constant USDT_INTEREST_RATE_STRATEGY =\\n    0xAcBbD7E2e8C14DBdBB974B1Be2FB29f34C1E5048;\\n\\n  // https://polygonscan.com/address/0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6\\n  address internal constant WBTC_UNDERLYING = 0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6;\\n\\n  uint256 internal constant WBTC_DECIMALS = 8;\\n\\n  // https://polygonscan.com/address/0x5c2ed810328349100A66B82b78a1791B101C9D61\\n  address internal constant WBTC_A_TOKEN = 0x5c2ed810328349100A66B82b78a1791B101C9D61;\\n\\n  // https://polygonscan.com/address/0xF664F50631A6f0D72ecdaa0e49b0c019Fa72a8dC\\n  address internal constant WBTC_V_TOKEN = 0xF664F50631A6f0D72ecdaa0e49b0c019Fa72a8dC;\\n\\n  // https://polygonscan.com/address/0x2551B15dB740dB8348bFaDFe06830210eC2c2F13\\n  address internal constant WBTC_S_TOKEN = 0x2551B15dB740dB8348bFaDFe06830210eC2c2F13;\\n\\n  // https://polygonscan.com/address/0xA338e0492B2F944E9F8C0653D3AD1484f2657a37\\n  address internal constant WBTC_ORACLE = 0xA338e0492B2F944E9F8C0653D3AD1484f2657a37;\\n\\n  // https://polygonscan.com/address/0xCc906fC61a896bAD00f3f4EF736B22716CbD8878\\n  address internal constant WBTC_INTEREST_RATE_STRATEGY =\\n    0xCc906fC61a896bAD00f3f4EF736B22716CbD8878;\\n\\n  // https://polygonscan.com/address/0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619\\n  address internal constant WETH_UNDERLYING = 0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619;\\n\\n  uint256 internal constant WETH_DECIMALS = 18;\\n\\n  // https://polygonscan.com/address/0x28424507fefb6f7f8E9D3860F56504E4e5f5f390\\n  address internal constant WETH_A_TOKEN = 0x28424507fefb6f7f8E9D3860F56504E4e5f5f390;\\n\\n  // https://polygonscan.com/address/0xeDe17e9d79fc6f9fF9250D9EEfbdB88Cc18038b5\\n  address internal constant WETH_V_TOKEN = 0xeDe17e9d79fc6f9fF9250D9EEfbdB88Cc18038b5;\\n\\n  // https://polygonscan.com/address/0xc478cBbeB590C76b01ce658f8C4dda04f30e2C6f\\n  address internal constant WETH_S_TOKEN = 0xc478cBbeB590C76b01ce658f8C4dda04f30e2C6f;\\n\\n  // https://polygonscan.com/address/0x0000000000000000000000000000000000000000\\n  address internal constant WETH_ORACLE = 0x0000000000000000000000000000000000000000;\\n\\n  // https://polygonscan.com/address/0xEA2e7947658944674893D71cE5DA52d528a43388\\n  address internal constant WETH_INTEREST_RATE_STRATEGY =\\n    0xEA2e7947658944674893D71cE5DA52d528a43388;\\n\\n  // https://polygonscan.com/address/0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270\\n  address internal constant WMATIC_UNDERLYING = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;\\n\\n  uint256 internal constant WMATIC_DECIMALS = 18;\\n\\n  // https://polygonscan.com/address/0x8dF3aad3a84da6b69A4DA8aeC3eA40d9091B2Ac4\\n  address internal constant WMATIC_A_TOKEN = 0x8dF3aad3a84da6b69A4DA8aeC3eA40d9091B2Ac4;\\n\\n  // https://polygonscan.com/address/0x59e8E9100cbfCBCBAdf86b9279fa61526bBB8765\\n  address internal constant WMATIC_V_TOKEN = 0x59e8E9100cbfCBCBAdf86b9279fa61526bBB8765;\\n\\n  // https://polygonscan.com/address/0xb9A6E29fB540C5F1243ef643EB39b0AcbC2e68E3\\n  address internal constant WMATIC_S_TOKEN = 0xb9A6E29fB540C5F1243ef643EB39b0AcbC2e68E3;\\n\\n  // https://polygonscan.com/address/0x327e23A4855b6F663a28c5161541d69Af8973302\\n  address internal constant WMATIC_ORACLE = 0x327e23A4855b6F663a28c5161541d69Af8973302;\\n\\n  // https://polygonscan.com/address/0x8772DFbF52D03F11B43e31cf04bBcc64aE0a8cb9\\n  address internal constant WMATIC_INTEREST_RATE_STRATEGY =\\n    0x8772DFbF52D03F11B43e31cf04bBcc64aE0a8cb9;\\n\\n  // https://polygonscan.com/address/0xD6DF932A45C0f255f85145f286eA0b292B21C90B\\n  address internal constant AAVE_UNDERLYING = 0xD6DF932A45C0f255f85145f286eA0b292B21C90B;\\n\\n  uint256 internal constant AAVE_DECIMALS = 18;\\n\\n  // https://polygonscan.com/address/0x1d2a0E5EC8E5bBDCA5CB219e649B565d8e5c3360\\n  address internal constant AAVE_A_TOKEN = 0x1d2a0E5EC8E5bBDCA5CB219e649B565d8e5c3360;\\n\\n  // https://polygonscan.com/address/0x1c313e9d0d826662F5CE692134D938656F681350\\n  address internal constant AAVE_V_TOKEN = 0x1c313e9d0d826662F5CE692134D938656F681350;\\n\\n  // https://polygonscan.com/address/0x17912140e780B29Ba01381F088f21E8d75F954F9\\n  address internal constant AAVE_S_TOKEN = 0x17912140e780B29Ba01381F088f21E8d75F954F9;\\n\\n  // https://polygonscan.com/address/0xbE23a3AA13038CfC28aFd0ECe4FdE379fE7fBfc4\\n  address internal constant AAVE_ORACLE = 0xbE23a3AA13038CfC28aFd0ECe4FdE379fE7fBfc4;\\n\\n  // https://polygonscan.com/address/0xae9b3Eb616ed753dcE96C75B6AE30A60Ff9290B4\\n  address internal constant AAVE_INTEREST_RATE_STRATEGY =\\n    0xae9b3Eb616ed753dcE96C75B6AE30A60Ff9290B4;\\n\\n  // https://polygonscan.com/address/0x385Eeac5cB85A38A9a07A70c73e0a3271CfB54A7\\n  address internal constant GHST_UNDERLYING = 0x385Eeac5cB85A38A9a07A70c73e0a3271CfB54A7;\\n\\n  uint256 internal constant GHST_DECIMALS = 18;\\n\\n  // https://polygonscan.com/address/0x080b5BF8f360F624628E0fb961F4e67c9e3c7CF1\\n  address internal constant GHST_A_TOKEN = 0x080b5BF8f360F624628E0fb961F4e67c9e3c7CF1;\\n\\n  // https://polygonscan.com/address/0x36e988a38542C3482013Bb54ee46aC1fb1efedcd\\n  address internal constant GHST_V_TOKEN = 0x36e988a38542C3482013Bb54ee46aC1fb1efedcd;\\n\\n  // https://polygonscan.com/address/0x6A01Db46Ae51B19A6B85be38f1AA102d8735d05b\\n  address internal constant GHST_S_TOKEN = 0x6A01Db46Ae51B19A6B85be38f1AA102d8735d05b;\\n\\n  // https://polygonscan.com/address/0xe638249AF9642CdA55A92245525268482eE4C67b\\n  address internal constant GHST_ORACLE = 0xe638249AF9642CdA55A92245525268482eE4C67b;\\n\\n  // https://polygonscan.com/address/0xcCDb78f82EF5fECCC6864Aa00F2D7dF3FE00474C\\n  address internal constant GHST_INTEREST_RATE_STRATEGY =\\n    0xcCDb78f82EF5fECCC6864Aa00F2D7dF3FE00474C;\\n\\n  // https://polygonscan.com/address/0x9a71012B13CA4d3D0Cdc72A177DF3ef03b0E76A3\\n  address internal constant BAL_UNDERLYING = 0x9a71012B13CA4d3D0Cdc72A177DF3ef03b0E76A3;\\n\\n  uint256 internal constant BAL_DECIMALS = 18;\\n\\n  // https://polygonscan.com/address/0xc4195D4060DaEac44058Ed668AA5EfEc50D77ff6\\n  address internal constant BAL_A_TOKEN = 0xc4195D4060DaEac44058Ed668AA5EfEc50D77ff6;\\n\\n  // https://polygonscan.com/address/0x773E0e32e7b6a00b7cA9daa85dfba9D61B7f2574\\n  address internal constant BAL_V_TOKEN = 0x773E0e32e7b6a00b7cA9daa85dfba9D61B7f2574;\\n\\n  // https://polygonscan.com/address/0xbC30bbe0472E0E86b6f395f9876B950A13B23923\\n  address internal constant BAL_S_TOKEN = 0xbC30bbe0472E0E86b6f395f9876B950A13B23923;\\n\\n  // https://polygonscan.com/address/0x03CD157746c61F44597dD54C6f6702105258C722\\n  address internal constant BAL_ORACLE = 0x03CD157746c61F44597dD54C6f6702105258C722;\\n\\n  // https://polygonscan.com/address/0x8a4aC83162258E04786355163De913AbE3247CdD\\n  address internal constant BAL_INTEREST_RATE_STRATEGY = 0x8a4aC83162258E04786355163De913AbE3247CdD;\\n\\n  // https://polygonscan.com/address/0x85955046DF4668e1DD369D2DE9f3AEB98DD2A369\\n  address internal constant DPI_UNDERLYING = 0x85955046DF4668e1DD369D2DE9f3AEB98DD2A369;\\n\\n  uint256 internal constant DPI_DECIMALS = 18;\\n\\n  // https://polygonscan.com/address/0x81fB82aAcB4aBE262fc57F06fD4c1d2De347D7B1\\n  address internal constant DPI_A_TOKEN = 0x81fB82aAcB4aBE262fc57F06fD4c1d2De347D7B1;\\n\\n  // https://polygonscan.com/address/0x43150AA0B7e19293D935A412C8607f9172d3d3f3\\n  address internal constant DPI_V_TOKEN = 0x43150AA0B7e19293D935A412C8607f9172d3d3f3;\\n\\n  // https://polygonscan.com/address/0xA742710c0244a8Ebcf533368e3f0B956B6E53F7B\\n  address internal constant DPI_S_TOKEN = 0xA742710c0244a8Ebcf533368e3f0B956B6E53F7B;\\n\\n  // https://polygonscan.com/address/0xC70aAF9092De3a4E5000956E672cDf5E996B4610\\n  address internal constant DPI_ORACLE = 0xC70aAF9092De3a4E5000956E672cDf5E996B4610;\\n\\n  // https://polygonscan.com/address/0x6405F880E431403588e92b241Ca15603047ef8a4\\n  address internal constant DPI_INTEREST_RATE_STRATEGY = 0x6405F880E431403588e92b241Ca15603047ef8a4;\\n\\n  // https://polygonscan.com/address/0x172370d5Cd63279eFa6d502DAB29171933a610AF\\n  address internal constant CRV_UNDERLYING = 0x172370d5Cd63279eFa6d502DAB29171933a610AF;\\n\\n  uint256 internal constant CRV_DECIMALS = 18;\\n\\n  // https://polygonscan.com/address/0x3Df8f92b7E798820ddcCA2EBEA7BAbda2c90c4aD\\n  address internal constant CRV_A_TOKEN = 0x3Df8f92b7E798820ddcCA2EBEA7BAbda2c90c4aD;\\n\\n  // https://polygonscan.com/address/0x780BbcBCda2cdb0d2c61fd9BC68c9046B18f3229\\n  address internal constant CRV_V_TOKEN = 0x780BbcBCda2cdb0d2c61fd9BC68c9046B18f3229;\\n\\n  // https://polygonscan.com/address/0x807c97744e6C9452e7C2914d78f49d171a9974a0\\n  address internal constant CRV_S_TOKEN = 0x807c97744e6C9452e7C2914d78f49d171a9974a0;\\n\\n  // https://polygonscan.com/address/0x1CF68C76803c9A415bE301f50E82e44c64B7F1D4\\n  address internal constant CRV_ORACLE = 0x1CF68C76803c9A415bE301f50E82e44c64B7F1D4;\\n\\n  // https://polygonscan.com/address/0x3a1ea739797FcF684c0934F07A3D84C489e24022\\n  address internal constant CRV_INTEREST_RATE_STRATEGY = 0x3a1ea739797FcF684c0934F07A3D84C489e24022;\\n\\n  // https://polygonscan.com/address/0x0b3F868E0BE5597D5DB7fEB59E1CADBb0fdDa50a\\n  address internal constant SUSHI_UNDERLYING = 0x0b3F868E0BE5597D5DB7fEB59E1CADBb0fdDa50a;\\n\\n  uint256 internal constant SUSHI_DECIMALS = 18;\\n\\n  // https://polygonscan.com/address/0x21eC9431B5B55c5339Eb1AE7582763087F98FAc2\\n  address internal constant SUSHI_A_TOKEN = 0x21eC9431B5B55c5339Eb1AE7582763087F98FAc2;\\n\\n  // https://polygonscan.com/address/0x9CB9fEaFA73bF392C905eEbf5669ad3d073c3DFC\\n  address internal constant SUSHI_V_TOKEN = 0x9CB9fEaFA73bF392C905eEbf5669ad3d073c3DFC;\\n\\n  // https://polygonscan.com/address/0x7Ed588DCb30Ea11A54D8a5E9645960262A97cd54\\n  address internal constant SUSHI_S_TOKEN = 0x7Ed588DCb30Ea11A54D8a5E9645960262A97cd54;\\n\\n  // https://polygonscan.com/address/0x17414Eb5159A082e8d41D243C1601c2944401431\\n  address internal constant SUSHI_ORACLE = 0x17414Eb5159A082e8d41D243C1601c2944401431;\\n\\n  // https://polygonscan.com/address/0x835699Bf98f6a7fDe5713c42c118Fb80fA059737\\n  address internal constant SUSHI_INTEREST_RATE_STRATEGY =\\n    0x835699Bf98f6a7fDe5713c42c118Fb80fA059737;\\n\\n  // https://polygonscan.com/address/0x53E0bca35eC356BD5ddDFebbD1Fc0fD03FaBad39\\n  address internal constant LINK_UNDERLYING = 0x53E0bca35eC356BD5ddDFebbD1Fc0fD03FaBad39;\\n\\n  uint256 internal constant LINK_DECIMALS = 18;\\n\\n  // https://polygonscan.com/address/0x0Ca2e42e8c21954af73Bc9af1213E4e81D6a669A\\n  address internal constant LINK_A_TOKEN = 0x0Ca2e42e8c21954af73Bc9af1213E4e81D6a669A;\\n\\n  // https://polygonscan.com/address/0xCC71e4A38c974e19bdBC6C0C19b63b8520b1Bb09\\n  address internal constant LINK_V_TOKEN = 0xCC71e4A38c974e19bdBC6C0C19b63b8520b1Bb09;\\n\\n  // https://polygonscan.com/address/0x9fb7F546E60DDFaA242CAeF146FA2f4172088117\\n  address internal constant LINK_S_TOKEN = 0x9fb7F546E60DDFaA242CAeF146FA2f4172088117;\\n\\n  // https://polygonscan.com/address/0xb77fa460604b9C6435A235D057F7D319AC83cb53\\n  address internal constant LINK_ORACLE = 0xb77fa460604b9C6435A235D057F7D319AC83cb53;\\n\\n  // https://polygonscan.com/address/0x124e69DE782F966fbFBb6F09F92DcDd705418cc8\\n  address internal constant LINK_INTEREST_RATE_STRATEGY =\\n    0x124e69DE782F966fbFBb6F09F92DcDd705418cc8;\\n}\\n\"\r\n    },\r\n    \"lib/aave-helpers/lib/aave-address-book/src/AaveV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {AggregatorInterface} from './common/AggregatorInterface.sol';\\n\\nlibrary DataTypes {\\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    //tokens addresses\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint8 id;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: Reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60-63: reserved\\n    //bit 64-79: reserve factor\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    uint256 data;\\n  }\\n\\n  enum InterestRateMode {\\n    NONE,\\n    STABLE,\\n    VARIABLE\\n  }\\n}\\n\\n/**\\n * @title Errors library\\n * @author Aave\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - MATH = Math libraries\\n *  - CT = Common errors between tokens (AToken, VariableDebtToken and StableDebtToken)\\n *  - AT = AToken\\n *  - SDT = StableDebtToken\\n *  - VDT = VariableDebtToken\\n *  - LP = LendingPool\\n *  - LPAPR = LendingPoolAddressesProviderRegistry\\n *  - LPC = LendingPoolConfiguration\\n *  - RL = ReserveLogic\\n *  - LPCM = LendingPoolCollateralManager\\n *  - P = Pausable\\n */\\nlibrary Errors {\\n  //common errors\\n  string public constant CALLER_NOT_POOL_ADMIN = '33'; // 'The caller must be the pool admin'\\n  string public constant BORROW_ALLOWANCE_NOT_ENOUGH = '59'; // User borrows on behalf, but allowance are too small\\n\\n  //contract specific errors\\n  string public constant VL_INVALID_AMOUNT = '1'; // 'Amount must be greater than 0'\\n  string public constant VL_NO_ACTIVE_RESERVE = '2'; // 'Action requires an active reserve'\\n  string public constant VL_RESERVE_FROZEN = '3'; // 'Action cannot be performed because the reserve is frozen'\\n  string public constant VL_CURRENT_AVAILABLE_LIQUIDITY_NOT_ENOUGH = '4'; // 'The current liquidity is not enough'\\n  string public constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = '5'; // 'User cannot withdraw more than the available balance'\\n  string public constant VL_TRANSFER_NOT_ALLOWED = '6'; // 'Transfer cannot be allowed.'\\n  string public constant VL_BORROWING_NOT_ENABLED = '7'; // 'Borrowing is not enabled'\\n  string public constant VL_INVALID_INTEREST_RATE_MODE_SELECTED = '8'; // 'Invalid interest rate mode selected'\\n  string public constant VL_COLLATERAL_BALANCE_IS_0 = '9'; // 'The collateral balance is 0'\\n  string public constant VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '10'; // 'Health factor is lesser than the liquidation threshold'\\n  string public constant VL_COLLATERAL_CANNOT_COVER_NEW_BORROW = '11'; // 'There is not enough collateral to cover a new borrow'\\n  string public constant VL_STABLE_BORROWING_NOT_ENABLED = '12'; // stable borrowing not enabled\\n  string public constant VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY = '13'; // collateral is (mostly) the same currency that is being borrowed\\n  string public constant VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '14'; // 'The requested amount is greater than the max loan size in stable rate mode\\n  string public constant VL_NO_DEBT_OF_SELECTED_TYPE = '15'; // 'for repayment of stable debt, the user needs to have stable debt, otherwise, he needs to have variable debt'\\n  string public constant VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '16'; // 'To repay on behalf of an user an explicit amount to repay is needed'\\n  string public constant VL_NO_STABLE_RATE_LOAN_IN_RESERVE = '17'; // 'User does not have a stable rate loan in progress on this reserve'\\n  string public constant VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE = '18'; // 'User does not have a variable rate loan in progress on this reserve'\\n  string public constant VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0 = '19'; // 'The underlying balance needs to be greater than 0'\\n  string public constant VL_DEPOSIT_ALREADY_IN_USE = '20'; // 'User deposit is already being used as collateral'\\n  string public constant LP_NOT_ENOUGH_STABLE_BORROW_BALANCE = '21'; // 'User does not have any stable rate loan for this reserve'\\n  string public constant LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '22'; // 'Interest rate rebalance conditions were not met'\\n  string public constant LP_LIQUIDATION_CALL_FAILED = '23'; // 'Liquidation call failed'\\n  string public constant LP_NOT_ENOUGH_LIQUIDITY_TO_BORROW = '24'; // 'There is not enough liquidity available to borrow'\\n  string public constant LP_REQUESTED_AMOUNT_TOO_SMALL = '25'; // 'The requested amount is too small for a FlashLoan.'\\n  string public constant LP_INCONSISTENT_PROTOCOL_ACTUAL_BALANCE = '26'; // 'The actual balance of the protocol is inconsistent'\\n  string public constant LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR = '27'; // 'The caller of the function is not the lending pool configurator'\\n  string public constant LP_INCONSISTENT_FLASHLOAN_PARAMS = '28';\\n  string public constant CT_CALLER_MUST_BE_LENDING_POOL = '29'; // 'The caller of this function must be a lending pool'\\n  string public constant CT_CANNOT_GIVE_ALLOWANCE_TO_HIMSELF = '30'; // 'User cannot give allowance to himself'\\n  string public constant CT_TRANSFER_AMOUNT_NOT_GT_0 = '31'; // 'Transferred amount needs to be greater than zero'\\n  string public constant RL_RESERVE_ALREADY_INITIALIZED = '32'; // 'Reserve has already been initialized'\\n  string public constant LPC_RESERVE_LIQUIDITY_NOT_0 = '34'; // 'The liquidity of the reserve needs to be 0'\\n  string public constant LPC_INVALID_ATOKEN_POOL_ADDRESS = '35'; // 'The liquidity of the reserve needs to be 0'\\n  string public constant LPC_INVALID_STABLE_DEBT_TOKEN_POOL_ADDRESS = '36'; // 'The liquidity of the reserve needs to be 0'\\n  string public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_POOL_ADDRESS = '37'; // 'The liquidity of the reserve needs to be 0'\\n  string public constant LPC_INVALID_STABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = '38'; // 'The liquidity of the reserve needs to be 0'\\n  string public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = '39'; // 'The liquidity of the reserve needs to be 0'\\n  string public constant LPC_INVALID_ADDRESSES_PROVIDER_ID = '40'; // 'The liquidity of the reserve needs to be 0'\\n  string public constant LPC_INVALID_CONFIGURATION = '75'; // 'Invalid risk parameters for the reserve'\\n  string public constant LPC_CALLER_NOT_EMERGENCY_ADMIN = '76'; // 'The caller must be the emergency admin'\\n  string public constant LPAPR_PROVIDER_NOT_REGISTERED = '41'; // 'Provider is not registered'\\n  string public constant LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '42'; // 'Health factor is not below the threshold'\\n  string public constant LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED = '43'; // 'The collateral chosen cannot be liquidated'\\n  string public constant LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '44'; // 'User did not borrow the specified currency'\\n  string public constant LPCM_NOT_ENOUGH_LIQUIDITY_TO_LIQUIDATE = '45'; // \\\"There isn't enough liquidity available to liquidate\\\"\\n  string public constant LPCM_NO_ERRORS = '46'; // 'No errors'\\n  string public constant LP_INVALID_FLASHLOAN_MODE = '47'; //Invalid flashloan mode selected\\n  string public constant MATH_MULTIPLICATION_OVERFLOW = '48';\\n  string public constant MATH_ADDITION_OVERFLOW = '49';\\n  string public constant MATH_DIVISION_BY_ZERO = '50';\\n  string public constant RL_LIQUIDITY_INDEX_OVERFLOW = '51'; //  Liquidity index overflows uint128\\n  string public constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = '52'; //  Variable borrow index overflows uint128\\n  string public constant RL_LIQUIDITY_RATE_OVERFLOW = '53'; //  Liquidity rate overflows uint128\\n  string public constant RL_VARIABLE_BORROW_RATE_OVERFLOW = '54'; //  Variable borrow rate overflows uint128\\n  string public constant RL_STABLE_BORROW_RATE_OVERFLOW = '55'; //  Stable borrow rate overflows uint128\\n  string public constant CT_INVALID_MINT_AMOUNT = '56'; //invalid amount to mint\\n  string public constant LP_FAILED_REPAY_WITH_COLLATERAL = '57';\\n  string public constant CT_INVALID_BURN_AMOUNT = '58'; //invalid amount to burn\\n  string public constant LP_FAILED_COLLATERAL_SWAP = '60';\\n  string public constant LP_INVALID_EQUAL_ASSETS_TO_SWAP = '61';\\n  string public constant LP_REENTRANCY_NOT_ALLOWED = '62';\\n  string public constant LP_CALLER_MUST_BE_AN_ATOKEN = '63';\\n  string public constant LP_IS_PAUSED = '64'; // 'Pool is paused'\\n  string public constant LP_NO_MORE_RESERVES_ALLOWED = '65';\\n  string public constant LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN = '66';\\n  string public constant RC_INVALID_LTV = '67';\\n  string public constant RC_INVALID_LIQ_THRESHOLD = '68';\\n  string public constant RC_INVALID_LIQ_BONUS = '69';\\n  string public constant RC_INVALID_DECIMALS = '70';\\n  string public constant RC_INVALID_RESERVE_FACTOR = '71';\\n  string public constant LPAPR_INVALID_ADDRESSES_PROVIDER_ID = '72';\\n  string public constant VL_INCONSISTENT_FLASHLOAN_PARAMS = '73';\\n  string public constant LP_INCONSISTENT_PARAMS_LENGTH = '74';\\n  string public constant UL_INVALID_INDEX = '77';\\n  string public constant LP_NOT_CONTRACT = '78';\\n  string public constant SDT_STABLE_DEBT_OVERFLOW = '79';\\n  string public constant SDT_BURN_EXCEEDS_BALANCE = '80';\\n\\n  enum CollateralManagerErrors {\\n    NO_ERROR,\\n    NO_COLLATERAL_AVAILABLE,\\n    COLLATERAL_CANNOT_BE_LIQUIDATED,\\n    CURRRENCY_NOT_BORROWED,\\n    HEALTH_FACTOR_ABOVE_THRESHOLD,\\n    NOT_ENOUGH_LIQUIDITY,\\n    NO_ACTIVE_RESERVE,\\n    HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD,\\n    INVALID_EQUAL_ASSETS_TO_SWAP,\\n    FROZEN_RESERVE\\n  }\\n}\\n\\nlibrary ConfiguratorInputTypes {\\n  struct InitReserveInput {\\n    address aTokenImpl;\\n    address stableDebtTokenImpl;\\n    address variableDebtTokenImpl;\\n    uint8 underlyingAssetDecimals;\\n    address interestRateStrategyAddress;\\n    address underlyingAsset;\\n    address treasury;\\n    address incentivesController;\\n    string underlyingAssetName;\\n    string aTokenName;\\n    string aTokenSymbol;\\n    string variableDebtTokenName;\\n    string variableDebtTokenSymbol;\\n    string stableDebtTokenName;\\n    string stableDebtTokenSymbol;\\n    bytes params;\\n  }\\n\\n  struct UpdateATokenInput {\\n    address asset;\\n    address treasury;\\n    address incentivesController;\\n    string name;\\n    string symbol;\\n    address implementation;\\n    bytes params;\\n  }\\n\\n  struct UpdateDebtTokenInput {\\n    address asset;\\n    address incentivesController;\\n    string name;\\n    string symbol;\\n    address implementation;\\n    bytes params;\\n  }\\n}\\n\\ninterface ILendingPoolAddressesProvider {\\n  event MarketIdSet(string newMarketId);\\n  event LendingPoolUpdated(address indexed newAddress);\\n  event ConfigurationAdminUpdated(address indexed newAddress);\\n  event EmergencyAdminUpdated(address indexed newAddress);\\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n  event PriceOracleUpdated(address indexed newAddress);\\n  event LendingRateOracleUpdated(address indexed newAddress);\\n  event ProxyCreated(bytes32 id, address indexed newAddress);\\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n  function getMarketId() external view returns (string memory);\\n\\n  function setMarketId(string calldata marketId) external;\\n\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  function setAddressAsProxy(bytes32 id, address impl) external;\\n\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  function getLendingPool() external view returns (address);\\n\\n  function setLendingPoolImpl(address pool) external;\\n\\n  function getLendingPoolConfigurator() external view returns (address);\\n\\n  function setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n  function getLendingPoolCollateralManager() external view returns (address);\\n\\n  function setLendingPoolCollateralManager(address manager) external;\\n\\n  function getPoolAdmin() external view returns (address);\\n\\n  function setPoolAdmin(address admin) external;\\n\\n  function getEmergencyAdmin() external view returns (address);\\n\\n  function setEmergencyAdmin(address admin) external;\\n\\n  function getPriceOracle() external view returns (address);\\n\\n  function setPriceOracle(address priceOracle) external;\\n\\n  function getLendingRateOracle() external view returns (address);\\n\\n  function setLendingRateOracle(address lendingRateOracle) external;\\n}\\n\\ninterface ILendingPool {\\n  /**\\n   * @dev Emitted on deposit()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the deposit\\n   * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n   * @param amount The amount deposited\\n   * @param referral The referral code used\\n   **/\\n  event Deposit(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlyng asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to Address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed\\n   * @param referral The referral code used\\n   **/\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint256 borrowRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   **/\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  event Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   **/\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   **/\\n  event FlashLoan(\\n    address indexed target,\\n    address indexed initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    uint256 premium,\\n    uint16 referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when the pause is triggered.\\n   */\\n  event Paused();\\n\\n  /**\\n   * @dev Emitted when the pause is lifted.\\n   */\\n  event Unpaused();\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n   * LendingPoolCollateral manager using a DELEGATECALL\\n   * This allows to have the events in the generated ABI for LendingPool.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n   * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n   * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n   * gets added to the LendingPool ABI\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The new liquidity rate\\n   * @param stableBorrowRate The new stable borrow rate\\n   * @param variableBorrowRate The new variable borrow rate\\n   * @param liquidityIndex The new liquidity index\\n   * @param variableBorrowIndex The new variable borrow index\\n   **/\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to deposit\\n   * @param amount The amount to be deposited\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n  /**\\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to Address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(address asset, uint256 amount, address to) external returns (uint256);\\n\\n  /**\\n   * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   **/\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   **/\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 rateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  function swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n  /**\\n   * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n   *        borrowed at a stable rate and depositors are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   **/\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n   * @param asset The address of the underlying asset deposited\\n   * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n   **/\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n   * For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts amounts being flash-borrowed\\n   * @param modes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata modes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralETH the total collateral in ETH of the user\\n   * @return totalDebtETH the total debt in ETH of the user\\n   * @return availableBorrowsETH the borrowing power left of the user\\n   * @return currentLiquidationThreshold the liquidation threshold of the user\\n   * @return ltv the loan to value of the user\\n   * @return healthFactor the current health factor of the user\\n   **/\\n  function getUserAccountData(\\n    address user\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralETH,\\n      uint256 totalDebtETH,\\n      uint256 availableBorrowsETH,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  function initReserve(\\n    address reserve,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  function setReserveInterestRateStrategyAddress(\\n    address reserve,\\n    address rateStrategyAddress\\n  ) external;\\n\\n  function setConfiguration(address reserve, uint256 configuration) external;\\n\\n  /**\\n   * @dev Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   **/\\n  function getConfiguration(\\n    address asset\\n  ) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   **/\\n  function getUserConfiguration(\\n    address user\\n  ) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the normalized variable debt per unit of asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state of the reserve\\n   **/\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromAfter,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  function getReservesList() external view returns (address[] memory);\\n\\n  function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n  function setPause(bool val) external;\\n\\n  function paused() external view returns (bool);\\n}\\n\\ninterface ILendingPoolConfigurator {\\n  /**\\n   * @dev Emitted when a reserve is initialized.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param aToken The address of the associated aToken contract\\n   * @param stableDebtToken The address of the associated stable rate debt token\\n   * @param variableDebtToken The address of the associated variable rate debt token\\n   * @param interestRateStrategyAddress The address of the interest rate strategy for the reserve\\n   **/\\n  event ReserveInitialized(\\n    address indexed asset,\\n    address indexed aToken,\\n    address stableDebtToken,\\n    address variableDebtToken,\\n    address interestRateStrategyAddress\\n  );\\n\\n  /**\\n   * @dev Emitted when borrowing is enabled on a reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param stableRateEnabled True if stable rate borrowing is enabled, false otherwise\\n   **/\\n  event BorrowingEnabledOnReserve(address indexed asset, bool stableRateEnabled);\\n\\n  /**\\n   * @dev Emitted when borrowing is disabled on a reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  event BorrowingDisabledOnReserve(address indexed asset);\\n\\n  /**\\n   * @dev Emitted when the collateralization risk parameters for the specified asset are updated.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param ltv The loan to value of the asset when used as collateral\\n   * @param liquidationThreshold The threshold at which loans using this asset as collateral will be considered undercollateralized\\n   * @param liquidationBonus The bonus liquidators receive to liquidate this asset\\n   **/\\n  event CollateralConfigurationChanged(\\n    address indexed asset,\\n    uint256 ltv,\\n    uint256 liquidationThreshold,\\n    uint256 liquidationBonus\\n  );\\n\\n  /**\\n   * @dev Emitted when stable rate borrowing is enabled on a reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  event StableRateEnabledOnReserve(address indexed asset);\\n\\n  /**\\n   * @dev Emitted when stable rate borrowing is disabled on a reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  event StableRateDisabledOnReserve(address indexed asset);\\n\\n  /**\\n   * @dev Emitted when a reserve is activated\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  event ReserveActivated(address indexed asset);\\n\\n  /**\\n   * @dev Emitted when a reserve is deactivated\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  event ReserveDeactivated(address indexed asset);\\n\\n  /**\\n   * @dev Emitted when a reserve is frozen\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  event ReserveFrozen(address indexed asset);\\n\\n  /**\\n   * @dev Emitted when a reserve is unfrozen\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  event ReserveUnfrozen(address indexed asset);\\n\\n  /**\\n   * @dev Emitted when a reserve factor is updated\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param factor The new reserve factor\\n   **/\\n  event ReserveFactorChanged(address indexed asset, uint256 factor);\\n\\n  /**\\n   * @dev Emitted when the reserve decimals are updated\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param decimals The new decimals\\n   **/\\n  event ReserveDecimalsChanged(address indexed asset, uint256 decimals);\\n\\n  /**\\n   * @dev Emitted when a reserve interest strategy contract is updated\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param strategy The new address of the interest strategy contract\\n   **/\\n  event ReserveInterestRateStrategyChanged(address indexed asset, address strategy);\\n\\n  /**\\n   * @dev Emitted when an aToken implementation is upgraded\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param proxy The aToken proxy address\\n   * @param implementation The new aToken implementation\\n   **/\\n  event ATokenUpgraded(\\n    address indexed asset,\\n    address indexed proxy,\\n    address indexed implementation\\n  );\\n\\n  /**\\n   * @dev Emitted when the implementation of a stable debt token is upgraded\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param proxy The stable debt token proxy address\\n   * @param implementation The new aToken implementation\\n   **/\\n  event StableDebtTokenUpgraded(\\n    address indexed asset,\\n    address indexed proxy,\\n    address indexed implementation\\n  );\\n\\n  /**\\n   * @dev Emitted when the implementation of a variable debt token is upgraded\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param proxy The variable debt token proxy address\\n   * @param implementation The new aToken implementation\\n   **/\\n  event VariableDebtTokenUpgraded(\\n    address indexed asset,\\n    address indexed proxy,\\n    address indexed implementation\\n  );\\n\\n  /**\\n   * @dev Initializes a reserve\\n   * @param aTokenImpl  The address of the aToken contract implementation\\n   * @param stableDebtTokenImpl The address of the stable debt token contract\\n   * @param variableDebtTokenImpl The address of the variable debt token contract\\n   * @param underlyingAssetDecimals The decimals of the reserve underlying asset\\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract for this reserve\\n   **/\\n  function initReserve(\\n    address aTokenImpl,\\n    address stableDebtTokenImpl,\\n    address variableDebtTokenImpl,\\n    uint8 underlyingAssetDecimals,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  function batchInitReserve(ConfiguratorInputTypes.InitReserveInput[] calldata input) external;\\n\\n  /**\\n   * @dev Updates the aToken implementation for the reserve\\n   * @param asset The address of the underlying asset of the reserve to be updated\\n   * @param implementation The address of the new aToken implementation\\n   **/\\n  function updateAToken(address asset, address implementation) external;\\n\\n  /**\\n   * @dev Updates the stable debt token implementation for the reserve\\n   * @param asset The address of the underlying asset of the reserve to be updated\\n   * @param implementation The address of the new aToken implementation\\n   **/\\n  function updateStableDebtToken(address asset, address implementation) external;\\n\\n  /**\\n   * @dev Updates the variable debt token implementation for the asset\\n   * @param asset The address of the underlying asset of the reserve to be updated\\n   * @param implementation The address of the new aToken implementation\\n   **/\\n  function updateVariableDebtToken(address asset, address implementation) external;\\n\\n  /**\\n   * @dev Enables borrowing on a reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param stableBorrowRateEnabled True if stable borrow rate needs to be enabled by default on this reserve\\n   **/\\n  function enableBorrowingOnReserve(address asset, bool stableBorrowRateEnabled) external;\\n\\n  /**\\n   * @dev Disables borrowing on a reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  function disableBorrowingOnReserve(address asset) external;\\n\\n  /**\\n   * @dev Configures the reserve collateralization parameters\\n   * all the values are expressed in percentages with two decimals of precision. A valid value is 10000, which means 100.00%\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param ltv The loan to value of the asset when used as collateral\\n   * @param liquidationThreshold The threshold at which loans using this asset as collateral will be considered undercollateralized\\n   * @param liquidationBonus The bonus liquidators receive to liquidate this asset. The values is always above 100%. A value of 105%\\n   * means the liquidator will receive a 5% bonus\\n   **/\\n  function configureReserveAsCollateral(\\n    address asset,\\n    uint256 ltv,\\n    uint256 liquidationThreshold,\\n    uint256 liquidationBonus\\n  ) external;\\n\\n  /**\\n   * @dev Enable stable rate borrowing on a reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  function enableReserveStableRate(address asset) external;\\n\\n  /**\\n   * @dev Disable stable rate borrowing on a reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  function disableReserveStableRate(address asset) external;\\n\\n  /**\\n   * @dev Activates a reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  function activateReserve(address asset) external;\\n\\n  /**\\n   * @dev Deactivates a reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  function deactivateReserve(address asset) external;\\n\\n  /**\\n   * @dev Freezes a reserve. A frozen reserve doesn't allow any new deposit, borrow or rate swap\\n   *  but allows repayments, liquidations, rate rebalances and withdrawals\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  function freezeReserve(address asset) external;\\n\\n  /**\\n   * @dev Unfreezes a reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  function unfreezeReserve(address asset) external;\\n\\n  /**\\n   * @dev Updates the reserve factor of a reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param reserveFactor The new reserve factor of the reserve\\n   **/\\n  function setReserveFactor(address asset, uint256 reserveFactor) external;\\n\\n  /**\\n   * @dev Sets the interest rate strategy of a reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param rateStrategyAddress The new address of the interest strategy contract\\n   **/\\n  function setReserveInterestRateStrategyAddress(\\n    address asset,\\n    address rateStrategyAddress\\n  ) external;\\n\\n  /**\\n   * @dev pauses or unpauses all the actions of the protocol, including aToken transfers\\n   * @param val true if protocol needs to be paused, false otherwise\\n   **/\\n  function setPoolPause(bool val) external;\\n}\\n\\ninterface IAaveOracle {\\n  event WethSet(address indexed weth);\\n  event AssetSourceUpdated(address indexed asset, address indexed source);\\n  event FallbackOracleUpdated(address indexed fallbackOracle);\\n\\n  /// @notice Returns the WETH address (reference asset of the oracle)\\n  function WETH() external returns (address);\\n\\n  /// @notice External function called by the Aave governance to set or replace sources of assets\\n  /// @param assets The addresses of the assets\\n  /// @param sources The address of the source of each asset\\n  function setAssetSources(address[] calldata assets, address[] calldata sources) external;\\n\\n  /// @notice Sets the fallbackOracle\\n  /// - Callable only by the Aave governance\\n  /// @param fallbackOracle The address of the fallbackOracle\\n  function setFallbackOracle(address fallbackOracle) external;\\n\\n  /// @notice Gets an asset price by address\\n  /// @param asset The asset address\\n  function getAssetPrice(address asset) external view returns (uint256);\\n\\n  /// @notice Gets a list of prices from a list of assets addresses\\n  /// @param assets The list of assets addresses\\n  function getAssetsPrices(address[] calldata assets) external view returns (uint256[] memory);\\n\\n  /// @notice Gets the address of the source for an asset address\\n  /// @param asset The address of the asset\\n  /// @return address The address of the source\\n  function getSourceOfAsset(address asset) external view returns (address);\\n\\n  /// @notice Gets the address of the fallback oracle\\n  /// @return address The address of the fallback oracle\\n  function getFallbackOracle() external view returns (address);\\n}\\n\\nstruct TokenData {\\n  string symbol;\\n  address tokenAddress;\\n}\\n\\n// TODO: incomplete interface\\ninterface IAaveProtocolDataProvider {\\n  function getReserveConfigurationData(\\n    address asset\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 decimals,\\n      uint256 ltv,\\n      uint256 liquidationThreshold,\\n      uint256 liquidationBonus,\\n      uint256 reserveFactor,\\n      bool usageAsCollateralEnabled,\\n      bool borrowingEnabled,\\n      bool stableBorrowRateEnabled,\\n      bool isActive,\\n      bool isFrozen\\n    );\\n\\n  function getAllReservesTokens() external view returns (TokenData[] memory);\\n\\n  function getReserveTokensAddresses(\\n    address asset\\n  )\\n    external\\n    view\\n    returns (\\n      address aTokenAddress,\\n      address stableDebtTokenAddress,\\n      address variableDebtTokenAddress\\n    );\\n\\n  function getUserReserveData(\\n    address asset,\\n    address user\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 currentATokenBalance,\\n      uint256 currentStableDebt,\\n      uint256 currentVariableDebt,\\n      uint256 principalStableDebt,\\n      uint256 scaledVariableDebt,\\n      uint256 stableBorrowRate,\\n      uint256 liquidityRate,\\n      uint40 stableRateLastUpdated,\\n      bool usageAsCollateralEnabled\\n    );\\n}\\n\\ninterface ILendingRateOracle {\\n  /**\\n    @dev returns the market borrow rate in ray\\n    **/\\n  function getMarketBorrowRate(address asset) external view returns (uint256);\\n\\n  /**\\n    @dev sets the market borrow rate. Rate value must be in ray\\n    **/\\n  function setMarketBorrowRate(address asset, uint256 rate) external;\\n}\\n\\ninterface IDefaultInterestRateStrategy {\\n  function EXCESS_UTILIZATION_RATE() external view returns (uint256);\\n\\n  function OPTIMAL_UTILIZATION_RATE() external view returns (uint256);\\n\\n  function addressesProvider() external view returns (address);\\n\\n  function baseVariableBorrowRate() external view returns (uint256);\\n\\n  function calculateInterestRates(\\n    address reserve,\\n    uint256 availableLiquidity,\\n    uint256 totalStableDebt,\\n    uint256 totalVariableDebt,\\n    uint256 averageStableBorrowRate,\\n    uint256 reserveFactor\\n  ) external view returns (uint256, uint256, uint256);\\n\\n  function getMaxVariableBorrowRate() external view returns (uint256);\\n\\n  function stableRateSlope1() external view returns (uint256);\\n\\n  function stableRateSlope2() external view returns (uint256);\\n\\n  function variableRateSlope1() external view returns (uint256);\\n\\n  function variableRateSlope2() external view returns (uint256);\\n}\\n\\ninterface IATokenV2 {\\n  /**\\n   * @dev Emitted after the mint action\\n   * @param from The address performing the mint\\n   * @param value The amount being\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event Mint(address indexed from, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Emitted after aTokens are burned\\n   * @param from The owner of the aTokens, getting them burned\\n   * @param target The address that will receive the underlying\\n   * @param value The amount being burned\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event Burn(address indexed from, address indexed target, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Emitted during the transfer action\\n   * @param from The user whose tokens are being transferred\\n   * @param to The recipient\\n   * @param value The amount being transferred\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Mints `amount` aTokens to `user`\\n   * @param user The address receiving the minted tokens\\n   * @param amount The amount of tokens getting minted\\n   * @param index The new liquidity index of the reserve\\n   * @return `true` if the the previous balance of the user was 0\\n   */\\n  function mint(address user, uint256 amount, uint256 index) external returns (bool);\\n\\n  /**\\n   * @dev Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n   * @param user The owner of the aTokens, getting them burned\\n   * @param receiverOfUnderlying The address that will receive the underlying\\n   * @param amount The amount being burned\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  function burn(address user, address receiverOfUnderlying, uint256 amount, uint256 index) external;\\n\\n  /**\\n   * @dev Mints aTokens to the reserve treasury\\n   * @param amount The amount of tokens getting minted\\n   * @param index The new liquidity index of the reserve\\n   */\\n  function mintToTreasury(uint256 amount, uint256 index) external;\\n\\n  /**\\n   * @dev Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\\n   * @param from The address getting liquidated, current owner of the aTokens\\n   * @param to The recipient\\n   * @param value The amount of tokens getting transferred\\n   **/\\n  function transferOnLiquidation(address from, address to, uint256 value) external;\\n\\n  /**\\n   * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\\n   * assets in borrow(), withdraw() and flashLoan()\\n   * @param user The recipient of the underlying\\n   * @param amount The amount getting transferred\\n   * @return The amount transferred\\n   **/\\n  function transferUnderlyingTo(address user, uint256 amount) external returns (uint256);\\n\\n  /**\\n   * @dev Invoked to execute actions on the aToken side after a repayment.\\n   * @param user The user executing the repayment\\n   * @param amount The amount getting repaid\\n   **/\\n  function handleRepayment(address user, uint256 amount) external;\\n\\n  /**\\n   * @dev Returns the nonce of the given user.\\n   * @param user The user to fetch the nonce for.\\n   */\\n  function _nonces(address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the address of the incentives controller contract\\n   **/\\n  function getIncentivesController() external view returns (IAaveIncentivesController);\\n\\n  /**\\n   * @dev Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n   **/\\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\\ninterface IAaveIncentivesController {\\n  event RewardsAccrued(address indexed user, uint256 amount);\\n\\n  event RewardsClaimed(address indexed user, address indexed to, uint256 amount);\\n\\n  event RewardsClaimed(\\n    address indexed user,\\n    address indexed to,\\n    address indexed claimer,\\n    uint256 amount\\n  );\\n\\n  event ClaimerSet(address indexed user, address indexed claimer);\\n\\n  /*\\n   * @dev Returns the configuration of the distribution for a certain asset\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The asset index, the emission per second and the last updated timestamp\\n   **/\\n  function getAssetData(address asset) external view returns (uint256, uint256, uint256);\\n\\n  /*\\n   * LEGACY **************************\\n   * @dev Returns the configuration of the distribution for a certain asset\\n   * @param asset The address of the reference asset of the distribution\\n   * @return The asset index, the emission per second and the last updated timestamp\\n   **/\\n  function assets(address asset) external view returns (uint128, uint128, uint256);\\n\\n  /**\\n   * @dev Whitelists an address to claim the rewards on behalf of another address\\n   * @param user The address of the user\\n   * @param claimer The address of the claimer\\n   */\\n  function setClaimer(address user, address claimer) external;\\n\\n  /**\\n   * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n   * @param user The address of the user\\n   * @return The claimer address\\n   */\\n  function getClaimer(address user) external view returns (address);\\n\\n  /**\\n   * @dev Configure assets for a certain rewards emission\\n   * @param assets The assets to incentivize\\n   * @param emissionsPerSecond The emission for each asset\\n   */\\n  function configureAssets(\\n    address[] calldata assets,\\n    uint256[] calldata emissionsPerSecond\\n  ) external;\\n\\n  /**\\n   * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n   * @param asset The address of the user\\n   * @param userBalance The balance of the user of the asset in the lending pool\\n   * @param totalSupply The total supply of the asset in the lending pool\\n   **/\\n  function handleAction(address asset, uint256 userBalance, uint256 totalSupply) external;\\n\\n  /**\\n   * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n   * @param user The address of the user\\n   * @return The rewards\\n   **/\\n  function getRewardsBalance(\\n    address[] calldata assets,\\n    address user\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n   * @param amount Amount of rewards to claim\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function claimRewards(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n   * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n   * @param amount Amount of rewards to claim\\n   * @param user Address to check and claim rewards\\n   * @param to Address that will be receiving the rewards\\n   * @return Rewards claimed\\n   **/\\n  function claimRewardsOnBehalf(\\n    address[] calldata assets,\\n    uint256 amount,\\n    address user,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev returns the unclaimed rewards of the user\\n   * @param user the address of the user\\n   * @return the unclaimed user rewards\\n   */\\n  function getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n  /**\\n   * @dev returns the unclaimed rewards of the user\\n   * @param user the address of the user\\n   * @param asset The asset to incentivize\\n   * @return the user index for the asset\\n   */\\n  function getUserAssetData(address user, address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev for backward compatibility with previous implementation of the Incentives controller\\n   */\\n  function REWARD_TOKEN() external view returns (address);\\n\\n  /**\\n   * @dev for backward compatibility with previous implementation of the Incentives controller\\n   */\\n  function PRECISION() external view returns (uint8);\\n\\n  /**\\n   * @dev Gets the distribution end timestamp of the emissions\\n   */\\n  function DISTRIBUTION_END() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/aave-helpers/lib/aave-address-book/src/common/ICollector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\n/**\\n * @title ICollector\\n * @notice Defines the interface of the Collector contract\\n * @author Aave\\n **/\\ninterface ICollector {\\n  struct Stream {\\n    uint256 deposit;\\n    uint256 ratePerSecond;\\n    uint256 remainingBalance;\\n    uint256 startTime;\\n    uint256 stopTime;\\n    address recipient;\\n    address sender;\\n    address tokenAddress;\\n    bool isEntity;\\n  }\\n\\n  /** @notice Emitted when the funds admin changes\\n   * @param fundsAdmin The new funds admin.\\n   **/\\n  event NewFundsAdmin(address indexed fundsAdmin);\\n\\n  /** @notice Emitted when the new stream is created\\n   * @param streamId The identifier of the stream.\\n   * @param sender The address of the collector.\\n   * @param recipient The address towards which the money is streamed.\\n   * @param deposit The amount of money to be streamed.\\n   * @param tokenAddress The ERC20 token to use as streaming currency.\\n   * @param startTime The unix timestamp for when the stream starts.\\n   * @param stopTime The unix timestamp for when the stream stops.\\n   **/\\n  event CreateStream(\\n    uint256 indexed streamId,\\n    address indexed sender,\\n    address indexed recipient,\\n    uint256 deposit,\\n    address tokenAddress,\\n    uint256 startTime,\\n    uint256 stopTime\\n  );\\n\\n  /**\\n   * @notice Emmitted when withdraw happens from the contract to the recipient's account.\\n   * @param streamId The id of the stream to withdraw tokens from.\\n   * @param recipient The address towards which the money is streamed.\\n   * @param amount The amount of tokens to withdraw.\\n   */\\n  event WithdrawFromStream(uint256 indexed streamId, address indexed recipient, uint256 amount);\\n\\n  /**\\n   * @notice Emmitted when the stream is canceled.\\n   * @param streamId The id of the stream to withdraw tokens from.\\n   * @param sender The address of the collector.\\n   * @param recipient The address towards which the money is streamed.\\n   * @param senderBalance The sender's balance at the moment of cancelling.\\n   * @param recipientBalance The recipient's balance at the moment of cancelling.\\n   */\\n  event CancelStream(\\n    uint256 indexed streamId,\\n    address indexed sender,\\n    address indexed recipient,\\n    uint256 senderBalance,\\n    uint256 recipientBalance\\n  );\\n\\n  /** @notice Returns the mock ETH reference address\\n   * @return address The address\\n   **/\\n  function ETH_MOCK_ADDRESS() external pure returns (address);\\n\\n  /** @notice Initializes the contracts\\n   * @param fundsAdmin Funds admin address\\n   * @param nextStreamId StreamId to set, applied if greater than 0\\n   **/\\n  function initialize(address fundsAdmin, uint256 nextStreamId) external;\\n\\n  /**\\n   * @notice Return the funds admin, only entity to be able to interact with this contract (controller of reserve)\\n   * @return address The address of the funds admin\\n   **/\\n  function getFundsAdmin() external view returns (address);\\n\\n  /**\\n   * @notice Returns the available funds for the given stream id and address.\\n   * @param streamId The id of the stream for which to query the balance.\\n   * @param who The address for which to query the balance.\\n   * @notice Returns the total funds allocated to `who` as uint256.\\n   */\\n  function balanceOf(uint256 streamId, address who) external view returns (uint256 balance);\\n\\n  /**\\n   * @dev Function for the funds admin to give ERC20 allowance to other parties\\n   * @param token The address of the token to give allowance from\\n   * @param recipient Allowance's recipient\\n   * @param amount Allowance to approve\\n   **/\\n  function approve(\\n    //IERC20 token,\\n    address token,\\n    address recipient,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n   * @notice Function for the funds admin to transfer ERC20 tokens to other parties\\n   * @param token The address of the token to transfer\\n   * @param recipient Transfer's recipient\\n   * @param amount Amount to transfer\\n   **/\\n  function transfer(\\n    //IERC20 token,\\n    address token,\\n    address recipient,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n   * @dev Transfer the ownership of the funds administrator role.\\n          This function should only be callable by the current funds administrator.\\n   * @param admin The address of the new funds administrator\\n   */\\n  function setFundsAdmin(address admin) external;\\n\\n  /**\\n   * @notice Creates a new stream funded by this contracts itself and paid towards `recipient`.\\n   * @param recipient The address towards which the money is streamed.\\n   * @param deposit The amount of money to be streamed.\\n   * @param tokenAddress The ERC20 token to use as streaming currency.\\n   * @param startTime The unix timestamp for when the stream starts.\\n   * @param stopTime The unix timestamp for when the stream stops.\\n   * @return streamId the uint256 id of the newly created stream.\\n   */\\n  function createStream(\\n    address recipient,\\n    uint256 deposit,\\n    address tokenAddress,\\n    uint256 startTime,\\n    uint256 stopTime\\n  ) external returns (uint256 streamId);\\n\\n  /**\\n   * @notice Returns the stream with all its properties.\\n   * @dev Throws if the id does not point to a valid stream.\\n   * @param streamId The id of the stream to query.\\n   * @notice Returns the stream object.\\n   */\\n  function getStream(\\n    uint256 streamId\\n  )\\n    external\\n    view\\n    returns (\\n      address sender,\\n      address recipient,\\n      uint256 deposit,\\n      address tokenAddress,\\n      uint256 startTime,\\n      uint256 stopTime,\\n      uint256 remainingBalance,\\n      uint256 ratePerSecond\\n    );\\n\\n  /**\\n   * @notice Withdraws from the contract to the recipient's account.\\n   * @param streamId The id of the stream to withdraw tokens from.\\n   * @param amount The amount of tokens to withdraw.\\n   * @return bool Returns true if successful.\\n   */\\n  function withdrawFromStream(uint256 streamId, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @notice Cancels the stream and transfers the tokens back on a pro rata basis.\\n   * @param streamId The id of the stream to cancel.\\n   * @return bool Returns true if successful.\\n   */\\n  function cancelStream(uint256 streamId) external returns (bool);\\n\\n  /**\\n   * @notice Returns the next available stream id\\n   * @return nextStreamId Returns the stream id.\\n   */\\n  function getNextStreamId() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/aave-helpers/lib/aave-address-book/src/common/AggregatorInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@aave/core-v3/=lib/aave-helpers/lib/aave-address-book/lib/aave-v3-core/\",\r\n      \"@aave/periphery-v3/=lib/aave-helpers/lib/aave-address-book/lib/aave-v3-periphery/\",\r\n      \"aave-address-book/=lib/aave-helpers/lib/aave-address-book/src/\",\r\n      \"aave-helpers/=lib/aave-helpers/src/\",\r\n      \"aave-v3-core/=lib/aave-helpers/lib/aave-address-book/lib/aave-v3-core/\",\r\n      \"aave-v3-periphery/=lib/aave-helpers/lib/aave-address-book/lib/aave-v3-periphery/\",\r\n      \"ds-test/=lib/aave-helpers/lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/aave-helpers/lib/forge-std/src/\",\r\n      \"solidity-utils/=lib/aave-helpers/lib/solidity-utils/src/\",\r\n      \"governance-crosschain-bridges/=lib/aave-helpers/lib/governance-crosschain-bridges/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NEW_COLLATERAL_MANAGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "V2PolLiquidationSentinelPayload", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000060ee8b61a13c67d0191c851bec8f0bc850160710", "EVMVersion": "istanbul", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}