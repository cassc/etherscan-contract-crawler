{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Validator/WhitelistValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.13;\\n\\nimport {IValidator} from \\\"./IValidator.sol\\\";\\n\\ncontract WhitelistValidator is IValidator {\\n    /// -----------------------------------------------------------------------\\n    /// Errors\\n    /// -----------------------------------------------------------------------\\n\\n    /// The ipfs hash provided hash a wrong length\\n    error WrongIPFSLength();\\n    /// The address provided does not correspond to any whitelisted editor\\n    error EditorNotWhitelisted();\\n\\n    /// -----------------------------------------------------------------------\\n    /// Storage variables\\n    /// -----------------------------------------------------------------------\\n\\n    address public owner;\\n    mapping(address => bool) whitelistedAddresses;\\n\\n    /// -----------------------------------------------------------------------\\n    /// Constructor\\n    /// -----------------------------------------------------------------------\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// Modifiers\\n    /// -----------------------------------------------------------------------\\n\\n    /// @notice Check if the contract caller is the owner\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner.\\\");\\n        _;\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// External functions\\n    /// -----------------------------------------------------------------------\\n\\n    /// @notice Add a new editor to the whitelist\\n    /// @param editorAddress the address of the editor\\n    function whitelistEditor(address editorAddress) external onlyOwner {\\n        whitelistedAddresses[editorAddress] = true;\\n    }\\n\\n    /// @notice Delete a whitelisted editor\\n    /// @param editorAddress the address of the editor\\n    function unWhitelistEditor(address editorAddress) external onlyOwner {\\n        delete whitelistedAddresses[editorAddress];\\n    }\\n\\n    /// @notice Set owner to a different address\\n    /// @param newOwner the address of the new owner\\n    function setOwner(address newOwner) external onlyOwner {\\n        owner = newOwner;\\n    }\\n\\n    /// @notice Review that an editor can post a wiki based in previous edits\\n    /// @param _user The user to approve the module for\\n    /// @param _ipfs The IPFS Hash\\n    function validate(address _user, string calldata _ipfs) external returns (bool) {\\n        if (!whitelistedAddresses[_user]) {\\n            revert EditorNotWhitelisted();\\n        }\\n\\n        bytes memory _ipfsBytes = bytes(_ipfs);\\n        if (_ipfsBytes.length != 46) {\\n            revert WrongIPFSLength();\\n        }\\n        return true;\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// View functions\\n    /// -----------------------------------------------------------------------\\n\\n    /// @notice Check if the editor is whitelisted\\n    /// @param editorAddress the address of the editor\\n    function isEditorWhitelisted(address editorAddress) external view returns (bool) {\\n        return whitelistedAddresses[editorAddress];\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Validator/IValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.13;\\n\\ninterface IValidator {\\n    function validate(address _user, string calldata _ipfs) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ERC721A/=lib/ERC721A/contracts/\",\r\n      \"ds-test/=lib/solmate/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"prb-test/=lib/prb-test/src/\",\r\n      \"solmate/=lib/solmate/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20000\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EditorNotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongIPFSLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"editorAddress\",\"type\":\"address\"}],\"name\":\"isEditorWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"editorAddress\",\"type\":\"address\"}],\"name\":\"unWhitelistEditor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_ipfs\",\"type\":\"string\"}],\"name\":\"validate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"editorAddress\",\"type\":\"address\"}],\"name\":\"whitelistEditor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WhitelistValidator", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}