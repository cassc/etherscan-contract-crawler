{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Marketplace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n// import \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./utils/IBalanceVault.sol\\\";\\nimport \\\"./utils/IItemVault.sol\\\";\\n\\n/**\\n * @dev Smart Contract let user buy and sell their game items.\\n * Has a function to initialize values in upgradable Smart Contract.\\n * Has a function to set and get publication fee when user creates a order in marketpalce.\\n * Has a function to set share owner will get when user successfully sell an item.\\n * Has a function to create order to sell item on marketpalce.\\n * Has a function to cancel order on marketplace.\\n * Has a function to execute(buy) order in marketplace.\\n * The purpose of this function is for user to able to buy or sell item in our platform.\\n */\\ncontract Marketplace is OwnableUpgradeable,ReentrancyGuardUpgradeable {\\n\\n\\n    /**\\n     * @dev use interface to set vault\\n     * IBalanceVault - set intetface for vaultBalance\\n     * IItemVault - set intetface for vaultItem\\n    */\\n    address public _Owner;\\n    IBalanceVault public vaultBalance;\\n    IItemVault public vaultItem;\\n\\n    bool internal _paused;\\n\\n    struct Order {\\n        bytes32 id;\\n        address seller;\\n        uint256 itemId;\\n        uint256 itemAmount;\\n        uint256 price;\\n    } \\n\\n    mapping (address => mapping(bytes32 => Order)) public orderByOrderId;\\n    uint256 public ownerCutPerMillion;\\n    uint256 public publicationFeeInWei;\\n  \\n    bytes32 public constant VAULT_ADMIN = keccak256(\\\"VAULT_ADMIN\\\");\\n    \\n    /**\\n     * @dev Declare event for use emit `SetVaultBalanceAddress`, `SetVaultItemAddress`, `OrderCreated`, `OrderCancelled`, `OrderExecuted`, `OrderDetail`, `MarketplacePaused`, `MarketplaceUnpaused`, `ChangePublicationFee`, `ChangeOwnerCutPerMillion`.\\n     */\\n    event SetVaultBalanceAddress(address indexed vaultAddress);\\n    event SetVaultItemAddress(address indexed vaultAddress);\\n    event OrderCreated(bytes32 orderId, address indexed seller, uint256 itemId, uint256 itemAmount, uint256 nakaAmountToitem);\\n    event OrderCancelled(bytes32 orderId, address indexed seller, uint256 itemId, uint256 itemAmount);\\n    event OrderExecuted(bytes32 orderId, address indexed buyer, address indexed seller, uint256 itemId, uint256 itemAmount, uint256 buyItemAmount ,uint256 totalPriceNaka,uint256 ownerCutPerMillion);\\n    event OrderDetail(bytes32 orderId, address indexed seller, uint256 itemId, uint256 itemAmount, uint256 nakaAmount);\\n    event ChangePublicationFee(uint256 newPublicationFeeInWei);\\n    event ChangeOwnerCutPerMillion(uint256 newOwnerCutPerMillion);\\n   \\n  \\n    event MarketplacePaused();\\n    event MarketplaceUnpaused();\\n\\n    /*\\n     * Network: Polygon Mainnet\\n     */\\n    /** \\n    * @dev Sets the value of the `admin`, `tokenAddress`, `publicationFeeInWeiNFT` and `ownerCutPerMillionNFT`.\\n    * @param _vaultBalanceAddress - balance vault address.\\n    * @param _vaultItemAddress - item vault address.\\n    * @param _publicationFee - publication fee when create order.\\n    * @param _ownerCutPerMillion - share sent to owner when order successfully executed.\\n    * @param _owner - admin address.\\n    */\\n    function initialize(\\n         address _vaultBalanceAddress,\\n         address _vaultItemAddress,\\n         uint256 _publicationFee,\\n         uint256 _ownerCutPerMillion,\\n         address _owner\\n    ) public initializer {\\n        vaultBalance = IBalanceVault(_vaultBalanceAddress);\\n        // emit SetVaultBalanceAddress(address(vaultBalance));\\n\\n        vaultItem = IItemVault(_vaultItemAddress);\\n        // emit SetVaultItemAddress(address(vaultItem));\\n\\n        // _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _Owner = _owner;\\n\\n        publicationFeeInWei = _publicationFee;\\n        // setOwnerCutPerMillion(publicationFeeInWei);\\n        \\n        ownerCutPerMillion = _ownerCutPerMillion;\\n        // setOwnerCutPerMillion(ownerCutPerMillion);\\n\\n      ///@dev as there is no constructor, we need to initialise the OwnableUpgradeable explicitly\\n       __Ownable_init();\\n   }\\n\\n    /**\\n    * @dev Modifier to only allow the function to be executed when it isn't paused.\\n    */\\n    modifier whenMarketplaceNotPaused() {\\n        require(!_paused, \\\"[Marketplace.whenMarketplaceNotPaused] Not Paused\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Modifier to only allow the function to be executed when it is paused.\\n    */\\n    modifier whenMarketplacePaused() {\\n        require(_paused, \\\"[Marketplace.whenMarketplacePaused] Paused\\\");\\n        _;\\n    }\\n   \\n    /**\\n     * @dev Set publication fee that will be sent to admin when create order on marketplace\\n     * Emit value of publication fee.\\n     * Can only be called by owner.\\n     * @param _publicationFee - publication fee\\n     */\\n    function setPublicationFee(uint256 _publicationFee) external onlyOwner {\\n        publicationFeeInWei = _publicationFee;\\n        emit ChangePublicationFee(publicationFeeInWei);\\n    }\\n\\n    /**\\n     * @dev Get publicationFeeInWei's value.\\n     */\\n    function getPublicationFee() external view returns (uint256) {\\n        return publicationFeeInWei;\\n    }\\n  \\n    /**\\n     * @dev Set share per million that will be sent to admin when an order is successfully executed.\\n     * Emit value of ownerCutPerMillionNFT.\\n     * Can only be called by owner.\\n     * @param _ownerCutPerMillion - share that will be cut per million\\n     */\\n    function setOwnerCutPerMillion(uint256 _ownerCutPerMillion) public onlyOwner {\\n        require(_ownerCutPerMillion < 1000000, \\\"The owner cut should be between 0 and 999,999\\\");\\n\\n        ownerCutPerMillion = _ownerCutPerMillion;\\n        emit ChangeOwnerCutPerMillion(ownerCutPerMillion);\\n    }\\n\\n    /**\\n     * @dev Get ownerCutPerMillion's value.\\n     */\\n    function getOwnerCutPerMillion() external view returns(uint256) {\\n        return ownerCutPerMillion;\\n    }\\n\\n    /**\\n     * @dev Create order on marketplace for selling item.\\n     * Emit details of createded Order.\\n     * @param _itemId - item id of specific item.\\n     * @param _itemAmount - amount of item to sell.\\n     * @param _nakaAmount - Naka token amount of each items user want to sell.\\n     * @return order - creaded order\\n     */\\n    function createOrder (uint256 _itemId, uint256 _itemAmount, uint256 _nakaAmount) public whenMarketplaceNotPaused returns (Order memory) {\\n            bytes32 _orderId = keccak256(\\n                abi.encodePacked(\\n                block.timestamp,\\n                _itemId,\\n                msg.sender,\\n                _nakaAmount\\n            )\\n        );\\n\\n        vaultItem.decreaseItem(msg.sender, _itemId, _itemAmount);\\n\\n        if (publicationFeeInWei >= 0) {\\n            vaultBalance.decreaseBalance(msg.sender,publicationFeeInWei);\\n            vaultBalance.increaseBalance(_Owner,publicationFeeInWei);\\n        }\\n\\n        Order memory order = orderByOrderId[msg.sender][_orderId] = Order({\\n            id: _orderId,\\n            seller: msg.sender,\\n            itemId: _itemId,\\n            itemAmount:_itemAmount,\\n            price: _nakaAmount\\n        });\\n\\n        emit OrderCreated(_orderId, msg.sender, _itemId, _itemAmount, _nakaAmount);\\n\\n        return order;\\n    }\\n\\n    /**\\n     * @dev Cancel order on marketplace.\\n     * Emit details of canceled Order.\\n     * @param _sellerAccount - seller's address\\n     * @param _orderId - order id in marketpalce\\n     * @return order - cancelled order\\n     */\\n    function cancelOrder(address _sellerAccount ,bytes32 _orderId) public whenMarketplaceNotPaused returns (Order memory) {\\n        Order memory order = orderByOrderId[_sellerAccount][_orderId] ;\\n\\n        require(order.id != 0, \\\"Asset not published\\\");\\n        require(order.seller == msg.sender, \\\"Unauthorized user\\\");\\n\\n        vaultItem.increaseItem(order.seller, order.itemId, order.itemAmount);\\n        delete orderByOrderId[order.seller][_orderId];\\n\\n        emit OrderCancelled(order.id, order.seller, order.itemId, order.itemAmount);\\n\\n        return order;\\n    }\\n   \\n    /**\\n     * @dev Execute order on marketplace.\\n     * Emit details of executed Order.\\n     * @param _sellerAccount - seller's address\\n     * @param _orderId - order id in marketpalce\\n     * @param _itemAmount - itemAmount to buy\\n     * @return order - cancelled order\\n     */\\n    function executeOrder(address _sellerAccount, bytes32 _orderId , uint256 _itemAmount) public whenMarketplaceNotPaused returns (Order memory) {\\n        uint saleShareAmount = 0;\\n        \\n        Order memory order = orderByOrderId[_sellerAccount][_orderId];\\n        require(order.id != 0, \\\"Asset not published\\\");\\n        require (order.itemAmount >= _itemAmount, \\\"Item in order not enough\\\");\\n        order.itemAmount -= _itemAmount;\\n        orderByOrderId[_sellerAccount][_orderId] = Order({\\n            id: order.id,\\n            seller: order.seller,\\n            itemId: order.itemId,\\n            itemAmount: order.itemAmount,\\n            price: order.price\\n        });\\n        uint totalPrice  = order.price * _itemAmount;\\n        vaultBalance.decreaseBalance(msg.sender,totalPrice);\\n        vaultItem.increaseItem(msg.sender,order.itemId,_itemAmount);\\n        vaultBalance.increaseBalance(order.seller,totalPrice);\\n        \\n        \\n        if (ownerCutPerMillion >= 0) {\\n            saleShareAmount = (totalPrice *(ownerCutPerMillion))/(1000000);\\n            vaultBalance.decreaseBalance(order.seller,saleShareAmount);\\n            vaultBalance.increaseBalance(_Owner,saleShareAmount);\\n        }\\n\\n        if(order.itemAmount == 0){\\n            delete orderByOrderId[_sellerAccount][_orderId];\\n        }\\n\\n        emit OrderExecuted(order.id, msg.sender, order.seller, order.itemId, order.itemAmount, _itemAmount ,totalPrice, saleShareAmount);\\n        return order;\\n    }\\n\\n    /**\\n     * @dev Get info of an order\\n     * Emit order detail\\n     * @param _sellerAccount - seller's address\\n     * @param _orderId - order id in marketpalce\\n     * @return order - cancelled order\\n     */\\n    function getOrderInfo(address _sellerAccount, bytes32 _orderId) external returns (Order memory) {\\n        Order memory order = orderByOrderId[_sellerAccount][_orderId];\\n\\n        require(order.id != 0, \\\"Asset not published\\\");\\n\\n        emit OrderDetail(order.id, order.seller, order.itemId, order.itemAmount, order.price);\\n\\n        return order;\\n    }\\n\\n    /**\\n    * @dev Function to pause functions in this contract.\\n    * can only be called by the creator of contract.\\n    */\\n    function pauseMarketplace() external onlyOwner whenMarketplaceNotPaused {\\n        _paused = true;\\n        emit MarketplacePaused();\\n    }\\n\\n    /**\\n    * @dev Function to unpause functions in this contract.\\n    * can only be called by the creator of contract.\\n    */\\n    function unpauseMarketplace() external onlyOwner whenMarketplacePaused {\\n        _paused = false;\\n        emit MarketplaceUnpaused();\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/IBalanceVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\ninterface IBalanceVault{\\n    function depositNaka(uint256 _nakaAmount) external;\\n\\n    function withdrawNaka(uint256 _nakaAmount) external;\\n\\n    function increaseBalance(address _userAddress, uint256 _nakaAmount) external;\\n\\n    function decreaseBalance(address _userAddress, uint256 _nakaAmount) external;\\n\\n    function getBalance(address _address) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/utils/IItemVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\ninterface IItemVault{\\n    function increaseItem(address _userAddress, uint256 _itemId, uint256 _itemAmount) external;\\n\\n    function decreaseItem(address _userAddress, uint256 _itemId, uint256 _itemAmount) external;\\n\\n    function getItemAmountbyId(address _userAddress, uint256 _itemId) external view returns (uint256);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newOwnerCutPerMillion\",\"type\":\"uint256\"}],\"name\":\"ChangeOwnerCutPerMillion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPublicationFeeInWei\",\"type\":\"uint256\"}],\"name\":\"ChangePublicationFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MarketplacePaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MarketplaceUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemAmount\",\"type\":\"uint256\"}],\"name\":\"OrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nakaAmountToitem\",\"type\":\"uint256\"}],\"name\":\"OrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nakaAmount\",\"type\":\"uint256\"}],\"name\":\"OrderDetail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyItemAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPriceNaka\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ownerCutPerMillion\",\"type\":\"uint256\"}],\"name\":\"OrderExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"}],\"name\":\"SetVaultBalanceAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"}],\"name\":\"SetVaultItemAddress\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VAULT_ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sellerAccount\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"cancelOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct Marketplace.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_itemAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nakaAmount\",\"type\":\"uint256\"}],\"name\":\"createOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct Marketplace.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sellerAccount\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_itemAmount\",\"type\":\"uint256\"}],\"name\":\"executeOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct Marketplace.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sellerAccount\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"getOrderInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct Marketplace.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnerCutPerMillion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPublicationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultBalanceAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultItemAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_publicationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ownerCutPerMillion\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orderByOrderId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerCutPerMillion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseMarketplace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicationFeeInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ownerCutPerMillion\",\"type\":\"uint256\"}],\"name\":\"setOwnerCutPerMillion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_publicationFee\",\"type\":\"uint256\"}],\"name\":\"setPublicationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseMarketplace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultBalance\",\"outputs\":[{\"internalType\":\"contract IBalanceVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultItem\",\"outputs\":[{\"internalType\":\"contract IItemVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Marketplace", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}