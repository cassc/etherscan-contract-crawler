{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/strategies/lbl/dforce/DForceStatistics.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"../../../StatisticsBase.sol\\\";\\r\\nimport \\\"../../../interfaces/IDForce.sol\\\";\\r\\n\\r\\ncontract DForceStatistics is StatisticsBase {\\r\\n    using SafeRatioMath for uint256;\\r\\n\\r\\n    address public swapRouterDF; // deprecated\\r\\n    address[] public pathToSwapDFToStableCoin; // deprecated\\r\\n    address private iDF;\\r\\n\\r\\n    /*** Public Set function ***/\\r\\n\\r\\n    function setRewardsXToken(address _iDF) external onlyOwnerAndAdmin {\\r\\n        iDF = _iDF;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice get USD price by Oracle\\r\\n     * @param xToken xToken address\\r\\n     * @param comptroller comptroller address\\r\\n     * @return priceUSD USD price for xToken (decimal = 18 + (18 - decimal of underlying))\\r\\n     */\\r\\n    function _getUnderlyingUSDPrice(address xToken, address comptroller)\\r\\n        internal\\r\\n        view\\r\\n        override\\r\\n        returns (uint256 priceUSD)\\r\\n    {\\r\\n        address priceOracle = IComptrollerDForce(comptroller).priceOracle();\\r\\n        priceUSD = uint256(\\r\\n            IDForcePriceModel(\\r\\n                IDForcePriceOracle(priceOracle).priceModel(xToken)\\r\\n            ).getAssetPrice(xToken)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice get rewards underlying token of startegy\\r\\n     * @param comptroller comptroller address\\r\\n     * @return rewardsToken rewards token address\\r\\n     */\\r\\n    function _getRewardsToken(address comptroller)\\r\\n        internal\\r\\n        view\\r\\n        override\\r\\n        returns (address rewardsToken)\\r\\n    {\\r\\n        rewardsToken = IDistributionDForce(\\r\\n            IComptrollerDForce(comptroller).rewardDistributor()\\r\\n        ).rewardToken();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice get rewards underlying token price\\r\\n     * @param comptroller comptroller address\\r\\n     * @param rewardsToken Address of rewards token\\r\\n     * @return priceUSD usd amount (decimal = 18 + (18 - decimal of rewards token))\\r\\n     */\\r\\n    function _getRewardsTokenPrice(address comptroller, address rewardsToken)\\r\\n        internal\\r\\n        view\\r\\n        override\\r\\n        returns (uint256 priceUSD)\\r\\n    {\\r\\n        address priceOracle = IComptrollerDForce(comptroller).priceOracle();\\r\\n        priceUSD = uint256(\\r\\n            IDForcePriceModel(IDForcePriceOracle(priceOracle).priceModel(iDF))\\r\\n                .getAssetPrice(iDF)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get DForce earned\\r\\n     * @param logic Logic contract address\\r\\n     * @param comptroller comptroller address\\r\\n     * @return dforceEarned\\r\\n     */\\r\\n    function _getStrategyEarned(address logic, address comptroller)\\r\\n        internal\\r\\n        view\\r\\n        override\\r\\n        returns (uint256 dforceEarned)\\r\\n    {\\r\\n        address[] memory xTokenList = _getAllMarkets(comptroller);\\r\\n        IDistributionDForce rewardDistributor = IDistributionDForce(\\r\\n            IComptrollerDForce(comptroller).rewardDistributor()\\r\\n        );\\r\\n        uint256 index;\\r\\n\\r\\n        uint256 deltaBorrowRewardAmount = 0;\\r\\n        uint256 deltaSupplyRewardAmount = 0;\\r\\n\\r\\n        for (index = 0; index < xTokenList.length; ) {\\r\\n            address xToken = xTokenList[index];\\r\\n            deltaBorrowRewardAmount += getEarnedDeltaAmount(\\r\\n                xToken,\\r\\n                logic,\\r\\n                rewardDistributor,\\r\\n                true\\r\\n            );\\r\\n            deltaSupplyRewardAmount += getEarnedDeltaAmount(\\r\\n                xToken,\\r\\n                logic,\\r\\n                rewardDistributor,\\r\\n                false\\r\\n            );\\r\\n\\r\\n            unchecked {\\r\\n                ++index;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        dforceEarned =\\r\\n            ((rewardDistributor.reward(logic) +\\r\\n                deltaBorrowRewardAmount +\\r\\n                deltaSupplyRewardAmount) *\\r\\n                _getRewardsTokenPrice(\\r\\n                    comptroller,\\r\\n                    _getRewardsToken(comptroller)\\r\\n                )) /\\r\\n            BASE;\\r\\n    }\\r\\n\\r\\n    // https://github.com/dforce-network/LendingContractsV2/blob/master/contracts/RewardDistributorV3.sol#L406\\r\\n    /**\\r\\n     * @notice Calculates delta of actual and stored earns\\r\\n     * @param _asset iToken address\\r\\n     * @param _logic Logic contract address\\r\\n     * @param _rewardDistributor DForce rewards destributor contract\\r\\n     * @param _isBorrow Should calculate delta of earns for borrow or for supply\\r\\n     * @return delta of actual and stored earns\\r\\n     */\\r\\n    function getEarnedDeltaAmount(\\r\\n        address _asset,\\r\\n        address _logic,\\r\\n        IDistributionDForce _rewardDistributor,\\r\\n        bool _isBorrow\\r\\n    ) private view returns (uint256) {\\r\\n        uint256 assetIndex;\\r\\n        uint256 accountIndex;\\r\\n        uint256 accountBalance;\\r\\n\\r\\n        if (_isBorrow) {\\r\\n            (assetIndex, ) = _rewardDistributor.distributionBorrowState(_asset);\\r\\n            accountIndex = _rewardDistributor.distributionBorrowerIndex(\\r\\n                _asset,\\r\\n                _logic\\r\\n            );\\r\\n            accountBalance = IXToken(_asset).borrowBalanceStored(_logic).rdiv(\\r\\n                IXToken(_asset).borrowIndex()\\r\\n            );\\r\\n        } else {\\r\\n            (assetIndex, ) = _rewardDistributor.distributionSupplyState(_asset);\\r\\n            accountIndex = _rewardDistributor.distributionSupplierIndex(\\r\\n                _asset,\\r\\n                _logic\\r\\n            );\\r\\n            accountBalance = IERC20Upgradeable(_asset).balanceOf(_logic);\\r\\n        }\\r\\n\\r\\n        uint256 deltaIndex = assetIndex - accountIndex;\\r\\n\\r\\n        return accountBalance.rmul(deltaIndex);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Check xToken is for native token\\r\\n     * @param xToken Address of xToken\\r\\n     * @return isXNative true : xToken is for native token\\r\\n     */\\r\\n    function _isXNative(address xToken)\\r\\n        internal\\r\\n        view\\r\\n        override\\r\\n        returns (bool isXNative)\\r\\n    {\\r\\n        if (IXToken(xToken).underlying() == ZERO_ADDRESS) isXNative = true;\\r\\n        else isXNative = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice get collateralFactorMantissa of startegy\\r\\n     * @param comptroller compotroller address\\r\\n     * @return collateralFactorMantissa collateralFactorMantissa\\r\\n     */\\r\\n    function _getCollateralFactorMantissa(address xToken, address comptroller)\\r\\n        internal\\r\\n        view\\r\\n        override\\r\\n        returns (uint256 collateralFactorMantissa)\\r\\n    {\\r\\n        (collateralFactorMantissa, , , , , , ) = IComptrollerDForce(comptroller)\\r\\n            .markets(xToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice get rewardsSpeed\\r\\n     * @param _asset Address of asset\\r\\n     * @param comptroller comptroller address\\r\\n     */\\r\\n    function _getRewardsSpeed(address _asset, address comptroller)\\r\\n        internal\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return\\r\\n            IDistributionDForce(\\r\\n                IComptrollerDForce(comptroller).rewardDistributor()\\r\\n            ).distributionSpeed(_asset);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice get rewardsSupplySpeed\\r\\n     * @param _asset Address of asset\\r\\n     * @param comptroller comptroller address\\r\\n     */\\r\\n    function _getRewardsSupplySpeed(address _asset, address comptroller)\\r\\n        internal\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return\\r\\n            IDistributionDForce(\\r\\n                IComptrollerDForce(comptroller).rewardDistributor()\\r\\n            ).distributionSupplySpeed(_asset);\\r\\n    }\\r\\n\\r\\n    function _getAllMarkets(address comptroller)\\r\\n        internal\\r\\n        view\\r\\n        override\\r\\n        returns (address[] memory)\\r\\n    {\\r\\n        return IComptrollerDForce(comptroller).getAlliTokens();\\r\\n    }\\r\\n\\r\\n    function _getAccountSnapshot(address xToken, address logic)\\r\\n        internal\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            uint256 balance,\\r\\n            uint256 borrowAmount,\\r\\n            uint256 mantissa\\r\\n        )\\r\\n    {\\r\\n        balance = IXToken(xToken).balanceOf(logic);\\r\\n        borrowAmount = IXToken(xToken).borrowBalanceStored(logic);\\r\\n        mantissa = IXToken(xToken).exchangeRateStored();\\r\\n    }\\r\\n\\r\\n    function isXToken(address _asset) public view override returns (bool) {\\r\\n        return IiToken(_asset).isiToken();\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/StatisticsBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\\\";\\r\\nimport \\\"./utils/UpgradeableBase.sol\\\";\\r\\nimport \\\"./libraries/SafeRatioMath.sol\\\";\\r\\nimport \\\"./interfaces/IXToken.sol\\\";\\r\\nimport \\\"./interfaces/ICompound.sol\\\";\\r\\nimport \\\"./interfaces/ISwap.sol\\\";\\r\\nimport \\\"./interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"./interfaces/IMultiLogicProxy.sol\\\";\\r\\nimport \\\"./interfaces/ILogicContract.sol\\\";\\r\\nimport \\\"./interfaces/IStrategyStatistics.sol\\\";\\r\\n\\r\\nlibrary StrategyStatisticsLib {\\r\\n    using SafeRatioMath for uint256;\\r\\n    using SafeCastUpgradeable for uint256;\\r\\n\\r\\n    uint256 private constant DAYS_PER_YEAR = 365;\\r\\n    uint256 private constant DECIMALS = 18;\\r\\n    uint256 private constant BASE = 10**DECIMALS;\\r\\n\\r\\n    /**\\r\\n     * @notice Get Storage to Logic amount in USD\\r\\n     * @param logic logic address\\r\\n     * @param priceUSDList list of usd price of tokens\\r\\n     * @return strategyAmountUSD USD amount of strategy\\r\\n     * @return takenAmountUSD USD amount that strategy taken from storage\\r\\n     * @return balanceUSD USD balance of strategy's logic\\r\\n     * @return availableAmountUSD available USD amount from storage that strategy can take\\r\\n     */\\r\\n    function getStorageAmount(address logic, PriceInfo[] memory priceUSDList)\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            int256 strategyAmountUSD,\\r\\n            uint256 takenAmountUSD,\\r\\n            uint256 balanceUSD,\\r\\n            uint256 availableAmountUSD\\r\\n        )\\r\\n    {\\r\\n        address _multiLogicProxy = ILogic(logic).multiLogicProxy();\\r\\n\\r\\n        address[] memory usedTokens = IMultiLogicProxy(_multiLogicProxy)\\r\\n            .getUsedTokensStorage();\\r\\n        for (uint256 index = 0; index < usedTokens.length; ) {\\r\\n            uint256 priceUSD = _findPriceUSD(usedTokens[index], priceUSDList);\\r\\n            takenAmountUSD +=\\r\\n                (IMultiLogicProxy(_multiLogicProxy).getTokenTaken(\\r\\n                    usedTokens[index],\\r\\n                    logic\\r\\n                ) * priceUSD) /\\r\\n                BASE;\\r\\n\\r\\n            availableAmountUSD +=\\r\\n                (IMultiLogicProxy(_multiLogicProxy).getTokenAvailable(\\r\\n                    usedTokens[index],\\r\\n                    logic\\r\\n                ) * priceUSD) /\\r\\n                BASE;\\r\\n\\r\\n            balanceUSD +=\\r\\n                ((\\r\\n                    usedTokens[index] == address(0)\\r\\n                        ? address(logic).balance\\r\\n                        : IERC20Upgradeable(usedTokens[index]).balanceOf(logic)\\r\\n                ) * priceUSD) /\\r\\n                BASE;\\r\\n\\r\\n            unchecked {\\r\\n                ++index;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        strategyAmountUSD =\\r\\n            (takenAmountUSD).toInt256() -\\r\\n            (balanceUSD).toInt256();\\r\\n    }\\r\\n\\r\\n    function getApy(address _asset, bool isXToken)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 borrowApy, uint256 supplyApy)\\r\\n    {\\r\\n        uint256 borrowRatePerBlock = IXToken(_asset).borrowRatePerBlock();\\r\\n        borrowApy = _calcApy(_asset, borrowRatePerBlock);\\r\\n\\r\\n        if (isXToken) {\\r\\n            uint256 supplyRatePerBlock = IXToken(_asset).supplyRatePerBlock();\\r\\n            supplyApy = _calcApy(_asset, supplyRatePerBlock);\\r\\n        } else {\\r\\n            supplyApy = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calcRewardsApy(\\r\\n        uint256 _underlyingPrice,\\r\\n        uint256 _rewardsPrice,\\r\\n        uint256 _distributionSpeed,\\r\\n        uint256 _totalBorrowsOrSupply,\\r\\n        uint256 _blocksPerYear\\r\\n    ) public pure returns (uint256) {\\r\\n        if (_totalBorrowsOrSupply == 0 || _underlyingPrice == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        return\\r\\n            (\\r\\n                ((_distributionSpeed * _blocksPerYear * BASE * _rewardsPrice) /\\r\\n                    (_underlyingPrice * DAYS_PER_YEAR * _totalBorrowsOrSupply) +\\r\\n                    BASE)\\r\\n            ).rpow(DAYS_PER_YEAR, BASE) - BASE;\\r\\n    }\\r\\n\\r\\n    function _calcApy(address _asset, uint256 _ratePerBlock)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 blocksPerYear = IInterestRateModel(\\r\\n            IXToken(_asset).interestRateModel()\\r\\n        ).blocksPerYear();\\r\\n        return\\r\\n            ((_ratePerBlock * blocksPerYear) / DAYS_PER_YEAR + BASE).rpow(\\r\\n                DAYS_PER_YEAR,\\r\\n                BASE\\r\\n            ) - BASE;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Find USD price for token\\r\\n     * @param token Address of token\\r\\n     * @param priceUSDList list of price USD\\r\\n     * @return priceUSD USD price of token\\r\\n     */\\r\\n    function _findPriceUSD(address token, PriceInfo[] memory priceUSDList)\\r\\n        private\\r\\n        pure\\r\\n        returns (uint256 priceUSD)\\r\\n    {\\r\\n        for (uint256 index = 0; index < priceUSDList.length; ) {\\r\\n            if (priceUSDList[index].token == token) {\\r\\n                priceUSD = priceUSDList[index].priceUSD;\\r\\n                break;\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++index;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract StatisticsBase is UpgradeableBase, IStrategyStatistics {\\r\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n    using SafeCastUpgradeable for uint256;\\r\\n\\r\\n    address internal constant ZERO_ADDRESS = address(0);\\r\\n    uint256 internal constant DECIMALS = 18;\\r\\n    uint256 internal constant BASE = 10**DECIMALS;\\r\\n\\r\\n    address public blid;\\r\\n    address public swapGateway;\\r\\n\\r\\n    // priceOracle\\r\\n    mapping(address => address) internal priceOracles;\\r\\n\\r\\n    // BLID swap information\\r\\n    address public swapRouterBlid;\\r\\n    address[] public pathToSwapBLIDToStableCoin;\\r\\n\\r\\n    event SetBLID(address _blid);\\r\\n    event SetPriceOracle(address token, address oracle);\\r\\n\\r\\n    function __StrategyStatistics_init() public initializer {\\r\\n        __StrategyStatistics_init_inherited();\\r\\n    }\\r\\n\\r\\n    function __StrategyStatistics_init_inherited() public onlyInitializing {\\r\\n        UpgradeableBase.initialize();\\r\\n    }\\r\\n\\r\\n    /*** Public Set function ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Set blid in contract\\r\\n     * @param _blid address of BLID\\r\\n     */\\r\\n    function setBLID(address _blid) external onlyOwnerAndAdmin {\\r\\n        if (_blid != ZERO_ADDRESS) {\\r\\n            blid = _blid;\\r\\n\\r\\n            emit SetBLID(_blid);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set price oracle for token\\r\\n     * @param token address of token\\r\\n     * @param oracle address of chainlink oracle\\r\\n     */\\r\\n    function setPriceOracle(address token, address oracle) external {\\r\\n        if (priceOracles[token] == ZERO_ADDRESS) {\\r\\n            priceOracles[token] = oracle;\\r\\n\\r\\n            emit SetPriceOracle(token, oracle);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set Token to StableCoin path, Oracle of Stable coin\\r\\n     * @param _swapRouterBlid swapRouter for blid\\r\\n     * @param _pathToSwapBLIDToStableCoin path to BLID -> StableCoin\\r\\n     */\\r\\n    function setBLIDSwap(\\r\\n        address _swapRouterBlid,\\r\\n        address[] memory _pathToSwapBLIDToStableCoin\\r\\n    ) external onlyOwnerAndAdmin {\\r\\n        if (_swapRouterBlid != ZERO_ADDRESS) {\\r\\n            swapRouterBlid = _swapRouterBlid;\\r\\n            pathToSwapBLIDToStableCoin = _pathToSwapBLIDToStableCoin;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set SwapGateway\\r\\n     * @param _swapGateway Address of SwapGateway\\r\\n     */\\r\\n    function setSwapGateway(address _swapGateway) external onlyOwnerAndAdmin {\\r\\n        if (_swapGateway != ZERO_ADDRESS) {\\r\\n            swapGateway = _swapGateway;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*** Public General Statistics function ***/\\r\\n\\r\\n    function isXToken(address _asset) public view virtual returns (bool) {\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getXTokenInfo(address _asset, address comptroller)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (XTokenAnalytics memory)\\r\\n    {\\r\\n        uint256 underlyingPriceUSD = _getUnderlyingUSDPrice(\\r\\n            _asset,\\r\\n            comptroller\\r\\n        );\\r\\n        address underlying = _getUnderlyingAddress(_asset);\\r\\n        uint256 underlyingDecimals = _isXNative(_asset)\\r\\n            ? DECIMALS\\r\\n            : IERC20MetadataUpgradeable(underlying).decimals();\\r\\n\\r\\n        uint256 totalSupply = (IXToken(_asset).totalSupply() *\\r\\n            IXToken(_asset).exchangeRateStored()) / BASE;\\r\\n        uint256 totalBorrows = IXToken(_asset).totalBorrows();\\r\\n\\r\\n        uint256 liquidity = (IXToken(_asset).getCash() * underlyingPriceUSD) /\\r\\n            BASE;\\r\\n\\r\\n        (uint256 borrowApy, uint256 supplyApy) = StrategyStatisticsLib.getApy(\\r\\n            _asset,\\r\\n            isXToken(_asset)\\r\\n        );\\r\\n\\r\\n        (uint256 borrowRewardsApy, uint256 supplyRewardsApy) = _getRewardsApy(\\r\\n            _asset,\\r\\n            comptroller,\\r\\n            underlyingPriceUSD / (10**(DECIMALS - underlyingDecimals)),\\r\\n            underlyingDecimals\\r\\n        );\\r\\n\\r\\n        return\\r\\n            XTokenAnalytics({\\r\\n                symbol: IERC20MetadataUpgradeable(_asset).symbol(),\\r\\n                underlyingSymbol: _isXNative(_asset)\\r\\n                    ? \\\"\\\"\\r\\n                    : _getSymbol(underlying),\\r\\n                platformAddress: _asset,\\r\\n                underlyingAddress: underlying,\\r\\n                underlyingDecimals: underlyingDecimals,\\r\\n                underlyingPrice: underlyingPriceUSD /\\r\\n                    (10**(DECIMALS - underlyingDecimals)),\\r\\n                totalSupply: totalSupply,\\r\\n                totalSupplyUSD: (totalSupply * underlyingPriceUSD) / BASE,\\r\\n                totalBorrows: totalBorrows,\\r\\n                totalBorrowsUSD: (totalBorrows * underlyingPriceUSD) / BASE,\\r\\n                liquidity: liquidity,\\r\\n                collateralFactor: _getCollateralFactorMantissa(\\r\\n                    _asset,\\r\\n                    comptroller\\r\\n                ),\\r\\n                borrowApy: borrowApy,\\r\\n                supplyApy: supplyApy,\\r\\n                borrowRewardsApy: borrowRewardsApy,\\r\\n                supplyRewardsApy: supplyRewardsApy\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function getXTokensInfo(address comptroller)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (XTokenAnalytics[] memory)\\r\\n    {\\r\\n        address[] memory xTokenList = _getAllMarkets(comptroller);\\r\\n\\r\\n        uint256 len = xTokenList.length;\\r\\n\\r\\n        XTokenAnalytics[] memory xTokensInfo = new XTokenAnalytics[](len);\\r\\n\\r\\n        for (uint256 index = 0; index < len; ) {\\r\\n            xTokensInfo[index] = getXTokenInfo(xTokenList[index], comptroller);\\r\\n\\r\\n            unchecked {\\r\\n                ++index;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return xTokensInfo;\\r\\n    }\\r\\n\\r\\n    /*** Public Logic Statistics function ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Get Strategy balance information\\r\\n     * check all xTokens in market\\r\\n     * @param logic Logic contract address\\r\\n     */\\r\\n    function getStrategyStatistics(address logic)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (StrategyStatistics memory statistics)\\r\\n    {\\r\\n        address comptroller = ILendingLogic(logic).comptroller();\\r\\n\\r\\n        // xToken statistics\\r\\n        PriceInfo[] memory priceUSDList;\\r\\n        (\\r\\n            statistics.xTokensStatistics,\\r\\n            priceUSDList,\\r\\n            statistics.totalSupplyUSD,\\r\\n            statistics.totalBorrowUSD,\\r\\n            statistics.totalBorrowLimitUSD\\r\\n        ) = _getXTokenStatistics(logic, comptroller);\\r\\n\\r\\n        // Wallet Statistics\\r\\n        statistics.walletStatistics = _getWalletStatistics(\\r\\n            logic,\\r\\n            comptroller,\\r\\n            statistics.xTokensStatistics\\r\\n        );\\r\\n\\r\\n        // Get Lending rewards\\r\\n        statistics.lendingEarnedUSD = _getStrategyEarned(logic, comptroller);\\r\\n\\r\\n        // Calculate borrow rate\\r\\n        statistics.borrowRate = statistics.totalBorrowLimitUSD == 0\\r\\n            ? 0\\r\\n            : (statistics.totalBorrowUSD * BASE) /\\r\\n                statistics.totalBorrowLimitUSD;\\r\\n\\r\\n        // ********** Get totalAmountUSD **********\\r\\n\\r\\n        statistics.totalAmountUSD = (statistics.totalSupplyUSD).toInt256();\\r\\n\\r\\n        // Wallet\\r\\n        for (uint256 index = 0; index < statistics.walletStatistics.length; ) {\\r\\n            statistics.totalAmountUSD += (\\r\\n                statistics.walletStatistics[index].balanceUSD\\r\\n            ).toInt256();\\r\\n\\r\\n            unchecked {\\r\\n                ++index;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Compound Rewards\\r\\n        statistics.totalAmountUSD += (statistics.lendingEarnedUSD).toInt256();\\r\\n\\r\\n        // Borrow\\r\\n        statistics.totalAmountUSD -= (statistics.totalBorrowUSD).toInt256();\\r\\n\\r\\n        // Storage to Logic\\r\\n        uint256 takenAmountUSD;\\r\\n        (\\r\\n            ,\\r\\n            takenAmountUSD,\\r\\n            ,\\r\\n            statistics.storageAvailableUSD\\r\\n        ) = StrategyStatisticsLib.getStorageAmount(logic, priceUSDList);\\r\\n        statistics.totalAmountUSD -= (takenAmountUSD).toInt256();\\r\\n    }\\r\\n\\r\\n    function getStrategyXTokenInfoCompact(address xToken, address logic)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            uint256 totalSupply,\\r\\n            uint256 borrowLimit,\\r\\n            uint256 borrowAmount\\r\\n        )\\r\\n    {\\r\\n        uint256 balance;\\r\\n        uint256 mantissa;\\r\\n        address comptroller = ILendingLogic(logic).comptroller();\\r\\n\\r\\n        (balance, borrowAmount, mantissa) = _getAccountSnapshot(xToken, logic);\\r\\n\\r\\n        totalSupply = (balance * mantissa) / BASE;\\r\\n        borrowLimit =\\r\\n            (totalSupply * _getCollateralFactorMantissa(xToken, comptroller)) /\\r\\n            BASE;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get xTokenInfo\\r\\n     * @param xToken address of xToken\\r\\n     * @param logic logic address\\r\\n     * @return tokenInfo XTokenInfo\\r\\n     */\\r\\n    function getStrategyXTokenInfo(address xToken, address logic)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (XTokenInfo memory tokenInfo)\\r\\n    {\\r\\n        address comptroller = ILendingLogic(logic).comptroller();\\r\\n\\r\\n        // Get USD price\\r\\n        uint256 priceUSD = _getUnderlyingUSDPrice(xToken, comptroller);\\r\\n\\r\\n        // Get TotalSupply, BorrowLimit, BorrowAmount\\r\\n        (\\r\\n            uint256 totalSupply,\\r\\n            uint256 borrowLimit,\\r\\n            uint256 borrowAmount\\r\\n        ) = getStrategyXTokenInfoCompact(xToken, logic);\\r\\n\\r\\n        // Get Underlying balance, Lending Amount\\r\\n        address tokenUnderlying;\\r\\n        uint256 underlyingBalance;\\r\\n\\r\\n        if (_isXNative(xToken)) {\\r\\n            tokenUnderlying = ZERO_ADDRESS;\\r\\n            underlyingBalance = address(logic).balance;\\r\\n        } else {\\r\\n            tokenUnderlying = IXToken(xToken).underlying();\\r\\n            underlyingBalance = IERC20Upgradeable(tokenUnderlying).balanceOf(\\r\\n                logic\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint256 lendingAmount = IMultiLogicProxy(\\r\\n            ILogic(logic).multiLogicProxy()\\r\\n        ).getTokenTaken(tokenUnderlying, logic);\\r\\n        if (lendingAmount > underlyingBalance) {\\r\\n            lendingAmount -= underlyingBalance;\\r\\n        }\\r\\n\\r\\n        // Token Info\\r\\n        tokenInfo = XTokenInfo({\\r\\n            symbol: IXToken(xToken).symbol(),\\r\\n            xToken: xToken,\\r\\n            totalSupply: totalSupply,\\r\\n            totalSupplyUSD: (totalSupply * priceUSD) / BASE,\\r\\n            lendingAmount: lendingAmount,\\r\\n            lendingAmountUSD: (lendingAmount * priceUSD) / BASE,\\r\\n            borrowAmount: borrowAmount,\\r\\n            borrowAmountUSD: (borrowAmount * priceUSD) / BASE,\\r\\n            borrowLimit: borrowLimit,\\r\\n            borrowLimitUSD: (borrowLimit * priceUSD) / BASE,\\r\\n            underlyingBalance: underlyingBalance,\\r\\n            priceUSD: priceUSD\\r\\n        });\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice get rewards underlying token price\\r\\n     * @param comptroller comptroller address\\r\\n     * @param rewardsToken Address of rewards token\\r\\n     * @return priceUSD usd amount (decimal = 18 + (18 - decimal of rewards token))\\r\\n     */\\r\\n    function getRewardsTokenPrice(address comptroller, address rewardsToken)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256 priceUSD)\\r\\n    {\\r\\n        return _getRewardsTokenPrice(comptroller, rewardsToken);\\r\\n    }\\r\\n\\r\\n    /*** Private General Statistics function ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Get rewards apy\\r\\n     * @param _asset address of xToken\\r\\n     * @param comptroller address of comptroller\\r\\n     * @param _underlyingPrice  price of underlying (decimal = 18)\\r\\n     * @param _underlyingDecimals decimal of underlying\\r\\n     */\\r\\n    function _getRewardsApy(\\r\\n        address _asset,\\r\\n        address comptroller,\\r\\n        uint256 _underlyingPrice,\\r\\n        uint256 _underlyingDecimals\\r\\n    )\\r\\n        private\\r\\n        view\\r\\n        returns (uint256 borrowRewardsApy, uint256 supplyRewardsApy)\\r\\n    {\\r\\n        uint256 distributionSupplySpeed = _getRewardsSupplySpeed(\\r\\n            _asset,\\r\\n            comptroller\\r\\n        );\\r\\n        uint256 distributionSpeed = _getRewardsSpeed(_asset, comptroller);\\r\\n        uint256 totalSupply = IXToken(_asset).totalSupply() *\\r\\n            (10**(DECIMALS - _underlyingDecimals));\\r\\n        uint256 totalBorrows = IXToken(_asset).totalBorrows() *\\r\\n            (10**(DECIMALS - _underlyingDecimals));\\r\\n        uint256 exchangeRateMantissa = IXToken(_asset).exchangeRateStored();\\r\\n        uint256 rewardsPrice = _getRewardsTokenPrice(\\r\\n            comptroller,\\r\\n            _getRewardsToken(comptroller)\\r\\n        ) /\\r\\n            (10 **\\r\\n                (DECIMALS -\\r\\n                    IERC20MetadataUpgradeable(_getRewardsToken(comptroller))\\r\\n                        .decimals()));\\r\\n        uint256 blocksPerYear = IInterestRateModel(\\r\\n            IXToken(_asset).interestRateModel()\\r\\n        ).blocksPerYear();\\r\\n\\r\\n        borrowRewardsApy = StrategyStatisticsLib.calcRewardsApy(\\r\\n            _underlyingPrice,\\r\\n            rewardsPrice,\\r\\n            distributionSpeed,\\r\\n            totalBorrows,\\r\\n            blocksPerYear\\r\\n        );\\r\\n        supplyRewardsApy = StrategyStatisticsLib.calcRewardsApy(\\r\\n            _underlyingPrice,\\r\\n            rewardsPrice,\\r\\n            distributionSupplySpeed,\\r\\n            (totalSupply * exchangeRateMantissa) / BASE,\\r\\n            blocksPerYear\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /*** Private Logic Statistics function ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Get xToken Statistics\\r\\n     * @param logic Logic contract address\\r\\n     * @param comptroller Address of comptroller\\r\\n     * @return xTokensStatistics xToken statistics info\\r\\n     * @return priceUSDList price USD list for xToken underlying\\r\\n     * @return totalSupplyUSD total supply amount (sum of totalSupplyUSD)\\r\\n     * @return totalBorrowUSD total borrow\\r\\n     * @return totalBorrowLimitUSD total borrow limit\\r\\n     */\\r\\n    function _getXTokenStatistics(address logic, address comptroller)\\r\\n        private\\r\\n        view\\r\\n        returns (\\r\\n            XTokenInfo[] memory xTokensStatistics,\\r\\n            PriceInfo[] memory priceUSDList,\\r\\n            uint256 totalSupplyUSD,\\r\\n            uint256 totalBorrowUSD,\\r\\n            uint256 totalBorrowLimitUSD\\r\\n        )\\r\\n    {\\r\\n        address[] memory xTokenList = getEnteredMarkets(comptroller, logic);\\r\\n\\r\\n        totalSupplyUSD = 0;\\r\\n        totalBorrowUSD = 0;\\r\\n        totalBorrowLimitUSD = 0;\\r\\n\\r\\n        xTokensStatistics = new XTokenInfo[](xTokenList.length);\\r\\n        priceUSDList = new PriceInfo[](xTokenList.length);\\r\\n\\r\\n        for (uint256 index = 0; index < xTokenList.length; ) {\\r\\n            // Get xTokenInfo\\r\\n            XTokenInfo memory tokenInfo = getStrategyXTokenInfo(\\r\\n                xTokenList[index],\\r\\n                logic\\r\\n            );\\r\\n\\r\\n            xTokensStatistics[index] = tokenInfo;\\r\\n\\r\\n            // Sum borrow / lending total in USD\\r\\n            totalSupplyUSD += tokenInfo.totalSupplyUSD;\\r\\n            totalBorrowUSD += tokenInfo.borrowAmountUSD;\\r\\n            totalBorrowLimitUSD += tokenInfo.borrowLimitUSD;\\r\\n\\r\\n            // Save PriceUSD\\r\\n            priceUSDList[index] = PriceInfo(\\r\\n                _getUnderlyingAddress(xTokenList[index]),\\r\\n                tokenInfo.priceUSD\\r\\n            );\\r\\n\\r\\n            unchecked {\\r\\n                ++index;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get Wallet statistics\\r\\n     * Tokens in Storage, CAKE, BANANA, BSW, BLID\\r\\n     * @param logic Logic contract address\\r\\n     * @param comptroller address of comptroller\\r\\n     * @return walletStatistics Array of WalletInfo\\r\\n     */\\r\\n    function _getWalletStatistics(\\r\\n        address logic,\\r\\n        address comptroller,\\r\\n        XTokenInfo[] memory arrTokenInfo\\r\\n    ) internal view virtual returns (WalletInfo[] memory walletStatistics) {\\r\\n        uint256 index;\\r\\n\\r\\n        // Define return array\\r\\n        walletStatistics = new WalletInfo[](arrTokenInfo.length + 2);\\r\\n\\r\\n        // Get xToken underlying balance\\r\\n        for (index = 0; index < arrTokenInfo.length; ) {\\r\\n            XTokenInfo memory tokenInfo = arrTokenInfo[index];\\r\\n            walletStatistics[index] = WalletInfo(\\r\\n                _isXNative(tokenInfo.xToken)\\r\\n                    ? \\\"\\\"\\r\\n                    : IERC20MetadataUpgradeable(\\r\\n                        IXToken(tokenInfo.xToken).underlying()\\r\\n                    ).symbol(),\\r\\n                _getUnderlyingAddress(tokenInfo.xToken),\\r\\n                tokenInfo.underlyingBalance,\\r\\n                (tokenInfo.underlyingBalance * tokenInfo.priceUSD) / BASE\\r\\n            );\\r\\n\\r\\n            unchecked {\\r\\n                ++index;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // BLID\\r\\n        uint256 balance = IERC20Upgradeable(blid).balanceOf(logic);\\r\\n        walletStatistics[arrTokenInfo.length] = WalletInfo(\\r\\n            IERC20MetadataUpgradeable(blid).symbol(),\\r\\n            blid,\\r\\n            balance,\\r\\n            _getAmountUSDByOracle(\\r\\n                pathToSwapBLIDToStableCoin[\\r\\n                    pathToSwapBLIDToStableCoin.length - 1\\r\\n                ],\\r\\n                ISwapGateway(swapGateway).quoteExactInput(\\r\\n                    swapRouterBlid,\\r\\n                    balance,\\r\\n                    pathToSwapBLIDToStableCoin\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n\\r\\n        // Rewards Token\\r\\n        address rewardsToken = _getRewardsToken(comptroller);\\r\\n        walletStatistics[arrTokenInfo.length + 1] = WalletInfo(\\r\\n            IERC20MetadataUpgradeable(rewardsToken).symbol(),\\r\\n            rewardsToken,\\r\\n            IERC20Upgradeable(rewardsToken).balanceOf(logic),\\r\\n            (\\r\\n                (IERC20Upgradeable(rewardsToken).balanceOf(logic) *\\r\\n                    _getRewardsTokenPrice(comptroller, rewardsToken))\\r\\n            ) / BASE\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /*** Internal function ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Get USD amount base on oracle\\r\\n     * @param token Address of token\\r\\n     * @param amount token amount : decimal = token.decimals\\r\\n     * @return amountUSD usd amount : decimal = 18\\r\\n     */\\r\\n    function _getAmountUSDByOracle(address token, uint256 amount)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256 amountUSD)\\r\\n    {\\r\\n        require(priceOracles[token] != ZERO_ADDRESS, \\\"SB1\\\");\\r\\n\\r\\n        AggregatorV3Interface oracle = AggregatorV3Interface(\\r\\n            priceOracles[token]\\r\\n        );\\r\\n        uint256 decimal = token == ZERO_ADDRESS\\r\\n            ? DECIMALS\\r\\n            : IERC20MetadataUpgradeable(token).decimals();\\r\\n\\r\\n        amountUSD =\\r\\n            (amount *\\r\\n                uint256(oracle.latestAnswer()) *\\r\\n                10**(DECIMALS - oracle.decimals())) /\\r\\n            10**decimal;\\r\\n    }\\r\\n\\r\\n    /*** Internal virtual function ***/\\r\\n\\r\\n    /**\\r\\n     * @notice Check xToken is for native token\\r\\n     * @param xToken Address of xToken\\r\\n     * @return isXNative true : xToken is for native token\\r\\n     */\\r\\n    function _isXNative(address xToken)\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (bool isXNative)\\r\\n    {}\\r\\n\\r\\n    /**\\r\\n     * @notice get USD price by Venus Oracle for xToken\\r\\n     * @param xToken xToken address\\r\\n     * @param comptroller comptroller address\\r\\n     * @return priceUSD USD price for xToken (decimal = 18 + (18 - decimal of underlying))\\r\\n     */\\r\\n    function _getUnderlyingUSDPrice(address xToken, address comptroller)\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (uint256 priceUSD)\\r\\n    {}\\r\\n\\r\\n    /**\\r\\n     * @notice Get strategy earned\\r\\n     * @param logic Logic contract address\\r\\n     * @param comptroller comptroller address\\r\\n     * @return strategyEarned\\r\\n     */\\r\\n    function _getStrategyEarned(address logic, address comptroller)\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (uint256 strategyEarned)\\r\\n    {}\\r\\n\\r\\n    /**\\r\\n     * @notice get collateralFactorMantissa of startegy\\r\\n     * @param comptroller comptroller address\\r\\n     * @return collateralFactorMantissa collateralFactorMantissa\\r\\n     */\\r\\n    function _getCollateralFactorMantissa(address xToken, address comptroller)\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (uint256 collateralFactorMantissa)\\r\\n    {}\\r\\n\\r\\n    /**\\r\\n     * @notice get rewards underlying token of startegy\\r\\n     * @param comptroller comptroller address\\r\\n     * @return rewardsToken token address\\r\\n     */\\r\\n    function _getRewardsToken(address comptroller)\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (address rewardsToken)\\r\\n    {}\\r\\n\\r\\n    /**\\r\\n     * @notice get rewards underlying token price\\r\\n     * @param comptroller comptroller address\\r\\n     * @param rewardsToken Address of rewards token\\r\\n     * @return priceUSD usd amount (decimal = 18 + (18 - decimal of rewards token))\\r\\n     */\\r\\n    function _getRewardsTokenPrice(address comptroller, address rewardsToken)\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (uint256 priceUSD)\\r\\n    {}\\r\\n\\r\\n    /**\\r\\n     * @notice get rewardsSpeed\\r\\n     * @param _asset Address of asset\\r\\n     * @param comptroller comptroller address\\r\\n     */\\r\\n    function _getRewardsSpeed(address _asset, address comptroller)\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (uint256)\\r\\n    {}\\r\\n\\r\\n    /**\\r\\n     * @notice get rewardsSupplySpeed\\r\\n     * @param _asset Address of asset\\r\\n     * @param comptroller comptroller address\\r\\n     */\\r\\n    function _getRewardsSupplySpeed(address _asset, address comptroller)\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (uint256)\\r\\n    {}\\r\\n\\r\\n    function getAllMarkets(address comptroller)\\r\\n        public\\r\\n        view\\r\\n        returns (address[] memory)\\r\\n    {\\r\\n        return _getAllMarkets(comptroller);\\r\\n    }\\r\\n\\r\\n    function getEnteredMarkets(address comptroller, address logic)\\r\\n        public\\r\\n        view\\r\\n        returns (address[] memory markets)\\r\\n    {\\r\\n        uint256 len;\\r\\n\\r\\n        address[] memory allMarkets = getAllMarkets(comptroller);\\r\\n\\r\\n        for (uint256 i; i < allMarkets.length; ) {\\r\\n            if (ILendingLogic(logic).isXTokenUsed(allMarkets[i])) {\\r\\n                len++;\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        markets = new address[](len);\\r\\n        uint256 j;\\r\\n\\r\\n        for (uint256 i; i < allMarkets.length; ) {\\r\\n            if (ILendingLogic(logic).isXTokenUsed(allMarkets[i])) {\\r\\n                markets[j] = allMarkets[i];\\r\\n                j++;\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get all entered xTokens to comptroller\\r\\n     */\\r\\n    function _getAllMarkets(address comptroller)\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (address[] memory)\\r\\n    {\\r\\n        return IComptrollerCompound(comptroller).getAllMarkets();\\r\\n    }\\r\\n\\r\\n    function _getAccountSnapshot(address xToken, address logic)\\r\\n        internal\\r\\n        view\\r\\n        virtual\\r\\n        returns (\\r\\n            uint256 balance,\\r\\n            uint256 borrowAmount,\\r\\n            uint256 mantissa\\r\\n        )\\r\\n    {\\r\\n        (, balance, borrowAmount, mantissa) = IXToken(xToken)\\r\\n            .getAccountSnapshot(logic);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice get symbol of token as a string. Some tokens of Ethereum chain return symbol as bytes32.\\r\\n     * @param _asset address of a token\\r\\n     * @return symbol of a token as a string\\r\\n     */\\r\\n    function _getSymbol(address _asset) private view returns (string memory) {\\r\\n        if (_asset == ZERO_ADDRESS) {\\r\\n            return \\\"\\\";\\r\\n        } else if (_asset == 0x431ad2ff6a9C365805eBaD47Ee021148d6f7DBe0) {\\r\\n            return \\\"DF\\\";\\r\\n        } else if (_asset == 0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2) {\\r\\n            return \\\"MKR\\\";\\r\\n        } else {\\r\\n            return IERC20MetadataUpgradeable(_asset).symbol();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getUnderlyingAddress(address _asset)\\r\\n        private\\r\\n        view\\r\\n        returns (address)\\r\\n    {\\r\\n        return _isXNative(_asset) ? ZERO_ADDRESS : IXToken(_asset).underlying();\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IDForce.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IComptrollerDForce {\\r\\n    function enterMarkets(address[] calldata iTokens)\\r\\n        external\\r\\n        returns (bool[] memory);\\r\\n\\r\\n    function markets(address iTokenAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 _collateralFactor,\\r\\n            uint256 _borrowFactor,\\r\\n            uint256 _borrowCapacity,\\r\\n            uint256 _supplyCapacity,\\r\\n            bool mintPaused,\\r\\n            bool redeemPaused,\\r\\n            bool borrowPaused\\r\\n        );\\r\\n\\r\\n    function getAlliTokens() external view returns (address[] memory);\\r\\n\\r\\n    function getEnteredMarkets(address _account)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory _accountCollaterals);\\r\\n\\r\\n    function calcAccountEquity(address)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 equity,\\r\\n            uint256 shortfall,\\r\\n            uint256 collaterals,\\r\\n            uint256 borrows\\r\\n        );\\r\\n\\r\\n    function priceOracle() external view returns (address);\\r\\n\\r\\n    function hasiToken(address _iToken) external view returns (bool);\\r\\n\\r\\n    function rewardDistributor() external view returns (address);\\r\\n\\r\\n    function hasEnteredMarket(address account, address iToken)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n}\\r\\n\\r\\ninterface IDistributionDForce {\\r\\n    function claimReward(address[] memory _holders, address[] memory _iTokens)\\r\\n        external;\\r\\n\\r\\n    function claimRewards(\\r\\n        address[] memory _holders,\\r\\n        address[] memory _suppliediTokens,\\r\\n        address[] memory _borrowediTokens\\r\\n    ) external;\\r\\n\\r\\n    function rewardToken() external view returns (address);\\r\\n\\r\\n    function reward(address _account) external view returns (uint256);\\r\\n\\r\\n    function distributionBorrowState(address _asset)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 index, uint256 block);\\r\\n\\r\\n    function distributionBorrowerIndex(address _asset, address _account)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function distributionSupplyState(address _asset)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 index, uint256 block);\\r\\n\\r\\n    function distributionSupplierIndex(address _asset, address _account)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function distributionSupplySpeed(address _asset)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function distributionSpeed(address _asset) external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IiToken {\\r\\n    function mint(address recipient, uint256 mintAmount) external;\\r\\n\\r\\n    function borrow(uint256 borrowAmount) external;\\r\\n\\r\\n    function redeemUnderlying(address from, uint256 redeemAmount) external;\\r\\n\\r\\n    function redeem(address from, uint256 redeemTokenAmount) external;\\r\\n\\r\\n    function repayBorrow(uint256 repayAmount) external;\\r\\n\\r\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\r\\n\\r\\n    function exchangeRateStored() external view returns (uint256);\\r\\n\\r\\n    function underlying() external view returns (address);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function isiToken() external view returns (bool);\\r\\n\\r\\n    function updateInterest() external returns (bool);\\r\\n}\\r\\n\\r\\ninterface IDForcePriceOracle {\\r\\n    function priceModel(address _asset) external view returns (address);\\r\\n\\r\\n    function getUnderlyingPrice(address _asset)\\r\\n        external\\r\\n        returns (uint256 _price);\\r\\n}\\r\\n\\r\\ninterface IDForcePriceModel {\\r\\n    function getAssetPrice(address _asset) external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IiTokenETH {\\r\\n    function mint(address recipient) external payable;\\r\\n\\r\\n    function repayBorrow() external payable;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/UpgradeableBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.13;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"./OwnableUpgradeableVersionable.sol\\\";\\r\\nimport \\\"./OwnableUpgradeableAdminable.sol\\\";\\r\\n\\r\\nabstract contract UpgradeableBase is\\r\\n    Initializable,\\r\\n    OwnableUpgradeableVersionable,\\r\\n    OwnableUpgradeableAdminable,\\r\\n    UUPSUpgradeable\\r\\n{\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    function initialize() public virtual onlyInitializing {\\r\\n        __Ownable_init();\\r\\n        __UUPSUpgradeable_init();\\r\\n    }\\r\\n\\r\\n    function _authorizeUpgrade(address newImplementation)\\r\\n        internal\\r\\n        virtual\\r\\n        override\\r\\n        onlyOwner\\r\\n    {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/SafeRatioMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\n// https://github.com/dforce-network/LendingContractsV2/blob/master/contracts/helper/LendingDataV2.sol#L116\\r\\nlibrary SafeRatioMath {\\r\\n    uint256 private constant BASE = 10**18;\\r\\n\\r\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        z = (x * y) / BASE;\\r\\n    }\\r\\n\\r\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        z = (x * BASE) / y;\\r\\n    }\\r\\n\\r\\n    function rpow(\\r\\n        uint256 x,\\r\\n        uint256 n,\\r\\n        uint256 base\\r\\n    ) internal pure returns (uint256 z) {\\r\\n        assembly {\\r\\n            switch x\\r\\n            case 0 {\\r\\n                switch n\\r\\n                case 0 {\\r\\n                    z := base\\r\\n                }\\r\\n                default {\\r\\n                    z := 0\\r\\n                }\\r\\n            }\\r\\n            default {\\r\\n                switch mod(n, 2)\\r\\n                case 0 {\\r\\n                    z := base\\r\\n                }\\r\\n                default {\\r\\n                    z := x\\r\\n                }\\r\\n                let half := div(base, 2) // for rounding.\\r\\n\\r\\n                for {\\r\\n                    n := div(n, 2)\\r\\n                } n {\\r\\n                    n := div(n, 2)\\r\\n                } {\\r\\n                    let xx := mul(x, x)\\r\\n                    if iszero(eq(div(xx, x), x)) {\\r\\n                        revert(0, 0)\\r\\n                    }\\r\\n                    let xxRound := add(xx, half)\\r\\n                    if lt(xxRound, xx) {\\r\\n                        revert(0, 0)\\r\\n                    }\\r\\n                    x := div(xxRound, base)\\r\\n                    if mod(n, 2) {\\r\\n                        let zx := mul(z, x)\\r\\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) {\\r\\n                            revert(0, 0)\\r\\n                        }\\r\\n                        let zxRound := add(zx, half)\\r\\n                        if lt(zxRound, zx) {\\r\\n                            revert(0, 0)\\r\\n                        }\\r\\n                        z := div(zxRound, base)\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IXToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IXToken {\\r\\n    function mint(uint256 mintAmount) external returns (uint256);\\r\\n\\r\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\r\\n\\r\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\r\\n\\r\\n    function redeem(uint256 redeemTokenAmount) external returns (uint256);\\r\\n\\r\\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\\r\\n\\r\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\r\\n\\r\\n    function getAccountSnapshot(address account)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function underlying() external view returns (address);\\r\\n\\r\\n    function borrowBalanceStored(address account)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function exchangeRateStored() external view returns (uint256);\\r\\n\\r\\n    function borrowIndex() external view returns (uint256);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function interestRateModel() external view returns (address);\\r\\n\\r\\n    function borrowRatePerBlock() external view returns (uint256);\\r\\n\\r\\n    function supplyRatePerBlock() external view returns (uint256);\\r\\n\\r\\n    function getCash() external view returns (uint256);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function totalBorrows() external view returns (uint256);\\r\\n\\r\\n    function accrueInterest() external returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IXTokenETH {\\r\\n    function mint() external payable;\\r\\n\\r\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\r\\n\\r\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\r\\n\\r\\n    function repayBorrow() external payable;\\r\\n\\r\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ICompound.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IComptrollerCompound {\\r\\n    function enterMarkets(address[] calldata xTokens)\\r\\n        external\\r\\n        returns (uint256[] memory);\\r\\n\\r\\n    function getAllMarkets() external view returns (address[] memory);\\r\\n\\r\\n    function getAssetsIn(address account)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory);\\r\\n\\r\\n    function getAccountLiquidity(address)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 err,\\r\\n            uint256 liquidity,\\r\\n            uint256 shortfall\\r\\n        );\\r\\n\\r\\n    function checkMembership(address account, address cToken)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n}\\r\\n\\r\\ninterface IInterestRateModel {\\r\\n    function blocksPerYear() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ISwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface ISwapGatewayBase {\\r\\n    function swapExactIn(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] memory path,\\r\\n        uint24[] memory fees,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactOut(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] memory path,\\r\\n        uint24[] memory fees,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function quoteExactInput(\\r\\n        uint256 amountIn,\\r\\n        address[] memory path,\\r\\n        uint24[] memory fees\\r\\n    ) external view returns (uint256 amountOut);\\r\\n\\r\\n    function quoteExactOutput(\\r\\n        uint256 amountOut,\\r\\n        address[] memory path,\\r\\n        uint24[] memory fees\\r\\n    ) external view returns (uint256 amountIn);\\r\\n}\\r\\n\\r\\ninterface ISwapGateway {\\r\\n    function swap(\\r\\n        address swapRouter,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOut,\\r\\n        address[] memory path,\\r\\n        bool isExactInput\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swap(\\r\\n        address swapRouter,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOut,\\r\\n        address[] memory path,\\r\\n        bool isExactInput,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swap(\\r\\n        address swapRouter,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOut,\\r\\n        address[] memory path,\\r\\n        uint24[] memory fees,\\r\\n        bool isExactInput\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swap(\\r\\n        address swapRouter,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOut,\\r\\n        address[] memory path,\\r\\n        uint24[] memory fees,\\r\\n        bool isExactInput,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function quoteExactInput(\\r\\n        address swapRouter,\\r\\n        uint256 amountIn,\\r\\n        address[] memory path\\r\\n    ) external view returns (uint256 amountOut);\\r\\n\\r\\n    function quoteExactInput(\\r\\n        address swapRouter,\\r\\n        uint256 amountIn,\\r\\n        address[] memory path,\\r\\n        uint24[] memory fees\\r\\n    ) external view returns (uint256 amountOut);\\r\\n\\r\\n    function quoteExactOutput(\\r\\n        address swapRouter,\\r\\n        uint256 amountOut,\\r\\n        address[] memory path\\r\\n    ) external view returns (uint256 amountIn);\\r\\n\\r\\n    function quoteExactOutput(\\r\\n        address swapRouter,\\r\\n        uint256 amountOut,\\r\\n        address[] memory path,\\r\\n        uint24[] memory fees\\r\\n    ) external view returns (uint256 amountIn);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface AggregatorV3Interface {\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function latestAnswer() external view returns (int256 answer);\\r\\n\\r\\n    function latestRoundData()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint80 roundId,\\r\\n            int256 answer,\\r\\n            uint256 startedAt,\\r\\n            uint256 updatedAt,\\r\\n            uint80 answeredInRound\\r\\n        );\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IMultiLogicProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IMultiLogicProxy {\\r\\n    function releaseToken(uint256 amount, address token) external;\\r\\n\\r\\n    function takeToken(uint256 amount, address token) external;\\r\\n\\r\\n    function addEarn(uint256 amount, address blidToken) external;\\r\\n\\r\\n    function returnToken(uint256 amount, address token) external;\\r\\n\\r\\n    function setLogicTokenAvailable(\\r\\n        uint256 amount,\\r\\n        address token,\\r\\n        uint256 deposit_withdraw\\r\\n    ) external;\\r\\n\\r\\n    function getTokenAvailable(address _token, address _logicAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function getTokenTaken(address _token, address _logicAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function getUsedTokensStorage() external view returns (address[] memory);\\r\\n\\r\\n    function multiStrategyLength() external view returns (uint256);\\r\\n\\r\\n    function multiStrategyName(uint256) external view returns (string memory);\\r\\n\\r\\n    function strategyInfo(string memory)\\r\\n        external\\r\\n        view\\r\\n        returns (address, address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ILogicContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"./IWETH.sol\\\";\\r\\nimport \\\"./IPancakeV3.sol\\\";\\r\\n\\r\\ninterface ILogicContract {\\r\\n    function addXTokens(\\r\\n        address token,\\r\\n        address xToken,\\r\\n        uint8 leadingTokenType\\r\\n    ) external;\\r\\n\\r\\n    function approveTokenForSwap(address token) external;\\r\\n\\r\\n    function claim(address[] calldata xTokens, uint8 leadingTokenType) external;\\r\\n\\r\\n    function mint(address xToken, uint256 mintAmount)\\r\\n        external\\r\\n        returns (uint256);\\r\\n\\r\\n    function borrow(\\r\\n        address xToken,\\r\\n        uint256 borrowAmount,\\r\\n        uint8 leadingTokenType\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function repayBorrow(address xToken, uint256 repayAmount) external;\\r\\n\\r\\n    function redeemUnderlying(address xToken, uint256 redeemAmount)\\r\\n        external\\r\\n        returns (uint256);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        address swap,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        address swap,\\r\\n        uint256 amountETH,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        address swap,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        address swap,\\r\\n        uint256 amountETH,\\r\\n        uint256 amountOut,\\r\\n        address[] calldata path,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address swap,\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address swap,\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address swap,\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountETHDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address swap,\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function addEarnToStorage(uint256 amount) external;\\r\\n\\r\\n    function enterMarkets(address[] calldata xTokens, uint8 leadingTokenType)\\r\\n        external\\r\\n        returns (uint256[] memory);\\r\\n\\r\\n    function returnTokenToStorage(uint256 amount, address token) external;\\r\\n\\r\\n    function takeTokenFromStorage(uint256 amount, address token) external;\\r\\n\\r\\n    function returnETHToMultiLogicProxy(uint256 amount) external;\\r\\n\\r\\n    function deposit(\\r\\n        address swapMaster,\\r\\n        uint256 _pid,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function withdraw(\\r\\n        address swapMaster,\\r\\n        uint256 _pid,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function returnToken(uint256 amount, address token) external; // for StorageV2 only\\r\\n}\\r\\n\\r\\n/************* New Architecture *************/\\r\\ninterface ISwapLogic {\\r\\n    function swap(\\r\\n        address swapRouter,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOut,\\r\\n        address[] memory path,\\r\\n        bool isExactInput\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swap(\\r\\n        address swapRouter,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOut,\\r\\n        address[] memory path,\\r\\n        uint24[] memory fees,\\r\\n        bool isExactInput\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface ILogic is ISwapLogic {\\r\\n    function addEarnToStorage(uint256 amount) external;\\r\\n\\r\\n    function returnTokenToStorage(uint256 amount, address token) external;\\r\\n\\r\\n    function takeTokenFromStorage(uint256 amount, address token) external;\\r\\n\\r\\n    function returnETHToMultiLogicProxy(uint256 amount) external;\\r\\n\\r\\n    function multiLogicProxy() external view returns (address);\\r\\n\\r\\n    function approveTokenForSwap(address _swap, address token) external;\\r\\n}\\r\\n\\r\\ninterface ILendingLogic is ILogic {\\r\\n    function isXTokenUsed(address xToken) external view returns (bool);\\r\\n\\r\\n    function addXTokens(address token, address xToken) external;\\r\\n\\r\\n    function comptroller() external view returns (address);\\r\\n\\r\\n    function getAllMarkets() external view returns (address[] memory);\\r\\n\\r\\n    function checkEnteredMarket(address xToken) external view returns (bool);\\r\\n\\r\\n    function getUnderlyingPrice(address xToken) external view returns (uint256);\\r\\n\\r\\n    function getUnderlying(address xToken) external view returns (address);\\r\\n\\r\\n    function getXToken(address token) external view returns (address);\\r\\n\\r\\n    function getCollateralFactor(address xToken)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function rewardToken() external view returns (address);\\r\\n\\r\\n    function enterMarkets(address[] calldata xTokens)\\r\\n        external\\r\\n        returns (uint256[] memory);\\r\\n\\r\\n    function claim() external;\\r\\n\\r\\n    function mint(address xToken, uint256 mintAmount)\\r\\n        external\\r\\n        returns (uint256);\\r\\n\\r\\n    function borrow(address xToken, uint256 borrowAmount)\\r\\n        external\\r\\n        returns (uint256);\\r\\n\\r\\n    function repayBorrow(address xToken, uint256 repayAmount)\\r\\n        external\\r\\n        returns (uint256);\\r\\n\\r\\n    function redeemUnderlying(address xToken, uint256 redeemAmount)\\r\\n        external\\r\\n        returns (uint256);\\r\\n\\r\\n    function redeem(address xToken, uint256 redeemTokenAmount)\\r\\n        external\\r\\n        returns (uint256);\\r\\n\\r\\n    function accrueInterest(address xToken) external;\\r\\n}\\r\\n\\r\\ninterface IFarmingLogic is ILogic {\\r\\n    function addLiquidity(\\r\\n        address swap,\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address swap,\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function farmingDeposit(\\r\\n        address swapMaster,\\r\\n        uint256 _pid,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function farmingWithdraw(\\r\\n        address swapMaster,\\r\\n        uint256 _pid,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n}\\r\\n\\r\\nstruct CalcChangeAmountParams {\\r\\n    uint256 amountUsd;\\r\\n    address pool;\\r\\n    uint256 token0Price;\\r\\n    uint256 token1Price;\\r\\n    uint24 minPricePercentage;\\r\\n    uint24 maxPricePercentage;\\r\\n    uint256 tokenId;\\r\\n}\\r\\n\\r\\nstruct AddLiquidityParams {\\r\\n    address pool;\\r\\n    uint256 amount0;\\r\\n    uint256 amount1;\\r\\n    int24 tickLower;\\r\\n    int24 tickUpper;\\r\\n    uint256 tokenId;\\r\\n    uint24 minPricePercentage;\\r\\n    uint24 maxPricePercentage;\\r\\n}\\r\\n\\r\\nstruct WithdrawAndRemoveParams {\\r\\n    uint256 tokenId;\\r\\n    address pool;\\r\\n    uint128 liquidity;\\r\\n    uint256 amount0;\\r\\n    uint256 amount1;\\r\\n    bool shouldBurn;\\r\\n}\\r\\n\\r\\ninterface IFarmingV3Logic {\\r\\n    function getAmountsByPosition(uint256 _tokenId, address _pool)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 amount0,\\r\\n            uint256 amount1,\\r\\n            uint128 liquidity\\r\\n        );\\r\\n\\r\\n    function calcFeeAmountsByPosition(uint256 _tokenId, address pool)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 fee0, uint256 fee1);\\r\\n\\r\\n    function checkRebalancePriceRangeForPosition(\\r\\n        uint256 tokenId,\\r\\n        address pool,\\r\\n        uint160 sqrtPriceThreshold\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    function getTokensByPool(address _pool)\\r\\n        external\\r\\n        view\\r\\n        returns (address token0, address token1);\\r\\n\\r\\n    function calcChangeAmount(CalcChangeAmountParams memory params)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint128 liquidity,\\r\\n            uint256 amount0,\\r\\n            uint256 amount1,\\r\\n            int24 tickLower,\\r\\n            int24 tickUpper\\r\\n        );\\r\\n\\r\\n    function calcNewPoolTicks(\\r\\n        address pool,\\r\\n        uint24 minPricePercentage,\\r\\n        uint24 maxPricePercentage\\r\\n    ) external view returns (int24 tickLower, int24 tickUpper);\\r\\n\\r\\n    function addLiquidity(AddLiquidityParams memory params)\\r\\n        external\\r\\n        returns (\\r\\n            uint256 tokenId,\\r\\n            uint128 liquidity,\\r\\n            uint256 amount0,\\r\\n            uint256 amount1\\r\\n        );\\r\\n\\r\\n    function removeLiquidity(WithdrawAndRemoveParams memory params)\\r\\n        external\\r\\n        returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function addToFarming(uint256 _tokenId, address pool) external;\\r\\n\\r\\n    function removeFromFarming(\\r\\n        uint256 tokenId,\\r\\n        address pool,\\r\\n        uint256 liquidity\\r\\n    ) external;\\r\\n\\r\\n    function withdrawAndRemove(WithdrawAndRemoveParams memory params)\\r\\n        external\\r\\n        returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function claimFarmingRewards(uint256 _tokenId, address pool)\\r\\n        external\\r\\n        returns (uint256);\\r\\n\\r\\n    function farmingRewardsToken() external view returns (address);\\r\\n\\r\\n    function getRewardsAmount(uint256 _tokenId, address pool)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function collectFees(uint256 _tokenId, address _pool)\\r\\n        external\\r\\n        returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function WETH() external view returns (IWETH);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IStrategyStatistics.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nstruct XTokenInfo {\\r\\n    string symbol;\\r\\n    address xToken;\\r\\n    uint256 totalSupply;\\r\\n    uint256 totalSupplyUSD;\\r\\n    uint256 lendingAmount;\\r\\n    uint256 lendingAmountUSD;\\r\\n    uint256 borrowAmount;\\r\\n    uint256 borrowAmountUSD;\\r\\n    uint256 borrowLimit;\\r\\n    uint256 borrowLimitUSD;\\r\\n    uint256 underlyingBalance;\\r\\n    uint256 priceUSD;\\r\\n}\\r\\n\\r\\nstruct XTokenAnalytics {\\r\\n    string symbol;\\r\\n    address platformAddress;\\r\\n    string underlyingSymbol;\\r\\n    address underlyingAddress;\\r\\n    uint256 underlyingDecimals;\\r\\n    uint256 underlyingPrice;\\r\\n    uint256 totalSupply;\\r\\n    uint256 totalSupplyUSD;\\r\\n    uint256 totalBorrows;\\r\\n    uint256 totalBorrowsUSD;\\r\\n    uint256 liquidity;\\r\\n    uint256 collateralFactor;\\r\\n    uint256 borrowApy;\\r\\n    uint256 borrowRewardsApy;\\r\\n    uint256 supplyApy;\\r\\n    uint256 supplyRewardsApy;\\r\\n}\\r\\n\\r\\nstruct StrategyStatistics {\\r\\n    XTokenInfo[] xTokensStatistics;\\r\\n    WalletInfo[] walletStatistics;\\r\\n    uint256 lendingEarnedUSD;\\r\\n    uint256 totalSupplyUSD;\\r\\n    uint256 totalBorrowUSD;\\r\\n    uint256 totalBorrowLimitUSD;\\r\\n    uint256 borrowRate;\\r\\n    uint256 storageAvailableUSD;\\r\\n    int256 totalAmountUSD;\\r\\n}\\r\\n\\r\\nstruct LbfStrategyStatistics {\\r\\n    XTokenInfo[] xTokensStatistics;\\r\\n    WalletInfo[] walletStatistics;\\r\\n    uint256 lendingEarnedUSD;\\r\\n    uint256 totalSupplyUSD;\\r\\n    uint256 totalBorrowUSD;\\r\\n    uint256 totalBorrowLimitUSD;\\r\\n    uint256 borrowRate;\\r\\n    uint256 storageAvailableUSD;\\r\\n    StakedInfo[] stakedStatistics;\\r\\n    uint256 stakedAmountUSD;\\r\\n    uint256 farmingRewardsAmountUSD;\\r\\n    int256 totalAmountUSD;\\r\\n}\\r\\n\\r\\nstruct FarmingPairInfo {\\r\\n    uint256 index;\\r\\n    address lpToken;\\r\\n    uint256 farmingAmount;\\r\\n    uint256 rewardsAmount;\\r\\n    uint256 rewardsAmountUSD;\\r\\n}\\r\\n\\r\\nstruct WalletInfo {\\r\\n    string symbol;\\r\\n    address token;\\r\\n    uint256 balance;\\r\\n    uint256 balanceUSD;\\r\\n}\\r\\n\\r\\nstruct PriceInfo {\\r\\n    address token;\\r\\n    uint256 priceUSD;\\r\\n}\\r\\n\\r\\nstruct StakedTokenAmountUSD {\\r\\n    address token;\\r\\n    uint256 amount;\\r\\n    uint256 amountUSD;\\r\\n    uint256 fee;\\r\\n    uint256 feeUSD;\\r\\n}\\r\\n\\r\\nstruct StakedInfo {\\r\\n    uint256 tokenId;\\r\\n    StakedTokenAmountUSD token0Info;\\r\\n    StakedTokenAmountUSD token1Info;\\r\\n}\\r\\n\\r\\nstruct Pair {\\r\\n    address pool;\\r\\n    uint24 percentage;\\r\\n    uint24 minPricePercentage;\\r\\n    uint24 maxPricePercentage;\\r\\n    uint160 sqrtPriceThreshold; // 2**96 * sqrt(percentage)\\r\\n    uint256 tokenId;\\r\\n}\\r\\n\\r\\nenum DestroyMode {\\r\\n    // Remove liquidity from all pairs based on percentages\\r\\n    Proportional,\\r\\n    // Remove maximum liquidity from pair by pair\\r\\n    Greedy,\\r\\n    // Remove all liquidity\\r\\n    Full\\r\\n}\\r\\n\\r\\ninterface IStrategyStatistics {\\r\\n    function getXTokenInfo(address _asset, address comptroller)\\r\\n        external\\r\\n        view\\r\\n        returns (XTokenAnalytics memory);\\r\\n\\r\\n    function getXTokensInfo(address comptroller)\\r\\n        external\\r\\n        view\\r\\n        returns (XTokenAnalytics[] memory);\\r\\n\\r\\n    function getStrategyStatistics(address logic)\\r\\n        external\\r\\n        view\\r\\n        returns (StrategyStatistics memory statistics);\\r\\n\\r\\n    function getStrategyXTokenInfo(address xToken, address logic)\\r\\n        external\\r\\n        view\\r\\n        returns (XTokenInfo memory tokenInfo);\\r\\n\\r\\n    function getStrategyXTokenInfoCompact(address xToken, address logic)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 totalSupply,\\r\\n            uint256 borrowLimit,\\r\\n            uint256 borrowAmount\\r\\n        );\\r\\n\\r\\n    function getRewardsTokenPrice(address comptroller, address rewardsToken)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 priceUSD);\\r\\n\\r\\n    function getEnteredMarkets(address comptroller, address logic)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory markets);\\r\\n}\\r\\n\\r\\ninterface IFarmingStatistics {\\r\\n    function getStakedPortfolio(address logic, address strategy)\\r\\n        external\\r\\n        view\\r\\n        returns (StakedInfo[] memory);\\r\\n\\r\\n    function getFarmingRewardsAmount(address logic, address strategy)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/OwnableUpgradeableVersionable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.13;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\nabstract contract OwnableUpgradeableVersionable is OwnableUpgradeable {\\r\\n    string private _version;\\r\\n    string private _purpose;\\r\\n\\r\\n    event UpgradeVersion(string version, string purpose);\\r\\n\\r\\n    function getVersion() external view returns (string memory) {\\r\\n        return _version;\\r\\n    }\\r\\n\\r\\n    function getPurpose() external view returns (string memory) {\\r\\n        return _purpose;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set version and purpose\\r\\n     * @param version Version string, ex : 1.2.0\\r\\n     * @param purpose Purpose string\\r\\n     */\\r\\n    function upgradeVersion(string memory version, string memory purpose)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(bytes(version).length != 0, \\\"OV1\\\");\\r\\n\\r\\n        _version = version;\\r\\n        _purpose = purpose;\\r\\n\\r\\n        emit UpgradeVersion(version, purpose);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/OwnableUpgradeableAdminable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.13;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\nabstract contract OwnableUpgradeableAdminable is OwnableUpgradeable {\\r\\n    address private _admin;\\r\\n\\r\\n    event SetAdmin(address admin);\\r\\n\\r\\n    modifier onlyAdmin() virtual {\\r\\n        require(msg.sender == _admin, \\\"OA1\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwnerAndAdmin() virtual {\\r\\n        require(msg.sender == owner() || msg.sender == _admin, \\\"OA2\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set admin\\r\\n     * @param newAdmin Addres of new admin\\r\\n     */\\r\\n    function setAdmin(address newAdmin) external onlyOwner {\\r\\n        _admin = newAdmin;\\r\\n        emit SetAdmin(newAdmin);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.3) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.3) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.9._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function withdraw(uint256 wad) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IPancakeV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IPancakeV3Factory {\\r\\n    function getPool(\\r\\n        address _fromAsset,\\r\\n        address _toAsset,\\r\\n        uint24 fee\\r\\n    ) external view returns (address);\\r\\n}\\r\\n\\r\\ninterface IPancakeV3Router {\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingle(ExactInputSingleParams memory params)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInput(ExactInputParams calldata params)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n    /// that may remain in the router after the swap.\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutputSingle(ExactOutputSingleParams memory params)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint256 amountIn);\\r\\n\\r\\n    struct ExactOutputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutput(ExactOutputParams calldata params)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint256 amountIn);\\r\\n\\r\\n    function refundETH() external payable;\\r\\n}\\r\\n\\r\\ninterface IPancakeV3MasterChef {\\r\\n    function CAKE() external view returns (address);\\r\\n\\r\\n    function pendingCake(uint256 _tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 reward);\\r\\n\\r\\n    function harvest(uint256 _tokenId, address _to)\\r\\n        external\\r\\n        returns (uint256 reward);\\r\\n\\r\\n    function withdraw(uint256 _tokenId, address _to)\\r\\n        external\\r\\n        returns (uint256 reward);\\r\\n\\r\\n    function increaseLiquidity(\\r\\n        INonfungiblePositionManager.IncreaseLiquidityParams memory params\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint128 liquidity,\\r\\n            uint256 amount0,\\r\\n            uint256 amount1\\r\\n        );\\r\\n\\r\\n    function decreaseLiquidity(\\r\\n        INonfungiblePositionManager.DecreaseLiquidityParams memory params\\r\\n    ) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function collect(INonfungiblePositionManager.CollectParams memory params)\\r\\n        external\\r\\n        returns (uint256 amount0, uint256 amount1);\\r\\n}\\r\\n\\r\\ninterface IPancakeV3Pool {\\r\\n    // Has a bit different signature than the original IUniswapV3Pool\\r\\n    function slot0()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint160 sqrtPriceX96,\\r\\n            int24 tick,\\r\\n            uint16 observationIndex,\\r\\n            uint16 observationCardinality,\\r\\n            uint16 observationCardinalityNext,\\r\\n            uint32 feeProtocol,\\r\\n            bool unlocked\\r\\n        );\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\r\\n\\r\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\r\\n\\r\\n    function fee() external view returns (uint24);\\r\\n\\r\\n    function ticks(int24 tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint128 liquidityGross,\\r\\n            int128 liquidityNet,\\r\\n            uint256 feeGrowthOutside0X128,\\r\\n            uint256 feeGrowthOutside1X128,\\r\\n            int56 tickCumulativeOutside,\\r\\n            uint160 secondsPerLiquidityOutsideX128,\\r\\n            uint32 secondsOutside,\\r\\n            bool initialized\\r\\n        );\\r\\n\\r\\n    function tickSpacing() external view returns (int24);\\r\\n\\r\\n    function liquidity() external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface INonfungiblePositionManager {\\r\\n    struct MintParams {\\r\\n        address token0;\\r\\n        address token1;\\r\\n        uint24 fee;\\r\\n        int24 tickLower;\\r\\n        int24 tickUpper;\\r\\n        uint256 amount0Desired;\\r\\n        uint256 amount1Desired;\\r\\n        uint256 amount0Min;\\r\\n        uint256 amount1Min;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n    }\\r\\n\\r\\n    struct IncreaseLiquidityParams {\\r\\n        uint256 tokenId;\\r\\n        uint256 amount0Desired;\\r\\n        uint256 amount1Desired;\\r\\n        uint256 amount0Min;\\r\\n        uint256 amount1Min;\\r\\n        uint256 deadline;\\r\\n    }\\r\\n\\r\\n    struct DecreaseLiquidityParams {\\r\\n        uint256 tokenId;\\r\\n        uint128 liquidity;\\r\\n        uint256 amount0Min;\\r\\n        uint256 amount1Min;\\r\\n        uint256 deadline;\\r\\n    }\\r\\n\\r\\n    struct CollectParams {\\r\\n        uint256 tokenId;\\r\\n        address recipient;\\r\\n        uint128 amount0Max;\\r\\n        uint128 amount1Max;\\r\\n    }\\r\\n\\r\\n    function positions(uint256 tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint96 nonce,\\r\\n            address operator,\\r\\n            address token0,\\r\\n            address token1,\\r\\n            uint24 fee,\\r\\n            int24 tickLower,\\r\\n            int24 tickUpper,\\r\\n            uint128 liquidity,\\r\\n            uint256 feeGrowthInside0LastX128,\\r\\n            uint256 feeGrowthInside1LastX128,\\r\\n            uint128 tokensOwed0,\\r\\n            uint128 tokensOwed1\\r\\n        );\\r\\n\\r\\n    function mint(INonfungiblePositionManager.MintParams memory params)\\r\\n        external\\r\\n        returns (\\r\\n            uint256 tokenId,\\r\\n            uint128 liquidity,\\r\\n            uint256 amount0,\\r\\n            uint256 amount1\\r\\n        );\\r\\n\\r\\n    function increaseLiquidity(\\r\\n        INonfungiblePositionManager.IncreaseLiquidityParams memory params\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint128 liquidity,\\r\\n            uint256 amount0,\\r\\n            uint256 amount1\\r\\n        );\\r\\n\\r\\n    function decreaseLiquidity(\\r\\n        INonfungiblePositionManager.DecreaseLiquidityParams memory params\\r\\n    ) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function collect(INonfungiblePositionManager.CollectParams memory params)\\r\\n        external\\r\\n        returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function burn(uint256 _tokenId) external;\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function ownerOf(uint256 tokenId) external returns (address);\\r\\n\\r\\n    function refundETH() external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/StatisticsBase.sol\": {\r\n        \"StrategyStatisticsLib\": \"0x10cbf988aaf39db2a4a6f44e44a9ff7a4d0e1c18\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_blid\",\"type\":\"address\"}],\"name\":\"SetBLID\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"SetPriceOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"purpose\",\"type\":\"string\"}],\"name\":\"UpgradeVersion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"__StrategyStatistics_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__StrategyStatistics_init_inherited\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blid\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"}],\"name\":\"getAllMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"logic\",\"type\":\"address\"}],\"name\":\"getEnteredMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"markets\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPurpose\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardsToken\",\"type\":\"address\"}],\"name\":\"getRewardsTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceUSD\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"logic\",\"type\":\"address\"}],\"name\":\"getStrategyStatistics\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"xToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupplyUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lendingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lendingAmountUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmountUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowLimitUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceUSD\",\"type\":\"uint256\"}],\"internalType\":\"struct XTokenInfo[]\",\"name\":\"xTokensStatistics\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceUSD\",\"type\":\"uint256\"}],\"internalType\":\"struct WalletInfo[]\",\"name\":\"walletStatistics\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"lendingEarnedUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupplyUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowLimitUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"storageAvailableUSD\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"totalAmountUSD\",\"type\":\"int256\"}],\"internalType\":\"struct StrategyStatistics\",\"name\":\"statistics\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"logic\",\"type\":\"address\"}],\"name\":\"getStrategyXTokenInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"xToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupplyUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lendingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lendingAmountUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmountUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowLimitUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceUSD\",\"type\":\"uint256\"}],\"internalType\":\"struct XTokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"xToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"logic\",\"type\":\"address\"}],\"name\":\"getStrategyXTokenInfoCompact\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"}],\"name\":\"getXTokenInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"platformAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"underlyingSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"underlyingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupplyUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowsUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowApy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRewardsApy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyApy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyRewardsApy\",\"type\":\"uint256\"}],\"internalType\":\"struct XTokenAnalytics\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"}],\"name\":\"getXTokensInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"platformAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"underlyingSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"underlyingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupplyUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowsUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowApy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRewardsApy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyApy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyRewardsApy\",\"type\":\"uint256\"}],\"internalType\":\"struct XTokenAnalytics[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"isXToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pathToSwapBLIDToStableCoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pathToSwapDFToStableCoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blid\",\"type\":\"address\"}],\"name\":\"setBLID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouterBlid\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_pathToSwapBLIDToStableCoin\",\"type\":\"address[]\"}],\"name\":\"setBLIDSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setPriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_iDF\",\"type\":\"address\"}],\"name\":\"setRewardsXToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapGateway\",\"type\":\"address\"}],\"name\":\"setSwapGateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapGateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouterBlid\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouterDF\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"purpose\",\"type\":\"string\"}],\"name\":\"upgradeVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DForceStatistics", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}