{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/multicall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/// @title Multicall - Aggregate results from multiple read-only function calls\\r\\n/// @author Michael Elliot <mike@makerdao.com>\\r\\n/// @author Joshua Levine <joshua@makerdao.com>\\r\\n/// @author Nick Johnson <arachnid@notdot.net>\\r\\n\\r\\ncontract XEX_MULTICALL {\\r\\n    struct Call {\\r\\n        address target;\\r\\n        bytes callData;\\r\\n        uint fee;\\r\\n    }\\r\\n\\r\\n    function aggregate(Call[] memory calls) public view returns (uint256 blockNumber, bytes[] memory returnData) {\\r\\n        blockNumber = block.number;\\r\\n        returnData = new bytes[](calls.length);\\r\\n        for (uint256 i = 0; i < calls.length; i++) {\\r\\n            (bool success, bytes memory ret) = calls[i].target.staticcall(calls[i].callData);\\r\\n            require(success);\\r\\n            returnData[i] = ret;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function run(Call[] memory calls) public payable returns (uint256 blockNumber, bytes[] memory returnData)  {\\r\\n        blockNumber = block.number;\\r\\n        returnData = new bytes[](calls.length);\\r\\n        bool success;\\r\\n        bytes memory ret;\\r\\n        for (uint256 i = 0; i < calls.length; i++) {\\r\\n            if( calls[i].fee > 0 )\\r\\n                (success, ret) = calls[i].target.call{value : calls[i].fee}(calls[i].callData);\\r\\n            else\\r\\n                (success, ret) = calls[i].target.call(calls[i].callData);\\r\\n            require(success,\\\"call error\\\");\\r\\n            returnData[i] = ret;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Helper functions\\r\\n    function getEthBalance(address addr) public view returns (uint256 balance) {\\r\\n        balance = addr.balance;\\r\\n    }\\r\\n\\r\\n    function getBlockHash(uint256 blockNumber) public view returns (bytes32 blockHash) {\\r\\n        blockHash = blockhash(blockNumber);\\r\\n    }\\r\\n\\r\\n    function getLastBlockHash() public view returns (bytes32 blockHash) {\\r\\n        blockHash = blockhash(block.number - 1);\\r\\n    }\\r\\n\\r\\n    function getCurrentBlockTimestamp() public view returns (uint256 timestamp) {\\r\\n        timestamp = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function getCurrentBlockDifficulty() public view returns (uint256 difficulty) {\\r\\n        difficulty = block.difficulty;\\r\\n    }\\r\\n\\r\\n    function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {\\r\\n        gaslimit = block.gaslimit;\\r\\n    }\\r\\n\\r\\n    function getCurrentBlockCoinbase() public view returns (address coinbase) {\\r\\n        coinbase = block.coinbase;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"struct XEX_MULTICALL.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockCoinbase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"coinbase\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gaslimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"struct XEX_MULTICALL.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"run\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "XEX_MULTICALL", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}