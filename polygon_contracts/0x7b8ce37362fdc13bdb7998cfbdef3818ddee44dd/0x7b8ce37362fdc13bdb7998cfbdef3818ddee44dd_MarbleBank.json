{"SourceCode": "// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/Pausable.sol\r\n\r\n\r\npragma solidity 0.7.0;\r\n\r\n\r\n/// @title Pausable\r\n/// @notice Base contract which allows children to implement an emergency stop mechanism for maintainance purposes\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  /// @notice Specifies whether the contract is paused at the moment\r\n  bool public paused = false;\r\n\r\n\r\n  /// @notice Modifier to allow actions only when the contract IS paused\r\n  modifier whenNotPaused() {\r\n    require(!paused, \"Contract is paused\");\r\n    _;\r\n  }\r\n\r\n  /// @notice Modifier to allow actions only when the contract IS NOT paused\r\n  modifier whenPaused {\r\n    require(paused, \"Contract is not paused\");\r\n    _;\r\n  }\r\n\r\n  /// @notice Called by the owner to pause, triggers stopped state\r\n  function pause()\r\n    external\r\n    onlyOwner\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    paused = true;\r\n    emit Pause();\r\n    return true;\r\n  }\r\n\r\n  /// @notice Called by the owner to unpause, returns to normal state\r\n  function unpause()\r\n    external\r\n    onlyOwner\r\n    whenPaused\r\n    returns (bool)\r\n  {\r\n    paused = false;\r\n    emit Unpause();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/MarbleBankWithdrawAuthorizationInterface.sol\r\n\r\n\r\npragma solidity 0.7.0;\r\n\r\n/// @title Marble Bank Withdraw Authorization\r\n/// @notice Helper contract which decides which MarbleBank withdrawals can be carried out.\r\n/// @dev This version of contract is based on whitelisting users. This means, that no withdrawals are accepted unless the user issuing the withdrawal is whitelisted. \r\ninterface MarbleBankWithdrawAuthorizationInterface {\r\n\r\n  /// @notice Checks, whether the given user can withdraw given amount of given token from the bank\r\n  /// @param userAddress Address of the withdrawing user\r\n  /// @param tokenAddress Address of the token to be withdrawn\r\n  /// @param amount Amount of tokens to be withdrawn\r\n  function canWithdraw(address userAddress, address tokenAddress, uint256 amount)\r\n    external\r\n    view\r\n    returns (bool);\r\n\r\n  /// @notice Notifies this contract that a withdrawal was executed. It is up to the bank contract to call this function correctly after each withdrawal\r\n  /// @param userAddress Address of the withdrawing user\r\n  /// @param tokenAddress Address of the withdrawn token\r\n  /// @param amount Amount of the withdrawn tokens\r\n  function withdrawn(address userAddress, address tokenAddress, uint256 amount)\r\n    external;\r\n\r\n}\r\n\r\n// File: contracts/MarbleBankInterface.sol\r\n\r\n\r\npragma solidity 0.7.0;\r\n\r\n\r\n\r\n\r\ninterface MarbleBankInterface {\r\n\r\n  /// @notice Deposits given amount of given token to the bank\r\n  /// @dev Deposits the tokens to the user's account. If the account does not exists, it is created. Also requires that the user actually has the given amount of tokens. At the end, it emits Deposit event\r\n  /// @param token Address of the token to be deposited\r\n  /// @param amount Amount of tokens to be deposited\r\n  /// @param to Address of a user to whose account the tokens are to be deposited\r\n  /// @param note Note for the bank transaction\r\n  function deposit(ERC20 token, uint256 amount, address to, string memory note) \r\n    external;\r\n\r\n  /// @notice Withdraws the given amount of the given tokens from the user's account\r\n  /// @dev Withdraws token from the user's account. Requires that the user has account for the given token and has at least the withdraw amount tokens stored in it. At the end, it emits Withdrawal event\r\n  /// @param token Address of the token to be withdrawn\r\n  /// @param amount Amount of the tokens to be withdrawn\r\n  /// @param note Note for the bank transaction\r\n  function withdraw(ERC20 token, uint256 amount, string memory note) \r\n    external;\r\n\r\n  /// @notice Pays the given amount of given tokens to the specified address.\r\n  /// @dev Transfers tokens to the given address decreasing balance of the user which is paying. Requires that the paying user has account for the  given token and enough tokens stored there. At the end, it emits Payment event\r\n  /// @param token Address of the token to be paid with\r\n  /// @param amount Amount of tokens to be paid\r\n  /// @param to Address which receives the payment\r\n  /// @param note Note for the bank transaction\r\n  function pay(ERC20 token, uint256 amount, address to, string memory note) \r\n    external;\r\n\r\n  /// @notice Execute payment by affiliate on behalf of a user\r\n  /// @dev Transfers tokens from the specified account to the specified account. Requires that the msg.sender is affiiliate and the user on whose behalf the payment is executed has enough tokens in the bank. At the end, it emits Payment event\r\n  /// @param token Address of the token to be paid with\r\n  /// @param amount Amount of tokens to be paid\r\n  /// @param from Address of the user which is paying\r\n  /// @param to Address which receives the payment\r\n  /// @param note Note for the bank transaction\r\n  function payByAffiliate(ERC20 token, uint256 amount, address from, address to, string memory note) \r\n    external;\r\n\r\n  /// @notice Checks whether the specified user has specified amount of tokens\r\n  /// @dev This can be used by other contracts to check, whether a user has enough tokens to execute a payment.\r\n  /// @param token Address of the tested token\r\n  /// @param amount Amount of tokens to be checked\r\n  /// @param user Address of the tested user\r\n  /// @return hasEnough True, if the user has the corresponding account and specified amount of tokens, false otherwise\r\n  function hasEnoughTokens(ERC20 token, uint256 amount, address user) \r\n    external \r\n    view \r\n    returns(bool hasEnough);\r\n\r\n  /// @notice Get balance of the given tokens and the given user\r\n  /// @param token Address of the token whose balance this method will return\r\n  /// @param user Address of the user whose balance this method returns\r\n  /// @return balance Amount of token the user has in his account (or zero if the account does not exist)\r\n  function userBalance(ERC20 token, address user) \r\n    external \r\n    view \r\n    returns(uint256 balance);\r\n\r\n  /// @notice Add the specified user to the list of bank's affiliates\r\n  /// @dev Adds new affiliate. If the address already is affiliate, the transaction reverts. Can be executed only by the owner of this contract. At the end, emits AffiliateAdded event\r\n  /// @param newAffiliate Address if the user\r\n  function addAffiliate(address newAffiliate) \r\n    external;\r\n\r\n  /// @notice Remove the specified user from the list of bank's affiliates\r\n  /// @dev Removes the given affiliate. If the address is not affiliate, the transaction reverts. Can be executed only by the owner of this contract. At the end, it emits AffiliateRemoved contract\r\n  /// @param affiliate Address if the user\r\n  function removeAffiliate(address affiliate) \r\n    external;\r\n\r\n  /// @notice Checkes, whether the given user is on the list of bank's affiliates\r\n  /// @param testedAddress Address of the user to be tested\r\n  /// @return addressIsAffiliate True, if the user is affiliate, false otherwise\r\n  function isAffiliate(address testedAddress) \r\n    external \r\n    view \r\n    returns(bool addressIsAffiliate);\r\n\r\n  /// @notice Sets contract which authorizes users to withdraw tokens\r\n  /// @param _withdrawAuthorization Address of the contract\r\n  function setWithdrawAuthorization(MarbleBankWithdrawAuthorizationInterface _withdrawAuthorization)\r\n    external;\r\n\r\n  /// @notice Transfers all balance of the given user to the new bank\r\n  /// @param token address of the token to be transfered\r\n  /// @param userAddress address of the user whose balance is to be transfered\r\n  /// @param newBankAddress address of the new bank contract\r\n  function transferToNewBank(ERC20 token, address userAddress, MarbleBankInterface newBankAddress)\r\n    external;\r\n\r\n  /// @notice Transfers tokens to the owner to avoid lock\r\n  /// @param token address of the token to be transfered \r\n  function withdrawByOwner(ERC20 token) \r\n    external;\r\n\r\n}\r\n\r\n// File: contracts/MarbleBank.sol\r\n\r\n\r\npragma solidity 0.7.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title Bank contract for Marblegame\r\n/// @notice This contract allows depositing and withdrawing any ERC20 type tokens for users. It also allows other Marble contracts to use this one for payments for their services (e.g. creating a page candidate)\r\ncontract MarbleBank is MarbleBankInterface, Ownable, Pausable \r\n{\r\n\r\n  string constant REVERT_TO_NULL_ADDRESS = \"Transaction to null address\";\r\n  string constant REVERT_NOT_ENOUGH_TOKENS = \"Not enough tokens\";\r\n  string constant REVERT_USER_ACCOUNT_DOES_NOT_EXIST = \"User account does not exist\";\r\n  string constant REVERT_USER_DOES_NOT_HAVE_ACCOUNT_FOR_TOKEN = \"Token account for the given user does not exist\";\r\n  string constant REVERT_AFFILIATE_NULL_ADDRESS = \"Null address cannot be affiliate\";\r\n  string constant REVERT_ADDRESS_NOT_AFFILIATE = \"Address is not affiliate\";\r\n  string constant REVERT_ADDRESS_IS_AFFILIATE = \"Address is affiliate\";\r\n  string constant REVERT_WITHDRAW_NOT_AUTHORIZED = \"Withdraw not authorized\";\r\n\r\n  /// @notice Event emited when a user deposits tokens to the bank\r\n  /// @param from Address of the user which deposited the tokens\r\n  /// @param to Address of the user whose account received the deposited tokens\r\n  /// @param token Address of the token which was deposited\r\n  /// @param amount Amount of the deposited tokens\r\n  /// @param note Description of the transaction\r\n  event Deposit(uint256 transactionId, address from, address to, address token, uint256 amount, string note);\r\n  \r\n  /// @notice Event emited when a user withdraws his tokens from the bank\r\n  /// @param user Address of the user which withdrawn the tokens\r\n  /// @param token Address of the token which was withdrawn\r\n  /// @param amount Amount of the withdrawn tokens\r\n  /// @param note Description of the transaction\r\n  event Withdrawal(uint256 transactionId, address user, address token, uint256 amount, string note);\r\n\r\n  /// @notice Event emited when a payment in tokens occurs\r\n  /// @param from Address of the paying user\r\n  /// @param to Address of the user which received the payment\r\n  /// @param affiliate Address of the affiliate who executed the transaction\r\n  /// @param token Address of the token in which the payment was executed\r\n  /// @param amount Amount of the tokens transfered during the payment\r\n  /// @param note Description of the transaction\r\n  event Payment(uint256 transactionId, address from, address to, address affiliate, address token, uint256 amount, string note);\r\n  \r\n  /// @notice Event emited when a new affiliate is added\r\n  /// @param affiliate Address of the affiliate\r\n  event AffiliateAdded(address affiliate);\r\n\r\n  /// @notice Event emited when an existing affiliate is removed\r\n  /// @param affiliate Address of removed affiliate\r\n  event AffiliateRemoved(address affiliate);\r\n\r\n  /// @dev Structure holding information about a transaction\r\n  /// @param id Unique identifier of the transaction\r\n  /// @param from Address of the user from whose account tokens were transfered\r\n  /// @param to Address of the user to whom the tokens were transfered\r\n  /// @param affiliateExecuted Address of the affiliate who executed the transaction\r\n  /// @param token Address of the tokens which were transfered\r\n  /// @param amount Amount of the transfered tokens\r\n  /// @param note Each transaction must contain a note describing the transaction\r\n  /// @param timestamp Timestamp when the transaction was executed\r\n  struct Transaction \r\n  {\r\n    uint256 id;\r\n    address from;\r\n    address to;\r\n    address affiliateExecuted;\r\n    address token;\r\n    uint256 amount;\r\n    string note;\r\n    uint256 timestamp;\r\n  }\r\n\r\n  /// @dev Structure representing user account in the bank\r\n  /// @param userAddress Address of the user to which the account belongs\r\n  /// @param tokenAccounts Subaccounts for each token the user interacted with inside the bank\r\n  /// @param exists Marker variable specifying whether this account exists\r\n  struct UserAccount \r\n  {\r\n    address userAddress;\r\n    mapping(address => UserTokenAccount) tokenAccounts;\r\n    bool exists;\r\n  }\r\n\r\n  /// @dev Structure representing user's account for given token\r\n  /// @param userAddress Address of the user to which the account belongs\r\n  /// @param tokenAddress Address of the token which this account represents\r\n  /// @param balance The amount of the given tokens the given user has in this account\r\n  /// @param transactions History of all the transactions made with this account\r\n  /// @param exists Marker variable specifying whether this account exists\r\n  struct UserTokenAccount \r\n  {\r\n    address userAddress;\r\n    address tokenAddress;\r\n    uint256 balance;\r\n    uint256[] transactions;\r\n    bool exists;\r\n  }\r\n\r\n  /// @dev Allows function call iff the given user has account for the given token\r\n  /// @param user Address of the tested user\r\n  /// @param token Address of the tested token\r\n  modifier hasTokenAccount(address user, address token) \r\n  {\r\n    require(accounts[user].exists, REVERT_USER_ACCOUNT_DOES_NOT_EXIST);\r\n    require(accounts[user].tokenAccounts[token].exists, REVERT_USER_DOES_NOT_HAVE_ACCOUNT_FOR_TOKEN);\r\n    _;\r\n  }\r\n\r\n  /// @dev Allows function call iff the given user is affiliate. Affiliate users have higher permissions, e.g. they can pay on user's behalf\r\n  /// @param user Address of the tested user\r\n  modifier mustBeAffiliate(address user) \r\n  {\r\n    require(affiliates[user], REVERT_ADDRESS_NOT_AFFILIATE);\r\n    _;\r\n  }\r\n\r\n  MarbleBankWithdrawAuthorizationInterface public withdrawAuthorization;\r\n\r\n  /// @dev Maps user address to his account\r\n  mapping(address => UserAccount) public accounts;\r\n\r\n  /// @dev Stores all the transactions executed on this contract\r\n  mapping(uint256 => Transaction) public transactions;\r\n\r\n  /// @dev Stores last transaction's id so we can assign unique id to each transaction\r\n  uint256 lastTransactionId = 0;\r\n\r\n  /// @dev Dictionary of bank affiliates. Affiliate users have higher permissions, e.g. they can pay on user's behalf. These will be other Marble contracts, so they can charge user for using their services\r\n  mapping(address => bool) affiliates;\r\n\r\n  /// @notice Deposits given amount of given token to the bank\r\n  /// @dev Deposits the tokens to the user's account. If the account does not exists, it is created. Also requires that the user actually has the given amount of tokens. At the end, it emits Deposit event\r\n  /// @param token Address of the token to be deposited\r\n  /// @param amount Amount of tokens to be deposited\r\n  /// @param to Address of a user to whose account the tokens are to be deposited\r\n  /// @param note Note for the bank transaction\r\n  function deposit(ERC20 token, uint256 amount, address to, string memory note) \r\n    override \r\n    external \r\n    whenNotPaused\r\n  {\r\n    require(to != address(0), REVERT_TO_NULL_ADDRESS);\r\n    require(token.balanceOf(msg.sender) >= amount, REVERT_NOT_ENOUGH_TOKENS);\r\n    _createUserTokenAccountIfDoesntExist(to, token);\r\n    _deposit(to, token, amount, note);\r\n  }\r\n\r\n  /// @notice Withdraws the given amount of the given tokens from the user's account\r\n  /// @dev Withdraws token from the user's account. Requires that the user has account for the given token and has at least the withdraw amount tokens stored in it. At the end, it emits Withdrawal event\r\n  /// @param token Address of the token to be withdrawn\r\n  /// @param amount Amount of the tokens to be withdrawn\r\n  /// @param note Note for the bank transaction\r\n  function withdraw(ERC20 token, uint256 amount, string memory note) \r\n    override \r\n    external \r\n    hasTokenAccount(msg.sender, address(token))\r\n    whenNotPaused\r\n  {\r\n    require(withdrawAuthorization.canWithdraw(msg.sender, address(token), amount), REVERT_WITHDRAW_NOT_AUTHORIZED);\r\n    require(_userBalance(msg.sender, token) >= amount, REVERT_NOT_ENOUGH_TOKENS);\r\n    _withdraw(msg.sender, msg.sender, token, amount, note);\r\n    withdrawAuthorization.withdrawn(msg.sender, address(token), amount);\r\n  }\r\n\r\n\r\n  /// @notice Pays the given amount of given tokens to the specified address\r\n  /// @dev Transfers tokens to the given address, decreasing balance of the user which is paying. Requires that the paying user has account for the  given token and enough tokens stored there. At the end, it emits Payment event\r\n  /// @param token Address of the token to be paid with\r\n  /// @param amount Amount of tokens to be paid\r\n  /// @param to Address which receives the payment\r\n  /// @param note Note for the bank transaction\r\n  function pay(ERC20 token, uint256 amount, address to, string memory note) \r\n    override \r\n    external \r\n    hasTokenAccount(msg.sender, address(token)) \r\n    whenNotPaused\r\n  {\r\n    require(to != address(0), REVERT_TO_NULL_ADDRESS);\r\n    require(_userBalance(msg.sender, token) >= amount, REVERT_NOT_ENOUGH_TOKENS);\r\n    _pay(msg.sender, to, address(0), token, amount, note);\r\n  }\r\n\r\n  /// @notice Execute payment by affiliate on behalf of a user\r\n  /// @dev Transfers tokens from the specified account to the specified account. Requires that the msg.sender is affiiliate and the user on whose behalf the payment is executed has enough tokens in the bank. At the end, it emits Payment event\r\n  /// @param token Address of the token to be paid with\r\n  /// @param amount Amount of tokens to be paid\r\n  /// @param from Address of the user which is paying\r\n  /// @param to Address which receives the payment\r\n  /// @param note Note for the bank transaction\r\n  function payByAffiliate(ERC20 token, uint256 amount, address from, address to, string memory note) \r\n    override \r\n    external \r\n    mustBeAffiliate(msg.sender) \r\n    hasTokenAccount(from, address(token)) \r\n    whenNotPaused\r\n  {\r\n    require(to != address(0), REVERT_TO_NULL_ADDRESS);\r\n    require(_userBalance(from, token) >= amount, REVERT_NOT_ENOUGH_TOKENS);\r\n    _pay(from, to, msg.sender, token, amount, note);\r\n  }\r\n\r\n  /// @notice Checks whether the specified user has specified amount of tokens\r\n  /// @dev This can be used by other contracts to check, whether a user has enough tokens to execute a payment.\r\n  /// @param token Address of the tested token\r\n  /// @param amount Amount of tokens to be checked\r\n  /// @param user Address of the tested user\r\n  /// @return hasEnough True, if the user has the corresponding account and specified amount of tokens, false otherwise\r\n  function hasEnoughTokens(ERC20 token, uint256 amount, address user) \r\n    override \r\n    external \r\n    view\r\n    returns(bool hasEnough)\r\n  {\r\n    if (!accounts[user].exists || !accounts[user].tokenAccounts[address(token)].exists) \r\n    {\r\n      return false;\r\n    }\r\n\r\n    return accounts[user].tokenAccounts[address(token)].balance >= amount;\r\n  }\r\n\r\n  /// @notice Get balance of the given tokens and the given user\r\n  /// @param token Address of the token whose balance this method will return\r\n  /// @param user Address of the user whose balance this method returns\r\n  /// @return balance Amount of token the user has in his account (or zero if the account does not exist)\r\n  function userBalance(ERC20 token, address user) \r\n    override \r\n    external \r\n    view \r\n    returns(uint256 balance) \r\n  {\r\n    if (!accounts[user].exists || !accounts[user].tokenAccounts[address(token)].exists) \r\n    {\r\n      return 0;\r\n    }\r\n\r\n    return _userBalance(user, token);\r\n  }\r\n\r\n  /// @notice Add the specified user to the list of bank's affiliates\r\n  /// @dev Adds new affiliate. If the address already is affiliate, the transaction reverts. Can be executed only by the owner of this contract. At the end, emits AffiliateAdded event\r\n  /// @param newAffiliate Address if the user\r\n  function addAffiliate(address newAffiliate) \r\n    override \r\n    external \r\n    onlyOwner \r\n    whenNotPaused\r\n  {\r\n    require(newAffiliate != address(0), REVERT_AFFILIATE_NULL_ADDRESS);\r\n    require(!affiliates[newAffiliate], REVERT_ADDRESS_IS_AFFILIATE);\r\n    affiliates[newAffiliate] = true;\r\n\r\n    emit AffiliateAdded(newAffiliate);\r\n  }\r\n\r\n  /// @notice Remove the specifiied user from the list of bank's affiliates\r\n  /// @dev Removes the given affiliate. If the address is not affiliate, the transaction reverts. Can be executed only by the owner of this contract. At the end, it emits AffiliateRemoved contract\r\n  /// @param affiliate Address if the user\r\n  function removeAffiliate(address affiliate) \r\n    override \r\n    external \r\n    onlyOwner\r\n    whenNotPaused \r\n  {\r\n    require(affiliates[affiliate], REVERT_ADDRESS_NOT_AFFILIATE);\r\n    affiliates[affiliate] = false;\r\n\r\n    emit AffiliateRemoved(affiliate);\r\n  }\r\n\r\n  /// @notice Checkes, whether the given user is on the list of bank's affiliates\r\n  /// @param testedAddress Address of the user to be tested\r\n  /// @return addressIsAffiliate True, if the user is affiliate, false otherwise\r\n  function isAffiliate(address testedAddress) \r\n    override \r\n    external \r\n    view \r\n    returns(bool addressIsAffiliate) \r\n  {\r\n    return affiliates[testedAddress];\r\n  }\r\n\r\n  /// @notice Sets contract which authorizes users to withdraw tokens\r\n  /// @param _withdrawAuthorization Address of the contract\r\n  function setWithdrawAuthorization(MarbleBankWithdrawAuthorizationInterface _withdrawAuthorization)\r\n    override\r\n    external\r\n    onlyOwner\r\n    whenNotPaused\r\n  {\r\n    withdrawAuthorization = _withdrawAuthorization;\r\n  }\r\n\r\n  /// @notice Transfers all balance of the given user to the new bank\r\n  /// @param token address of the token to be transfered\r\n  /// @param userAddress address of the user whose balance is to be transfered\r\n  /// @param newBankAddress address of the new bank contract\r\n  function transferToNewBank(ERC20 token, address userAddress, MarbleBankInterface newBankAddress)\r\n    override\r\n    external\r\n    onlyOwner\r\n    whenPaused\r\n  {\r\n    uint256 amount = accounts[userAddress].tokenAccounts[address(token)].balance;\r\n    require(amount > 0, \"Balance of the user is 0\");\r\n\r\n    _withdraw(userAddress, address(this), token, amount, \"Withdraw in order to transfer to new bank\");\r\n    token.approve(address(newBankAddress), amount);\r\n    newBankAddress.deposit(token, amount, userAddress, \"Deposit by the old bank\");\r\n  }\r\n\r\n  /// @notice Transfers tokens to the owner to avoid lock\r\n  /// @param token address of the token to be transfered \r\n  function withdrawByOwner(ERC20 token) \r\n    override\r\n    external\r\n    onlyOwner\r\n    whenPaused\r\n  {\r\n    uint256 tokenAmount = token.balanceOf(address(this));\r\n    token.transfer(owner(), tokenAmount);\r\n  }\r\n\r\n  /// @dev Creates account for the given user and given token if it does not exists. Firstly, it creates account for the user (if does not exist) and then the token account (if does not exists)\r\n  /// @param userAddress Address of the user whose account is to be created\r\n  /// @param token Address of the token for which the account is to be created\r\n  function _createUserTokenAccountIfDoesntExist(address userAddress, ERC20 token) \r\n    private \r\n  {\r\n    if (!accounts[userAddress].exists) \r\n    {\r\n      UserAccount storage newUserAccount = accounts[userAddress];\r\n      newUserAccount.userAddress = userAddress;\r\n      newUserAccount.exists = true;\r\n    } \r\n    \r\n    if (!accounts[userAddress].tokenAccounts[address(token)].exists) \r\n    {\r\n      UserTokenAccount storage newTokenAccount = accounts[userAddress].tokenAccounts[address(token)];\r\n      newTokenAccount.userAddress = userAddress;\r\n      newTokenAccount.tokenAddress = address(token);\r\n      newTokenAccount.balance = 0;\r\n      newTokenAccount.exists = true;\r\n    }\r\n  }\r\n\r\n  /// @dev Deposits given amount of tokens to user's account, transfering them from the msg.sender's address to the bank and increasing balance of the user's account\r\n  /// @param accountAddress Address of the user to whose account the tokens are to be deposited\r\n  /// @param token Address of the tokens which are to be transfered\r\n  /// @param amount Amount of the tokens to be transfered\r\n  /// @param note Note for the bank transaction\r\n  function _deposit(address accountAddress, ERC20 token, uint256 amount, string memory note) \r\n    private \r\n  {\r\n    address sender = msg.sender;\r\n    token.transferFrom(sender, address(this), amount);\r\n\r\n    accounts[accountAddress].tokenAccounts[address(token)].balance += amount;\r\n    accounts[accountAddress].tokenAccounts[address(token)].transactions.push(\r\n      _createTransaction(sender, accountAddress, address(0), address(token), amount, note)\r\n    );\r\n    \r\n    emit Deposit(lastTransactionId, sender, accountAddress, address(token), amount, note);\r\n  }\r\n\r\n  /// @dev Executes payment from specified user's account to the specified user. It transfers toknes from the bank to the user and decreases balance of the paying user\r\n  /// @param from Address of the user from whose account the tokens will be transfered\r\n  /// @param to Address where the tokens are to be transfered\r\n  /// @param paidByAffiliate Address of the affiliate who executed the transaction\r\n  /// @param token Address of the tokens which are to be transfered\r\n  /// @param amount Amount of the tokens to be transfered\r\n  /// @param note Note for the bank transaction\r\n  function _pay(address from, address to, address paidByAffiliate, ERC20 token, uint256 amount, string memory note) \r\n    private \r\n  {\r\n    UserTokenAccount storage userTokenAccount = accounts[from].tokenAccounts[address(token)];\r\n    \r\n    token.transfer(to, amount);\r\n    userTokenAccount.balance -= amount;\r\n    userTokenAccount.transactions.push(\r\n      _createTransaction(from, to, paidByAffiliate, address(token), amount, note)\r\n    );\r\n\r\n    emit Payment(lastTransactionId, from, to, paidByAffiliate, address(token), amount, note);\r\n  }\r\n\r\n  /// @dev Withdraws tokens from the given account. It transfers the tokens from the bank to the user address and decreases the balance on the account\r\n  /// @param fromAccount Address of the user from whose account the tokens are to be withdrawn\r\n  /// @param toAddress Address to which the tokens are to be transfered\r\n  /// @param token Address of the tokens to be withdrawn\r\n  /// @param amount Amount of the tokens to be withdrawn\r\n  /// @param note Note for the bank transaction\r\n  function _withdraw(address fromAccount, address toAddress, ERC20 token, uint256 amount, string memory note) \r\n    private \r\n  {\r\n    UserTokenAccount storage userTokenAccount = accounts[fromAccount].tokenAccounts[address(token)];\r\n\r\n    token.transfer(toAddress, amount);\r\n    userTokenAccount.balance -= amount;\r\n    userTokenAccount.transactions.push(\r\n      _createTransaction(address(this), fromAccount, address(0), address(token), amount, note)\r\n    );\r\n\r\n    emit Withdrawal(lastTransactionId, fromAccount, address(token), amount, note);\r\n  }\r\n\r\n  /// @dev Creates and stores new transaction entry and increases the transactions counter (lastTransactionId)\r\n  /// @param from Address from which's account the tokens are transfered\r\n  /// @param to Address which receives the tokens\r\n  /// @param affiliateExecuted Address of the affiliate who executed the transaction\r\n  /// @param token Address of the transfered token\r\n  /// @param amount Amount of the transfered tokens\r\n  /// @param note Description of the bank transaction\r\n  /// @return transactionId Id of the bank transaction\r\n  function _createTransaction(address from, address to, address affiliateExecuted, address token, uint256 amount, string memory note) \r\n    private \r\n    returns (uint256 transactionId)\r\n  {\r\n    transactionId = ++lastTransactionId;\r\n    transactions[transactionId] = Transaction(\r\n      {\r\n        id: transactionId,\r\n        from: from,\r\n        to: to,\r\n        affiliateExecuted: affiliateExecuted,\r\n        token: token,\r\n        amount: amount,\r\n        note: note,\r\n        timestamp: block.timestamp\r\n      }\r\n    );\r\n\r\n    return transactionId;\r\n  }\r\n\r\n  /// @dev Checks the amount of tokens stored in the given account\r\n  /// @param userAddress Address of the user whose account is to be queried\r\n  /// @param token Address of the tokens whose amount is to be queried\r\n  /// @return balance Amount of the tokens in the account\r\n  function _userBalance(address userAddress, ERC20 token) \r\n    private \r\n    view \r\n    returns(uint256 balance)\r\n  {\r\n    return accounts[userAddress].tokenAccounts[address(token)].balance;\r\n  }\r\n\r\n}\r\n", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"affiliate\",\"type\":\"address\"}],\"name\":\"AffiliateAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"affiliate\",\"type\":\"address\"}],\"name\":\"AffiliateRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"affiliate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAffiliate\",\"type\":\"address\"}],\"name\":\"addAffiliate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasEnoughTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasEnough\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"testedAddress\",\"type\":\"address\"}],\"name\":\"isAffiliate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"addressIsAffiliate\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"}],\"name\":\"pay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"}],\"name\":\"payByAffiliate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"affiliate\",\"type\":\"address\"}],\"name\":\"removeAffiliate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract MarbleBankWithdrawAuthorizationInterface\",\"name\":\"_withdrawAuthorization\",\"type\":\"address\"}],\"name\":\"setWithdrawAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"affiliateExecuted\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"contract MarbleBankInterface\",\"name\":\"newBankAddress\",\"type\":\"address\"}],\"name\":\"transferToNewBank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAuthorization\",\"outputs\":[{\"internalType\":\"contract MarbleBankWithdrawAuthorizationInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MarbleBank", "CompilerVersion": "v0.7.0+commit.9e61f92b", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}