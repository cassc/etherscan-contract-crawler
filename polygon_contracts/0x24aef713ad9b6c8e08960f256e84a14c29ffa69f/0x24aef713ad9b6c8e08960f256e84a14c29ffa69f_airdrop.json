{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\npragma solidity =0.8.18;\r\n\r\ninterface IERC721 {\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function isApprovedForAll(address owner, address operator) external returns (bool);\r\n}\r\ninterface Staking{\r\n    function getStaker(address nft, uint256 tokenId) external returns (address staker);\r\n}\r\n\r\ncontract airdrop{\r\n    event transferFailed(address from, address to, uint256 tokenId);\r\n    address immutable public rivalBears;\r\n    address immutable public lostTribes;\r\n    uint256 public currentRivalBearsTokenId;\r\n    uint256 public currentLostTribesId=430;\r\n    constructor(address _rivalBears,address _lostTribes){\r\n        (rivalBears,lostTribes) = (_rivalBears,_lostTribes);\r\n    }\r\n    function send(uint256 amount) external {\r\n        address sender = msg.sender;\r\n        require(sender == address(0xc5294336C0ab9281F3B9919F5aA23AC30f528302),\"unauthorized wallet\");\r\n        require(IERC721(lostTribes).isApprovedForAll(sender,address(this)), \"Contact needs approval for all NFT to send\");\r\n        uint holderId = currentRivalBearsTokenId;\r\n        currentRivalBearsTokenId = currentRivalBearsTokenId + amount;\r\n        uint airdropId = currentLostTribesId;\r\n        require(5000 >= currentRivalBearsTokenId,\"maximuim send exceeded (5000)\");\r\n        address holder;\r\n        address stakerWallet;\r\n        address formerDeliveryAddress;\r\n        uint256 contractCodeSize;\r\n        for(;holderId<currentRivalBearsTokenId;holderId++){\r\n            stakerWallet = Staking(address(0x4Ec902d04F4F1c840B28CffeE2E52d807af4710E)).getStaker(rivalBears,currentRivalBearsTokenId);\r\n            // if holder received initial airdrop unsuccessfully due to bears being staked\r\n            if(holderId >= 430){\r\n                //  if bear is staked then get address of staker\r\n                if(stakerWallet==address(0)){\r\n                    holder = stakerWallet;\r\n                }\r\n                //  if bear is staked then get address of owner\r\n                else{\r\n                    holder = IERC721(rivalBears).ownerOf(holderId);\r\n                }\r\n                try IERC721(lostTribes).transferFrom(sender,holder,airdropId){\r\n                    airdropId++;\r\n                }catch{\r\n                    emit transferFailed(sender,holder,airdropId);\r\n                }\r\n            }\r\n            else{\r\n                formerDeliveryAddress = IERC721(lostTribes).ownerOf(holderId+20);\r\n                assembly { contractCodeSize := extcodesize(formerDeliveryAddress) }\r\n                if(contractCodeSize > 0 ){\r\n                    if(stakerWallet==address(0)){\r\n                        holder = stakerWallet;\r\n                    }\r\n                    //  if bear is staked then get address of owner\r\n                    else{\r\n                        holder = IERC721(rivalBears).ownerOf(holderId);\r\n                    }\r\n                    try IERC721(lostTribes).transferFrom(sender,holder,airdropId){\r\n                        airdropId++;\r\n                    }catch{\r\n                        emit transferFailed(sender,holder,airdropId);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        currentLostTribesId = airdropId;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rivalBears\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lostTribes\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFailed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"currentLostTribesId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRivalBearsTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lostTribes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rivalBears\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "airdrop", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a25541164ae9d59322b59fe94a73869b494c3691000000000000000000000000b04637c27d13052c69824157b9f13af12c4cc825", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e32a136bfdc4a8fcad8766097678171a07d598df6972feee261fdd7ce2a5560a"}