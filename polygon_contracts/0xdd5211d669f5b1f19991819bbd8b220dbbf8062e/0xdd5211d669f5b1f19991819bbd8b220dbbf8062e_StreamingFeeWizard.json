{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lib/chambers/src/StreamingFeeWizard.sol\": {\r\n      \"content\": \"/**\\n *     SPDX-License-Identifier: Apache License 2.0\\n *\\n *     Copyright 2018 Set Labs Inc.\\n *     Copyright 2022 Smash Works Inc.\\n *\\n *     Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *     you may not use this file except in compliance with the License.\\n *     You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *     Unless required by applicable law or agreed to in writing, software\\n *     distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *     See the License for the specific language governing permissions and\\n *     limitations under the License.\\n *\\n *     NOTICE\\n *\\n *     This is a modified code from Set Labs Inc. found at\\n *\\n *     https://github.com/SetProtocol/set-protocol-contracts\\n *\\n *     All changes made by Smash Works Inc. are described and documented at\\n *\\n *     https://docs.arch.finance/chambers\\n *\\n *\\n *             %@@@@@\\n *          @@@@@@@@@@@\\n *        #@@@@@     @@@           @@                   @@\\n *       @@@@@@       @@@         @@@@                  @@\\n *      @@@@@@         @@        @@  @@    @@@@@ @@@@@  @@@*@@\\n *     .@@@@@          @@@      @@@@@@@@   @@    @@     @@  @@\\n *     @@@@@(       (((((      @@@    @@@  @@    @@@@@  @@  @@\\n *    @@@@@@   (((((((\\n *    @@@@@#(((((((\\n *    @@@@@(((((\\n *      @@@((\\n */\\npragma solidity ^0.8.17.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IChamber} from \\\"./interfaces/IChamber.sol\\\";\\nimport {ReentrancyGuard} from \\\"solmate/utils/ReentrancyGuard.sol\\\";\\nimport {IStreamingFeeWizard} from \\\"./interfaces/IStreamingFeeWizard.sol\\\";\\n\\ncontract StreamingFeeWizard is IStreamingFeeWizard, ReentrancyGuard {\\n    /*//////////////////////////////////////////////////////////////\\n                              STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n    uint256 private constant ONE_YEAR_IN_SECONDS = 365.25 days;\\n    uint256 private constant SCALE_UNIT = 1 ether;\\n    mapping(IChamber => FeeState) public feeStates;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * Sets the initial _feeState to the chamber. The chamber needs to exist beforehand.\\n     * Will revert if msg.sender is not a a manager from the _chamber. The feeState\\n     * is structured as:\\n     *\\n     * {\\n     *   feeRecipient:              address; [mandatory]\\n     *   maxStreamingFeePercentage: uint256; [mandatory] < 100%\\n     *   streamingFeePercentage:    address; [mandatory] <= maxStreamingFeePercentage\\n     *   lastCollectTimestamp:      address; [optional]  any value\\n     * }\\n     *\\n     * Consider [1 % = 10e18] for the fees\\n     *\\n     * @param _chamber  Chamber to enable\\n     * @param _feeState     First feeState of the Chamber\\n     */\\n    function enableChamber(IChamber _chamber, FeeState memory _feeState) external nonReentrant {\\n        require(IChamber(_chamber).isManager(msg.sender), \\\"msg.sender is not chamber's manager\\\");\\n        require(_feeState.feeRecipient != address(0), \\\"Recipient cannot be null address\\\");\\n        require(_feeState.maxStreamingFeePercentage <= 100 * SCALE_UNIT, \\\"Max fee must be <= 100%\\\");\\n        require(\\n            _feeState.streamingFeePercentage <= _feeState.maxStreamingFeePercentage,\\n            \\\"Fee must be <= Max fee\\\"\\n        );\\n        require(feeStates[_chamber].lastCollectTimestamp < 1, \\\"Chamber already exists\\\");\\n\\n        _feeState.lastCollectTimestamp = block.timestamp;\\n        feeStates[_chamber] = _feeState;\\n    }\\n\\n    /**\\n     * Calculates total inflation percentage. Mints new tokens in the Chamber for the\\n     * streaming fee recipient. Then calls the chamber to update its quantities.\\n     *\\n     * @param _chamber Chamber to acquire streaming fees from\\n     */\\n    function collectStreamingFee(IChamber _chamber) external nonReentrant {\\n        uint256 previousCollectTimestamp = feeStates[_chamber].lastCollectTimestamp;\\n        require(previousCollectTimestamp > 0, \\\"Chamber does not exist\\\");\\n        require(previousCollectTimestamp < block.timestamp, \\\"Cannot collect twice\\\");\\n        uint256 currentStreamingFeePercentage = feeStates[_chamber].streamingFeePercentage;\\n        require(currentStreamingFeePercentage > 0, \\\"Chamber fee is zero\\\");\\n\\n        feeStates[_chamber].lastCollectTimestamp = block.timestamp;\\n\\n        uint256 inflationQuantity =\\n            _collectStreamingFee(_chamber, previousCollectTimestamp, currentStreamingFeePercentage);\\n\\n        emit FeeCollected(address(_chamber), currentStreamingFeePercentage, inflationQuantity);\\n    }\\n\\n    /**\\n     * Will collect pending fees, and then update the streaming fee percentage for the Chamber\\n     * specified. Cannot be larger than the maximum fee. Will revert if msg.sender is not a\\n     * manager from the _chamber. To disable a chamber, set the streaming fee to zero.\\n     *\\n     * @param _chamber          Chamber to update streaming fee percentage\\n     * @param _newFeePercentage     New streaming fee in percentage [1 % = 10e18]\\n     */\\n    function updateStreamingFee(IChamber _chamber, uint256 _newFeePercentage)\\n        external\\n        nonReentrant\\n    {\\n        uint256 previousCollectTimestamp = feeStates[_chamber].lastCollectTimestamp;\\n        require(previousCollectTimestamp > 0, \\\"Chamber does not exist\\\");\\n        require(previousCollectTimestamp < block.timestamp, \\\"Cannot update fee after collecting\\\");\\n        require(IChamber(_chamber).isManager(msg.sender), \\\"msg.sender is not chamber's manager\\\");\\n        require(\\n            _newFeePercentage <= feeStates[_chamber].maxStreamingFeePercentage,\\n            \\\"New fee is above maximum\\\"\\n        );\\n        uint256 currentStreamingFeePercentage = feeStates[_chamber].streamingFeePercentage;\\n\\n        feeStates[_chamber].lastCollectTimestamp = block.timestamp;\\n        feeStates[_chamber].streamingFeePercentage = _newFeePercentage;\\n\\n        if (currentStreamingFeePercentage > 0) {\\n            uint256 inflationQuantity = _collectStreamingFee(\\n                _chamber, previousCollectTimestamp, currentStreamingFeePercentage\\n            );\\n            emit FeeCollected(address(_chamber), currentStreamingFeePercentage, inflationQuantity);\\n        }\\n\\n        emit StreamingFeeUpdated(address(_chamber), _newFeePercentage);\\n    }\\n\\n    /**\\n     * Will update the maximum streaming fee of a chamber. The _newMaxFeePercentage\\n     * can only be lower than the current maximum streaming fee, and cannot be greater\\n     * than the current streaming fee. Will revert if msg.sender is not a manager from\\n     * the _chamber.\\n     *\\n     * @param _chamber          Chamber to update max. streaming fee percentage\\n     * @param _newMaxFeePercentage  New max. streaming fee in percentage [1 % = 10e18]\\n     */\\n    function updateMaxStreamingFee(IChamber _chamber, uint256 _newMaxFeePercentage)\\n        external\\n        nonReentrant\\n    {\\n        require(feeStates[_chamber].lastCollectTimestamp > 0, \\\"Chamber does not exist\\\");\\n        require(IChamber(_chamber).isManager(msg.sender), \\\"msg.sender is not chamber's manager\\\");\\n        require(\\n            _newMaxFeePercentage <= feeStates[_chamber].maxStreamingFeePercentage,\\n            \\\"New max fee is above maximum\\\"\\n        );\\n        require(\\n            _newMaxFeePercentage >= feeStates[_chamber].streamingFeePercentage,\\n            \\\"New max fee is below current fee\\\"\\n        );\\n\\n        feeStates[_chamber].maxStreamingFeePercentage = _newMaxFeePercentage;\\n\\n        emit MaxStreamingFeeUpdated(address(_chamber), _newMaxFeePercentage);\\n    }\\n\\n    /**\\n     * Update the streaming fee recipient for the Chamber specified. Will revert if msg.sender\\n     * is not a manager from the _chamber.\\n     *\\n     * @param _chamber          Chamber to update streaming fee recipient\\n     * @param _newFeeRecipient      New fee recipient address\\n     */\\n    function updateFeeRecipient(IChamber _chamber, address _newFeeRecipient)\\n        external\\n        nonReentrant\\n    {\\n        require(feeStates[_chamber].lastCollectTimestamp > 0, \\\"Chamber does not exist\\\");\\n        require(IChamber(_chamber).isManager(msg.sender), \\\"msg.sender is not chamber's manager\\\");\\n        require(_newFeeRecipient != address(0), \\\"Recipient cannot be null address\\\");\\n        feeStates[_chamber].feeRecipient = _newFeeRecipient;\\n\\n        emit FeeRecipientUpdated(address(_chamber), _newFeeRecipient);\\n    }\\n\\n    /**\\n     * Returns the streaming fee recipient of the AcrhChamber specified.\\n     *\\n     * @param _chamber Chamber to consult\\n     */\\n    function getStreamingFeeRecipient(IChamber _chamber) external view returns (address) {\\n        require(feeStates[_chamber].lastCollectTimestamp > 0, \\\"Chamber does not exist\\\");\\n        return feeStates[_chamber].feeRecipient;\\n    }\\n\\n    /**\\n     * Returns the maximum streaming fee percetage of the AcrhChamber specified.\\n     * Consider [1 % = 10e18]\\n     *\\n     * @param _chamber Chamber to consult\\n     */\\n    function getMaxStreamingFeePercentage(IChamber _chamber) external view returns (uint256) {\\n        require(feeStates[_chamber].lastCollectTimestamp > 0, \\\"Chamber does not exist\\\");\\n        return feeStates[_chamber].maxStreamingFeePercentage;\\n    }\\n\\n    /**\\n     * Returns the streaming fee percetage of the AcrhChamber specified.\\n     * Consider [1 % = 10e18]\\n     *\\n     * @param _chamber Chamber to consult\\n     */\\n    function getStreamingFeePercentage(IChamber _chamber) external view returns (uint256) {\\n        require(feeStates[_chamber].lastCollectTimestamp > 0, \\\"Chamber does not exist\\\");\\n        return feeStates[_chamber].streamingFeePercentage;\\n    }\\n\\n    /**\\n     * Returns the last streaming fee timestamp of the AcrhChamber specified.\\n     *\\n     * @param _chamber Chamber to consult\\n     */\\n    function getLastCollectTimestamp(IChamber _chamber) external view returns (uint256) {\\n        require(feeStates[_chamber].lastCollectTimestamp > 0, \\\"Chamber does not exist\\\");\\n        return feeStates[_chamber].lastCollectTimestamp;\\n    }\\n\\n    /**\\n     * Returns the fee state of a chamber as a tuple.\\n     *\\n     * @param _chamber Chamber to consult\\n     */\\n    function getFeeState(IChamber _chamber)\\n        external\\n        view\\n        returns (\\n            address feeRecipient,\\n            uint256 maxStreamingFeePercentage,\\n            uint256 streamingFeePercentage,\\n            uint256 lastCollectTimestamp\\n        )\\n    {\\n        require(feeStates[_chamber].lastCollectTimestamp > 0, \\\"Chamber does not exist\\\");\\n\\n        feeRecipient = feeStates[_chamber].feeRecipient;\\n        maxStreamingFeePercentage = feeStates[_chamber].maxStreamingFeePercentage;\\n        streamingFeePercentage = feeStates[_chamber].streamingFeePercentage;\\n        lastCollectTimestamp = feeStates[_chamber].lastCollectTimestamp;\\n        return\\n            (feeRecipient, maxStreamingFeePercentage, streamingFeePercentage, lastCollectTimestamp);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              INTERNAL\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * Given the current supply of an Chamber, the last timestamp and the current streaming fee,\\n     * this function returns the inflation quantity to mint. The formula to calculate inflation quantity\\n     * is this:\\n     *\\n     * currentSupply * (streamingFee [10e18] / 100 [10e18]) * ((now [s] - last [s]) / one_year [s])\\n     *\\n     * @param _currentSupply            Chamber current supply\\n     * @param _lastCollectTimestamp     Last timestamp of collect\\n     * @param _streamingFeePercentage   Current streaming fee\\n     */\\n    function _calculateInflationQuantity(\\n        uint256 _currentSupply,\\n        uint256 _lastCollectTimestamp,\\n        uint256 _streamingFeePercentage\\n    ) internal view returns (uint256 inflationQuantity) {\\n        uint256 blockWindow = block.timestamp - _lastCollectTimestamp;\\n        uint256 inflation = _streamingFeePercentage * blockWindow;\\n        uint256 a = _currentSupply * inflation;\\n        uint256 b = ONE_YEAR_IN_SECONDS * (100 * SCALE_UNIT);\\n        return a / b;\\n    }\\n\\n    /**\\n     * Performs the collect fee on the Chamber, considering the Chamber current supply,\\n     * the last collect timestamp and the streaming fee percentage provided. It calls the Chamber\\n     * to mint the inflation amount, and then calls it again so the Chamber can update its quantities.\\n     *\\n     * @param _chamber              Chamber to collect fees from\\n     * @param _lastCollectTimestamp     Last collect timestamp to consider\\n     * @param _streamingFeePercentage   Streaming fee percentage to consider\\n     */\\n    function _collectStreamingFee(\\n        IChamber _chamber,\\n        uint256 _lastCollectTimestamp,\\n        uint256 _streamingFeePercentage\\n    ) internal returns (uint256 inflationQuantity) {\\n        // Get chamber supply\\n        uint256 currentSupply = IERC20(address(_chamber)).totalSupply();\\n\\n        // Calculate inflation quantity\\n        inflationQuantity = _calculateInflationQuantity(\\n            currentSupply, _lastCollectTimestamp, _streamingFeePercentage\\n        );\\n\\n        // Mint the inlation quantity\\n        IChamber(_chamber).mint(feeStates[_chamber].feeRecipient, inflationQuantity);\\n\\n        // Calculate chamber new quantities\\n        IChamber(_chamber).updateQuantities();\\n\\n        // Return inflation quantity\\n        return inflationQuantity;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/chambers/src/interfaces/IChamber.sol\": {\r\n      \"content\": \"/**\\n *     SPDX-License-Identifier: Apache License 2.0\\n *\\n *     Copyright 2018 Set Labs Inc.\\n *     Copyright 2022 Smash Works Inc.\\n *\\n *     Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *     you may not use this file except in compliance with the License.\\n *     You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *     Unless required by applicable law or agreed to in writing, software\\n *     distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *     See the License for the specific language governing permissions and\\n *     limitations under the License.\\n *\\n *     NOTICE\\n *\\n *     This is a modified code from Set Labs Inc. found at\\n *\\n *     https://github.com/SetProtocol/set-protocol-contracts\\n *\\n *     All changes made by Smash Works Inc. are described and documented at\\n *\\n *     https://docs.arch.finance/chambers\\n *\\n *\\n *             %@@@@@\\n *          @@@@@@@@@@@\\n *        #@@@@@     @@@           @@                   @@\\n *       @@@@@@       @@@         @@@@                  @@\\n *      @@@@@@         @@        @@  @@    @@@@@ @@@@@  @@@*@@\\n *     .@@@@@          @@@      @@@@@@@@   @@    @@     @@  @@\\n *     @@@@@(       (((((      @@@    @@@  @@    @@@@@  @@  @@\\n *    @@@@@@   (((((((\\n *    @@@@@#(((((((\\n *    @@@@@(((((\\n *      @@@((\\n */\\npragma solidity ^0.8.17.0;\\n\\ninterface IChamber {\\n    /*//////////////////////////////////////////////////////////////\\n                                 ENUMS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    enum ChamberState {\\n        LOCKED,\\n        UNLOCKED\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event ManagerAdded(address indexed _manager);\\n\\n    event ManagerRemoved(address indexed _manager);\\n\\n    event ConstituentAdded(address indexed _constituent);\\n\\n    event ConstituentRemoved(address indexed _constituent);\\n\\n    event WizardAdded(address indexed _wizard);\\n\\n    event WizardRemoved(address indexed _wizard);\\n\\n    event AllowedContractAdded(address indexed _allowedContract);\\n\\n    event AllowedContractRemoved(address indexed _allowedContract);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CHAMBER MANAGEMENT\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function addConstituent(address _constituent) external;\\n\\n    function removeConstituent(address _constituent) external;\\n\\n    function isManager(address _manager) external view returns (bool);\\n\\n    function isWizard(address _wizard) external view returns (bool);\\n\\n    function isConstituent(address _constituent) external view returns (bool);\\n\\n    function addManager(address _manager) external;\\n\\n    function removeManager(address _manager) external;\\n\\n    function addWizard(address _wizard) external;\\n\\n    function removeWizard(address _wizard) external;\\n\\n    function getConstituentsAddresses() external view returns (address[] memory);\\n\\n    function getQuantities() external view returns (uint256[] memory);\\n\\n    function getConstituentQuantity(address _constituent) external view returns (uint256);\\n\\n    function getWizards() external view returns (address[] memory);\\n\\n    function getManagers() external view returns (address[] memory);\\n\\n    function getAllowedContracts() external view returns (address[] memory);\\n\\n    function mint(address _recipient, uint256 _quantity) external;\\n\\n    function burn(address _from, uint256 _quantity) external;\\n\\n    function withdrawTo(address _constituent, address _recipient, uint256 _quantity) external;\\n\\n    function updateQuantities() external;\\n\\n    function lockChamber() external;\\n\\n    function unlockChamber() external;\\n\\n    function addAllowedContract(address target) external;\\n\\n    function removeAllowedContract(address target) external;\\n\\n    function isAllowedContract(address _target) external returns (bool);\\n\\n    function executeTrade(\\n        address _sellToken,\\n        uint256 _sellQuantity,\\n        address _buyToken,\\n        uint256 _minBuyQuantity,\\n        bytes memory _data,\\n        address payable _target,\\n        address _allowanceTarget\\n    ) external returns (uint256 tokenAmountBought);\\n}\\n\"\r\n    },\r\n    \"lib/chambers/src/interfaces/IStreamingFeeWizard.sol\": {\r\n      \"content\": \"/**\\n *     SPDX-License-Identifier: Apache License 2.0\\n *\\n *     Copyright 2018 Set Labs Inc.\\n *     Copyright 2022 Smash Works Inc.\\n *\\n *     Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n *     you may not use this file except in compliance with the License.\\n *     You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n *     Unless required by applicable law or agreed to in writing, software\\n *     distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n *     See the License for the specific language governing permissions and\\n *     limitations under the License.\\n *\\n *     NOTICE\\n *\\n *     This is a modified code from Set Labs Inc. found at\\n *\\n *     https://github.com/SetProtocol/set-protocol-contracts\\n *\\n *     All changes made by Smash Works Inc. are described and documented at\\n *\\n *     https://docs.arch.finance/chambers\\n *\\n *\\n *             %@@@@@\\n *          @@@@@@@@@@@\\n *        #@@@@@     @@@           @@                   @@\\n *       @@@@@@       @@@         @@@@                  @@\\n *      @@@@@@         @@        @@  @@    @@@@@ @@@@@  @@@*@@\\n *     .@@@@@          @@@      @@@@@@@@   @@    @@     @@  @@\\n *     @@@@@(       (((((      @@@    @@@  @@    @@@@@  @@  @@\\n *    @@@@@@   (((((((\\n *    @@@@@#(((((((\\n *    @@@@@(((((\\n *      @@@((\\n */\\npragma solidity ^0.8.17.0;\\n\\nimport {IChamber} from \\\"./IChamber.sol\\\";\\n\\ninterface IStreamingFeeWizard {\\n    /*//////////////////////////////////////////////////////////////\\n                              STRUCT\\n    //////////////////////////////////////////////////////////////*/\\n\\n    struct FeeState {\\n        address feeRecipient;\\n        uint256 maxStreamingFeePercentage;\\n        uint256 streamingFeePercentage;\\n        uint256 lastCollectTimestamp;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event FeeCollected(\\n        address indexed _chamber, uint256 _streamingFeePercentage, uint256 _inflationQuantity\\n    );\\n    event StreamingFeeUpdated(address indexed _chamber, uint256 _newStreamingFee);\\n    event MaxStreamingFeeUpdated(address indexed _chamber, uint256 _newMaxStreamingFee);\\n    event FeeRecipientUpdated(address indexed _chamber, address _newFeeRecipient);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function enableChamber(IChamber _chamber, FeeState memory _feeState) external;\\n    function collectStreamingFee(IChamber _chamber) external;\\n    function updateStreamingFee(IChamber _chamber, uint256 _newFeePercentage) external;\\n    function updateMaxStreamingFee(IChamber _chamber, uint256 _newMaxFeePercentage) external;\\n    function updateFeeRecipient(IChamber _chamber, address _newFeeRecipient) external;\\n    function getStreamingFeeRecipient(IChamber _chamber) external view returns (address);\\n    function getMaxStreamingFeePercentage(IChamber _chamber) external view returns (uint256);\\n    function getStreamingFeePercentage(IChamber _chamber) external view returns (uint256);\\n    function getLastCollectTimestamp(IChamber _chamber) external view returns (uint256);\\n    function getFeeState(IChamber _chamber)\\n        external\\n        view\\n        returns (\\n            address feeRecipient,\\n            uint256 maxStreamingFeePercentage,\\n            uint256 streamingFeePercentage,\\n            uint256 lastCollectTimestamp\\n        );\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Gas optimized reentrancy protection for smart contracts.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/ReentrancyGuard.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\\nabstract contract ReentrancyGuard {\\n    uint256 private locked = 1;\\n\\n    modifier nonReentrant() virtual {\\n        require(locked == 1, \\\"REENTRANCY\\\");\\n\\n        locked = 2;\\n\\n        _;\\n\\n        locked = 1;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"chambers/=lib/chambers/src/\",\r\n      \"ds-test/=lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"solmate/=lib/solmate/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_chamber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_streamingFeePercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_inflationQuantity\",\"type\":\"uint256\"}],\"name\":\"FeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_chamber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newFeeRecipient\",\"type\":\"address\"}],\"name\":\"FeeRecipientUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_chamber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newMaxStreamingFee\",\"type\":\"uint256\"}],\"name\":\"MaxStreamingFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_chamber\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newStreamingFee\",\"type\":\"uint256\"}],\"name\":\"StreamingFeeUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IChamber\",\"name\":\"_chamber\",\"type\":\"address\"}],\"name\":\"collectStreamingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IChamber\",\"name\":\"_chamber\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxStreamingFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"streamingFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCollectTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IStreamingFeeWizard.FeeState\",\"name\":\"_feeState\",\"type\":\"tuple\"}],\"name\":\"enableChamber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IChamber\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeStates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxStreamingFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"streamingFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCollectTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IChamber\",\"name\":\"_chamber\",\"type\":\"address\"}],\"name\":\"getFeeState\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxStreamingFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"streamingFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCollectTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IChamber\",\"name\":\"_chamber\",\"type\":\"address\"}],\"name\":\"getLastCollectTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IChamber\",\"name\":\"_chamber\",\"type\":\"address\"}],\"name\":\"getMaxStreamingFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IChamber\",\"name\":\"_chamber\",\"type\":\"address\"}],\"name\":\"getStreamingFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IChamber\",\"name\":\"_chamber\",\"type\":\"address\"}],\"name\":\"getStreamingFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IChamber\",\"name\":\"_chamber\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newFeeRecipient\",\"type\":\"address\"}],\"name\":\"updateFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IChamber\",\"name\":\"_chamber\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newMaxFeePercentage\",\"type\":\"uint256\"}],\"name\":\"updateMaxStreamingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IChamber\",\"name\":\"_chamber\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newFeePercentage\",\"type\":\"uint256\"}],\"name\":\"updateStreamingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StreamingFeeWizard", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}