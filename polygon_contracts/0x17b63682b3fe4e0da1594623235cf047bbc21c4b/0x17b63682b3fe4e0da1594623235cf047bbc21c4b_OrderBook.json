{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/core/OrderBook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\nimport \\\"../libraries/token/IERC20.sol\\\";\\nimport \\\"../tokens/interfaces/IWETH.sol\\\";\\nimport \\\"../libraries/token/SafeERC20.sol\\\";\\nimport \\\"../libraries/utils/Address.sol\\\";\\nimport \\\"../libraries/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IPositionUtils.sol\\\";\\nimport \\\"./interfaces/IRouter.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IOrderBook.sol\\\";\\n\\n\\ncontract OrderBook is ReentrancyGuard, IOrderBook {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    uint256 public constant PRICE_PRECISION = 1e30;\\n    uint256 public constant USDM_PRECISION = 1e18;\\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n    uint256 public constant override MAX_TRAILING_STOP_PERCENTAGE = 2000;\\n\\n    struct SLTPOrder {\\n        uint256 trailingStopPercentage;\\n        uint256 slPrice;\\n        uint256 tpPrice;\\n        address receiveToken;\\n        bool withdrawETH;    \\n    }\\n\\n    struct IncreaseOrder {\\n        address account;\\n        address purchaseToken;\\n        uint256 purchaseTokenAmount;\\n        address collateralToken;\\n        address indexToken;\\n        uint256 sizeDelta;\\n        bool isLong;\\n        uint256 triggerPrice;\\n        bool triggerAboveThreshold;\\n        uint256 executionFee;\\n        bytes orderProps;        \\n    }\\n    struct DecreaseOrder {\\n        address account;\\n        address[] path;\\n        uint256 collateralDelta;\\n        address indexToken;\\n        uint256 sizeDelta;  // For orderType (1,2,3) whole position will be closed , size data will be read from position\\n        bool isLong;\\n        uint256 triggerPrice;  // RefPrice for Trailing Stop\\n        bool triggerAboveThreshold;\\n        uint256 minOut;\\n        bool withdrawETH;\\n        uint256 executionFee;\\n        uint256 orderType;   // 0 - None,1 - Stop Loss,2 - Take Profit, 3 - Trailing Stop etc.\\n        uint256 trailingStopPercentage;\\n        uint256 trailingStopRefPriceTimestamp;\\n    }\\n\\n    mapping(bytes32 => bool) public trailingStopPositions;\\n\\n    mapping(address => mapping(uint256 => IncreaseOrder)) public increaseOrders;\\n    mapping(address => uint256) public increaseOrdersIndex;\\n    mapping(address => mapping(uint256 => DecreaseOrder)) public decreaseOrders;\\n    mapping(address => uint256) public decreaseOrdersIndex;\\n\\n    mapping(address => bool) public isOrderKeeper;\\n\\n    address public gov;\\n    address public weth;\\n    address public usdm;\\n    address public router;\\n    address public vault;\\n    address public orderExecutor;\\n    address public positionRouter;\\n\\n    IPositionUtils public positionUtils;\\n\\n\\n    uint256 public override minExecutionFee;\\n    uint256 public override minTrailingStopExecutionFee;  // For execution\\n    uint256 public override minSLTPExecutionFee;  // For execution\\n    uint256 public trailingStopFee;         // For maintenance, percentage 200 => %2;\\n    uint256 public minPurchaseTokenAmountUsd;\\n    bool public isInitialized = false;\\n\\n    mapping(uint256 => string) public errors;\\n\\n    mapping(address => uint256) public feeReserves;\\n\\n\\n \\n\\n    constructor() public {\\n        gov = msg.sender;\\n    }\\n\\n    function withdrawFees(address _token, address _receiver) external {\\n        _onlyGov();\\n        uint256 amount = feeReserves[_token];\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        feeReserves[_token] = 0;\\n        IERC20(_token).safeTransfer(_receiver, amount);\\n\\n        //emit WithdrawFees(_token, _receiver, amount);\\n    }\\n\\n    function _collectTrailingStopFees(\\n        address _feeToken,\\n        uint256 _amountOut,\\n        uint256 _size\\n    ) internal returns (uint256) {\\n        uint256 feeUsdToToken = positionUtils.usdToTokenMax(_feeToken,_size.mul(trailingStopFee).div(BASIS_POINTS_DIVISOR));\\n        if (feeUsdToToken < _amountOut) {\\n            uint256 afterFeeAmount = _amountOut.sub(feeUsdToToken);\\n            feeReserves[_feeToken] = feeReserves[_feeToken].add(feeUsdToToken);\\n            return afterFeeAmount;\\n        }\\n        return _amountOut;\\n    }\\n\\n\\n    function setErrors(string[] calldata _errors) external {\\n        _onlyGov();\\n        for (uint256 i = 0; i < _errors.length; i++) {\\n            errors[i] = _errors[i];\\n        }\\n    }\\n\\n    function _validate(bool _condition, uint256 _errorCode) private view {\\n        require(_condition, errors[_errorCode]);\\n    }\\n\\n    function _onlyGov() private view {\\n        _validate(msg.sender == gov, 0);\\n    }\\n\\n    function _onlyOrderExecutor() private view {\\n        _validate(msg.sender == orderExecutor, 0);\\n    }\\n\\n    function _onlyPositionRouter() private view {\\n        _validate(msg.sender == positionRouter, 0);\\n    }\\n\\n    function _onlyOrderKeeper() private view {\\n        _validate(isOrderKeeper[msg.sender], 0);\\n    }\\n\\n    function setOrderKeeper(address _account, bool _isActive) external {\\n        _onlyGov();\\n        isOrderKeeper[_account] = _isActive;\\n    }\\n\\n    function initialize(\\n        address _router,\\n        address _vault,\\n        address _weth,\\n        address _usdm,\\n        uint256 _minExecutionFee,\\n        uint256 _minSLTPExecutionFee,\\n        uint256 _minTrailingStopExecutionFee,\\n        uint256 _minPurchaseTokenAmountUsd\\n    ) external {\\n        _onlyGov();\\n        _validate(!isInitialized, 1);\\n        isInitialized = true;\\n\\n        router = _router;\\n        vault = _vault;\\n        weth = _weth;\\n        usdm = _usdm;\\n        minExecutionFee = _minExecutionFee;\\n        minSLTPExecutionFee = _minSLTPExecutionFee;\\n        minTrailingStopExecutionFee = _minTrailingStopExecutionFee;\\n        minPurchaseTokenAmountUsd = _minPurchaseTokenAmountUsd;\\n\\n    }\\n\\n    receive() external payable {\\n        _validate(msg.sender == weth, 2);\\n    }\\n\\n    function setPositionUtils(IPositionUtils _positionUtils) external {\\n        _onlyGov();\\n        positionUtils = _positionUtils;\\n    }    \\n\\n    function setOrderExecutor(\\n        address _orderExecutor\\n    )external  {\\n        _onlyGov();\\n        orderExecutor = _orderExecutor;\\n    }\\n\\n    function setPositionRouter(\\n        address _positionRouter\\n    )external  {\\n        _onlyGov();\\n        positionRouter = _positionRouter;\\n    }\\n\\n    function setMinExecutionFee(uint256 _minExecutionFee) external  {\\n        _onlyGov();\\n        minExecutionFee = _minExecutionFee;\\n\\n    }\\n    function setTrailingStopFee(uint256 _trailingStopFee) external  {\\n        _onlyGov();\\n        trailingStopFee = _trailingStopFee;\\n\\n    }\\n\\n    function setMinTrailingStopExecutionFee(uint256 _minTrailingStopExecutionFee) external  {\\n        _onlyGov();\\n        minTrailingStopExecutionFee = _minTrailingStopExecutionFee;\\n\\n    }\\n\\n    function setMinSLTPExecutionFee(uint256 _minSLTPExecutionFee) external  {\\n        _onlyGov();\\n        minSLTPExecutionFee = _minSLTPExecutionFee;\\n\\n    }\\n\\n    function setMinPurchaseTokenAmountUsd(uint256 _minPurchaseTokenAmountUsd) external  {\\n        _onlyGov();\\n        minPurchaseTokenAmountUsd = _minPurchaseTokenAmountUsd;\\n\\n    }\\n\\n    function setGov(address _gov) external  {\\n        _onlyGov();\\n        gov = _gov;\\n\\n    }\\n\\n   \\n    function cancelMultiple(\\n        uint256[] memory _increaseOrderIndexes,\\n        uint256[] memory _decreaseOrderIndexes\\n    ) external {\\n        for (uint256 i = 0; i < _increaseOrderIndexes.length; i++) {\\n            cancelIncreaseOrder(_increaseOrderIndexes[i]);\\n        }\\n        for (uint256 i = 0; i < _decreaseOrderIndexes.length; i++) {\\n            cancelDecreaseOrder(_decreaseOrderIndexes[i]);\\n        }\\n    }\\n\\n    function cancelEmptyDecreaseOrderMultiple(\\n        address[] memory _account,\\n        uint256[] memory _decreaseOrderIndexes\\n    ) external {\\n        _onlyOrderKeeper();\\n        _validate(_account.length == _decreaseOrderIndexes.length,18);\\n        for (uint256 i = 0; i < _account.length; i++) {\\n            cancelEmptyDecreaseOrder(_account[i],_decreaseOrderIndexes[i]);\\n        }\\n    }    \\n\\n\\n    function getDecreaseOrder(address _account, uint256 _orderIndex)\\n        public override\\n        view\\n        returns (\\n            address collateralToken,\\n            address receiveToken,\\n            uint256 collateralDelta,\\n            address indexToken,\\n            uint256 sizeDelta,\\n            bool isLong,\\n            uint256 triggerPrice,\\n            bool triggerAboveThreshold,\\n            uint256 executionFee,\\n            uint256 orderType,\\n            uint256 trailingStopPercentage\\n        )\\n    {\\n        DecreaseOrder memory order = decreaseOrders[_account][_orderIndex];\\n        return (\\n            order.path.length > 0 ? order.path[0] : address(0),\\n            order.path.length > 1 ? order.path[1] : address(0),\\n            order.collateralDelta, order.indexToken, order.sizeDelta, order.isLong, order.triggerPrice, order.triggerAboveThreshold, order.executionFee,order.orderType,order.trailingStopPercentage);\\n    }\\n\\n    function getIncreaseOrder(address _account, uint256 _orderIndex)\\n        public\\n        view\\n        override\\n        returns (\\n            address purchaseToken,\\n            uint256 purchaseTokenAmount,\\n            address collateralToken,\\n            address indexToken,\\n            uint256 sizeDelta,\\n            bool isLong,\\n            uint256 triggerPrice,\\n            bool triggerAboveThreshold,\\n            uint256 executionFee\\n        )\\n    {\\n        IncreaseOrder memory order = increaseOrders[_account][_orderIndex];\\n        return (\\n            order.purchaseToken,\\n            order.purchaseTokenAmount,\\n            order.collateralToken,\\n            order.indexToken,\\n            order.sizeDelta,\\n            order.isLong,\\n            order.triggerPrice,\\n            order.triggerAboveThreshold,\\n            order.executionFee\\n        );\\n    }\\n\\n    function getOrderProps(bytes memory _orderProps) private pure returns(uint256,uint256,uint256,address,bool){\\n        return abi.decode(_orderProps, (uint256,uint256,uint256,address,bool));\\n    }\\n\\n    function getOrderPropsStruct(bytes memory _orderProps) private pure returns(SLTPOrder memory){\\n        (uint256 trailingStopPercentage,uint256 slPrice,uint256 tpPrice,address receiveToken,bool withdrawETH) = abi.decode(_orderProps, (uint256,uint256,uint256,address,bool));\\n\\n        SLTPOrder memory sltpOrder = SLTPOrder(\\n            trailingStopPercentage,\\n            slPrice,\\n            tpPrice,\\n            receiveToken,\\n            withdrawETH\\n        );\\n        return sltpOrder;\\n    }\\n\\n    function _validateIncreaseOrder(\\n        uint256 _executionFee,\\n        bytes memory _orderProps\\n        ) private view returns(uint256){\\n        (uint256 trailingStopPercentage,uint256 slPrice,uint256 tpPrice,,) = getOrderProps(_orderProps);\\n        require(trailingStopPercentage<MAX_TRAILING_STOP_PERCENTAGE,\\\"PR:invalid tsp\\\");\\n        require(trailingStopPercentage == 0 || slPrice == 0 ,\\\"PR:only one type sl\\\");\\n\\n\\n        uint256 orderTotalFee = minSLTPExecutionFee.mul((slPrice>0?1:0)+(tpPrice>0?1:0));\\n        if(trailingStopPercentage>0){\\n            orderTotalFee = orderTotalFee.add(minTrailingStopExecutionFee); \\n        }\\n        \\n        require(_executionFee >= minExecutionFee.add(orderTotalFee), \\\"PR: invalid executionFee\\\");\\n        return orderTotalFee;\\n    }\\n\\n\\n\\n    function createIncreaseOrder(\\n        address _purchaseToken,\\n        uint256 _amountIn,\\n        address _indexToken,\\n        // uint256 _minOut,\\n        uint256 _sizeDelta,\\n        address _collateralToken,\\n        bool _isLong,\\n        uint256 _triggerPrice,\\n        bool _triggerAboveThreshold,\\n        uint256 _executionFee,\\n        bool _shouldWrap,\\n        bytes memory _orderProps\\n    ) external payable nonReentrant {\\n        // always need this call because of mandatory executionFee user has to transfer in ETH\\n        _transferInETH();\\n        _validateIncreaseOrder(_executionFee,_orderProps);\\n\\n        if (_shouldWrap) {\\n            _validate(_purchaseToken == weth, 8);\\n            _validate(msg.value == _executionFee.add(_amountIn), 9);\\n        } else {\\n            _validate(msg.value == _executionFee, 10);\\n            IRouter(router).pluginTransfer(_purchaseToken, msg.sender, address(this), _amountIn);\\n        }\\n\\n\\n        {\\n            uint256 _purchaseTokenAmountUsd = IVault(vault).tokenToUsdMin(_purchaseToken, _amountIn);\\n            _validate(_purchaseTokenAmountUsd >= minPurchaseTokenAmountUsd, 13);\\n        }\\n\\n        _createIncreaseOrder(\\n            msg.sender,\\n            _purchaseToken,\\n            _amountIn,\\n            _collateralToken,\\n            _indexToken,\\n            _sizeDelta,\\n            _isLong,\\n            _triggerPrice,\\n            _triggerAboveThreshold,\\n            _executionFee,\\n            _orderProps\\n\\n        );\\n    }\\n\\n    function _createIncreaseOrder(\\n        address _account,\\n        address _purchaseToken,\\n        uint256 _purchaseTokenAmount,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _triggerPrice,\\n        bool _triggerAboveThreshold,\\n        uint256 _executionFee,\\n        bytes memory _orderProps\\n    ) private {\\n        uint256 _orderIndex = increaseOrdersIndex[_account];\\n        IncreaseOrder memory order = IncreaseOrder(\\n            _account,\\n            _purchaseToken,\\n            _purchaseTokenAmount,\\n            _collateralToken,\\n            _indexToken,\\n            _sizeDelta,\\n            _isLong,\\n            _triggerPrice,\\n            _triggerAboveThreshold,\\n            _executionFee,\\n            _orderProps\\n        );\\n        increaseOrdersIndex[_account] = _orderIndex.add(1);\\n        increaseOrders[_account][_orderIndex] = order;\\n\\n        positionUtils.emitCreateIncreaseOrder(_account,\\n                _orderIndex,\\n                _purchaseToken,\\n                _purchaseTokenAmount,\\n                _collateralToken,\\n                _indexToken,\\n                _sizeDelta,\\n                _isLong,\\n                _triggerPrice,\\n                _triggerAboveThreshold,\\n                _executionFee,\\n                _orderProps);\\n\\n    }\\n\\n    function updateIncreaseOrder(\\n        uint256 _orderIndex,\\n        uint256 _sizeDelta,\\n        uint256 _triggerPrice,\\n        bool _triggerAboveThreshold\\n    ) external nonReentrant {\\n        IncreaseOrder storage order = increaseOrders[msg.sender][_orderIndex];\\n        _validate(order.account != address(0), 11);\\n\\n        order.triggerPrice = _triggerPrice;\\n        order.triggerAboveThreshold = _triggerAboveThreshold;\\n        order.sizeDelta = _sizeDelta;\\n\\n        positionUtils.emitUpdateIncreaseOrder(msg.sender, _orderIndex, order.collateralToken, order.indexToken, order.isLong, _sizeDelta, _triggerPrice, _triggerAboveThreshold);\\n    }\\n\\n    function cancelIncreaseOrder(uint256 _orderIndex) public nonReentrant {\\n        IncreaseOrder memory order = increaseOrders[msg.sender][_orderIndex];\\n        _validate(order.account != address(0), 11);\\n\\n        delete increaseOrders[msg.sender][_orderIndex];\\n\\n        if (order.purchaseToken == weth) {\\n            _transferOutETH(order.executionFee.add(order.purchaseTokenAmount), msg.sender);\\n        } else {\\n            IERC20(order.purchaseToken).safeTransfer(msg.sender, order.purchaseTokenAmount);\\n            _transferOutETH(order.executionFee, msg.sender);\\n        }\\n\\n        positionUtils.emitCancelIncreaseOrder(\\n            order.account,\\n            _orderIndex,\\n            order.purchaseToken,\\n            order.purchaseTokenAmount,\\n            order.collateralToken,\\n            order.indexToken,\\n            order.sizeDelta,\\n            order.isLong,\\n            order.triggerPrice,\\n            order.triggerAboveThreshold,\\n            order.executionFee\\n        );\\n    }\\n\\n    function _processOrder(IncreaseOrder memory _order) private returns (uint256 ) {\\n\\n        uint256 executionFee = _order.executionFee;\\n\\n        (uint256 trailingStopPercentage,uint256 slPrice,uint256 tpPrice,address receiveToken,) = getOrderProps(_order.orderProps);\\n\\n        if (trailingStopPercentage>0 || slPrice>0 || tpPrice>0){ //TP and SL Order only for First Increase\\n            address[] memory path;\\n            if(receiveToken != _order.collateralToken ){\\n                path = new address[](2);\\n                path[0] = _order.collateralToken;\\n                path[1] = receiveToken;\\n            }else{\\n                path = new address[](1);\\n                path[0] = _order.collateralToken;\\n            }                 \\n\\n            _createDecreaseOrderSLTP(_order.account, path , _order.indexToken, _order.isLong,_order.orderProps,_order.sizeDelta,executionFee.sub(minExecutionFee));\\n            executionFee = minExecutionFee;\\n        }\\n        return executionFee;\\n    }    \\n\\n\\n    function executeIncreaseOrder(\\n        address _address,\\n        uint256 _orderIndex,\\n        address payable _feeReceiver\\n    ) external override nonReentrant {\\n        _onlyOrderExecutor();\\n        IncreaseOrder memory order = increaseOrders[_address][_orderIndex];\\n        _validate(order.account != address(0), 11);\\n\\n        // increase long should use max price\\n        // increase short should use min price\\n        (uint256 currentPrice, ) = positionUtils.validateOrderPrice(order.triggerAboveThreshold, order.triggerPrice, order.indexToken, order.isLong, true,0,0);\\n\\n        delete increaseOrders[_address][_orderIndex];\\n\\n        IERC20(order.purchaseToken).safeTransfer(vault, order.purchaseTokenAmount);\\n\\n        if (order.purchaseToken != order.collateralToken) {\\n            address[] memory path = new address[](2);\\n            path[0] = order.purchaseToken;\\n            path[1] = order.collateralToken;\\n\\n            uint256 amountOut = _swap(path, 0, address(this));\\n            IERC20(order.collateralToken).safeTransfer(vault, amountOut);\\n        }\\n\\n        IRouter(router).pluginIncreasePosition(order.account, order.collateralToken, order.indexToken, order.sizeDelta, order.isLong);\\n\\n        uint256 executionFee = _processOrder(order);\\n            \\n        _transferOutETH(executionFee, _feeReceiver);\\n\\n        positionUtils.emitExecuteIncreaseOrder(\\n            order.account,\\n            _orderIndex,\\n            order.purchaseToken,\\n            order.purchaseTokenAmount,\\n            order.collateralToken,\\n            order.indexToken,\\n            order.sizeDelta,\\n            order.isLong,\\n            order.triggerPrice,\\n            order.triggerAboveThreshold,\\n            order.executionFee,\\n            currentPrice\\n        );\\n    }\\n\\n    function createDecreaseOrder(\\n        address _indexToken,\\n        uint256 _sizeDelta,\\n        address[] memory _path,\\n        uint256 _collateralDelta,\\n        bool _isLong,\\n        uint256 _triggerPrice,\\n        bool _triggerAboveThreshold,\\n        uint256 _minOut,\\n        bool _withdrawETH,\\n        uint256 trailingStopPercentage\\n    ) external payable nonReentrant {\\n\\n        _transferInETH();\\n        \\n        \\n        \\n        _validate(_path.length == 1 || _path.length == 2, 3);\\n        if(trailingStopPercentage>0){\\n            _validate(msg.value >= minTrailingStopExecutionFee, 7);\\n            _validate(trailingStopPercentage<MAX_TRAILING_STOP_PERCENTAGE,17);\\n        }else{\\n            _validate(msg.value >  minExecutionFee, 7);\\n        }\\n\\n        if (_withdrawETH) {\\n            _validate(_path[_path.length - 1] == weth, 4);\\n        }\\n\\n        uint256 positionSize;\\n\\n        if(trailingStopPercentage>0){\\n            bytes32 key = _getPositionKey(msg.sender, _path[0], _indexToken,_isLong);\\n            _validate(!trailingStopPositions[key],19);\\n\\n            (positionSize,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ) = IVault(vault).getPosition(msg.sender, _path[0], _indexToken,_isLong);\\n\\n            _validate(positionSize>0,20);\\n        }    \\n\\n\\n\\n        DecreaseOrder memory order = DecreaseOrder(\\n            msg.sender,\\n            _path,\\n            trailingStopPercentage>0 ? 0 :_collateralDelta,\\n            _indexToken,\\n            trailingStopPercentage>0 ? positionSize : _sizeDelta,\\n            _isLong,\\n            trailingStopPercentage>0 ? (_isLong ? IVault(vault).getMinPrice(_indexToken) : IVault(vault).getMaxPrice(_indexToken)) :  _triggerPrice,\\n            trailingStopPercentage>0 ? false : _triggerAboveThreshold,\\n            trailingStopPercentage>0 ? 0 : _minOut,\\n            _withdrawETH,\\n            msg.value,\\n            trailingStopPercentage>0 ? 3 : 0,\\n            trailingStopPercentage,\\n            trailingStopPercentage>0 ? block.timestamp : 0\\n        );\\n        \\n        _createDecreaseOrder(order);\\n    }\\n\\n    function createDecreaseOrderSLTP(\\n        address _account,\\n        address[] memory _path,\\n        address _indexToken,\\n        bool _isLong,\\n        bytes memory _orderProps,\\n        uint256 _sizeDelta\\n    ) external payable override  nonReentrant {\\n        _onlyPositionRouter();\\n        _transferInETH();\\n        _createDecreaseOrderSLTP(_account,_path,_indexToken,_isLong,_orderProps,_sizeDelta,msg.value);\\n    }    \\n\\n    function _createDecreaseOrderSLTP(\\n        address _account,\\n        address[] memory _path,\\n        address _indexToken,\\n        bool _isLong,\\n        bytes memory _orderProps,\\n        uint256 _sizeDelta,\\n        uint256 _executionFee\\n    ) private {\\n        \\n\\n\\n        uint256 executionFee = _executionFee;\\n\\n        (uint256 positionSize,\\n        ,\\n        uint256 entryPrice,\\n        ,\\n        ,\\n        ,\\n        ,\\n        ) = IVault(vault).getPosition(_account, _path[0], _indexToken,_isLong);\\n\\n        if(positionSize == _sizeDelta){\\n            SLTPOrder memory sltpOrder = getOrderPropsStruct(_orderProps);\\n            \\n            if(sltpOrder.tpPrice>0 && ((_isLong && sltpOrder.tpPrice>entryPrice) || (!_isLong && sltpOrder.tpPrice<entryPrice))){\\n                uint256 fee = executionFee<minSLTPExecutionFee.mul(2)?executionFee:minSLTPExecutionFee;\\n                DecreaseOrder memory order = DecreaseOrder(\\n                    _account,\\n                    _path,\\n                    0,\\n                    _indexToken,\\n                    positionSize,\\n                    _isLong,\\n                    sltpOrder.tpPrice, \\n                    sltpOrder.tpPrice>entryPrice, \\n                    0, \\n                    sltpOrder.withdrawETH,\\n                    fee,\\n                    2,\\n                    0,\\n                    0\\n                );\\n                _createDecreaseOrder(order);\\n                executionFee = executionFee.sub(fee);\\n            }\\n\\n            if(sltpOrder.trailingStopPercentage>0 || (sltpOrder.slPrice>0 && ((_isLong && sltpOrder.slPrice<entryPrice) || (!_isLong && sltpOrder.slPrice>entryPrice)) )){\\n                uint256 fee = executionFee < _executionFee ? executionFee : sltpOrder.slPrice > 0 ? minSLTPExecutionFee : minTrailingStopExecutionFee;\\n\\n                DecreaseOrder memory order = DecreaseOrder(\\n                    _account,\\n                    _path,\\n                    0,\\n                    _indexToken,\\n                    positionSize,\\n                    _isLong,\\n                    sltpOrder.slPrice>0 ? sltpOrder.slPrice : entryPrice, \\n                    sltpOrder.slPrice>0 ? sltpOrder.slPrice>entryPrice : false,  // for trailing stop not needed\\n                    0, \\n                    sltpOrder.withdrawETH,\\n                    fee,\\n                    sltpOrder.slPrice>0 ? 1 : 3, \\n                    sltpOrder.slPrice>0 ? 0 : sltpOrder.trailingStopPercentage,\\n                    sltpOrder.slPrice>0 ? 0 : block.timestamp\\n                );\\n                _createDecreaseOrder(order);\\n                executionFee = executionFee.sub(fee);\\n            }\\n        }\\n        if(executionFee>=minSLTPExecutionFee){\\n             _transferOutETHWithGasLimit(executionFee, payable(_account));\\n        }\\n\\n    }\\n\\n    function _getPositionKey(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong\\n    ) private pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_account, _collateralToken, _indexToken, _isLong));\\n    }\\n\\n\\n    function _createDecreaseOrder(\\n        DecreaseOrder memory _order\\n    ) private {\\n        uint256 orderIndex = decreaseOrdersIndex[_order.account];\\n\\n        decreaseOrdersIndex[_order.account] = orderIndex.add(1);\\n        decreaseOrders[_order.account][orderIndex] = _order;\\n\\n        if(_order.orderType == 3){\\n            bytes32 key = _getPositionKey(_order.account, _order.path[0],_order.indexToken, _order.isLong);\\n            trailingStopPositions[key] = true;\\n        }\\n\\n        \\n\\n        \\n        positionUtils.emitCreateDecreaseOrder(\\n            _order.account, \\n            orderIndex, \\n            _order.path[0], \\n            _order.path[_order.path.length-1], \\n            _order.collateralDelta, \\n            _order.indexToken, \\n            _order.sizeDelta, \\n            _order.isLong, \\n            _order.triggerPrice, \\n            _order.triggerAboveThreshold, \\n            _order.executionFee,\\n            _order.orderType,\\n            _order.trailingStopPercentage\\n            );\\n    }\\n\\n    function executeDecreaseOrder(\\n        address _address,\\n        uint256 _orderIndex,\\n        address payable _feeReceiver,\\n        uint256 _trailingStopRefPrice,\\n        uint256 _trailingStopRefPriceTimestamp\\n    ) external override nonReentrant {\\n        _onlyOrderExecutor();\\n        DecreaseOrder memory order = decreaseOrders[_address][_orderIndex];\\n        _validate(order.account != address(0), 11);\\n\\n        // decrease long should use min price\\n        // decrease short should use max price\\n        (uint256 currentPrice, ) = positionUtils.validateOrderPrice(order.triggerAboveThreshold, order.triggerPrice, order.indexToken, !order.isLong, true ,order.trailingStopPercentage,_trailingStopRefPrice);\\n        uint256 positionSize = order.sizeDelta;\\n        uint256 positionCollateral = order.collateralDelta;\\n\\n        delete decreaseOrders[_address][_orderIndex];\\n        if(order.orderType == 3){\\n            bytes32 key = _getPositionKey(order.account, order.path[0],order.indexToken, order.isLong);\\n            trailingStopPositions[key] = false;\\n        }\\n\\n        {\\n\\n            if(order.orderType>0){\\n                (positionSize,\\n                ,\\n                ,\\n                ,\\n                ,\\n                ,\\n                ,\\n                ) = IVault(vault).getPosition(order.account, order.path[0],order.indexToken,order.isLong);\\n\\n                positionCollateral = 0;\\n            }\\n\\n            uint256 amountOut = IRouter(router).pluginDecreasePosition(\\n                order.account,\\n                order.path[0],\\n                order.indexToken,\\n                positionCollateral,\\n                positionSize,\\n                order.isLong,\\n                address(this)\\n            );\\n\\n            if(order.orderType == 3 && amountOut>0){\\n                amountOut = _collectTrailingStopFees(order.path[0],amountOut, positionSize);\\n\\n            }\\n\\n\\n            bool isSwapExecuted;\\n\\n            if (order.path.length > 1) {\\n                uint256 maxIn =positionUtils.getMaxAmountIn(order.path[0], order.path[1]);\\n                if(amountOut<=maxIn){ \\n                    IERC20(order.path[0]).safeTransfer(vault, amountOut);\\n                    amountOut = _swap(order.path, order.minOut, address(this));\\n                    isSwapExecuted = true;\\n                }    \\n            }\\n\\n            if (order.withdrawETH) {\\n                _transferOutETHWithGasLimit(amountOut, payable(order.account));\\n            } else {\\n                if (order.path.length > 1 && isSwapExecuted) {\\n                    IERC20(order.path[order.path.length - 1]).safeTransfer(order.account, amountOut);\\n                }else{\\n                    IERC20(order.path[0]).safeTransfer(order.account, amountOut);\\n                }    \\n            }\\n\\n            _transferOutETH(order.executionFee, _feeReceiver);\\n        }    \\n\\n        positionUtils.emitExecuteDecreaseOrder(\\n            order.account,\\n            _orderIndex,\\n            order.path[0],\\n            positionCollateral,\\n            order.indexToken,\\n            positionSize,\\n            order.isLong,\\n            order.triggerPrice,\\n            order.triggerAboveThreshold,\\n            order.executionFee,\\n            currentPrice\\n        );\\n\\n        if(order.orderType == 3){\\n            positionUtils.emitExecuteTrailingStopOrder(\\n                order.account,\\n                _orderIndex,\\n                order.trailingStopPercentage,\\n                _trailingStopRefPrice,\\n                _trailingStopRefPriceTimestamp,      \\n                currentPrice\\n            );\\n        }\\n\\n    }\\n\\n    function cancelDecreaseOrder(uint256 _orderIndex) public nonReentrant {\\n        DecreaseOrder memory order = decreaseOrders[msg.sender][_orderIndex];\\n        _validate(order.account != address(0), 11);\\n\\n        delete decreaseOrders[msg.sender][_orderIndex];\\n        if(order.orderType == 3){\\n            bytes32 key = _getPositionKey(order.account, order.path[0],order.indexToken, order.isLong);\\n            trailingStopPositions[key] = false;\\n        }\\n\\n        _transferOutETH(order.executionFee, msg.sender);\\n\\n        positionUtils.emitCancelDecreaseOrder(\\n            order.account,\\n            _orderIndex,\\n            order.path[0],\\n            order.collateralDelta,\\n            order.indexToken,\\n            order.sizeDelta,\\n            order.isLong,\\n            order.triggerPrice,\\n            order.triggerAboveThreshold,\\n            order.executionFee\\n        );\\n    }\\n\\n    function cancelEmptyDecreaseOrder(address _account,uint256 _orderIndex) public nonReentrant {\\n        _onlyOrderKeeper();\\n        DecreaseOrder memory order = decreaseOrders[_account][_orderIndex];\\n        _validate(order.account != address(0), 11);\\n\\n        (uint256 positionSize,\\n        ,\\n        ,\\n        ,\\n        ,\\n        ,\\n        ,\\n        ) = IVault(vault).getPosition(order.account, order.path[0],order.indexToken,order.isLong);\\n        \\n        if(positionSize == 0){\\n\\n            delete decreaseOrders[order.account][_orderIndex];\\n            if(order.orderType == 3){\\n                bytes32 key = _getPositionKey(order.account, order.path[0],order.indexToken, order.isLong);\\n                trailingStopPositions[key] = false;\\n            }\\n            _transferOutETH(order.executionFee, payable(order.account));\\n\\n            positionUtils.emitCancelDecreaseOrder(\\n                order.account,\\n                _orderIndex,\\n                order.path[0],\\n                order.collateralDelta,\\n                order.indexToken,\\n                order.sizeDelta,\\n                order.isLong,\\n                order.triggerPrice,\\n                order.triggerAboveThreshold,\\n                order.executionFee\\n            );\\n        }\\n    }\\n\\n\\n    function updateTrailingRefPrice(\\n        address _account,\\n        uint256 _orderIndex,\\n        uint256 _refPrice,\\n        uint256 _refPriceTimestamp\\n    ) external nonReentrant {\\n        _onlyOrderKeeper();\\n        DecreaseOrder storage order = decreaseOrders[_account][_orderIndex];\\n        _validate(order.account != address(0), 1);\\n\\n        if(order.orderType == 3){\\n            order.triggerPrice = _refPrice;\\n            order.trailingStopRefPriceTimestamp = _refPriceTimestamp;\\n        }\\n\\n    }\\n\\n    function updateDecreaseOrder(\\n        uint256 _orderIndex,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        uint256 _triggerPrice,\\n        bool _triggerAboveThreshold,\\n        uint256 _trailingStopPercentage    \\n    ) external nonReentrant {\\n        DecreaseOrder storage order = decreaseOrders[msg.sender][_orderIndex];\\n        _validate(order.account != address(0), 11);\\n\\n        if(order.trailingStopPercentage>0){\\n            _validate(_trailingStopPercentage>0 && _trailingStopPercentage<MAX_TRAILING_STOP_PERCENTAGE, 17);\\n            order.trailingStopPercentage = _trailingStopPercentage;\\n        }else{\\n            order.triggerPrice = _triggerPrice;\\n            order.triggerAboveThreshold = _triggerAboveThreshold;\\n            order.sizeDelta = _sizeDelta;\\n            order.collateralDelta = _collateralDelta;\\n        }\\n\\n        positionUtils.emitUpdateDecreaseOrder(\\n            msg.sender,\\n            _orderIndex,\\n            order.path[0],\\n            _collateralDelta,\\n            order.indexToken,\\n            _sizeDelta,\\n            order.isLong,\\n            _triggerPrice,\\n            _triggerAboveThreshold,\\n            _trailingStopPercentage\\n        );\\n    }\\n\\n    function _transferInETH() private {\\n        if (msg.value != 0) {\\n            IWETH(weth).deposit{value: msg.value}();\\n        }\\n    }\\n\\n    function _transferOutETH(uint256 _amountOut, address payable _receiver) private {\\n        IWETH(weth).withdraw(_amountOut);\\n        _receiver.sendValue(_amountOut);\\n    }\\n    function _transferOutETHWithGasLimit(uint256 _amountOut, address payable _receiver) internal {\\n        IWETH(weth).withdraw(_amountOut);\\n        _receiver.transfer(_amountOut);\\n    }\\n\\n    function _swap(\\n        address[] memory _path,\\n        uint256 _minOut,\\n        address _receiver\\n    ) private returns (uint256) {\\n        _validate(_path.length == 2 , 3);\\n        if (_path.length == 2) {\\n            return _vaultSwap(_path[0], _path[1], _minOut, _receiver);\\n        }\\n        // if (_path.length == 3) {\\n        //     uint256 midOut = _vaultSwap(_path[0], _path[1], 0, address(this));\\n        //     IERC20(_path[1]).safeTransfer(vault, midOut);\\n        //     return _vaultSwap(_path[1], _path[2], _minOut, _receiver);\\n        // }\\n    }\\n\\n    function _vaultSwap(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _minOut,\\n        address _receiver\\n    ) private returns (uint256) {\\n        uint256 amountOut;\\n        amountOut = IVault(vault).swap(_tokenIn, _tokenOut, _receiver);\\n\\n        _validate(amountOut >= _minOut, 16);\\n        return amountOut;\\n    }\\n\\n\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/token/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/interfaces/IWETH.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/token/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../math/SafeMath.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \\\"SafeERC20: approve from non-zero to non-zero allowance\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IPositionUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IPositionUtils {\\n    function shouldDeductFee(\\n        address _account,\\n        address[] memory _path,\\n        uint256 _amountIn,\\n        address _indexToken,\\n        bool _isLong,\\n        uint256 _sizeDelta,\\n        uint256 _increasePositionBufferBps\\n    ) external view returns (bool);\\n\\n    function validatePositionPrice(\\n        bool _isIncrease,\\n        bool _isLong,\\n        address _indexToken,\\n        uint256 _price,\\n        uint256 _sizeDelta,\\n        uint256 maxGlobalLongSize,\\n        uint256 maxGlobalShortSize\\n    ) external returns(uint256) ;\\n\\n    function validateOrderPrice(\\n        bool _triggerAboveThreshold,\\n        uint256 _triggerPrice,\\n        address _indexToken,\\n        bool _maximizePrice,\\n        bool _raise,\\n        uint256 trailingStopPercentage,\\n        uint256 refPrice\\n    ) external view returns (uint256, bool);\\n\\n    function emitCreateIncreaseOrder(\\n        address  account,\\n        uint256 orderIndex,\\n        address purchaseToken,\\n        uint256 purchaseTokenAmount,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee,\\n        bytes memory orderProps         \\n    ) external;\\n\\n\\n   function emitCancelIncreaseOrder(\\n        address account,\\n        uint256 orderIndex,\\n        address purchaseToken,\\n        uint256 purchaseTokenAmount,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    ) external;\\n    function emitExecuteIncreaseOrder(\\n        address account,\\n        uint256 orderIndex,\\n        address purchaseToken,\\n        uint256 purchaseTokenAmount,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee,\\n        uint256 executionPrice\\n    ) external;\\n    function emitUpdateIncreaseOrder(\\n        address account,\\n        uint256 orderIndex,\\n        address collateralToken,\\n        address indexToken,\\n        bool isLong,\\n        uint256 sizeDelta,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold\\n    ) external;\\n    function emitCreateDecreaseOrder(\\n        address account,\\n        uint256 orderIndex,\\n        address collateralToken,\\n        address receiveToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee,\\n        uint256 orderType,\\n        uint256 trailingStopPercentage\\n    ) external;\\n\\n    function emitCancelDecreaseOrder(\\n        address account,\\n        uint256 orderIndex,\\n        address collateralToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    ) external;\\n    function emitExecuteDecreaseOrder(\\n        address account,\\n        uint256 orderIndex,\\n        address collateralToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee,\\n        uint256 executionPrice\\n    ) external;\\n    function emitExecuteTrailingStopOrder(\\n        address account,\\n        uint256 orderIndex,\\n        uint256  trailingStopPercentage,\\n        uint256 trailingStopRefPrice,\\n        uint256 trailingStopRefPriceTimestamp,\\n        uint256 executionPrice\\n    ) external;\\n    function emitUpdateDecreaseOrder(\\n        address account,\\n        uint256 orderIndex,\\n        address collateralToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 trailingStopPercentage\\n    ) external;\\n    function emitCreateSwapOrder(\\n        address account,\\n        uint256 orderIndex,\\n        address[] memory path,\\n        uint256 amountIn,\\n        uint256 minOut,\\n        uint256 triggerRatio,\\n        bool triggerAboveThreshold,\\n        bool shouldUnwrap,\\n        uint256 executionFee\\n    ) external;\\n    function emitCancelSwapOrder(\\n        address account,\\n        uint256 orderIndex,\\n        address[] memory path,\\n        uint256 amountIn,\\n        uint256 minOut,\\n        uint256 triggerRatio,\\n        bool triggerAboveThreshold,\\n        bool shouldUnwrap,\\n        uint256 executionFee\\n    ) external;\\n    function emitUpdateSwapOrder(\\n        address account,\\n        uint256 ordexIndex,\\n        address[] memory path,\\n        uint256 amountIn,\\n        uint256 minOut,\\n        uint256 triggerRatio,\\n        bool triggerAboveThreshold,\\n        bool shouldUnwrap,\\n        uint256 executionFee\\n    ) external;\\n    function emitExecuteSwapOrder(\\n        address account,\\n        uint256 orderIndex,\\n        address[] memory path,\\n        uint256 amountIn,\\n        uint256 minOut,\\n        uint256 amountOut,\\n        uint256 triggerRatio,\\n        bool triggerAboveThreshold,\\n        bool shouldUnwrap,\\n        uint256 executionFee\\n    ) external;\\n\\n    function validateSwapOrderPriceWithTriggerAboveThreshold(address[] memory _path, uint256 _triggerRatio) external view returns (bool); \\n\\n    function getMaxAmountIn(\\n        address _tokenIn,\\n        address _tokenOut\\n    ) external view returns (uint256);\\n\\n    function usdToTokenMax(address _token, uint256 _usdAmount) external view returns (uint256);\\n\\n    function usdToTokenMin(address _token, uint256 _usdAmount) external view returns (uint256);\\n\\n    function usdToToken(\\n        address _token,\\n        uint256 _usdAmount,\\n        uint256 _price\\n    ) external view returns (uint256);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IRouter {\\n    function addPlugin(address _plugin) external;\\n\\n    function pluginTransfer(\\n        address _token,\\n        address _account,\\n        address _receiver,\\n        uint256 _amount\\n    ) external;\\n\\n    function pluginIncreasePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _sizeDelta,\\n        bool _isLong\\n    ) external;\\n\\n    function pluginDecreasePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function swap(\\n        address[] memory _path,\\n        uint256 _amountIn,\\n        uint256 _minOut,\\n        address _receiver\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IVaultUtils.sol\\\";\\n\\ninterface IVault {\\n    function isInitialized() external view returns (bool);\\n\\n    function isSwapEnabled() external view returns (bool);\\n\\n    function isLeverageEnabled() external view returns (bool);\\n\\n    function setVaultUtils(IVaultUtils _vaultUtils) external;\\n\\n    function setError(uint256 _errorCode, string calldata _error) external;\\n\\n    function router() external view returns (address);\\n\\n    function usdm() external view returns (address);\\n\\n    function gov() external view returns (address);\\n\\n    function whitelistedTokenCount() external view returns (uint256);\\n\\n    function maxLeverage() external view returns (uint256);\\n\\n    function minProfitTime() external view returns (uint256);\\n\\n    function hasDynamicFees() external view returns (bool);\\n\\n    function fundingInterval() external view returns (uint256);\\n\\n    function totalTokenWeights() external view returns (uint256);\\n\\n    function getTargetUsdmAmount(address _token) external view returns (uint256);\\n\\n    function inManagerMode() external view returns (bool);\\n\\n    function inPrivateLiquidationMode() external view returns (bool);\\n\\n    function maxGasPrice() external view returns (uint256);\\n\\n    function approvedRouters(address _account, address _router) external view returns (bool);\\n\\n    function isLiquidator(address _account) external view returns (bool);\\n\\n    function isManager(address _account) external view returns (bool);\\n\\n    function minProfitBasisPoints(address _token) external view returns (uint256);\\n\\n    function tokenBalances(address _token) external view returns (uint256);\\n\\n    function lastFundingTimes(address _token) external view returns (uint256);\\n\\n    function setMaxLeverage(uint256 _maxLeverage) external;\\n\\n    function setInManagerMode(bool _inManagerMode) external;\\n\\n    function setManager(address _manager, bool _isManager) external;\\n\\n    function setIsSwapEnabled(bool _isSwapEnabled) external;\\n\\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external;\\n\\n    function setMaxGasPrice(uint256 _maxGasPrice) external;\\n\\n    function setUsdmAmount(address _token, uint256 _amount) external;\\n\\n    function setBufferAmount(address _token, uint256 _amount) external;\\n\\n    function setMaxGlobalShortSize(address _token, uint256 _amount) external;\\n\\n    function setInPrivateLiquidationMode(bool _inPrivateLiquidationMode) external;\\n\\n    function setLiquidator(address _liquidator, bool _isActive) external;\\n\\n    function setFundingRate(\\n        uint256 _fundingInterval,\\n        uint256 _fundingRateFactor,\\n        uint256 _stableFundingRateFactor\\n    ) external;\\n\\n    function setFees(\\n        uint256 _taxBasisPoints,\\n        uint256 _stableTaxBasisPoints,\\n        uint256 _mintBurnFeeBasisPoints,\\n        uint256 _swapFeeBasisPoints,\\n        uint256 _stableSwapFeeBasisPoints,\\n        uint256 _marginFeeBasisPoints,\\n        uint256 _liquidationFeeUsd,\\n        uint256 _minProfitTime,\\n        bool _hasDynamicFees\\n    ) external;\\n\\n    function setTokenConfig(\\n        address _token,\\n        uint256 _tokenDecimals,\\n        uint256 _redemptionBps,\\n        uint256 _minProfitBps,\\n        uint256 _maxUsdmAmount,\\n        bool _isStable,\\n        bool _isShortable\\n    ) external;\\n\\n    function setPriceFeed(address _priceFeed) external;\\n\\n    function withdrawFees(address _token, address _receiver) external returns (uint256);\\n\\n    function directPoolDeposit(address _token) external;\\n\\n    function buyUSDM(address _token, address _receiver) external returns (uint256);\\n\\n    function sellUSDM(address _token, address _receiver) external returns (uint256);\\n\\n    function swap(\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function increasePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _sizeDelta,\\n        bool _isLong\\n    ) external;\\n\\n    function decreasePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function liquidatePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong,\\n        address _feeReceiver\\n    ) external;\\n\\n    function tokenToUsdMin(address _token, uint256 _tokenAmount) external view returns (uint256);\\n\\n    function priceFeed() external view returns (address);\\n\\n    function fundingRateFactor() external view returns (uint256);\\n\\n    function stableFundingRateFactor() external view returns (uint256);\\n\\n    function cumulativeFundingRates(address _token) external view returns (uint256);\\n\\n    function getNextFundingRate(address _token) external view returns (uint256);\\n\\n    function getFeeBasisPoints(\\n        address _token,\\n        uint256 _usdmDelta,\\n        uint256 _feeBasisPoints,\\n        uint256 _taxBasisPoints,\\n        bool _increment\\n    ) external view returns (uint256);\\n\\n    function liquidationFeeUsd() external view returns (uint256);\\n\\n    function taxBasisPoints() external view returns (uint256);\\n\\n    function stableTaxBasisPoints() external view returns (uint256);\\n\\n    function mintBurnFeeBasisPoints() external view returns (uint256);\\n\\n    function swapFeeBasisPoints() external view returns (uint256);\\n\\n    function stableSwapFeeBasisPoints() external view returns (uint256);\\n\\n    function marginFeeBasisPoints() external view returns (uint256);\\n\\n    function allWhitelistedTokensLength() external view returns (uint256);\\n\\n    function allWhitelistedTokens(uint256) external view returns (address);\\n\\n    function whitelistedTokens(address _token) external view returns (bool);\\n\\n    function stableTokens(address _token) external view returns (bool);\\n\\n    function shortableTokens(address _token) external view returns (bool);\\n\\n    function feeReserves(address _token) external view returns (uint256);\\n\\n    function globalShortSizes(address _token) external view returns (uint256);\\n\\n    function globalShortAveragePrices(address _token) external view returns (uint256);\\n\\n    function maxGlobalShortSizes(address _token) external view returns (uint256);\\n\\n    function tokenDecimals(address _token) external view returns (uint256);\\n\\n    function tokenWeights(address _token) external view returns (uint256);\\n\\n    function guaranteedUsd(address _token) external view returns (uint256);\\n\\n    function poolAmounts(address _token) external view returns (uint256);\\n\\n    function bufferAmounts(address _token) external view returns (uint256);\\n\\n    function reservedAmounts(address _token) external view returns (uint256);\\n\\n    function usdmAmounts(address _token) external view returns (uint256);\\n\\n    function maxUsdmAmounts(address _token) external view returns (uint256);\\n\\n    function getRedemptionAmount(address _token, uint256 _usdmAmount) external view returns (uint256);\\n\\n    function getMaxPrice(address _token) external view returns (uint256);\\n\\n    function getMinPrice(address _token) external view returns (uint256);\\n\\n    function getDelta(\\n        address _indexToken,\\n        uint256 _size,\\n        uint256 _averagePrice,\\n        bool _isLong,\\n        uint256 _lastIncreasedTime\\n    ) external view returns (bool, uint256);\\n\\n    function getPosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IOrderBook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.12 <0.9.0;\\n\\ninterface IOrderBook {\\n    // function getSwapOrder(address _account, uint256 _orderIndex)\\n    //     external\\n    //     view\\n    //     returns (\\n    //         address path0,\\n    //         address path1,\\n    //         address path2,\\n    //         uint256 amountIn,\\n    //         uint256 minOut,\\n    //         uint256 triggerRatio,\\n    //         bool triggerAboveThreshold,\\n    //         bool shouldUnwrap,\\n    //         uint256 executionFee\\n    //     );\\n\\n    function getIncreaseOrder(address _account, uint256 _orderIndex)\\n        external\\n        view\\n        returns (\\n            address purchaseToken,\\n            uint256 purchaseTokenAmount,\\n            address collateralToken,\\n            address indexToken,\\n            uint256 sizeDelta,\\n            bool isLong,\\n            uint256 triggerPrice,\\n            bool triggerAboveThreshold,\\n            uint256 executionFee\\n        );\\n\\n    function getDecreaseOrder(address _account, uint256 _orderIndex)\\n        external\\n        view\\n        returns (\\n            address collateralToken,\\n            address receiveToken,\\n            uint256 collateralDelta,\\n            address indexToken,\\n            uint256 sizeDelta,\\n            bool isLong,\\n            uint256 triggerPrice,\\n            bool triggerAboveThreshold,\\n            uint256 executionFee,\\n            uint256 orderType,\\n            uint256 trailingStopPercentage\\n        );\\n\\n    // function executeSwapOrder(\\n    //     address,\\n    //     uint256,\\n    //     address payable\\n    // ) external;\\n\\n    function executeDecreaseOrder(\\n        address,\\n        uint256,\\n        address payable,\\n        uint256 _trailingStopRefPrice,\\n        uint256 _trailingStopRefPriceTimestamp\\n    ) external;\\n\\n    function executeIncreaseOrder(\\n        address,\\n        uint256,\\n        address payable\\n    ) external;\\n\\n    function createDecreaseOrderSLTP(\\n        address _account,\\n        address[] memory _path,\\n        address _indexToken,\\n        bool _isLong,\\n        bytes memory _orderProps,\\n        uint256 _sizeDelta\\n    ) external payable;\\n\\n    function minExecutionFee() external view returns (uint256);\\n    function minTrailingStopExecutionFee() external view returns (uint256);\\n    function minSLTPExecutionFee() external view returns (uint256);\\n    function MAX_TRAILING_STOP_PERCENTAGE() external view returns (uint256);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IVaultUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IVaultUtils {\\n    function updateCumulativeFundingRate(\\n        address _collateralToken,\\n        address _indexToken\\n    ) external returns (bool);\\n\\n    function validateIncreasePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _sizeDelta,\\n        bool _isLong\\n    ) external view;\\n\\n    function validateDecreasePosition(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address _receiver\\n    ) external view;\\n\\n    function validateLiquidation(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong,\\n        bool _raise\\n    ) external view returns (uint256, uint256);\\n\\n    function getEntryFundingRate(\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong\\n    ) external view returns (uint256);\\n\\n    function getPositionFee(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong,\\n        uint256 _sizeDelta\\n    ) external view returns (uint256);\\n\\n    function getFundingFee(\\n        address _account,\\n        address _collateralToken,\\n        address _indexToken,\\n        bool _isLong,\\n        uint256 _size,\\n        uint256 _entryFundingRate\\n    ) external view returns (uint256);\\n\\n    function getBuyUsdmFeeBasisPoints(address _token, uint256 _usdmAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getSellUsdmFeeBasisPoints(address _token, uint256 _usdmAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getSwapFeeBasisPoints(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _usdmAmount\\n    ) external view returns (uint256);\\n\\n    function getFeeBasisPoints(\\n        address _token,\\n        uint256 _usdmDelta,\\n        uint256 _feeBasisPoints,\\n        uint256 _taxBasisPoints,\\n        bool _increment\\n    ) external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BASIS_POINTS_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TRAILING_STOP_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDM_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"}],\"name\":\"cancelDecreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"}],\"name\":\"cancelEmptyDecreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_account\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_decreaseOrderIndexes\",\"type\":\"uint256[]\"}],\"name\":\"cancelEmptyDecreaseOrderMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"}],\"name\":\"cancelIncreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_increaseOrderIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_decreaseOrderIndexes\",\"type\":\"uint256[]\"}],\"name\":\"cancelMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_triggerAboveThreshold\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withdrawETH\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"trailingStopPercentage\",\"type\":\"uint256\"}],\"name\":\"createDecreaseOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_orderProps\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"}],\"name\":\"createDecreaseOrderSLTP\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_purchaseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_triggerAboveThreshold\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_executionFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_shouldWrap\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_orderProps\",\"type\":\"bytes\"}],\"name\":\"createIncreaseOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"decreaseOrders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"triggerAboveThreshold\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawETH\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trailingStopPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trailingStopRefPriceTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"decreaseOrdersIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"errors\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_trailingStopRefPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_trailingStopRefPriceTimestamp\",\"type\":\"uint256\"}],\"name\":\"executeDecreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"executeIncreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"}],\"name\":\"getDecreaseOrder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiveToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"triggerAboveThreshold\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trailingStopPercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"}],\"name\":\"getIncreaseOrder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"purchaseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"purchaseTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"triggerAboveThreshold\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"increaseOrders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"purchaseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"purchaseTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"triggerAboveThreshold\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"orderProps\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"increaseOrdersIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minExecutionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minSLTPExecutionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTrailingStopExecutionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPurchaseTokenAmountUsd\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOrderKeeper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minExecutionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPurchaseTokenAmountUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSLTPExecutionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTrailingStopExecutionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderExecutor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionUtils\",\"outputs\":[{\"internalType\":\"contract IPositionUtils\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_errors\",\"type\":\"string[]\"}],\"name\":\"setErrors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minExecutionFee\",\"type\":\"uint256\"}],\"name\":\"setMinExecutionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPurchaseTokenAmountUsd\",\"type\":\"uint256\"}],\"name\":\"setMinPurchaseTokenAmountUsd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSLTPExecutionFee\",\"type\":\"uint256\"}],\"name\":\"setMinSLTPExecutionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minTrailingStopExecutionFee\",\"type\":\"uint256\"}],\"name\":\"setMinTrailingStopExecutionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_orderExecutor\",\"type\":\"address\"}],\"name\":\"setOrderExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setOrderKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_positionRouter\",\"type\":\"address\"}],\"name\":\"setPositionRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPositionUtils\",\"name\":\"_positionUtils\",\"type\":\"address\"}],\"name\":\"setPositionUtils\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trailingStopFee\",\"type\":\"uint256\"}],\"name\":\"setTrailingStopFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trailingStopFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"trailingStopPositions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_triggerAboveThreshold\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_trailingStopPercentage\",\"type\":\"uint256\"}],\"name\":\"updateDecreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_triggerAboveThreshold\",\"type\":\"bool\"}],\"name\":\"updateIncreaseOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refPriceTimestamp\",\"type\":\"uint256\"}],\"name\":\"updateTrailingRefPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "OrderBook", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}