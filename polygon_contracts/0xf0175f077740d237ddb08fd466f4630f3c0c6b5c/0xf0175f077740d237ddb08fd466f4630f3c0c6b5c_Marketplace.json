{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/marketplace/IRentingContractStorage.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"./IRentingTypes.sol\\\";\\n\\ninterface IRentingContractStorage is IRentingTypes {\\n\\n    function getLandStatus(uint256 landId) external view returns (TokenRentingStatus);\\n\\n    function getBotStatus(uint256 botId) external view returns (TokenRentingStatus);\\n\\n    function renewRenting(uint256 id, uint256 renewTs, uint256 rentingEndTs) external;\\n\\n    function getRentingInfo(uint256 landId) external view returns (RentingInfo memory);\\n\\n    function getCollection(uint256 id) external view returns (Collection memory);\\n\\n    function createRenting(BattleSet memory bs, RentingType rt, Coin coin, uint256 price, address owner, address renter,\\n        uint256 rentingEnd, uint256 collectionId, bool perpetual, address[] memory whitelist, uint revenueShare) external;\\n\\n    function deleteListingInfo(uint256 landId) external;\\n\\n    function getListingInfo(uint256 landId) external view returns (ListingInfo memory);\\n\\n    function updateCollectionRentedAssets(uint256 id, uint256[] memory availableLands, uint256[] memory availableBotsIds,\\n        uint256[] memory rentedLandIds, uint256[] memory rentedBotsIds) external;\\n\\n    function deleteRenting(uint256 landId) external;\\n\\n    function createCollection(address assetsOwner, uint256[] memory landIds, uint256[] memory botIds,\\n        bool perpetual, address[] memory players, PaymentData memory pd) external returns (uint256);\\n\\n    function editCollection(uint256 id, Coin coin, uint256 price, RentingType rentingType, bool perpetual, uint revenueShare) external;\\n\\n    function addAssetsToCollection(uint id, uint256[] memory landIds, uint256[] memory botIds) external;\\n\\n    function removeListedLand(uint id, uint256 landIdToRemove) external;\\n\\n    function pushToBeRemovedLands(uint id, uint256 landIdToRemove) external;\\n\\n    function pushToBeRemovedBots(uint id, uint256 botIdToRemove) external;\\n\\n    function removeListedBot(uint id, uint256 botIdToRemove) external;\\n\\n    function disbandCollection(uint256 id) external returns (bool);\\n\\n    function processCollectionRentalEnd(RentingInfo memory ri) external returns (Collection memory);\\n\\n    function createListingInfo(BattleSet memory bs, RentingType rt, address owner, Coin coin, uint256 price,\\n        bool perpetual, address[] memory whitelist, uint revenueShare) external;\\n\\n    function addPlayersToCollection(uint id, address[] memory players) external;\\n\\n    function removePlayersFromCollection(uint id, address player) external;\\n\\n    function setRentingCancelTs(uint256 id, uint256 cancelTs) external;\\n\\n    function getCollectionIdByIndex(uint256 idx) external view returns (uint256);\\n\\n    function getCollectionsCount() external view returns (uint256);\\n\\n    function getRentingIdByIndex(uint256 idx) external view returns (uint256);\\n\\n    function getRentingsCount() external view returns (uint256);\\n\\n    function getListingIdByIndex(uint256 idx) external view returns (uint256);\\n\\n    function getListingCount() external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/marketplace/IRentingTypes.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface IRentingTypes {\\n\\n    enum Coin {\\n        XOIL,\\n        RBLS,\\n        WETH,\\n        USDC,\\n        BUSD,\\n        USDT,\\n        DAI\\n    }\\n\\n    enum RentingType {\\n        FIXED_PRICE,\\n        REVENUE_SHARE\\n    }\\n\\n    enum TokenRentingStatus {\\n        AVAILABLE,\\n        LISTED_BATTLE_SET,\\n        LISTED_COLLECTION,\\n        RENTED\\n    }\\n\\n    struct BattleSet {\\n        uint256 landId;\\n        uint256[] botsIds;\\n    }\\n\\n    struct ListingInfo {\\n        BattleSet battleSet;\\n        RentingType rentingType;\\n        Coin chargeCoin;\\n        uint256 listingTs;\\n        address owner;\\n        uint256 price;\\n        bool perpetual;\\n        address[] whitelist;\\n        uint revenueShare;\\n    }\\n\\n    struct RentingInfo {\\n        uint256 id;\\n        BattleSet battleSet;\\n        RentingType rentingType;\\n        Coin chargeCoin;\\n        uint256 price;\\n        address owner;\\n        address renter;\\n        uint256 rentingTs;\\n        uint256 renewTs;\\n        uint256 rentingEndTs;\\n        uint256 renewedPeriodEndTs;\\n        uint256 cancelTs;\\n        uint256 collectionId;\\n        bool perpetual;\\n        address[] whitelist;\\n        uint revenueShare;\\n    }\\n\\n    struct Collection {\\n        uint256 id;\\n        address owner;\\n        uint256[] landIds;\\n        uint256[] botsIds;\\n        uint256[] rentedLandIds;\\n        uint256[] rentedBotsIds;\\n        uint256[] landsToRemove;\\n        uint256[] botsToRemove;\\n        address[] whitelist;\\n        RentingType rentingType;\\n        Coin chargeCoin;// probaby change to uint\\n        uint256 price;\\n        bool perpetual;\\n        uint256 disbandTs;\\n        uint revenueShare;\\n    }\\n\\n    struct PaymentData {\\n        RentingType rentingType;\\n        Coin coin;\\n        uint256 price;\\n        uint revenueShare;\\n    }\\n\\n    enum TradedNft {\\n        RBXL,\\n        RBFB\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/marketplace/Marketplace.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\r\\nimport \\\"./IRentingContractStorage.sol\\\";\\r\\nimport \\\"./IRentingTypes.sol\\\";\\r\\n\\r\\n\\r\\ninterface IXoiliumMarketplaceTypes {\\r\\n    event TokenListed(address indexed seller, TradedNft indexed nft, uint256 indexed tokenId, uint256 price, Coin coin, uint256 endTs, address allowedBuyer);\\r\\n    event TokenListingUpdated(address indexed seller, TradedNft indexed nft, uint256 indexed tokenId, uint256 price, Coin coin, uint256 endTs, address allowedBuyer);\\r\\n    event ListingCanceled(address indexed seller, TradedNft indexed nft, uint256 indexed tokenId);\\r\\n    event TokenBought(address indexed buyer, TradedNft indexed nft, uint256 indexed tokenId, Coin coin, uint256 price);\\r\\n    event TokenWithdrawn(address tokenContractAddress, uint256 amount);\\r\\n    event FeesUpdate(address caller, uint256 feePercent, address feeCollectorAddress);\\r\\n\\r\\n    struct Listing {\\r\\n        TradedNft nft;\\r\\n        uint256 tokenId;\\r\\n        Coin coin;\\r\\n        uint256 price;\\r\\n        address seller;\\r\\n        uint256 endTs;\\r\\n        address allowedBuyer;\\r\\n    }\\r\\n\\r\\n    enum Coin {\\r\\n        XOIL,\\r\\n        RBLS,\\r\\n        WETH,\\r\\n        USDC,\\r\\n        USDT,\\r\\n        BUSD\\r\\n    }\\r\\n\\r\\n    enum TradedNft {\\r\\n        RBXL,\\r\\n        RBFB\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IXoiliumMarketplaceStorage is IXoiliumMarketplaceTypes {\\r\\n    function setListing(TradedNft nft, uint256 tokenId, Coin coin, uint256 price, address seller, uint256 endTs, address allowedBuyer) external;\\r\\n\\r\\n    function deleteListing(TradedNft nft, uint256 tokenId) external;\\r\\n\\r\\n    function getListing(TradedNft nft, uint256 tokenId) external view returns (Listing memory);\\r\\n\\r\\n    function getListingByIdx(TradedNft nft, uint idx) external view returns (Listing memory);\\r\\n}\\r\\n\\r\\ninterface IExtendedERC721 is IERC721 {\\r\\n    function tokenExists(uint256 tokenId) external view returns (bool);\\r\\n}\\r\\n\\r\\ncontract Marketplace is IXoiliumMarketplaceTypes, ReentrancyGuard, Ownable, Pausable {\\r\\n\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    mapping(TradedNft => IExtendedERC721) nftContracts;\\r\\n    mapping(Coin => address) paymentContracts;\\r\\n    IRentingContractStorage internal rentingStorageContract;\\r\\n    IXoiliumMarketplaceStorage internal marketplaceStorage;\\r\\n\\r\\n    uint8 private constant PAGE_SIZE = 200;\\r\\n    uint256 private feePercentMultiplier = 50;\\r\\n    address private feeCollectorAddress;\\r\\n    Coin[] private supportedCoins = [Coin.WETH];\\r\\n\\r\\n\\r\\n    constructor(address marketplaceStorageAddress, address landsContractAddress, address botsContractAddress, address rblsAddress, address wethAddress) {\\r\\n        paymentContracts[Coin.RBLS] = rblsAddress;\\r\\n        paymentContracts[Coin.WETH] = wethAddress;\\r\\n        marketplaceStorage = IXoiliumMarketplaceStorage(marketplaceStorageAddress);\\r\\n        nftContracts[TradedNft.RBXL] = IExtendedERC721(landsContractAddress);\\r\\n        nftContracts[TradedNft.RBFB] = IExtendedERC721(botsContractAddress);\\r\\n        feeCollectorAddress = _msgSender();\\r\\n    }\\r\\n\\r\\n    function setSupportedCoins(Coin[] memory newCoins) external onlyOwner {\\r\\n        supportedCoins = newCoins;\\r\\n    }\\r\\n\\r\\n    function setRentingStorageContract(address storageContractAddress) external onlyOwner {\\r\\n        rentingStorageContract = IRentingContractStorage(storageContractAddress);\\r\\n    }\\r\\n\\r\\n    function updateFees(uint256 newFeePercentMultiplier, address newFeeCollectorAddress) external onlyOwner {\\r\\n        require(newFeePercentMultiplier < 1000, \\\"Incorrect fee\\\");\\r\\n        require(newFeeCollectorAddress != address(0), \\\"Incorrect fee\\\");\\r\\n        feePercentMultiplier = newFeePercentMultiplier;\\r\\n        feeCollectorAddress = newFeeCollectorAddress;\\r\\n        emit FeesUpdate(_msgSender(), newFeePercentMultiplier, newFeeCollectorAddress);\\r\\n    }\\r\\n\\r\\n    function listToken(TradedNft nft, uint256 tokenId, uint256 price, Coin coin, uint256 duration, address allowedBuyer) external whenNotPaused {\\r\\n        require(isOwnerOf(nft, tokenId, _msgSender()), \\\"Caller is not an owner\\\");\\r\\n        require(containsCoin(supportedCoins, coin), \\\"Not supported payment currency\\\");\\r\\n        require(tokenId > 0, \\\"Unknown token ID\\\");\\r\\n        require(price >= 100, \\\"Price is to loo\\\");\\r\\n        require(duration != 0, \\\"duration is to loo\\\");\\r\\n        require(this.getListing(nft, tokenId).seller != _msgSender(), \\\"Token already listed\\\");\\r\\n        require(!isTokenListedForRent(nft, tokenId), \\\"Token already listed for the renting\\\");\\r\\n        require(allowedBuyer == address(0) || allowedBuyer != _msgSender(), \\\"The whitelisted address cannot be the seller's address\\\");\\r\\n\\r\\n        require(isApproved(nft, tokenId), \\\"Not approved\\\");\\r\\n\\r\\n        uint256 endTs = block.timestamp + duration;\\r\\n        marketplaceStorage.setListing(nft, tokenId, coin, price, _msgSender(), endTs, allowedBuyer);\\r\\n        emit TokenListed(msg.sender, nft, tokenId, price, coin, endTs, allowedBuyer);\\r\\n    }\\r\\n\\r\\n    function cancelListing(TradedNft nft, uint256 tokenId) external nonReentrant whenNotPaused {\\r\\n        require(isOwnerOf(nft, tokenId, _msgSender()), \\\"Caller is not an owner\\\");\\r\\n\\r\\n        marketplaceStorage.deleteListing(nft, tokenId);\\r\\n\\r\\n        emit ListingCanceled(msg.sender, nft, tokenId);\\r\\n    }\\r\\n\\r\\n    function updateListing(TradedNft nft, uint256 tokenId, uint256 price, Coin coin, uint256 duration, address allowedBuyer) external nonReentrant whenNotPaused {\\r\\n        Listing memory listing = marketplaceStorage.getListing(nft, tokenId);\\r\\n        require(isOwnerOf(nft, tokenId, _msgSender()), \\\"Caller is not an owner\\\");\\r\\n        require(containsCoin(supportedCoins, coin), \\\"Not supported payment currency\\\");\\r\\n        require(price >= 1000, \\\"Price is to low\\\");\\r\\n        require(listing.seller != address(0), \\\"Token is not listed\\\");\\r\\n        require(listing.endTs >= block.timestamp, \\\"Listing expired\\\");\\r\\n        uint256 endTs = block.timestamp + duration;\\r\\n        marketplaceStorage.setListing(nft, tokenId, coin, price, _msgSender(), endTs, allowedBuyer);\\r\\n        emit TokenListingUpdated(msg.sender, nft, tokenId, price, coin, endTs, allowedBuyer);\\r\\n    }\\r\\n\\r\\n    function buyItem(TradedNft nft, uint256 tokenId) external nonReentrant whenNotPaused {\\r\\n        Listing memory listing = marketplaceStorage.getListing(nft, tokenId);\\r\\n        require(listing.seller != address(0), \\\"Listing not found\\\");\\r\\n        require(listing.seller != _msgSender(), \\\"The buyer cannot be the seller's address\\\");\\r\\n        require(isOwnerOf(nft, tokenId, listing.seller), \\\"Incorrect owner of the token\\\");\\r\\n        require(listing.endTs >= block.timestamp, \\\"Listing expired\\\");\\r\\n        require(listing.allowedBuyer == address(0) || listing.allowedBuyer == _msgSender(), \\\"Address not whitelisted\\\");\\r\\n\\r\\n        if (!transferPayment(listing.coin, listing.price, listing.seller)) {\\r\\n            revert(\\\"Failed to transfer payment\\\");\\r\\n        }\\r\\n\\r\\n        marketplaceStorage.deleteListing(nft, tokenId);\\r\\n\\r\\n        IERC721(nftContracts[nft]).safeTransferFrom(listing.seller, _msgSender(), tokenId);\\r\\n        emit TokenBought(_msgSender(), nft, tokenId, listing.coin, listing.price);\\r\\n    }\\r\\n\\r\\n    function getListing(TradedNft nft, uint256 tokenId) public view returns (Listing memory) {\\r\\n        Listing memory listing = marketplaceStorage.getListing(nft, tokenId);\\r\\n        if (isListingValid(nft, listing)) {\\r\\n            return listing;\\r\\n        }\\r\\n        return Listing(TradedNft.RBXL, 0, Coin.XOIL, 0, address(0), 0, address(0));\\r\\n    }\\r\\n\\r\\n\\r\\n    function validListingExists(TradedNft nft, uint256 tokenId) public view returns (bool) {\\r\\n        return isListingValid(nft, marketplaceStorage.getListing(nft, tokenId));\\r\\n    }\\r\\n\\r\\n    function anyListingsExist(TradedNft nft, uint256[] memory tokenIds) external view returns (bool) {\\r\\n        for (uint i = 0; i < tokenIds.length; i++) {\\r\\n            if (validListingExists(nft, tokenIds[i])) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function getListingByIdx(TradedNft nft, uint idx) external view returns (Listing memory) {\\r\\n        return marketplaceStorage.getListingByIdx(nft, idx);\\r\\n    }\\r\\n\\r\\n    function removeNotValidListings(TradedNft nft, uint256[] memory ids) external {\\r\\n        for (uint i = 0; i < ids.length; i++) {\\r\\n            Listing memory listing = marketplaceStorage.getListing(nft, ids[i]);\\r\\n            if (!isListingValid(nft, listing)) {\\r\\n                marketplaceStorage.deleteListing(nft, listing.tokenId);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getListings(TradedNft nft, uint page) external view returns (Listing[] memory, bool) {\\r\\n        Listing[] memory result = new Listing[](PAGE_SIZE);\\r\\n        uint counter = 0;\\r\\n        for (uint i = PAGE_SIZE * page; i < PAGE_SIZE * (page + 1); i++) {\\r\\n            Listing memory listing = marketplaceStorage.getListingByIdx(nft, i);\\r\\n            if (isListingValid(nft, listing)) {\\r\\n                result[counter++] = listing;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        Listing[] memory trimmedResult = new Listing[](counter);\\r\\n        for (uint j = 0; j < counter; j++) {\\r\\n            trimmedResult[j] = result[j];\\r\\n        }\\r\\n        return (trimmedResult, marketplaceStorage.getListingByIdx(nft, PAGE_SIZE * (page + 1)).seller != address(0));\\r\\n    }\\r\\n\\r\\n    function getNotValidListings(TradedNft nft, uint256 searchFromIdx, uint256 searchToIdx) external view returns (uint256[] memory) {\\r\\n        require(searchFromIdx < searchToIdx, \\\"Incorrect parameters\\\");\\r\\n        uint256[] memory notValidTokenIds = new uint[](searchToIdx - searchFromIdx);\\r\\n        uint deleteCounter = 0;\\r\\n        for (uint i = searchFromIdx; i < searchToIdx; i++) {\\r\\n            Listing memory listing = marketplaceStorage.getListingByIdx(nft, i);\\r\\n            if (listing.seller == address(0) || listing.endTs == 0) {\\r\\n                continue;\\r\\n            }\\r\\n            if (!isListingValid(nft, listing)) {\\r\\n                notValidTokenIds[deleteCounter++] = listing.tokenId;\\r\\n            }\\r\\n        }\\r\\n        uint256[] memory trimmedResult = new uint256[](deleteCounter);\\r\\n        for (uint j = 0; j < deleteCounter; j++) {\\r\\n            trimmedResult[j] = notValidTokenIds[j];\\r\\n        }\\r\\n\\r\\n        return trimmedResult;\\r\\n    }\\r\\n\\r\\n    function isListingValid(TradedNft nft, Listing memory listing) private view returns (bool) {\\r\\n        return listing.seller != address(0) && tokenExists(nft, listing.tokenId)\\r\\n        && isOwnerOf(nft, listing.tokenId, listing.seller) && listing.endTs > block.timestamp;\\r\\n    }\\r\\n\\r\\n    function transferPayment(Coin coin, uint256 price, address seller) private returns (bool) {\\r\\n        IERC20 paymentContract = IERC20(paymentContracts[coin]);\\r\\n        if (feePercentMultiplier == 0) {\\r\\n            return paymentContract.transferFrom(_msgSender(), seller, price);\\r\\n        }\\r\\n        uint256 fee = (price * feePercentMultiplier) / 1000;\\r\\n        uint256 sellerAward = price - fee;\\r\\n\\r\\n        return paymentContract.transferFrom(_msgSender(), feeCollectorAddress, fee)\\r\\n        && paymentContract.transferFrom(_msgSender(), seller, sellerAward);\\r\\n    }\\r\\n\\r\\n    function isOwnerOf(TradedNft nft, uint256 tokenId, address assetOwner) private view returns (bool) {\\r\\n        return nftContracts[nft].ownerOf(tokenId) == assetOwner;\\r\\n    }\\r\\n\\r\\n    function tokenExists(TradedNft nft, uint256 tokenId) private view returns (bool) {\\r\\n        return nftContracts[nft].tokenExists(tokenId);\\r\\n    }\\r\\n\\r\\n    function isApproved(TradedNft nft, uint256 tokenId) private view returns (bool) {\\r\\n        return nftContracts[nft].getApproved(tokenId) == address(this) || nftContracts[nft].isApprovedForAll(_msgSender(), address(this));\\r\\n    }\\r\\n\\r\\n    function isTokenListedForRent(TradedNft nft, uint256 tokenId) private view returns (bool) {\\r\\n        if (nft == TradedNft.RBXL) {\\r\\n            return rentingStorageContract.getLandStatus(tokenId) != IRentingTypes.TokenRentingStatus.AVAILABLE;\\r\\n        } else if (nft == TradedNft.RBFB) {\\r\\n            return rentingStorageContract.getBotStatus(tokenId) != IRentingTypes.TokenRentingStatus.AVAILABLE;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n\\r\\n    function containsCoin(Coin[] memory array, Coin value) private pure returns (bool) {\\r\\n        for (uint i = 0; i < array.length; i++) {\\r\\n            if (array[i] == value) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Pauses operations.\\r\\n    */\\r\\n    function pause() external onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Unpauses operations.\\r\\n    */\\r\\n    function unpause() external onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *\\r\\n     * @dev Allow owner to transfer ERC-20 token from contract\\r\\n     *\\r\\n     * @param tokenContract contract address of corresponding token\\r\\n     * @param amount amount of token to be transferred\\r\\n     *\\r\\n     */\\r\\n    function withdrawToken(address tokenContract, uint256 amount) external onlyOwner {\\r\\n        if (IERC20(tokenContract).transfer(msg.sender, amount)) {\\r\\n            emit TokenWithdrawn(tokenContract, amount);\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketplaceStorageAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"landsContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"botsContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rblsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wethAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeCollectorAddress\",\"type\":\"address\"}],\"name\":\"FeesUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum IXoiliumMarketplaceTypes.TradedNft\",\"name\":\"nft\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ListingCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum IXoiliumMarketplaceTypes.TradedNft\",\"name\":\"nft\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IXoiliumMarketplaceTypes.Coin\",\"name\":\"coin\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"TokenBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum IXoiliumMarketplaceTypes.TradedNft\",\"name\":\"nft\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IXoiliumMarketplaceTypes.Coin\",\"name\":\"coin\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTs\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"allowedBuyer\",\"type\":\"address\"}],\"name\":\"TokenListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum IXoiliumMarketplaceTypes.TradedNft\",\"name\":\"nft\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IXoiliumMarketplaceTypes.Coin\",\"name\":\"coin\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTs\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"allowedBuyer\",\"type\":\"address\"}],\"name\":\"TokenListingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum IXoiliumMarketplaceTypes.TradedNft\",\"name\":\"nft\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"anyListingsExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IXoiliumMarketplaceTypes.TradedNft\",\"name\":\"nft\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IXoiliumMarketplaceTypes.TradedNft\",\"name\":\"nft\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IXoiliumMarketplaceTypes.TradedNft\",\"name\":\"nft\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getListing\",\"outputs\":[{\"components\":[{\"internalType\":\"enum IXoiliumMarketplaceTypes.TradedNft\",\"name\":\"nft\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum IXoiliumMarketplaceTypes.Coin\",\"name\":\"coin\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"endTs\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"allowedBuyer\",\"type\":\"address\"}],\"internalType\":\"struct IXoiliumMarketplaceTypes.Listing\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IXoiliumMarketplaceTypes.TradedNft\",\"name\":\"nft\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getListingByIdx\",\"outputs\":[{\"components\":[{\"internalType\":\"enum IXoiliumMarketplaceTypes.TradedNft\",\"name\":\"nft\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum IXoiliumMarketplaceTypes.Coin\",\"name\":\"coin\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"endTs\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"allowedBuyer\",\"type\":\"address\"}],\"internalType\":\"struct IXoiliumMarketplaceTypes.Listing\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IXoiliumMarketplaceTypes.TradedNft\",\"name\":\"nft\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"page\",\"type\":\"uint256\"}],\"name\":\"getListings\",\"outputs\":[{\"components\":[{\"internalType\":\"enum IXoiliumMarketplaceTypes.TradedNft\",\"name\":\"nft\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum IXoiliumMarketplaceTypes.Coin\",\"name\":\"coin\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"endTs\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"allowedBuyer\",\"type\":\"address\"}],\"internalType\":\"struct IXoiliumMarketplaceTypes.Listing[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IXoiliumMarketplaceTypes.TradedNft\",\"name\":\"nft\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"searchFromIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"searchToIdx\",\"type\":\"uint256\"}],\"name\":\"getNotValidListings\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IXoiliumMarketplaceTypes.TradedNft\",\"name\":\"nft\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"enum IXoiliumMarketplaceTypes.Coin\",\"name\":\"coin\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"allowedBuyer\",\"type\":\"address\"}],\"name\":\"listToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IXoiliumMarketplaceTypes.TradedNft\",\"name\":\"nft\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"removeNotValidListings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"storageContractAddress\",\"type\":\"address\"}],\"name\":\"setRentingStorageContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IXoiliumMarketplaceTypes.Coin[]\",\"name\":\"newCoins\",\"type\":\"uint8[]\"}],\"name\":\"setSupportedCoins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeePercentMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newFeeCollectorAddress\",\"type\":\"address\"}],\"name\":\"updateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IXoiliumMarketplaceTypes.TradedNft\",\"name\":\"nft\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"enum IXoiliumMarketplaceTypes.Coin\",\"name\":\"coin\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"allowedBuyer\",\"type\":\"address\"}],\"name\":\"updateListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IXoiliumMarketplaceTypes.TradedNft\",\"name\":\"nft\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"validListingExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Marketplace", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000038b630810ca41bae818cda8c92417f98a81126f9000000000000000000000000577682bde6873022525948e91487abdf80f71c9900000000000000000000000017892c8c3eb60c144872c18f013626471c3658bf000000000000000000000000e26cda27c13f4f87cffc2f437c5900b27ebb5bbb0000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}