{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/UnipilotPassiveVault.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./libraries/TransferHelper.sol\\\";\\nimport \\\"./interfaces/external/IWETH9.sol\\\";\\nimport \\\"./interfaces/IUnipilotVault.sol\\\";\\nimport \\\"./interfaces/IUnipilotStrategy.sol\\\";\\nimport \\\"./interfaces/IUnipilotFactory.sol\\\";\\nimport \\\"./libraries/UniswapLiquidityManagement.sol\\\";\\nimport \\\"./libraries/SafeCastExtended.sol\\\";\\nimport \\\"./libraries/UniswapPoolActions.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/drafts/ERC20Permit.sol\\\";\\n\\n/// @title Unipilot Passive Vault\\n/// @author 0xMudassir & 721Orbit\\n/// @notice Passive liquidity managment contract that handles liquidity of any Uniswap V3 pool & earn fees\\n/// @dev UnipilotPassiveVault always maintains 2 range orders on Uniswap V3,\\n/// base order: The main liquidity range -- where the majority of LP capital sits\\n/// limit order: A single token range -- depending on which token it holds more of after the base order was placed.\\n/// @dev The vault readjustment function can be called by anyone to ensure\\n/// the liquidity of vault remains in the most optimum range\\ncontract UnipilotPassiveVault is ERC20Permit, IUnipilotVault {\\n    using SafeCastExtended for uint256;\\n    using LowGasSafeMath for uint256;\\n    using UniswapPoolActions for IAlgebraPool;\\n    using UniswapLiquidityManagement for IAlgebraPool;\\n\\n    IERC20 private immutable token0;\\n    IERC20 private immutable token1;\\n    int24 private immutable tickSpacing;\\n\\n    address private immutable WETH;\\n    IUnipilotFactory private immutable unipilotFactory;\\n    uint256 internal constant MIN_INITIAL_SHARES = 1e3;\\n\\n    TicksData public ticksData;\\n    IAlgebraPool private pool;\\n    uint96 private _unlocked = 1;\\n\\n    modifier nonReentrant() {\\n        require(_unlocked == 1);\\n        _unlocked = 2;\\n        _;\\n        _unlocked = 1;\\n    }\\n\\n    modifier checkDeviation() {\\n        (, address strategy, , , ) = getProtocolDetails();\\n        IUnipilotStrategy(strategy).checkDeviation(address(pool));\\n        _;\\n    }\\n\\n    constructor(\\n        address _pool,\\n        address _unipilotFactory,\\n        address _WETH,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC20Permit(_name) ERC20(_name, _symbol) {\\n        require(_pool != address(0));\\n        require(_WETH != address(0));\\n        require(_unipilotFactory != address(0));\\n\\n        pool = IAlgebraPool(_pool);\\n        unipilotFactory = IUnipilotFactory(_unipilotFactory);\\n        WETH = _WETH;\\n        token0 = IERC20(pool.token0());\\n        token1 = IERC20(pool.token1());\\n        tickSpacing = pool.tickSpacing();\\n    }\\n\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n\\n    /// @inheritdoc IUnipilotVault\\n    function deposit(\\n        uint256 amount0Desired,\\n        uint256 amount1Desired,\\n        address recipient\\n    )\\n        external\\n        payable\\n        override\\n        nonReentrant\\n        returns (\\n            uint256 lpShares,\\n            uint256 amount0,\\n            uint256 amount1\\n        )\\n    {\\n        require(recipient != address(0));\\n        require(amount0Desired > 0 && amount1Desired > 0);\\n\\n        address sender = _msgSender();\\n        uint256 totalSupply = totalSupply();\\n\\n        (lpShares, amount0, amount1) = pool.computeLpShares(\\n            false,\\n            amount0Desired,\\n            amount1Desired,\\n            _balance0(),\\n            _balance1(),\\n            totalSupply,\\n            ticksData\\n        );\\n\\n        pay(address(token0), sender, address(this), amount0);\\n        pay(address(token1), sender, address(this), amount1);\\n\\n        if (totalSupply == 0) {\\n            // prevent first LP from stealing funds of subsequent LPs\\n            // see https://code4rena.com/reports/2022-01-sherlock/#h-01-first-user-can-steal-everyone-elses-tokens\\n            require(lpShares > MIN_INITIAL_SHARES, \\\"ML\\\");\\n            setPassivePositions(amount0, amount1);\\n        } else {\\n            require(lpShares != 0, \\\"IS\\\");\\n            (uint256 amount0Base, uint256 amount1Base) = pool.mintLiquidity(\\n                ticksData.baseTickLower,\\n                ticksData.baseTickUpper,\\n                amount0,\\n                amount1\\n            );\\n\\n            pool.mintLiquidity(\\n                ticksData.rangeTickLower,\\n                ticksData.rangeTickUpper,\\n                amount0.sub(amount0Base),\\n                amount1.sub(amount1Base)\\n            );\\n        }\\n\\n        if (address(this).balance > 0)\\n            TransferHelper.safeTransferETH(sender, address(this).balance);\\n\\n        _mint(recipient, lpShares);\\n        emit Deposit(sender, recipient, amount0, amount1, lpShares);\\n    }\\n\\n    /// @inheritdoc IUnipilotVault\\n    function withdraw(\\n        uint256 liquidity,\\n        address recipient,\\n        bool refundAsETH\\n    )\\n        external\\n        override\\n        nonReentrant\\n        checkDeviation\\n        returns (uint256 amount0, uint256 amount1)\\n    {\\n        require(liquidity > 0);\\n\\n        uint256 liquidityShare = FullMath.mulDiv(\\n            liquidity,\\n            1e18,\\n            totalSupply()\\n        );\\n\\n        (uint256 base0, uint256 base1) = burnAndCollect(\\n            ticksData.baseTickLower,\\n            ticksData.baseTickUpper,\\n            liquidityShare\\n        );\\n\\n        (uint256 range0, uint256 range1) = burnAndCollect(\\n            ticksData.rangeTickLower,\\n            ticksData.rangeTickUpper,\\n            liquidityShare\\n        );\\n\\n        amount0 = base0.add(range0);\\n        amount1 = base1.add(range1);\\n\\n        uint256 unusedAmount0 = FullMath.mulDiv(\\n            _balance0().sub(amount0),\\n            liquidity,\\n            totalSupply()\\n        );\\n\\n        uint256 unusedAmount1 = FullMath.mulDiv(\\n            _balance1().sub(amount1),\\n            liquidity,\\n            totalSupply()\\n        );\\n\\n        amount0 = amount0.add(unusedAmount0);\\n        amount1 = amount1.add(unusedAmount1);\\n\\n        if (amount0 > 0) {\\n            transferFunds(refundAsETH, recipient, address(token0), amount0);\\n        }\\n\\n        if (amount1 > 0) {\\n            transferFunds(refundAsETH, recipient, address(token1), amount1);\\n        }\\n\\n        (base0, base1) = pool.mintLiquidity(\\n            ticksData.baseTickLower,\\n            ticksData.baseTickUpper,\\n            _balance0(),\\n            _balance1()\\n        );\\n\\n        (range0, range1) = pool.mintLiquidity(\\n            ticksData.rangeTickLower,\\n            ticksData.rangeTickUpper,\\n            _balance0(),\\n            _balance1()\\n        );\\n\\n        _burn(msg.sender, liquidity);\\n        emit Withdraw(recipient, liquidity, amount0, amount1);\\n        emit CompoundFees(base0.add(range0), base1.add(range1));\\n    }\\n\\n    /// @inheritdoc IUnipilotVault\\n    function readjustLiquidity(uint8 swapBP)\\n        external\\n        override\\n        nonReentrant\\n        checkDeviation\\n    {\\n        (\\n            uint256 baseAmount0,\\n            uint256 baseAmount1,\\n            uint256 baseFees0,\\n            uint256 baseFees1\\n        ) = pool.burnLiquidity(\\n                ticksData.baseTickLower,\\n                ticksData.baseTickUpper,\\n                address(this)\\n            );\\n\\n        (\\n            uint256 rangeAmount0,\\n            uint256 rangeAmount1,\\n            uint256 rangeFees0,\\n            uint256 rangeFees1\\n        ) = pool.burnLiquidity(\\n                ticksData.rangeTickLower,\\n                ticksData.rangeTickUpper,\\n                address(this)\\n            );\\n\\n        transferFeesToIF(\\n            true,\\n            baseFees0.add(rangeFees0),\\n            baseFees1.add(rangeFees1)\\n        );\\n\\n        uint256 amount0 = baseAmount0.add(rangeAmount0);\\n        uint256 amount1 = baseAmount1.add(rangeAmount1);\\n\\n        if (amount0 == 0 || amount1 == 0) {\\n            bool zeroForOne = amount0 > 0 ? true : false;\\n\\n            (, , , , uint8 swapPercentage) = getProtocolDetails();\\n\\n            int256 amountSpecified = zeroForOne\\n                ? FullMath.mulDiv(amount0, swapPercentage, 100).toInt256()\\n                : FullMath.mulDiv(amount1, swapPercentage, 100).toInt256();\\n\\n            pool.swapToken(address(this), zeroForOne, amountSpecified);\\n        }\\n\\n        /// @dev to add remaining amounts in contract other than position liquidity\\n        amount0 = _balance0();\\n        amount1 = _balance1();\\n\\n        setPassivePositions(amount0, amount1);\\n    }\\n\\n    /// @inheritdoc IUnipilotVault\\n    function algebraMintCallback(\\n        uint256 amount0Owed,\\n        uint256 amount1Owed,\\n        bytes calldata data\\n    ) external override {\\n        _verifyCallback();\\n        address recipient = _msgSender();\\n        address payer = abi.decode(data, (address));\\n\\n        if (amount0Owed > 0)\\n            TransferHelper.safeTransfer(\\n                address(token0),\\n                recipient,\\n                amount0Owed\\n            );\\n\\n        if (amount1Owed > 0)\\n            TransferHelper.safeTransfer(\\n                address(token1),\\n                recipient,\\n                amount1Owed\\n            );\\n    }\\n\\n    /// @inheritdoc IUnipilotVault\\n    function algebraSwapCallback(\\n        int256 amount0,\\n        int256 amount1,\\n        bytes calldata data\\n    ) external override {\\n        _verifyCallback();\\n\\n        require(amount0 > 0 || amount1 > 0);\\n        bool zeroForOne = abi.decode(data, (bool));\\n\\n        if (zeroForOne)\\n            TransferHelper.safeTransfer(\\n                address(token0),\\n                _msgSender(),\\n                uint256(amount0)\\n            );\\n        else\\n            TransferHelper.safeTransfer(\\n                address(token1),\\n                _msgSender(),\\n                uint256(amount1)\\n            );\\n    }\\n\\n    /// @notice Calculates the vault's total holdings of TOKEN0 and TOKEN1 - in\\n    /// other words, how much of each token the vault would hold if it withdrew\\n    /// all its liquidity from Uniswap.\\n    /// @dev Updates the position and return the updated reserves, fees & liquidity.\\n    /// @return amount0 Amount of token0 in the unipilot vault\\n    /// @return amount1 Amount of token1 in the unipilot vault\\n    /// @return fees0 Total amount of fees collected by unipilot positions in terms of token0\\n    /// @return fees1 Total amount of fees collected by unipilot positions in terms of token1\\n    /// @return baseLiquidity The total liquidity of the base position\\n    /// @return rangeLiquidity The total liquidity of the range position\\n    function getPositionDetails()\\n        external\\n        returns (\\n            uint256 amount0,\\n            uint256 amount1,\\n            uint256 fees0,\\n            uint256 fees1,\\n            uint128 baseLiquidity,\\n            uint128 rangeLiquidity\\n        )\\n    {\\n        return pool.getTotalAmounts(false, ticksData);\\n    }\\n\\n    /// @notice Returns unipilot vault details\\n    /// @return The first of the two tokens of the pool, sorted by address\\n    /// @return The second of the two tokens of the pool, sorted by address\\n    /// @return The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The address of the Uniswap V3 Pool\\n    function getVaultInfo()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint16,\\n            address\\n        )\\n    {\\n        (, , uint16 fee, , , , ) = pool.globalState();\\n        return (address(token0), address(token1), fee, address(pool));\\n    }\\n\\n    /// @dev Amount of token0 held as unused balance.\\n    function _balance0() internal view returns (uint256) {\\n        return token0.balanceOf(address(this));\\n    }\\n\\n    /// @dev Amount of token1 held as unused balance.\\n    function _balance1() internal view returns (uint256) {\\n        return token1.balanceOf(address(this));\\n    }\\n\\n    /// @notice Verify that caller should be the address of a valid Uniswap V3 Pool\\n    function _verifyCallback() internal view {\\n        require(msg.sender == address(pool));\\n    }\\n\\n    function getProtocolDetails()\\n        internal\\n        view\\n        returns (\\n            address governance,\\n            address strategy,\\n            address indexFund,\\n            uint8 indexFundPercentage,\\n            uint8 swapPercentage\\n        )\\n    {\\n        return unipilotFactory.getUnipilotDetails();\\n    }\\n\\n    function setPassivePositions(\\n        uint256 _amount0Desired,\\n        uint256 _amount1Desired\\n    ) internal returns (uint256 amount0, uint256 amount1) {\\n        Tick memory ticks;\\n        (\\n            ticks.baseTickLower,\\n            ticks.baseTickUpper,\\n            ticks.bidTickLower,\\n            ticks.bidTickUpper,\\n            ticks.rangeTickLower,\\n            ticks.rangeTickUpper\\n        ) = _getTicksFromUniStrategy(address(pool));\\n\\n        (amount0, amount1) = pool.mintLiquidity(\\n            ticks.baseTickLower,\\n            ticks.baseTickUpper,\\n            _amount0Desired,\\n            _amount1Desired\\n        );\\n\\n        ticksData.baseTickLower = ticks.baseTickLower;\\n        ticksData.baseTickUpper = ticks.baseTickUpper;\\n\\n        uint256 remainingAmount0 = _amount0Desired.sub(amount0);\\n        uint256 remainingAmount1 = _amount1Desired.sub(amount1);\\n\\n        uint128 rangeLiquidity;\\n        if (remainingAmount0 > 0 || remainingAmount1 > 0) {\\n            uint128 range0 = pool.getLiquidityForAmounts(\\n                remainingAmount0,\\n                remainingAmount1,\\n                ticks.bidTickLower,\\n                ticks.bidTickUpper\\n            );\\n            uint128 range1 = pool.getLiquidityForAmounts(\\n                remainingAmount0,\\n                remainingAmount1,\\n                ticks.rangeTickLower,\\n                ticks.rangeTickUpper\\n            );\\n            /// @dev only one range position will ever have liquidity (if any)\\n            if (range1 < range0) {\\n                rangeLiquidity = range0;\\n                ticksData.rangeTickLower = ticks.bidTickLower;\\n                ticksData.rangeTickUpper = ticks.bidTickUpper;\\n            } else if (range0 < range1) {\\n                ticksData.rangeTickLower = ticks.rangeTickLower;\\n                ticksData.rangeTickUpper = ticks.rangeTickUpper;\\n                rangeLiquidity = range1;\\n            }\\n        }\\n\\n        if (rangeLiquidity > 0) {\\n            (uint256 _rangeAmount0, uint256 _rangeAmount1) = pool.mintLiquidity(\\n                ticksData.rangeTickLower,\\n                ticksData.rangeTickUpper,\\n                remainingAmount0,\\n                remainingAmount1\\n            );\\n            amount0 = amount0.add(_rangeAmount0);\\n            amount1 = amount1.add(_rangeAmount1);\\n        }\\n    }\\n\\n    /// @dev Burn all the liquidity of unipilot positions, collects up to a\\n    /// maximum amount of fees owed to position to the vault address &\\n    /// tranfer fees percentage to index fund.\\n    function burnAndCollect(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint256 liquidityShare\\n    ) internal returns (uint256 burnt0, uint256 burnt1) {\\n        (burnt0, burnt1) = pool.burnUserLiquidity(\\n            tickLower,\\n            tickUpper,\\n            liquidityShare,\\n            address(this)\\n        );\\n\\n        (uint256 fees0, uint256 fees1) = pool.collectPendingFees(\\n            address(this),\\n            tickLower,\\n            tickUpper\\n        );\\n\\n        transferFeesToIF(false, fees0, fees1);\\n    }\\n\\n    /// @dev fetches the new ticks for base and range positions\\n    function _getTicksFromUniStrategy(address _pool)\\n        internal\\n        returns (\\n            int24 baseTickLower,\\n            int24 baseTickUpper,\\n            int24 bidTickLower,\\n            int24 bidTickUpper,\\n            int24 rangeTickLower,\\n            int24 rangeTickUpper\\n        )\\n    {\\n        (, address strategy, , , ) = getProtocolDetails();\\n        return IUnipilotStrategy(strategy).getTicks(_pool);\\n    }\\n\\n    /// @dev method to transfer unipilot earned fees to Index Fund\\n    function transferFeesToIF(\\n        bool isReadjustLiquidity,\\n        uint256 fees0,\\n        uint256 fees1\\n    ) internal {\\n        (, , address indexFund, uint8 percentage, ) = getProtocolDetails();\\n\\n        if (fees0 > 0)\\n            TransferHelper.safeTransfer(\\n                address(token0),\\n                indexFund,\\n                FullMath.mulDiv(fees0, percentage, 100)\\n            );\\n\\n        if (fees1 > 0)\\n            TransferHelper.safeTransfer(\\n                address(token1),\\n                indexFund,\\n                FullMath.mulDiv(fees1, percentage, 100)\\n            );\\n\\n        emit FeesSnapshot(isReadjustLiquidity, fees0, fees1);\\n    }\\n\\n    function transferFunds(\\n        bool refundAsETH,\\n        address recipient,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        if (refundAsETH && token == WETH) {\\n            unwrapWETH9(amount, recipient);\\n        } else {\\n            TransferHelper.safeTransfer(token, recipient, amount);\\n        }\\n    }\\n\\n    /// @param token The token to pay\\n    /// @param payer The entity that must pay\\n    /// @param recipient The entity that will receive payment\\n    /// @param value The amount to pay\\n    function pay(\\n        address token,\\n        address payer,\\n        address recipient,\\n        uint256 value\\n    ) internal {\\n        if (token == WETH && address(this).balance >= value) {\\n            // pay with WETH9\\n            IWETH9(WETH).deposit{ value: value }(); // wrap only what is needed to pay\\n            IWETH9(WETH).transfer(recipient, value);\\n        } else if (payer == address(this)) {\\n            // pay with tokens already in the contract (for the exact input multihop case)\\n            TransferHelper.safeTransfer(token, recipient, value);\\n        } else {\\n            // pull payment\\n            TransferHelper.safeTransferFrom(token, payer, recipient, value);\\n        }\\n    }\\n\\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\\n    /// @param balanceWETH9 The amount of WETH9 to unwrap\\n    /// @param recipient The address receiving ETH\\n    function unwrapWETH9(uint256 balanceWETH9, address recipient) internal {\\n        IWETH9(WETH).withdraw(balanceWETH9);\\n        TransferHelper.safeTransferETH(recipient, balanceWETH9);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n//import \\\"../interfaces/external/IERC20.sol\\\";\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(\\n                IERC20.transferFrom.selector,\\n                from,\\n                to,\\n                value\\n            )\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"STF\\\"\\n        );\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"ST\\\"\\n        );\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.approve.selector, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"SA\\\"\\n        );\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{ value: value }(new bytes(0));\\n        require(success, \\\"STE\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/IWETH9.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Interface for WETH9\\ninterface IWETH9 is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUnipilotVault.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface IUnipilotVault {\\n    struct ReadjustVars {\\n        uint256 fees0;\\n        uint256 fees1;\\n        int24 currentTick;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint128 liquidity;\\n        uint256 amount0;\\n        uint256 amount1;\\n        bool zeroForOne;\\n        int256 amountSpecified;\\n        uint160 exactSqrtPriceImpact;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    struct TicksData {\\n        int24 baseTickLower;\\n        int24 baseTickUpper;\\n        int24 rangeTickLower;\\n        int24 rangeTickUpper;\\n    }\\n\\n    struct Tick {\\n        int24 baseTickLower;\\n        int24 baseTickUpper;\\n        int24 bidTickLower;\\n        int24 bidTickUpper;\\n        int24 rangeTickLower;\\n        int24 rangeTickUpper;\\n    }\\n\\n    struct Cache {\\n        uint256 totalSupply;\\n        uint256 liquidityShare;\\n    }\\n\\n    event Deposit(\\n        address indexed depositor,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 lpShares\\n    );\\n\\n    event FeesSnapshot(bool isReadjustLiquidity, uint256 fees0, uint256 fees1);\\n\\n    event Withdraw(\\n        address indexed recipient,\\n        uint256 shares,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    event PullLiquidity(\\n        uint256 reserves0,\\n        uint256 reserves1,\\n        uint256 fees0,\\n        uint256 fees1\\n    );\\n\\n    event CompoundFees(uint256 amount0, uint256 amount1);\\n\\n    /// @notice Deposits tokens in proportion to the Unipilot's current holdings & mints them\\n    /// `Unipilot`s LP token.\\n    /// @param amount0Desired Max amount of token0 to deposit\\n    /// @param amount1Desired Max amount of token1 to deposit\\n    /// @param recipient Recipient of shares\\n    /// @return lpShares Number of shares minted\\n    /// @return amount0 Amount of token0 deposited in vault\\n    /// @return amount1 Amount of token1 deposited in vault\\n    function deposit(\\n        uint256 amount0Desired,\\n        uint256 amount1Desired,\\n        address recipient\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 lpShares,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    /// @notice Withdraws the desired shares from the vault with accumulated user fees and transfers to recipient.\\n    /// @param recipient Recipient of tokens\\n    /// @param refundAsETH whether to recieve in WETH or ETH (only valid for WETH/ALT pairs)\\n    /// @return amount0 Amount of token0 sent to recipient\\n    /// @return amount1 Amount of token1 sent to recipient\\n    function withdraw(\\n        uint256 liquidity,\\n        address recipient,\\n        bool refundAsETH\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Pull in tokens from sender. Called to `msg.sender` after minting liquidity to a position from IUniswapV3Pool#mint.\\n    /// @dev In the implementation you must pay to the pool for the minted liquidity.\\n    /// @param amount0Owed The amount of token0 due to the pool for the minted liquidity\\n    /// @param amount1Owed The amount of token1 due to the pool for the minted liquidity\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#mint call\\n    function algebraMintCallback(\\n        uint256 amount0Owed,\\n        uint256 amount1Owed,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Called to `msg.sender` after minting swaping from IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay to the pool for swap.\\n    /// @param amount0Delta The amount of token0 due to the pool for the swap\\n    /// @param amount1Delta The amount of token1 due to the pool for the swap\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function algebraSwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Burns all position(s), collects any fees accrued and updates Unipilot's position(s)\\n    /// @dev mints all amounts to this position(s) (including earned fees)\\n    /// @dev For active vaults it can be called by the governance or operator,\\n    /// swaps imbalanced token and add all liquidity in base position.\\n    /// @dev For passive vaults it can be called by any user.\\n    /// Two positions are placed - a base position and a limit position. The base\\n    /// position is placed first with as much liquidity as possible. This position\\n    /// should use up all of one token, leaving only the other one. This excess\\n    /// amount is then placed as a single-sided bid or ask position.\\n    function readjustLiquidity(uint8 swapBP) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUnipilotStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\ninterface IUnipilotStrategy {\\n    struct PoolStrategy {\\n        int24 baseThreshold;\\n        int24 rangeThreshold;\\n        int24 maxTwapDeviation;\\n        int24 readjustThreshold;\\n        uint32 twapDuration;\\n        int24 baseMultiplier;\\n    }\\n\\n    event GovernanceUpdated(address oldGovernance, address newGovernance);\\n    event StrategyUpdated(PoolStrategy oldStrategy, PoolStrategy newStrategy);\\n    event MaxTwapDeviationUpdated(int24 oldDeviation, int24 newDeviation);\\n    event BaseTicksUpdated(int24 oldBaseTicks, int24 newBaseTicks);\\n    event RangeTicksUpdated(int24 oldRangeTicks, int24 newRangeTicks);\\n    event TwapDurationUpdated(uint32 oldDuration, uint32 newDuration);\\n    event ReadjustMultiplierUpdated(int24 oldMultiplier, int24 newMultiplier);\\n\\n    function getTicks(address _pool)\\n        external\\n        returns (\\n            int24 baseLower,\\n            int24 baseUpper,\\n            int24 bidLower,\\n            int24 bidUpper,\\n            int24 askLower,\\n            int24 askUpper\\n        );\\n\\n    function getTwap(address _pool) external view returns (int24);\\n\\n    function getStrategy(address _pool)\\n        external\\n        view\\n        returns (PoolStrategy memory strategy);\\n\\n    function getBaseThreshold(address _pool, uint16 _strategyType)\\n        external\\n        view\\n        returns (int24 baseThreshold);\\n\\n    function twapDuration() external view returns (uint32);\\n\\n    function maxTwapDeviation() external view returns (int24);\\n\\n    function checkDeviation(address pool) external view;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUnipilotFactory.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\n/// @title The interface for the Unipilot Factory\\ninterface IUnipilotFactory {\\n    /// @notice Emitted when a vault is created\\n    /// @param _tokenA The first token of the pool by address sort order\\n    /// @param _tokenB The second token of the pool by address sort order\\n    /// @param _vault The address of the vault that is created\\n    event VaultCreated(\\n        address indexed _tokenA,\\n        address indexed _tokenB,\\n        uint16 _strategyType,\\n        address indexed _vault\\n    );\\n\\n    /// @notice Emitted when the governance of the factory is changed\\n    /// @param _oldGovernance The governance before the governance was changed\\n    /// @param _newGovernance The governance after the governance was changed\\n    event GovernanceChanged(\\n        address indexed _oldGovernance,\\n        address indexed _newGovernance\\n    );\\n\\n    /// @notice Creates a vault for the given two tokens and fee\\n    /// @param _tokenA The first token of the pool by address sort order\\n    /// @param _tokenB The second token of the pool by address sort order\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0.\\n    /// The call will revert if the vault already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return _vault The address of the newly created pool\\n    function createVault(\\n        address _tokenA,\\n        address _tokenB,\\n        uint16 _vaultStrategy,\\n        uint160 _sqrtPriceX96,\\n        string memory _name,\\n        string memory _symbol\\n    ) external returns (address _vault);\\n\\n    /// @notice Used to give addresses of governance, strategy, indexFund\\n    /// @return governance address, strategy address, indexFund address\\n    function getUnipilotDetails()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            uint8,\\n            uint8\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/UniswapLiquidityManagement.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\nimport \\\"./UniswapPoolActions.sol\\\";\\nimport \\\"../interfaces/IUnipilotVault.sol\\\";\\n\\nimport \\\"@uniswap/v3-core/contracts/libraries/TickMath.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/PositionKey.sol\\\";\\n\\nimport \\\"@cryptoalgebra/periphery/contracts/libraries/LiquidityAmounts.sol\\\";\\nimport \\\"@cryptoalgebra/core/contracts/libraries/PriceMovementMath.sol\\\";\\n\\n/// @title Liquidity and ticks functions\\n/// @notice Provides functions for computing liquidity and ticks for token amounts and prices\\nlibrary UniswapLiquidityManagement {\\n    using LowGasSafeMath for uint256;\\n\\n    struct Info {\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0;\\n        uint256 amount1;\\n        uint128 liquidity;\\n        int24 tickLower;\\n        int24 tickUpper;\\n    }\\n\\n    /// @dev Wrapper around `LiquidityAmounts.getAmountsForLiquidity()`.\\n    /// @param pool Uniswap V3 pool\\n    /// @param liquidity  The liquidity being valued\\n    /// @param _tickLower The lower tick of the range\\n    /// @param _tickUpper The upper tick of the range\\n    /// @return amounts of token0 and token1 that corresponds to liquidity\\n    function getAmountsForLiquidity(\\n        IAlgebraPool pool,\\n        uint128 liquidity,\\n        int24 _tickLower,\\n        int24 _tickUpper\\n    ) internal view returns (uint256, uint256) {\\n        (uint160 sqrtRatioX96, , , , , , ) = pool.globalState();\\n        return\\n            LiquidityAmounts.getAmountsForLiquidity(\\n                sqrtRatioX96,\\n                TickMath.getSqrtRatioAtTick(_tickLower),\\n                TickMath.getSqrtRatioAtTick(_tickUpper),\\n                liquidity\\n            );\\n    }\\n\\n    /// @dev Wrapper around `LiquidityAmounts.getLiquidityForAmounts()`.\\n    /// @param pool Uniswap V3 pool\\n    /// @param amount0 The amount of token0\\n    /// @param amount1 The amount of token1\\n    /// @param _tickLower The lower tick of the range\\n    /// @param _tickUpper The upper tick of the range\\n    /// @return The maximum amount of liquidity that can be held amount0 and amount1\\n    function getLiquidityForAmounts(\\n        IAlgebraPool pool,\\n        uint256 amount0,\\n        uint256 amount1,\\n        int24 _tickLower,\\n        int24 _tickUpper\\n    ) internal view returns (uint128) {\\n        (uint160 sqrtRatioX96, , , , , , ) = pool.globalState();\\n\\n        return\\n            LiquidityAmounts.getLiquidityForAmounts(\\n                sqrtRatioX96,\\n                TickMath.getSqrtRatioAtTick(_tickLower),\\n                TickMath.getSqrtRatioAtTick(_tickUpper),\\n                amount0,\\n                amount1\\n            );\\n    }\\n\\n    /// @dev Amount of liquidity in contract position.\\n    /// @param pool Uniswap V3 pool\\n    /// @param _tickLower The lower tick of the range\\n    /// @param _tickUpper The upper tick of the range\\n    /// @return liquidity stored in position\\n    function getPositionLiquidity(\\n        IAlgebraPool pool,\\n        int24 _tickLower,\\n        int24 _tickUpper\\n    )\\n        internal\\n        view\\n        returns (\\n            uint128 liquidity,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        )\\n    {\\n        bytes32 positionKey;\\n        address vault = address(this);\\n\\n        assembly {\\n            positionKey := or(\\n                shl(24, or(shl(24, vault), and(_tickLower, 0xFFFFFF))),\\n                and(_tickUpper, 0xFFFFFF)\\n            )\\n        }\\n\\n        (liquidity, , , , tokensOwed0, tokensOwed1) = pool.positions(\\n            positionKey\\n        );\\n    }\\n\\n    /// @dev Rounds tick down towards negative infinity so that it's a multiple\\n    /// of `tickSpacing`.\\n    function floor(int24 tick, int24 tickSpacing)\\n        internal\\n        pure\\n        returns (int24)\\n    {\\n        int24 compressed = tick / tickSpacing;\\n        if (tick < 0 && tick % tickSpacing != 0) compressed--;\\n        return compressed * tickSpacing;\\n    }\\n\\n    function getSqrtRatioX96AndTick(IAlgebraPool pool)\\n        internal\\n        view\\n        returns (\\n            uint160 _sqrtRatioX96,\\n            int24 _tick,\\n            uint16 observationCardinality\\n        )\\n    {\\n        (_sqrtRatioX96, _tick, , observationCardinality, , , ) = pool\\n            .globalState();\\n    }\\n\\n    /// @dev Calc base ticks depending on base threshold and tickspacing\\n    function getBaseTicks(\\n        int24 currentTick,\\n        int24 baseThreshold,\\n        int24 tickSpacing\\n    ) internal pure returns (int24 tickLower, int24 tickUpper) {\\n        int24 tickFloor = floor(currentTick, tickSpacing);\\n        tickLower = tickFloor - baseThreshold;\\n        tickUpper = tickFloor + baseThreshold;\\n    }\\n\\n    function collectableAmountsInPosition(\\n        IAlgebraPool pool,\\n        int24 _lowerTick,\\n        int24 _upperTick\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        (\\n            uint128 liquidity,\\n            uint128 earnable0,\\n            uint128 earnable1\\n        ) = getPositionLiquidity(pool, _lowerTick, _upperTick);\\n        (uint256 burnable0, uint256 burnable1) = UniswapLiquidityManagement\\n            .getAmountsForLiquidity(pool, liquidity, _lowerTick, _upperTick);\\n\\n        return (burnable0, burnable1, earnable0, earnable1);\\n    }\\n\\n    function computeLpShares(\\n        IAlgebraPool pool,\\n        bool isWhitelisted,\\n        uint256 amount0Max,\\n        uint256 amount1Max,\\n        uint256 balance0,\\n        uint256 balance1,\\n        uint256 totalSupply,\\n        IUnipilotVault.TicksData memory ticks\\n    )\\n        internal\\n        returns (\\n            uint256 shares,\\n            uint256 amount0,\\n            uint256 amount1\\n        )\\n    {\\n        (\\n            uint256 res0,\\n            uint256 res1,\\n            uint256 fees0,\\n            uint256 fees1,\\n            ,\\n\\n        ) = getTotalAmounts(pool, isWhitelisted, ticks);\\n\\n        uint256 reserve0 = res0.add(fees0).add(balance0);\\n        uint256 reserve1 = res1.add(fees1).add(balance1);\\n\\n        // If total supply > 0, pool can't be empty\\n        assert(totalSupply == 0 || reserve0 != 0 || reserve1 != 0);\\n        (shares, amount0, amount1) = calculateShare(\\n            amount0Max,\\n            amount1Max,\\n            reserve0,\\n            reserve1,\\n            totalSupply\\n        );\\n    }\\n\\n    function getTotalAmounts(\\n        IAlgebraPool pool,\\n        bool isWhitelisted,\\n        IUnipilotVault.TicksData memory ticks\\n    )\\n        internal\\n        returns (\\n            uint256 amount0,\\n            uint256 amount1,\\n            uint256 fees0,\\n            uint256 fees1,\\n            uint128 baseLiquidity,\\n            uint128 rangeLiquidity\\n        )\\n    {\\n        (amount0, amount1, fees0, fees1, baseLiquidity) = getReserves(\\n            pool,\\n            ticks.baseTickLower,\\n            ticks.baseTickUpper\\n        );\\n\\n        if (!isWhitelisted) {\\n            (\\n                uint256 range0,\\n                uint256 range1,\\n                uint256 rangeFees0,\\n                uint256 rangeFees1,\\n                uint128 rangeliquidity\\n            ) = getReserves(pool, ticks.rangeTickLower, ticks.rangeTickUpper);\\n\\n            amount0 = amount0.add(range0);\\n            amount1 = amount1.add(range1);\\n            fees0 = fees0.add(rangeFees0);\\n            fees1 = fees1.add(rangeFees1);\\n            rangeLiquidity = rangeliquidity;\\n        }\\n    }\\n\\n    function getReserves(\\n        IAlgebraPool pool,\\n        int24 tickLower,\\n        int24 tickUpper\\n    )\\n        internal\\n        returns (\\n            uint256 amount0,\\n            uint256 amount1,\\n            uint256 fees0,\\n            uint256 fees1,\\n            uint128 liquidity\\n        )\\n    {\\n        liquidity = UniswapPoolActions.updatePosition(\\n            pool,\\n            tickLower,\\n            tickUpper\\n        );\\n\\n        if (liquidity > 0) {\\n            (amount0, amount1, fees0, fees1) = collectableAmountsInPosition(\\n                pool,\\n                tickLower,\\n                tickUpper\\n            );\\n        }\\n    }\\n\\n    function calculateShare(\\n        uint256 amount0Max,\\n        uint256 amount1Max,\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint256 totalSupply\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 shares,\\n            uint256 amount0,\\n            uint256 amount1\\n        )\\n    {\\n        if (totalSupply == 0) {\\n            // For first deposit, just use the amounts desired\\n            amount0 = amount0Max;\\n            amount1 = amount1Max;\\n            shares = amount0 > amount1 ? amount0 : amount1; // max\\n        } else if (reserve0 == 0) {\\n            amount1 = amount1Max;\\n            shares = FullMath.mulDiv(amount1, totalSupply, reserve1);\\n        } else if (reserve1 == 0) {\\n            amount0 = amount0Max;\\n            shares = FullMath.mulDiv(amount0, totalSupply, reserve0);\\n        } else {\\n            amount0 = FullMath.mulDiv(amount1Max, reserve0, reserve1);\\n            if (amount0 < amount0Max) {\\n                amount1 = amount1Max;\\n                shares = FullMath.mulDiv(amount1, totalSupply, reserve1);\\n            } else {\\n                amount0 = amount0Max;\\n                amount1 = FullMath.mulDiv(amount0, reserve1, reserve0);\\n                shares = FullMath.mulDiv(amount0, totalSupply, reserve0);\\n            }\\n        }\\n    }\\n\\n    /// @dev Gets ticks with proportion equivalent to desired amount\\n    /// @param pool Uniswap V3 pool\\n    /// @param amount0Desired The desired amount of token0\\n    /// @param amount1Desired The desired amount of token1\\n    /// @param baseThreshold The range for upper and lower ticks\\n    /// @param tickSpacing The pool tick spacing\\n    /// @return tickLower The lower tick of the range\\n    /// @return tickUpper The upper tick of the range\\n    function getPositionTicks(\\n        IAlgebraPool pool,\\n        uint256 amount0Desired,\\n        uint256 amount1Desired,\\n        int24 baseThreshold,\\n        int24 tickSpacing\\n    ) internal view returns (int24 tickLower, int24 tickUpper) {\\n        Info memory cache = Info(amount0Desired, amount1Desired, 0, 0, 0, 0, 0);\\n        // Get current price and tick from the pool\\n        (uint160 sqrtPriceX96, int24 currentTick, , , , , ) = pool\\n            .globalState();\\n        //Calc base ticks\\n        (cache.tickLower, cache.tickUpper) = getBaseTicks(\\n            currentTick,\\n            baseThreshold,\\n            tickSpacing\\n        );\\n        //Calc amounts of token0 and token1 that can be stored in base range\\n        (cache.amount0, cache.amount1) = getAmountsForTicks(\\n            pool,\\n            cache.amount0Desired,\\n            cache.amount1Desired,\\n            cache.tickLower,\\n            cache.tickUpper\\n        );\\n        // //Liquidity that can be stored in base range\\n        cache.liquidity = getLiquidityForAmounts(\\n            pool,\\n            cache.amount0,\\n            cache.amount1,\\n            cache.tickLower,\\n            cache.tickUpper\\n        );\\n\\n        // //Get imbalanced token\\n        bool zeroGreaterOne = amountsDirection(\\n            cache.amount0Desired,\\n            cache.amount1Desired,\\n            cache.amount0,\\n            cache.amount1\\n        );\\n\\n        //Calc new tick(upper or lower) for imbalanced token\\n        if (zeroGreaterOne) {\\n            uint160 nextSqrtPrice0 = PriceMovementMath.getNewPrice(\\n                sqrtPriceX96,\\n                cache.liquidity,\\n                cache.amount0Desired,\\n                false,\\n                false\\n            );\\n            cache.tickUpper = floor(\\n                TickMath.getTickAtSqrtRatio(nextSqrtPrice0),\\n                tickSpacing\\n            );\\n        } else {\\n            uint160 nextSqrtPrice1 = PriceMovementMath.getNewPrice(\\n                sqrtPriceX96,\\n                cache.liquidity,\\n                cache.amount1Desired,\\n                true,\\n                false\\n            );\\n            cache.tickLower = floor(\\n                TickMath.getTickAtSqrtRatio(nextSqrtPrice1),\\n                tickSpacing\\n            );\\n        }\\n\\n        checkRange(cache.tickLower, cache.tickUpper, tickSpacing);\\n\\n        /// floor the tick again because one tick is still not valid tick due to + - baseThreshold\\n        tickLower = floor(cache.tickLower, tickSpacing);\\n        tickUpper = floor(cache.tickUpper, tickSpacing);\\n    }\\n\\n    /// @dev Gets amounts of token0 and token1 that can be stored in range of upper and lower ticks\\n    /// @param pool Uniswap V3 pool\\n    /// @param amount0Desired The desired amount of token0\\n    /// @param amount1Desired The desired amount of token1\\n    /// @param _tickLower The lower tick of the range\\n    /// @param _tickUpper The upper tick of the range\\n    /// @return amount0 amounts of token0 that can be stored in range\\n    /// @return amount1 amounts of token1 that can be stored in range\\n    function getAmountsForTicks(\\n        IAlgebraPool pool,\\n        uint256 amount0Desired,\\n        uint256 amount1Desired,\\n        int24 _tickLower,\\n        int24 _tickUpper\\n    ) internal view returns (uint256 amount0, uint256 amount1) {\\n        uint128 liquidity = getLiquidityForAmounts(\\n            pool,\\n            amount0Desired,\\n            amount1Desired,\\n            _tickLower,\\n            _tickUpper\\n        );\\n\\n        (amount0, amount1) = getAmountsForLiquidity(\\n            pool,\\n            liquidity,\\n            _tickLower,\\n            _tickUpper\\n        );\\n    }\\n\\n    /// @dev Common checks for valid tick inputs.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @param tickSpacing The pool tick spacing\\n    function checkRange(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        int24 tickSpacing\\n    ) internal pure {\\n        require(tickLower < tickUpper, \\\"TLU\\\");\\n        require(tickLower >= TickMath.MIN_TICK, \\\"TLM\\\");\\n        require(tickUpper <= TickMath.MAX_TICK, \\\"TUM\\\");\\n        require(tickLower % tickSpacing == 0, \\\"TLI\\\");\\n        require(tickUpper % tickSpacing == 0, \\\"TUI\\\");\\n    }\\n\\n    /// @dev Get imbalanced token\\n    /// @param amount0Desired The desired amount of token0\\n    /// @param amount1Desired The desired amount of token1\\n    /// @param amount0 Amounts of token0 that can be stored in base range\\n    /// @param amount1 Amounts of token1 that can be stored in base range\\n    /// @return zeroGreaterOne true if token0 is imbalanced. False if token1 is imbalanced\\n    function amountsDirection(\\n        uint256 amount0Desired,\\n        uint256 amount1Desired,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal pure returns (bool zeroGreaterOne) {\\n        zeroGreaterOne = amount0Desired.sub(amount0).mul(amount1Desired) >\\n            amount1Desired.sub(amount1).mul(amount0Desired)\\n            ? true\\n            : false;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SafeCastExtended.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastExtended {\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(\\n            value >= -2**127 && value < 2**127,\\n            \\\"SafeCast: value doesn't fit in 128 bits\\\"\\n        );\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(\\n            value >= -2**63 && value < 2**63,\\n            \\\"SafeCast: value doesn't fit in 64 bits\\\"\\n        );\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(\\n            value >= -2**31 && value < 2**31,\\n            \\\"SafeCast: value doesn't fit in 32 bits\\\"\\n        );\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(\\n            value >= -2**15 && value < 2**15,\\n            \\\"SafeCast: value doesn't fit in 16 bits\\\"\\n        );\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(\\n            value >= -2**7 && value < 2**7,\\n            \\\"SafeCast: value doesn't fit in 8 bits\\\"\\n        );\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/UniswapPoolActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport \\\"./SafeCastExtended.sol\\\";\\nimport \\\"./UniswapLiquidityManagement.sol\\\";\\n\\nimport \\\"@cryptoalgebra/core/contracts/libraries/FullMath.sol\\\";\\nimport \\\"@cryptoalgebra/core/contracts/interfaces/IAlgebraPool.sol\\\";\\nimport \\\"@cryptoalgebra/core/contracts/libraries/LowGasSafeMath.sol\\\";\\n\\n/// @title Liquidity and ticks functions\\n/// @notice Provides functions for computing liquidity and ticks for token amounts and prices\\nlibrary UniswapPoolActions {\\n    using LowGasSafeMath for uint256;\\n    using SafeCastExtended for uint256;\\n    using UniswapLiquidityManagement for IAlgebraPool;\\n\\n    function updatePosition(\\n        IAlgebraPool pool,\\n        int24 tickLower,\\n        int24 tickUpper\\n    ) internal returns (uint128 liquidity) {\\n        (liquidity, , ) = pool.getPositionLiquidity(tickLower, tickUpper);\\n\\n        if (liquidity > 0) {\\n            pool.burn(tickLower, tickUpper, 0);\\n        }\\n    }\\n\\n    function burnLiquidity(\\n        IAlgebraPool pool,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        address recipient\\n    )\\n        internal\\n        returns (\\n            uint256 amount0,\\n            uint256 amount1,\\n            uint256 fees0,\\n            uint256 fees1\\n        )\\n    {\\n        (uint128 liquidity, , ) = pool.getPositionLiquidity(\\n            tickLower,\\n            tickUpper\\n        );\\n        if (liquidity > 0) {\\n            (amount0, amount1) = pool.burn(tickLower, tickUpper, liquidity);\\n            if (amount0 > 0 || amount1 > 0) {\\n                (uint256 collect0, uint256 collect1) = pool.collect(\\n                    recipient,\\n                    tickLower,\\n                    tickUpper,\\n                    type(uint128).max,\\n                    type(uint128).max\\n                );\\n\\n                (fees0, fees1) = (collect0.sub(amount0), collect1.sub(amount1));\\n            }\\n        }\\n    }\\n\\n    function burnUserLiquidity(\\n        IAlgebraPool pool,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint256 userSharePercentage,\\n        address recipient\\n    ) internal returns (uint256 amount0, uint256 amount1) {\\n        (uint128 liquidity, , ) = pool.getPositionLiquidity(\\n            tickLower,\\n            tickUpper\\n        );\\n\\n        uint256 liquidityRemoved = FullMath.mulDiv(\\n            uint256(liquidity),\\n            userSharePercentage,\\n            1e18\\n        );\\n\\n        (amount0, amount1) = pool.burn(\\n            tickLower,\\n            tickUpper,\\n            liquidityRemoved.toUint128()\\n        );\\n\\n        if (amount0 > 0 || amount1 > 0) {\\n            (amount0, amount0) = pool.collect(\\n                recipient,\\n                tickLower,\\n                tickUpper,\\n                amount0.toUint128(),\\n                amount1.toUint128()\\n            );\\n        }\\n    }\\n\\n    function mintLiquidity(\\n        IAlgebraPool pool,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint256 amount0Desired,\\n        uint256 amount1Desired\\n    ) internal returns (uint256 amount0, uint256 amount1) {\\n        uint128 liquidity = pool.getLiquidityForAmounts(\\n            amount0Desired,\\n            amount1Desired,\\n            tickLower,\\n            tickUpper\\n        );\\n\\n        if (liquidity > 0) {\\n            (amount0, amount1, ) = pool.mint(\\n                address(this),\\n                address(this),\\n                tickLower,\\n                tickUpper,\\n                liquidity,\\n                abi.encode(address(this))\\n            );\\n        }\\n    }\\n\\n    function swapToken(\\n        IAlgebraPool pool,\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified\\n    ) internal {\\n        (uint160 sqrtPriceX96, , ) = pool.getSqrtRatioX96AndTick();\\n\\n        uint160 exactSqrtPriceImpact = (sqrtPriceX96 * (1e5 / 2)) / 1e6;\\n\\n        uint160 sqrtPriceLimitX96 = zeroForOne\\n            ? sqrtPriceX96 - exactSqrtPriceImpact\\n            : sqrtPriceX96 + exactSqrtPriceImpact;\\n\\n        pool.swap(\\n            recipient,\\n            zeroForOne,\\n            amountSpecified,\\n            sqrtPriceLimitX96,\\n            abi.encode(zeroForOne)\\n        );\\n    }\\n\\n    function collectPendingFees(\\n        IAlgebraPool pool,\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper\\n    ) internal returns (uint256 collect0, uint256 collect1) {\\n        updatePosition(pool, tickLower, tickUpper);\\n\\n        (collect0, collect1) = pool.collect(\\n            recipient,\\n            tickLower,\\n            tickUpper,\\n            type(uint128).max,\\n            type(uint128).max\\n        );\\n    }\\n\\n    function rerangeLiquidity(\\n        IAlgebraPool pool,\\n        int24 baseThreshold,\\n        int24 tickSpacing,\\n        uint256 balance0,\\n        uint256 balance1\\n    ) internal returns (int24 tickLower, int24 tickUpper) {\\n        (tickLower, tickUpper) = pool.getPositionTicks(\\n            balance0,\\n            balance1,\\n            baseThreshold,\\n            tickSpacing\\n        );\\n\\n        mintLiquidity(pool, tickLower, tickUpper, balance0, balance1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/drafts/ERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.5 <0.8.0;\\n\\nimport \\\"../token/ERC20/ERC20.sol\\\";\\nimport \\\"./IERC20Permit.sol\\\";\\nimport \\\"../cryptography/ECDSA.sol\\\";\\nimport \\\"../utils/Counters.sol\\\";\\nimport \\\"./EIP712.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping (address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public virtual override {\\n        // solhint-disable-next-line not-rely-on-time\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(\\n            abi.encode(\\n                _PERMIT_TYPEHASH,\\n                owner,\\n                spender,\\n                value,\\n                _nonces[owner].current(),\\n                deadline\\n            )\\n        );\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _nonces[owner].increment();\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/libraries/TickMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(MAX_TICK), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts/libraries/PositionKey.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nlibrary PositionKey {\\n    /// @dev Returns the key of the position in the core library\\n    function compute(\\n        address owner,\\n        int24 tickLower,\\n        int24 tickUpper\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(owner, tickLower, tickUpper));\\n    }\\n}\\n\"\r\n    },\r\n    \"@cryptoalgebra/periphery/contracts/libraries/LiquidityAmounts.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport '@cryptoalgebra/core/contracts/libraries/FullMath.sol';\\nimport '@cryptoalgebra/core/contracts/libraries/Constants.sol';\\n\\n/// @title Liquidity amount functions\\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\n/// https://github.com/Uniswap/v3-periphery\\nlibrary LiquidityAmounts {\\n    /// @notice Downcasts uint256 to uint128\\n    /// @param x The uint258 to be downcasted\\n    /// @return y The passed value, downcasted to uint128\\n    function toUint128(uint256 x) private pure returns (uint128 y) {\\n        require((y = uint128(x)) == x);\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount0 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount0(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, Constants.Q96);\\n        return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount1 The amount1 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount1(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        return toUint128(FullMath.mulDiv(amount1, Constants.Q96, sqrtRatioBX96 - sqrtRatioAX96));\\n    }\\n\\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount of token0 being sent in\\n    /// @param amount1 The amount of token1 being sent in\\n    /// @return liquidity The maximum amount of liquidity received\\n    function getLiquidityForAmounts(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\\n\\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\n        } else {\\n            liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\\n        }\\n    }\\n\\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    function getAmount0ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            FullMath.mulDiv(uint256(liquidity) << Constants.RESOLUTION, sqrtRatioBX96 - sqrtRatioAX96, sqrtRatioBX96) /\\n            sqrtRatioAX96;\\n    }\\n\\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount1 The amount of token1\\n    function getAmount1ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, Constants.Q96);\\n    }\\n\\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function getAmountsForLiquidity(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\\n        } else {\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@cryptoalgebra/core/contracts/libraries/PriceMovementMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity =0.7.6;\\r\\n\\r\\nimport './FullMath.sol';\\r\\nimport './TokenDeltaMath.sol';\\r\\n\\r\\n/// @title Computes the result of price movement\\r\\n/// @notice Contains methods for computing the result of price movement within a single tick price range.\\r\\nlibrary PriceMovementMath {\\r\\n  using LowGasSafeMath for uint256;\\r\\n  using SafeCast for uint256;\\r\\n\\r\\n  /// @notice Gets the next sqrt price given an input amount of token0 or token1\\r\\n  /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\\r\\n  /// @param price The starting Q64.96 sqrt price, i.e., before accounting for the input amount\\r\\n  /// @param liquidity The amount of usable liquidity\\r\\n  /// @param input How much of token0, or token1, is being swapped in\\r\\n  /// @param zeroToOne Whether the amount in is token0 or token1\\r\\n  /// @return resultPrice The Q64.96 sqrt price after adding the input amount to token0 or token1\\r\\n  function getNewPriceAfterInput(\\r\\n    uint160 price,\\r\\n    uint128 liquidity,\\r\\n    uint256 input,\\r\\n    bool zeroToOne\\r\\n  ) internal pure returns (uint160 resultPrice) {\\r\\n    return getNewPrice(price, liquidity, input, zeroToOne, true);\\r\\n  }\\r\\n\\r\\n  /// @notice Gets the next sqrt price given an output amount of token0 or token1\\r\\n  /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\\r\\n  /// @param price The starting Q64.96 sqrt price before accounting for the output amount\\r\\n  /// @param liquidity The amount of usable liquidity\\r\\n  /// @param output How much of token0, or token1, is being swapped out\\r\\n  /// @param zeroToOne Whether the amount out is token0 or token1\\r\\n  /// @return resultPrice The Q64.96 sqrt price after removing the output amount of token0 or token1\\r\\n  function getNewPriceAfterOutput(\\r\\n    uint160 price,\\r\\n    uint128 liquidity,\\r\\n    uint256 output,\\r\\n    bool zeroToOne\\r\\n  ) internal pure returns (uint160 resultPrice) {\\r\\n    return getNewPrice(price, liquidity, output, zeroToOne, false);\\r\\n  }\\r\\n\\r\\n  function getNewPrice(\\r\\n    uint160 price,\\r\\n    uint128 liquidity,\\r\\n    uint256 amount,\\r\\n    bool zeroToOne,\\r\\n    bool fromInput\\r\\n  ) internal pure returns (uint160 resultPrice) {\\r\\n    require(price > 0);\\r\\n    require(liquidity > 0);\\r\\n\\r\\n    if (zeroToOne == fromInput) {\\r\\n      // rounding up or down\\r\\n      if (amount == 0) return price;\\r\\n      uint256 liquidityShifted = uint256(liquidity) << Constants.RESOLUTION;\\r\\n\\r\\n      if (fromInput) {\\r\\n        uint256 product;\\r\\n        if ((product = amount * price) / amount == price) {\\r\\n          uint256 denominator = liquidityShifted + product;\\r\\n          if (denominator >= liquidityShifted) return uint160(FullMath.mulDivRoundingUp(liquidityShifted, price, denominator)); // always fits in 160 bits\\r\\n        }\\r\\n\\r\\n        return uint160(FullMath.divRoundingUp(liquidityShifted, (liquidityShifted / price).add(amount)));\\r\\n      } else {\\r\\n        uint256 product;\\r\\n        require((product = amount * price) / amount == price); // if the product overflows, we know the denominator underflows\\r\\n        require(liquidityShifted > product); // in addition, we must check that the denominator does not underflow\\r\\n        return FullMath.mulDivRoundingUp(liquidityShifted, price, liquidityShifted - product).toUint160();\\r\\n      }\\r\\n    } else {\\r\\n      // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\\r\\n      // in both cases, avoid a mulDiv for most inputs\\r\\n      if (fromInput) {\\r\\n        return\\r\\n          uint256(price)\\r\\n            .add(amount <= type(uint160).max ? (amount << Constants.RESOLUTION) / liquidity : FullMath.mulDiv(amount, Constants.Q96, liquidity))\\r\\n            .toUint160();\\r\\n      } else {\\r\\n        uint256 quotient = amount <= type(uint160).max\\r\\n          ? FullMath.divRoundingUp(amount << Constants.RESOLUTION, liquidity)\\r\\n          : FullMath.mulDivRoundingUp(amount, Constants.Q96, liquidity);\\r\\n\\r\\n        require(price > quotient);\\r\\n        return uint160(price - quotient); // always fits 160 bits\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getTokenADelta01(\\r\\n    uint160 to,\\r\\n    uint160 from,\\r\\n    uint128 liquidity\\r\\n  ) internal pure returns (uint256) {\\r\\n    return TokenDeltaMath.getToken0Delta(to, from, liquidity, true);\\r\\n  }\\r\\n\\r\\n  function getTokenADelta10(\\r\\n    uint160 to,\\r\\n    uint160 from,\\r\\n    uint128 liquidity\\r\\n  ) internal pure returns (uint256) {\\r\\n    return TokenDeltaMath.getToken1Delta(from, to, liquidity, true);\\r\\n  }\\r\\n\\r\\n  function getTokenBDelta01(\\r\\n    uint160 to,\\r\\n    uint160 from,\\r\\n    uint128 liquidity\\r\\n  ) internal pure returns (uint256) {\\r\\n    return TokenDeltaMath.getToken1Delta(to, from, liquidity, false);\\r\\n  }\\r\\n\\r\\n  function getTokenBDelta10(\\r\\n    uint160 to,\\r\\n    uint160 from,\\r\\n    uint128 liquidity\\r\\n  ) internal pure returns (uint256) {\\r\\n    return TokenDeltaMath.getToken0Delta(from, to, liquidity, false);\\r\\n  }\\r\\n\\r\\n  /// @notice Computes the result of swapping some amount in, or amount out, given the parameters of the swap\\r\\n  /// @dev The fee, plus the amount in, will never exceed the amount remaining if the swap's `amountSpecified` is positive\\r\\n  /// @param currentPrice The current Q64.96 sqrt price of the pool\\r\\n  /// @param targetPrice The Q64.96 sqrt price that cannot be exceeded, from which the direction of the swap is inferred\\r\\n  /// @param liquidity The usable liquidity\\r\\n  /// @param amountAvailable How much input or output amount is remaining to be swapped in/out\\r\\n  /// @param fee The fee taken from the input amount, expressed in hundredths of a bip\\r\\n  /// @return resultPrice The Q64.96 sqrt price after swapping the amount in/out, not to exceed the price target\\r\\n  /// @return input The amount to be swapped in, of either token0 or token1, based on the direction of the swap\\r\\n  /// @return output The amount to be received, of either token0 or token1, based on the direction of the swap\\r\\n  /// @return feeAmount The amount of input that will be taken as a fee\\r\\n  function movePriceTowardsTarget(\\r\\n    bool zeroToOne,\\r\\n    uint160 currentPrice,\\r\\n    uint160 targetPrice,\\r\\n    uint128 liquidity,\\r\\n    int256 amountAvailable,\\r\\n    uint16 fee\\r\\n  )\\r\\n    internal\\r\\n    pure\\r\\n    returns (\\r\\n      uint160 resultPrice,\\r\\n      uint256 input,\\r\\n      uint256 output,\\r\\n      uint256 feeAmount\\r\\n    )\\r\\n  {\\r\\n    function(uint160, uint160, uint128) pure returns (uint256) getAmountA = zeroToOne ? getTokenADelta01 : getTokenADelta10;\\r\\n\\r\\n    if (amountAvailable >= 0) {\\r\\n      // exactIn or not\\r\\n      uint256 amountAvailableAfterFee = FullMath.mulDiv(uint256(amountAvailable), 1e6 - fee, 1e6);\\r\\n      input = getAmountA(targetPrice, currentPrice, liquidity);\\r\\n      if (amountAvailableAfterFee >= input) {\\r\\n        resultPrice = targetPrice;\\r\\n        feeAmount = FullMath.mulDivRoundingUp(input, fee, 1e6 - fee);\\r\\n      } else {\\r\\n        resultPrice = getNewPriceAfterInput(currentPrice, liquidity, amountAvailableAfterFee, zeroToOne);\\r\\n        if (targetPrice != resultPrice) {\\r\\n          input = getAmountA(resultPrice, currentPrice, liquidity);\\r\\n\\r\\n          // we didn't reach the target, so take the remainder of the maximum input as fee\\r\\n          feeAmount = uint256(amountAvailable) - input;\\r\\n        } else {\\r\\n          feeAmount = FullMath.mulDivRoundingUp(input, fee, 1e6 - fee);\\r\\n        }\\r\\n      }\\r\\n\\r\\n      output = (zeroToOne ? getTokenBDelta01 : getTokenBDelta10)(resultPrice, currentPrice, liquidity);\\r\\n    } else {\\r\\n      function(uint160, uint160, uint128) pure returns (uint256) getAmountB = zeroToOne ? getTokenBDelta01 : getTokenBDelta10;\\r\\n\\r\\n      output = getAmountB(targetPrice, currentPrice, liquidity);\\r\\n      amountAvailable = -amountAvailable;\\r\\n      if (uint256(amountAvailable) >= output) resultPrice = targetPrice;\\r\\n      else {\\r\\n        resultPrice = getNewPriceAfterOutput(currentPrice, liquidity, uint256(amountAvailable), zeroToOne);\\r\\n\\r\\n        if (targetPrice != resultPrice) {\\r\\n          output = getAmountB(resultPrice, currentPrice, liquidity);\\r\\n        }\\r\\n\\r\\n        // cap the output amount to not exceed the remaining output amount\\r\\n        if (output > uint256(amountAvailable)) {\\r\\n          output = uint256(amountAvailable);\\r\\n        }\\r\\n      }\\r\\n\\r\\n      input = getAmountA(resultPrice, currentPrice, liquidity);\\r\\n      feeAmount = FullMath.mulDivRoundingUp(input, fee, 1e6 - fee);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@cryptoalgebra/core/contracts/libraries/FullMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.4.0 || ^0.5.0 || ^0.6.0 || ^0.7.0;\\r\\n\\r\\n/// @title Contains 512-bit math functions\\r\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\r\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\r\\nlibrary FullMath {\\r\\n  /// @notice Calculates floor(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n  /// @param a The multiplicand\\r\\n  /// @param b The multiplier\\r\\n  /// @param denominator The divisor\\r\\n  /// @return result The 256-bit result\\r\\n  /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\r\\n  function mulDiv(\\r\\n    uint256 a,\\r\\n    uint256 b,\\r\\n    uint256 denominator\\r\\n  ) internal pure returns (uint256 result) {\\r\\n    // 512-bit multiply [prod1 prod0] = a * b\\r\\n    // Compute the product mod 2**256 and mod 2**256 - 1\\r\\n    // then use the Chinese Remainder Theorem to reconstruct\\r\\n    // the 512 bit result. The result is stored in two 256\\r\\n    // variables such that product = prod1 * 2**256 + prod0\\r\\n    uint256 prod0 = a * b; // Least significant 256 bits of the product\\r\\n    uint256 prod1; // Most significant 256 bits of the product\\r\\n    assembly {\\r\\n      let mm := mulmod(a, b, not(0))\\r\\n      prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n    }\\r\\n\\r\\n    // Make sure the result is less than 2**256.\\r\\n    // Also prevents denominator == 0\\r\\n    require(denominator > prod1);\\r\\n\\r\\n    // Handle non-overflow cases, 256 by 256 division\\r\\n    if (prod1 == 0) {\\r\\n      assembly {\\r\\n        result := div(prod0, denominator)\\r\\n      }\\r\\n      return result;\\r\\n    }\\r\\n\\r\\n    ///////////////////////////////////////////////\\r\\n    // 512 by 256 division.\\r\\n    ///////////////////////////////////////////////\\r\\n\\r\\n    // Make division exact by subtracting the remainder from [prod1 prod0]\\r\\n    // Compute remainder using mulmod\\r\\n    // Subtract 256 bit remainder from 512 bit number\\r\\n    assembly {\\r\\n      let remainder := mulmod(a, b, denominator)\\r\\n      prod1 := sub(prod1, gt(remainder, prod0))\\r\\n      prod0 := sub(prod0, remainder)\\r\\n    }\\r\\n\\r\\n    // Factor powers of two out of denominator\\r\\n    // Compute largest power of two divisor of denominator.\\r\\n    // Always >= 1.\\r\\n    uint256 twos = -denominator & denominator;\\r\\n    // Divide denominator by power of two\\r\\n    assembly {\\r\\n      denominator := div(denominator, twos)\\r\\n    }\\r\\n\\r\\n    // Divide [prod1 prod0] by the factors of two\\r\\n    assembly {\\r\\n      prod0 := div(prod0, twos)\\r\\n    }\\r\\n    // Shift in bits from prod1 into prod0. For this we need\\r\\n    // to flip `twos` such that it is 2**256 / twos.\\r\\n    // If twos is zero, then it becomes one\\r\\n    assembly {\\r\\n      twos := add(div(sub(0, twos), twos), 1)\\r\\n    }\\r\\n    prod0 |= prod1 * twos;\\r\\n\\r\\n    // Invert denominator mod 2**256\\r\\n    // Now that denominator is an odd number, it has an inverse\\r\\n    // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\r\\n    // Compute the inverse by starting with a seed that is correct\\r\\n    // correct for four bits. That is, denominator * inv = 1 mod 2**4\\r\\n    uint256 inv = (3 * denominator) ^ 2;\\r\\n    // Now use Newton-Raphson iteration to improve the precision.\\r\\n    // Thanks to Hensel's lifting lemma, this also works in modular\\r\\n    // arithmetic, doubling the correct bits in each step.\\r\\n    inv *= 2 - denominator * inv; // inverse mod 2**8\\r\\n    inv *= 2 - denominator * inv; // inverse mod 2**16\\r\\n    inv *= 2 - denominator * inv; // inverse mod 2**32\\r\\n    inv *= 2 - denominator * inv; // inverse mod 2**64\\r\\n    inv *= 2 - denominator * inv; // inverse mod 2**128\\r\\n    inv *= 2 - denominator * inv; // inverse mod 2**256\\r\\n\\r\\n    // Because the division is now exact we can divide by multiplying\\r\\n    // with the modular inverse of denominator. This will give us the\\r\\n    // correct result modulo 2**256. Since the preconditions guarantee\\r\\n    // that the outcome is less than 2**256, this is the final result.\\r\\n    // We don't need to compute the high bits of the result and prod1\\r\\n    // is no longer required.\\r\\n    result = prod0 * inv;\\r\\n    return result;\\r\\n  }\\r\\n\\r\\n  /// @notice Calculates ceil(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n  /// @param a The multiplicand\\r\\n  /// @param b The multiplier\\r\\n  /// @param denominator The divisor\\r\\n  /// @return result The 256-bit result\\r\\n  function mulDivRoundingUp(\\r\\n    uint256 a,\\r\\n    uint256 b,\\r\\n    uint256 denominator\\r\\n  ) internal pure returns (uint256 result) {\\r\\n    if (a == 0 || ((result = a * b) / a == b)) {\\r\\n      require(denominator > 0);\\r\\n      assembly {\\r\\n        result := add(div(result, denominator), gt(mod(result, denominator), 0))\\r\\n      }\\r\\n    } else {\\r\\n      result = mulDiv(a, b, denominator);\\r\\n      if (mulmod(a, b, denominator) > 0) {\\r\\n        require(result < type(uint256).max);\\r\\n        result++;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Returns ceil(x / y)\\r\\n  /// @dev division by 0 has unspecified behavior, and must be checked externally\\r\\n  /// @param x The dividend\\r\\n  /// @param y The divisor\\r\\n  /// @return z The quotient, ceil(x / y)\\r\\n  function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n    assembly {\\r\\n      z := add(div(x, y), gt(mod(x, y), 0))\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@cryptoalgebra/core/contracts/interfaces/IAlgebraPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport './pool/IAlgebraPoolImmutables.sol';\\r\\nimport './pool/IAlgebraPoolState.sol';\\r\\nimport './pool/IAlgebraPoolDerivedState.sol';\\r\\nimport './pool/IAlgebraPoolActions.sol';\\r\\nimport './pool/IAlgebraPoolPermissionedActions.sol';\\r\\nimport './pool/IAlgebraPoolEvents.sol';\\r\\n\\r\\n/**\\r\\n * @title The interface for a Algebra Pool\\r\\n * @dev The pool interface is broken up into many smaller pieces.\\r\\n * Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n * https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\n */\\r\\ninterface IAlgebraPool is\\r\\n  IAlgebraPoolImmutables,\\r\\n  IAlgebraPoolState,\\r\\n  IAlgebraPoolDerivedState,\\r\\n  IAlgebraPoolActions,\\r\\n  IAlgebraPoolPermissionedActions,\\r\\n  IAlgebraPoolEvents\\r\\n{\\r\\n  // used only for combining interfaces\\r\\n}\\r\\n\"\r\n    },\r\n    \"@cryptoalgebra/core/contracts/libraries/LowGasSafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.7.0;\\r\\n\\r\\n/// @title Optimized overflow and underflow safe math operations\\r\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/blob/main/contracts/libraries\\r\\nlibrary LowGasSafeMath {\\r\\n  /// @notice Returns x + y, reverts if sum overflows uint256\\r\\n  /// @param x The augend\\r\\n  /// @param y The addend\\r\\n  /// @return z The sum of x and y\\r\\n  function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n    require((z = x + y) >= x);\\r\\n  }\\r\\n\\r\\n  /// @notice Returns x - y, reverts if underflows\\r\\n  /// @param x The minuend\\r\\n  /// @param y The subtrahend\\r\\n  /// @return z The difference of x and y\\r\\n  function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n    require((z = x - y) <= x);\\r\\n  }\\r\\n\\r\\n  /// @notice Returns x * y, reverts if overflows\\r\\n  /// @param x The multiplicand\\r\\n  /// @param y The multiplier\\r\\n  /// @return z The product of x and y\\r\\n  function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n    require(x == 0 || (z = x * y) / x == y);\\r\\n  }\\r\\n\\r\\n  /// @notice Returns x + y, reverts if overflows or underflows\\r\\n  /// @param x The augend\\r\\n  /// @param y The addend\\r\\n  /// @return z The sum of x and y\\r\\n  function add(int256 x, int256 y) internal pure returns (int256 z) {\\r\\n    require((z = x + y) >= x == (y >= 0));\\r\\n  }\\r\\n\\r\\n  /// @notice Returns x - y, reverts if overflows or underflows\\r\\n  /// @param x The minuend\\r\\n  /// @param y The subtrahend\\r\\n  /// @return z The difference of x and y\\r\\n  function sub(int256 x, int256 y) internal pure returns (int256 z) {\\r\\n    require((z = x - y) <= x == (y >= 0));\\r\\n  }\\r\\n\\r\\n  /// @notice Returns x + y, reverts if overflows or underflows\\r\\n  /// @param x The augend\\r\\n  /// @param y The addend\\r\\n  /// @return z The sum of x and y\\r\\n  function add128(uint128 x, uint128 y) internal pure returns (uint128 z) {\\r\\n    require((z = x + y) >= x);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@cryptoalgebra/core/contracts/libraries/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity =0.7.6;\\r\\n\\r\\nlibrary Constants {\\r\\n  uint8 internal constant RESOLUTION = 96;\\r\\n  uint256 internal constant Q96 = 0x1000000000000000000000000;\\r\\n  uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\r\\n  // fee value in hundredths of a bip, i.e. 1e-6\\r\\n  uint16 internal constant BASE_FEE = 100;\\r\\n  int24 internal constant TICK_SPACING = 60;\\r\\n\\r\\n  // max(uint128) / ( (MAX_TICK - MIN_TICK) / TICK_SPACING )\\r\\n  uint128 internal constant MAX_LIQUIDITY_PER_TICK = 11505743598341114571880798222544994;\\r\\n\\r\\n  uint32 internal constant MAX_LIQUIDITY_COOLDOWN = 1 days;\\r\\n  uint8 internal constant MAX_COMMUNITY_FEE = 250;\\r\\n  uint256 internal constant COMMUNITY_FEE_DENOMINATOR = 1000;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@cryptoalgebra/core/contracts/libraries/TokenDeltaMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity =0.7.6;\\r\\n\\r\\nimport './LowGasSafeMath.sol';\\r\\nimport './SafeCast.sol';\\r\\n\\r\\nimport './FullMath.sol';\\r\\nimport './Constants.sol';\\r\\n\\r\\n/// @title Functions based on Q64.96 sqrt price and liquidity\\r\\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\\r\\nlibrary TokenDeltaMath {\\r\\n  using LowGasSafeMath for uint256;\\r\\n  using SafeCast for uint256;\\r\\n\\r\\n  /// @notice Gets the token0 delta between two prices\\r\\n  /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper)\\r\\n  /// @param priceLower A Q64.96 sqrt price\\r\\n  /// @param priceUpper Another Q64.96 sqrt price\\r\\n  /// @param liquidity The amount of usable liquidity\\r\\n  /// @param roundUp Whether to round the amount up or down\\r\\n  /// @return token0Delta Amount of token0 required to cover a position of size liquidity between the two passed prices\\r\\n  function getToken0Delta(\\r\\n    uint160 priceLower,\\r\\n    uint160 priceUpper,\\r\\n    uint128 liquidity,\\r\\n    bool roundUp\\r\\n  ) internal pure returns (uint256 token0Delta) {\\r\\n    uint256 priceDelta = priceUpper - priceLower;\\r\\n    require(priceDelta < priceUpper); // forbids underflow and 0 priceLower\\r\\n    uint256 liquidityShifted = uint256(liquidity) << Constants.RESOLUTION;\\r\\n\\r\\n    token0Delta = roundUp\\r\\n      ? FullMath.divRoundingUp(FullMath.mulDivRoundingUp(priceDelta, liquidityShifted, priceUpper), priceLower)\\r\\n      : FullMath.mulDiv(priceDelta, liquidityShifted, priceUpper) / priceLower;\\r\\n  }\\r\\n\\r\\n  /// @notice Gets the token1 delta between two prices\\r\\n  /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\\r\\n  /// @param priceLower A Q64.96 sqrt price\\r\\n  /// @param priceUpper Another Q64.96 sqrt price\\r\\n  /// @param liquidity The amount of usable liquidity\\r\\n  /// @param roundUp Whether to round the amount up, or down\\r\\n  /// @return token1Delta Amount of token1 required to cover a position of size liquidity between the two passed prices\\r\\n  function getToken1Delta(\\r\\n    uint160 priceLower,\\r\\n    uint160 priceUpper,\\r\\n    uint128 liquidity,\\r\\n    bool roundUp\\r\\n  ) internal pure returns (uint256 token1Delta) {\\r\\n    require(priceUpper >= priceLower);\\r\\n    uint256 priceDelta = priceUpper - priceLower;\\r\\n    token1Delta = roundUp ? FullMath.mulDivRoundingUp(priceDelta, liquidity, Constants.Q96) : FullMath.mulDiv(priceDelta, liquidity, Constants.Q96);\\r\\n  }\\r\\n\\r\\n  /// @notice Helper that gets signed token0 delta\\r\\n  /// @param priceLower A Q64.96 sqrt price\\r\\n  /// @param priceUpper Another Q64.96 sqrt price\\r\\n  /// @param liquidity The change in liquidity for which to compute the token0 delta\\r\\n  /// @return token0Delta Amount of token0 corresponding to the passed liquidityDelta between the two prices\\r\\n  function getToken0Delta(\\r\\n    uint160 priceLower,\\r\\n    uint160 priceUpper,\\r\\n    int128 liquidity\\r\\n  ) internal pure returns (int256 token0Delta) {\\r\\n    token0Delta = liquidity >= 0\\r\\n      ? getToken0Delta(priceLower, priceUpper, uint128(liquidity), true).toInt256()\\r\\n      : -getToken0Delta(priceLower, priceUpper, uint128(-liquidity), false).toInt256();\\r\\n  }\\r\\n\\r\\n  /// @notice Helper that gets signed token1 delta\\r\\n  /// @param priceLower A Q64.96 sqrt price\\r\\n  /// @param priceUpper Another Q64.96 sqrt price\\r\\n  /// @param liquidity The change in liquidity for which to compute the token1 delta\\r\\n  /// @return token1Delta Amount of token1 corresponding to the passed liquidityDelta between the two prices\\r\\n  function getToken1Delta(\\r\\n    uint160 priceLower,\\r\\n    uint160 priceUpper,\\r\\n    int128 liquidity\\r\\n  ) internal pure returns (int256 token1Delta) {\\r\\n    token1Delta = liquidity >= 0\\r\\n      ? getToken1Delta(priceLower, priceUpper, uint128(liquidity), true).toInt256()\\r\\n      : -getToken1Delta(priceLower, priceUpper, uint128(-liquidity), false).toInt256();\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@cryptoalgebra/core/contracts/libraries/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Safe casting methods\\r\\n/// @notice Contains methods for safely casting between types\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/blob/main/contracts/libraries\\r\\nlibrary SafeCast {\\r\\n  /// @notice Cast a uint256 to a uint160, revert on overflow\\r\\n  /// @param y The uint256 to be downcasted\\r\\n  /// @return z The downcasted integer, now type uint160\\r\\n  function toUint160(uint256 y) internal pure returns (uint160 z) {\\r\\n    require((z = uint160(y)) == y);\\r\\n  }\\r\\n\\r\\n  /// @notice Cast a int256 to a int128, revert on overflow or underflow\\r\\n  /// @param y The int256 to be downcasted\\r\\n  /// @return z The downcasted integer, now type int128\\r\\n  function toInt128(int256 y) internal pure returns (int128 z) {\\r\\n    require((z = int128(y)) == y);\\r\\n  }\\r\\n\\r\\n  /// @notice Cast a uint256 to a int256, revert on overflow\\r\\n  /// @param y The uint256 to be casted\\r\\n  /// @return z The casted integer, now type int256\\r\\n  function toInt256(uint256 y) internal pure returns (int256 z) {\\r\\n    require(y < 2**255);\\r\\n    z = int256(y);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@cryptoalgebra/core/contracts/interfaces/pool/IAlgebraPoolImmutables.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport '../IDataStorageOperator.sol';\\r\\n\\r\\n/// @title Pool state that never changes\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraPoolImmutables {\\r\\n  /**\\r\\n   * @notice The contract that stores all the timepoints and can perform actions with them\\r\\n   * @return The operator address\\r\\n   */\\r\\n  function dataStorageOperator() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice The contract that deployed the pool, which must adhere to the IAlgebraFactory interface\\r\\n   * @return The contract address\\r\\n   */\\r\\n  function factory() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice The first of the two tokens of the pool, sorted by address\\r\\n   * @return The token contract address\\r\\n   */\\r\\n  function token0() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice The second of the two tokens of the pool, sorted by address\\r\\n   * @return The token contract address\\r\\n   */\\r\\n  function token1() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @notice The pool tick spacing\\r\\n   * @dev Ticks can only be used at multiples of this value\\r\\n   * e.g.: a tickSpacing of 60 means ticks can be initialized every 60th tick, i.e., ..., -120, -60, 0, 60, 120, ...\\r\\n   * This value is an int24 to avoid casting even though it is always positive.\\r\\n   * @return The tick spacing\\r\\n   */\\r\\n  function tickSpacing() external view returns (int24);\\r\\n\\r\\n  /**\\r\\n   * @notice The maximum amount of position liquidity that can use any tick in the range\\r\\n   * @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\r\\n   * also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\r\\n   * @return The max amount of liquidity per tick\\r\\n   */\\r\\n  function maxLiquidityPerTick() external view returns (uint128);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@cryptoalgebra/core/contracts/interfaces/pool/IAlgebraPoolState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Pool state that can change\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraPoolState {\\r\\n  /**\\r\\n   * @notice The globalState structure in the pool stores many values but requires only one slot\\r\\n   * and is exposed as a single method to save gas when accessed externally.\\r\\n   * @return price The current price of the pool as a sqrt(token1/token0) Q64.96 value;\\r\\n   * Returns tick The current tick of the pool, i.e. according to the last tick transition that was run;\\r\\n   * Returns This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(price) if the price is on a tick\\r\\n   * boundary;\\r\\n   * Returns fee The last pool fee value in hundredths of a bip, i.e. 1e-6;\\r\\n   * Returns timepointIndex The index of the last written timepoint;\\r\\n   * Returns communityFeeToken0 The community fee percentage of the swap fee in thousandths (1e-3) for token0;\\r\\n   * Returns communityFeeToken1 The community fee percentage of the swap fee in thousandths (1e-3) for token1;\\r\\n   * Returns unlocked Whether the pool is currently locked to reentrancy;\\r\\n   */\\r\\n  function globalState()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint160 price,\\r\\n      int24 tick,\\r\\n      uint16 fee,\\r\\n      uint16 timepointIndex,\\r\\n      uint8 communityFeeToken0,\\r\\n      uint8 communityFeeToken1,\\r\\n      bool unlocked\\r\\n    );\\r\\n\\r\\n  /**\\r\\n   * @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\r\\n   * @dev This value can overflow the uint256\\r\\n   */\\r\\n  function totalFeeGrowth0Token() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\r\\n   * @dev This value can overflow the uint256\\r\\n   */\\r\\n  function totalFeeGrowth1Token() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice The currently in range liquidity available to the pool\\r\\n   * @dev This value has no relationship to the total liquidity across all ticks.\\r\\n   * Returned value cannot exceed type(uint128).max\\r\\n   */\\r\\n  function liquidity() external view returns (uint128);\\r\\n\\r\\n  /**\\r\\n   * @notice Look up information about a specific tick in the pool\\r\\n   * @dev This is a public structure, so the `return` natspec tags are omitted.\\r\\n   * @param tick The tick to look up\\r\\n   * @return liquidityTotal the total amount of position liquidity that uses the pool either as tick lower or\\r\\n   * tick upper;\\r\\n   * Returns liquidityDelta how much liquidity changes when the pool price crosses the tick;\\r\\n   * Returns outerFeeGrowth0Token the fee growth on the other side of the tick from the current tick in token0;\\r\\n   * Returns outerFeeGrowth1Token the fee growth on the other side of the tick from the current tick in token1;\\r\\n   * Returns outerTickCumulative the cumulative tick value on the other side of the tick from the current tick;\\r\\n   * Returns outerSecondsPerLiquidity the seconds spent per liquidity on the other side of the tick from the current tick;\\r\\n   * Returns outerSecondsSpent the seconds spent on the other side of the tick from the current tick;\\r\\n   * Returns initialized Set to true if the tick is initialized, i.e. liquidityTotal is greater than 0\\r\\n   * otherwise equal to false. Outside values can only be used if the tick is initialized.\\r\\n   * In addition, these values are only relative and must be used only in comparison to previous snapshots for\\r\\n   * a specific position.\\r\\n   */\\r\\n  function ticks(int24 tick)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint128 liquidityTotal,\\r\\n      int128 liquidityDelta,\\r\\n      uint256 outerFeeGrowth0Token,\\r\\n      uint256 outerFeeGrowth1Token,\\r\\n      int56 outerTickCumulative,\\r\\n      uint160 outerSecondsPerLiquidity,\\r\\n      uint32 outerSecondsSpent,\\r\\n      bool initialized\\r\\n    );\\r\\n\\r\\n  /** @notice Returns 256 packed tick initialized boolean values. See TickTable for more information */\\r\\n  function tickTable(int16 wordPosition) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the information about a position by the position's key\\r\\n   * @dev This is a public mapping of structures, so the `return` natspec tags are omitted.\\r\\n   * @param key The position's key is a hash of a preimage composed by the owner, bottomTick and topTick\\r\\n   * @return liquidityAmount The amount of liquidity in the position;\\r\\n   * Returns lastLiquidityAddTimestamp Timestamp of last adding of liquidity;\\r\\n   * Returns innerFeeGrowth0Token Fee growth of token0 inside the tick range as of the last mint/burn/poke;\\r\\n   * Returns innerFeeGrowth1Token Fee growth of token1 inside the tick range as of the last mint/burn/poke;\\r\\n   * Returns fees0 The computed amount of token0 owed to the position as of the last mint/burn/poke;\\r\\n   * Returns fees1 The computed amount of token1 owed to the position as of the last mint/burn/poke\\r\\n   */\\r\\n  function positions(bytes32 key)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint128 liquidityAmount,\\r\\n      uint32 lastLiquidityAddTimestamp,\\r\\n      uint256 innerFeeGrowth0Token,\\r\\n      uint256 innerFeeGrowth1Token,\\r\\n      uint128 fees0,\\r\\n      uint128 fees1\\r\\n    );\\r\\n\\r\\n  /**\\r\\n   * @notice Returns data about a specific timepoint index\\r\\n   * @param index The element of the timepoints array to fetch\\r\\n   * @dev You most likely want to use #getTimepoints() instead of this method to get an timepoint as of some amount of time\\r\\n   * ago, rather than at a specific index in the array.\\r\\n   * This is a public mapping of structures, so the `return` natspec tags are omitted.\\r\\n   * @return initialized whether the timepoint has been initialized and the values are safe to use;\\r\\n   * Returns blockTimestamp The timestamp of the timepoint;\\r\\n   * Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the timepoint timestamp;\\r\\n   * Returns secondsPerLiquidityCumulative the seconds per in range liquidity for the life of the pool as of the timepoint timestamp;\\r\\n   * Returns volatilityCumulative Cumulative standard deviation for the life of the pool as of the timepoint timestamp;\\r\\n   * Returns averageTick Time-weighted average tick;\\r\\n   * Returns volumePerLiquidityCumulative Cumulative swap volume per liquidity for the life of the pool as of the timepoint timestamp;\\r\\n   */\\r\\n  function timepoints(uint256 index)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      bool initialized,\\r\\n      uint32 blockTimestamp,\\r\\n      int56 tickCumulative,\\r\\n      uint160 secondsPerLiquidityCumulative,\\r\\n      uint88 volatilityCumulative,\\r\\n      int24 averageTick,\\r\\n      uint144 volumePerLiquidityCumulative\\r\\n    );\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the information about active incentive\\r\\n   * @dev if there is no active incentive at the moment, virtualPool,endTimestamp,startTimestamp would be equal to 0\\r\\n   * @return virtualPool The address of a virtual pool associated with the current active incentive\\r\\n   */\\r\\n  function activeIncentive() external view returns (address virtualPool);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the lock time for added liquidity\\r\\n   */\\r\\n  function liquidityCooldown() external view returns (uint32 cooldownInSeconds);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@cryptoalgebra/core/contracts/interfaces/pool/IAlgebraPoolDerivedState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/**\\r\\n * @title Pool state that is not stored\\r\\n * @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\r\\n * blockchain. The functions here may have variable gas costs.\\r\\n * @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n * https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\n */\\r\\ninterface IAlgebraPoolDerivedState {\\r\\n  /**\\r\\n   * @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\r\\n   * @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\r\\n   * the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\r\\n   * you must call it with secondsAgos = [3600, 0].\\r\\n   * @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\r\\n   * log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\r\\n   * @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\r\\n   * @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\r\\n   * @return secondsPerLiquidityCumulatives Cumulative seconds per liquidity-in-range value as of each `secondsAgos`\\r\\n   * from the current block timestamp\\r\\n   * @return volatilityCumulatives Cumulative standard deviation as of each `secondsAgos`\\r\\n   * @return volumePerAvgLiquiditys Cumulative swap volume per liquidity as of each `secondsAgos`\\r\\n   */\\r\\n  function getTimepoints(uint32[] calldata secondsAgos)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      int56[] memory tickCumulatives,\\r\\n      uint160[] memory secondsPerLiquidityCumulatives,\\r\\n      uint112[] memory volatilityCumulatives,\\r\\n      uint256[] memory volumePerAvgLiquiditys\\r\\n    );\\r\\n\\r\\n  /**\\r\\n   * @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\r\\n   * @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\r\\n   * I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\r\\n   * snapshot is taken and the second snapshot is taken.\\r\\n   * @param bottomTick The lower tick of the range\\r\\n   * @param topTick The upper tick of the range\\r\\n   * @return innerTickCumulative The snapshot of the tick accumulator for the range\\r\\n   * @return innerSecondsSpentPerLiquidity The snapshot of seconds per liquidity for the range\\r\\n   * @return innerSecondsSpent The snapshot of the number of seconds during which the price was in this range\\r\\n   */\\r\\n  function getInnerCumulatives(int24 bottomTick, int24 topTick)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      int56 innerTickCumulative,\\r\\n      uint160 innerSecondsSpentPerLiquidity,\\r\\n      uint32 innerSecondsSpent\\r\\n    );\\r\\n}\\r\\n\"\r\n    },\r\n    \"@cryptoalgebra/core/contracts/interfaces/pool/IAlgebraPoolActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Permissionless pool actions\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraPoolActions {\\r\\n  /**\\r\\n   * @notice Sets the initial price for the pool\\r\\n   * @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\r\\n   * @param price the initial sqrt price of the pool as a Q64.96\\r\\n   */\\r\\n  function initialize(uint160 price) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Adds liquidity for the given recipient/bottomTick/topTick position\\r\\n   * @dev The caller of this method receives a callback in the form of IAlgebraMintCallback# AlgebraMintCallback\\r\\n   * in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\r\\n   * on bottomTick, topTick, the amount of liquidity, and the current price.\\r\\n   * @param sender The address which will receive potential surplus of paid tokens\\r\\n   * @param recipient The address for which the liquidity will be created\\r\\n   * @param bottomTick The lower tick of the position in which to add liquidity\\r\\n   * @param topTick The upper tick of the position in which to add liquidity\\r\\n   * @param amount The desired amount of liquidity to mint\\r\\n   * @param data Any data that should be passed through to the callback\\r\\n   * @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\r\\n   * @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\r\\n   * @return liquidityActual The actual minted amount of liquidity\\r\\n   */\\r\\n  function mint(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    int24 bottomTick,\\r\\n    int24 topTick,\\r\\n    uint128 amount,\\r\\n    bytes calldata data\\r\\n  )\\r\\n    external\\r\\n    returns (\\r\\n      uint256 amount0,\\r\\n      uint256 amount1,\\r\\n      uint128 liquidityActual\\r\\n    );\\r\\n\\r\\n  /**\\r\\n   * @notice Collects tokens owed to a position\\r\\n   * @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\r\\n   * Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\r\\n   * amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\r\\n   * actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\r\\n   * @param recipient The address which should receive the fees collected\\r\\n   * @param bottomTick The lower tick of the position for which to collect fees\\r\\n   * @param topTick The upper tick of the position for which to collect fees\\r\\n   * @param amount0Requested How much token0 should be withdrawn from the fees owed\\r\\n   * @param amount1Requested How much token1 should be withdrawn from the fees owed\\r\\n   * @return amount0 The amount of fees collected in token0\\r\\n   * @return amount1 The amount of fees collected in token1\\r\\n   */\\r\\n  function collect(\\r\\n    address recipient,\\r\\n    int24 bottomTick,\\r\\n    int24 topTick,\\r\\n    uint128 amount0Requested,\\r\\n    uint128 amount1Requested\\r\\n  ) external returns (uint128 amount0, uint128 amount1);\\r\\n\\r\\n  /**\\r\\n   * @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\r\\n   * @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\r\\n   * @dev Fees must be collected separately via a call to #collect\\r\\n   * @param bottomTick The lower tick of the position for which to burn liquidity\\r\\n   * @param topTick The upper tick of the position for which to burn liquidity\\r\\n   * @param amount How much liquidity to burn\\r\\n   * @return amount0 The amount of token0 sent to the recipient\\r\\n   * @return amount1 The amount of token1 sent to the recipient\\r\\n   */\\r\\n  function burn(\\r\\n    int24 bottomTick,\\r\\n    int24 topTick,\\r\\n    uint128 amount\\r\\n  ) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n  /**\\r\\n   * @notice Swap token0 for token1, or token1 for token0\\r\\n   * @dev The caller of this method receives a callback in the form of IAlgebraSwapCallback# AlgebraSwapCallback\\r\\n   * @param recipient The address to receive the output of the swap\\r\\n   * @param zeroToOne The direction of the swap, true for token0 to token1, false for token1 to token0\\r\\n   * @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\r\\n   * @param limitSqrtPrice The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\r\\n   * value after the swap. If one for zero, the price cannot be greater than this value after the swap\\r\\n   * @param data Any data to be passed through to the callback. If using the Router it should contain\\r\\n   * SwapRouter#SwapCallbackData\\r\\n   * @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\r\\n   * @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\r\\n   */\\r\\n  function swap(\\r\\n    address recipient,\\r\\n    bool zeroToOne,\\r\\n    int256 amountSpecified,\\r\\n    uint160 limitSqrtPrice,\\r\\n    bytes calldata data\\r\\n  ) external returns (int256 amount0, int256 amount1);\\r\\n\\r\\n  /**\\r\\n   * @notice Swap token0 for token1, or token1 for token0 (tokens that have fee on transfer)\\r\\n   * @dev The caller of this method receives a callback in the form of I AlgebraSwapCallback# AlgebraSwapCallback\\r\\n   * @param sender The address called this function (Comes from the Router)\\r\\n   * @param recipient The address to receive the output of the swap\\r\\n   * @param zeroToOne The direction of the swap, true for token0 to token1, false for token1 to token0\\r\\n   * @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\r\\n   * @param limitSqrtPrice The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\r\\n   * value after the swap. If one for zero, the price cannot be greater than this value after the swap\\r\\n   * @param data Any data to be passed through to the callback. If using the Router it should contain\\r\\n   * SwapRouter#SwapCallbackData\\r\\n   * @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\r\\n   * @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\r\\n   */\\r\\n  function swapSupportingFeeOnInputTokens(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    bool zeroToOne,\\r\\n    int256 amountSpecified,\\r\\n    uint160 limitSqrtPrice,\\r\\n    bytes calldata data\\r\\n  ) external returns (int256 amount0, int256 amount1);\\r\\n\\r\\n  /**\\r\\n   * @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\r\\n   * @dev The caller of this method receives a callback in the form of IAlgebraFlashCallback# AlgebraFlashCallback\\r\\n   * @dev All excess tokens paid in the callback are distributed to liquidity providers as an additional fee. So this method can be used\\r\\n   * to donate underlying tokens to currently in-range liquidity providers by calling with 0 amount{0,1} and sending\\r\\n   * the donation amount(s) from the callback\\r\\n   * @param recipient The address which will receive the token0 and token1 amounts\\r\\n   * @param amount0 The amount of token0 to send\\r\\n   * @param amount1 The amount of token1 to send\\r\\n   * @param data Any data to be passed through to the callback\\r\\n   */\\r\\n  function flash(\\r\\n    address recipient,\\r\\n    uint256 amount0,\\r\\n    uint256 amount1,\\r\\n    bytes calldata data\\r\\n  ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@cryptoalgebra/core/contracts/interfaces/pool/IAlgebraPoolPermissionedActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/**\\r\\n * @title Permissioned pool actions\\r\\n * @notice Contains pool methods that may only be called by the factory owner or tokenomics\\r\\n * @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n * https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\n */\\r\\ninterface IAlgebraPoolPermissionedActions {\\r\\n  /**\\r\\n   * @notice Set the community's % share of the fees. Cannot exceed 25% (250)\\r\\n   * @param communityFee0 new community fee percent for token0 of the pool in thousandths (1e-3)\\r\\n   * @param communityFee1 new community fee percent for token1 of the pool in thousandths (1e-3)\\r\\n   */\\r\\n  function setCommunityFee(uint8 communityFee0, uint8 communityFee1) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets an active incentive\\r\\n   * @param virtualPoolAddress The address of a virtual pool associated with the incentive\\r\\n   */\\r\\n  function setIncentive(address virtualPoolAddress) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Sets new lock time for added liquidity\\r\\n   * @param newLiquidityCooldown The time in seconds\\r\\n   */\\r\\n  function setLiquidityCooldown(uint32 newLiquidityCooldown) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@cryptoalgebra/core/contracts/interfaces/pool/IAlgebraPoolEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Events emitted by a pool\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraPoolEvents {\\r\\n  /**\\r\\n   * @notice Emitted exactly once by a pool when #initialize is first called on the pool\\r\\n   * @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\r\\n   * @param price The initial sqrt price of the pool, as a Q64.96\\r\\n   * @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\r\\n   */\\r\\n  event Initialize(uint160 price, int24 tick);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when liquidity is minted for a given position\\r\\n   * @param sender The address that minted the liquidity\\r\\n   * @param owner The owner of the position and recipient of any minted liquidity\\r\\n   * @param bottomTick The lower tick of the position\\r\\n   * @param topTick The upper tick of the position\\r\\n   * @param liquidityAmount The amount of liquidity minted to the position range\\r\\n   * @param amount0 How much token0 was required for the minted liquidity\\r\\n   * @param amount1 How much token1 was required for the minted liquidity\\r\\n   */\\r\\n  event Mint(\\r\\n    address sender,\\r\\n    address indexed owner,\\r\\n    int24 indexed bottomTick,\\r\\n    int24 indexed topTick,\\r\\n    uint128 liquidityAmount,\\r\\n    uint256 amount0,\\r\\n    uint256 amount1\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when fees are collected by the owner of a position\\r\\n   * @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\r\\n   * @param owner The owner of the position for which fees are collected\\r\\n   * @param recipient The address that received fees\\r\\n   * @param bottomTick The lower tick of the position\\r\\n   * @param topTick The upper tick of the position\\r\\n   * @param amount0 The amount of token0 fees collected\\r\\n   * @param amount1 The amount of token1 fees collected\\r\\n   */\\r\\n  event Collect(address indexed owner, address recipient, int24 indexed bottomTick, int24 indexed topTick, uint128 amount0, uint128 amount1);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when a position's liquidity is removed\\r\\n   * @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\r\\n   * @param owner The owner of the position for which liquidity is removed\\r\\n   * @param bottomTick The lower tick of the position\\r\\n   * @param topTick The upper tick of the position\\r\\n   * @param liquidityAmount The amount of liquidity to remove\\r\\n   * @param amount0 The amount of token0 withdrawn\\r\\n   * @param amount1 The amount of token1 withdrawn\\r\\n   */\\r\\n  event Burn(address indexed owner, int24 indexed bottomTick, int24 indexed topTick, uint128 liquidityAmount, uint256 amount0, uint256 amount1);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted by the pool for any swaps between token0 and token1\\r\\n   * @param sender The address that initiated the swap call, and that received the callback\\r\\n   * @param recipient The address that received the output of the swap\\r\\n   * @param amount0 The delta of the token0 balance of the pool\\r\\n   * @param amount1 The delta of the token1 balance of the pool\\r\\n   * @param price The sqrt(price) of the pool after the swap, as a Q64.96\\r\\n   * @param liquidity The liquidity of the pool after the swap\\r\\n   * @param tick The log base 1.0001 of price of the pool after the swap\\r\\n   */\\r\\n  event Swap(address indexed sender, address indexed recipient, int256 amount0, int256 amount1, uint160 price, uint128 liquidity, int24 tick);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted by the pool for any flashes of token0/token1\\r\\n   * @param sender The address that initiated the swap call, and that received the callback\\r\\n   * @param recipient The address that received the tokens from flash\\r\\n   * @param amount0 The amount of token0 that was flashed\\r\\n   * @param amount1 The amount of token1 that was flashed\\r\\n   * @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\r\\n   * @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\r\\n   */\\r\\n  event Flash(address indexed sender, address indexed recipient, uint256 amount0, uint256 amount1, uint256 paid0, uint256 paid1);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when the community fee is changed by the pool\\r\\n   * @param communityFee0New The updated value of the token0 community fee percent\\r\\n   * @param communityFee1New The updated value of the token1 community fee percent\\r\\n   */\\r\\n  event CommunityFee(uint8 communityFee0New, uint8 communityFee1New);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when new activeIncentive is set\\r\\n   * @param virtualPoolAddress The address of a virtual pool associated with the current active incentive\\r\\n   */\\r\\n  event Incentive(address indexed virtualPoolAddress);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when the fee changes\\r\\n   * @param fee The value of the token fee\\r\\n   */\\r\\n  event Fee(uint16 fee);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when the LiquidityCooldown changes\\r\\n   * @param liquidityCooldown The value of locktime for added liquidity\\r\\n   */\\r\\n  event LiquidityCooldown(uint32 liquidityCooldown);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@cryptoalgebra/core/contracts/interfaces/IDataStorageOperator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport '../libraries/AdaptiveFee.sol';\\r\\n\\r\\ninterface IDataStorageOperator {\\r\\n  event FeeConfiguration(AdaptiveFee.Configuration feeConfig);\\r\\n\\r\\n  /**\\r\\n   * @notice Returns data belonging to a certain timepoint\\r\\n   * @param index The index of timepoint in the array\\r\\n   * @dev There is more convenient function to fetch a timepoint: observe(). Which requires not an index but seconds\\r\\n   * @return initialized Whether the timepoint has been initialized and the values are safe to use,\\r\\n   * blockTimestamp The timestamp of the observation,\\r\\n   * tickCumulative The tick multiplied by seconds elapsed for the life of the pool as of the timepoint timestamp,\\r\\n   * secondsPerLiquidityCumulative The seconds per in range liquidity for the life of the pool as of the timepoint timestamp,\\r\\n   * volatilityCumulative Cumulative standard deviation for the life of the pool as of the timepoint timestamp,\\r\\n   * averageTick Time-weighted average tick,\\r\\n   * volumePerLiquidityCumulative Cumulative swap volume per liquidity for the life of the pool as of the timepoint timestamp\\r\\n   */\\r\\n  function timepoints(uint256 index)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      bool initialized,\\r\\n      uint32 blockTimestamp,\\r\\n      int56 tickCumulative,\\r\\n      uint160 secondsPerLiquidityCumulative,\\r\\n      uint88 volatilityCumulative,\\r\\n      int24 averageTick,\\r\\n      uint144 volumePerLiquidityCumulative\\r\\n    );\\r\\n\\r\\n  /// @notice Initialize the dataStorage array by writing the first slot. Called once for the lifecycle of the timepoints array\\r\\n  /// @param time The time of the dataStorage initialization, via block.timestamp truncated to uint32\\r\\n  /// @param tick Initial tick\\r\\n  function initialize(uint32 time, int24 tick) external;\\r\\n\\r\\n  /// @dev Reverts if an timepoint at or before the desired timepoint timestamp does not exist.\\r\\n  /// 0 may be passed as `secondsAgo' to return the current cumulative values.\\r\\n  /// If called with a timestamp falling between two timepoints, returns the counterfactual accumulator values\\r\\n  /// at exactly the timestamp between the two timepoints.\\r\\n  /// @param time The current block timestamp\\r\\n  /// @param secondsAgo The amount of time to look back, in seconds, at which point to return an timepoint\\r\\n  /// @param tick The current tick\\r\\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\\r\\n  /// @param liquidity The current in-range pool liquidity\\r\\n  /// @return tickCumulative The cumulative tick since the pool was first initialized, as of `secondsAgo`\\r\\n  /// @return secondsPerLiquidityCumulative The cumulative seconds / max(1, liquidity) since the pool was first initialized, as of `secondsAgo`\\r\\n  /// @return volatilityCumulative The cumulative volatility value since the pool was first initialized, as of `secondsAgo`\\r\\n  /// @return volumePerAvgLiquidity The cumulative volume per liquidity value since the pool was first initialized, as of `secondsAgo`\\r\\n  function getSingleTimepoint(\\r\\n    uint32 time,\\r\\n    uint32 secondsAgo,\\r\\n    int24 tick,\\r\\n    uint16 index,\\r\\n    uint128 liquidity\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      int56 tickCumulative,\\r\\n      uint160 secondsPerLiquidityCumulative,\\r\\n      uint112 volatilityCumulative,\\r\\n      uint256 volumePerAvgLiquidity\\r\\n    );\\r\\n\\r\\n  /// @notice Returns the accumulator values as of each time seconds ago from the given time in the array of `secondsAgos`\\r\\n  /// @dev Reverts if `secondsAgos` > oldest timepoint\\r\\n  /// @param time The current block.timestamp\\r\\n  /// @param secondsAgos Each amount of time to look back, in seconds, at which point to return an timepoint\\r\\n  /// @param tick The current tick\\r\\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\\r\\n  /// @param liquidity The current in-range pool liquidity\\r\\n  /// @return tickCumulatives The cumulative tick since the pool was first initialized, as of each `secondsAgo`\\r\\n  /// @return secondsPerLiquidityCumulatives The cumulative seconds / max(1, liquidity) since the pool was first initialized, as of each `secondsAgo`\\r\\n  /// @return volatilityCumulatives The cumulative volatility values since the pool was first initialized, as of each `secondsAgo`\\r\\n  /// @return volumePerAvgLiquiditys The cumulative volume per liquidity values since the pool was first initialized, as of each `secondsAgo`\\r\\n  function getTimepoints(\\r\\n    uint32 time,\\r\\n    uint32[] memory secondsAgos,\\r\\n    int24 tick,\\r\\n    uint16 index,\\r\\n    uint128 liquidity\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      int56[] memory tickCumulatives,\\r\\n      uint160[] memory secondsPerLiquidityCumulatives,\\r\\n      uint112[] memory volatilityCumulatives,\\r\\n      uint256[] memory volumePerAvgLiquiditys\\r\\n    );\\r\\n\\r\\n  /// @notice Returns average volatility in the range from time-WINDOW to time\\r\\n  /// @param time The current block.timestamp\\r\\n  /// @param tick The current tick\\r\\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\\r\\n  /// @param liquidity The current in-range pool liquidity\\r\\n  /// @return TWVolatilityAverage The average volatility in the recent range\\r\\n  /// @return TWVolumePerLiqAverage The average volume per liquidity in the recent range\\r\\n  function getAverages(\\r\\n    uint32 time,\\r\\n    int24 tick,\\r\\n    uint16 index,\\r\\n    uint128 liquidity\\r\\n  ) external view returns (uint112 TWVolatilityAverage, uint256 TWVolumePerLiqAverage);\\r\\n\\r\\n  /// @notice Writes an dataStorage timepoint to the array\\r\\n  /// @dev Writable at most once per block. Index represents the most recently written element. index must be tracked externally.\\r\\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\\r\\n  /// @param blockTimestamp The timestamp of the new timepoint\\r\\n  /// @param tick The active tick at the time of the new timepoint\\r\\n  /// @param liquidity The total in-range liquidity at the time of the new timepoint\\r\\n  /// @param volumePerLiquidity The gmean(volumes)/liquidity at the time of the new timepoint\\r\\n  /// @return indexUpdated The new index of the most recently written element in the dataStorage array\\r\\n  function write(\\r\\n    uint16 index,\\r\\n    uint32 blockTimestamp,\\r\\n    int24 tick,\\r\\n    uint128 liquidity,\\r\\n    uint128 volumePerLiquidity\\r\\n  ) external returns (uint16 indexUpdated);\\r\\n\\r\\n  /// @notice Changes fee configuration for the pool\\r\\n  function changeFeeConfiguration(AdaptiveFee.Configuration calldata feeConfig) external;\\r\\n\\r\\n  /// @notice Calculates gmean(volume/liquidity) for block\\r\\n  /// @param liquidity The current in-range pool liquidity\\r\\n  /// @param amount0 Total amount of swapped token0\\r\\n  /// @param amount1 Total amount of swapped token1\\r\\n  /// @return volumePerLiquidity gmean(volume/liquidity) capped by 100000 << 64\\r\\n  function calculateVolumePerLiquidity(\\r\\n    uint128 liquidity,\\r\\n    int256 amount0,\\r\\n    int256 amount1\\r\\n  ) external pure returns (uint128 volumePerLiquidity);\\r\\n\\r\\n  /// @return windowLength Length of window used to calculate averages\\r\\n  function window() external view returns (uint32 windowLength);\\r\\n\\r\\n  /// @notice Calculates fee based on combination of sigmoids\\r\\n  /// @param time The current block.timestamp\\r\\n  /// @param tick The current tick\\r\\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\\r\\n  /// @param liquidity The current in-range pool liquidity\\r\\n  /// @return fee The fee in hundredths of a bip, i.e. 1e-6\\r\\n  function getFee(\\r\\n    uint32 time,\\r\\n    int24 tick,\\r\\n    uint16 index,\\r\\n    uint128 liquidity\\r\\n  ) external view returns (uint16 fee);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@cryptoalgebra/core/contracts/libraries/AdaptiveFee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity =0.7.6;\\r\\n\\r\\nimport './Constants.sol';\\r\\n\\r\\n/// @title AdaptiveFee\\r\\n/// @notice Calculates fee based on combination of sigmoids\\r\\nlibrary AdaptiveFee {\\r\\n  // alpha1 + alpha2 + baseFee must be <= type(uint16).max\\r\\n  struct Configuration {\\r\\n    uint16 alpha1; // max value of the first sigmoid\\r\\n    uint16 alpha2; // max value of the second sigmoid\\r\\n    uint32 beta1; // shift along the x-axis for the first sigmoid\\r\\n    uint32 beta2; // shift along the x-axis for the second sigmoid\\r\\n    uint16 gamma1; // horizontal stretch factor for the first sigmoid\\r\\n    uint16 gamma2; // horizontal stretch factor for the second sigmoid\\r\\n    uint32 volumeBeta; // shift along the x-axis for the outer volume-sigmoid\\r\\n    uint16 volumeGamma; // horizontal stretch factor the outer volume-sigmoid\\r\\n    uint16 baseFee; // minimum possible fee\\r\\n  }\\r\\n\\r\\n  /// @notice Calculates fee based on formula:\\r\\n  /// baseFee + sigmoidVolume(sigmoid1(volatility, volumePerLiquidity) + sigmoid2(volatility, volumePerLiquidity))\\r\\n  /// maximum value capped by baseFee + alpha1 + alpha2\\r\\n  function getFee(\\r\\n    uint88 volatility,\\r\\n    uint256 volumePerLiquidity,\\r\\n    Configuration memory config\\r\\n  ) internal pure returns (uint16 fee) {\\r\\n    uint256 sumOfSigmoids = sigmoid(volatility, config.gamma1, config.alpha1, config.beta1) +\\r\\n      sigmoid(volatility, config.gamma2, config.alpha2, config.beta2);\\r\\n\\r\\n    if (sumOfSigmoids > type(uint16).max) {\\r\\n      // should be impossible, just in case\\r\\n      sumOfSigmoids = type(uint16).max;\\r\\n    }\\r\\n\\r\\n    return uint16(config.baseFee + sigmoid(volumePerLiquidity, config.volumeGamma, uint16(sumOfSigmoids), config.volumeBeta)); // safe since alpha1 + alpha2 + baseFee _must_ be <= type(uint16).max\\r\\n  }\\r\\n\\r\\n  /// @notice calculates \u03b1 / (1 + e^( (\u03b2-x) / \u03b3))\\r\\n  /// that is a sigmoid with a maximum value of \u03b1, x-shifted by \u03b2, and stretched by \u03b3\\r\\n  /// @dev returns uint256 for fuzzy testing. Guaranteed that the result is not greater than alpha\\r\\n  function sigmoid(\\r\\n    uint256 x,\\r\\n    uint16 g,\\r\\n    uint16 alpha,\\r\\n    uint256 beta\\r\\n  ) internal pure returns (uint256 res) {\\r\\n    if (x > beta) {\\r\\n      x = x - beta;\\r\\n      if (x >= 6 * uint256(g)) return alpha; // so x < 19 bits\\r\\n      uint256 g8 = uint256(g)**8; // < 128 bits (8*16)\\r\\n      uint256 ex = exp(x, g, g8); // < 155 bits\\r\\n      res = (alpha * ex) / (g8 + ex); // in worst case: (16 + 155 bits) / 155 bits\\r\\n      // so res <= alpha\\r\\n    } else {\\r\\n      x = beta - x;\\r\\n      if (x >= 6 * uint256(g)) return 0; // so x < 19 bits\\r\\n      uint256 g8 = uint256(g)**8; // < 128 bits (8*16)\\r\\n      uint256 ex = g8 + exp(x, g, g8); // < 156 bits\\r\\n      res = (alpha * g8) / ex; // in worst case: (16 + 128 bits) / 156 bits\\r\\n      // g8 <= ex, so res <= alpha\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice calculates e^(x/g) * g^8 in a series, since (around zero):\\r\\n  /// e^x = 1 + x + x^2/2 + ... + x^n/n! + ...\\r\\n  /// e^(x/g) = 1 + x/g + x^2/(2*g^2) + ... + x^(n)/(g^n * n!) + ...\\r\\n  function exp(\\r\\n    uint256 x,\\r\\n    uint16 g,\\r\\n    uint256 gHighestDegree\\r\\n  ) internal pure returns (uint256 res) {\\r\\n    // calculating:\\r\\n    // g**8 + x * g**7 + (x**2 * g**6) / 2 + (x**3 * g**5) / 6 + (x**4 * g**4) / 24 + (x**5 * g**3) / 120 + (x**6 * g^2) / 720 + x**7 * g / 5040 + x**8 / 40320\\r\\n\\r\\n    // x**8 < 152 bits (19*8) and g**8 < 128 bits (8*16)\\r\\n    // so each summand < 152 bits and res < 155 bits\\r\\n    uint256 xLowestDegree = x;\\r\\n    res = gHighestDegree; // g**8\\r\\n\\r\\n    gHighestDegree /= g; // g**7\\r\\n    res += xLowestDegree * gHighestDegree;\\r\\n\\r\\n    gHighestDegree /= g; // g**6\\r\\n    xLowestDegree *= x; // x**2\\r\\n    res += (xLowestDegree * gHighestDegree) / 2;\\r\\n\\r\\n    gHighestDegree /= g; // g**5\\r\\n    xLowestDegree *= x; // x**3\\r\\n    res += (xLowestDegree * gHighestDegree) / 6;\\r\\n\\r\\n    gHighestDegree /= g; // g**4\\r\\n    xLowestDegree *= x; // x**4\\r\\n    res += (xLowestDegree * gHighestDegree) / 24;\\r\\n\\r\\n    gHighestDegree /= g; // g**3\\r\\n    xLowestDegree *= x; // x**5\\r\\n    res += (xLowestDegree * gHighestDegree) / 120;\\r\\n\\r\\n    gHighestDegree /= g; // g**2\\r\\n    xLowestDegree *= x; // x**6\\r\\n    res += (xLowestDegree * gHighestDegree) / 720;\\r\\n\\r\\n    xLowestDegree *= x; // x**7\\r\\n    res += (xLowestDegree * g) / 5040 + (xLowestDegree * x) / (40320);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/drafts/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\\n     * given `owner`'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../math/SafeMath.sol\\\";\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\\n * directly accessed.\\n */\\nlibrary Counters {\\n    using SafeMath for uint256;\\n\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\\n        counter._value += 1;\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        counter._value = counter._value.sub(1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/drafts/EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = _getChainId();\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view virtual returns (bytes32) {\\n        if (_getChainId() == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                typeHash,\\n                name,\\n                version,\\n                _getChainId(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _domainSeparatorV4(), structHash));\\n    }\\n\\n    function _getChainId() private view returns (uint256 chainId) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_unipilotFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"CompoundFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpShares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isReadjustLiquidity\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees1\",\"type\":\"uint256\"}],\"name\":\"FeesSnapshot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserves0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserves1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees1\",\"type\":\"uint256\"}],\"name\":\"PullLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0Owed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Owed\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"algebraMintCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"algebraSwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Desired\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPositionDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees1\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"baseLiquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rangeLiquidity\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"swapBP\",\"type\":\"uint8\"}],\"name\":\"readjustLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticksData\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"baseTickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"baseTickUpper\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"rangeTickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"rangeTickUpper\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"refundAsETH\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "UnipilotPassiveVault", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "10", "ConstructorArguments": "00000000000000000000000055caabb0d2b704fd0ef8192a7e35d8837e678207000000000000000000000000bd712d4dbd4b8d0cd2a98adb0f9fc2928031b16f0000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf127000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020556e6970696c6f7420555344432f574554482050617373697665205661756c740000000000000000000000000000000000000000000000000000000000000010554c502d555344432f574554482d505600000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}