{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/swapGateway/SwapRouterLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.13;\\r\\npragma abicoder v2;\\r\\n\\r\\nlibrary SwapRouterLib {\\r\\n    uint256 private constant BASE = 10**18;\\r\\n\\r\\n    /**\\r\\n     * @notice Generate abi.encodePacked path for UniswapV3/PcsV3 multihop swap\\r\\n     * @param tokens list of tokens\\r\\n     * @param fees list of pool fees\\r\\n     */\\r\\n    function generateEncodedPathWithFee(\\r\\n        address[] memory tokens,\\r\\n        uint24[] memory fees\\r\\n    ) public pure returns (bytes memory) {\\r\\n        require(tokens.length == fees.length + 1, \\\"SG3\\\");\\r\\n\\r\\n        bytes memory path = new bytes(0);\\r\\n\\r\\n        for (uint256 i = 0; i < fees.length; i++) {\\r\\n            path = abi.encodePacked(path, tokens[i], fees[i]);\\r\\n        }\\r\\n\\r\\n        path = abi.encodePacked(path, tokens[tokens.length - 1]);\\r\\n\\r\\n        return path;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Generate abi.encodePacked path for QuickswapV3 multihop swap\\r\\n     * @param tokens list of tokens\\r\\n     */\\r\\n    function generateEncodedPath(address[] memory tokens)\\r\\n        public\\r\\n        pure\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        bytes memory path = new bytes(0);\\r\\n\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            path = abi.encodePacked(path, tokens[i]);\\r\\n        }\\r\\n\\r\\n        return path;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate UniswapV3 price quote\\r\\n     * @param tokenIn Address of token input\\r\\n     * @param baseToken Base token of pool\\r\\n     * @param price slot0 of pool\\r\\n     * @return amountOut calculated result\\r\\n     */\\r\\n    function calcUniswapV3Quote(\\r\\n        address tokenIn,\\r\\n        address baseToken,\\r\\n        uint160 price\\r\\n    ) public pure returns (uint256 amountOut) {\\r\\n        if (tokenIn == baseToken) {\\r\\n            if (price > 10**29) {\\r\\n                amountOut = ((price * 10**9) / 2**96)**2;\\r\\n            } else {\\r\\n                amountOut = (uint256(price)**2 * BASE) / (2**192);\\r\\n            }\\r\\n        } else {\\r\\n            if (price > 10**35) {\\r\\n                amountOut = ((2**96 * 10**9) / (price))**2;\\r\\n            } else {\\r\\n                amountOut = (2**192 * BASE) / (uint256(price)**2);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"price\",\"type\":\"uint160\"}],\"name\":\"calcUniswapV3Quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"generateEncodedPath\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint24[]\",\"name\":\"fees\",\"type\":\"uint24[]\"}],\"name\":\"generateEncodedPathWithFee\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "SwapRouterLib", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}