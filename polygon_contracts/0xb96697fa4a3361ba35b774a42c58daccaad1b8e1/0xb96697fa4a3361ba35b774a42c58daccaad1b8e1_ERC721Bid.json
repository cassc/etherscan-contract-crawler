{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/bid/ERC721Bid.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../commons/Ownable.sol\\\";\\nimport \\\"../commons/Pausable.sol\\\";\\nimport \\\"../commons/ContextMixin.sol\\\";\\nimport \\\"../commons/NativeMetaTransaction.sol\\\";\\nimport \\\"./ERC721BidStorage.sol\\\";\\n\\n\\ncontract ERC721Bid is Ownable, Pausable, ERC721BidStorage, NativeMetaTransaction {\\n    using Address for address;\\n\\n    /**\\n    * @dev Constructor of the contract.\\n    * @param _owner - owner\\n    * @param _feesCollector - fees collector\\n    * @param _manaToken - Address of the ERC20 accepted for this marketplace\\n    * @param _royaltiesManager - Royalties manager contract\\n    * @param _feesCollectorCutPerMillion - fees collector cut per million\\n    * @param _royaltiesCutPerMillion - royalties cut per million\\n    */\\n    constructor(\\n        address _owner,\\n        address _feesCollector,\\n        address _manaToken,\\n        IRoyaltiesManager _royaltiesManager,\\n        uint256 _feesCollectorCutPerMillion,\\n        uint256 _royaltiesCutPerMillion\\n    ) Pausable() {\\n         // EIP712 init\\n        _initializeEIP712('Decentraland Bid', '2');\\n\\n        // Address init\\n        setFeesCollector(_feesCollector);\\n        setRoyaltiesManager(_royaltiesManager);\\n\\n        // Fee init\\n        setFeesCollectorCutPerMillion(_feesCollectorCutPerMillion);\\n        setRoyaltiesCutPerMillion(_royaltiesCutPerMillion);\\n\\n        manaToken = ERC20Interface(_manaToken);\\n        // Set owner\\n        transferOwnership(_owner);\\n    }\\n\\n    /**\\n    * @dev Place a bid for an ERC721 token.\\n    * @param _tokenAddress - address of the ERC721 token\\n    * @param _tokenId - uint256 of the token id\\n    * @param _price - uint256 of the price for the bid\\n    * @param _duration - uint256 of the duration in seconds for the bid\\n    */\\n    function placeBid(\\n        address _tokenAddress,\\n        uint256 _tokenId,\\n        uint256 _price,\\n        uint256 _duration\\n    )\\n        public\\n    {\\n        _placeBid(\\n            _tokenAddress,\\n            _tokenId,\\n            _price,\\n            _duration,\\n            \\\"\\\"\\n        );\\n    }\\n\\n    /**\\n    * @dev Place a bid for an ERC721 token with fingerprint.\\n    * @param _tokenAddress - address of the ERC721 token\\n    * @param _tokenId - uint256 of the token id\\n    * @param _price - uint256 of the price for the bid\\n    * @param _duration - uint256 of the duration in seconds for the bid\\n    * @param _fingerprint - bytes of ERC721 token fingerprint\\n    */\\n    function placeBid(\\n        address _tokenAddress,\\n        uint256 _tokenId,\\n        uint256 _price,\\n        uint256 _duration,\\n        bytes memory _fingerprint\\n    )\\n        public\\n    {\\n        _placeBid(\\n            _tokenAddress,\\n            _tokenId,\\n            _price,\\n            _duration,\\n            _fingerprint\\n        );\\n    }\\n\\n    /**\\n    * @dev Place a bid for an ERC721 token with fingerprint.\\n    * @notice Tokens can have multiple bids by different users.\\n    * Users can have only one bid per token.\\n    * If the user places a bid and has an active bid for that token,\\n    * the older one will be replaced with the new one.\\n    * @param _tokenAddress - address of the ERC721 token\\n    * @param _tokenId - uint256 of the token id\\n    * @param _price - uint256 of the price for the bid\\n    * @param _duration - uint256 of the duration in seconds for the bid\\n    * @param _fingerprint - bytes of ERC721 token fingerprint\\n    */\\n    function _placeBid(\\n        address _tokenAddress,\\n        uint256 _tokenId,\\n        uint256 _price,\\n        uint256 _duration,\\n        bytes memory _fingerprint\\n    )\\n        private\\n        whenNotPaused()\\n    {\\n        _requireERC721(_tokenAddress);\\n        _requireComposableERC721(_tokenAddress, _tokenId, _fingerprint);\\n        address sender = _msgSender();\\n\\n        require(_price > 0, \\\"ERC721Bid#_placeBid: PRICE_MUST_BE_GT_0\\\");\\n\\n        _requireBidderBalance(sender, _price);\\n\\n        require(\\n            _duration >= MIN_BID_DURATION,\\n            \\\"ERC721Bid#_placeBid: DURATION_MUST_BE_GTE_MIN_BID_DURATION\\\"\\n        );\\n\\n        require(\\n            _duration <= MAX_BID_DURATION,\\n            \\\"ERC721Bid#_placeBid: DURATION_MUST_BE_LTE_MAX_BID_DURATION\\\"\\n        );\\n\\n        ERC721Interface token = ERC721Interface(_tokenAddress);\\n        address tokenOwner = token.ownerOf(_tokenId);\\n        require(\\n            tokenOwner != address(0) && tokenOwner != sender,\\n            \\\"ERC721Bid#_placeBid: ALREADY_OWNED_TOKEN\\\"\\n        );\\n\\n        uint256 expiresAt = block.timestamp + _duration;\\n\\n        bytes32 bidId = keccak256(\\n            abi.encodePacked(\\n                block.timestamp,\\n                sender,\\n                _tokenAddress,\\n                _tokenId,\\n                _price,\\n                _duration,\\n                _fingerprint\\n            )\\n        );\\n\\n        uint256 bidIndex;\\n\\n        if (_bidderHasABid(_tokenAddress, _tokenId, sender)) {\\n            bytes32 oldBidId;\\n            (bidIndex, oldBidId,,,) = getBidByBidder(_tokenAddress, _tokenId, sender);\\n\\n            // Delete old bid reference\\n            delete bidIndexByBidId[oldBidId];\\n        } else {\\n            // Use the bid counter to assign the index if there is not an active bid.\\n            bidIndex = bidCounterByToken[_tokenAddress][_tokenId];\\n            // Increase bid counter\\n            bidCounterByToken[_tokenAddress][_tokenId]++;\\n        }\\n\\n        // Set bid references\\n        bidIdByTokenAndBidder[_tokenAddress][_tokenId][sender] = bidId;\\n        bidIndexByBidId[bidId] = bidIndex;\\n\\n        // Save Bid\\n        bidsByToken[_tokenAddress][_tokenId][bidIndex] = Bid({\\n            id: bidId,\\n            bidder: sender,\\n            tokenAddress: _tokenAddress,\\n            tokenId: _tokenId,\\n            price: _price,\\n            expiresAt: expiresAt,\\n            fingerprint: _fingerprint\\n        });\\n\\n        emit BidCreated(\\n            bidId,\\n            _tokenAddress,\\n            _tokenId,\\n            sender,\\n            _price,\\n            expiresAt,\\n            _fingerprint\\n        );\\n    }\\n\\n    /**\\n    * @dev Used as the only way to accept a bid.\\n    * The token owner should send the token to this contract using safeTransferFrom.\\n    * The last parameter (bytes) should be the bid id.\\n    * @notice  The ERC721 smart contract calls this function on the recipient\\n    * after a `safetransfer`. This function MAY throw to revert and reject the\\n    * transfer. Return of other than the magic value MUST result in the\\n    * transaction being reverted.\\n    * Note:\\n    * Contract address is always the message sender.\\n    * This method should be seen as 'acceptBid'.\\n    * It validates that the bid id matches an active bid for the bid token.\\n    * @param _from The address which previously owned the token\\n    * @param _tokenId The NFT identifier which is being transferred\\n    * @param _data Additional data with no specified format\\n    * @return `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    */\\n    function onERC721Received(\\n        address _from,\\n        address /*_to*/,\\n        uint256 _tokenId,\\n        bytes memory _data\\n    )\\n        public\\n        whenNotPaused()\\n        returns (bytes4)\\n    {\\n        bytes32 bidId = _bytesToBytes32(_data);\\n        uint256 bidIndex = bidIndexByBidId[bidId];\\n\\n        Bid memory bid = _getBid(msg.sender, _tokenId, bidIndex);\\n\\n        // Check if the bid is valid.\\n        require(\\n            // solium-disable-next-line operator-whitespace\\n            bid.id == bidId &&\\n            bid.expiresAt >= block.timestamp,\\n            \\\"ERC721Bid#onERC721Received: INVALID_BID\\\"\\n        );\\n\\n        address bidder = bid.bidder;\\n        uint256 price = bid.price;\\n\\n        // Check fingerprint if necessary\\n        _requireComposableERC721(msg.sender, _tokenId, bid.fingerprint);\\n\\n        // Check if bidder has funds\\n        _requireBidderBalance(bidder, price);\\n\\n        // Delete bid references from contract storage\\n        delete bidsByToken[msg.sender][_tokenId][bidIndex];\\n        delete bidIndexByBidId[bidId];\\n        delete bidIdByTokenAndBidder[msg.sender][_tokenId][bidder];\\n\\n        // Reset bid counter to invalidate other bids placed for the token\\n        delete bidCounterByToken[msg.sender][_tokenId];\\n\\n        // Transfer token to bidder\\n        ERC721Interface(msg.sender).transferFrom(address(this), bidder, _tokenId);\\n\\n        uint256 feesCollectorShareAmount;\\n        uint256 royaltiesShareAmount;\\n        address royaltiesReceiver;\\n\\n        // Royalties share\\n        if (royaltiesCutPerMillion > 0) {\\n            royaltiesShareAmount = (price * royaltiesCutPerMillion) / ONE_MILLION;\\n\\n            (bool success, bytes memory res) = address(royaltiesManager).staticcall(\\n                abi.encodeWithSelector(\\n                    royaltiesManager.getRoyaltiesReceiver.selector,\\n                    msg.sender,\\n                    _tokenId\\n                )\\n            );\\n\\n            if (success) {\\n                (royaltiesReceiver) = abi.decode(res, (address));\\n                if (royaltiesReceiver != address(0)) {\\n                require(\\n                    manaToken.transferFrom(bidder, royaltiesReceiver, royaltiesShareAmount),\\n                    \\\"ERC721Bid#onERC721Received: TRANSFER_FEES_TO_ROYALTIES_RECEIVER_FAILED\\\"\\n                );\\n                }\\n            }\\n        }\\n\\n        // Fees collector share\\n        {\\n            feesCollectorShareAmount = (price * feesCollectorCutPerMillion) / ONE_MILLION;\\n            uint256 totalFeeCollectorShareAmount = feesCollectorShareAmount;\\n\\n            if (royaltiesShareAmount > 0 && royaltiesReceiver == address(0)) {\\n                totalFeeCollectorShareAmount += royaltiesShareAmount;\\n            }\\n\\n            if (totalFeeCollectorShareAmount > 0) {\\n                require(\\n                    manaToken.transferFrom(bidder, feesCollector, totalFeeCollectorShareAmount),\\n                    \\\"ERC721Bid#onERC721Received: TRANSFER_FEES_TO_FEES_COLLECTOR_FAILED\\\"\\n                );\\n            }\\n        }\\n\\n        // Transfer MANA from bidder to seller\\n        require(\\n            manaToken.transferFrom(bidder, _from, price - royaltiesShareAmount - feesCollectorShareAmount),\\n            \\\"ERC721Bid#onERC721Received:: TRANSFER_AMOUNT_TO_TOKEN_OWNER_FAILED\\\"\\n        );\\n\\n        emit BidAccepted(\\n            bidId,\\n            msg.sender,\\n            _tokenId,\\n            bidder,\\n            _from,\\n            price,\\n            royaltiesShareAmount + feesCollectorShareAmount\\n        );\\n\\n        return ERC721_Received;\\n    }\\n\\n    /**\\n    * @dev Remove expired bids\\n    * @param _tokenAddresses - address[] of the ERC721 tokens\\n    * @param _tokenIds - uint256[] of the token ids\\n    * @param _bidders - address[] of the bidders\\n    */\\n    function removeExpiredBids(address[] memory _tokenAddresses, uint256[] memory _tokenIds, address[] memory _bidders)\\n    public\\n    {\\n        uint256 loopLength = _tokenAddresses.length;\\n\\n        require(\\n            loopLength == _tokenIds.length && loopLength == _bidders.length ,\\n            \\\"ERC721Bid#removeExpiredBids: LENGHT_MISMATCH\\\"\\n        );\\n\\n        for (uint256 i = 0; i < loopLength; i++) {\\n            _removeExpiredBid(_tokenAddresses[i], _tokenIds[i], _bidders[i]);\\n        }\\n    }\\n\\n    /**\\n    * @dev Remove expired bid\\n    * @param _tokenAddress - address of the ERC721 token\\n    * @param _tokenId - uint256 of the token id\\n    * @param _bidder - address of the bidder\\n    */\\n    function _removeExpiredBid(address _tokenAddress, uint256 _tokenId, address _bidder)\\n    internal\\n    {\\n        (uint256 bidIndex, bytes32 bidId,,,uint256 expiresAt) = getBidByBidder(\\n            _tokenAddress,\\n            _tokenId,\\n            _bidder\\n        );\\n\\n        require(expiresAt < block.timestamp, \\\"ERC721Bid#_removeExpiredBid: BID_NOT_EXPIRED\\\");\\n\\n        _cancelBid(\\n            bidIndex,\\n            bidId,\\n            _tokenAddress,\\n            _tokenId,\\n            _bidder\\n        );\\n    }\\n\\n    /**\\n    * @dev Cancel a bid for an ERC721 token\\n    * @param _tokenAddress - address of the ERC721 token\\n    * @param _tokenId - uint256 of the token id\\n    */\\n    function cancelBid(address _tokenAddress, uint256 _tokenId) public whenNotPaused() {\\n        address sender = _msgSender();\\n        // Get active bid\\n        (uint256 bidIndex, bytes32 bidId,,,) = getBidByBidder(\\n            _tokenAddress,\\n            _tokenId,\\n            sender\\n        );\\n\\n        _cancelBid(\\n            bidIndex,\\n            bidId,\\n            _tokenAddress,\\n            _tokenId,\\n            sender\\n        );\\n    }\\n\\n    /**\\n    * @dev Cancel a bid for an ERC721 token\\n    * @param _bidIndex - uint256 of the index of the bid\\n    * @param _bidId - bytes32 of the bid id\\n    * @param _tokenAddress - address of the ERC721 token\\n    * @param _tokenId - uint256 of the token id\\n    * @param _bidder - address of the bidder\\n    */\\n    function _cancelBid(\\n        uint256 _bidIndex,\\n        bytes32 _bidId,\\n        address _tokenAddress,\\n        uint256 _tokenId,\\n        address _bidder\\n    )\\n        internal\\n    {\\n        // Delete bid references\\n        delete bidIndexByBidId[_bidId];\\n        delete bidIdByTokenAndBidder[_tokenAddress][_tokenId][_bidder];\\n\\n        // Check if the bid is at the end of the mapping\\n        uint256 lastBidIndex = bidCounterByToken[_tokenAddress][_tokenId] - 1;\\n        if (lastBidIndex != _bidIndex) {\\n            // Move last bid to the removed place\\n            Bid storage lastBid = bidsByToken[_tokenAddress][_tokenId][lastBidIndex];\\n            bidsByToken[_tokenAddress][_tokenId][_bidIndex] = lastBid;\\n            bidIndexByBidId[lastBid.id] = _bidIndex;\\n        }\\n\\n        // Delete empty index\\n        delete bidsByToken[_tokenAddress][_tokenId][lastBidIndex];\\n\\n        // Decrease bids counter\\n        bidCounterByToken[_tokenAddress][_tokenId]--;\\n\\n        // emit BidCancelled event\\n        emit BidCancelled(\\n            _bidId,\\n            _tokenAddress,\\n            _tokenId,\\n            _bidder\\n        );\\n    }\\n\\n     /**\\n    * @dev Check if the bidder has a bid for an specific token.\\n    * @param _tokenAddress - address of the ERC721 token\\n    * @param _tokenId - uint256 of the token id\\n    * @param _bidder - address of the bidder\\n    * @return bool whether the bidder has an active bid\\n    */\\n    function _bidderHasABid(address _tokenAddress, uint256 _tokenId, address _bidder)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bytes32 bidId = bidIdByTokenAndBidder[_tokenAddress][_tokenId][_bidder];\\n        uint256 bidIndex = bidIndexByBidId[bidId];\\n        // Bid index should be inside bounds\\n        if (bidIndex < bidCounterByToken[_tokenAddress][_tokenId]) {\\n            Bid memory bid = bidsByToken[_tokenAddress][_tokenId][bidIndex];\\n            return bid.bidder == _bidder;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n    * @dev Get the active bid id and index by a bidder and an specific token.\\n    * @notice If the bidder has not a valid bid, the transaction will be reverted.\\n    * @param _tokenAddress - address of the ERC721 token\\n    * @param _tokenId - uint256 of the token id\\n    * @param _bidder - address of the bidder\\n    * @return bidIndex - uint256 of the bid index to be used within bidsByToken mapping\\n    * @return bidId - bytes32 of the bid id\\n    * @return bidder - address of the bidder address\\n    * @return price - uint256 of the bid price\\n    * @return expiresAt - uint256 of the expiration time\\n    */\\n    function getBidByBidder(address _tokenAddress, uint256 _tokenId, address _bidder)\\n        public\\n        view\\n        returns (\\n            uint256 bidIndex,\\n            bytes32 bidId,\\n            address bidder,\\n            uint256 price,\\n            uint256 expiresAt\\n        )\\n    {\\n        bidId = bidIdByTokenAndBidder[_tokenAddress][_tokenId][_bidder];\\n        bidIndex = bidIndexByBidId[bidId];\\n        (bidId, bidder, price, expiresAt) = getBidByToken(_tokenAddress, _tokenId, bidIndex);\\n        if (_bidder != bidder) {\\n            revert(\\\"ERC721Bid#getBidByBidder: BIDDER_HAS_NOT_ACTIVE_BIDS_FOR_TOKEN\\\");\\n        }\\n    }\\n\\n    /**\\n    * @dev Get an ERC721 token bid by index\\n    * @param _tokenAddress - address of the ERC721 token\\n    * @param _tokenId - uint256 of the token id\\n    * @param _index - uint256 of the index\\n    * @return bytes32 of the bid id\\n    * @return address of the bidder address\\n    * @return uint256 of the bid price\\n    * @return uint256 of the expiration time\\n    */\\n    function getBidByToken(address _tokenAddress, uint256 _tokenId, uint256 _index)\\n        public\\n        view\\n        returns (bytes32, address, uint256, uint256)\\n    {\\n\\n        Bid memory bid = _getBid(_tokenAddress, _tokenId, _index);\\n        return (\\n            bid.id,\\n            bid.bidder,\\n            bid.price,\\n            bid.expiresAt\\n        );\\n    }\\n\\n    /**\\n    * @dev Get the active bid id and index by a bidder and an specific token.\\n    * @notice If the index is not valid, it will revert.\\n    * @param _tokenAddress - address of the ERC721 token\\n    * @param _tokenId - uint256 of the index\\n    * @param _index - uint256 of the index\\n    * @return Bid\\n    */\\n    function _getBid(address _tokenAddress, uint256 _tokenId, uint256 _index)\\n        internal\\n        view\\n        returns (Bid memory)\\n    {\\n        require(_index < bidCounterByToken[_tokenAddress][_tokenId], \\\"ERC721Bid#_getBid: INVALID_INDEX\\\");\\n        return bidsByToken[_tokenAddress][_tokenId][_index];\\n    }\\n\\n    /**\\n    * @dev Sets the share cut for the fees collector of the contract that's\\n    *  charged to the seller on a successful sale\\n    * @param _feesCollectorCutPerMillion - fees for the collector\\n    */\\n    function setFeesCollectorCutPerMillion(uint256 _feesCollectorCutPerMillion) public onlyOwner {\\n        feesCollectorCutPerMillion = _feesCollectorCutPerMillion;\\n\\n        require(\\n            feesCollectorCutPerMillion + royaltiesCutPerMillion < 1000000,\\n            \\\"ERC721Bid#setFeesCollectorCutPerMillion: TOTAL_FEES_MUST_BE_BETWEEN_0_AND_999999\\\"\\n        );\\n\\n        emit ChangedFeesCollectorCutPerMillion(feesCollectorCutPerMillion);\\n    }\\n\\n    /**\\n    * @dev Sets the share cut for the royalties that's\\n    *  charged to the seller on a successful sale\\n    * @param _royaltiesCutPerMillion - fees for royalties\\n    */\\n    function setRoyaltiesCutPerMillion(uint256 _royaltiesCutPerMillion) public onlyOwner {\\n        royaltiesCutPerMillion = _royaltiesCutPerMillion;\\n\\n        require(\\n            feesCollectorCutPerMillion + royaltiesCutPerMillion < 1000000,\\n            \\\"ERC721Bid#setRoyaltiesCutPerMillion: TOTAL_FEES_MUST_BE_BETWEEN_0_AND_999999\\\"\\n        );\\n\\n        emit ChangedRoyaltiesCutPerMillion(royaltiesCutPerMillion);\\n    }\\n\\n    /**\\n    * @notice Set the fees collector\\n    * @param _newFeesCollector - fees collector\\n    */\\n    function setFeesCollector(address _newFeesCollector) onlyOwner public {\\n        require(_newFeesCollector != address(0), \\\"ERC721Bid#setFeesCollector: INVALID_FEES_COLLECTOR\\\");\\n\\n        emit FeesCollectorSet(feesCollector, _newFeesCollector);\\n        feesCollector = _newFeesCollector;\\n    }\\n\\n    /**\\n    * @notice Set the royalties manager\\n    * @param _newRoyaltiesManager - royalties manager\\n    */\\n    function setRoyaltiesManager(IRoyaltiesManager _newRoyaltiesManager) onlyOwner public {\\n        require(address(_newRoyaltiesManager).isContract(), \\\"ERC721Bid#setRoyaltiesManager: INVALID_ROYALTIES_MANAGER\\\");\\n\\n\\n        emit RoyaltiesManagerSet(royaltiesManager, _newRoyaltiesManager);\\n        royaltiesManager = _newRoyaltiesManager;\\n    }\\n\\n     /**\\n    * @dev Pause the contract\\n    */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n    * @dev Convert bytes to bytes32\\n    * @param _data - bytes\\n    * @return bytes32\\n    */\\n    function _bytesToBytes32(bytes memory _data) internal pure returns (bytes32) {\\n        require(_data.length == 32, \\\"ERC721Bid#_bytesToBytes32: DATA_LENGHT_SHOULD_BE_32\\\");\\n\\n        bytes32 bidId;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            bidId := mload(add(_data, 0x20))\\n        }\\n        return bidId;\\n    }\\n\\n    /**\\n    * @dev Check if the token has a valid ERC721 implementation\\n    * @param _tokenAddress - address of the token\\n    */\\n    function _requireERC721(address _tokenAddress) internal view {\\n        require(_tokenAddress.isContract(), \\\"ERC721Bid#_requireERC721: ADDRESS_NOT_A_CONTRACT\\\");\\n\\n        ERC721Interface token = ERC721Interface(_tokenAddress);\\n        require(\\n            token.supportsInterface(ERC721_Interface),\\n            \\\"ERC721Bid#_requireERC721: INVALID_CONTRACT_IMPLEMENTATION\\\"\\n        );\\n    }\\n\\n    /**\\n    * @dev Check if the token has a valid Composable ERC721 implementation\\n    * And its fingerprint is valid\\n    * @param _tokenAddress - address of the token\\n    * @param _tokenId - uint256 of the index\\n    * @param _fingerprint - bytes of the fingerprint\\n    */\\n    function _requireComposableERC721(\\n        address _tokenAddress,\\n        uint256 _tokenId,\\n        bytes memory _fingerprint\\n    )\\n        internal\\n        view\\n    {\\n        ERC721Verifiable composableToken = ERC721Verifiable(_tokenAddress);\\n        if (composableToken.supportsInterface(ERC721Composable_ValidateFingerprint)) {\\n            require(\\n                composableToken.verifyFingerprint(_tokenId, _fingerprint),\\n                \\\"ERC721Bid#_requireComposableERC721: INVALID_FINGERPRINT\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n    * @dev Check if the bidder has balance and the contract has enough allowance\\n    * to use bidder MANA on his belhalf\\n    * @param _bidder - address of bidder\\n    * @param _amount - uint256 of amount\\n    */\\n    function _requireBidderBalance(address _bidder, uint256 _amount) internal view {\\n        require(\\n            manaToken.balanceOf(_bidder) >= _amount,\\n            \\\"ERC721Bid#_requireBidderBalance: INSUFFICIENT_FUNDS\\\"\\n        );\\n        require(\\n            manaToken.allowance(_bidder, address(this)) >= _amount,\\n            \\\"ERC721Bid#_requireBidderBalance: CONTRACT_NOT_AUTHORIZED\\\"\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/commons/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\nimport \\\"./ContextMixin.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is ContextMixin {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/commons/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\nimport \\\"./ContextMixin.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is ContextMixin {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/commons/ContextMixin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\ncontract ContextMixin {\\n    function _msgSender()\\n        internal\\n        view\\n        returns (address sender)\\n    {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender := and(\\n                    mload(add(array, index)),\\n                    0xffffffffffffffffffffffffffffffffffffffff\\n                )\\n            }\\n        } else {\\n            sender = msg.sender;\\n        }\\n        return sender;\\n    }\\n}\"\r\n    },\r\n    \"contracts/commons/NativeMetaTransaction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\nimport { EIP712Base } from \\\"./EIP712Base.sol\\\";\\n\\ncontract NativeMetaTransaction is EIP712Base {\\n    bytes32 private constant META_TRANSACTION_TYPEHASH = keccak256(\\n        bytes(\\n            \\\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\\\"\\n        )\\n    );\\n    event MetaTransactionExecuted(\\n        address userAddress,\\n        address relayerAddress,\\n        bytes functionSignature\\n    );\\n    mapping(address => uint256) nonces;\\n\\n    /*\\n     * Meta transaction structure.\\n     * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\\n     * He should call the desired function directly in that case.\\n     */\\n    struct MetaTransaction {\\n        uint256 nonce;\\n        address from;\\n        bytes functionSignature;\\n    }\\n\\n    function executeMetaTransaction(\\n        address userAddress,\\n        bytes memory functionSignature,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) public payable returns (bytes memory) {\\n        MetaTransaction memory metaTx = MetaTransaction({\\n            nonce: nonces[userAddress],\\n            from: userAddress,\\n            functionSignature: functionSignature\\n        });\\n\\n        require(\\n            verify(userAddress, metaTx, sigR, sigS, sigV),\\n            \\\"NMT#executeMetaTransaction: SIGNER_AND_SIGNATURE_DO_NOT_MATCH\\\"\\n        );\\n\\n        // increase nonce for user (to avoid re-use)\\n        nonces[userAddress] = nonces[userAddress] + 1;\\n\\n        emit MetaTransactionExecuted(\\n            userAddress,\\n            msg.sender,\\n            functionSignature\\n        );\\n\\n        // Append userAddress and relayer address at the end to extract it from calling context\\n        (bool success, bytes memory returnData) = address(this).call(\\n            abi.encodePacked(functionSignature, userAddress)\\n        );\\n        require(success, \\\"NMT#executeMetaTransaction: CALL_FAILED\\\");\\n\\n        return returnData;\\n    }\\n\\n    function hashMetaTransaction(MetaTransaction memory metaTx)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    META_TRANSACTION_TYPEHASH,\\n                    metaTx.nonce,\\n                    metaTx.from,\\n                    keccak256(metaTx.functionSignature)\\n                )\\n            );\\n    }\\n\\n    function getNonce(address user) public view returns (uint256 nonce) {\\n        nonce = nonces[user];\\n    }\\n\\n    function verify(\\n        address signer,\\n        MetaTransaction memory metaTx,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) internal view returns (bool) {\\n        require(signer != address(0), \\\"NMT#verify: INVALID_SIGNER\\\");\\n        return\\n            signer ==\\n            ecrecover(\\n                toTypedMessageHash(hashMetaTransaction(metaTx)),\\n                sigV,\\n                sigR,\\n                sigS\\n            );\\n    }\\n}\"\r\n    },\r\n    \"contracts/bid/ERC721BidStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IRoyaltiesManager.sol\\\";\\n\\n\\n/**\\n * @title Interface for contracts conforming to ERC-20\\n */\\ninterface ERC20Interface {\\n    function balanceOf(address from) external view returns (uint256);\\n    function transferFrom(address from, address to, uint tokens) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n}\\n\\n\\n/**\\n * @title Interface for contracts conforming to ERC-721\\n */\\ninterface ERC721Interface {\\n    function ownerOf(uint256 _tokenId) external view returns (address _owner);\\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\\n    function supportsInterface(bytes4) external view returns (bool);\\n}\\n\\n\\ninterface ERC721Verifiable is ERC721Interface {\\n    function verifyFingerprint(uint256, bytes memory) external view returns (bool);\\n}\\n\\n\\ncontract ERC721BidStorage {\\n    // 182 days - 26 weeks - 6 months\\n    uint256 public constant MAX_BID_DURATION = 182 days;\\n    uint256 public constant MIN_BID_DURATION = 1 minutes;\\n    uint256 public constant ONE_MILLION = 1000000;\\n    bytes4 public constant ERC721_Interface = 0x80ac58cd;\\n    bytes4 public constant ERC721_Received = 0x150b7a02;\\n    bytes4 public constant ERC721Composable_ValidateFingerprint = 0x8f9f4b63;\\n\\n    struct Bid {\\n        // Bid Id\\n        bytes32 id;\\n        // Bidder address\\n        address bidder;\\n        // ERC721 address\\n        address tokenAddress;\\n        // ERC721 token id\\n        uint256 tokenId;\\n        // Price for the bid in wei\\n        uint256 price;\\n        // Time when this bid ends\\n        uint256 expiresAt;\\n        // Fingerprint for composable\\n        bytes fingerprint;\\n    }\\n\\n    // MANA token\\n    ERC20Interface public manaToken;\\n\\n    // Bid by token address => token id => bid index => bid\\n    mapping(address => mapping(uint256 => mapping(uint256 => Bid))) internal bidsByToken;\\n    // Bid count by token address => token id => bid counts\\n    mapping(address => mapping(uint256 => uint256)) public bidCounterByToken;\\n    // Index of the bid at bidsByToken mapping by bid id => bid index\\n    mapping(bytes32 => uint256) public bidIndexByBidId;\\n    // Bid id by token address => token id => bidder address => bidId\\n    mapping(address => mapping(uint256 => mapping(address => bytes32))) public bidIdByTokenAndBidder;\\n\\n\\n    address public feesCollector;\\n    IRoyaltiesManager public royaltiesManager;\\n\\n    uint256 public feesCollectorCutPerMillion;\\n    uint256 public royaltiesCutPerMillion;\\n\\n    // EVENTS\\n    event BidCreated(\\n      bytes32 _id,\\n      address indexed _tokenAddress,\\n      uint256 indexed _tokenId,\\n      address indexed _bidder,\\n      uint256 _price,\\n      uint256 _expiresAt,\\n      bytes _fingerprint\\n    );\\n\\n    event BidAccepted(\\n      bytes32 _id,\\n      address indexed _tokenAddress,\\n      uint256 indexed _tokenId,\\n      address _bidder,\\n      address indexed _seller,\\n      uint256 _price,\\n      uint256 _fee\\n    );\\n\\n    event BidCancelled(\\n      bytes32 _id,\\n      address indexed _tokenAddress,\\n      uint256 indexed _tokenId,\\n      address indexed _bidder\\n    );\\n\\n    event ChangedFeesCollectorCutPerMillion(uint256 _feesCollectorCutPerMillion);\\n    event ChangedRoyaltiesCutPerMillion(uint256 _royaltiesCutPerMillion);\\n    event FeesCollectorSet(address indexed _oldFeesCollector, address indexed _newFeesCollector);\\n    event RoyaltiesManagerSet(IRoyaltiesManager indexed _oldRoyaltiesManager, IRoyaltiesManager indexed _newRoyaltiesManager);\\n}\\n\"\r\n    },\r\n    \"contracts/commons/EIP712Base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\ncontract EIP712Base {\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        address verifyingContract;\\n        bytes32 salt;\\n    }\\n\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH = keccak256(\\n        bytes(\\n            \\\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\\\"\\n        )\\n    );\\n    bytes32 public domainSeparator;\\n\\n    // supposed to be called once while initializing.\\n    // one of the contractsa that inherits this contract follows proxy pattern\\n    // so it is not possible to do this in a constructor\\n    function _initializeEIP712(\\n        string memory name,\\n        string memory version\\n    )\\n        internal\\n    {\\n        domainSeparator = keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                keccak256(bytes(version)),\\n                address(this),\\n                bytes32(getChainId())\\n            )\\n        );\\n    }\\n\\n    function getChainId() public view returns (uint256) {\\n        uint256 id;\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    /**\\n     * Accept message hash and returns hash message in EIP712 compatible form\\n     * So that it can be used to recover signer from signature signed using EIP712 formatted data\\n     * https://eips.ethereum.org/EIPS/eip-712\\n     * \\\"\\\\\\\\x19\\\" makes the encoding deterministic\\n     * \\\"\\\\\\\\x01\\\" is the version byte to make it compatible to EIP-191\\n     */\\n    function toTypedMessageHash(bytes32 messageHash)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, messageHash)\\n            );\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IRoyaltiesManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IRoyaltiesManager {\\n  function getRoyaltiesReceiver(address _contractAddress, uint256 _tokenId) external view returns (address);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feesCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manaToken\",\"type\":\"address\"},{\"internalType\":\"contract IRoyaltiesManager\",\"name\":\"_royaltiesManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feesCollectorCutPerMillion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_royaltiesCutPerMillion\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"BidAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"}],\"name\":\"BidCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_expiresAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_fingerprint\",\"type\":\"bytes\"}],\"name\":\"BidCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feesCollectorCutPerMillion\",\"type\":\"uint256\"}],\"name\":\"ChangedFeesCollectorCutPerMillion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_royaltiesCutPerMillion\",\"type\":\"uint256\"}],\"name\":\"ChangedRoyaltiesCutPerMillion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldFeesCollector\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newFeesCollector\",\"type\":\"address\"}],\"name\":\"FeesCollectorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IRoyaltiesManager\",\"name\":\"_oldRoyaltiesManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IRoyaltiesManager\",\"name\":\"_newRoyaltiesManager\",\"type\":\"address\"}],\"name\":\"RoyaltiesManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC721Composable_ValidateFingerprint\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC721_Interface\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC721_Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BID_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_BID_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_MILLION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bidCounterByToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bidIdByTokenAndBidder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bidIndexByBidId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesCollectorCutPerMillion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"}],\"name\":\"getBidByBidder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bidIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"bidId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBidByToken\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manaToken\",\"outputs\":[{\"internalType\":\"contract ERC20Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_fingerprint\",\"type\":\"bytes\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_bidders\",\"type\":\"address[]\"}],\"name\":\"removeExpiredBids\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltiesCutPerMillion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltiesManager\",\"outputs\":[{\"internalType\":\"contract IRoyaltiesManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFeesCollector\",\"type\":\"address\"}],\"name\":\"setFeesCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feesCollectorCutPerMillion\",\"type\":\"uint256\"}],\"name\":\"setFeesCollectorCutPerMillion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_royaltiesCutPerMillion\",\"type\":\"uint256\"}],\"name\":\"setRoyaltiesCutPerMillion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRoyaltiesManager\",\"name\":\"_newRoyaltiesManager\",\"type\":\"address\"}],\"name\":\"setRoyaltiesManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ERC721Bid", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "0000000000000000000000000e659a116e161d8e502f9036babda51334f2667e000000000000000000000000b08e3e7cc815213304d884c88ca476ebc50eaab2000000000000000000000000a1c57f48f0deb89f569dfbe6e2b7f46d33606fd400000000000000000000000090958d4531258ca11d18396d4174a007edbc2b42000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000061a8", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}