{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Diamond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {LibDiamond} from \\\"./libraries/LibDiamond.sol\\\";\\nimport {IDiamondCut} from \\\"./interfaces/IDiamondCut.sol\\\";\\n\\n/**\\n * @title Diamond Contract\\n * @dev Implementation of the EIP-2535 \\\"Diamond Standard\\\"\\n * A diamond contract is a contract that supports a flexible, modular, robust and\\n * scalable contract architecture that enables a contract to provide practically any\\n * number and combination of contract functions.\\n */\\ncontract Diamond {\\n    /**\\n     * @dev Constructor initializes the contract, setting the contract owner and the initial diamond cut.\\n     * @param contractOwner_ The address of the contract owner.\\n     * @param diamondCutFacet_ The address of the diamond cut facet.\\n     */\\n    constructor(address contractOwner_, address diamondCutFacet_) payable {\\n        require(\\n            contractOwner_ != address(0),\\n            \\\"Diamond: Owner cannot be address 0\\\"\\n        );\\n        LibDiamond.setContractOwner(contractOwner_);\\n\\n        /// Initialize the diamond with the diamondCut function.\\n        IDiamondCut.FacetCut[] memory cut = new IDiamondCut.FacetCut[](1);\\n        bytes4[] memory functionSelectors = new bytes4[](1);\\n        functionSelectors[0] = IDiamondCut.diamondCut.selector;\\n        cut[0] = IDiamondCut.FacetCut({\\n            facetAddress: diamondCutFacet_,\\n            action: IDiamondCut.FacetCutAction.Add,\\n            functionSelectors: functionSelectors\\n        });\\n        LibDiamond.diamondCut(cut, address(0), \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Fallback function executes when a function is called that does not exist in the diamond.\\n     * It finds the facet for the function and executes the function if the facet is found.\\n     */\\n    fallback() external payable {\\n        LibDiamond.DiamondStorage storage ds;\\n        bytes32 position = LibDiamond.DIAMOND_STORAGE_POSITION;\\n        /// Retrieve diamond storage.\\n        assembly {\\n            ds.slot := position\\n        }\\n        /// Retrieve facet from function selector.\\n        address facet = address(bytes20(ds.facets[msg.sig]));\\n        require(facet != address(0), \\\"Diamond: Function does not exist\\\");\\n        /// Execute the function from the facet using delegatecall and return any value.\\n        assembly {\\n            /// Copy function selector and any arguments.\\n            calldatacopy(0, 0, calldatasize())\\n            /// Execute the function call using the facet.\\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\\n            /// Retrieve any return value.\\n            returndatacopy(0, 0, returndatasize())\\n            /// Return any value or error back to the caller.\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev The receive function is executed on a call to the contract with empty calldata.\\n     * This is the function that is executed on plain Ether transfers to the contract.\\n     * Reverts if the message data is not empty.\\n     */\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDiamondCut.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Diamond Cut Interface\\n * @dev This interface lays out the structure for adding, replacing, or removing functions\\n * in a Diamond contract architecture. It also includes the logic for executing a function\\n * with delegatecall.\\n */\\ninterface IDiamondCut {\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /**\\n     * @notice This function allows to add, replace, or remove any number of functions\\n     * and optionally execute a function with delegatecall.\\n     * @param diamondCut_ An array of FacetCut structs containing the facet addresses\\n     * and function selectors for the cut.\\n     * @param init_ The address of the contract or facet to execute calldata_.\\n     * @param calldata_ A bytes array containing the function call data,\\n     * including function selector and arguments. calldata_ is executed with delegatecall on init_.\\n     */\\n    function diamondCut(FacetCut[] calldata diamondCut_, address init_, bytes calldata calldata_) external;\\n\\n    /**\\n     * @dev Emitted after a successful `diamondCut` operation.\\n     * @param diamondCut_ The array of FacetCut structs that was passed to the function.\\n     * @param init_ The address of the contract or facet that was executed with delegatecall.\\n     * @param calldata_ The function call data that was passed to the function.\\n     */\\n    event DiamondCut(FacetCut[] diamondCut_, address init_, bytes calldata_);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibDiamond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n/// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n/// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nerror InitializationFunctionReverted(\\n    address _initializationContractAddress,\\n    bytes _calldata\\n);\\n\\n/**\\n * @title LibDiamond - A library implementing the EIP-2535 Diamond Standard\\n * @dev This library is responsible for managing the storage and functionality related to diamonds.\\n * It provides functions for adding, updating, and removing facets and their function selectors,\\n * as well as managing contract ownership and supported interfaces.\\n */\\nlibrary LibDiamond {\\n    struct Token {\\n        string uri;\\n    }\\n\\n    /// Basic storage for ERC721 tokens\\n    struct ERC721Storage {\\n        /// replace _owners mapping in OpenZeppelin contract\\n        mapping(uint256 => address) owners;\\n        ///replace _balances mapping in OpenZeppelin contract\\n        mapping(address => uint256) balances;\\n        /// replace _tokenApprovals mapping in OpenZeppelin contract\\n        mapping(uint256 => address) tokenApprovals;\\n        /// replace _operatorApprovals mapping in OpenZeppelin contract\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n        /// tokenId => token URI\\n        mapping(uint256 => string) tokenIdToURI;\\n        uint256 tokenId;\\n        uint256 maximumSupply;\\n        string name;\\n        string symbol;\\n        string contractUri;\\n        /// backend keys\\n        string[] keyFallback;\\n        /// Mapping from token ID to Token struct.\\n        mapping(uint256 => Token) tokens;\\n        /// Mapping from backend Token Key to Token Id.\\n        mapping(string => uint256) backendTokenKeyToId;\\n        /// Mapping from Token Id to Token Key.\\n        mapping(uint256 => string) tokenIdToBackendTokenKey;\\n        /// Field for storing timestampses\\n        mapping(uint256 => uint256) tokenTimestamps;\\n        /// Store already used for mint metadata\\n        mapping(string => bool) existingUris;\\n    }\\n\\n    /// Basic storage for ERC721 tokens\\n    struct ERC1155Storage {\\n        // Mapping from token ID to account balances\\n        mapping(uint256 => mapping(address => uint256)) balances;\\n        // Mapping from account to operator approvals\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n        mapping(uint256 => string) uris;\\n        // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n        string uri;\\n    }\\n\\n    /// Basic storage for ERC20 tokens\\n    struct ERC20Storage {\\n        mapping(address => uint256) balances;\\n        mapping(address => mapping(address => uint256)) allowances;\\n        uint256 totalSupply;\\n        string name;\\n        string symbol;\\n        uint8 decimals;\\n    }\\n\\n    /// Item for Marketplace\\n    struct Item {\\n        uint256 id;\\n        string name;\\n        string description;\\n        uint256 price;\\n        uint256 itemTimestamp;\\n    }\\n    /// Basic storage for a marketplace\\n    struct MarketplaceStorage {\\n        /// itemId => Item struct\\n        mapping(uint256 => Item) items;\\n        /// owner => list of items owned\\n        mapping(address => uint256[]) ownerItems;\\n        ///itemId => owner\\n        mapping(uint256 => address) itemOwners;\\n        /// itemId => price\\n        mapping(uint256 => uint256) itemPrices;\\n        mapping(address => EnumerableSet.UintSet) ownedItems;\\n    }\\n\\n    struct CustomType {\\n        /// Custom type\\n        uint256 exampleField1;\\n        address exampleField2;\\n    }\\n\\n    /// Generic Struct storage to accommodate any type of contract\\n    struct GenericStorage {\\n        /// Dynamic key-value storage for uints\\n        mapping(bytes32 => uint256) uintStorage;\\n        /// Dynamic key-value storage for addresses\\n        mapping(bytes32 => address) addressStorage;\\n        /// Dynamic key-value storage for bytes\\n        mapping(bytes32 => bytes) bytesStorage;\\n        /// Dynamic key-value storage for strings\\n        mapping(bytes32 => string) stringStorage;\\n        /// Dynamic key-value storage for bools\\n        mapping(bytes32 => bool) boolStorage;\\n        /// Nested mapping\\n        mapping(bytes32 => mapping(bytes32 => uint256)) nestedMappingStorage;\\n        /// Custom type storage\\n        mapping(bytes32 => CustomType) customTypeStorage;\\n        /// Custom type array storage\\n        mapping(bytes32 => CustomType[]) customTypeArrayStorage;\\n        /// Uint array storage\\n        mapping(bytes32 => uint256[]) uintArrayStorage;\\n        /// EnumerableSet storage\\n        mapping(bytes32 => EnumerableSet.UintSet) enumerableUintSetStorage;\\n    }\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        /// Maps function selectors to the facets that execute the functions\\n        /// and maps the selectors to their position in the selectorSlots array\\n        /// func selector => (address facet, selector position)\\n        mapping(bytes4 => bytes32) facets;\\n        /// Array of slots holding function selectors, with each slot containing 8 selectors\\n        mapping(uint256 => bytes32) selectorSlots;\\n        /// The total number of function selectors in selectorSlots\\n        uint16 selectorCount;\\n        /// A mapping used to query if a contract implements an interface\\n        /// This is utilized for ERC-165 implementation\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        /// The owner of the contract\\n        address contractOwner;\\n        /// marketplace storage\\n        MarketplaceStorage marketplaceStorage;\\n        /// erc721 storage\\n        ERC721Storage erc721Storage;\\n        /// erc20 storage\\n        ERC20Storage erc20Storage;\\n        /// erc1155 storage\\n        ERC1155Storage erc1155Storage;\\n        /// generic storage that can be used by any contract\\n        GenericStorage genericStorage;\\n    }\\n\\n    /**\\n     * @notice Retrieves the DiamondStorage struct instance that holds the\\n     *         storage data for the diamond contract.\\n     *\\n     * @dev This function utilizes assembly to access the storage slot where\\n     *      the DiamondStorage struct data is stored.\\n     *\\n     * @return ds The DiamondStorage struct instance containing the contract's storage data\\n     */\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @notice Transfers ownership of the diamond contract to a new owner.\\n     *\\n     * @dev This internal function updates the contract owner in the DiamondStorage struct\\n     *      and emits an OwnershipTransferred event.\\n     *\\n     * @param newOwner_ The address of the new owner to whom ownership is being transferred\\n     *\\n     * Emits an {OwnershipTransferred} event.\\n     */\\n    function setContractOwner(address newOwner_) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = newOwner_;\\n        emit OwnershipTransferred(previousOwner, newOwner_);\\n    }\\n\\n    /**\\n     * @notice Gets the current owner of the diamond contract.\\n     *\\n     * @dev This internal view function retrieves the contract owner from the DiamondStorage struct.\\n     *\\n     * @return contractOwner_ The address of the current contract owner.\\n     */\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    /**\\n     * @notice Verifies that the caller of the function is the contract owner.\\n     *\\n     * @dev This internal view function checks if the sender is the contract owner stored\\n     *      in the DiamondStorage struct, and reverts if the condition is not met.\\n     *\\n     * Reverts with \\\"LibDiamond: Must be contract owner\\\" if the sender is not the contract owner.\\n     */\\n    function enforceIsContractOwner() internal view {\\n        require(\\n            msg.sender == diamondStorage().contractOwner,\\n            \\\"LibDiamond: Must be contract owner\\\"\\n        );\\n    }\\n\\n    event DiamondCut(\\n        IDiamondCut.FacetCut[] _diamondCut,\\n        address init_,\\n        bytes _calldata\\n    );\\n\\n    /// A constant mask used to clear the address part of a bytes32 value\\n    bytes32 constant CLEAR_ADDRESS_MASK =\\n        bytes32(uint256(0xffffffffffffffffffffffff));\\n    /// A constant mask used to clear the function selector part of a bytes32 value\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n\\n    /**\\n     * @notice Executes an internal diamond cut, modifying the contract's facets by adding,\\n     *         replacing, or removing functions, and optionally initializing a facet or contract.\\n     * @dev This internal version of diamondCut is almost identical to the external version,\\n     *      but it uses a memory array instead of a calldata array. This approach avoids copying\\n     *      calldata to memory, which would result in errors for two-dimensional arrays. The\\n     *      function iterates through the _diamondCut array, performing actions as specified\\n     *      and updating the contract's selector slots accordingly.\\n     *\\n     *      Note: This code is almost the same as the external diamondCut,\\n     *      except it is using 'Facet[] memory _diamondCut' instead of\\n     *      'Facet[] calldata _diamondCut'.\\n     *      The code is duplicated to prevent copying calldata to memory which\\n     *      causes an error for a two-dimensional array.\\n     *\\n     * @param diamondCut_ An array of FacetCut structs containing facet addresses, actions, and\\n     *                    function selectors to be added, replaced, or removed\\n     * @param init_ The address of the contract or facet to execute calldata_ using delegatecall\\n     * @param calldata_ Encoded function call, including function selector and arguments, to be\\n     *                  executed using delegatecall on init_\\n     *\\n     * Emits a {DiamondCut} event.\\n     *\\n     * Requirements:\\n     * - The `diamondCut_` array must not be empty.\\n     * - The `init_` address must contain contract code if it is non-zero.\\n     * - If an add action is performed, the function selector must not already exist.\\n     * - If a replace action is performed, the function selector must exist and cannot be replaced with the same function.\\n     * - If a remove action is performed, the function selector must exist and the `init_` address must be a zero address.\\n     * - The contract must have enough storage to store the new function selectors.\\n     */\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory diamondCut_,\\n        address init_,\\n        bytes memory calldata_\\n    ) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint256 originalSelectorCount = ds.selectorCount;\\n        uint256 selectorCount = originalSelectorCount;\\n        bytes32 selectorSlot;\\n        /// Determine if the last selector slot is not fully occupied\\n        /// Efficient modulo by eight using bitwise AND\\n        if (selectorCount & 7 > 0) {\\n            /// Retrieve the last selectorSlot using bitwise shift for efficient division by 8\\n            selectorSlot = ds.selectorSlots[selectorCount >> 3];\\n        }\\n        /// Iterate through the diamond cut array\\n        for (uint256 facetIndex; facetIndex < diamondCut_.length; ) {\\n            (selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\\n                selectorCount,\\n                selectorSlot,\\n                diamondCut_[facetIndex].facetAddress,\\n                diamondCut_[facetIndex].action,\\n                diamondCut_[facetIndex].functionSelectors\\n            );\\n\\n            unchecked {\\n                facetIndex++;\\n            }\\n        }\\n        if (selectorCount != originalSelectorCount) {\\n            ds.selectorCount = uint16(selectorCount);\\n        }\\n        /// Check if the last selector slot is not fully occupied\\n        /// Efficient modulo by eight using bitwise AND\\n        if (selectorCount & 7 > 0) {\\n            /// Update the selector slot using bitwise shift for efficient division by 8\\n            ds.selectorSlots[selectorCount >> 3] = selectorSlot;\\n        }\\n        emit DiamondCut(diamondCut_, init_, calldata_);\\n        initializeDiamondCut(init_, calldata_);\\n    }\\n\\n    /**\\n     * @dev This internal function adds, replaces, or removes function selectors for facets based on the action provided.\\n     *      This function ensures the selectors are properly stored in the contract's storage and maintain the gas efficient design.\\n     *      It also checks for valid inputs, ensuring that facets and selectors conform to the requirements of each action.\\n     *\\n     * @param selectorCount_ The current count of total selectors. This value is adjusted based on the action taken.\\n     * @param selectorSlot_ The current selector slot. This value is adjusted based on the action taken.\\n     * @param newFacetAddress_ The address of the new facet to be added or replaced. It must be address(0) when removing facets.\\n     * @param action_ The action to execute, which can be adding, replacing, or removing a facet.\\n     * @param selectors_ Array of function selectors to be added, replaced, or removed in the facet.\\n     *\\n     * @return selectorCount_ The updated count of total selectors after the function execution.\\n     * @return selectorSlot_ The updated selector slot after the function execution.\\n     *\\n     * Requirements:\\n     * - The `selectors_` array must not be empty.\\n     * - In the case of adding a new facet, the `newFacetAddress_` must not be a zero address, and the facet must contain code.\\n     * - In the case of replacing a facet, the `newFacetAddress_` must not be a zero address, and the facet must contain code. The function to be replaced must exist, and cannot be the same as the replacement function.\\n     * - In the case of removing a facet, the `newFacetAddress_` must be a zero address. The function to be removed must exist.\\n     */\\n\\n    function addReplaceRemoveFacetSelectors(\\n        uint256 selectorCount_,\\n        bytes32 selectorSlot_,\\n        address newFacetAddress_,\\n        IDiamondCut.FacetCutAction action_,\\n        bytes4[] memory selectors_\\n    ) internal returns (uint256, bytes32) {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(\\n            selectors_.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        if (action_ == IDiamondCut.FacetCutAction.Add) {\\n            enforceHasContractCode(\\n                newFacetAddress_,\\n                \\\"LibDiamondCut: Add facet has no code\\\"\\n            );\\n            for (uint256 selectorIndex; selectorIndex < selectors_.length; ) {\\n                bytes4 selector = selectors_[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                require(\\n                    address(bytes20(oldFacet)) == address(0),\\n                    \\\"LibDiamondCut: Can't add function that already exists\\\"\\n                );\\n\\n                /// Adding the facet address and the selector count to the facet\\n                ds.facets[selector] =\\n                    bytes20(newFacetAddress_) |\\n                    bytes32(selectorCount_);\\n\\n                /// Utilizing bitwise operations for efficient modulo by 8 and multiplication by 32\\n                uint256 selectorInSlotPosition = (selectorCount_ & 7) << 5;\\n\\n                /// Clearing the selector's position in the slot and adding the selector\\n                selectorSlot_ =\\n                    (selectorSlot_ &\\n                        ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) |\\n                    (bytes32(selector) >> selectorInSlotPosition);\\n\\n                /// If the slot is filled, then it is written to storage\\n                if (selectorInSlotPosition == 224) {\\n                    /// Utilizing bitwise operation for efficient division by 8\\n                    ds.selectorSlots[selectorCount_ >> 3] = selectorSlot_;\\n                    selectorSlot_ = 0;\\n                }\\n\\n                selectorCount_++;\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n        } else if (action_ == IDiamondCut.FacetCutAction.Replace) {\\n            enforceHasContractCode(\\n                newFacetAddress_,\\n                \\\"LibDiamondCut: Replace facet has no code\\\"\\n            );\\n            for (uint256 selectorIndex; selectorIndex < selectors_.length; ) {\\n                bytes4 selector = selectors_[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n\\n                /// This check is relevant if immutable functions are present\\n                require(\\n                    oldFacetAddress != address(this),\\n                    \\\"LibDiamondCut: Immutable functions cannot be replaced\\\"\\n                );\\n\\n                /// Prevents replacement of a function with an identical one\\n                require(\\n                    oldFacetAddress != newFacetAddress_,\\n                    \\\"LibDiamondCut: A function cannot be replaced with the same function\\\"\\n                );\\n\\n                /// Ensures the function to be replaced exists\\n                require(\\n                    oldFacetAddress != address(0),\\n                    \\\"LibDiamondCut: Non-existent functions cannot be replaced\\\"\\n                );\\n\\n                /// Substituting the old facet address with the new one\\n                ds.facets[selector] =\\n                    (oldFacet & CLEAR_ADDRESS_MASK) |\\n                    bytes20(newFacetAddress_);\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n        } else if (action_ == IDiamondCut.FacetCutAction.Remove) {\\n            /// The address for the removed facet should be null\\n            require(\\n                newFacetAddress_ == address(0),\\n                \\\"LibDiamondCut: Address for removed facet must be null address\\\"\\n            );\\n\\n            /// \\\"selectorCount_ >> 3\\\" is a computational optimization for division by 8\\n            uint256 selectorSlotCount = selectorCount_ >> 3;\\n\\n            /// \\\"selectorCount_ & 7\\\" is a computational optimization for modulo by eight\\n            uint256 selectorInSlotIndex = selectorCount_ & 7;\\n            for (uint256 selectorIndex; selectorIndex < selectors_.length; ) {\\n                if (selectorSlot_ == 0) {\\n                    /// Retrieve the last selectorSlot\\n                    selectorSlotCount--;\\n                    selectorSlot_ = ds.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                } else {\\n                    selectorInSlotIndex--;\\n                }\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n\\n                /// Adding this block helps to avoid 'Stack too deep' error\\n                {\\n                    bytes4 selector = selectors_[selectorIndex];\\n                    bytes32 oldFacet = ds.facets[selector];\\n\\n                    /// Check if function to remove exists\\n                    require(\\n                        address(bytes20(oldFacet)) != address(0),\\n                        \\\"LibDiamondCut: Function to remove does not exist\\\"\\n                    );\\n\\n                    /// Immutable functions cannot be removed\\n                    require(\\n                        address(bytes20(oldFacet)) != address(this),\\n                        \\\"LibDiamondCut: Immutable function cannot be removed\\\"\\n                    );\\n\\n                    /// Retrieve the last selector\\n                    /// \\\" << 5\\\" is a computational optimization for multiplication by 32\\n                    lastSelector = bytes4(\\n                        selectorSlot_ << (selectorInSlotIndex << 5)\\n                    );\\n\\n                    if (lastSelector != selector) {\\n                        /// Update the last selector's slot position info\\n                        ds.facets[lastSelector] =\\n                            (oldFacet & CLEAR_ADDRESS_MASK) |\\n                            bytes20(ds.facets[lastSelector]);\\n                    }\\n\\n                    /// Remove the selector from the facets\\n                    delete ds.facets[selector];\\n\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n\\n                    /// \\\"oldSelectorCount >> 3\\\" is a computational optimization for division by 8\\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\\n\\n                    /// \\\"oldSelectorCount & 7\\\" is a computational optimization for modulo by eight\\n                    /// \\\" << 5\\\" is a computational optimization for multiplication by 32\\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\n                }\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = ds.selectorSlots[\\n                        oldSelectorsSlotCount\\n                    ];\\n\\n                    /// Clear the selector being deleted and replace it with the last selector\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot &\\n                            ~(CLEAR_SELECTOR_MASK >>\\n                                oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n\\n                    /// Update the storage with the modified slot\\n                    ds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    /// Clear the selector being deleted and replace it with the last selector\\n                    selectorSlot_ =\\n                        (selectorSlot_ &\\n                            ~(CLEAR_SELECTOR_MASK >>\\n                                oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n                if (selectorInSlotIndex == 0) {\\n                    delete ds.selectorSlots[selectorSlotCount];\\n                    selectorSlot_ = 0;\\n                }\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n            selectorCount_ = selectorSlotCount * 8 + selectorInSlotIndex;\\n        } else {\\n            revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n        }\\n        return (selectorCount_, selectorSlot_);\\n    }\\n\\n    /**\\n     * @dev This internal function is used to initialize a diamond cut. It performs a delegate call to\\n     *      the provided address with the given calldata. This is typically used to call a function on\\n     *      a facet that sets initial state in the diamond storage.\\n     *\\n     * @param init_ The address of the contract to delegate call. This address should contain the logic\\n     *              that needs to be executed for the initialization. If it is address(0), the function\\n     *              returns without doing anything.\\n     * @param calldata_ The calldata to be passed to the delegate call. This should include the\\n     *                  function selector for the initialization function and any necessary parameters.\\n     *\\n     * @notice If the delegate call is not successful, the function will revert. If the call returns\\n     *         an error message, it will be bubbled up and reverted with. Otherwise, it will revert\\n     *         with the `InitializationFunctionReverted` error, which includes the `init_` address\\n     *         and the `calldata_`.\\n     *\\n     * Requirements:\\n     * - The `init_` address must contain contract code. If it is a zero address or an address without\\n     *   contract code, the function will revert with the \\\"LibDiamondCut: init_ address has no code\\\"\\n     *   error.\\n     */\\n    function initializeDiamondCut(\\n        address init_,\\n        bytes memory calldata_\\n    ) internal {\\n        if (init_ == address(0)) {\\n            return;\\n        }\\n        enforceHasContractCode(\\n            init_,\\n            \\\"LibDiamondCut: init_ address has no code\\\"\\n        );\\n        (bool success, bytes memory error) = init_.delegatecall(calldata_);\\n        if (!success) {\\n            if (error.length > 0) {\\n                /// bubble up error\\n                /// @solidity memory-safe-assembly\\n                /// Use inline assembly to load the size of the error message and revert with it.\\n                assembly {\\n                    let returndata_size := mload(error)\\n                    revert(add(32, error), returndata_size)\\n                }\\n            } else {\\n                revert InitializationFunctionReverted(init_, calldata_);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This internal function checks if the provided address (contract_) contains contract code.\\n     *      It uses low-level EVM instructions to access the contract size directly.\\n     *      If the contract size is 0 (meaning there's no contract code at the address), it reverts with the provided error message.\\n     *\\n     * @param contract_ The address to be checked for the presence of contract code.\\n     * @param errorMessage_ The error message to be reverted with if there's no contract code at the provided address.\\n     *\\n     * Requirements:\\n     * - The `contract_` must contain contract code. If not, it reverts with the provided `errorMessage_`.\\n     */\\n    function enforceHasContractCode(\\n        address contract_,\\n        string memory errorMessage_\\n    ) internal view {\\n        uint256 contractSize;\\n        /// Using EVM assembly to get the size of the code at address `contract_`\\n        assembly {\\n            contractSize := extcodesize(contract_)\\n        }\\n\\n        /// Reverting if the contract size is zero (i.e., the address does not contain contract code)\\n        require(contractSize > 0, errorMessage_);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractOwner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"diamondCutFacet_\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initializationContractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"InitializationFunctionReverted\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Diamond", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008a85fbc946d15cfa675e73309c647dcc5347773900000000000000000000000013b4dd376b185c82d0929a18a5312da51b37d293", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "1", "Implementation": "0xc6d179d2e567db7bdcef0be3b46f332d6cb0d6fc", "SwarmSource": ""}