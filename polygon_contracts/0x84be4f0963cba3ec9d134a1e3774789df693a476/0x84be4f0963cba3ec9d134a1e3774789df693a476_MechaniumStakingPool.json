{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/MechaniumStaking/MechaniumStakingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\nimport \\\"./IMechaniumStakingPool.sol\\\";\\r\\nimport \\\"../MechaniumUtils/MechaniumCanReleaseUnintendedOwnable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title MechaniumStakingPool - Staking pool smart contract\\r\\n * @author EthernalHorizons - <https://ethernalhorizons.com/>\\r\\n * @custom:project-website  https://mechachain.io/\\r\\n * @custom:security-contact contracts@ethernalhorizons.com\\r\\n */\\r\\ncontract MechaniumStakingPool is\\r\\n    IMechaniumStakingPool,\\r\\n    Ownable,\\r\\n    MechaniumCanReleaseUnintendedOwnable\\r\\n{\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    /**\\r\\n     * ========================\\r\\n     *          Events\\r\\n     * ========================\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when an `account` stakes `amount` for `lockPeriod`\\r\\n     */\\r\\n    event Stake(address indexed account, uint256 amount, uint64 lockPeriod);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when an `account` unstaked a deposit (`depositId`)\\r\\n     */\\r\\n    event Unstake(address indexed account, uint256 amount, uint256 depositId);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when an `account` unstaked several deposits (`depositIds`)\\r\\n     */\\r\\n    event Unstake(\\r\\n        address indexed account,\\r\\n        uint256 amount,\\r\\n        uint256[] depositIds\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when an `account` updated stake `lockPeriod` for a `depositId`\\r\\n     */\\r\\n    event StakeLockUpdated(\\r\\n        address indexed account,\\r\\n        uint256 depositId,\\r\\n        uint64 lockPeriod\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when an `rewardsPerBlock` is updated\\r\\n     */\\r\\n    event RewardsPerBlockChanged(uint256 rewardsPerBlock);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when `rewards` are processed for an `account`\\r\\n     */\\r\\n    event ProcessRewards(address indexed account, uint256 rewards);\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when `_rewardsPerWeight` is updated\\r\\n     */\\r\\n    event RewardsPerWeightUpdated(uint256 _rewardsPerWeight);\\r\\n\\r\\n    /**\\r\\n     * ========================\\r\\n     *  Constants & Immutables\\r\\n     * ========================\\r\\n     */\\r\\n\\r\\n    /// ERC20 token to be staked\\r\\n    IERC20 public immutable stakedToken;\\r\\n\\r\\n    /// ERC20 token to be rewarded\\r\\n    IERC20 public immutable rewardToken;\\r\\n\\r\\n    /// Block number for staking pool start\\r\\n    uint32 public immutable initBlock;\\r\\n\\r\\n    /// Staking rewards locking period\\r\\n    uint64 public immutable rewardsLockingPeriod;\\r\\n\\r\\n    /// Minimum staking time\\r\\n    uint64 public immutable minStakingTime;\\r\\n\\r\\n    /// Maximum staking time\\r\\n    uint64 public immutable maxStakingTime;\\r\\n\\r\\n    /// Minimum weight multiplier\\r\\n    uint16 public immutable minWeightMultiplier;\\r\\n\\r\\n    /// Maximum weight multiplier\\r\\n    uint16 public immutable maxWeightMultiplier;\\r\\n\\r\\n    /// Weight multiplier ( used for floating weight )\\r\\n    uint256 public immutable WEIGHT_MULTIPLIER = 1e12;\\r\\n\\r\\n    /**\\r\\n     * ========================\\r\\n     *         Storage\\r\\n     * ========================\\r\\n     */\\r\\n\\r\\n    /// Amount of tokens to be rewarded per block\\r\\n    uint256 public rewardsPerBlock;\\r\\n\\r\\n    /// Mapping of users addresses and User structure\\r\\n    mapping(address => User) public users;\\r\\n\\r\\n    /// Total staking weight for users\\r\\n    uint256 public totalUsersWeight;\\r\\n\\r\\n    /// Total tokens staked by users\\r\\n    uint256 public totalTokensStaked;\\r\\n\\r\\n    /// Total of processed rewards\\r\\n    uint256 public totalProcessedRewards;\\r\\n\\r\\n    /// Track the last block number of rewards update\\r\\n    uint256 public lastRewardsUpdate;\\r\\n\\r\\n    /// Total rewards at the last update, use `updatedTotalRewards` for get the last value\\r\\n    uint256 internal _totalRewards;\\r\\n\\r\\n    /// Rewards in tokens per weight at the last update, use `updatedRewardsPerWeight` for get the last value\\r\\n    uint256 internal _rewardsPerWeight;\\r\\n\\r\\n    /**\\r\\n     * ========================\\r\\n     *     Public Functions\\r\\n     * ========================\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @notice Contract constructor sets the configuration of the staking pool\\r\\n     * @param stakedToken_ The token to be staked ( can be same as rewardToken if not flash pool )\\r\\n     * @param rewardToken_  The token to be rewarded\\r\\n     * @param initBlock_ The init block ( if set to 0 will take the current block )\\r\\n     * @param minStakingTime_ The minimum allowed locking time\\r\\n     * @param maxStakingTime_ The maximum allowed locking time\\r\\n     * @param minWeightMultiplier_ The minimum weight multiplier ( Used to calculate weight range )\\r\\n     * @param maxWeightMultiplier_ The maximum weight multiplier ( Used to calculate weight range )\\r\\n     * @param rewardsLockingPeriod_  The rewards locking period ( Can be 0 if flash pool )\\r\\n     * @param rewardsPerBlock_ The amount of tokens to be rewarded per block passed\\r\\n     */\\r\\n    constructor(\\r\\n        IERC20 stakedToken_,\\r\\n        IERC20 rewardToken_,\\r\\n        uint32 initBlock_,\\r\\n        uint64 minStakingTime_,\\r\\n        uint64 maxStakingTime_,\\r\\n        uint16 minWeightMultiplier_,\\r\\n        uint16 maxWeightMultiplier_,\\r\\n        uint64 rewardsLockingPeriod_,\\r\\n        uint256 rewardsPerBlock_\\r\\n    ) {\\r\\n        require(rewardsPerBlock_ > 0, \\\"Rewards can't be null\\\");\\r\\n        require(minWeightMultiplier_ > 0, \\\"minWeightMultiplier can't be null\\\");\\r\\n        require(\\r\\n            minStakingTime_ <= maxStakingTime_,\\r\\n            \\\"minStakingTime can't be greater than maxStakingTime\\\"\\r\\n        );\\r\\n        require(\\r\\n            minWeightMultiplier_ <= maxWeightMultiplier_,\\r\\n            \\\"minWeightMultiplier can't be greater than maxWeightMultiplier\\\"\\r\\n        );\\r\\n\\r\\n        /// Requirement to handle flash pools\\r\\n        require(\\r\\n            (address(stakedToken_) == address(rewardToken_)) ||\\r\\n                rewardsLockingPeriod_ == 0,\\r\\n            \\\"Rewards locking period must be 0 for flash pools\\\"\\r\\n        );\\r\\n        require(\\r\\n            rewardsLockingPeriod_ == 0 ||\\r\\n                rewardsLockingPeriod_ >= minStakingTime_,\\r\\n            \\\"Rewards locking period must be 0 or lower than minStakingTime\\\"\\r\\n        );\\r\\n        require(\\r\\n            rewardsLockingPeriod_ == 0 ||\\r\\n                rewardsLockingPeriod_ <= maxStakingTime_,\\r\\n            \\\"Rewards locking period must be 0 or greater than maxStakingTime\\\"\\r\\n        );\\r\\n\\r\\n        stakedToken = stakedToken_;\\r\\n        rewardToken = rewardToken_;\\r\\n        initBlock = initBlock_ == 0 ? uint32(block.number) : initBlock_;\\r\\n        rewardsLockingPeriod = rewardsLockingPeriod_;\\r\\n        minStakingTime = minStakingTime_;\\r\\n        maxStakingTime = maxStakingTime_;\\r\\n        minWeightMultiplier = minWeightMultiplier_;\\r\\n        maxWeightMultiplier = maxWeightMultiplier_;\\r\\n        rewardsPerBlock = rewardsPerBlock_;\\r\\n\\r\\n        _addLockedToken(address(stakedToken_));\\r\\n        _addLockedToken(address(rewardToken_));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to stake an `amount` of tokens for a `lockPeriod` for the `msg.sender`\\r\\n     * @dev Uses the `depositFor` function\\r\\n     * @param amount The amount of tokens to stake\\r\\n     * @param lockPeriod The locking period ( in seconds )\\r\\n     */\\r\\n    function stake(uint256 amount, uint64 lockPeriod)\\r\\n        public\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        address account = msg.sender;\\r\\n\\r\\n        depositFor(account, amount, uint256(lockPeriod));\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to stake an `amount` of tokens for a `lockPeriod` for an `account`\\r\\n     * @dev Will make a safe transfer from the `account` and calculate the weight and create a deposit\\r\\n     * @param account The account that we will stake the tokens for\\r\\n     * @param amount The amount of tokens to stake\\r\\n     * @param lockPeriod The locking period ( in seconds )\\r\\n     */\\r\\n    function depositFor(\\r\\n        address account,\\r\\n        uint256 amount,\\r\\n        uint256 lockPeriod\\r\\n    ) public override returns (bool) {\\r\\n        require(account != address(0), \\\"Address must not be 0\\\");\\r\\n        require(amount > 0, \\\"Amount must be superior to zero\\\");\\r\\n        require(\\r\\n            lockPeriod >= minStakingTime,\\r\\n            \\\"Staking time less than minimum required\\\"\\r\\n        );\\r\\n        require(\\r\\n            lockPeriod <= maxStakingTime,\\r\\n            \\\"Staking time greater than maximum required\\\"\\r\\n        );\\r\\n\\r\\n        // Update rewards\\r\\n        if (canUpdateRewards()) {\\r\\n            updateRewards();\\r\\n        }\\r\\n\\r\\n        // Process rewards with no update to not do it twice\\r\\n        _processRewards(account, false);\\r\\n\\r\\n        stakedToken.safeTransferFrom(msg.sender, address(this), amount);\\r\\n\\r\\n        User storage user = users[account];\\r\\n\\r\\n        uint64 _lockPeriod = uint64(lockPeriod);\\r\\n\\r\\n        uint256 weight = calculateUserWeight(amount, _lockPeriod);\\r\\n\\r\\n        uint64 lockStart = uint64(block.timestamp);\\r\\n        uint64 lockEnd = lockStart + _lockPeriod;\\r\\n\\r\\n        Deposit memory deposit = Deposit({\\r\\n            amount: amount,\\r\\n            weight: weight,\\r\\n            lockedFrom: lockStart,\\r\\n            lockedUntil: lockEnd,\\r\\n            isRewards: false,\\r\\n            isClaimed: false\\r\\n        });\\r\\n\\r\\n        // Update user and total records\\r\\n        user.deposits.push(deposit);\\r\\n        _increaseUserRecords(user, amount, weight, true);\\r\\n\\r\\n        emit Stake(account, amount, _lockPeriod);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to calculate and pay pending rewards to the `msg.sender`\\r\\n     *\\r\\n     * @dev Automatically updates rewards before processing them\\r\\n     * @dev When there are no rewards to calculate, throw error\\r\\n     * @dev If `rewardsLockingPeriod` is set, rewards are staked in a new deposit,\\r\\n     *      otherwise they are transmitted directly to the user (as for flash pools)\\r\\n     *\\r\\n     * @return userPendingRewards rewards calculated and optionally re-staked\\r\\n     */\\r\\n    function processRewards()\\r\\n        public\\r\\n        override\\r\\n        returns (uint256 userPendingRewards)\\r\\n    {\\r\\n        userPendingRewards = _processRewards(msg.sender, true);\\r\\n        require(userPendingRewards != 0, \\\"No rewards to process\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to unstake several deposits for the `msg.sender`\\r\\n     *\\r\\n     * @dev ProcessRewards and transfer all deposits to the user\\r\\n     * @dev Revert if the `lockedUntil` of a deposit has not passed\\r\\n     *\\r\\n     * @param depositIds Array of deposit id that will be unstaked\\r\\n     */\\r\\n    function unstake(uint256[] memory depositIds)\\r\\n        public\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        // Update rewards\\r\\n        if (canUpdateRewards()) {\\r\\n            updateRewards();\\r\\n        }\\r\\n\\r\\n        // Process rewards with no update to not do it twice\\r\\n        _processRewards(msg.sender, false);\\r\\n\\r\\n        User storage user = users[msg.sender];\\r\\n\\r\\n        uint256 totalAmount = 0;\\r\\n        uint256 totalWeight = 0;\\r\\n        for (uint256 i = 0; i < depositIds.length; i++) {\\r\\n            (uint256 amount, uint256 weight) = _drainDeposit(\\r\\n                user,\\r\\n                depositIds[i]\\r\\n            );\\r\\n            totalAmount = totalAmount.add(amount);\\r\\n            totalWeight = totalWeight.add(weight);\\r\\n        }\\r\\n\\r\\n        // Update user and total records\\r\\n        _decreaseUserRecords(user, totalAmount, totalWeight, true);\\r\\n\\r\\n        // Transfer tokens\\r\\n        rewardToken.safeTransfer(msg.sender, totalAmount);\\r\\n\\r\\n        emit Unstake(msg.sender, totalAmount, depositIds);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to unstake a `depositId` for the `msg.sender`\\r\\n     *\\r\\n     * @dev ProcessRewards and transfer all the deposit to the user\\r\\n     * @dev Revert if the `lockedUntil` of the deposit has not passed\\r\\n     *\\r\\n     * @param depositId The deposit id that will be unstaked\\r\\n     */\\r\\n    function unstake(uint256 depositId) public override returns (bool) {\\r\\n        // Update rewards\\r\\n        if (canUpdateRewards()) {\\r\\n            updateRewards();\\r\\n        }\\r\\n\\r\\n        // Process rewards with no update to not do it twice\\r\\n        _processRewards(msg.sender, false);\\r\\n\\r\\n        User storage user = users[msg.sender];\\r\\n        (uint256 amount, uint256 weight) = _drainDeposit(user, depositId);\\r\\n\\r\\n        // Update user and total records\\r\\n        _decreaseUserRecords(user, amount, weight, true);\\r\\n\\r\\n        // Transfer tokens\\r\\n        stakedToken.safeTransfer(msg.sender, amount);\\r\\n\\r\\n        emit Unstake(msg.sender, amount, depositId);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to update the rewards per weight and the total rewards\\r\\n     * @dev Must be called before each total weight change\\r\\n     */\\r\\n    function updateRewards() public override returns (bool) {\\r\\n        require(canUpdateRewards(), \\\"initBlock is not reached\\\");\\r\\n\\r\\n        if (totalUsersWeight > 0) {\\r\\n            _rewardsPerWeight = updatedRewardsPerWeight();\\r\\n            _totalRewards = updatedTotalRewards();\\r\\n        }\\r\\n\\r\\n        lastRewardsUpdate = block.number;\\r\\n\\r\\n        emit RewardsPerWeightUpdated(_rewardsPerWeight);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to change the rewardsPerBlock\\r\\n     *\\r\\n     * @dev Will update rewards before changing the rewardsPerBlock\\r\\n     * @dev Can only by call by owner (the factory if deployed by it)\\r\\n     * @dev Revert if the new rewards per block is less than the previous one\\r\\n     *\\r\\n     * @param rewardsPerBlock_ the new value for rewardsPerBlock ( must be superior to old value )\\r\\n     */\\r\\n    function setRewardsPerBlock(uint256 rewardsPerBlock_)\\r\\n        public\\r\\n        override\\r\\n        onlyOwner\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(\\r\\n            rewardsPerBlock_ > rewardsPerBlock,\\r\\n            \\\"Rewards per block must be greater than the previous one\\\"\\r\\n        );\\r\\n\\r\\n        if (canUpdateRewards()) {\\r\\n            updateRewards();\\r\\n        }\\r\\n\\r\\n        rewardsPerBlock = rewardsPerBlock_;\\r\\n\\r\\n        emit RewardsPerBlockChanged(rewardsPerBlock);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * ========================\\r\\n     *           Views\\r\\n     * ========================\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @notice Used to get the remaining allocated tokens\\r\\n     */\\r\\n    function remainingAllocatedTokens() public view override returns (uint256) {\\r\\n        uint256 balance = rewardToken.balanceOf(address(this));\\r\\n\\r\\n        uint256 remainingTokens = balance.sub(\\r\\n            totalTokensStaked.add(updatedTotalRewards()).sub(\\r\\n                totalProcessedRewards\\r\\n            )\\r\\n        );\\r\\n\\r\\n        return remainingTokens;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to get the pending rewards for an `account`\\r\\n     * @param account The account to calculate the pending rewards for\\r\\n     * @return the rewards that the user has but which have not been processed\\r\\n     */\\r\\n    function pendingRewards(address account)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        if (block.number < initBlock || users[account].totalStaked == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // All rewards according to account weight\\r\\n        uint256 _pendingRewards = weightToReward(\\r\\n            users[account].totalWeight,\\r\\n            updatedRewardsPerWeight()\\r\\n        );\\r\\n\\r\\n        // Remove rewards released before accounts allocations or that they have already been processed\\r\\n        _pendingRewards = _pendingRewards.sub(users[account].missingRewards);\\r\\n\\r\\n        return _pendingRewards;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Can we call the rewards update function or is it useless and will cause an error\\r\\n     */\\r\\n    function canUpdateRewards() public view override returns (bool) {\\r\\n        return block.number >= initBlock;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to get the balance for an `account`\\r\\n     * @param account The account to get the balance for\\r\\n     */\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        User memory user = users[account];\\r\\n        return user.totalStaked.add(pendingRewards(account));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to get the deposit (`depositId`) for an `account`\\r\\n     * @param account The account to get the balance for\\r\\n     * @param depositId The deposit id the get\\r\\n     */\\r\\n    function getDeposit(address account, uint256 depositId)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (Deposit memory)\\r\\n    {\\r\\n        User memory user = users[account];\\r\\n\\r\\n        require(depositId < user.deposits.length, \\\"Deposit does not exist\\\");\\r\\n\\r\\n        Deposit memory deposit = user.deposits[depositId];\\r\\n\\r\\n        return deposit;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to get the length of deposits for an `account`\\r\\n     * @param account The account to get the balance for\\r\\n     */\\r\\n    function getDepositsLength(address account)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        User memory user = users[account];\\r\\n\\r\\n        return user.deposits.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to get the User data for an `account`\\r\\n     * @param account The account address\\r\\n     */\\r\\n    function getUser(address account)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (User memory)\\r\\n    {\\r\\n        User memory user = users[account];\\r\\n\\r\\n        return user;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the updated rewards\\r\\n     * @dev Used to calculate the rewards for last period ( in blocks ) without updating them\\r\\n     */\\r\\n    function updatedRewards() public view override returns (uint256) {\\r\\n        if (block.number < initBlock) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 _lastRewardsUpdate = lastRewardsUpdate > 0\\r\\n            ? lastRewardsUpdate\\r\\n            : initBlock;\\r\\n\\r\\n        uint256 passedBlocks = block.number.sub(_lastRewardsUpdate);\\r\\n\\r\\n        uint256 cumulatedRewards = passedBlocks.mul(rewardsPerBlock);\\r\\n\\r\\n        /**\\r\\n         * Calculate old remaining tokens\\r\\n         * Used to check if we have enough tokens to reward\\r\\n         */\\r\\n        uint256 balance = rewardToken.balanceOf(address(this));\\r\\n\\r\\n        uint256 oldRemainingTokens = balance.sub(\\r\\n            totalTokensStaked.add(_totalRewards).sub(totalProcessedRewards)\\r\\n        );\\r\\n\\r\\n        return\\r\\n            cumulatedRewards > oldRemainingTokens\\r\\n                ? oldRemainingTokens\\r\\n                : cumulatedRewards;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the total updated rewards\\r\\n     * @dev Used to calculate the rewards from the init block without updating them\\r\\n     */\\r\\n    function updatedTotalRewards() public view override returns (uint256) {\\r\\n        uint256 _updatedTotalRewards = _totalRewards.add(updatedRewards());\\r\\n\\r\\n        return _updatedTotalRewards;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the updated rewards per weight\\r\\n     * @dev Used to calculate `_rewardsPerWeight` without updating them\\r\\n     */\\r\\n    function updatedRewardsPerWeight() public view override returns (uint256) {\\r\\n        uint256 cumulatedRewards = updatedRewards();\\r\\n\\r\\n        cumulatedRewards = cumulatedRewards.mul(WEIGHT_MULTIPLIER);\\r\\n\\r\\n        uint256 newRewardsPerWeight = cumulatedRewards.div(\\r\\n            totalUsersWeight > 0 ? totalUsersWeight : 1\\r\\n        );\\r\\n\\r\\n        newRewardsPerWeight = newRewardsPerWeight.add(_rewardsPerWeight);\\r\\n\\r\\n        return newRewardsPerWeight;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate the weight based on `amount` and `stakingTime`\\r\\n     * @param amount The staking amount\\r\\n     * @param stakingTime The staking time\\r\\n     */\\r\\n    function calculateUserWeight(uint256 amount, uint64 stakingTime)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return\\r\\n            amount\\r\\n                .mul(\\r\\n                    _getRange(\\r\\n                        minStakingTime,\\r\\n                        uint256(minWeightMultiplier).mul(WEIGHT_MULTIPLIER),\\r\\n                        maxStakingTime,\\r\\n                        uint256(maxWeightMultiplier).mul(WEIGHT_MULTIPLIER),\\r\\n                        uint256(stakingTime)\\r\\n                    )\\r\\n                )\\r\\n                .div(WEIGHT_MULTIPLIER);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts stake weight to reward value, applying the division on weight\\r\\n     *\\r\\n     * @param weight_ stake weight\\r\\n     * @param rewardsPerWeight_ reward per weight\\r\\n     * @return reward value normalized with WEIGHT_MULTIPLIER\\r\\n     */\\r\\n    function weightToReward(uint256 weight_, uint256 rewardsPerWeight_)\\r\\n        public\\r\\n        pure\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return weight_.mul(rewardsPerWeight_).div(WEIGHT_MULTIPLIER);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * ========================\\r\\n     *     Private functions\\r\\n     * ========================\\r\\n     */\\r\\n\\r\\n    /**\\r\\n     * @notice Update the user and total records by increasing the weight and the total staked\\r\\n     *\\r\\n     * @dev Increase user's `totalStaked`, `totalWeight` and reset `missingRewards`\\r\\n     * @dev Increase `totalUsersWeight` and `totalTokensStaked`\\r\\n     * @dev Rewards MUST be updated before and processed for this users\\r\\n     *\\r\\n     * @param user The user to update\\r\\n     * @param amount The amount to increase\\r\\n     * @param weight The weight to increase\\r\\n     */\\r\\n    function _increaseUserRecords(\\r\\n        User storage user,\\r\\n        uint256 amount,\\r\\n        uint256 weight,\\r\\n        bool updateMissingRewards\\r\\n    ) internal returns (bool) {\\r\\n        // Update user records\\r\\n        user.totalStaked = user.totalStaked.add(amount);\\r\\n        user.totalWeight = user.totalWeight.add(weight);\\r\\n\\r\\n        if (updateMissingRewards) {\\r\\n            // Reset the missingRewards of the user\\r\\n            user.missingRewards = weightToReward(\\r\\n                user.totalWeight,\\r\\n                _rewardsPerWeight\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // Update total records\\r\\n        totalUsersWeight = totalUsersWeight.add(weight);\\r\\n        totalTokensStaked = totalTokensStaked.add(amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update the user and total records by decreasing the weight and the total staked\\r\\n     *\\r\\n     * @dev Decrease user's `totalStaked`, `totalWeight` and reset `missingRewards`\\r\\n     * @dev Decrease `totalUsersWeight` and `totalTokensStaked`\\r\\n     * @dev Rewards MUST be updated before and processed for this users\\r\\n     * @dev If `updateMissingRewards` is false, `missingRewards` rewards MUST be updated after\\r\\n     *\\r\\n     * @param user The user to update\\r\\n     * @param amount The amount to decrease\\r\\n     * @param weight The weight to decrease\\r\\n     * @param updateMissingRewards If we have to update the missing rewards of the user\\r\\n     */\\r\\n    function _decreaseUserRecords(\\r\\n        User storage user,\\r\\n        uint256 amount,\\r\\n        uint256 weight,\\r\\n        bool updateMissingRewards\\r\\n    ) internal returns (bool) {\\r\\n        // Update user records\\r\\n        user.totalStaked = user.totalStaked.sub(amount);\\r\\n        user.totalWeight = user.totalWeight.sub(weight);\\r\\n\\r\\n        if (updateMissingRewards) {\\r\\n            // Reset the missingRewards of the user\\r\\n            user.missingRewards = weightToReward(\\r\\n                user.totalWeight,\\r\\n                _rewardsPerWeight\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // Update total records\\r\\n        totalUsersWeight = totalUsersWeight.sub(weight);\\r\\n        totalTokensStaked = totalTokensStaked.sub(amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Remove a deposit if the locking is over and return its amount and weight\\r\\n     *\\r\\n     * @dev Set the deposit's `isClaimed` to true\\r\\n     * @dev Revert if `depositId` does not exist or if the `lockedUntil`\\r\\n     *      of the deposit has not passed\\r\\n     * @dev Does not update records : rewards MUST be updated before and\\r\\n     *      user's profile and total record MUST be updated after\\r\\n     *\\r\\n     * @param user The user who owns the deposit\\r\\n     * @param depositId The deposit id that will be drain\\r\\n     */\\r\\n    function _drainDeposit(User storage user, uint256 depositId)\\r\\n        internal\\r\\n        returns (uint256 amount, uint256 weight)\\r\\n    {\\r\\n        require(depositId < user.deposits.length, \\\"Deposit does not exist\\\");\\r\\n        Deposit storage deposit = user.deposits[depositId];\\r\\n        require(!deposit.isClaimed, \\\"Deposit already claimed\\\");\\r\\n        require(\\r\\n            deposit.lockedUntil <= uint64(block.timestamp),\\r\\n            \\\"Staking of this deposit is not yet complete\\\"\\r\\n        );\\r\\n\\r\\n        amount = deposit.amount;\\r\\n        weight = deposit.weight;\\r\\n\\r\\n        // Claim deposit\\r\\n        deposit.isClaimed = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to calculate and pay pending rewards to the `_staker`\\r\\n     *\\r\\n     * @dev When there are no rewards to calculate, function doesn't throw and exits silently\\r\\n     * @dev If `rewardsLockingPeriod` is set, rewards are staked in a new deposit,\\r\\n     *      otherwise they are transmitted directly to the user (as for flash pools)\\r\\n     * @dev If `_withUpdate` is false, rewards MUST be updated before and user's missing rewards\\r\\n     *      MUST be reset after\\r\\n     * @dev Executed internally in `unstake`, `depositFor`, `updateStakeLock` and `processRewards` functions\\r\\n     *\\r\\n     * @param _staker Staker address\\r\\n     * @param _withUpdate If we need to update rewards and user's missing rewards in this function\\r\\n     *\\r\\n     * @return userPendingRewards rewards calculated and optionally re-staked\\r\\n     */\\r\\n\\r\\n    function _processRewards(address _staker, bool _withUpdate)\\r\\n        internal\\r\\n        returns (uint256 userPendingRewards)\\r\\n    {\\r\\n        if (_withUpdate && canUpdateRewards()) {\\r\\n            // Update rewards before use them if it hasn't been done before\\r\\n            updateRewards();\\r\\n        }\\r\\n\\r\\n        userPendingRewards = pendingRewards(_staker);\\r\\n        if (userPendingRewards == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        User storage user = users[_staker];\\r\\n\\r\\n        // If no locking/staking for rewards\\r\\n        if (rewardsLockingPeriod == 0) {\\r\\n            // transfer tokens for user\\r\\n            rewardToken.safeTransfer(_staker, userPendingRewards);\\r\\n        } else {\\r\\n            // Stake rewards\\r\\n            uint256 weight = calculateUserWeight(\\r\\n                userPendingRewards,\\r\\n                rewardsLockingPeriod\\r\\n            );\\r\\n\\r\\n            uint64 lockStart = uint64(block.timestamp);\\r\\n            uint64 lockEnd = lockStart + rewardsLockingPeriod;\\r\\n\\r\\n            Deposit memory deposit = Deposit({\\r\\n                amount: userPendingRewards,\\r\\n                weight: weight,\\r\\n                lockedFrom: lockStart,\\r\\n                lockedUntil: lockEnd,\\r\\n                isRewards: true,\\r\\n                isClaimed: false\\r\\n            });\\r\\n\\r\\n            // Update user and total records\\r\\n            user.deposits.push(deposit);\\r\\n            _increaseUserRecords(user, userPendingRewards, weight, false);\\r\\n        }\\r\\n\\r\\n        user.releasedRewards = user.releasedRewards.add(userPendingRewards);\\r\\n        totalProcessedRewards = totalProcessedRewards.add(userPendingRewards);\\r\\n\\r\\n        if (_withUpdate) {\\r\\n            // Reset the missingRewards of the user if it will not be done next\\r\\n            user.missingRewards = weightToReward(\\r\\n                user.totalWeight,\\r\\n                _rewardsPerWeight\\r\\n            );\\r\\n        }\\r\\n\\r\\n        emit ProcessRewards(_staker, userPendingRewards);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to get the range for the staking time\\r\\n     * @param x1 The minimum staking time\\r\\n     * @param y1 The minimum weight time\\r\\n     * @param x2 The maximum staking time\\r\\n     * @param y2 The maximum weight time\\r\\n     * @param a The actual staking time\\r\\n     */\\r\\n    function _getRange(\\r\\n        uint256 x1,\\r\\n        uint256 y1,\\r\\n        uint256 x2,\\r\\n        uint256 y2,\\r\\n        uint256 a\\r\\n    ) internal pure returns (uint256) {\\r\\n        return y1.add(a.sub(x1).mul(y2.sub(y1)).div(x2.sub(x1)));\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/MechaniumUtils/MechaniumCanReleaseUnintendedOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./IMechaniumCanReleaseUnintendedOwnable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title MechaniumCanReleaseUnintendedOwnable - Abstract class for util can release unintended tokens smart contract\\r\\n * @author EthernalHorizons - <https://ethernalhorizons.com/>\\r\\n * @custom:project-website  https://mechachain.io/\\r\\n * @custom:security-contact contracts@ethernalhorizons.com\\r\\n */\\r\\nabstract contract MechaniumCanReleaseUnintendedOwnable is\\r\\n    Ownable,\\r\\n    IMechaniumCanReleaseUnintendedOwnable\\r\\n{\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /**\\r\\n     * @notice Event emitted when release unintended `amount` of `token` for `account` address\\r\\n     */\\r\\n    event ReleaseUintentedTokens(\\r\\n        address indexed token,\\r\\n        address indexed account,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    /// Locked tokens that can't be released for contract\\r\\n    mapping(address => bool) private _lockedTokens;\\r\\n\\r\\n    /// fallback payable function ( used to receive ETH in tests )\\r\\n    fallback() external payable {}\\r\\n\\r\\n    /// receive payable function ( used to receive ETH in tests )\\r\\n    receive() external payable {}\\r\\n\\r\\n    /**\\r\\n     * @notice Add a locked `token_` ( can't be released )\\r\\n     */\\r\\n    function _addLockedToken(address token_) internal {\\r\\n        _lockedTokens[token_] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Release an `amount` of `token` to an `account`\\r\\n     * This function is used to prevent unintended tokens that got sent to be stuck on the contract\\r\\n     * @param token The address of the token contract (zero address for claiming native coins).\\r\\n     * @param account The address of the tokens/coins receiver.\\r\\n     * @param amount Amount to claim.\\r\\n     */\\r\\n    function releaseUnintended(\\r\\n        address token,\\r\\n        address account,\\r\\n        uint256 amount\\r\\n    ) public override onlyOwner returns (bool) {\\r\\n        require(amount > 0, \\\"Amount must be superior to zero\\\");\\r\\n        require(\\r\\n            account != address(0) && account != address(this),\\r\\n            \\\"Amount must be superior to zero\\\"\\r\\n        );\\r\\n        require(!_lockedTokens[token], \\\"Token can't be released\\\");\\r\\n\\r\\n        if (token == address(0)) {\\r\\n            require(\\r\\n                address(this).balance >= amount,\\r\\n                \\\"Address: insufficient balance\\\"\\r\\n            );\\r\\n            (bool success, ) = account.call{value: amount}(\\\"\\\");\\r\\n            require(\\r\\n                success,\\r\\n                \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n            );\\r\\n        } else {\\r\\n            IERC20 customToken = IERC20(token);\\r\\n            require(\\r\\n                customToken.balanceOf(address(this)) >= amount,\\r\\n                \\\"Address: insufficient balance\\\"\\r\\n            );\\r\\n            customToken.safeTransfer(account, amount);\\r\\n        }\\r\\n\\r\\n        emit ReleaseUintentedTokens(token, account, amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/MechaniumUtils/IMechaniumCanReleaseUnintendedOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\n/**\\r\\n * @dev Mechanium can release unintended ( ownable ) smart contract interface\\r\\n * @author EthernalHorizons - <https://ethernalhorizons.com/>\\r\\n * @custom:project-website  https://mechachain.io/\\r\\n * @custom:security-contact contracts@ethernalhorizons.com\\r\\n */\\r\\ninterface IMechaniumCanReleaseUnintendedOwnable {\\r\\n    /**\\r\\n     * @dev Release unintended tokens sent to smart contract ( only owner )\\r\\n     * This function is used to prevent unintended tokens that got sent to be stuck on the contract\\r\\n     * @param token The address of the token contract (zero address for claiming native coins).\\r\\n     * @param account The address of the tokens/coins receiver.\\r\\n     * @param amount Amount to claim.\\r\\n     */\\r\\n    function releaseUnintended(\\r\\n        address token,\\r\\n        address account,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/MechaniumStaking/IMechaniumStakingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\n/**\\r\\n * @title Staking pool smart contract interface\\r\\n * @author EthernalHorizons - <https://ethernalhorizons.com/>\\r\\n * @custom:project-website  https://mechachain.io/\\r\\n * @custom:security-contact contracts@ethernalhorizons.com\\r\\n */\\r\\ninterface IMechaniumStakingPool {\\r\\n    struct User {\\r\\n        uint256 totalStaked;\\r\\n        uint256 totalWeight;\\r\\n        uint256 missingRewards;\\r\\n        uint256 releasedRewards;\\r\\n        Deposit[] deposits;\\r\\n    }\\r\\n\\r\\n    struct Deposit {\\r\\n        uint256 amount;\\r\\n        uint256 weight;\\r\\n        uint64 lockedFrom;\\r\\n        uint64 lockedUntil;\\r\\n        bool isRewards;\\r\\n        bool isClaimed;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to stake an `amount` of tokens for a `lockPeriod` for the `msg.sender`\\r\\n     */\\r\\n    function stake(uint256 amount, uint64 lockPeriod) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Used to stake an `amount` of tokens for a `lockPeriod` for an `account`\\r\\n     */\\r\\n    function depositFor(\\r\\n        address account,\\r\\n        uint256 amount,\\r\\n        uint256 lockPeriod\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Used to calculate and pay pending rewards to the `msg.sender`\\r\\n     */\\r\\n    function processRewards() external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Used to unstake several deposits for the `msg.sender`\\r\\n     */\\r\\n    function unstake(uint256[] memory depositIds) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Used to unstake a `depositId` for the `msg.sender`\\r\\n     */\\r\\n    function unstake(uint256 depositId) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Used to update the rewards per weight and the total rewards\\r\\n     */\\r\\n    function updateRewards() external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Used to change the rewardsPerBlock\\r\\n     */\\r\\n    function setRewardsPerBlock(uint256 rewardsPerBlock)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Used to get the remaining allocated tokens\\r\\n     */\\r\\n    function remainingAllocatedTokens() external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Used to get the pending rewards for an `account`\\r\\n     */\\r\\n    function pendingRewards(address account) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Can we call the rewards function or is it useless and will cause an error\\r\\n     */\\r\\n    function canUpdateRewards() external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Used to get the balance for an `account`\\r\\n     */\\r\\n    function balanceOf(address account) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Used to get the deposit (`depositId`) for an `account`\\r\\n     */\\r\\n    function getDeposit(address account, uint256 depositId)\\r\\n        external\\r\\n        returns (Deposit memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Used to get the length of deposits for an `account`\\r\\n     */\\r\\n    function getDepositsLength(address account) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Used to get the User data for an `account`\\r\\n     */\\r\\n    function getUser(address account) external returns (User memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the updated rewards\\r\\n     */\\r\\n    function updatedRewards() external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the total updated rewards\\r\\n     */\\r\\n    function updatedTotalRewards() external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the updated rewards per weight\\r\\n     */\\r\\n    function updatedRewardsPerWeight() external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate the weight based on `amount` and `stakingTime`\\r\\n     */\\r\\n    function calculateUserWeight(uint256 amount, uint64 stakingTime)\\r\\n        external\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Converts stake weight to reward value, applying the division on weight\\r\\n     */\\r\\n    function weightToReward(uint256 _weight, uint256 _rewardsPerWeight)\\r\\n        external\\r\\n        returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakedToken_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken_\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"initBlock_\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"minStakingTime_\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxStakingTime_\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"minWeightMultiplier_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxWeightMultiplier_\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"rewardsLockingPeriod_\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"rewardsPerBlock_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"ProcessRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReleaseUintentedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsPerBlock\",\"type\":\"uint256\"}],\"name\":\"RewardsPerBlockChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewardsPerWeight\",\"type\":\"uint256\"}],\"name\":\"RewardsPerWeightUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"lockPeriod\",\"type\":\"uint64\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"lockPeriod\",\"type\":\"uint64\"}],\"name\":\"StakeLockUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"depositIds\",\"type\":\"uint256[]\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"WEIGHT_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"stakingTime\",\"type\":\"uint64\"}],\"name\":\"calculateUserWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canUpdateRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"name\":\"getDeposit\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"lockedFrom\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lockedUntil\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isRewards\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isClaimed\",\"type\":\"bool\"}],\"internalType\":\"struct IMechaniumStakingPool.Deposit\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getDepositsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"missingRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedRewards\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"lockedFrom\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lockedUntil\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isRewards\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isClaimed\",\"type\":\"bool\"}],\"internalType\":\"struct IMechaniumStakingPool.Deposit[]\",\"name\":\"deposits\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IMechaniumStakingPool.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initBlock\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardsUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStakingTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWeightMultiplier\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakingTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minWeightMultiplier\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userPendingRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"releaseUnintended\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingAllocatedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsLockingPeriod\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardsPerBlock_\",\"type\":\"uint256\"}],\"name\":\"setRewardsPerBlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"lockPeriod\",\"type\":\"uint64\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalProcessedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsersWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"depositIds\",\"type\":\"uint256[]\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatedRewardsPerWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatedTotalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"missingRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weight_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsPerWeight_\",\"type\":\"uint256\"}],\"name\":\"weightToReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MechaniumStakingPool", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000acd4e2d936be9b16c01848a3742a34b3d5a5bdfa000000000000000000000000acd4e2d936be9b16c01848a3742a34b3d5a5bdfa00000000000000000000000000000000000000000000000000000000018dcfbc000000000000000000000000000000000000000000000000000000000076a7000000000000000000000000000000000000000000000000000000000002514300000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000ed4e00000000000000000000000000000000000000000000000000031f8b17b50357d0", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}