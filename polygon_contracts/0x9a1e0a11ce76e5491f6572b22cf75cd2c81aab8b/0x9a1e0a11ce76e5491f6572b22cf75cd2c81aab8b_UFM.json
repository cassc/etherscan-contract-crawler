{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nabstract contract ERC20 {\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a >= b) return a;\r\n        return b;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(a >=0 && b>=0, \"SafeMath: Cannot have negative numbers\");\r\n        if (a <= b) return a;\r\n        return b;\r\n    }\r\n}\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value : value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n// address constant USDT = 0xc2132D05D31c914a87C6611C10748AEb04B58e8F;\r\n// address constant USDT = 0x1Ac440494b797c8Ae6943D6251cff01500A3aDd0; test\r\n\r\naddress constant finance = 0xf7457cE2628Cb32C1450f742D34f3109E31fc5F3;\r\n\r\ncontract UFM {\r\n\r\n    address private _owner;\r\n\r\n    address private _admin;\r\n\r\n    mapping(uint256 => address) fp_token_contract;\r\n    mapping(uint256 => uint256) fp_quantity;\r\n    mapping(uint256 => uint256) fp_quantity_sold;\r\n\r\n\r\n    event buy(address indexed sender, uint256 indexed fp_id, address indexed token_contract, uint256 amount);\r\n    event update_fp(uint256 indexed fp_id, address indexed token_contract, uint256 fp_quantity, uint256 fp_quantity_sold);\r\n\r\n    constructor () {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(_owner == msg.sender || _admin == msg.sender, \"Ownable: caller is not the admin\");\r\n        _;\r\n    }\r\n\r\n    function setAdmin(address __admin) external onlyOwner {\r\n        _admin = __admin;\r\n    }\r\n\r\n    function registeredFp(uint256 __fp_id, address __token_contract, uint256 __fp_quantity) external onlyAdmin {\r\n        require(fp_token_contract[__fp_id] == address(0), \"Financial package has been registered\");\r\n        fp_token_contract[__fp_id] = __token_contract;\r\n        fp_quantity[__fp_id] = __fp_quantity;\r\n        fp_quantity_sold[__fp_id] = 0;\r\n        emit update_fp(__fp_id, __token_contract, fp_quantity[__fp_id], fp_quantity_sold[__fp_id]);\r\n    }\r\n\r\n    function addAllowance(uint256 __fp_id, uint256 __fp_quantity) external onlyAdmin {\r\n        require(fp_token_contract[__fp_id] != address(0), \"Financial packages do not exist\");\r\n        fp_quantity[__fp_id] += __fp_quantity;\r\n        emit update_fp(__fp_id, fp_token_contract[__fp_id], fp_quantity[__fp_id], fp_quantity_sold[__fp_id]);\r\n    }\r\n\r\n    function decAllowance(uint256 __fp_id, uint256 __fp_quantity) external onlyAdmin {\r\n        require(fp_token_contract[__fp_id] != address(0), \"Financial packages do not exist\");\r\n        if (fp_quantity[__fp_id] >= fp_quantity_sold[__fp_id] + __fp_quantity)\r\n        {\r\n            fp_quantity[__fp_id] -= __fp_quantity;\r\n        }\r\n        else  \r\n        {\r\n            fp_quantity[__fp_id] = fp_quantity_sold[__fp_id];\r\n        }\r\n        emit update_fp(__fp_id, fp_token_contract[__fp_id], fp_quantity[__fp_id], fp_quantity_sold[__fp_id]);\r\n    }\r\n\r\n    function create(uint256 __fp_id, uint256 __amount) external {\r\n        require(fp_quantity[__fp_id] >= fp_quantity_sold[__fp_id] + __amount, \"Financial package inventory is insufficient\");\r\n        fp_quantity_sold[__fp_id] += __amount;\r\n        TransferHelper.safeTransferFrom(fp_token_contract[__fp_id], msg.sender, finance, __amount);\r\n        emit buy(msg.sender, __fp_id, fp_token_contract[__fp_id], __amount);\r\n        emit update_fp(__fp_id, fp_token_contract[__fp_id], fp_quantity[__fp_id], fp_quantity_sold[__fp_id]);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fp_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token_contract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fp_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token_contract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fp_quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fp_quantity_sold\",\"type\":\"uint256\"}],\"name\":\"update_fp\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__fp_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__fp_quantity\",\"type\":\"uint256\"}],\"name\":\"addAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__fp_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__amount\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__fp_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__fp_quantity\",\"type\":\"uint256\"}],\"name\":\"decAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__fp_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"__token_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"__fp_quantity\",\"type\":\"uint256\"}],\"name\":\"registeredFp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UFM", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bc51ff0f94ed02ceabe5454c6c6566013cb7ae4d8607a793dc1ca63f0564f3de"}