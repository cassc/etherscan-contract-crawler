{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./interfaces/IStaking.sol\\\";\\nimport \\\"./interfaces/ISquads.sol\\\";\\nimport \\\"./interfaces/IReferralManager.sol\\\";\\n\\ncontract Staking is IStaking, AccessControl {\\n    StakingPlan[] public stakingPlans;\\n\\n    mapping(uint256 => mapping(address => Staker)) private users;\\n\\n    uint256 public BASE_POINTS_DIVIDER = 1000;\\n    uint256 public TIME_STEP = 1 days;\\n    uint256 public MIN_STAKE_LIMIT = 1 * 1e17; // 0.1 Token\\n\\n    bool public shouldAddReferrerOnToken2Stake;\\n\\n    ERC20Burnable public token1;\\n    ERC20Burnable public token2;\\n    IReferralManager public referralManager;\\n    ISquads public squadsManager;\\n    address private rewardPool;\\n\\n    event Staked(\\n        address indexed user,\\n        uint256 indexed stakingPlanId,\\n        uint256 indexed stakeIndex,\\n        uint256 amount,\\n        uint256 profit,\\n        bool isToken2,\\n        uint256 timestamp\\n    );\\n    event Claimed(\\n        address indexed user,\\n        uint256 indexed stakingPlanId,\\n        uint256 indexed stakeIndex,\\n        uint256 amount,\\n        bool isToken2,\\n        uint256 timestamp\\n    );\\n    event StakingPlanCreated(\\n        uint256 indexed stakingPlanId,\\n        uint256 duration,\\n        uint256 apr\\n    );\\n    event ActivityChanged(uint256 indexed stakingPlanId, bool isActive);\\n    event Subscribed(address indexed user, uint256 indexed stakingPlanId);\\n\\n    constructor(\\n        address token1_,\\n        address token2_,\\n        address rewardPool_,\\n        address referralManager_,\\n        address squadsManager_\\n    ) {\\n        require(token1_ != address(0));\\n        require(token2_ != address(0));\\n        require(rewardPool_ != address(0));\\n        require(referralManager_ != address(0));\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        rewardPool = rewardPool_;\\n\\n        token1 = ERC20Burnable(token1_);\\n        token2 = ERC20Burnable(token2_);\\n        referralManager = IReferralManager(referralManager_);\\n        squadsManager = ISquads(squadsManager_);\\n    }\\n\\n    function deposit(\\n        uint256 planId,\\n        uint256 depositAmount,\\n        bool isToken2,\\n        address referrer\\n    ) public {\\n        require(stakingPlans[planId].isActive, \\\"Staking plan is not active\\\");\\n        require(\\n            hasSubscription(planId, _msgSender()),\\n            \\\"You are not subscriber\\\"\\n        );\\n        require(\\n            depositAmount >= MIN_STAKE_LIMIT,\\n            \\\"Stake amount less than minimum value\\\"\\n        );\\n        require(referrer != _msgSender(), \\\"Referrer can not be sender\\\");\\n        uint256 stakingProfit = calculateStakeProfit(planId, depositAmount);\\n\\n        require(\\n            stakingProfit <= token1.balanceOf(rewardPool),\\n            \\\"Not enough tokens for reward\\\"\\n        );\\n        if (isToken2) {\\n            token2.burnFrom(_msgSender(), depositAmount);\\n        } else {\\n            token1.transferFrom(_msgSender(), address(this), depositAmount);\\n        }\\n        token1.transferFrom(rewardPool, address(this), stakingProfit);\\n\\n        StakingPlan storage plan = stakingPlans[planId];\\n        Staker storage user = users[planId][_msgSender()];\\n\\n        Stake memory newStake = Stake({\\n            amount: depositAmount,\\n            timeStart: getTimestamp(),\\n            timeEnd: getTimestamp() + plan.stakingDuration * TIME_STEP,\\n            apr: plan.apr,\\n            profit: stakingProfit,\\n            isClaimed: false,\\n            isToken2: isToken2\\n        });\\n\\n        user.stakes.push(newStake);\\n\\n        if (isToken2) {\\n            user.currentToken2Staked += depositAmount;\\n            plan.totalStakedToken2 += depositAmount;\\n            plan.currentToken2Locked += depositAmount;\\n            plan.totalStakesToken2No += 1;\\n        } else {\\n            user.currentToken1Staked += depositAmount;\\n            plan.totalStakedToken1 += depositAmount;\\n            plan.currentToken1Locked += depositAmount;\\n            plan.totalStakesToken1No += 1;\\n        }\\n\\n        // Referrals\\n        if (!isToken2 || shouldAddReferrerOnToken2Stake) {\\n            address userReferrer = referralManager.getUserReferrer(\\n                _msgSender()\\n            );\\n            if (userReferrer == address(0) && referrer != address(0)) {\\n                referralManager.setUserReferrer(_msgSender(), referrer);\\n                userReferrer = referralManager.getUserReferrer(_msgSender());\\n            }\\n            _assignRefRewards(\\n                planId,\\n                _msgSender(),\\n                stakingProfit,\\n                depositAmount\\n            );\\n\\n            // Squads\\n            if (address(squadsManager) != address(0)) {\\n                squadsManager.tryToAddMember(\\n                    planId,\\n                    userReferrer,\\n                    _msgSender(),\\n                    depositAmount\\n                );\\n            }\\n        }\\n        emit Staked(\\n            _msgSender(),\\n            planId,\\n            user.stakes.length - 1,\\n            newStake.amount,\\n            newStake.profit,\\n            newStake.isToken2,\\n            getTimestamp()\\n        );\\n    }\\n\\n    function withdraw(uint256 planId, uint256 stakeId) public {\\n        StakingPlan storage plan = stakingPlans[planId];\\n        Staker storage user = users[planId][_msgSender()];\\n        Stake storage stake = user.stakes[stakeId];\\n\\n        require(!stake.isClaimed, \\\"Stake is already claimed\\\");\\n        require(stake.timeEnd <= getTimestamp(), \\\"Stake is not ready yet\\\");\\n\\n        uint256 withdrawAmount = _getAvailableStakeReward(stake);\\n        stake.isClaimed = true;\\n\\n        token1.transfer(_msgSender(), withdrawAmount);\\n        user.totalClaimed += withdrawAmount;\\n        plan.totalClaimed += withdrawAmount;\\n        if (stake.isToken2) {\\n            user.currentToken2Staked -= stake.amount;\\n            plan.currentToken2Locked -= stake.amount;\\n        } else {\\n            user.currentToken1Staked -= stake.amount;\\n            plan.currentToken1Locked -= stake.amount;\\n        }\\n\\n        emit Claimed(\\n            _msgSender(),\\n            planId,\\n            stakeId,\\n            withdrawAmount,\\n            stake.isToken2,\\n            getTimestamp()\\n        );\\n    }\\n\\n    function withdrawAll(uint256 planId) public {\\n        Stake[] storage stakes = users[planId][_msgSender()].stakes;\\n\\n        for (uint256 i = 0; i < stakes.length; i++) {\\n            if (!stakes[i].isClaimed && stakes[i].timeEnd <= getTimestamp()) {\\n                withdraw(planId, i);\\n            }\\n        }\\n    }\\n\\n    function _assignRefRewards(\\n        uint256 planId,\\n        address depositSender,\\n        uint256 stakingReward,\\n        uint256 depositAmount\\n    ) internal {\\n        uint256 totalLevels = referralManager.getReferralLevels();\\n        address currentLevelUser = depositSender;\\n\\n        for (uint256 level = 1; level <= totalLevels; level++) {\\n            address referrer = referralManager.getUserReferrer(\\n                currentLevelUser\\n            );\\n\\n            if (referrer != address(0)) {\\n                uint256 refReward = 0;\\n                // REASONS:\\n                // 0 - full reward\\n                // 1 - no ref subscription\\n                // 2 - no user stake\\n                // 3 - trancated by user stake\\n                uint256 reason = 1;\\n\\n                if (referralManager.userHasSubscription(referrer, level)) {\\n                    refReward = referralManager.calculateRefReward(\\n                        stakingReward,\\n                        level\\n                    );\\n                    uint256 currentToken1Staked = users[planId][referrer]\\n                        .currentToken1Staked;\\n\\n                    if (currentToken1Staked == 0) {\\n                        reason = 2;\\n                    } else if (refReward > currentToken1Staked) {\\n                        reason = 3;\\n                    } else {\\n                        reason = 0;\\n                    }\\n\\n                    refReward = refReward <= currentToken1Staked\\n                        ? refReward\\n                        : currentToken1Staked;\\n                }\\n\\n                referralManager.addUserDividends(\\n                    IReferralManager.AddDividendsParams(\\n                        referrer,\\n                        refReward,\\n                        depositSender,\\n                        level,\\n                        depositAmount,\\n                        planId,\\n                        reason\\n                    )\\n                );\\n\\n                currentLevelUser = referrer;\\n            } else break;\\n        }\\n    }\\n\\n    function subscribe(uint256 planId) public {\\n        StakingPlan storage plan = stakingPlans[planId];\\n        require(plan.isActive, \\\"Staking plan is not active\\\");\\n\\n        token1.burnFrom(_msgSender(), plan.subscriptionCost);\\n        uint256 startDate = users[planId][_msgSender()].subscription <\\n            getTimestamp()\\n            ? getTimestamp()\\n            : users[planId][_msgSender()].subscription;\\n        users[planId][_msgSender()].subscription =\\n            startDate +\\n            plan.subscriptionDuration *\\n            TIME_STEP;\\n\\n        emit Subscribed(_msgSender(), planId);\\n    }\\n\\n    function addStakingPlan(\\n        uint256 subscriptionCost,\\n        uint256 subscriptionDuration,\\n        uint256 stakingDuration,\\n        uint256 apr\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(stakingDuration > 0, \\\"Insufficient duration\\\");\\n        require(apr > 0, \\\"Insufficient APR\\\");\\n\\n        StakingPlan memory plan = StakingPlan({\\n            stakingPlanId: stakingPlans.length,\\n            isActive: true,\\n            subscriptionCost: subscriptionCost,\\n            subscriptionDuration: subscriptionDuration,\\n            stakingDuration: stakingDuration,\\n            apr: apr,\\n            totalStakesToken1No: 0,\\n            totalStakesToken2No: 0,\\n            totalStakedToken1: 0,\\n            totalStakedToken2: 0,\\n            currentToken1Locked: 0,\\n            currentToken2Locked: 0,\\n            totalClaimed: 0\\n        });\\n\\n        stakingPlans.push(plan);\\n\\n        emit StakingPlanCreated(stakingPlans.length - 1, stakingDuration, apr);\\n    }\\n\\n    function calculateStakeProfit(uint256 planId, uint256 amount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            (((amount * stakingPlans[planId].apr) / 365) *\\n                stakingPlans[planId].stakingDuration) / BASE_POINTS_DIVIDER;\\n    }\\n\\n    function _getAvailableStakeReward(Stake storage stake)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (stake.timeStart == 0 || stake.isClaimed) return 0;\\n\\n        uint256 stakeReward = stake.isToken2\\n            ? stake.profit\\n            : stake.amount + stake.profit;\\n\\n        if (stake.timeEnd <= getTimestamp()) return stakeReward;\\n\\n        return\\n            ((getTimestamp() - stake.timeStart) * stakeReward) /\\n            (stake.timeEnd - stake.timeStart);\\n    }\\n\\n    // --------- Helper functions ---------\\n    function getStakingPlans() public view returns (StakingPlan[] memory) {\\n        return stakingPlans;\\n    }\\n\\n    function getUserPlanInfo(uint256 planId, address userAddress)\\n        public\\n        view\\n        returns (UserStakingInfo memory)\\n    {\\n        Staker storage user = users[planId][userAddress];\\n\\n        UserStakingInfo memory info = UserStakingInfo(\\n            user.totalClaimed,\\n            user.currentToken1Staked,\\n            user.currentToken2Staked,\\n            hasSubscription(planId, userAddress),\\n            user.subscription\\n        );\\n\\n        return info;\\n    }\\n\\n    function getUserPlansInfo(address userAddress)\\n        public\\n        view\\n        returns (UserStakingInfo[] memory)\\n    {\\n        UserStakingInfo[] memory plansInfo = new UserStakingInfo[](\\n            stakingPlans.length\\n        );\\n\\n        for (uint256 i = 0; i < stakingPlans.length; i++) {\\n            plansInfo[i] = getUserPlanInfo(i, userAddress);\\n        }\\n\\n        return plansInfo;\\n    }\\n\\n    function getUserStakes(uint256 planId, address userAddress)\\n        public\\n        view\\n        returns (Stake[] memory)\\n    {\\n        return users[planId][userAddress].stakes;\\n    }\\n\\n    // TODO: how to optimize it?\\n    function getUserStakesWithRewards(uint256 planId, address userAddress)\\n        public\\n        view\\n        returns (StakeWithRewardsInfo[] memory)\\n    {\\n        uint256 stakesLength = users[planId][userAddress].stakes.length;\\n        StakeWithRewardsInfo[] memory stakesInfo = new StakeWithRewardsInfo[](\\n            stakesLength\\n        );\\n\\n        for (uint256 i = 0; i < stakesLength; i++) {\\n            stakesInfo[i].stake = users[planId][userAddress].stakes[i];\\n            if (!stakesInfo[i].stake.isClaimed) {\\n                stakesInfo[i].reward = _getAvailableStakeReward(\\n                    users[planId][userAddress].stakes[i]\\n                );\\n            }\\n        }\\n\\n        return stakesInfo;\\n    }\\n\\n    function getTimestamp() public view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    function getAvailableStakeReward(\\n        uint256 planId,\\n        address userAddress,\\n        uint256 stakeId\\n    ) public view returns (uint256) {\\n        return\\n            _getAvailableStakeReward(\\n                users[planId][userAddress].stakes[stakeId]\\n            );\\n    }\\n\\n    function hasSubscription(uint256 planId, address user)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return users[planId][user].subscription > getTimestamp();\\n    }\\n\\n    function hasAnySubscription(address user) public view returns (bool) {\\n        for (uint256 i = 0; i < stakingPlans.length; i++) {\\n            if (hasSubscription(i, user)) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    // --------- Administrative functions ---------\\n    function updateShouldAddReferrerOnToken2Stake(bool value)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        shouldAddReferrerOnToken2Stake = value;\\n    }\\n\\n    function updateRewardPool(address poolAddress_)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        rewardPool = poolAddress_;\\n    }\\n\\n    function updateToken1(address token1_) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        token1 = ERC20Burnable(token1_);\\n    }\\n\\n    function updateToken2(address token2_) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        token2 = ERC20Burnable(token2_);\\n    }\\n\\n    function updateReferralManager(address referralManager_)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        referralManager = IReferralManager(referralManager_);\\n    }\\n\\n    function updateSquadsManager(address squadsManager_)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        squadsManager = ISquads(squadsManager_);\\n    }\\n\\n    function updateTimeStep(uint256 step_) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        TIME_STEP = step_;\\n    }\\n\\n    function updateMinStakeLimit(uint256 minLimit_)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        MIN_STAKE_LIMIT = minLimit_;\\n    }\\n\\n    function updatePlanActivity(uint256 planId, bool isActive)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        stakingPlans[planId].isActive = isActive;\\n\\n        emit ActivityChanged(planId, isActive);\\n    }\\n\\n    function updatePlanDurationDays(uint256 planId, uint256 duration)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        stakingPlans[planId].stakingDuration = duration;\\n    }\\n\\n    function updatePlanAPR(uint256 planId, uint256 apr)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        stakingPlans[planId].apr = apr;\\n    }\\n\\n    function updatePlanSubscriptionCost(uint256 planId, uint256 cost)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        stakingPlans[planId].subscriptionCost = cost;\\n    }\\n\\n    function updatePlanSubscriptionPeriod(\\n        uint256 planId,\\n        uint256 subscriptionDuration\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        stakingPlans[planId].subscriptionDuration = subscriptionDuration;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IReferralManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IReferralManager {\\n    struct Referral {\\n        address referralAddress;\\n        uint256 level;\\n        uint256 activationDate;\\n        bool isReferralSubscriptionActive;\\n    }\\n\\n    struct AddDividendsParams {\\n        address user;\\n        uint256 reward;\\n        address referral;\\n        uint256 level;\\n        uint256 depositAmount;\\n        uint256 stakingPlanId;\\n        // REASONS:\\n        // 0 - full reward\\n        // 1 - no ref subscription\\n        // 2 - no user stake\\n        // 3 - trancated by user stake\\n        // 4 - team\\n        uint256 reason;\\n    }\\n\\n    function getReferralLevels() external pure returns (uint256);\\n\\n    function addUserDividends(AddDividendsParams memory params) external;\\n\\n    function getUserReferrer(address user) external view returns (address);\\n\\n    function setUserReferrer(address user, address referrer) external;\\n\\n    function userHasSubscription(address user, uint256 level)\\n        external\\n        view\\n        returns (bool);\\n\\n    function calculateRefReward(uint256 amount, uint256 level)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getUserReferralsByLevel(address userAddress, uint256 level)\\n        external\\n        view\\n        returns (Referral[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISquads.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface ISquads {\\n    struct Squad {\\n        uint256 subscription; // when subscription expire\\n        uint256 squadsFilled; // how much squads user filled\\n    }\\n\\n    struct SquadPlan {\\n        uint256 squadPlanId;\\n        uint256 subscriptionCost;\\n        uint256 reward; // reward for filling full squad\\n        uint256 stakingThreshold; // min staking amount that member should do\\n        uint256 squadSize; // amount of squad members\\n        uint256 stakingPlanId;\\n        bool isActive;\\n    }\\n\\n    function subscribe(uint256 planId) external;\\n\\n    function tryToAddMember(\\n        uint256 stakingPlanId,\\n        address user,\\n        address member,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function getUserSquadMembers(address user, uint256 planId)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function userHasSufficientStaking(address user, uint256 planId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getUserSubscription(address user, uint256 planId)\\n        external\\n        view\\n        returns (Squad memory);\\n\\n    function hasAnySubscription(address user) external view returns (bool);\\n\\n    function userHasPlanSubscription(address user, uint256 planId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getSufficientPlanIdByStakingAmount(\\n        uint256 stakingPlanId,\\n        uint256 amount\\n    ) external view returns (int256);\\n\\n    function getPlan(uint256 planId) external view returns (SquadPlan memory);\\n\\n    function getPlans() external view returns (SquadPlan[] memory);\\n\\n    function getActivePlans() external view returns (SquadPlan[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\ninterface IStaking {\\n    struct StakingPlan {\\n        uint256 stakingPlanId;\\n        bool isActive;\\n        uint256 subscriptionCost;\\n        uint256 subscriptionDuration;\\n        uint256 stakingDuration;\\n        uint256 apr;\\n        uint256 totalStakesToken1No;\\n        uint256 totalStakesToken2No;\\n        uint256 totalStakedToken1;\\n        uint256 totalStakedToken2;\\n        uint256 currentToken1Locked;\\n        uint256 currentToken2Locked;\\n        uint256 totalClaimed;\\n    }\\n\\n    struct Stake {\\n        uint256 amount;\\n        uint256 timeStart;\\n        uint256 timeEnd;\\n        uint256 apr;\\n        uint256 profit;\\n        bool isClaimed;\\n        bool isToken2;\\n    }\\n\\n    struct Staker {\\n        Stake[] stakes;\\n        uint256 subscription;\\n        uint256 totalClaimed;\\n        uint256 currentToken1Staked;\\n        uint256 currentToken2Staked;\\n    }\\n\\n    struct UserStakingInfo {\\n        uint256 totalClaimed;\\n        uint256 currentToken1Staked;\\n        uint256 currentToken2Staked;\\n        bool isSubscribed;\\n        uint256 subscribedTill;\\n    }\\n\\n    struct StakeWithRewardsInfo {\\n        Stake stake;\\n        uint256 reward;\\n    }\\n\\n    function deposit(\\n        uint256 planId,\\n        uint256 depositAmount,\\n        bool isToken2,\\n        address referrer\\n    ) external;\\n\\n    function withdraw(uint256 planId, uint256 stakeId) external;\\n\\n    function subscribe(uint256 planId) external;\\n\\n    // --------- Helper functions ---------\\n    function getUserPlanInfo(uint256 planId, address userAddress)\\n        external\\n        view\\n        returns (UserStakingInfo memory);\\n\\n    function getUserStakes(uint256 planId, address userAddress)\\n        external\\n        view\\n        returns (Stake[] memory stakes);\\n\\n    function getAvailableStakeReward(\\n        uint256 planId,\\n        address userAddress,\\n        uint256 stakeId\\n    ) external view returns (uint256);\\n\\n    function hasSubscription(uint256 planId, address user)\\n        external\\n        view\\n        returns (bool);\\n\\n    function hasAnySubscription(address user) external view returns (bool);\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token1_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token2_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardPool_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referralManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"squadsManager_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakingPlanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"ActivityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakingPlanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isToken2\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakingPlanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isToken2\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakingPlanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"}],\"name\":\"StakingPlanCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakingPlanId\",\"type\":\"uint256\"}],\"name\":\"Subscribed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_POINTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_STAKE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subscriptionCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subscriptionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"}],\"name\":\"addStakingPlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateStakeProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isToken2\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"getAvailableStakeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingPlans\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakingPlanId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"subscriptionCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subscriptionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakesToken1No\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakesToken2No\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedToken1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedToken2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentToken1Locked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentToken2Locked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"}],\"internalType\":\"struct IStaking.StakingPlan[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserPlanInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentToken1Staked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentToken2Staked\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSubscribed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"subscribedTill\",\"type\":\"uint256\"}],\"internalType\":\"struct IStaking.UserStakingInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserPlansInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentToken1Staked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentToken2Staked\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSubscribed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"subscribedTill\",\"type\":\"uint256\"}],\"internalType\":\"struct IStaking.UserStakingInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClaimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isToken2\",\"type\":\"bool\"}],\"internalType\":\"struct IStaking.Stake[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserStakesWithRewards\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClaimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isToken2\",\"type\":\"bool\"}],\"internalType\":\"struct IStaking.Stake\",\"name\":\"stake\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"internalType\":\"struct IStaking.StakeWithRewardsInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasAnySubscription\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasSubscription\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralManager\",\"outputs\":[{\"internalType\":\"contract IReferralManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldAddReferrerOnToken2Stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"squadsManager\",\"outputs\":[{\"internalType\":\"contract ISquads\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingPlans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakingPlanId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"subscriptionCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subscriptionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakesToken1No\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakesToken2No\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedToken1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedToken2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentToken1Locked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentToken2Locked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"}],\"name\":\"subscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"contract ERC20Burnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token2\",\"outputs\":[{\"internalType\":\"contract ERC20Burnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minLimit_\",\"type\":\"uint256\"}],\"name\":\"updateMinStakeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"}],\"name\":\"updatePlanAPR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"updatePlanActivity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"updatePlanDurationDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"updatePlanSubscriptionCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subscriptionDuration\",\"type\":\"uint256\"}],\"name\":\"updatePlanSubscriptionPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referralManager_\",\"type\":\"address\"}],\"name\":\"updateReferralManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress_\",\"type\":\"address\"}],\"name\":\"updateRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"updateShouldAddReferrerOnToken2Stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"squadsManager_\",\"type\":\"address\"}],\"name\":\"updateSquadsManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"step_\",\"type\":\"uint256\"}],\"name\":\"updateTimeStep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token1_\",\"type\":\"address\"}],\"name\":\"updateToken1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token2_\",\"type\":\"address\"}],\"name\":\"updateToken2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Staking", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000a499a2cbf6f214f1137018b2df330a7e9c134fd00000000000000000000000090a871f3c246de3d1e7420db852cdea645e247a90000000000000000000000009373e8d5c1bdb9a786155e4cdbee4a9d63eab922000000000000000000000000a7a84e4bcbb900a80e8e28ec73801f71101a9ffc0000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}