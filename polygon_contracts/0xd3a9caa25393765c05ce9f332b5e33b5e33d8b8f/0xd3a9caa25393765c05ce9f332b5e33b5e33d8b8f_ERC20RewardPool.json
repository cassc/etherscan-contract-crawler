{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/solc_0.8/defi/ERC20RewardPool.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\nimport {Context} from \\\"@openzeppelin/contracts-0.8/utils/Context.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts-0.8/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts-0.8/security/ReentrancyGuard.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts-0.8/utils/Address.sol\\\";\\nimport {Pausable} from \\\"@openzeppelin/contracts-0.8/security/Pausable.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts-0.8/access/Ownable.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts-0.8/utils/math/Math.sol\\\";\\nimport {ERC2771HandlerV2} from \\\"../common/BaseWithStorage/ERC2771HandlerV2.sol\\\";\\nimport {StakeTokenWrapper} from \\\"./StakeTokenWrapper.sol\\\";\\nimport {IContributionRules} from \\\"./interfaces/IContributionRules.sol\\\";\\nimport {IRewardCalculator} from \\\"./interfaces/IRewardCalculator.sol\\\";\\nimport {LockRules} from \\\"./rules/LockRules.sol\\\";\\nimport {RequirementsRules} from \\\"./rules/RequirementsRules.sol\\\";\\n\\n/// @title A pool that distributes rewards between users that stake any erc20 token\\n/// @notice The contributions are updated passively, an external call to computeContribution from a backend is needed.\\n/// @notice After initialization the reward calculator must be set by the admin.\\n/// @dev The contract has two plugins that affect the behaviour: contributionCalculator and rewardCalculator\\n/// @dev contributionCalculator instead of using the stake directly the result of computeContribution is used\\n/// @dev this way some users can get an extra share of the rewards\\n/// @dev rewardCalculator is used to manage the rate at which the rewards are distributed.\\n/// @dev This way we can build different types of pools by mixing in the plugins we want with this contract.\\n/// @dev default behaviour (address(0)) for contributionCalculator is to use the stacked amount as contribution.\\n/// @dev default behaviour (address(0)) for rewardCalculator is that no rewards are given\\ncontract ERC20RewardPool is\\n    Ownable,\\n    StakeTokenWrapper,\\n    LockRules,\\n    RequirementsRules,\\n    ReentrancyGuard,\\n    ERC2771HandlerV2,\\n    Pausable\\n{\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    event Staked(address indexed account, uint256 stakeAmount);\\n    event Withdrawn(address indexed account, uint256 stakeAmount);\\n    event Exit(address indexed account);\\n    event RewardPaid(address indexed account, uint256 rewardAmount);\\n    event ContributionUpdated(address indexed account, uint256 newContribution, uint256 oldContribution);\\n\\n    uint256 internal constant DECIMALS_18 = 1 ether;\\n\\n    // This value multiplied by the user contribution is the share of accumulated rewards (from the start of time\\n    // until the last call to restartRewards) for the user taking into account the value of totalContributions.\\n    uint256 public rewardPerTokenStored;\\n\\n    IERC20 public rewardToken;\\n    IContributionRules public contributionRules;\\n    IRewardCalculator public rewardCalculator;\\n\\n    // This value multiplied by the user contribution is the share of reward from the the last time\\n    // the user changed his contribution and called restartRewards\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n\\n    // This value is the accumulated rewards won by the user when he called the contract.\\n    mapping(address => uint256) public rewards;\\n\\n    uint256 internal _totalContributions;\\n    mapping(address => uint256) internal _contributions;\\n\\n    constructor(\\n        IERC20 stakeToken_,\\n        IERC20 rewardToken_,\\n        address trustedForwarder\\n    ) StakeTokenWrapper(stakeToken_) {\\n        require(address(rewardToken_).isContract(), \\\"ERC20RewardPool: is not a contract\\\");\\n        rewardToken = rewardToken_;\\n        __ERC2771HandlerV2_initialize(trustedForwarder);\\n    }\\n\\n    // Checks that the given address is a contract and\\n    // that the caller of the method is the owner of this contract - ERC20RewardPool.\\n    modifier isContractAndAdmin(address contractAddress) {\\n        require(contractAddress.isContract(), \\\"ERC20RewardPool: is not a contract\\\");\\n        require(owner() == _msgSender(), \\\"ERC20RewardPool: not admin\\\");\\n        _;\\n    }\\n\\n    modifier isValidAddress(address account) {\\n        require(account != address(0), \\\"ERC20RewardPool: zero address\\\");\\n\\n        _;\\n    }\\n\\n    /// @notice set the reward token\\n    /// @param contractAddress address token used to pay rewards\\n    function setRewardToken(address contractAddress)\\n        external\\n        isContractAndAdmin(contractAddress)\\n        isValidAddress(contractAddress)\\n    {\\n        IERC20 _newRewardToken = IERC20(contractAddress);\\n        require(\\n            rewardToken.balanceOf(address(this)) <= _newRewardToken.balanceOf(address(this)),\\n            \\\"ERC20RewardPool: insufficient balance\\\"\\n        );\\n        rewardToken = _newRewardToken;\\n    }\\n\\n    /// @notice set the stake token\\n    /// @param contractAddress address token used to stake funds\\n    function setStakeToken(address contractAddress)\\n        external\\n        isContractAndAdmin(contractAddress)\\n        isValidAddress(contractAddress)\\n    {\\n        IERC20 _newStakeToken = IERC20(contractAddress);\\n        require(\\n            _stakeToken.balanceOf(address(this)) <= _newStakeToken.balanceOf(address(this)),\\n            \\\"ERC20RewardPool: insufficient balance\\\"\\n        );\\n        _stakeToken = _newStakeToken;\\n    }\\n\\n    /// @notice set the trusted forwarder\\n    /// @param trustedForwarder address of the contract that is enabled to send meta-tx on behalf of the user\\n    function setTrustedForwarder(address trustedForwarder) external isContractAndAdmin(trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    /// @notice set contract that contains all the contribution rules\\n    function setContributionRules(address contractAddress)\\n        external\\n        isContractAndAdmin(contractAddress)\\n        isValidAddress(contractAddress)\\n    {\\n        contributionRules = IContributionRules(contractAddress);\\n    }\\n\\n    /// @notice set the reward calculator\\n    /// @param contractAddress address of a plugin that calculates absolute rewards at any point in time\\n    /// @param restartRewards_ if true the rewards from the previous calculator are accumulated before changing it\\n    function setRewardCalculator(address contractAddress, bool restartRewards_)\\n        external\\n        isContractAndAdmin(contractAddress)\\n        isValidAddress(contractAddress)\\n    {\\n        // We process the rewards of the current reward calculator before the switch.\\n        if (restartRewards_) {\\n            _restartRewards();\\n        }\\n        rewardCalculator = IRewardCalculator(contractAddress);\\n    }\\n\\n    /// @notice the admin recover is able to recover reward funds\\n    /// @param receiver address of the beneficiary of the recovered funds\\n    /// @dev this function must be called in an emergency situation only.\\n    /// @dev Calling it is risky specially when rewardToken == stakeToken\\n    function recoverFunds(address receiver) external onlyOwner whenPaused() isValidAddress(receiver) {\\n        uint256 recoverAmount;\\n\\n        if (rewardToken == _stakeToken) {\\n            recoverAmount = rewardToken.balanceOf(address(this)) - _totalSupply;\\n        } else {\\n            recoverAmount = rewardToken.balanceOf(address(this));\\n        }\\n\\n        rewardToken.safeTransfer(receiver, recoverAmount);\\n    }\\n\\n    /// @notice return the total supply of staked tokens\\n    /// @return the total supply of staked tokens\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /// @notice return the balance of staked tokens for a user\\n    /// @param account the address of the account\\n    /// @return balance of staked tokens\\n    function balanceOf(address account) external view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /// @notice return the address of the stake token contract\\n    /// @return address of the stake token contract\\n    function stakeToken() external view returns (IERC20) {\\n        return _stakeToken;\\n    }\\n\\n    /// @notice return the amount of rewards deposited in the contract that can be distributed by different campaigns\\n    /// @return the total amount of deposited rewards\\n    /// @dev this function can be called by a reward calculator to throw if a campaign doesn't have\\n    /// @dev enough rewards to start\\n    function getRewardsAvailable() external view returns (uint256) {\\n        if (address(rewardToken) != address(_stakeToken)) {\\n            return rewardToken.balanceOf(address(this));\\n        }\\n        return _stakeToken.balanceOf(address(this)) - _totalSupply;\\n    }\\n\\n    /// @notice return the sum of the values returned by the contribution calculator\\n    /// @return total contributions of the users\\n    /// @dev this is the same than the totalSupply only if the contribution calculator\\n    /// @dev uses the staked amount as the contribution of the user which is the default behaviour\\n    function totalContributions() external view returns (uint256) {\\n        return _totalContributions;\\n    }\\n\\n    /// @notice return the contribution of some user\\n    /// @param account the address of the account\\n    /// @return contribution of the users\\n    /// @dev this is the same than the balanceOf only if the contribution calculator\\n    /// @dev uses the staked amount as the contribution of the user which is the default behaviour\\n    function contributionOf(address account) external view returns (uint256) {\\n        return _contributions[account];\\n    }\\n\\n    /// @notice accumulated rewards taking into account the totalContribution (see: rewardPerTokenStored)\\n    /// @return the accumulated total rewards\\n    /// @dev This value multiplied by the user contribution is the share of accumulated rewards for the user. Taking\\n    /// @dev into account the value of totalContributions.\\n    function rewardPerToken() external view returns (uint256) {\\n        return rewardPerTokenStored + _rewardPerToken();\\n    }\\n\\n    /// @notice available earnings for some user\\n    /// @param account the address of the account\\n    /// @return the available earnings for the user\\n    function earned(address account) external view returns (uint256) {\\n        return rewards[account] + _earned(account, _rewardPerToken());\\n    }\\n\\n    /// @notice accumulates the current rewards into rewardPerTokenStored and restart the reward calculator\\n    /// @dev calling this function makes no difference. It is useful for testing and when the reward calculator\\n    /// @dev is changed.\\n    function restartRewards() external {\\n        _restartRewards();\\n    }\\n\\n    /// @notice update the contribution for a user\\n    /// @param account the address of the account\\n    /// @dev if the user change his holdings (or any other parameter that affect the contribution calculation),\\n    /// @dev he can the reward distribution to his favor. This function must be called by an external agent ASAP to\\n    /// @dev update the contribution for the user. We understand the risk but the rewards are distributed slowly so\\n    /// @dev the user cannot affect the reward distribution heavily.\\n    function computeContribution(address account) external isValidAddress(account) {\\n        // We decide to give the user the accumulated rewards even if he cheated a little bit.\\n        _processRewards(account);\\n        _updateContribution(account);\\n    }\\n\\n    /// @notice update the contribution for a sef of users\\n    /// @param accounts the addresses of the accounts to update\\n    /// @dev see: computeContribution\\n    function computeContributionInBatch(address[] calldata accounts) external {\\n        _restartRewards();\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            address account = accounts[i];\\n            if (account == address(0)) {\\n                continue;\\n            }\\n            _processAccountRewards(account);\\n            _updateContribution(account);\\n        }\\n    }\\n\\n    /// @notice stake some amount into the contract\\n    /// @param amount the amount of tokens to stake\\n    /// @dev the user must approve in the stake token before calling this function\\n    function stake(uint256 amount)\\n        external\\n        nonReentrant\\n        whenNotPaused()\\n        antiDepositCheck(_msgSender())\\n        checkRequirements(_msgSender(), amount, _balances[_msgSender()])\\n    {\\n        require(amount > 0, \\\"ERC20RewardPool: Cannot stake 0\\\");\\n\\n        // The first time a user stakes he cannot remove his rewards immediately.\\n        if (timeLockClaim.lastClaim[_msgSender()] == 0) {\\n            timeLockClaim.lastClaim[_msgSender()] = block.timestamp;\\n        }\\n\\n        lockDeposit.lastDeposit[_msgSender()] = block.timestamp;\\n\\n        uint256 earlierRewards = 0;\\n\\n        if (_totalContributions == 0 && rewardCalculator != IRewardCalculator(address(0))) {\\n            earlierRewards = rewardCalculator.getRewards();\\n        }\\n\\n        _processRewards(_msgSender());\\n        super._stake(amount);\\n        _updateContribution(_msgSender());\\n        require(_contributions[_msgSender()] > 0, \\\"ERC20RewardPool: not enough contributions\\\");\\n\\n        if (earlierRewards != 0) {\\n            rewards[_msgSender()] = rewards[_msgSender()] + earlierRewards;\\n        }\\n        emit Staked(_msgSender(), amount);\\n    }\\n\\n    /// @notice withdraw the stake from the contract\\n    /// @param amount the amount of tokens to withdraw\\n    /// @dev the user can withdraw his stake independently from the rewards\\n    function withdraw(uint256 amount) external nonReentrant whenNotPaused() {\\n        _processRewards(_msgSender());\\n        _withdrawStake(_msgSender(), amount);\\n        _updateContribution(_msgSender());\\n    }\\n\\n    /// @notice withdraw the stake and the rewards from the contract\\n    function exit() external nonReentrant whenNotPaused() {\\n        _processRewards(_msgSender());\\n        _withdrawStake(_msgSender(), _balances[_msgSender()]);\\n        _withdrawRewards(_msgSender());\\n        _updateContribution(_msgSender());\\n        emit Exit(_msgSender());\\n    }\\n\\n    /// @notice withdraw the rewards from the contract\\n    /// @dev the user can withdraw his stake independently from the rewards\\n    function getReward() external nonReentrant whenNotPaused() {\\n        _processRewards(_msgSender());\\n        _withdrawRewards(_msgSender());\\n        _updateContribution(_msgSender());\\n    }\\n\\n    function renounceOwnership() public view override onlyOwner {\\n        revert(\\\"ERC20RewardPool: can't renounceOwnership\\\");\\n    }\\n\\n    function _withdrawStake(address account, uint256 amount) internal antiWithdrawCheck(_msgSender()) {\\n        require(amount > 0, \\\"ERC20RewardPool: Cannot withdraw 0\\\");\\n        lockWithdraw.lastWithdraw[_msgSender()] = block.timestamp;\\n        super._withdraw(amount);\\n        emit Withdrawn(account, amount);\\n    }\\n\\n    function _withdrawRewards(address account) internal timeLockClaimCheck(account) {\\n        uint256 reward = rewards[account];\\n        uint256 mod = 0;\\n        if (reward > 0) {\\n            if (amountLockClaim.claimLockEnabled == true) {\\n                // constrain the reward amount to the integer allowed\\n                mod = reward % DECIMALS_18;\\n                reward = reward - mod;\\n                require(\\n                    amountLockClaim.amount <= reward,\\n                    \\\"ERC20RewardPool: Cannot withdraw - lockClaim.amount < reward\\\"\\n                );\\n            }\\n            rewards[account] = mod;\\n            rewardToken.safeTransfer(account, reward);\\n            emit RewardPaid(account, reward);\\n        }\\n    }\\n\\n    function _updateContribution(address account) internal {\\n        uint256 oldContribution = _contributions[account];\\n        _totalContributions = _totalContributions - oldContribution;\\n        uint256 contribution = _computeContribution(account);\\n        _totalContributions = _totalContributions + contribution;\\n        _contributions[account] = contribution;\\n        emit ContributionUpdated(account, contribution, oldContribution);\\n    }\\n\\n    function _computeContribution(address account) internal returns (uint256) {\\n        if (contributionRules == IContributionRules(address(0))) {\\n            return Math.min(_balances[account], maxStakeAllowedCalculator(account));\\n        } else {\\n            return\\n                contributionRules.computeMultiplier(\\n                    account,\\n                    Math.min(_balances[account], maxStakeAllowedCalculator(account))\\n                );\\n        }\\n    }\\n\\n    // Something changed (stake, withdraw, etc), we distribute current accumulated rewards and start from zero.\\n    // Called each time there is a change in contract state (stake, withdraw, etc).\\n    function _processRewards(address account) internal {\\n        _restartRewards();\\n        _processAccountRewards(account);\\n    }\\n\\n    // Update the earnings for this specific user with what he earned until now\\n    function _processAccountRewards(address account) internal {\\n        // usually _earned takes _rewardPerToken() but in this method is zero because _restartRewards must be\\n        // called before _processAccountRewards\\n        rewards[account] = rewards[account] + _earned(account, 0);\\n        // restart rewards for this specific user, now earned(account) = 0\\n        userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n    }\\n\\n    function _restartRewards() internal {\\n        if (rewardCalculator != IRewardCalculator(address(0))) {\\n            // Distribute the accumulated rewards\\n            rewardPerTokenStored = rewardPerTokenStored + _rewardPerToken();\\n            // restart rewards so now the rewardCalculator return zero rewards\\n            rewardCalculator.restartRewards();\\n        }\\n    }\\n\\n    function _earned(address account, uint256 rewardPerToken_) internal view returns (uint256) {\\n        // - userRewardPerTokenPaid[account] * _contributions[account]  / _totalContributions is the portion of\\n        //      rewards the last time the user changed his contribution and called _restartRewards\\n        //      (_totalContributions corresponds to previous value of that moment).\\n        // - rewardPerTokenStored * _contributions[account] is the share of the user from the\\n        //      accumulated rewards (from the start of time until the last call to _restartRewards) with the\\n        //      current value of _totalContributions\\n        // - _rewardPerToken() * _contributions[account]  / _totalContributions is the share of the user of the\\n        //      rewards from the last time anybody called _restartRewards until this moment\\n        //\\n        // The important thing to note is that at any moment in time _contributions[account] / _totalContributions is\\n        // the share of the user even if _totalContributions changes because of other users activity.\\n        return\\n            ((rewardPerToken_ + rewardPerTokenStored - userRewardPerTokenPaid[account]) * _contributions[account]) /\\n            1e24;\\n    }\\n\\n    // This function gives the proportion of the total contribution that corresponds to each user from\\n    // last restartRewards call.\\n    // _rewardsPerToken() * _contributions[account] is the amount of extra rewards gained from last restartRewards.\\n    function _rewardPerToken() internal view returns (uint256) {\\n        if (rewardCalculator == IRewardCalculator(address(0)) || _totalContributions == 0) {\\n            return 0;\\n        }\\n        return (rewardCalculator.getRewards() * 1e24) / _totalContributions;\\n    }\\n\\n    // @dev Triggers stopped state.\\n    // The contract must not be paused.\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    // @dev Returns to normal state.\\n    // The contract must be paused.\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function _msgSender() internal view override(Context, ERC2771HandlerV2) returns (address sender) {\\n        return ERC2771HandlerV2._msgSender();\\n    }\\n\\n    function _msgData() internal view override(Context, ERC2771HandlerV2) returns (bytes calldata) {\\n        return ERC2771HandlerV2._msgData();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/solc_0.8/common/BaseWithStorage/ERC2771HandlerV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down.\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\n\\nabstract contract ERC2771HandlerV2 {\\n    address internal _trustedForwarder;\\n\\n    function __ERC2771HandlerV2_initialize(address forwarder) internal {\\n        _trustedForwarder = forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function getTrustedForwarder() external view returns (address trustedForwarder) {\\n        return _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            require(msg.data.length >= 24, \\\"ERC2771HandlerV2: Invalid msg.data\\\");\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            require(msg.data.length >= 24, \\\"ERC2771HandlerV2: Invalid msg.data\\\");\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/solc_0.8/defi/StakeTokenWrapper.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-0.8/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts-0.8/utils/Address.sol\\\";\\n\\nabstract contract StakeTokenWrapper is Context {\\n    using Address for address;\\n    using SafeERC20 for IERC20;\\n    IERC20 internal _stakeToken;\\n\\n    uint256 internal _totalSupply;\\n    mapping(address => uint256) internal _balances;\\n\\n    constructor(IERC20 stakeToken) {\\n        require(address(stakeToken).isContract(), \\\"StakeTokenWrapper: is not a contract\\\");\\n        _stakeToken = stakeToken;\\n    }\\n\\n    function _stake(uint256 amount) internal virtual {\\n        require(amount > 0, \\\"StakeTokenWrapper: amount > 0\\\");\\n        _totalSupply = _totalSupply + amount;\\n        _balances[_msgSender()] = _balances[_msgSender()] + amount;\\n        _stakeToken.safeTransferFrom(_msgSender(), address(this), amount);\\n    }\\n\\n    function _withdraw(uint256 amount) internal virtual {\\n        require(amount > 0, \\\"StakeTokenWrapper: amount > 0\\\");\\n        _totalSupply = _totalSupply - amount;\\n        _balances[_msgSender()] = _balances[_msgSender()] - amount;\\n        _stakeToken.safeTransfer(_msgSender(), amount);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"src/solc_0.8/defi/interfaces/IContributionRules.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\ninterface IContributionRules {\\n    function computeMultiplier(address account, uint256 amountStaked) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/solc_0.8/defi/interfaces/IRewardCalculator.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\n/// @title Plugins for Reward Pools that calculate the rewards must implement this interface\\ninterface IRewardCalculator {\\n    /// @dev At any point in time this function must return the accumulated rewards from the last call to restartRewards\\n    function getRewards() external view returns (uint256);\\n\\n    /// @dev The main contract has distributed the rewards (getRewards()) until this point, this must start\\n    /// @dev from scratch => getRewards() == 0\\n    function restartRewards() external;\\n}\\n\"\r\n    },\r\n    \"src/solc_0.8/defi/rules/LockRules.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\nimport {Context} from \\\"@openzeppelin/contracts-0.8/utils/Context.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts-0.8/access/Ownable.sol\\\";\\n\\n// Note: this contract is meant to be inherited by ERC20RewardPool.\\n// we should override the renounceOwnership() method otherwise.\\ncontract LockRules is Context, Ownable {\\n    // limits\\n    uint256 public constant timeLockLimit = 180 days;\\n    uint256 public constant amountLockLimit = 1000 ether;\\n\\n    struct TimeLockClaim {\\n        uint256 lockPeriodInSecs;\\n        mapping(address => uint256) lastClaim;\\n    }\\n\\n    struct AmountLockClaim {\\n        uint256 amount;\\n        bool claimLockEnabled;\\n    }\\n\\n    struct TimeLockWithdraw {\\n        uint256 lockPeriodInSecs;\\n        mapping(address => uint256) lastWithdraw;\\n    }\\n\\n    struct TimeLockDeposit {\\n        uint256 lockPeriodInSecs;\\n        mapping(address => uint256) lastDeposit;\\n    }\\n\\n    event TimelockClaimSet(uint256 lockPeriodInSecs);\\n    event TimelockDepositSet(uint256 newTimeDeposit);\\n    event TimeLockWithdrawSet(uint256 newTimeWithdraw);\\n    event AmountLockClaimSet(uint256 newAmountLockClaim, bool isEnabled);\\n\\n    // This is used to implement a time buffer for reward retrieval, so the user cannot re-stake the rewards too fast.\\n    TimeLockClaim public timeLockClaim;\\n    AmountLockClaim public amountLockClaim;\\n    TimeLockWithdraw public lockWithdraw;\\n    TimeLockDeposit public lockDeposit;\\n\\n    modifier timeLockClaimCheck(address account) {\\n        // We use lockPeriodInSecs == 0 to disable this check\\n        if (timeLockClaim.lockPeriodInSecs != 0) {\\n            require(\\n                block.timestamp > timeLockClaim.lastClaim[account] + timeLockClaim.lockPeriodInSecs,\\n                \\\"LockRules: Claim must wait\\\"\\n            );\\n        }\\n        timeLockClaim.lastClaim[account] = block.timestamp;\\n        _;\\n    }\\n\\n    modifier antiWithdrawCheck(address account) {\\n        // We use lockPeriodInSecs == 0 to disable this check\\n        if (lockWithdraw.lockPeriodInSecs != 0) {\\n            require(\\n                block.timestamp > lockWithdraw.lastWithdraw[account] + lockWithdraw.lockPeriodInSecs,\\n                \\\"LockRules: Withdraw must wait\\\"\\n            );\\n        }\\n        lockWithdraw.lastWithdraw[account] = block.timestamp;\\n        _;\\n    }\\n\\n    modifier antiDepositCheck(address account) {\\n        // We use lockPeriodInSecs == 0 to disable this check\\n        if (lockDeposit.lockPeriodInSecs != 0) {\\n            require(\\n                block.timestamp > lockDeposit.lastDeposit[account] + lockDeposit.lockPeriodInSecs,\\n                \\\"LockRules: Deposit must wait\\\"\\n            );\\n        }\\n        lockDeposit.lastDeposit[account] = block.timestamp;\\n        _;\\n    }\\n\\n    /// @notice set the _lockPeriodInSecs for the anti-compound buffer\\n    /// @param _lockPeriodInSecs amount of time the user must wait between reward withdrawal\\n    function setTimelockClaim(uint256 _lockPeriodInSecs) external onlyOwner {\\n        require(_lockPeriodInSecs <= timeLockLimit, \\\"LockRules: invalid lockPeriodInSecs\\\");\\n        timeLockClaim.lockPeriodInSecs = _lockPeriodInSecs;\\n\\n        emit TimelockClaimSet(_lockPeriodInSecs);\\n    }\\n\\n    function setTimelockDeposit(uint256 _newTimeDeposit) external onlyOwner {\\n        require(_newTimeDeposit <= timeLockLimit, \\\"LockRules: invalid lockPeriodInSecs\\\");\\n        lockDeposit.lockPeriodInSecs = _newTimeDeposit;\\n\\n        emit TimelockDepositSet(_newTimeDeposit);\\n    }\\n\\n    function setTimeLockWithdraw(uint256 _newTimeWithdraw) external onlyOwner {\\n        require(_newTimeWithdraw <= timeLockLimit, \\\"LockRules: invalid lockPeriodInSecs\\\");\\n        lockWithdraw.lockPeriodInSecs = _newTimeWithdraw;\\n\\n        emit TimeLockWithdrawSet(_newTimeWithdraw);\\n    }\\n\\n    function setAmountLockClaim(uint256 _newAmountLockClaim, bool _isEnabled) external onlyOwner {\\n        require(_newAmountLockClaim <= amountLockLimit, \\\"LockRules: invalid newAmountLockClaim\\\");\\n        amountLockClaim.amount = _newAmountLockClaim;\\n        amountLockClaim.claimLockEnabled = _isEnabled;\\n\\n        emit AmountLockClaimSet(_newAmountLockClaim, _isEnabled);\\n    }\\n\\n    function getRemainingTimelockClaim() external view returns (uint256) {\\n        uint256 timeLock = (timeLockClaim.lastClaim[_msgSender()] + timeLockClaim.lockPeriodInSecs);\\n\\n        if (timeLock > block.timestamp) {\\n            return timeLock - block.timestamp;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function getRemainingTimelockWithdraw() external view returns (uint256) {\\n        uint256 timeLock = (lockWithdraw.lastWithdraw[_msgSender()] + lockWithdraw.lockPeriodInSecs);\\n\\n        if (timeLock > block.timestamp) {\\n            return timeLock - block.timestamp;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function getRemainingTimelockDeposit() external view returns (uint256) {\\n        uint256 timeLock = (lockDeposit.lastDeposit[_msgSender()] + lockDeposit.lockPeriodInSecs);\\n\\n        if (timeLock > block.timestamp) {\\n            return timeLock - block.timestamp;\\n        } else {\\n            return 0;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/solc_0.8/defi/rules/RequirementsRules.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts-0.8/access/Ownable.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts-0.8/utils/Address.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts-0.8/utils/math/Math.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts-0.8/token/ERC721/IERC721.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155.sol\\\";\\n\\ncontract RequirementsRules is Ownable {\\n    using Address for address;\\n\\n    // we limited the number of Ids and contracts that we can have in the lists\\n    // to avoid the risk of DoS caused by gas limits being exceeded during the iterations\\n    uint256 public idsLimit = 64;\\n    uint256 public contractsLimit = 4;\\n\\n    // maxStake amount allowed if user has no ERC721 or ERC1155\\n    uint256 public maxStakeOverall;\\n\\n    struct ERC721RequirementRule {\\n        uint256[] ids;\\n        bool balanceOf;\\n        uint256 minAmountBalanceOf;\\n        uint256 maxAmountBalanceOf;\\n        uint256 minAmountId;\\n        uint256 maxAmountId;\\n        uint256 index;\\n    }\\n\\n    struct ERC1155RequirementRule {\\n        uint256[] ids;\\n        uint256 minAmountId;\\n        uint256 maxAmountId;\\n        uint256 index;\\n    }\\n\\n    mapping(IERC721 => ERC721RequirementRule) internal _listERC721;\\n    mapping(IERC1155 => ERC1155RequirementRule) internal _listERC1155;\\n    IERC721[] internal _listERC721Index;\\n    IERC1155[] internal _listERC1155Index;\\n\\n    event ERC1155RequirementListSet(\\n        address indexed contractERC1155,\\n        uint256[] ids,\\n        uint256 minAmountId,\\n        uint256 maxAmountId\\n    );\\n    event ERC721RequirementListSet(\\n        address indexed contractERC721,\\n        uint256[] ids,\\n        bool balanceOf,\\n        uint256 minAmountBalanceOf,\\n        uint256 maxAmountBalanceOf,\\n        uint256 minAmountId,\\n        uint256 maxAmountId\\n    );\\n    event MaxStakeOverallSet(uint256 newMaxStake, uint256 oldMaxStake);\\n    event ERC11551RequirementListDeleted(address indexed contractERC1155);\\n    event ERC721RequirementListDeleted(address indexed contractERC721);\\n\\n    modifier isContract(address account) {\\n        require(account.isContract(), \\\"RequirementsRules: is not contract\\\");\\n\\n        _;\\n    }\\n\\n    modifier checkRequirements(\\n        address account,\\n        uint256 amount,\\n        uint256 balanceOf\\n    ) {\\n        uint256 maxStakeERC721 = checkAndGetERC721Stake(account);\\n        uint256 maxStakeERC1155 = checkAndGetERC1155Stake(account);\\n        uint256 maxAllowed = _maxStakeAllowedCalculator(maxStakeERC721, maxStakeERC1155);\\n\\n        if ((maxAllowed > 0) || _listERC721Index.length > 0 || _listERC1155Index.length > 0) {\\n            require(amount + balanceOf <= maxAllowed, \\\"RequirementsRules: maxAllowed\\\");\\n        }\\n\\n        _;\\n    }\\n\\n    modifier isERC721MemberList(address contractERC721) {\\n        require(\\n            isERC721MemberRequirementList(IERC721(contractERC721)),\\n            \\\"RequirementsRules: contract is not in the list\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier isERC1155MemberList(address contractERC1155) {\\n        require(\\n            isERC1155MemberRequirementList(IERC1155(contractERC1155)),\\n            \\\"RequirementsRules: contract is not in the list\\\"\\n        );\\n        _;\\n    }\\n\\n    // if user has not erc721 or erc1155\\n    function setMaxStakeOverall(uint256 newMaxStake) external onlyOwner {\\n        uint256 oldMaxStake = maxStakeOverall;\\n        maxStakeOverall = newMaxStake;\\n\\n        emit MaxStakeOverallSet(newMaxStake, oldMaxStake);\\n    }\\n\\n    function setERC721RequirementList(\\n        address contractERC721,\\n        uint256[] memory ids,\\n        bool balanceOf,\\n        uint256 minAmountBalanceOf,\\n        uint256 maxAmountBalanceOf,\\n        uint256 minAmountId,\\n        uint256 maxAmountId\\n    ) external onlyOwner isContract(contractERC721) {\\n        require(\\n            (balanceOf == true && ids.length == 0 && minAmountBalanceOf > 0 && maxAmountBalanceOf > 0) ||\\n                (balanceOf == false && ids.length > 0 && minAmountId > 0 && maxAmountId > 0 && ids.length <= idsLimit),\\n            \\\"RequirementRules: invalid list\\\"\\n        );\\n        IERC721 newContract = IERC721(contractERC721);\\n\\n        if (ids.length != 0) {\\n            _listERC721[newContract].ids = ids;\\n        }\\n        _listERC721[newContract].minAmountBalanceOf = minAmountBalanceOf;\\n        _listERC721[newContract].maxAmountBalanceOf = maxAmountBalanceOf;\\n        _listERC721[newContract].minAmountId = minAmountId;\\n        _listERC721[newContract].maxAmountId = maxAmountId;\\n        _listERC721[newContract].balanceOf = balanceOf;\\n\\n        // if it's a new member create a new registry, instead, only update\\n        if (isERC721MemberRequirementList(newContract) == false) {\\n            // Limiting the size of the array (interations) to avoid the risk of DoS.\\n            require(contractsLimit > _listERC721Index.length, \\\"RequirementsRules: contractsLimit exceeded\\\");\\n            _listERC721Index.push(newContract);\\n            _listERC721[newContract].index = _listERC721Index.length - 1;\\n        }\\n\\n        emit ERC721RequirementListSet(\\n            contractERC721,\\n            ids,\\n            balanceOf,\\n            minAmountBalanceOf,\\n            maxAmountBalanceOf,\\n            minAmountId,\\n            maxAmountId\\n        );\\n    }\\n\\n    function setERC1155RequirementList(\\n        address contractERC1155,\\n        uint256[] memory ids,\\n        uint256 minAmountId,\\n        uint256 maxAmountId\\n    ) external onlyOwner isContract(contractERC1155) {\\n        require(\\n            ids.length > 0 && minAmountId > 0 && maxAmountId > 0 && ids.length <= idsLimit,\\n            \\\"RequirementRules: invalid list\\\"\\n        );\\n        IERC1155 newContract = IERC1155(contractERC1155);\\n        _listERC1155[newContract].ids = ids;\\n        _listERC1155[newContract].minAmountId = minAmountId;\\n        _listERC1155[newContract].maxAmountId = maxAmountId;\\n\\n        // if it's a new member create a new registry, instead, only update\\n        if (isERC1155MemberRequirementList(newContract) == false) {\\n            // Limiting the size of the array (interations) to avoid the risk of DoS.\\n            require(contractsLimit > _listERC1155Index.length, \\\"RequirementsRules: contractsLimit exceeded\\\");\\n            _listERC1155Index.push(newContract);\\n            _listERC1155[newContract].index = _listERC1155Index.length - 1;\\n        }\\n\\n        emit ERC1155RequirementListSet(contractERC1155, ids, minAmountId, maxAmountId);\\n    }\\n\\n    function getERC721RequirementList(address contractERC721)\\n        external\\n        view\\n        isContract(contractERC721)\\n        isERC721MemberList(contractERC721)\\n        returns (ERC721RequirementRule memory)\\n    {\\n        return _listERC721[IERC721(contractERC721)];\\n    }\\n\\n    function getERC1155RequirementList(address contractERC1155)\\n        external\\n        view\\n        isContract(contractERC1155)\\n        isERC1155MemberList(contractERC1155)\\n        returns (ERC1155RequirementRule memory)\\n    {\\n        return _listERC1155[IERC1155(contractERC1155)];\\n    }\\n\\n    function deleteERC721RequirementList(address contractERC721)\\n        external\\n        onlyOwner\\n        isContract(contractERC721)\\n        isERC721MemberList(contractERC721)\\n    {\\n        IERC721 reqContract = IERC721(contractERC721);\\n        uint256 indexToDelete = _listERC721[reqContract].index;\\n        IERC721 addrToMove = _listERC721Index[_listERC721Index.length - 1];\\n        _listERC721Index[indexToDelete] = addrToMove;\\n        _listERC721[addrToMove].index = indexToDelete;\\n        _listERC721Index.pop();\\n\\n        emit ERC721RequirementListDeleted(contractERC721);\\n    }\\n\\n    function deleteERC1155RequirementList(address contractERC1155)\\n        external\\n        onlyOwner\\n        isContract(contractERC1155)\\n        isERC1155MemberList(contractERC1155)\\n    {\\n        IERC1155 reqContract = IERC1155(contractERC1155);\\n        uint256 indexToDelete = _listERC1155[reqContract].index;\\n        IERC1155 addrToMove = _listERC1155Index[_listERC1155Index.length - 1];\\n        _listERC1155Index[indexToDelete] = addrToMove;\\n        _listERC1155[addrToMove].index = indexToDelete;\\n        _listERC1155Index.pop();\\n\\n        emit ERC11551RequirementListDeleted(contractERC1155);\\n    }\\n\\n    function isERC721MemberRequirementList(IERC721 reqContract) public view returns (bool) {\\n        return (_listERC721Index.length != 0) && (_listERC721Index[_listERC721[reqContract].index] == reqContract);\\n    }\\n\\n    function isERC1155MemberRequirementList(IERC1155 reqContract) public view returns (bool) {\\n        return (_listERC1155Index.length != 0) && (_listERC1155Index[_listERC1155[reqContract].index] == reqContract);\\n    }\\n\\n    function getERC721MaxStake(address account) public view returns (uint256) {\\n        uint256 _maxStake = 0;\\n        for (uint256 i = 0; i < _listERC721Index.length; i++) {\\n            uint256 balanceOf = 0;\\n            uint256 balanceOfId = 0;\\n            IERC721 reqContract = _listERC721Index[i];\\n\\n            if (_listERC721[reqContract].balanceOf == true) {\\n                balanceOf = reqContract.balanceOf(account);\\n            } else {\\n                balanceOfId = getERC721BalanceId(reqContract, account);\\n            }\\n\\n            _maxStake =\\n                _maxStake +\\n                (balanceOf *\\n                    _listERC721[reqContract].maxAmountBalanceOf +\\n                    balanceOfId *\\n                    _listERC721[reqContract].maxAmountId);\\n        }\\n\\n        return _maxStake;\\n    }\\n\\n    function getERC1155MaxStake(address account) public view returns (uint256) {\\n        uint256 _maxStake = 0;\\n\\n        for (uint256 i = 0; i < _listERC1155Index.length; i++) {\\n            uint256 _totalBal = 0;\\n            IERC1155 reqContract = _listERC1155Index[i];\\n\\n            uint256 bal = getERC1155BalanceId(reqContract, account);\\n\\n            _totalBal = _totalBal + bal;\\n\\n            _maxStake = _maxStake + (_totalBal * _listERC1155[reqContract].maxAmountId);\\n        }\\n\\n        return _maxStake;\\n    }\\n\\n    function maxStakeAllowedCalculator(address account) public view returns (uint256) {\\n        uint256 maxStakeERC721 = getERC721MaxStake(account);\\n        uint256 maxStakeERC1155 = getERC1155MaxStake(account);\\n        return _maxStakeAllowedCalculator(maxStakeERC721, maxStakeERC1155);\\n    }\\n\\n    function getERC721BalanceId(IERC721 reqContract, address account) public view returns (uint256) {\\n        uint256 balanceOfId = 0;\\n\\n        for (uint256 j = 0; j < _listERC721[reqContract].ids.length; j++) {\\n            address owner = reqContract.ownerOf(_listERC721[reqContract].ids[j]);\\n            if (owner == account) {\\n                ++balanceOfId;\\n            }\\n        }\\n\\n        return balanceOfId;\\n    }\\n\\n    function getERC1155BalanceId(IERC1155 reqContract, address account) public view returns (uint256) {\\n        uint256 balanceOfId = 0;\\n\\n        for (uint256 j = 0; j < _listERC1155[reqContract].ids.length; j++) {\\n            uint256 bal = reqContract.balanceOf(account, _listERC1155[reqContract].ids[j]);\\n\\n            balanceOfId = balanceOfId + bal;\\n        }\\n\\n        return balanceOfId;\\n    }\\n\\n    function checkAndGetERC1155Stake(address account) public view returns (uint256) {\\n        uint256 _maxStake = 0;\\n        for (uint256 i = 0; i < _listERC1155Index.length; i++) {\\n            uint256 _totalBal = 0;\\n            IERC1155 reqContract = _listERC1155Index[i];\\n\\n            uint256 balanceId = getERC1155BalanceId(reqContract, account);\\n            if (_listERC1155[reqContract].ids.length > 0) {\\n                require(balanceId >= _listERC1155[reqContract].minAmountId, \\\"RequirementsRules: balanceId\\\");\\n            }\\n\\n            _totalBal = _totalBal + balanceId;\\n            _maxStake = _maxStake + (_totalBal * _listERC1155[reqContract].maxAmountId);\\n        }\\n        return _maxStake;\\n    }\\n\\n    function checkAndGetERC721Stake(address account) public view returns (uint256) {\\n        uint256 _maxStake = 0;\\n        for (uint256 i = 0; i < _listERC721Index.length; i++) {\\n            uint256 balanceOf = 0;\\n            uint256 balanceOfId = 0;\\n            IERC721 reqContract = _listERC721Index[i];\\n\\n            if (_listERC721[reqContract].balanceOf == true) {\\n                require(\\n                    (reqContract.balanceOf(account) >= _listERC721[reqContract].minAmountBalanceOf) ||\\n                        (maxStakeOverall > 0),\\n                    \\\"RequirementsRules: balanceOf\\\"\\n                );\\n                balanceOf = reqContract.balanceOf(account);\\n            } else {\\n                balanceOfId = getERC721BalanceId(reqContract, account);\\n                if (_listERC721[reqContract].ids.length > 0) {\\n                    require(\\n                        (balanceOfId >= _listERC721[reqContract].minAmountId) || (maxStakeOverall > 0),\\n                        \\\"RequirementsRules: balanceId\\\"\\n                    );\\n                }\\n            }\\n\\n            _maxStake =\\n                _maxStake +\\n                (balanceOf *\\n                    _listERC721[reqContract].maxAmountBalanceOf +\\n                    balanceOfId *\\n                    _listERC721[reqContract].maxAmountId);\\n        }\\n        return _maxStake;\\n    }\\n\\n    function _maxStakeAllowedCalculator(uint256 maxStakeERC721, uint256 maxStakeERC1155)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 maxAllowed = maxStakeOverall;\\n\\n        if (maxStakeERC721 + maxStakeERC1155 > 0) {\\n            if (maxStakeOverall > 0) {\\n                maxAllowed = Math.min(maxAllowed, maxStakeERC721 + maxStakeERC1155);\\n            } else {\\n                maxAllowed = maxStakeERC721 + maxStakeERC1155;\\n            }\\n        } else {\\n            maxAllowed = maxStakeOverall;\\n        }\\n\\n        return maxAllowed;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakeToken_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmountLockClaim\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"AmountLockClaimSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newContribution\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldContribution\",\"type\":\"uint256\"}],\"name\":\"ContributionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractERC1155\",\"type\":\"address\"}],\"name\":\"ERC11551RequirementListDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractERC1155\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minAmountId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxAmountId\",\"type\":\"uint256\"}],\"name\":\"ERC1155RequirementListSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractERC721\",\"type\":\"address\"}],\"name\":\"ERC721RequirementListDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractERC721\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"balanceOf\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minAmountBalanceOf\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxAmountBalanceOf\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minAmountId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxAmountId\",\"type\":\"uint256\"}],\"name\":\"ERC721RequirementListSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxStake\",\"type\":\"uint256\"}],\"name\":\"MaxStakeOverallSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimeWithdraw\",\"type\":\"uint256\"}],\"name\":\"TimeLockWithdrawSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockPeriodInSecs\",\"type\":\"uint256\"}],\"name\":\"TimelockClaimSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimeDeposit\",\"type\":\"uint256\"}],\"name\":\"TimelockDepositSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"amountLockClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimLockEnabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountLockLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"checkAndGetERC1155Stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"checkAndGetERC721Stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"computeContribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"computeContributionInBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractsLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"contributionOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contributionRules\",\"outputs\":[{\"internalType\":\"contract IContributionRules\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractERC1155\",\"type\":\"address\"}],\"name\":\"deleteERC1155RequirementList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractERC721\",\"type\":\"address\"}],\"name\":\"deleteERC721RequirementList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"reqContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getERC1155BalanceId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getERC1155MaxStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractERC1155\",\"type\":\"address\"}],\"name\":\"getERC1155RequirementList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minAmountId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"internalType\":\"struct RequirementsRules.ERC1155RequirementRule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"reqContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getERC721BalanceId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getERC721MaxStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractERC721\",\"type\":\"address\"}],\"name\":\"getERC721RequirementList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"balanceOf\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minAmountBalanceOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountBalanceOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"internalType\":\"struct RequirementsRules.ERC721RequirementRule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainingTimelockClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainingTimelockDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainingTimelockWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idsLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"reqContract\",\"type\":\"address\"}],\"name\":\"isERC1155MemberRequirementList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"reqContract\",\"type\":\"address\"}],\"name\":\"isERC721MemberRequirementList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockPeriodInSecs\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockPeriodInSecs\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"maxStakeAllowedCalculator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStakeOverall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"recoverFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restartRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardCalculator\",\"outputs\":[{\"internalType\":\"contract IRewardCalculator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newAmountLockClaim\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isEnabled\",\"type\":\"bool\"}],\"name\":\"setAmountLockClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setContributionRules\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractERC1155\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minAmountId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountId\",\"type\":\"uint256\"}],\"name\":\"setERC1155RequirementList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractERC721\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"balanceOf\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minAmountBalanceOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountBalanceOf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountId\",\"type\":\"uint256\"}],\"name\":\"setERC721RequirementList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxStake\",\"type\":\"uint256\"}],\"name\":\"setMaxStakeOverall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"restartRewards_\",\"type\":\"bool\"}],\"name\":\"setRewardCalculator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setStakeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTimeWithdraw\",\"type\":\"uint256\"}],\"name\":\"setTimeLockWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockPeriodInSecs\",\"type\":\"uint256\"}],\"name\":\"setTimelockClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTimeDeposit\",\"type\":\"uint256\"}],\"name\":\"setTimelockDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeLockClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockPeriodInSecs\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeLockLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalContributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ERC20RewardPool", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "000000000000000000000000bbba073c31bf03b8acf7c28ef0738decf3695683000000000000000000000000bbba073c31bf03b8acf7c28ef0738decf3695683000000000000000000000000f0511f123164602042ab2bcf02111fa5d3fe97cd", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}