{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Burner.sol\": {\r\n      \"content\": \"pragma solidity 0.8.17;\\n\\nimport \\\"./interfaces/IArtisant.sol\\\";\\nimport \\\"./libs/Owned.sol\\\";\\n\\ncontract Burner is Owned {\\n\\n    event Burn(address indexed item_owner, uint256 indexed id, uint256 indexed drop);\\n\\n    IArtisant public artisant;\\n    address public operator;\\n    uint256 public refund = 25; // %\\n\\n    mapping(bytes32 => bool) private _hashUsed;\\n\\n    //// CONSTRUCTOR ////\\n\\n    constructor(\\n        IArtisant _artisant,\\n        address _operator,\\n        address owner_\\n    ) Owned(owner_) {\\n        artisant = _artisant;\\n        operator = _operator;\\n    }\\n\\n    //// PUBLIC ////\\n\\n    function burn(\\n        uint256 id,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) public {\\n        verifySignature(hash, signature);\\n        _hashUsed[hash] = true;\\n        uint256 drop = artisant.idToDrop(id);\\n        uint256 price = artisant.dropPrice(drop);\\n        uint256 refundAmount = price * refund / 100;\\n        artisant.transferFrom(msg.sender, 0x000000000000000000000000000000000000dEaD, id);\\n        (bool sent,) = msg.sender.call{value: refundAmount}(\\\"\\\");\\n        require(sent, \\\"Failed to refund\\\");\\n    }\\n\\n    //// ONLY OWNER ////\\n\\n    function setRefund(uint256 _refund) public onlyOwner {\\n        refund = _refund;\\n    }\\n\\n    function setOperator(address _operator) public onlyOwner {\\n        operator = _operator;\\n    }\\n\\n    function setArtisant(IArtisant _artisant) public onlyOwner {\\n        artisant = _artisant;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        (bool sent,) = owner.call{value: address(this).balance}(\\\"\\\");\\n        require(sent, \\\"Failed to withdraw\\\");\\n    }\\n\\n    //// PRIVATE ////\\n\\n    function verifySignature(\\n        bytes32 hash,\\n        bytes memory signature\\n    ) private view {\\n        require(signature.length == 65, \\\"INVALID_SIGNATURE_LENGTH\\\");\\n        require(!_hashUsed[hash], \\\"HASH_ALREADY_USED\\\");\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        assembly {\\n            r := mload(add(signature, 32))\\n            s := mload(add(signature, 64))\\n            v := and(mload(add(signature, 65)), 255)\\n        }\\n\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"INVALID_SIGNATURE_S_PARAMETER\\\");\\n        require(v == 27 || v == 28, \\\"INVALID_SIGNATURE_V_PARAMETER\\\");\\n\\n        require(ecrecover(hash, v, r, s) == operator, \\\"INVALID_SIGNER\\\");\\n    }\\n\\n    receive() external payable{}\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IArtisant.sol\": {\r\n      \"content\": \"pragma solidity 0.8.17;\\n\\ninterface IArtisant {\\n\\n    function transferFrom(address from, address to, uint256 id) external;\\n    function idToDrop (uint256 id) external view returns (uint256);\\n    function dropPrice(uint256 drop) external view returns (uint256);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/libs/Owned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\\nabstract contract Owned {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            OWNERSHIP STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public owner;\\n\\n    modifier onlyOwner() virtual {\\n        require(msg.sender == owner, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             OWNERSHIP LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        owner = newOwner;\\n\\n        emit OwnershipTransferred(msg.sender, newOwner);\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IArtisant\",\"name\":\"_artisant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"item_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"drop\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"artisant\",\"outputs\":[{\"internalType\":\"contract IArtisant\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IArtisant\",\"name\":\"_artisant\",\"type\":\"address\"}],\"name\":\"setArtisant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_refund\",\"type\":\"uint256\"}],\"name\":\"setRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Burner", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000002011a462ffe42516d98c0b23c608c16c9e5f48d1000000000000000000000000c8fe6a7c38a69d8cf03895939a703d91916dd34d000000000000000000000000c2614e3ade094a35e9ff83d8ef4c39be74f6fe3d", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}