{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n/*\r\n  Copyright 2021 Flashbots: Scott Bigelow (scott@flashbots.net).\r\n*/\r\n\r\n// This contract performs one or many staticcall's, compares their output, and pays\r\n// the miner directly if all calls exactly match the specified result\r\n// For how to use this script, read the Flashbots searcher docs: https://github.com/flashbots/pm/blob/main/guides/searcher-onboarding.md\r\ncontract FlashbotsCheckAndSend {\r\n    function check32BytesAndSend(address _target, bytes memory _payload, bytes32 _resultMatch) external payable {\r\n        _check32Bytes(_target, _payload, _resultMatch);\r\n        block.coinbase.transfer(msg.value);\r\n    }\r\n\r\n    function check32BytesAndSendMulti(address[] memory _targets, bytes[] memory _payloads, bytes32[] memory _resultMatches) external payable {\r\n        require (_targets.length == _payloads.length);\r\n        require (_targets.length == _resultMatches.length);\r\n        for (uint256 i = 0; i < _targets.length; i++) {\r\n            _check32Bytes(_targets[i], _payloads[i], _resultMatches[i]);\r\n        }\r\n        block.coinbase.transfer(msg.value);\r\n    }\r\n\r\n    function checkBytesAndSend(address _target, bytes memory _payload, bytes memory _resultMatch) external payable {\r\n        _checkBytes(_target, _payload, _resultMatch);\r\n        block.coinbase.transfer(msg.value);\r\n    }\r\n\r\n    function checkBytesAndSendMulti(address[] memory _targets, bytes[] memory _payloads, bytes[] memory _resultMatches) external payable {\r\n        require (_targets.length == _payloads.length);\r\n        require (_targets.length == _resultMatches.length);\r\n        for (uint256 i = 0; i < _targets.length; i++) {\r\n            _checkBytes(_targets[i], _payloads[i], _resultMatches[i]);\r\n        }\r\n        block.coinbase.transfer(msg.value);\r\n    }\r\n\r\n    // ======== INTERNAL ========\r\n\r\n    function _check32Bytes(address _target, bytes memory _payload, bytes32 _resultMatch) internal view {\r\n        (bool _success, bytes memory _response) = _target.staticcall(_payload);\r\n        require(_success, \"!success\");\r\n        require(_response.length >= 32, \"response less than 32 bytes\");\r\n        bytes32 _responseScalar;\r\n        assembly {\r\n            _responseScalar := mload(add(_response, 0x20))\r\n        }\r\n        require(_responseScalar == _resultMatch, \"response mismatch\");\r\n    }\r\n\r\n    function _checkBytes(address _target, bytes memory _payload, bytes memory _resultMatch) internal view {\r\n        (bool _success, bytes memory _response) = _target.staticcall(_payload);\r\n        require(_success, \"!success\");\r\n        require(keccak256(_resultMatch) == keccak256(_response), \"response bytes mismatch\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_resultMatch\",\"type\":\"bytes32\"}],\"name\":\"check32BytesAndSend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_payloads\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_resultMatches\",\"type\":\"bytes32[]\"}],\"name\":\"check32BytesAndSendMulti\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_resultMatch\",\"type\":\"bytes\"}],\"name\":\"checkBytesAndSend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_payloads\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_resultMatches\",\"type\":\"bytes[]\"}],\"name\":\"checkBytesAndSendMulti\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "FlashbotsCheckAndSend", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6ea10ad454aea0c8c9552af19f3667c5d8ad9b4d13aa50cc1fa60d8caa0ea4b5"}