{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/proxies/Proxies.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { InitializeGovernedUpgradeabilityProxy } from \\\"./InitializeGovernedUpgradeabilityProxy.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @notice CASHProxy delegates calls to an CASH implementation\\r\\n */\\r\\ncontract BoxProxy is InitializeGovernedUpgradeabilityProxy {\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * @notice CASHProxy delegates calls to an CASH implementation\\r\\n */\\r\\ncontract CASHProxy is InitializeGovernedUpgradeabilityProxy {\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * @notice WrappedCASHProxy delegates calls to a WrappedCASH implementation\\r\\n */\\r\\ncontract WrappedCASHProxy is InitializeGovernedUpgradeabilityProxy {\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * @notice VaultProxy delegates calls to a Vault implementation\\r\\n */\\r\\ncontract VaultProxy is InitializeGovernedUpgradeabilityProxy {\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * @notice CompoundStrategyProxy delegates calls to a CompoundStrategy implementation\\r\\n */\\r\\ncontract CompoundStrategyProxy is InitializeGovernedUpgradeabilityProxy {\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * @notice AaveStrategyUSDCProxy delegates calls to a AaveStrategy implementation\\r\\n */\\r\\ncontract AaveStrategyUSDCProxy is InitializeGovernedUpgradeabilityProxy {\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * @notice AaveStrategyDAIProxy delegates calls to a AaveStrategy implementation\\r\\n */\\r\\ncontract AaveStrategyDAIProxy is InitializeGovernedUpgradeabilityProxy {\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * @notice AaveStrategyUSDTProxy delegates calls to a AaveStrategy implementation\\r\\n */\\r\\ncontract AaveStrategyUSDTProxy is InitializeGovernedUpgradeabilityProxy {\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @notice ThreePoolStrategyProxy delegates calls to a ThreePoolStrategy implementation\\r\\n */\\r\\ncontract ThreePoolStrategyProxy is InitializeGovernedUpgradeabilityProxy {\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * @notice ConvexStrategyProxy delegates calls to a ConvexStrategy implementation\\r\\n */\\r\\ncontract ConvexStrategyProxy is InitializeGovernedUpgradeabilityProxy {\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @notice DystopiaStrategyUsdcDaiProxy delegates calls to a DystopiaStrategy implementation\\r\\n */\\r\\ncontract DystopiaStrategyUsdcDaiProxy is InitializeGovernedUpgradeabilityProxy {\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * @notice DystopiaStrategyUsdcUsdtProxy delegates calls to a DystopiaStrategy implementation\\r\\n */\\r\\ncontract DystopiaStrategyUsdcUsdtProxy is InitializeGovernedUpgradeabilityProxy {\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * @notice DystopiaStrategyDaiUsdtProxy delegates calls to a DystopiaStrategy implementation\\r\\n */\\r\\ncontract DystopiaStrategyDaiUsdtProxy is InitializeGovernedUpgradeabilityProxy {\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @notice MeshSwapStrategyDAIProxy delegates calls to a MeshSwapStrategy implementation\\r\\n */\\r\\ncontract MeshSwapStrategyDAIProxy is InitializeGovernedUpgradeabilityProxy {\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * @notice MeshSwapStrategyUSDTProxy delegates calls to a MeshSwapStrategy implementation\\r\\n */\\r\\ncontract MeshSwapStrategyUSDTProxy is InitializeGovernedUpgradeabilityProxy {\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * @notice MeshSwapStrategyUSDCProxy delegates calls to a MeshSwapStrategy implementation\\r\\n */\\r\\ncontract MeshSwapStrategyUSDCProxy is InitializeGovernedUpgradeabilityProxy {\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @notice MeshSwapStrategyUSDCUSDTProxy delegates calls to a MeshSwapStrategyDual implementation\\r\\n */\\r\\ncontract MeshSwapStrategyUSDCUSDTProxy is InitializeGovernedUpgradeabilityProxy {\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * @notice MeshSwapStrategyUSDCDAIProxy delegates calls to a MeshSwapStrategyDual implementation\\r\\n */\\r\\ncontract MeshSwapStrategyUSDCDAIProxy is InitializeGovernedUpgradeabilityProxy {\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * @notice MeshSwapStrategyUSDTDAIProxy delegates calls to a MeshSwapStrategyDual implementation\\r\\n */\\r\\ncontract MeshSwapStrategyUSDTDAIProxy is InitializeGovernedUpgradeabilityProxy {\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @notice QuickSwapStrategyUSDCDAIProxy delegates calls to a QuickSwapStrategy implementation\\r\\n */\\r\\ncontract QuickSwapStrategyUSDCDAIProxy is InitializeGovernedUpgradeabilityProxy {\\r\\n}\\r\\n\\r\\n/**\\r\\n * @notice QuickSwapStrategyUSDCUSDTProxy delegates calls to a QuickSwapStrategy implementation\\r\\n */\\r\\ncontract QuickSwapStrategyUSDCUSDTProxy is InitializeGovernedUpgradeabilityProxy {\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @notice Am3CurveStrategyProxy delegates calls to a Am3CurveStrategy implementation\\r\\n */\\r\\ncontract Am3CurveStrategyProxy is InitializeGovernedUpgradeabilityProxy {\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @notice Am3CurveStrategyUSDTProxy delegates calls to a Am3CurveStrategy implementation\\r\\n */\\r\\ncontract Am3CurveStrategyUSDTProxy is InitializeGovernedUpgradeabilityProxy {\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @notice SynapseStrategyProxy delegates calls to a SynapseStrategy implementation\\r\\n */\\r\\ncontract SynapseStrategyProxy is InitializeGovernedUpgradeabilityProxy {\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * @notice SynapseStrategyUSDTProxy delegates calls to a SynapseStrategy implementation\\r\\n */\\r\\ncontract SynapseStrategyUSDTProxy is InitializeGovernedUpgradeabilityProxy {\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @notice DodoStrategyProxy delegates calls to a DodoStrategy implementation\\r\\n */\\r\\ncontract DodoStrategyProxy is InitializeGovernedUpgradeabilityProxy {\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @notice HarvesterProxy delegates calls to a Harvester implementation\\r\\n */\\r\\ncontract HarvesterProxy is InitializeGovernedUpgradeabilityProxy {\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * @notice DripperProxy delegates calls to a Dripper implementation\\r\\n */\\r\\ncontract DripperProxy is InitializeGovernedUpgradeabilityProxy {\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/proxies/InitializeGovernedUpgradeabilityProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title BaseGovernedUpgradeabilityProxy\\r\\n * @dev This contract combines an upgradeability proxy with our governor system.\\r\\n * It is based on an older version of OpenZeppelins BaseUpgradeabilityProxy\\r\\n * with Solidity ^0.8.0.\\r\\n * @author Stabl Protocol Inc\\r\\n */\\r\\ncontract InitializeGovernedUpgradeabilityProxy is Governable {\\r\\n    /**\\r\\n     * @dev Emitted when the implementation is upgraded.\\r\\n     * @param implementation Address of the new implementation.\\r\\n     */\\r\\n    event Upgraded(address indexed implementation);\\r\\n\\r\\n    /**\\r\\n     * @dev Contract initializer with Governor enforcement\\r\\n     * @param _logic Address of the initial implementation.\\r\\n     * @param _initGovernor Address of the initial Governor.\\r\\n     * @param _data Data to send as msg.data to the implementation to initialize\\r\\n     * the proxied contract.\\r\\n     * It should include the signature and the parameters of the function to be\\r\\n     * called, as described in\\r\\n     * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\r\\n     * This parameter is optional, if no data is given the initialization call\\r\\n     * to proxied contract will be skipped.\\r\\n     */\\r\\n    function initialize(\\r\\n        address _logic,\\r\\n        address _initGovernor,\\r\\n        bytes memory _data\\r\\n    ) public payable onlyGovernor {\\r\\n        require(_implementation() == address(0), \\\"implementation already set\\\");\\r\\n        assert(\\r\\n            IMPLEMENTATION_SLOT ==\\r\\n                bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1)\\r\\n        );\\r\\n        _changeGovernor(_initGovernor);\\r\\n        _setImplementation(_logic);\\r\\n        if (_data.length > 0) {\\r\\n            (bool success, ) = _logic.delegatecall(_data);\\r\\n            require(success);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return The address of the proxy admin/it's also the governor.\\r\\n     */\\r\\n    function admin() external view returns (address) {\\r\\n        return _governor();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return The address of the implementation.\\r\\n     */\\r\\n    function implementation() external view returns (address) {\\r\\n        return _implementation();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Upgrade the backing implementation of the proxy.\\r\\n     * Only the admin can call this function.\\r\\n     * @param newImplementation Address of the new implementation.\\r\\n     */\\r\\n    function upgradeTo(address newImplementation) external onlyGovernor {\\r\\n        _upgradeTo(newImplementation);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Upgrade the backing implementation of the proxy and call a function\\r\\n     * on the new implementation.\\r\\n     * This is useful to initialize the proxied contract.\\r\\n     * @param newImplementation Address of the new implementation.\\r\\n     * @param data Data to send as msg.data in the low level call.\\r\\n     * It should include the signature and the parameters of the function to be called, as described in\\r\\n     * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\r\\n     */\\r\\n    function upgradeToAndCall(address newImplementation, bytes calldata data)\\r\\n        external\\r\\n        payable\\r\\n        onlyGovernor\\r\\n    {\\r\\n        _upgradeTo(newImplementation);\\r\\n        (bool success, ) = newImplementation.delegatecall(data);\\r\\n        require(success);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fallback function.\\r\\n     * Implemented entirely in `_fallback`.\\r\\n     */\\r\\n    fallback() external payable {\\r\\n        _fallback();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Delegates execution to an implementation contract.\\r\\n     * This is a low level function that doesn't return to its internal call site.\\r\\n     * It will return to the external caller whatever the implementation returns.\\r\\n     * @param _impl Address to delegate.\\r\\n     */\\r\\n    function _delegate(address _impl) internal {\\r\\n        assembly {\\r\\n            // Copy msg.data. We take full control of memory in this inline assembly\\r\\n            // block because it will not return to Solidity code. We overwrite the\\r\\n            // Solidity scratch pad at memory position 0.\\r\\n            calldatacopy(0, 0, calldatasize())\\r\\n\\r\\n            // Call the implementation.\\r\\n            // out and outsize are 0 because we don't know the size yet.\\r\\n            let result := delegatecall(gas(), _impl, 0, calldatasize(), 0, 0)\\r\\n\\r\\n            // Copy the returned data.\\r\\n            returndatacopy(0, 0, returndatasize())\\r\\n\\r\\n            switch result\\r\\n            // delegatecall returns 0 on error.\\r\\n            case 0 {\\r\\n                revert(0, returndatasize())\\r\\n            }\\r\\n            default {\\r\\n                return(0, returndatasize())\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function that is run as the first thing in the fallback function.\\r\\n     * Can be redefined in derived contracts to add functionality.\\r\\n     * Redefinitions must call super._willFallback().\\r\\n     */\\r\\n    function _willFallback() internal {}\\r\\n\\r\\n    /**\\r\\n     * @dev fallback implementation.\\r\\n     * Extracted to enable manual triggering.\\r\\n     */\\r\\n    function _fallback() internal {\\r\\n        _willFallback();\\r\\n        _delegate(_implementation());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Storage slot with the address of the current implementation.\\r\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\r\\n     * validated in the constructor.\\r\\n     */\\r\\n    bytes32 internal constant IMPLEMENTATION_SLOT =\\r\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current implementation.\\r\\n     * @return impl Address of the current implementation\\r\\n     */\\r\\n    function _implementation() internal view returns (address impl) {\\r\\n        bytes32 slot = IMPLEMENTATION_SLOT;\\r\\n        assembly {\\r\\n            impl := sload(slot)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Upgrades the proxy to a new implementation.\\r\\n     * @param newImplementation Address of the new implementation.\\r\\n     */\\r\\n    function _upgradeTo(address newImplementation) internal {\\r\\n        _setImplementation(newImplementation);\\r\\n        emit Upgraded(newImplementation);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the implementation address of the proxy.\\r\\n     * @param newImplementation Address of the new implementation.\\r\\n     */\\r\\n    function _setImplementation(address newImplementation) internal {\\r\\n        require(\\r\\n            Address.isContract(newImplementation),\\r\\n            \\\"Cannot set a proxy implementation to a non-contract address\\\"\\r\\n        );\\r\\n\\r\\n        bytes32 slot = IMPLEMENTATION_SLOT;\\r\\n\\r\\n        assembly {\\r\\n            sstore(slot, newImplementation)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/governance/Governable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title CASH Governable Contract\\r\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\r\\n *      from owner to governor and renounce methods removed. Does not use\\r\\n *      Context.sol like Ownable.sol does for simplification.\\r\\n * @author Stabl Protocol Inc\\r\\n */\\r\\ncontract Governable {\\r\\n    // Storage position of the owner and pendingOwner of the contract\\r\\n    // keccak256(\\\"CASH.governor\\\");\\r\\n    bytes32 private constant governorPosition =\\r\\n        0x83f34c88ec39d54d1e423bd8a181ebc59ede5dcc9996c2df334668b4f89fdd73;\\r\\n\\r\\n    // keccak256(\\\"CASH.pending.governor\\\");\\r\\n    bytes32 private constant pendingGovernorPosition =\\r\\n        0x7eaf9a7750884803435dfabc67aa617a7d8fefb23d8d84b3c9722bd69e48c4bc;\\r\\n\\r\\n    // keccak256(\\\"CASH.reentry.status\\\");\\r\\n    bytes32 private constant reentryStatusPosition =\\r\\n        0x48a06827bfe8bfc0a59fe65d0fa78f553938265ed1f971326fc09947d19a593c;\\r\\n\\r\\n    // See OpenZeppelin ReentrancyGuard implementation\\r\\n    uint256 constant _NOT_ENTERED = 1;\\r\\n    uint256 constant _ENTERED = 2;\\r\\n\\r\\n    event PendingGovernorshipTransfer(\\r\\n        address indexed previousGovernor,\\r\\n        address indexed newGovernor\\r\\n    );\\r\\n\\r\\n    event GovernorshipTransferred(\\r\\n        address indexed previousGovernor,\\r\\n        address indexed newGovernor\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial Governor.\\r\\n     */\\r\\n    constructor() {\\r\\n        _setGovernor(msg.sender);\\r\\n        emit GovernorshipTransferred(address(0), _governor());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current Governor.\\r\\n     */\\r\\n    function governor() public view returns (address) {\\r\\n        return _governor();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current Governor.\\r\\n     */\\r\\n    function _governor() internal view returns (address governorOut) {\\r\\n        bytes32 position = governorPosition;\\r\\n        assembly {\\r\\n            governorOut := sload(position)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the pending Governor.\\r\\n     */\\r\\n    function _pendingGovernor()\\r\\n        internal\\r\\n        view\\r\\n        returns (address pendingGovernor)\\r\\n    {\\r\\n        bytes32 position = pendingGovernorPosition;\\r\\n        assembly {\\r\\n            pendingGovernor := sload(position)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the Governor.\\r\\n     */\\r\\n    modifier onlyGovernor() {\\r\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the caller is the current Governor.\\r\\n     */\\r\\n    function isGovernor() public view returns (bool) {\\r\\n        return msg.sender == _governor();\\r\\n    }\\r\\n\\r\\n    function _setGovernor(address newGovernor) internal {\\r\\n        bytes32 position = governorPosition;\\r\\n        assembly {\\r\\n            sstore(position, newGovernor)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and make it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        bytes32 position = reentryStatusPosition;\\r\\n        uint256 _reentry_status;\\r\\n        assembly {\\r\\n            _reentry_status := sload(position)\\r\\n        }\\r\\n\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        assembly {\\r\\n            sstore(position, _ENTERED)\\r\\n        }\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        assembly {\\r\\n            sstore(position, _NOT_ENTERED)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setPendingGovernor(address newGovernor) internal {\\r\\n        bytes32 position = pendingGovernorPosition;\\r\\n        assembly {\\r\\n            sstore(position, newGovernor)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers Governance of the contract to a new account (`newGovernor`).\\r\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\r\\n     * @param _newGovernor Address of the new Governor\\r\\n     */\\r\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\r\\n        _setPendingGovernor(_newGovernor);\\r\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Claim Governance of the contract to a new account (`newGovernor`).\\r\\n     * Can only be called by the new Governor.\\r\\n     */\\r\\n    function claimGovernance() external {\\r\\n        require(\\r\\n            msg.sender == _pendingGovernor(),\\r\\n            \\\"Only the pending Governor can complete the claim\\\"\\r\\n        );\\r\\n        _changeGovernor(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\r\\n     * @param _newGovernor Address of the new Governor\\r\\n     */\\r\\n    function _changeGovernor(address _newGovernor) internal {\\r\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\r\\n        emit GovernorshipTransferred(_governor(), _newGovernor);\\r\\n        _setGovernor(_newGovernor);\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initGovernor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "CASHProxy", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "1", "Implementation": "0x455b9bc10aa238c963823e16c48e6d736cf6809d", "SwarmSource": ""}