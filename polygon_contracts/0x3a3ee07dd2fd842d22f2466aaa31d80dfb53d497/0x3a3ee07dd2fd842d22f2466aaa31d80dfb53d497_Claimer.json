{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Claimer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport \\\"./TimeExchange.sol\\\";\\n\\ncontract Claimer {\\n\\n    using Math for uint256;\\n\\n    uint256 public lastBlockTimeWasProduced;\\n\\n    uint256 private constant FACTOR = 10 ** 18;\\n\\n    TimeExchange public immutable timeExchange;\\n    ITimeIsUp public immutable tup;\\n    ITimeToken public immutable timeToken;\\n\\n    event RewardClaimed(address claimer, uint256 amountInTup, uint256 amountInTime);\\n\\n    constructor (address tupAddress, address timeTokenAddress, address timeExchangeAddress) {\\n        tup = ITimeIsUp(payable(tupAddress));\\n        timeToken = ITimeToken(payable(timeTokenAddress));\\n        timeExchange = TimeExchange(payable(timeExchangeAddress));\\n        lastBlockTimeWasProduced = block.number;\\n    }\\n\\n    receive() external payable { }\\n\\n    fallback() external payable {\\n        require(msg.data.length == 0);\\n    }\\n\\n    /// @notice Claims the public reward and convert it into TUP tokens to the user\\n    /// @dev The goal of this function is to avoid generic MEV bots. It also produces TIME tokens and send them to the informed address\\n    /// @param claimer Informs the address where the reward should be sent to\\n    function claim(address claimer) external {\\n        require(tup.queryPublicReward() > 0, \\\"Claimer: there is not reward to claim\\\");\\n        try tup.splitSharesWithReward() {\\n            try timeExchange.swap{value: address(this).balance}(address(0), address(tup), address(this).balance) {\\n                uint256 amountInTup = tup.balanceOf(address(this));\\n                try tup.transfer(claimer, amountInTup) { } catch { amountInTup = 0; }\\n                try timeToken.mining() {\\n                    lastBlockTimeWasProduced = block.number;\\n                } catch { }\\n                uint256 amountInTime = timeToken.balanceOf(address(this));\\n                if (amountInTime > 0)\\n                    timeToken.transfer(claimer, amountInTime);\\n                if (amountInTup > 0 || amountInTime > 0)\\n                    emit RewardClaimed(claimer, amountInTup, amountInTime);\\n                else\\n                    revert(\\\"Claimer: not able to claim reward\\\");\\n            } catch {\\n                revert(\\\"Claimer: not able to claim reward\\\");\\n            }\\n        } catch {\\n            revert(\\\"Claimer: not able to claim reward\\\");\\n        }\\n    }\\n\\n    /// @notice Enables the claimer contract to produce TIME Token to give as rewar\\n    function enableMining() external payable {\\n        require(msg.value >= timeToken.fee(), \\\"Claimer: please send some amount to enable the contract to produce TIME\\\");\\n        timeToken.enableMining{value: msg.value}();\\n    }\\n\\n    /// @notice Queries an estimate of the public reward amount in terms of TUP tokens\\n    /// @dev It calculates the reward amount and return it to the user\\n    /// @return amountInTup The estimated amount in terms of TUP tokens\\n    /// @return amountInTime The estimated amount in terms of TIME tokens\\n    function queryPublicRewardEstimate() external view returns (uint256, uint256) {\\n        uint256 amount = tup.queryPublicReward();\\n        (uint256 price,) = timeExchange.queryPrice(address(0), address(tup), amount);\\n        return (amount.mulDiv(price, FACTOR), (block.number - lastBlockTimeWasProduced).mulDiv(FACTOR, 1));\\n    }\\n}\"\r\n    },\r\n    \"src/TimeExchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./ITimeToken.sol\\\";\\nimport \\\"./ITimeIsUp.sol\\\";\\n\\ncontract TimeExchange {\\n\\n    using Math for uint256;\\n\\n    uint256 private constant FACTOR = 10 ** 18;\\n\\n    uint256 public constant FEE = 60;\\n    address public constant DEVELOPER_ADDRESS = 0x731591207791A93fB0Ec481186fb086E16A7d6D0;\\n    address public immutable timeAddress;\\n    address public immutable tupAddress;\\n\\n    mapping (address => uint256) private _currentBlock;\\n    \\n    constructor(address time, address tup) {\\n        timeAddress = time;\\n        tupAddress = tup;\\n    }\\n\\n    receive() external payable {\\n    }\\n\\n    fallback() external payable {\\n        require(msg.data.length == 0);\\n    }\\n\\n    /// @notice Modifier to make a function runs only once per block\\n    modifier onlyOncePerBlock() {\\n        require(block.number != _currentBlock[tx.origin], \\\"Time Exchange: you cannot perform this operation again in this block\\\");\\n        _;\\n        _currentBlock[tx.origin] = block.number;\\n    }\\n\\n    /// @notice Swaps native currency for another token\\n    /// @dev Please refer this function is called by swap() function\\n    /// @param tokenTo The address of the token to be swapped\\n    /// @param amount The native currency amount to be swapped\\n    function _swapFromNativeToToken(address tokenTo, uint256 amount) private {\\n        IERC20 token = IERC20(tokenTo);\\n        uint256 comission = amount.mulDiv(FEE, 10_000);\\n        amount -= comission;\\n        payable(tokenTo).call{value: amount}(\\\"\\\");\\n        payable(DEVELOPER_ADDRESS).call{value: comission / 2}(\\\"\\\");\\n        ITimeIsUp(payable(tupAddress)).receiveProfit{value: comission / 2}();\\n        token.transfer(msg.sender, token.balanceOf(address(this)));\\n    }\\n\\n    /// @notice Swaps token for native currency\\n    /// @dev Please refer this function is called by swap() function\\n    /// @param tokenFrom The address of the token to be swapped\\n    /// @param amount The token amount to be swapped\\n    function _swapFromTokenToNative(address tokenFrom, uint256 amount) private {\\n        IERC20 token = IERC20(tokenFrom);\\n        token.transferFrom(msg.sender, address(this), amount);\\n        uint256 balanceBefore = address(this).balance;\\n        token.transfer(tokenFrom, amount);\\n        uint256 balanceAfter = address(this).balance - balanceBefore;\\n        uint256 comission = balanceAfter.mulDiv(FEE, 10_000);\\n        balanceAfter -= comission;\\n        payable(msg.sender).call{value: balanceAfter}(\\\"\\\");\\n        payable(DEVELOPER_ADDRESS).call{value: comission / 2}(\\\"\\\");\\n        ITimeIsUp(payable(tupAddress)).receiveProfit{value: comission / 2}();\\n    }\\n\\n    /// @notice Swaps a token for another token\\n    /// @dev Please refer this function is called by swap() function\\n    /// @param tokenFrom The address of the token to be swapped\\n    /// @param tokenTo The address of the token to be swapped\\n    /// @param amount The token amount to be swapped\\n    function _swapFromTokenToToken(address tokenFrom, address tokenTo, uint256 amount) private {\\n        IERC20 tokenFrom_ = IERC20(tokenFrom);\\n        IERC20 tokenTo_ = IERC20(tokenTo);\\n        tokenFrom_.transferFrom(msg.sender, address(this), amount);\\n        uint256 balanceBefore = address(this).balance;\\n        tokenFrom_.transfer(tokenFrom, amount);\\n        uint256 balanceAfter = address(this).balance - balanceBefore;\\n        uint256 comission = balanceAfter.mulDiv(FEE, 10_000);\\n        balanceAfter -= comission;\\n        payable(tokenTo).call{value: balanceAfter}(\\\"\\\");\\n        payable(DEVELOPER_ADDRESS).call{value: comission / 2}(\\\"\\\");\\n        ITimeIsUp(payable(tupAddress)).receiveProfit{value: comission / 2}();\\n        tokenTo_.transfer(msg.sender, tokenTo_.balanceOf(address(this)));\\n    }\\n\\n    /// @notice Query the price of native currency in terms of an informed token\\n    /// @dev Please refer this function is called by queryPrice() function and it is only for viewing\\n    /// @param tokenTo The address of the token to be queried\\n    /// @param amount The native currency amount to be queried\\n    /// @return price The price of tokens to be obtained given some native currency amount\\n    function _queryPriceFromNativeToToken(address tokenTo, uint256 amount) private view returns (uint256) {\\n        uint256 price;\\n        if (tokenTo == timeAddress) \\n            price = ITimeToken(payable(tokenTo)).swapPriceNative(amount);\\n        else\\n            price = ITimeIsUp(payable(tokenTo)).queryPriceNative(amount);\\n        return price;\\n    }\\n\\n    /// @notice Query the price of an informed token in terms of native currency\\n    /// @dev Please refer this function is called by queryPrice() function and it is only for viewing\\n    /// @param tokenFrom The address of the token to be queried\\n    /// @param amount The token amount to be queried\\n    /// @return price The price of native currency to be obtained given some token amount\\n    function _queryPriceFromTokenToNative(address tokenFrom, uint256 amount) private view returns (uint256) {\\n        uint256 price;\\n        if (tokenFrom == timeAddress) \\n            price = ITimeToken(payable(tokenFrom)).swapPriceTimeInverse(amount);\\n        else\\n            price = ITimeIsUp(payable(tokenFrom)).queryPriceInverse(amount);\\n        return price;\\n    }\\n\\n    /// @notice Query the price of an informed token in terms of another informed token\\n    /// @dev Please refer this function is called by queryPrice() function and it is only for viewing\\n    /// @param tokenFrom The address of the token to be queried\\n    /// @param tokenTo The address of the token to be queried\\n    /// @param amount The token amount to be queried\\n    /// @return priceTo The price of tokens to be obtained given some another token amount\\n    /// @return nativeAmount The amount in native currency obtained from the query\\n    function _queryPriceFromTokenToToken(address tokenFrom, address tokenTo, uint256 amount) private view returns (uint256 priceTo, uint256 nativeAmount) {\\n        uint256 priceFrom = _queryPriceFromTokenToNative(tokenFrom, amount);\\n        nativeAmount = amount.mulDiv(priceFrom, FACTOR);\\n        if (tokenTo == timeAddress)\\n            priceTo = ITimeToken(payable(tokenTo)).swapPriceNative(nativeAmount);\\n        else \\n            priceTo = ITimeIsUp(payable(tokenTo)).queryPriceNative(nativeAmount);\\n        return (priceTo, nativeAmount);\\n    }\\n\\n    /// @notice Clean the contract if it has any exceeding token or native amount\\n    /// @dev It should pass the tokenToClean contract address\\n    /// @param tokenToClean The address of token contract\\n    function clean(address tokenToClean) public {\\n        if (address(this).balance > 0)\\n            payable(DEVELOPER_ADDRESS).call{value: address(this).balance}(\\\"\\\");\\n        if (tokenToClean != address(0))\\n            if (IERC20(tokenToClean).balanceOf(address(this)) > 0)\\n                IERC20(tokenToClean).transfer(DEVELOPER_ADDRESS, IERC20(tokenToClean).balanceOf(address(this)));\\n    }\\n\\n    /// @notice Swaps token or native currency for another token or native currency\\n    /// @dev It should inform address(0) as tokenFrom or tokenTo when considering native currency\\n    /// @param tokenFrom The address of the token to be swapped\\n    /// @param tokenTo The address of the token to be swapped\\n    /// @param amount The token or native currency amount to be swapped\\n    function swap(address tokenFrom, address tokenTo, uint256 amount) external payable onlyOncePerBlock {\\n        if (tokenFrom == address(0)) {\\n            require(tokenTo != address(0) && (tokenTo == timeAddress || tokenTo == tupAddress), \\\"Time Exchange: unallowed token\\\");\\n            require(msg.value > 0, \\\"Time Exchange: please inform the amount to swap\\\");\\n            _swapFromNativeToToken(tokenTo, msg.value);\\n            clean(tokenFrom);\\n            clean(tokenTo);\\n        } else if (tokenTo == address(0)) {\\n            require(amount > 0, \\\"Time Exchange: please inform the amount to swap\\\");\\n            require(tokenFrom == timeAddress || tokenFrom == tupAddress, \\\"Time Exchange: unallowed token\\\");\\n            require(IERC20(tokenFrom).allowance(msg.sender, address(this)) >= amount, \\\"Time Exchange: please approve the amount to swap\\\");\\n            _swapFromTokenToNative(tokenFrom, amount);\\n            clean(tokenFrom);\\n            clean(tokenTo);\\n        } else {\\n            require(amount > 0, \\\"Time Exchange: please inform the amount to swap\\\");\\n            require(tokenTo == timeAddress || tokenTo == tupAddress, \\\"Time Exchange: unallowed token\\\");\\n            require(tokenFrom == timeAddress || tokenFrom == tupAddress, \\\"Time Exchange: unallowed token\\\");\\n            require(IERC20(tokenFrom).allowance(msg.sender, address(this)) >= amount, \\\"Time Exchange: please approve the amount to swap\\\");\\n            _swapFromTokenToToken(tokenFrom, tokenTo, amount);\\n            clean(tokenFrom);\\n            clean(tokenTo);\\n        }\\n    }\\n\\n    /// @notice Query the price of token or native currency in terms of another token or native currency\\n    /// @dev It should inform address(0) as tokenFrom or tokenTo when considering native currency\\n    /// @param tokenFrom The address of the token to be queried\\n    /// @param tokenTo The address of the token to be queried\\n    /// @param amount The token or native currency amount to be queried\\n    /// @return price The queried price\\n    /// @return nativeAmount The native amount in the middle of the query (if the case)\\n    function queryPrice(address tokenFrom, address tokenTo, uint256 amount) external view returns (uint256, uint256) {\\n        if (tokenFrom == address(0)) {\\n            require(tokenTo != address(0) && (tokenTo == timeAddress || tokenTo == tupAddress), \\\"Time Exchange: unallowed token\\\");\\n            return (_queryPriceFromNativeToToken(tokenTo, amount), 0);\\n        } else if (tokenTo == address(0)) {\\n            require(tokenFrom == timeAddress || tokenFrom == tupAddress, \\\"Time Exchange: unallowed token\\\");\\n            return (_queryPriceFromTokenToNative(tokenFrom, amount), 0);\\n        } else {\\n            require(tokenTo == timeAddress || tokenTo == tupAddress, \\\"Time Exchange: unallowed token\\\");\\n            require(tokenFrom == timeAddress || tokenFrom == tupAddress, \\\"Time Exchange: unallowed token\\\");\\n            return _queryPriceFromTokenToToken(tokenFrom, tokenTo, amount);\\n        }        \\n    }\\n}\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/ITimeToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\ninterface ITimeToken {\\n    function DEVELOPER_ADDRESS() external view returns (address);\\n    function BASE_FEE() external view returns (uint256);\\n    function COMISSION_RATE() external view returns (uint256);\\n    function SHARE_RATE() external view returns (uint256);\\n    function TIME_BASE_LIQUIDITY() external view returns (uint256);\\n    function TIME_BASE_FEE() external view returns (uint256);\\n    function TOLERANCE() external view returns (uint256);\\n    function dividendPerToken() external view returns (uint256);\\n    function firstBlock() external view returns (uint256);\\n    function isMiningAllowed(address account) external view returns (bool);\\n    function liquidityFactorNative() external view returns (uint256);\\n    function liquidityFactorTime() external view returns (uint256);\\n    function numberOfHolders() external view returns (uint256);\\n    function numberOfMiners() external view returns (uint256);\\n    function sharedBalance() external view returns (uint256);\\n    function poolBalance() external view returns (uint256);\\n    function totalMinted() external view returns (uint256);\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function burn(uint256 amount) external;\\n    function transfer(address to, uint256 amount) external returns (bool success);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool success);\\n    function averageMiningRate() external view returns (uint256);\\n    function donateEth() external payable;\\n    function enableMining() external payable;\\n    function enableMiningWithTimeToken() external;\\n    function fee() external view returns (uint256);\\n    function feeInTime() external view returns (uint256);\\n    function mining() external;\\n    function saveTime() external payable returns (bool success);\\n    function spendTime(uint256 timeAmount) external returns (bool success);\\n    function swapPriceNative(uint256 amountNative) external view returns (uint256);\\n    function swapPriceTimeInverse(uint256 amountTime) external view returns (uint256);\\n    function accountShareBalance(address account) external view returns (uint256);\\n    function withdrawableShareBalance(address account) external view returns (uint256);\\n    function withdrawShare() external;\\n    receive() external payable;\\n}\\n\"\r\n    },\r\n    \"src/ITimeIsUp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\ninterface ITimeIsUp {\\n    function FLASH_MINT_FEE() external view returns (uint256);\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address to, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n    function accountShareBalance(address account) external view returns (uint256);\\n    function burn(uint256 amount) external;\\n    function mint(uint256 timeAmount) external payable;\\n    function queryAmountExternalLP(uint256 amountNative) external view returns (uint256);\\n    function queryAmountInternalLP(uint256 amountNative) external view returns (uint256);\\n    function queryAmountOptimal(uint256 amountNative) external view returns (uint256);\\n    function queryNativeAmount(uint256 d2Amount) external view returns (uint256);\\n    function queryNativeFromTimeAmount(uint256 timeAmount) external view returns (uint256);\\n    function queryPriceNative(uint256 amountNative) external view returns (uint256);\\n    function queryPriceInverse(uint256 d2Amount) external view returns (uint256);\\n    function queryRate() external view returns (uint256);\\n    function queryPublicReward() external view returns (uint256);\\n    function returnNative() external payable returns (bool);\\n    function splitSharesWithReward() external;\\n    function buy() external payable returns (bool success);\\n    function sell(uint256 d2Amount) external returns (bool success);\\n    function flashMint(uint256 d2AmountToBorrow, bytes calldata data) external;\\n    function payFlashMintFee() external payable;\\n    function poolBalance() external view returns (uint256);\\n    function toBeShared() external view returns (uint256);\\n    function receiveProfit() external payable;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@layerzerolabs/=lib/solidity-examples/\",\r\n      \"@aave/core-v3/=lib/aave-v3-core/\",\r\n      \"@chainlink/=lib/chainlink/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"aave-v3-core/=lib/aave-v3-core/\",\r\n      \"chainlink/=lib/chainlink/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"layerzero/=lib/layerzero/contracts/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"solidity-examples/=lib/solidity-examples/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tupAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"timeTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"timeExchangeAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInTup\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInTime\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMining\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBlockTimeWasProduced\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queryPublicRewardEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeExchange\",\"outputs\":[{\"internalType\":\"contract TimeExchange\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeToken\",\"outputs\":[{\"internalType\":\"contract ITimeToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tup\",\"outputs\":[{\"internalType\":\"contract ITimeIsUp\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Claimer", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "2000000", "ConstructorArguments": "00000000000000000000000057685ddbc1498f7873963cee5c186c7d95d916880000000000000000000000001666cf136d89ba9071c476eaf23035bccd7f3a36000000000000000000000000b46f8a90492d0d03b8c3ab112179c56f89a6f3e0", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}