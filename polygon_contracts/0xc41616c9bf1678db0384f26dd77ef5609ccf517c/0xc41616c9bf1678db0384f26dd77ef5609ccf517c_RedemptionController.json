{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/io.backters/contracts/RedemptionController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.2 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"../interfaces/IRedemptionController.sol\\\";\\nimport \\\"../interfaces/IOperatorTransferAnyERC20Token.sol\\\";\\nimport \\\"../interfaces/IOperatorMint.sol\\\";\\n\\n/**\\n * @title A protocol implementation to manage redemption plans\\n *\\n * @author Nerdoffice GmbH <blockchain@nerdoffice.io>\\n */\\ncontract RedemptionController is\\n    AccessControlEnumerable,\\n    IRedemptionController,\\n    IOperatorTransferAnyERC20Token\\n{\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n    bytes32 public constant REDEEMER_ROLE = keccak256(\\\"REDEEMER_ROLE\\\");\\n\\n    uint64 internal _start;\\n    uint64 internal _interval;\\n    uint256 internal _periods;\\n    address internal _token;\\n    address internal _rewardToken;\\n    address internal _rewardAccount;\\n\\n    struct Redemption {\\n        uint64 start;\\n        address account;\\n        uint256 period;\\n        uint256 amount;\\n        bytes data;\\n    }\\n\\n    struct Redemptions {\\n        uint256 index;\\n        uint256 size;\\n        mapping(uint256 => uint256) plans;\\n    }\\n\\n    uint256 internal _numRedemptions;\\n\\n    mapping(uint256 => Redemption) internal _plans;\\n    mapping(address => Redemptions) internal _redemptions;\\n\\n    /**\\n     * Create a new configured redemption contract.\\n     *\\n     * This contract has to have the necessary permissions to call some\\n     * functions of the redeem and reward token contracts.\\n     *\\n     * Reward token need to be send into this contract which itself distributes\\n     * the redemptions. This behavior can be changed by changing the reward\\n     * account but implies calls to approve transfers for this contract.\\n     *\\n     * The basic use case is to {add} redemptions for accounts, then check the\\n     * {redeemable} amount of tokens regularly. If the amount is not zero the\\n     * plans should be rewarded by calling {redeem} until the amount for all\\n     * plans is zero again.\\n     *\\n     * @param startTimestamp The start time of the first period or zero for current time\\n     * @param intervalSeconds The interval of each period in seconds\\n     * @param intervalPeriods The number of total periods\\n     * @param redeemTokenAddress The address of an ERC777 based token contract\\n     * @param rewardTokenAddress The address of an ERC20 based token contract\\n     */\\n    constructor(\\n        uint64 startTimestamp,\\n        uint64 intervalSeconds,\\n        uint256 intervalPeriods,\\n        address redeemTokenAddress,\\n        address rewardTokenAddress\\n    ) {\\n        //require(startTimestamp == 0 || startTimestamp > block.timestamp, \\\"RedemptionController: start time is before current time\\\");\\n        _start = startTimestamp > 0 ? startTimestamp: uint64(block.timestamp);\\n        _interval = intervalSeconds > 0 ? intervalSeconds: 4 * (4 weeks);\\n        _periods = intervalPeriods > 0 ? intervalPeriods: 9;\\n\\n        require(redeemTokenAddress != address(0), \\\"RedemptionController: redeem token is a zero address\\\");\\n        _token = redeemTokenAddress;\\n\\n        require(rewardTokenAddress != address(0), \\\"RedemptionController: reward token is a zero address\\\");\\n        _rewardToken = rewardTokenAddress;\\n\\n        _rewardAccount = address(this);\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(MANAGER_ROLE, _msgSender());\\n        _setupRole(REDEEMER_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * Destroy the contract as operator.\\n     */\\n    function destroy() public {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"RedemptionController: must have admin role\\\");\\n        selfdestruct(payable(_msgSender()));\\n    }\\n\\n    /**\\n     * Get the number of managed redemptions\\n     *\\n     * @return The number of managed redemptions\\n     */\\n    function count() public view virtual returns (uint256) {\\n        return _numRedemptions;\\n    }\\n\\n    /**\\n     * Get the start time of the first redemption period\\n     *\\n     * @return The start time in seconds of the first redemption period\\n     */\\n    function startsAt() public view virtual returns (uint256) {\\n        return _start;\\n    }\\n\\n     /**\\n     * Set the start time of the first redemption period. It must be a time\\n     * before the current block timestamp. Requires the MANAGER_ROLE.\\n     *\\n     * @param timestamp The start time in seconds for the first redemption period\\n     */\\n    function startsAt(uint64 timestamp) public virtual {\\n        require(hasRole(MANAGER_ROLE, _msgSender()), \\\"RedemptionController: must have manager role\\\");\\n        require(timestamp > 0, \\\"RedemptionController: start time can not be zero\\\");\\n        //require(_start < block.timestamp, \\\"RedemptionController: can not set start time if already started\\\");\\n        _start = timestamp;\\n    }\\n\\n    /**\\n     * Get the interval of a period in seconds\\n     *\\n     * @return The interval for a period in seconds\\n     */\\n    function interval() public view virtual returns (uint256) {\\n        return _interval;\\n    }\\n\\n    /**\\n     * Set the interval for a period in seconds\\n     *\\n     * @param timestamp The interval for a period in seconds\\n     */\\n    function interval(uint64 timestamp) public virtual {\\n        require(hasRole(MANAGER_ROLE, _msgSender()), \\\"RedemptionController: must have manager role\\\");\\n        require(timestamp > 0, \\\"RedemptionController: interval can not be zero\\\");\\n        _interval = timestamp;\\n    }\\n\\n    /**\\n     * Get the total number of redemption periods\\n     *\\n     * @return The current number of redemption periods\\n     */\\n    function periods() public view virtual returns (uint256) {\\n        return _periods;\\n    }\\n\\n    /**\\n     * Set the total number of redemption periods\\n     *\\n     * @param intervalPeriods The total number of periods periods to set\\n     */\\n    function periods(uint256 intervalPeriods) public virtual {\\n        require(hasRole(MANAGER_ROLE, _msgSender()), \\\"RedemptionController: must have manager role\\\");\\n        require(intervalPeriods > 0, \\\"RedemptionController: interval can not be zero\\\");\\n        _periods = intervalPeriods;\\n    }\\n\\n    /**\\n     * Get the contract address of the ERC777 redeem token\\n     *\\n     * @return The contract address of the ERC777 redeem token\\n     */\\n    function redeemToken() public view virtual returns (address) {\\n        return _token;\\n    }\\n\\n    /**\\n     * Set the contract address of the ERC777 redeem token\\n     *\\n     * @param at The contract address of ERC777 redeem token\\n     */\\n    function redeemToken(address at) public virtual {\\n        require(hasRole(MANAGER_ROLE, _msgSender()), \\\"RedemptionController: must have manager role\\\");\\n        _token = at;\\n    }\\n\\n    /**\\n     * Get the account holding the reward tokens\\n     *\\n     * @return The address of the account holding reward tokens\\n     */\\n    function rewardAccount() public view virtual returns (address) {\\n        return _rewardAccount;\\n    }\\n\\n    /**\\n     * Set the account holding the reward tokens\\n     *\\n     * @param account The address of for holding the reward tokens\\n     */\\n    function rewardAccount(address account) public virtual {\\n        require(hasRole(MANAGER_ROLE, _msgSender()), \\\"RedemptionController: must have manager role\\\");\\n        _rewardAccount = account;\\n    }\\n\\n    /**\\n     * Get the contract address of the ERC20 reward token\\n     *\\n     * @return The address contract of the the ERC20 reward token\\n     */\\n    function rewardToken() public view virtual returns (address) {\\n        return _rewardToken;\\n    }\\n\\n    /**\\n     * Set the contract address of the ERC20 reward token\\n     *\\n     * @param at The contract address of the ERC20 reward token\\n     */\\n    function rewardToken(address at) public virtual {\\n        require(hasRole(MANAGER_ROLE, _msgSender()), \\\"RedemptionController: must have manager role\\\");\\n        _rewardToken = at;\\n    }\\n\\n    /**\\n     * Get the total supply of the redeem token\\n     *\\n     * @return The total supply returned by the redeem token contract\\n     */\\n    function redeemTokenTotalSupply() public view virtual returns (uint256) {\\n        return IERC20(redeemToken()).totalSupply();\\n    }\\n\\n    /**\\n     * Get the reward token balance of the reward account\\n     *\\n     * @return balance The reward token balance of the reward account\\n     */\\n    function rewardTokenBalance() public view virtual returns (uint256 balance) {\\n        return IERC20(rewardToken()).balanceOf(rewardAccount());\\n    }\\n\\n    /**\\n     * Add a redemption plan\\n     *\\n     * @param account The account to add a redemption plan for\\n     * @param amount The amount of token for the plan\\n     * @param data Optional custom data to track for this plan related to the account\\n     */\\n    function add(\\n        address account,\\n        uint256 amount,\\n        bytes memory data\\n    ) public\\n    {\\n        require(hasRole(MANAGER_ROLE, _msgSender()), \\\"RedemptionController: must have manager role\\\");\\n\\n        uint64 timestamp = block.timestamp < startsAt() ? uint64(startsAt()): uint64(block.timestamp);\\n        _add(account, amount, timestamp, data);\\n    }\\n\\n    /**\\n     * Modify a redemption plan for an account\\n     *\\n     * @param offset The offset of the redemption plan\\n     * @param start The start timestamp of the redemption plan\\n     * @param period The period of the plan\\n     * @param account The account address for the plan\\n     * @param amount The amount of token for the plan\\n     * @param data Optional custom data to track for this plan related to the account\\n     */\\n    function set(\\n        uint256 offset,\\n        uint64 start,\\n        uint256 period,\\n        address account,\\n        uint256 amount,\\n        bytes memory data\\n    ) public\\n    {\\n        require(hasRole(MANAGER_ROLE, _msgSender()), \\\"RedemptionController: must have manager role\\\");\\n        require(offset <= _numRedemptions, \\\"RedemptionController: invalid offset\\\");\\n        _setRedemption(offset, start, period, account, amount, data);\\n    }\\n\\n    /**\\n     * Add redemption plans in a batch\\n     *\\n     * @param accounts The accounts to add redemption plans for\\n     * @param amounts The amounts of token for each plan\\n     * @param data Optional custom data to track for this plan related to the account\\n     */\\n    function batchAdd(\\n        address[] calldata accounts,\\n        uint256[] calldata amounts,\\n        bytes[] calldata data\\n    ) public\\n    {\\n        require(hasRole(MANAGER_ROLE, _msgSender()), \\\"RedemptionController: must have manager role\\\");\\n        require(accounts.length == amounts.length, \\\"RedemptionController: accounts and amounts length mismatch\\\");\\n\\n        uint64 timestamp = block.timestamp < startsAt() ? uint64(startsAt()): uint64(block.timestamp);\\n\\n        for (uint256 i; i < accounts.length; i++) {\\n            _add(accounts[i], amounts[i], timestamp, data[i]);\\n        }\\n    }\\n\\n    /**\\n     * Migrate redemption plans in a batch\\n     *\\n     * @param starts The start timestamps of the redemption plans\\n     * @param startPeriods The current period of the redemption plans\\n     * @param accounts The accounts to add redemption plans for\\n     * @param amounts The amounts of token for each plan\\n     * @param data Optional custom data of each plan\\n     */\\n    function batchMigrate(\\n        uint64[] calldata starts,\\n        uint256[] calldata startPeriods,\\n        address[] calldata accounts,\\n        uint256[] calldata amounts,\\n        bytes[] calldata data\\n    ) external\\n    {\\n        require(hasRole(MANAGER_ROLE, _msgSender()), \\\"RedemptionController: must have manager role\\\");\\n        uint256 redemptionsCount = accounts.length;\\n        require(redemptionsCount == amounts.length, \\\"RedemptionController: accounts and amounts length mismatch\\\");\\n\\n        uint256 currentRedemptionsCount = _numRedemptions;\\n\\n        for (uint256 i; i < redemptionsCount;) {\\n            _addRedemption(currentRedemptionsCount, starts[i], startPeriods[i], accounts[i], amounts[i], data[i]);\\n            unchecked { currentRedemptionsCount++; i++; }\\n        }\\n\\n        _numRedemptions = currentRedemptionsCount;\\n    }\\n\\n    /**\\n     * Internal function to modify a redemption plan\\n     *\\n     * @param offset The offset of the redemption plan\\n     * @param start The start timestamp of the redemption plan\\n     * @param period The period of the plan\\n     * @param account The account address for the plan\\n     * @param amount The amount of token for the plan\\n     * @param data Optional custom data to track for this plan related to the account\\n     */\\n    function _setRedemption(\\n        uint256 offset,\\n        uint64 start,\\n        uint256 period,\\n        address account,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal {\\n        Redemption storage redemption = _plans[offset];\\n\\n        redemption.start = start;\\n        redemption.period = period;\\n        redemption.account = account;\\n        redemption.amount = amount;\\n        redemption.data = data;\\n\\n        emit RedemptionChanged(\\n            account,\\n            offset,\\n            amount,\\n            start,\\n            period,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * Internal function to add a redemption plan\\n     *\\n     * @param offset The offset of the redemption plan\\n     * @param start The start timestamp of the redemption plan\\n     * @param period The period of the plan\\n     * @param account The account address for the plan\\n     * @param amount The amount of token for the plan\\n     * @param data Optional custom data to track for this plan related to the account\\n     *\\n     * @return plan The id of the created plan\\n     */\\n    function _addRedemption(\\n        uint256 offset,\\n        uint64 start,\\n        uint256 period,\\n        address account,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal returns (uint256 plan) {\\n        Redemption storage redemption = _plans[offset];\\n\\n        redemption.start = start;\\n        redemption.period = period;\\n        redemption.account = account;\\n        redemption.amount = amount;\\n        redemption.data = data;\\n\\n        Redemptions storage redemptions = _redemptions[account];\\n\\n        uint256 index = redemptions.index;\\n\\n        redemptions.plans[index] = offset;\\n        redemptions.index = index + 1;\\n        redemptions.size++;\\n\\n        emit RedemptionCreated(\\n            account,\\n            plan,\\n            amount,\\n            start,\\n            period,\\n            data\\n        );\\n    \\n        plan = index + 1;\\n    }\\n\\n    /**\\n     * Add a redemption plan and mint token to the account\\n     *\\n     * @param account The account address for the redemption\\n     * @param amount The amount of token for the redemption and to mint\\n     * @param timestamp The timestamp the redemption should start at\\n     * @param data Optional custom data to track for this plan related to the account\\n     *\\n     * @return plan The id of this plan\\n     */\\n    function _add(\\n        address account,\\n        uint256 amount,\\n        uint64 timestamp,\\n        bytes memory data\\n    ) internal returns (uint256 plan) {\\n        require(account != address(0), \\\"RedemptionController: account is zero address\\\");\\n        require(amount > 0, \\\"RedemptionController: amount must be more than zero\\\");\\n\\n        IOperatorMint(redeemToken()).operatorMint(account, amount, data, \\\"\\\");\\n\\n        uint64 shifted = timestamp < startsAt() ? uint64(startsAt()): uint64(timestamp);\\n\\n        uint256 passed = shifted - startsAt();\\n        uint256 period = passed > interval() ? passed / interval(): 0;\\n\\n        uint64 start;\\n\\n        if (timestamp <= startsAt()) {\\n            start = uint64(startsAt());\\n        } else {\\n            start = uint64(startsAt()) + uint64(uint64(interval()) * uint64(period + 1));\\n        }\\n\\n        plan = _addRedemption(_numRedemptions, start, periods(), account, amount, data);\\n\\n        _numRedemptions++;\\n    }\\n\\n    /**\\n     * Get the redemption plans for an account\\n     *\\n     * @param account The account to get information for\\n     *\\n     * @return start The start timestamps of each redemption plan\\n     * @return period The period of each redemption plan\\n     * @return amount The amount for each redemption\\n     * @return data The custom data tracked for this plan related to the account\\n     */\\n    function get(\\n        address account\\n    ) public view returns (\\n        uint64[] memory start,\\n        uint256[] memory period,\\n        uint256[] memory amount,\\n        bytes[] memory data\\n    ) {\\n        Redemptions storage redemptions = _redemptions[account];\\n\\n        start = new uint64[](redemptions.size);\\n        period = new uint256[](redemptions.size);\\n        amount = new uint256[](redemptions.size);\\n        data = new bytes[](redemptions.size);\\n\\n        if (redemptions.size > 0) {\\n            uint256 index;\\n            while (index < redemptions.size) {\\n                uint256 i = redemptions.plans[index];\\n                start[index] = _plans[i].start;\\n                period[index] = _plans[i].period;\\n                amount[index] = _plans[i].amount;\\n                data[index] = _plans[i].data;\\n                unchecked { index++; }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Get the informations for all redemption plans\\n     *\\n     * @return start The start timestamps of each redemption plan\\n     * @return period The period of each redemption plan\\n     * @return amount The amount for each redemption\\n     * @return account The account address for each redemption plan\\n     * @return data The custom data tracked for each plan\\n     */\\n    function getAll(\\n    ) public view returns (\\n        uint64[] memory start,\\n        uint256[] memory period,\\n        uint256[] memory amount,\\n        address[] memory account,\\n        bytes[] memory data\\n    ) {\\n        uint256 numRedemptions = _numRedemptions;\\n\\n        start = new uint64[](numRedemptions);\\n        period = new uint256[](numRedemptions);\\n        amount = new uint256[](numRedemptions);\\n        account = new address[](numRedemptions);\\n        data = new bytes[](numRedemptions);\\n\\n        for (uint256 i; i < numRedemptions;) {\\n            start[i] = _plans[i].start;\\n            period[i] = _plans[i].period;\\n            amount[i] = _plans[i].amount;\\n            account[i] = _plans[i].account;\\n            data[i] = _plans[i].data;\\n\\n            unchecked { i++; }\\n        }\\n    }\\n\\n    /**\\n     * Remove all redemption plans and thus reset the state\\n     */\\n    function reset(\\n    ) public virtual {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"RedemptionController: must have admin role\\\");\\n\\n        if (_numRedemptions == 0) {\\n            return;\\n        }\\n\\n        uint256 numRedemptions = _numRedemptions - 1;\\n\\n        for (uint256 i = numRedemptions; i >= 0;) {\\n            address account = _plans[i].account;\\n\\n            delete _plans[i];\\n\\n            Redemptions storage redemptions = _redemptions[account];\\n\\n            uint256 index = redemptions.index;\\n\\n            if (index != 0) {\\n                redemptions.index = index - 1;\\n            }\\n\\n            if (redemptions.size == 0) {\\n                delete _redemptions[account];\\n            }\\n\\n            if (redemptions.size != 0) {\\n                redemptions.size--;\\n            }\\n\\n            delete redemptions.plans[index];\\n\\n            if (i == 0) {\\n                break;\\n            }\\n\\n            unchecked { i--; }\\n        }\\n\\n        _numRedemptions = 0;\\n    }\\n\\n    /**\\n     * Get the informations for redemption plans starting from offset\\n     *\\n     * @param offset The start offset\\n     * @param limit The number of records to return\\n     * \\n     * @return start The start timestamps of each redemption plan\\n     * @return period The period of each redemption plan\\n     * @return amount The amount for each redemption\\n     * @return account The account address for each redemption plan\\n     * @return data The custom data tracked for each plan\\n     */\\n    function get(\\n        uint256 offset,\\n        uint256 limit\\n    ) public view returns (\\n        uint64[] memory start,\\n        uint256[] memory period,\\n        uint256[] memory amount,\\n        address[] memory account,\\n        bytes[] memory data\\n    ) {\\n        uint256 numRedemptions = _numRedemptions;\\n\\n        require((offset + limit) <= numRedemptions, \\\"RedemptionController: invalid offset/limit\\\");\\n\\n        start = new uint64[](limit);\\n        period = new uint256[](limit);\\n        amount = new uint256[](limit);\\n        account = new address[](limit);\\n        data = new bytes[](limit);\\n\\n        uint256 index;\\n\\n        for (uint256 i; i < limit && i < numRedemptions;) {\\n            index = offset + i;\\n\\n            start[i] = _plans[index].start;\\n            period[i] = _plans[index].period;\\n            amount[i] = _plans[index].amount;\\n            account[i] = _plans[index].account;\\n            data[i] = _plans[index].data;\\n\\n            unchecked { i++; }\\n        }\\n    }\\n\\n    /**\\n     * Import redemption state from another RedemptionController contract\\n     *\\n     * @param redemptionContractAddress The address of the redemption controller to import from\\n     */\\n    function migrateStateFrom(\\n        address redemptionContractAddress\\n    ) public virtual {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"RedemptionController: must have admin role\\\");\\n        require(redemptionContractAddress != address(0), \\\"RedemptionController: redemption contract is a zero address\\\");\\n\\n        _start = uint64(IRedemptionController(redemptionContractAddress).startsAt());\\n        _interval = uint64(IRedemptionController(redemptionContractAddress).interval());\\n        _periods = IRedemptionController(redemptionContractAddress).periods();\\n        _token = IRedemptionController(redemptionContractAddress).redeemToken();\\n        _rewardToken = IRedemptionController(redemptionContractAddress).rewardToken();\\n\\n        // Only set reward account if different from former contract\\n        address rewardAccountAddress = IRedemptionController(redemptionContractAddress).rewardAccount();\\n        if (redemptionContractAddress != rewardAccountAddress) {\\n            _rewardAccount = IRedemptionController(redemptionContractAddress).rewardAccount();\\n        }\\n    }\\n\\n    /**\\n     * Determine the account that holds a specific redeem token. This looks at\\n     * all holders and their amounts and counts up until the target token to\\n     * pick the account this token would be in. Therefore holds with a larger\\n     * amount of token have a higher chance to be picked. The offset must be\\n     * less than the redeem token total supply.\\n     *\\n     * @param offset The token offset to use\\n     *\\n     * @return account The account that holds the token for the provided offset\\n     */\\n    function getAccountAtOffset(\\n        uint256 offset\\n    ) public view returns (address account) {\\n        require(offset <= redeemTokenTotalSupply(), \\\"RedemptionController: offset must be less than than redeem token total supply\\\");\\n\\n        uint256 total;\\n\\n        for (uint256 i; i < _numRedemptions; i++) {\\n            Redemption storage redemption = _plans[i];\\n\\n            if (offset >= total && offset <= (total + redemption.amount)) {\\n                return redemption.account;\\n            }\\n\\n            total += redemption.amount;\\n        }\\n\\n        return address(0);\\n    }\\n\\n    /**\\n     * Get the total amount of reward token for all plans of an account at a\\n     * specific time.\\n     *\\n     * @param account The account to calculate for\\n     * @param timestamp The timestamp to use for calculation\\n     *\\n     * @return amount The total amount of reward token for this account per plan\\n     * @return span The current periods each plan is at for this account\\n     */\\n    function redeemableAt(\\n        address account,\\n        uint64 timestamp\\n    ) public view returns (\\n        uint256[] memory amount,\\n        uint256[] memory span\\n    ) {\\n        Redemptions storage redemptions = _redemptions[account];\\n\\n        amount = new uint256[](redemptions.size);\\n        span = new uint256[](redemptions.size);\\n\\n        if (redemptions.size > 0) {\\n            uint256 index;\\n            while (index < redemptions.size) {\\n                uint256 i = redemptions.plans[index];\\n                (amount[index], span[index]) = _redemptionSchedule(_plans[i], timestamp);\\n                index++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Get the total amount of reward token for all plans at a specific time.\\n     *\\n     * @param timestamp The timestamp to use for calculation\\n     *\\n     * @return amount The total amount of reward token this plan can redeem\\n     */\\n    function redeemableAt(\\n        uint64 timestamp\\n    ) public view returns (uint256 amount) {\\n        for (uint256 i; i < _numRedemptions; i++) {\\n            if (_plans[i].amount > 0) {\\n                (uint256 redemptionAmount,) = _redemptionSchedule(_plans[i], timestamp);\\n                amount += redemptionAmount;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Get the total amount of reward token for each plan of an account at the\\n     * current block timestamp. This does not transfer the rewards.\\n     *\\n     * @param account The account to calculate for\\n     *\\n     * @return amount The total amount of reward token for this account per plan\\n     * @return span The current periods each plan is at for this account\\n     */\\n    function redeemable(\\n        address account\\n    ) public view returns (\\n        uint256[] memory amount,\\n        uint256[] memory span\\n    ) {\\n        return redeemableAt(account, uint64(block.timestamp));\\n    }\\n\\n    /**\\n     * Get the total amount of reward token for all plans at the current block\\n     * timestamp. This does not transfer the rewards.\\n     *\\n     * @return amount The total amount of reward token\\n     */\\n    function redeemable(\\n    ) public view returns (uint256 amount) {\\n        return redeemableAt(uint64(block.timestamp));\\n    }\\n\\n    /**\\n     * Internal function to process and redeem a number of plans at a time.\\n     *\\n     * @param limit The maximum number of plans to process and redeem\\n     * @param timestamp The timestamp to use for calculation\\n     *\\n     * Emits {IERC20-Transfer}, {IERC777-Burned} and {RedemptionDistributed} events.\\n     */\\n    function _redeemPlansAt(\\n        uint256 limit,\\n        uint64 timestamp\\n    ) internal\\n    {\\n        uint256 remaining = redeemableAt(timestamp);\\n\\n        uint8 decimals = IERC20Metadata(rewardToken()).decimals();\\n        uint256 remainingValue = remaining / (10 ** (18 - decimals));\\n\\n        require(IERC20(rewardToken()).balanceOf(rewardAccount()) >= remainingValue, \\\"RedemptionController: insufficient balance in reward account\\\");\\n\\n        if (limit == 0) {\\n            limit = _numRedemptions;\\n        }\\n\\n        for (uint256 i; i < _numRedemptions && limit > 0; i++) {\\n            uint256 left = _redeemAt(i, timestamp);\\n            if (left > 0) {\\n                limit--;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Internal function to calculate the redeem amount and period at a time.\\n     *\\n     * @param plan The plan index\\n     * @param timestamp The timestamp to use for calculation\\n     *\\n     * @return amount The amount that was redeemed for this plan\\n     *\\n     * Emits {IERC20-Transfer}, {IERC777-Burned} and {RedemptionDistributed} events.\\n     */\\n    function _redeemAt(\\n        uint256 plan,\\n        uint64 timestamp\\n    ) internal returns (uint256) {\\n        Redemption storage redemption = _plans[plan];\\n\\n        (uint256 amount, uint256 span) = _redemptionSchedule(redemption, timestamp);\\n\\n        if (amount > 0) {\\n            address account = redemption.account;\\n\\n            uint8 decimals = IERC20Metadata(rewardToken()).decimals();\\n            uint256 amountValue = amount / (10 ** (18 - decimals));\\n\\n            if (rewardAccount() == address(this)) {\\n                IERC20(rewardToken()).transfer(account, amountValue);\\n            } else {\\n                IERC20(rewardToken()).transferFrom(rewardAccount(), account, amountValue);\\n            }\\n\\n            IERC777(redeemToken()).operatorBurn(account, amount, redemption.data, \\\"\\\");\\n\\n            redemption.amount -= amount;\\n            redemption.period -= span;\\n\\n            emit RedemptionDistributed(\\n                account,\\n                plan,\\n                amount,\\n                redemption.amount,\\n                span,\\n                redemption.data\\n            );\\n        }\\n\\n        return amount;\\n    }\\n\\n    /**\\n     * Internal function to calculate the redeem amount and period at a time.\\n     *\\n     * @param redemption The redemption\\n     * @param timestamp The timestamp to use for calculation\\n     *\\n     * @return amount The amount to redeem for this redemption\\n     * @return span The period within the contract periods based on the timestamp\\n     */\\n    function _redemptionSchedule(\\n        Redemption memory redemption,\\n        uint64 timestamp\\n    ) internal view returns (\\n        uint256 amount,\\n        uint256 span\\n    ) {\\n        if (timestamp < startsAt() || timestamp < redemption.start) {\\n            return (0,0);\\n        } else if (redemption.period == 0) {\\n            return (0,0);\\n        } else {\\n            uint256 passed = timestamp - redemption.start;\\n            uint256 period = passed > interval() ? passed / interval(): 0;\\n            if (period > 0) {\\n                uint256 redemptionAmount = (((redemption.amount * 1e4) / redemption.period) / 1e4);\\n                span = period > periods() ? redemption.period: (redemption.period - (periods() - period));\\n                amount = redemptionAmount * span;\\n                //uint256 redemptionAmountModifier = _redemptionPeriodPercentage > 0 ? ((_redemptionPeriodPercentage * periods()) / 1e4): 1;\\n                //amount = redemptionAmount * redemptionAmountModifier * span;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Process a number of redemptions plans and redeem tokens to holders. The\\n     * use of the the limit argument allows to have some control of fees.\\n     *\\n     * @param limit The maximum number of plans to process and redeem\\n     */\\n    function redeem(\\n        uint256 limit\\n    ) public\\n    {\\n        require(hasRole(REDEEMER_ROLE, _msgSender()), \\\"RedemptionController: must have redeemer role\\\");\\n\\n        uint64 timestamp = block.timestamp < startsAt() ? uint64(startsAt()): uint64(block.timestamp);\\n        _redeemPlansAt(limit, timestamp);\\n    }\\n\\n    /**\\n     * Update redemption plans of an account based on current balance. This\\n     * is not expected to be used regularly but allows to resolve plans for\\n     * accounts which have been altered by an operator of the redeem token\\n     * directly. Handle with care.\\n     *\\n     * @param account The account to update\\n     */\\n    function update(\\n        address account\\n    ) public\\n    {\\n        require(hasRole(MANAGER_ROLE, _msgSender()), \\\"RedemptionController: must have manager role\\\");\\n\\n        Redemptions storage redemptions = _redemptions[account];\\n\\n        if (redemptions.size > 0) {\\n            uint256 index;\\n            uint256 total = IERC777(redeemToken()).balanceOf(account);\\n            while (index < redemptions.size) {\\n                uint256 i = redemptions.plans[index];\\n                if (_plans[i].amount > 0) {\\n                    if (total >= _plans[i].amount) {\\n                        total -= _plans[i].amount;\\n                    } else {\\n                        _plans[i].amount = total;\\n                        total = 0;\\n                    }\\n                }\\n                index++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Withdraw any ERC20 token held by this contract as MANAGER_ROLE.\\n     *\\n     * @param token The contract address of the ERC20 token\\n     * @param recipient The address of the recipient\\n     * @param amount The amount of token to transfer\\n     *\\n     * @return success Returns the result of the {IERC20-Transfer} function\\n     */\\n    function operatorTransferAnyERC20Token(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool success) {\\n        require(hasRole(MANAGER_ROLE, _msgSender()), \\\"RedemptionController: must have manager role\\\");\\n        return IERC20(token).transfer(recipient, amount);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(AccessControlEnumerable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/io.backters/interfaces/IRedemptionController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.2 <0.9.0;\\n\\ninterface IRedemptionController {\\n    function count() external view returns (uint256);\\n\\n    function startsAt() external view returns (uint256);\\n\\n    function startsAt(uint64 timestamp) external;\\n\\n    function interval() external view returns (uint256);\\n\\n    function interval(uint64 timestamp) external;\\n\\n    function periods() external view returns (uint256);\\n\\n    function periods(uint256 intervalPeriods) external;\\n\\n    function redeemToken() external view returns (address);\\n\\n    function redeemToken(address at) external;\\n\\n    function rewardAccount() external view returns (address);\\n\\n    function rewardAccount(address account) external;\\n\\n    function rewardToken() external view returns (address);\\n\\n    function rewardToken(address at) external;\\n\\n    function redeemTokenTotalSupply() external view returns (uint256);\\n\\n    function rewardTokenBalance() external view returns (uint256 balance);\\n\\n    function add(address account, uint256 amount, bytes calldata data) external;\\n\\n    function set(uint256 offset, uint64 start, uint256 period, address account, uint256 amount, bytes calldata data) external;\\n\\n    function batchAdd(address[] calldata accounts, uint256[] calldata amounts, bytes[] calldata data) external;\\n\\n    function get(address account) external view returns (uint64[] memory start, uint256[] memory period, uint256[] memory amount, bytes[] memory data);\\n\\n    function get(uint256 offset, uint256 limit) external view returns (uint64[] memory start, uint256[] memory period, uint256[] memory amount, address[] memory account, bytes[] memory data);\\n\\n    function getAll() external view returns (uint64[] memory start, uint256[] memory period, uint256[] memory amount, address[] memory account, bytes[] memory data);\\n\\n    function getAccountAtOffset(uint256 offset) external view returns (address account);\\n\\n    function reset() external;\\n\\n    function redeemableAt(address account, uint64 timestamp) external view returns (uint256[] memory amount, uint256[] memory span);\\n\\n    function redeemableAt(uint64 timestamp) external view returns (uint256 amount);\\n\\n    function redeemable(address account) external view returns (uint256[] memory amount, uint256[] memory span);\\n\\n    function redeemable() external view returns (uint256 amount);\\n\\n    function redeem(uint256 limit) external;\\n\\n    event RedemptionCreated(\\n        address indexed account,\\n        uint256 indexed plan,\\n        uint256 amount,\\n        uint64 start,\\n        uint256 periods,\\n        bytes data\\n    );\\n\\n    event RedemptionChanged(\\n        address indexed account,\\n        uint256 indexed plan,\\n        uint256 amount,\\n        uint64 start,\\n        uint256 periods,\\n        bytes data\\n    );\\n\\n    event RedemptionDistributed(\\n        address indexed account,\\n        uint256 indexed plan,\\n        uint256 redeemed,\\n        uint256 remaining,\\n        uint256 span,\\n        bytes data\\n    );\\n}\\n\"\r\n    },\r\n    \"/contracts/io.backters/interfaces/IOperatorTransferAnyERC20Token.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.2 <0.9.0;\\n\\ninterface IOperatorTransferAnyERC20Token {\\n     /**\\n     * Owner can withdraw any ERC20 token received by the contract\\n     */\\n    function operatorTransferAnyERC20Token(address token, address recipient, uint256 amount) external returns (bool success);\\n}\\n\"\r\n    },\r\n    \"/contracts/io.backters/interfaces/IOperatorMint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.2 <0.9.0;\\n\\ninterface IOperatorMint {\\n    function operatorMint(address account, uint256 amount, bytes calldata data, bytes calldata operatorData) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC777/IERC777.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC777/IERC777.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777Token standard as defined in the EIP.\\n *\\n * This contract uses the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\\n * token holders and recipients react to token movements by using setting implementers\\n * for the associated interfaces in said registry. See {IERC1820Registry} and\\n * {ERC1820Implementer}.\\n */\\ninterface IERC777 {\\n    /**\\n     * @dev Emitted when `amount` tokens are created by `operator` and assigned to `to`.\\n     *\\n     * Note that some additional user `data` and `operatorData` can be logged in the event.\\n     */\\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\\n\\n    /**\\n     * @dev Emitted when `operator` destroys `amount` tokens from `account`.\\n     *\\n     * Note that some additional user `data` and `operatorData` can be logged in the event.\\n     */\\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\\n\\n    /**\\n     * @dev Emitted when `operator` is made operator for `tokenHolder`.\\n     */\\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    /**\\n     * @dev Emitted when `operator` is revoked its operator status for `tokenHolder`.\\n     */\\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For most token contracts, this value will equal 1.\\n     */\\n    function granularity() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external;\\n\\n    /**\\n     * @dev Revoke an account's operator status for the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    event Sent(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bytes data,\\n        bytes operatorData\\n    );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"intervalSeconds\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"intervalPeriods\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"redeemTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"plan\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"start\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periods\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"RedemptionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"plan\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"start\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periods\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"RedemptionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"plan\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"span\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"RedemptionDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDEEMER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"batchAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"starts\",\"type\":\"uint64[]\"},{\"internalType\":\"uint256[]\",\"name\":\"startPeriods\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"batchMigrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"start\",\"type\":\"uint64[]\"},{\"internalType\":\"uint256[]\",\"name\":\"period\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"account\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"start\",\"type\":\"uint64[]\"},{\"internalType\":\"uint256[]\",\"name\":\"period\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getAccountAtOffset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAll\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"start\",\"type\":\"uint64[]\"},{\"internalType\":\"uint256[]\",\"name\":\"period\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"account\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"interval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"redemptionContractAddress\",\"type\":\"address\"}],\"name\":\"migrateStateFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"operatorTransferAnyERC20Token\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"intervalPeriods\",\"type\":\"uint256\"}],\"name\":\"periods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"at\",\"type\":\"address\"}],\"name\":\"redeemToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemTokenTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"redeemable\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"span\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"redeemableAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"redeemableAt\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"span\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"rewardAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"at\",\"type\":\"address\"}],\"name\":\"rewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"start\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"startsAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startsAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RedemptionController", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000627c3ff00000000000000000000000000000000000000000000000000000000000a081bc0000000000000000000000000000000000000000000000000000000000000009000000000000000000000000fef943a38d153778b43328dab075203e66f164640000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}