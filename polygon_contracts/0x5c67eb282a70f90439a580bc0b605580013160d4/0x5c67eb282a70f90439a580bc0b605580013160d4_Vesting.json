{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Vesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IVesting.sol\\\";\\n\\n/// @title TokenVesting\\n/// @dev Multiple vesting release contract.\\n/// Owner of contract can create new vestings.\\ncontract Vesting is IVesting, Ownable {\\n  using SafeERC20 for IERC20;\\n\\n  uint256 public constant PRECISION = 10_000;\\n\\n  /// @notice Vested token.\\n  IERC20 public immutable token;\\n  /// @notice Amount of tokens on the contract.\\n  /// @dev It is using for control allocation.\\n  uint256 public totalTokensAllocation;\\n  /// @notice Amount of tokens which are reserved in another vestings.\\n  /// @dev It is using for control allocation.\\n  uint256 public totalTokensInVestings;\\n\\n  /// @notice keep information about user's and their vestings.\\n  /// @dev It is used for calculations of withdrawable tokens.\\n  mapping(address => Vesting[]) public vestings;\\n\\n  /// @dev Constructor. Sets the ERC-20 token contract address\\n  /// @param _tokenAddress Address of token\\n  constructor(address _tokenAddress) {\\n    require(_tokenAddress != address(0), \\\"Invalid token address\\\");\\n    token = IERC20(_tokenAddress);\\n  }\\n\\n  /// @dev Shows withdrawable amount for beneficiary(msg.sender)\\n  /// @return amount of tokens which beneficiary can withdraw\\n  function getUnlockedShares() external view returns (uint256) {\\n    Vesting[] memory vesting = vestings[msg.sender];\\n\\n    uint256 unlockedShares;\\n    for (uint256 i = 0; i < vesting.length; i++) {\\n      unlockedShares += _getWithdrawableAmount(vesting[i]);\\n    }\\n    return unlockedShares;\\n  }\\n\\n  /// @dev Shows total vested amount for beneficiary(msg.sender)\\n  /// @return amount of vested tokens for beneficiary\\n  function getTotalShares(address shareholder) external view returns (uint256) {\\n    Vesting[] memory vesting = vestings[shareholder];\\n\\n    uint256 totalShares;\\n    for (uint256 i = 0; i < vesting.length; i++) {\\n      totalShares += vesting[i].amount;\\n    }\\n    return totalShares;\\n  }\\n\\n  /// @dev Shows total outstanding shares for beneficiary(msg.sender)\\n  /// @return amount of tokens which beneficiary can withdraw in the future\\n  function getOutstandingShares() external view returns (uint256) {\\n    Vesting[] memory vesting = vestings[msg.sender];\\n\\n    uint256 outstandingShares;\\n    for (uint256 i = 0; i < vesting.length; i++) {\\n      outstandingShares += vesting[i].amount - vesting[i].claimedAmount;\\n    }\\n    return outstandingShares;\\n  }\\n\\n  /// @dev Shows total withdrawn shares for beneficiary(msg.sender)\\n  /// @return amount of tokens which beneficiary already withdrawn\\n  function getWithdrawnShares() external view returns (uint256) {\\n    Vesting[] memory vesting = vestings[msg.sender];\\n\\n    uint256 withdrawnShares;\\n    for (uint256 i = 0; i < vesting.length; i++) {\\n      withdrawnShares += vesting[i].claimedAmount;\\n    }\\n    return withdrawnShares;\\n  }\\n\\n  /// @dev Create vesting\\n  /// @param _beneficiary Address of beneficiary\\n  /// @param _amount Amount of tokens for vesting\\n  /// @param _initialPercentUnlock percent of vested tokens for initial unlock\\n  /// @param _vestingSchedule  Vesting schedule for vesting\\n  /// @param _revocable describing whether it is possible to revoke.\\n  function createVesting(\\n    address _beneficiary,\\n    uint256 _amount,\\n    uint256 _initialPercentUnlock,\\n    LinearVestingSchedule calldata _vestingSchedule,\\n    bool _revocable\\n  ) external onlyOwner {\\n    _createVesting(_beneficiary, _amount, _initialPercentUnlock, _vestingSchedule, _revocable);\\n  }\\n\\n  /// @dev Create multiple vestings\\n  /// @param _beneficiaries Addresses of beneficiaries\\n  /// @param _amounts Amount of tokens for vesting\\n  /// @param _initialPercentUnlocks percent of vested tokens for initial unlocks\\n  /// @param _vestingSchedules  Vesting schedule for vestings\\n  /// @param _revocable describing whether it is possible to revoke.\\n  function createVestingsBatch(\\n    address[] calldata _beneficiaries,\\n    uint256[] calldata _amounts,\\n    uint256[] calldata _initialPercentUnlocks,\\n    LinearVestingSchedule[] calldata _vestingSchedules,\\n    bool[] calldata _revocable\\n  ) external onlyOwner {\\n    require(\\n      _beneficiaries.length == _amounts.length &&\\n        _beneficiaries.length == _initialPercentUnlocks.length &&\\n        _beneficiaries.length == _vestingSchedules.length &&\\n        _beneficiaries.length == _revocable.length,\\n      \\\"Parameters length mismatch\\\"\\n    );\\n    for (uint256 i = 0; i < _beneficiaries.length; i++) {\\n      _createVesting(\\n        _beneficiaries[i],\\n        _amounts[i],\\n        _initialPercentUnlocks[i],\\n        _vestingSchedules[i],\\n        _revocable[i]\\n      );\\n    }\\n  }\\n\\n  /// @dev Add tokens for vesting\\n  /// @param _amount Amount of tokens for vesting\\n  function addTokensForVesting(uint256 _amount) external onlyOwner {\\n    require(_amount != 0, \\\"Amount can't be zero\\\");\\n    totalTokensAllocation += _amount;\\n    token.safeTransferFrom(msg.sender, address(this), _amount);\\n  }\\n\\n  /// @dev Allow to withdraw tokens what are not used for any vestings\\n  function emergencyWithdraw() external onlyOwner {\\n    uint256 amountToWithdraw = totalTokensAllocation - totalTokensInVestings;\\n    require(amountToWithdraw != 0, \\\"There is no available tokens to withdraw\\\");\\n    totalTokensAllocation -= amountToWithdraw;\\n    token.safeTransfer(msg.sender, amountToWithdraw);\\n  }\\n\\n  /// @dev Revoke user's vesting if it is revocable.\\n  /// @param _beneficiary address of beneficiary.\\n  /// @param _vestingId index of specific user's vesting.\\n  function revokeVestingOfUser(address _beneficiary, uint256 _vestingId) external onlyOwner {\\n    require(_vestingId < vestings[_beneficiary].length, \\\"Incorrect vesting id\\\");\\n    require(vestings[_beneficiary][_vestingId].revocable, \\\"This vesting is irrevocable\\\");\\n    require(\\n      vestings[_beneficiary][_vestingId].isRevoked == false,\\n      \\\"This vesting has been already revoked\\\"\\n    );\\n    Vesting storage vesting = vestings[_beneficiary][_vestingId];\\n    vesting.isRevoked = true;\\n    uint256 revokedTokens = vesting.amount - vesting.claimedAmount;\\n    totalTokensInVestings -= revokedTokens;\\n    emit VestingRevoked(_beneficiary, revokedTokens);\\n  }\\n\\n  /// @dev Withdraw tokens from vesting by beneficiary (msg.sender)\\n  function withdrawShare() external {\\n    Vesting[] storage vesting = _getVesting(msg.sender);\\n    uint256 totalAmountToPay;\\n    for (uint256 i = 0; i < vesting.length; i++) {\\n      uint256 amountToPay = _getWithdrawableAmount(vesting[i]);\\n      if (amountToPay != 0) {\\n        vesting[i].claimedAmount += amountToPay;\\n        totalAmountToPay += amountToPay;\\n      }\\n    }\\n    require(totalAmountToPay > 0, \\\"No shares unlocked.\\\");\\n    token.safeTransfer(msg.sender, totalAmountToPay);\\n    emit VestingWithdrawn(msg.sender, totalAmountToPay);\\n  }\\n\\n  function _createVesting(\\n    address _beneficiary,\\n    uint256 _amount,\\n    uint256 _initialPercentUnlock,\\n    LinearVestingSchedule calldata _vestingSchedule,\\n    bool _revocable\\n  ) internal {\\n    require(_beneficiary != address(0), \\\"Beneficiary cannot be a zero address\\\");\\n    require(_amount != 0, \\\"Amount should not be equal to zero\\\");\\n    require(_vestingSchedule.vestingDuration > 0, \\\"Duration should be bigger than zero\\\");\\n    require(_initialPercentUnlock <= PRECISION, \\\"Initial percentage exceed 100%\\\");\\n    // solhint-disable-next-line not-rely-on-time\\n    uint256 currentTime = block.timestamp;\\n    require(\\n      _vestingSchedule.startDate + _vestingSchedule.vestingDuration + _vestingSchedule.lockPeriod >\\n        currentTime,\\n      \\\"Incorrect vesting period\\\"\\n    );\\n    require(\\n      _amount <= totalTokensAllocation - totalTokensInVestings,\\n      \\\"There is not enough tokens allocated for vesting\\\"\\n    );\\n\\n    uint256 initialAmount = (_amount * _initialPercentUnlock) / PRECISION;\\n\\n    vestings[_beneficiary].push(\\n      Vesting({\\n        beneficiary: _beneficiary,\\n        amount: _amount,\\n        vestingSchedule: _vestingSchedule,\\n        claimedAmount: 0,\\n        initialAmount: initialAmount,\\n        revocable: _revocable,\\n        isRevoked: false\\n      })\\n    );\\n    totalTokensInVestings += _amount;\\n    emit VestingAdded(_beneficiary, _amount, initialAmount, _vestingSchedule, _revocable);\\n  }\\n\\n  function _getVesting(address _beneficiary) internal view returns (Vesting[] storage) {\\n    require(vestings[_beneficiary].length != 0, \\\"There is no vesting for release\\\");\\n    return vestings[_beneficiary];\\n  }\\n\\n  function _getWithdrawableAmount(Vesting memory _vesting) internal view returns (uint256) {\\n    if (_vesting.isRevoked) {\\n      return 0;\\n    }\\n    return _calculateAvailableAmount(_vesting) - _vesting.claimedAmount;\\n  }\\n\\n  /// @dev Calculates the amount that has already vested.\\n  /// @param _vesting vesting to calculate available amount for\\n  function _calculateAvailableAmount(Vesting memory _vesting) internal view returns (uint256) {\\n    uint256 totalVestingAmount = _vesting.amount;\\n    uint256 startAt = _vesting.vestingSchedule.startDate + _vesting.vestingSchedule.lockPeriod;\\n    uint256 vestingDuration = _vesting.vestingSchedule.vestingDuration;\\n\\n    // solhint-disable-next-line not-rely-on-time\\n    uint256 currentTime = block.timestamp;\\n\\n    if (currentTime < startAt) {\\n      return 0;\\n    } else if (currentTime >= startAt + vestingDuration) {\\n      return totalVestingAmount;\\n    } else {\\n      totalVestingAmount -= _vesting.initialAmount;\\n\\n      uint256 vestedAmount = _vesting.initialAmount +\\n        (totalVestingAmount * (currentTime - startAt)) /\\n        vestingDuration;\\n      return vestedAmount;\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.9;\\n\\n/// @title Interface for a vesting contract\\ninterface IVesting {\\n  /// @notice Structure which describe vesting.\\n  /// @dev It is used for saving data about vesting.\\n  /// @param beneficiary address of beneficiary.\\n  /// @param amount amount of tokens for vesting.\\n  /// @param vestingSchedule object which describe vesting schedule.\\n  /// @param claimedAmount amount of claimed tokens by beneficiary.\\n  /// @param initialAmount amount of unlocked tokens after vesting starts\\n  /// @param revocable describing whether it is possible to revoke vesting.\\n  /// @param isRevoked describing whether vesting have already been revoked.\\n  struct Vesting {\\n    address beneficiary;\\n    uint256 amount;\\n    LinearVestingSchedule vestingSchedule;\\n    uint256 claimedAmount;\\n    uint256 initialAmount;\\n    bool revocable;\\n    bool isRevoked;\\n  }\\n\\n  /// @notice Structure which describe vesting schedule.\\n  /// @dev It is used for calculations of withdrawable tokens.\\n  /// @param startDate timeStamp of start date.\\n  /// @param vestingDuration duration of vesting period.\\n  /// @param lockPeriod duration of lock period.\\n  struct LinearVestingSchedule {\\n    uint256 startDate;\\n    uint256 vestingDuration;\\n    uint256 lockPeriod;\\n  }\\n\\n  /// @notice It is generated when owner add vesting for some beneficiary.\\n  /// @param beneficiary address of beneficiary.\\n  /// @param amount amount of tokens for vesting.\\n  /// @param initialAmount amount of tokens for initial unlock.\\n  /// @param schedule object which describe vesting schedule.\\n  /// @param revocable describing whether it is possible to revoke.\\n  event VestingAdded(\\n    address indexed beneficiary,\\n    uint256 amount,\\n    uint256 initialAmount,\\n    LinearVestingSchedule schedule,\\n    bool revocable\\n  );\\n\\n  /// @notice It is generated when beneficiary withdraws tokens.\\n  /// @param beneficiary address of beneficiary.\\n  /// @param amount amount of withdrawn tokens.\\n  event VestingWithdrawn(address indexed beneficiary, uint256 amount);\\n\\n  /// @notice It is generated when owner revokes beneficiary's vestings.\\n  /// @param beneficiary address of beneficiary.\\n  /// @param amount amount of revoked tokens.\\n  event VestingRevoked(address indexed beneficiary, uint256 amount);\\n\\n  /// @dev Shows withdrawable amount for beneficiary(msg.sender)\\n  /// @return amount of tokens which beneficiary can withdraw\\n  function getUnlockedShares() external view returns (uint256);\\n\\n  /// @dev Shows total vested amount for beneficiary(msg.sender)\\n  /// @return amount of vested tokens for beneficiary\\n  function getTotalShares(address shareholder) external view returns (uint256);\\n\\n  /// @dev Shows total outstanding shares for beneficiary(msg.sender)\\n  /// @return amount of tokens which beneficiary can withdraw in the future\\n  function getOutstandingShares() external view returns (uint256);\\n\\n  /// @dev Shows total withdrawn shares for beneficiary(msg.sender)\\n  /// @return amount of tokens which beneficiary already withdrawn\\n  function getWithdrawnShares() external view returns (uint256);\\n\\n  /// @dev Create vesting\\n  /// @param _beneficiary Address of beneficiary\\n  /// @param _amount Amount of tokens for vesting\\n  /// @param _initialPercentUnlock percent of vested tokens for initial unlock\\n  /// @param _vestingSchedule  Vesting schedule for vesting\\n  /// @param _revocable describing whether it is possible to revoke.\\n  function createVesting(\\n    address _beneficiary,\\n    uint256 _amount,\\n    uint256 _initialPercentUnlock,\\n    LinearVestingSchedule calldata _vestingSchedule,\\n    bool _revocable\\n  ) external;\\n\\n  /// @dev Create multiple vestings\\n  /// @param _beneficiaries Addresses of beneficiaries\\n  /// @param _amounts Amount of tokens for vesting\\n  /// @param _initialPercentUnlocks percent of vested tokens for initial unlocks\\n  /// @param _vestingSchedules  Vesting schedule for vestings\\n  /// @param _revocable describing whether it is possible to revoke.\\n  function createVestingsBatch(\\n    address[] calldata _beneficiaries,\\n    uint256[] calldata _amounts,\\n    uint256[] calldata _initialPercentUnlocks,\\n    LinearVestingSchedule[] calldata _vestingSchedules,\\n    bool[] calldata _revocable\\n  ) external;\\n\\n  /// @dev Add tokens for vesting\\n  /// @param _amount Amount of tokens for vesting\\n  function addTokensForVesting(uint256 _amount) external;\\n\\n  /// @dev Allow to withdraw tokens what are not used for any vestings\\n  function emergencyWithdraw() external;\\n\\n  /// @dev Revoke user's vesting if it is revocable.\\n  /// @param _beneficiary address of beneficiary.\\n  /// @param _vestingId index of specific user's vesting.\\n  function revokeVestingOfUser(address _beneficiary, uint256 _vestingId) external;\\n\\n  /// @dev Withdraw tokens from vesting by beneficiary (msg.sender)\\n  function withdrawShare() external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IVesting.LinearVestingSchedule\",\"name\":\"schedule\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"}],\"name\":\"VestingAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VestingRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VestingWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addTokensForVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialPercentUnlock\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"}],\"internalType\":\"struct IVesting.LinearVestingSchedule\",\"name\":\"_vestingSchedule\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"_revocable\",\"type\":\"bool\"}],\"name\":\"createVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_beneficiaries\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_initialPercentUnlocks\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"}],\"internalType\":\"struct IVesting.LinearVestingSchedule[]\",\"name\":\"_vestingSchedules\",\"type\":\"tuple[]\"},{\"internalType\":\"bool[]\",\"name\":\"_revocable\",\"type\":\"bool[]\"}],\"name\":\"createVestingsBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOutstandingShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"getTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockedShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawnShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_vestingId\",\"type\":\"uint256\"}],\"name\":\"revokeVestingOfUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensInVestings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"}],\"internalType\":\"struct IVesting.LinearVestingSchedule\",\"name\":\"vestingSchedule\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRevoked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Vesting", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ecc4176b90613ed78185f01bd1e42c5640c4f09d", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}