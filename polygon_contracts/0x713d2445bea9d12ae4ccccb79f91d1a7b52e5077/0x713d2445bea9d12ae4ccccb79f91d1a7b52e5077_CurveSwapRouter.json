{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/routers/CurveSwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20, IERC20WithDecimals} from \\\"../interfaces/IERC20WithDecimals.sol\\\";\\nimport {IZapDepositor} from \\\"../interfaces/IZapDepositor.sol\\\";\\nimport {IStableSwap} from \\\"../interfaces/IStableSwap.sol\\\";\\nimport {ICurveSwapRouter} from \\\"../interfaces/ICurveSwapRouter.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { IARTHusdRebase } from \\\"../interfaces/IARTHusdRebase.sol\\\";\\n\\ncontract CurveSwapRouter is ICurveSwapRouter {\\n  using SafeMath for uint256;\\n\\n  IERC20WithDecimals public lp;\\n  IZapDepositor public zap;\\n  address public pool;\\n\\n  IARTHusdRebase public arthUsd;\\n  IERC20WithDecimals public arth;\\n  IERC20WithDecimals public usdc;\\n  IERC20WithDecimals public usdt;\\n  IERC20WithDecimals public busd;\\n\\n  address private me;\\n\\n  constructor(\\n    address _zap,\\n    address _lp,\\n    address _pool,\\n    address _arth,\\n    address _arthUsd,\\n    address _usdc,\\n    address _usdt,\\n    address _busd\\n  ) {\\n    pool = _pool;\\n\\n    arthUsd = IARTHusdRebase(_arthUsd);\\n    zap = IZapDepositor(_zap);\\n\\n    lp = IERC20WithDecimals(_lp);\\n    arth = IERC20WithDecimals(_arth);\\n    usdc = IERC20WithDecimals(_usdc);\\n    usdt = IERC20WithDecimals(_usdt);\\n    busd = IERC20WithDecimals(_busd);\\n\\n    me = address(this);\\n  }\\n\\n  function _sellARTHUSDForExact(\\n    uint256 amountARTHUSDInForBUSD,\\n    uint256 amountARTHUSDInForUSDC,\\n    uint256 amountARTHUSDInForUSDT,\\n    uint256 amountBUSDOutMin,\\n    uint256 amountUSDCOutMin,\\n    uint256 amountUSDTOutMin,\\n    address to,\\n    uint256 deadline\\n  ) internal {\\n    if (amountBUSDOutMin > 0) {\\n      zap.exchange_underlying(pool, 0, 1, amountARTHUSDInForBUSD, amountBUSDOutMin, me);\\n    }\\n\\n    if (amountUSDCOutMin > 0) {\\n      zap.exchange_underlying(pool, 0, 2, amountARTHUSDInForUSDC, amountUSDCOutMin, me);\\n    }\\n\\n    if (amountUSDTOutMin > 0) {\\n      zap.exchange_underlying(pool, 0, 3, amountARTHUSDInForUSDT, amountUSDTOutMin, me);\\n    }\\n\\n    require(block.timestamp <= deadline, \\\"Swap: Deadline expired\\\");\\n    _flush(to);\\n  }\\n\\n  function sellARTHUSDForExact(\\n    uint256 amountARTHUSDInForBUSD,\\n    uint256 amountARTHUSDInForUSDC,\\n    uint256 amountARTHUSDInForUSDT,\\n    uint256 amountBUSDOutMin,\\n    uint256 amountUSDCOutMin,\\n    uint256 amountUSDTOutMin,\\n    address to,\\n    uint256 deadline\\n  ) external override {\\n    uint256 amountARTHUSDIn = amountARTHUSDInForBUSD\\n      .add(amountARTHUSDInForUSDC)\\n      .add(amountARTHUSDInForUSDT);\\n    arthUsd.transferFrom(msg.sender, me, amountARTHUSDIn);\\n    arthUsd.approve(address(zap), amountARTHUSDIn);\\n\\n    _sellARTHUSDForExact(\\n      amountARTHUSDInForBUSD, \\n      amountARTHUSDInForUSDC, \\n      amountARTHUSDInForUSDT, \\n      amountBUSDOutMin, \\n      amountUSDCOutMin, \\n      amountUSDTOutMin, \\n      to, \\n      deadline\\n    );\\n  }\\n\\n  function _buyARTHUSDForExact(\\n    uint256 amountBUSDIn,\\n    uint256 amountUSDCIn,\\n    uint256 amountUSDTIn,\\n    uint256 amountARTHUSDOutMinForBUSD,\\n    uint256 amountARTHUSDOutMinForUSDC,\\n    uint256 amountARTHUSDOutMinForUSDT,\\n    uint256 deadline\\n  ) internal {\\n    if (amountBUSDIn > 0) {\\n      busd.transferFrom(msg.sender, me, amountBUSDIn);\\n      busd.approve(address(zap), amountBUSDIn);\\n      zap.exchange_underlying(pool, 1, 0, amountBUSDIn, amountARTHUSDOutMinForBUSD, me);\\n    }\\n\\n    if (amountUSDCIn > 0) {\\n      usdc.transferFrom(msg.sender, me, amountUSDCIn);\\n      usdc.approve(address(zap), amountUSDCIn);\\n      zap.exchange_underlying(pool, 2, 0, amountUSDCIn, amountARTHUSDOutMinForUSDC, me);\\n    }\\n\\n    if (amountUSDTIn > 0) {\\n      usdt.transferFrom(msg.sender, me, amountUSDTIn);\\n      usdt.approve(address(zap), amountUSDTIn);\\n      zap.exchange_underlying(pool, 3, 0, amountUSDTIn, amountARTHUSDOutMinForUSDT, me);\\n    }\\n\\n    require(block.timestamp <= deadline, \\\"Swap: Deadline expired\\\");\\n  }\\n\\n  function buyARTHUSDForExact(\\n    uint256 amountBUSDIn,\\n    uint256 amountUSDCIn,\\n    uint256 amountUSDTIn,\\n    uint256 amountARTHUSDOutMinForBUSD,\\n    uint256 amountARTHUSDOutMinForUSDC,\\n    uint256 amountARTHUSDOutMinForUSDT,\\n    address to,\\n    uint256 deadline\\n  ) external override {\\n    _buyARTHUSDForExact(\\n      amountBUSDIn, \\n      amountUSDCIn, \\n      amountUSDTIn, \\n      amountARTHUSDOutMinForBUSD, \\n      amountARTHUSDOutMinForUSDC, \\n      amountARTHUSDOutMinForUSDT,\\n      deadline\\n    );\\n    _flush(to);\\n  }\\n\\n  function sellARTHForExact(\\n    uint256 amountARTHInForBUSD,\\n    uint256 amountARTHInForUSDC,\\n    uint256 amountARTHInForUSDT,\\n    uint256 amountBUSDOutMin,\\n    uint256 amountUSDCOutMin,\\n    uint256 amountUSDTOutMin,\\n    address to,\\n    uint256 deadline\\n  ) external override {\\n    uint256 amountARTHIn = amountARTHInForBUSD\\n      .add(amountARTHInForUSDC)\\n      .add(amountARTHInForUSDT);\\n    arth.transferFrom(msg.sender, me, amountARTHIn);\\n    arth.approve(address(arthUsd), amountARTHIn);\\n    \\n    uint256 arthUSDBalanceFromARTHForBUSD;\\n    uint256 arthUSDBalanceFromARTHForUSDC;\\n    uint256 arthUSDBalanceFromARTHForUSDT;\\n\\n    if (amountBUSDOutMin > 0) {\\n      arthUsd.deposit(amountARTHInForBUSD);\\n      arthUSDBalanceFromARTHForBUSD = arthUsd.balanceOf(me);\\n    }\\n\\n    if (amountUSDCOutMin > 0) {\\n      arthUsd.deposit(amountARTHInForUSDC);\\n      arthUSDBalanceFromARTHForUSDC = arthUsd.balanceOf(me).sub(arthUSDBalanceFromARTHForBUSD);\\n    }\\n\\n    if (amountUSDTOutMin > 0) {\\n      arthUsd.deposit(amountARTHInForUSDT);\\n      arthUSDBalanceFromARTHForUSDT = arthUsd.balanceOf(me)\\n        .sub(arthUSDBalanceFromARTHForBUSD)\\n        .sub(arthUSDBalanceFromARTHForUSDC);\\n    }\\n\\n    arthUsd.approve(address(zap), arthUsd.balanceOf(me));\\n    _sellARTHUSDForExact(\\n      arthUSDBalanceFromARTHForBUSD, \\n      arthUSDBalanceFromARTHForUSDC, \\n      arthUSDBalanceFromARTHForUSDT, \\n      amountBUSDOutMin, \\n      amountUSDCOutMin,\\n      amountUSDTOutMin, \\n      to, \\n      deadline\\n    );\\n  }\\n\\n  function buyARTHForExact(\\n    uint256 amountBUSDIn,\\n    uint256 amountUSDCIn,\\n    uint256 amountUSDTIn,\\n    uint256 amountARTHUSDOutMinForBUSD,\\n    uint256 amountARTHUSDOutMinForUSDC,\\n    uint256 amountARTHUSDOutMinForUSDT,\\n    address to,\\n    uint256 deadline\\n  ) external override {\\n    _buyARTHUSDForExact(\\n      amountBUSDIn, \\n      amountUSDCIn, \\n      amountUSDTIn, \\n      amountARTHUSDOutMinForBUSD, \\n      amountARTHUSDOutMinForUSDC, \\n      amountARTHUSDOutMinForUSDT,\\n      deadline\\n    );\\n\\n    arthUsd.withdraw(\\n      arthUsd.balanceOf(me).mul(arthUsd.gonsPercision()).div(arthUsd.gonsPerFragment())\\n    );\\n    _flush(to);\\n  }\\n\\n  function _addLiquidityUsingARTHusd(\\n    uint256 amountARTHusdIn,\\n    uint256 amountBUSDIn,\\n    uint256 amountUSDCIn,\\n    uint256 amountUSDTIn,\\n    uint256 minLpTokensOut,\\n    address to,\\n    uint256 deadline\\n  ) internal {\\n    busd.transferFrom(msg.sender, me, amountBUSDIn);\\n    usdc.transferFrom(msg.sender, me, amountUSDCIn);\\n    usdt.transferFrom(msg.sender, me, amountUSDTIn);\\n\\n    arthUsd.approve(address(zap), amountARTHusdIn);\\n    busd.approve(address(zap), amountBUSDIn);\\n    usdc.approve(address(zap), amountUSDCIn);\\n    usdt.approve(address(zap), amountUSDTIn);\\n\\n    uint256[4] memory amounts = [amountARTHusdIn, amountBUSDIn, amountUSDCIn, amountUSDTIn];\\n    \\n    zap.add_liquidity(\\n      pool, \\n      amounts,\\n      minLpTokensOut\\n    );\\n\\n    require(block.timestamp <= deadline, \\\"Swap: tx expired\\\");\\n    _flush(to);\\n  }\\n\\n  function addLiquidityUsingARTHusd(\\n    uint256 amountARTHusdIn,\\n    uint256 amountBUSDIn,\\n    uint256 amountUSDCIn,\\n    uint256 amountUSDTIn,\\n    uint256 minLpTokensOut,\\n    address to,\\n    uint256 deadline\\n  ) external override {\\n    arthUsd.transferFrom(msg.sender, me, amountARTHusdIn);\\n    _addLiquidityUsingARTHusd(\\n      amountARTHusdIn, \\n      amountBUSDIn, \\n      amountUSDCIn, \\n      amountUSDTIn, \\n      minLpTokensOut, \\n      to, \\n      deadline\\n    );\\n  }\\n\\n  function addLiquidityUsingARTH(\\n    uint256 amountARTHIn,\\n    uint256 amountBUSDIn,\\n    uint256 amountUSDCIn,\\n    uint256 amountUSDTIn,\\n    uint256 minLpTokensOut,\\n    address to,\\n    uint256 deadline\\n  ) external override {\\n    arth.transferFrom(msg.sender, me, amountARTHIn);\\n    arth.approve(address(arthUsd), amountARTHIn);\\n    arthUsd.deposit(amountARTHIn);\\n    \\n   _addLiquidityUsingARTHusd(\\n      arthUsd.balanceOf(me), \\n      amountBUSDIn, \\n      amountUSDCIn, \\n      amountUSDTIn, \\n      minLpTokensOut, \\n      to, \\n      deadline\\n    );\\n  }\\n\\n  function _flush(address to) internal {\\n    if (lp.balanceOf(me) > 0) lp.transfer(to, lp.balanceOf(me));\\n    if (arth.balanceOf(me) > 0) arth.transfer(to, arth.balanceOf(me));\\n    if (arthUsd.balanceOf(me) > 0) arthUsd.transfer(to, arthUsd.balanceOf(me));\\n    if (usdc.balanceOf(me) > 0) usdc.transfer(to, usdc.balanceOf(me));\\n    if (usdt.balanceOf(me) > 0) usdt.transfer(to, usdt.balanceOf(me));\\n    if (busd.balanceOf(me) > 0) busd.transfer(to, busd.balanceOf(me));\\n  }\\n\\n  function _requireExpectedOutGreaterThanMinOut(uint256 expectedOut, uint256 minOut) internal pure {\\n    require(expectedOut >= minOut, \\\"Swap: price has moved\\\");\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20WithDecimals.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20WithDecimals is IERC20 {\\n  function decimals() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IZapDepositor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IZapDepositor {\\n  function get_virtual_price() external view returns (uint256);\\n\\n  function calc_token_amount(\\n    address pool,\\n    uint256[4] memory amounts,\\n    bool _is_deposit\\n  ) external view returns (uint256);\\n\\n  function calc_withdraw_one_coin(\\n    address pool,\\n    uint256 _burn_amount,\\n    int128 i\\n  ) external view returns (uint256);\\n\\n  function remove_liquidity_one_coin(\\n    address pool,\\n    uint256 _burn_amount,\\n    int128 i,\\n    uint256 _min_received\\n  ) external;\\n\\n  function remove_liquidity_imbalance(\\n    address pool,\\n    uint256[4] memory _amounts,\\n    uint256 _max_burn_amount\\n  ) external;\\n\\n  function remove_liquidity(\\n    address pool,\\n    uint256 burn_amount,\\n    uint256[4] memory min_amounts\\n  ) external;\\n\\n  function add_liquidity(\\n    address pool,\\n    uint256[4] memory _deposit_amounts,\\n    uint256 min_mint_amount\\n  ) external;\\n\\n  function exchange_underlying(\\n    address pool,\\n    int128 i,\\n    int128 j,\\n    uint256 dx,\\n    uint256 min_dy,\\n    address _receiver\\n  ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStableSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IStableSwap {\\n  function get_dy(\\n    int128 i,\\n    int128 j,\\n    uint256 dx\\n  ) external view returns (uint256);\\n\\n  function exchange_underlying(\\n    int128 i,\\n    int128 j,\\n    uint256 dx,\\n    uint256 min_dy,\\n    address _receiver\\n  ) external returns (uint256);\\n\\n  function get_dy_underlying(\\n    int128 i,\\n    int128 j,\\n    uint256 dx\\n  ) external view returns (uint256);\\n\\n  function get_virtual_price() external view returns (uint256);\\n\\n  function calc_token_amount(uint256[] memory amounts, bool _is_deposit)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function calc_withdraw_one_coin(uint256 _burn_amount, int128 i) external view returns (uint256);\\n\\n  function remove_liquidity_one_coin(\\n    uint256 _burn_amount,\\n    int128 i,\\n    uint256 _min_received\\n  ) external;\\n\\n  function remove_liquidity_imbalance(uint256[] memory _amounts, uint256 _max_burn_amount) external;\\n\\n  function remove_liquidity(uint256 burn_amount, uint256[] memory min_amounts) external;\\n\\n  function add_liquidity(uint256[] memory _deposit_amounts, uint256 min_mint_amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICurveSwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICurveSwapRouter {\\n  function sellARTHUSDForExact(\\n    uint256 amountARTHUSDInForBUSD,\\n    uint256 amountARTHUSDInForUSDC,\\n    uint256 amountARTHUSDInForUSDT,\\n    uint256 amountBUSDOutMin,\\n    uint256 amountUSDCOutMin,\\n    uint256 amountUSDTOutMin,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n\\n  function buyARTHUSDForExact(\\n    uint256 amountBUSDIn,\\n    uint256 amountUSDCIn,\\n    uint256 amountUSDTIn,\\n    uint256 amountARTHUSDOutMinForBUSD,\\n    uint256 amountARTHUSDOutMinForUSDC,\\n    uint256 amountARTHUSDOutMinForUSDT,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n  \\n  function sellARTHForExact(\\n    uint256 amountARTHInForBUSD,\\n    uint256 amountARTHInForUSDC,\\n    uint256 amountARTHInForUSDT,\\n    uint256 amountBUSDOutMin,\\n    uint256 amountUSDCOutMin,\\n    uint256 amountUSDTOutMin,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n\\n  function buyARTHForExact(\\n    uint256 amountBUSDIn,\\n    uint256 amountUSDCIn,\\n    uint256 amountUSDTIn,\\n    uint256 amountARTHMinForBUSD,\\n    uint256 amountARTHMinForUSDC,\\n    uint256 amountARTHMinForUSDT,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n\\n  function addLiquidityUsingARTHusd(\\n    uint256 amountARTHusdIn,\\n    uint256 amountBUSDIn,\\n    uint256 amountUSDCIn,\\n    uint256 amountUSDTIn,\\n    uint256 minLpTokensOut,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n\\n  function addLiquidityUsingARTH(\\n    uint256 amountARTHIn,\\n    uint256 amountBUSDIn,\\n    uint256 amountUSDCIn,\\n    uint256 amountUSDTIn,\\n    uint256 minLpTokensOut,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IARTHusdRebase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20Wrapper} from \\\"./IERC20Wrapper.sol\\\";\\n\\ninterface IARTHusdRebase is IERC20Wrapper {\\n  function gonsPerFragment()\\n    external\\n    view\\n    returns (uint256);\\n\\n  function gonsDecimals()\\n    external\\n    view\\n    returns (uint256);\\n\\n  function gonsPercision()\\n    external\\n    view\\n    returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Wrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface IERC20Wrapper is IERC20 {\\n  /// @dev Mint ERC20 token\\n  /// @param amount Token amount to wrap\\n  function deposit(uint256 amount) external returns (bool);\\n\\n  /// @dev Burn ERC20 token to redeem LP ERC20 token back plus SUSHI rewards.\\n  /// @param amount Token amount to burn\\n  function withdraw(uint256 amount) external returns (bool);\\n\\n  /// @dev pending rewards\\n  function accumulatedRewards() external view returns (uint256);\\n\\n  function accumulatedRewardsFor(address _user) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_zap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_arth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_arthUsd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_busd\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountARTHIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBUSDIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUSDCIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUSDTIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLpTokensOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityUsingARTH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountARTHusdIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBUSDIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUSDCIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUSDTIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLpTokensOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityUsingARTHusd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arth\",\"outputs\":[{\"internalType\":\"contract IERC20WithDecimals\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arthUsd\",\"outputs\":[{\"internalType\":\"contract IARTHusdRebase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busd\",\"outputs\":[{\"internalType\":\"contract IERC20WithDecimals\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountBUSDIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUSDCIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUSDTIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountARTHUSDOutMinForBUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountARTHUSDOutMinForUSDC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountARTHUSDOutMinForUSDT\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"buyARTHForExact\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountBUSDIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUSDCIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUSDTIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountARTHUSDOutMinForBUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountARTHUSDOutMinForUSDC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountARTHUSDOutMinForUSDT\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"buyARTHUSDForExact\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lp\",\"outputs\":[{\"internalType\":\"contract IERC20WithDecimals\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountARTHInForBUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountARTHInForUSDC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountARTHInForUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBUSDOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUSDCOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUSDTOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"sellARTHForExact\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountARTHUSDInForBUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountARTHUSDInForUSDC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountARTHUSDInForUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBUSDOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUSDCOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUSDTOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"sellARTHUSDForExact\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract IERC20WithDecimals\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20WithDecimals\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zap\",\"outputs\":[{\"internalType\":\"contract IZapDepositor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CurveSwapRouter", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000005ab5c56b9db92ba45a0b46a207286cd83c15c939000000000000000000000000dde5fdb48b2ec6bc26bb4487f8e3a4eb99b3d633000000000000000000000000dde5fdb48b2ec6bc26bb4487f8e3a4eb99b3d633000000000000000000000000e52509181feb30eb4979e29ec70d50fd5c44d59000000000000000000000000084f168e646d31f6c33fdbf284d9037f59603aa280000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f0000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a063", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}