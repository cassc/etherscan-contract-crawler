{"SourceCode": "// Sources flattened with hardhat v2.6.2 https://hardhat.org\r\n\r\n// File contracts/libs/IERC20.sol\r\n\r\n// \r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/libs/IERC20Metadata.sol\r\n\r\n// \r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\r\n\r\n// \r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\r\n\r\n// \r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libs/ERC20.sol\r\n\r\n// \r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n// File @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol@v1.1.0-beta.0\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n// File @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol@v1.1.0-beta.0\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n// File @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol@v1.0.1\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\n// File @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol@v1.0.1\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n// File contracts/libs/DarksideToolBox.sol\r\n\r\n// \r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\ncontract DarksideToolBox {\r\n\r\n    IUniswapV2Router02 public immutable darksideSwapRouter;\r\n\r\n    uint256 public immutable startBlock;\r\n\r\n    /**\r\n     * @notice Constructs the DarksideToken contract.\r\n     */\r\n    constructor(uint256 _startBlock, IUniswapV2Router02 _darksideSwapRouter) public {\r\n        startBlock = _startBlock;\r\n        darksideSwapRouter = _darksideSwapRouter;\r\n    }\r\n\r\n    function convertToTargetValueFromPair(IUniswapV2Pair pair, uint256 sourceTokenAmount, address targetAddress) public view returns (uint256) {\r\n        require(pair.token0() == targetAddress || pair.token1() == targetAddress, \"one of the pairs must be the targetAddress\");\r\n        if (sourceTokenAmount == 0)\r\n            return 0;\r\n\r\n        (uint256 res0, uint256 res1, ) = pair.getReserves();\r\n        if (res0 == 0 || res1 == 0)\r\n            return 0;\r\n\r\n        if (pair.token0() == targetAddress)\r\n            return (res0 * sourceTokenAmount) / res1;\r\n        else\r\n            return (res1 * sourceTokenAmount) / res0;\r\n    }\r\n\r\n    function getTokenUSDCValue(uint256 tokenBalance, address token, uint256 tokenType, bool viaMaticUSDC, address usdcAddress) external view returns (uint256) {\r\n        require(tokenType == 0 || tokenType == 1, \"invalid token type provided\");\r\n        if (token == address(usdcAddress))\r\n            return tokenBalance;\r\n\r\n        // lp type\r\n        if (tokenType == 1) {\r\n            IUniswapV2Pair lpToken = IUniswapV2Pair(token);\r\n            if (lpToken.totalSupply() == 0)\r\n                return 0;\r\n            // If lp contains usdc, we can take a short-cut\r\n            if (lpToken.token0() == address(usdcAddress)) {\r\n                return (IERC20(lpToken.token0()).balanceOf(address(lpToken)) * tokenBalance * 2) / lpToken.totalSupply();\r\n            } else if (lpToken.token1() == address(usdcAddress)){\r\n                return (IERC20(lpToken.token1()).balanceOf(address(lpToken)) * tokenBalance * 2) / lpToken.totalSupply();\r\n            }\r\n        }\r\n\r\n        // Only used for lp type tokens.\r\n        address lpTokenAddress = token;\r\n        // If token0 or token1 is matic, use that, else use token0.\r\n        if (tokenType == 1) {\r\n            token = IUniswapV2Pair(token).token0() == darksideSwapRouter.WETH() ? darksideSwapRouter.WETH() :\r\n                        (IUniswapV2Pair(token).token1() == darksideSwapRouter.WETH() ? darksideSwapRouter.WETH() : IUniswapV2Pair(token).token0());\r\n        }\r\n\r\n        // if it is an LP token we work with all of the reserve in the LP address to scale down later.\r\n        uint256 tokenAmount = (tokenType == 1) ? IERC20(token).balanceOf(lpTokenAddress) : tokenBalance;\r\n\r\n        uint256 usdcEquivalentAmount = 0;\r\n\r\n        if (viaMaticUSDC) {\r\n            uint256 maticAmount = 0;\r\n\r\n            if (token == darksideSwapRouter.WETH()) {\r\n                maticAmount = tokenAmount;\r\n            } else {\r\n\r\n                // As we arent working with usdc at this point (early return), this is okay.\r\n                IUniswapV2Pair maticPair = IUniswapV2Pair(IUniswapV2Factory(darksideSwapRouter.factory()).getPair(darksideSwapRouter.WETH(), token));\r\n\r\n                if (address(maticPair) == address(0))\r\n                    return 0;\r\n\r\n                maticAmount = convertToTargetValueFromPair(maticPair, tokenAmount, darksideSwapRouter.WETH());\r\n            }\r\n\r\n            // As we arent working with usdc at this point (early return), this is okay.\r\n            IUniswapV2Pair usdcmaticPair = IUniswapV2Pair(IUniswapV2Factory(darksideSwapRouter.factory()).getPair(darksideSwapRouter.WETH(), address(usdcAddress)));\r\n\r\n            if (address(usdcmaticPair) == address(0))\r\n                return 0;\r\n\r\n            usdcEquivalentAmount = convertToTargetValueFromPair(usdcmaticPair, maticAmount, usdcAddress);\r\n        } else {\r\n            // As we arent working with usdc at this point (early return), this is okay.\r\n            IUniswapV2Pair usdcPair = IUniswapV2Pair(IUniswapV2Factory(darksideSwapRouter.factory()).getPair(address(usdcAddress), token));\r\n\r\n            if (address(usdcPair) == address(0))\r\n                return 0;\r\n\r\n            usdcEquivalentAmount = convertToTargetValueFromPair(usdcPair, tokenAmount, usdcAddress);\r\n        }\r\n\r\n        // for the tokenType == 1 path usdcEquivalentAmount is the USDC value of all the tokens in the parent LP contract.\r\n\r\n        if (tokenType == 1)\r\n            return (usdcEquivalentAmount * tokenBalance * 2) / IUniswapV2Pair(lpTokenAddress).totalSupply();\r\n        else\r\n            return usdcEquivalentAmount;\r\n    }\r\n\r\n    function getNumberOfHalvingsSinceStart(uint256 CZDiamondReleaseHalfLife, uint256 _to) public view returns (uint256) {\r\n        if (_to <= startBlock)\r\n            return 0;\r\n\r\n        return (_to - startBlock) / CZDiamondReleaseHalfLife;\r\n    }\r\n\r\n    function getPreviousCZDiamondHalvingBlock(uint256 CZDiamondReleaseHalfLife, uint256 _block) public view  returns (uint256) {\r\n        // won't revert from getCZDiamondRelease due to bounds check\r\n        require(_block >= startBlock, \"can't get previous CZDiamond halving before startBlock\");\r\n\r\n        uint256 numberOfHalvings = getNumberOfHalvingsSinceStart(CZDiamondReleaseHalfLife, _block);\r\n        return numberOfHalvings * CZDiamondReleaseHalfLife + startBlock;\r\n    }\r\n\r\n    function getNextCZDiamondHalvingBlock(uint256 CZDiamondReleaseHalfLife, uint256 _block) public view  returns (uint256) {\r\n        // won't revert from getCZDiamondRelease due to bounds check\r\n        require(_block >= startBlock, \"can't get previous CZDiamond halving before startBlock\");\r\n\r\n        uint256 numberOfHalvings = getNumberOfHalvingsSinceStart(CZDiamondReleaseHalfLife, _block);\r\n\r\n        if ((_block - startBlock) % CZDiamondReleaseHalfLife == 0)\r\n            return numberOfHalvings * CZDiamondReleaseHalfLife + startBlock;\r\n        else\r\n            return (numberOfHalvings + 1) * CZDiamondReleaseHalfLife + startBlock;\r\n    }\r\n\r\n    function getCZDiamondReleaseForBlockE24(uint256 initialCZDiamondReleaseRate, uint256 CZDiamondReleaseHalfLife, uint256 _block) public view  returns (uint256) {\r\n        if (_block < startBlock)\r\n            return 0;\r\n\r\n        uint256 numberOfHalvings = getNumberOfHalvingsSinceStart(CZDiamondReleaseHalfLife, _block);\r\n        return (initialCZDiamondReleaseRate * 1e24) / (2 ** numberOfHalvings);\r\n    }\r\n\r\n    // Return CZDIAMOND reward release over the given _from to _to block.\r\n    function getCZDiamondRelease(uint256 initialCZDiamondReleaseRate, uint256 CZDiamondReleaseHalfLife, uint256 _from, uint256 _to) external view returns (uint256) {\r\n        if (_from < startBlock || _to <= _from)\r\n            return 0;\r\n\r\n        uint256 releaseDuration = _to - _from;\r\n\r\n        uint256 startReleaseE24 = getCZDiamondReleaseForBlockE24(initialCZDiamondReleaseRate, CZDiamondReleaseHalfLife, _from);\r\n        uint256 endReleaseE24 = getCZDiamondReleaseForBlockE24(initialCZDiamondReleaseRate, CZDiamondReleaseHalfLife, _to);\r\n\r\n        // If we are all in the same era its a rectangle problem\r\n        if (startReleaseE24 == endReleaseE24)\r\n            return (endReleaseE24 * releaseDuration) / 1e24;\r\n\r\n        // The idea here is that if we span multiple halving eras, we can use triangle geometry to take an average.\r\n        uint256 startSkipBlock = getNextCZDiamondHalvingBlock(CZDiamondReleaseHalfLife, _from);\r\n        uint256 endSkipBlock = getPreviousCZDiamondHalvingBlock(CZDiamondReleaseHalfLife, _to);\r\n\r\n        // In this case we do span multiple eras (at least 1 complete half-life era)\r\n        if (startSkipBlock != endSkipBlock) {\r\n            uint256 numberOfCompleteHalfLifes = getNumberOfHalvingsSinceStart(CZDiamondReleaseHalfLife, endSkipBlock) - getNumberOfHalvingsSinceStart(CZDiamondReleaseHalfLife, startSkipBlock);\r\n            uint256 partialEndsRelease = startReleaseE24 * (startSkipBlock - _from) + (endReleaseE24 * (_to - endSkipBlock));\r\n            uint256 wholeMiddleRelease = (endReleaseE24 * 2 * CZDiamondReleaseHalfLife) * ((2 ** numberOfCompleteHalfLifes) - 1);\r\n            return (partialEndsRelease + wholeMiddleRelease) / 1e24;\r\n        }\r\n\r\n        // In this case we just span across 2 adjacent eras\r\n        return ((endReleaseE24 * releaseDuration) + (startReleaseE24 - endReleaseE24) * (startSkipBlock - _from)) / 1e24;\r\n    }\r\n\r\n    function getDarksideEmissionForBlock(uint256 _block, bool isIncreasingGradient, uint256 releaseGradient, uint256 gradientEndBlock, uint256 endEmission) public pure returns (uint256) {\r\n        if (_block >= gradientEndBlock)\r\n            return endEmission;\r\n\r\n        if (releaseGradient == 0)\r\n            return endEmission;\r\n        uint256 currentDarksideEmission = endEmission;\r\n        uint256 deltaHeight = (releaseGradient * (gradientEndBlock - _block)) / 1e24;\r\n\r\n        if (isIncreasingGradient) {\r\n            // if there is a logical error, we return 0\r\n            if (endEmission >= deltaHeight)\r\n                currentDarksideEmission = endEmission - deltaHeight;\r\n            else\r\n                currentDarksideEmission = 0;\r\n        } else\r\n            currentDarksideEmission = endEmission + deltaHeight;\r\n\r\n        return currentDarksideEmission;\r\n    }\r\n\r\n    function calcEmissionGradient(uint256 _block, uint256 currentEmission, uint256 gradientEndBlock, uint256 endEmission) external pure returns (uint256) {\r\n        uint256 darksideReleaseGradient;\r\n\r\n        // if the gradient is 0 we interpret that as an unchanging 0 gradient.\r\n        if (currentEmission != endEmission && _block < gradientEndBlock) {\r\n            bool isIncreasingGradient = endEmission > currentEmission;\r\n            if (isIncreasingGradient)\r\n                darksideReleaseGradient = ((endEmission - currentEmission) * 1e24) / (gradientEndBlock - _block);\r\n            else\r\n                darksideReleaseGradient = ((currentEmission - endEmission) * 1e24) / (gradientEndBlock - _block);\r\n        } else\r\n            darksideReleaseGradient = 0;\r\n\r\n        return darksideReleaseGradient;\r\n    }\r\n\r\n    // Return if we are in the normal operation era, no promo\r\n    function isFlatEmission(uint256 _gradientEndBlock, uint256 _blocknum) internal pure returns (bool) {\r\n        return _blocknum >= _gradientEndBlock;\r\n    }\r\n\r\n    // Return DARKSIDE reward release over the given _from to _to block.\r\n    function getDarksideRelease(bool isIncreasingGradient, uint256 releaseGradient, uint256 gradientEndBlock, uint256 endEmission, uint256 _from, uint256 _to) external view returns (uint256) {\r\n        if (_to <= _from || _to <= startBlock)\r\n            return 0;\r\n        uint256 clippedFrom = _from < startBlock ? startBlock : _from;\r\n        uint256 totalWidth = _to - clippedFrom;\r\n\r\n        if (releaseGradient == 0 || isFlatEmission(gradientEndBlock, clippedFrom))\r\n            return totalWidth * endEmission;\r\n\r\n        if (!isFlatEmission(gradientEndBlock, _to)) {\r\n            uint256 heightDelta = releaseGradient * totalWidth;\r\n\r\n            uint256 baseEmission;\r\n            if (isIncreasingGradient)\r\n                baseEmission = getDarksideEmissionForBlock(clippedFrom, isIncreasingGradient, releaseGradient, gradientEndBlock, endEmission);\r\n            else\r\n                baseEmission = getDarksideEmissionForBlock(_to, isIncreasingGradient, releaseGradient, gradientEndBlock, endEmission);\r\n            return totalWidth * baseEmission + (((totalWidth * heightDelta) / 2) / 1e24);\r\n        }\r\n\r\n        // Special case when we are transitioning between promo and normal era.\r\n        if (!isFlatEmission(gradientEndBlock, clippedFrom) && isFlatEmission(gradientEndBlock, _to)) {\r\n            uint256 blocksUntilGradientEnd = gradientEndBlock - clippedFrom;\r\n            uint256 heightDelta = releaseGradient * blocksUntilGradientEnd;\r\n\r\n            uint256 baseEmission;\r\n            if (isIncreasingGradient)\r\n                baseEmission = getDarksideEmissionForBlock(_to, isIncreasingGradient, releaseGradient, gradientEndBlock, endEmission);\r\n            else\r\n                baseEmission = getDarksideEmissionForBlock(clippedFrom, isIncreasingGradient, releaseGradient, gradientEndBlock, endEmission);\r\n\r\n            return totalWidth * baseEmission - (((blocksUntilGradientEnd * heightDelta) / 2) / 1e24);\r\n        }\r\n\r\n        // huh?\r\n        // shouldnt happen, but also don't want to assert false here either.\r\n        return 0;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/CZDiamondToken.sol\r\n\r\n// \r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n// CZDiamondToken\r\ncontract CZDiamondToken is ERC20(\"CZDiamond\", \"CZDIAMOND\") {\r\n\r\n    // Burn address\r\n    address public constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    uint256 public constant usdcSwapThreshold = 20 * (10 ** 6);\r\n\r\n    uint256 public pendingUSDC = 0;\r\n\r\n    IERC20 public immutable usdcRewardCurrency;\r\n\r\n    DarksideToolBox public immutable darksideToolBox;\r\n\r\n    IUniswapV2Router02 public darksideSwapRouter;\r\n\r\n    uint256 public lastUSDCDistroBlock = type(uint256).max;\r\n\r\n    // default to two weeks @ 1600 blocks per hour\r\n    uint256 public distributionTimeFrameBlocks = 1600 * 24 * 14;\r\n\r\n    bool public ownershipIsTransferred = false;\r\n\r\n    // Events\r\n    event DistributeCZDiamond(address recipient, uint256 CZDiamondAmount);\r\n    event DepositFeeConvertedToUSDC(address indexed inputToken, uint256 inputAmount, uint256 usdcOutput);\r\n    event USDCTransferredToUser(address recipient, uint256 usdcAmount);\r\n    event OperatorTransferred(address indexed previousOperator, address indexed newOperator);\r\n    event DarksideSwapRouterUpdated(address indexed operator, address indexed router);\r\n    event SetUSDCDistributionTimeFrame(uint256 distributionTimeFrameBlocks);\r\n\r\n    // The operator can only update the transfer tax rate\r\n    address public operator;\r\n\r\n    modifier onlyOperator() {\r\n        require(operator == msg.sender, \"operator: caller is not the operator\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Constructs the DarksideToken contract.\r\n     */\r\n    constructor(address _usdcCurrency, DarksideToolBox _darksideToolBox) public {\r\n        operator = _msgSender();\r\n        emit OperatorTransferred(address(0), operator);\r\n\r\n        darksideToolBox = _darksideToolBox;\r\n        usdcRewardCurrency = IERC20(_usdcCurrency);\r\n\r\n        lastUSDCDistroBlock = _darksideToolBox.startBlock();\r\n\r\n        // Divvy up CZDiamond supply.\r\n        _mint(0x3a1D1114269d7a786C154FE5278bF5b1e3e20d31, 60 * (10 ** 3) * (10 ** 18));\r\n        _mint(address(this), 40 * (10 ** 3) * (10 ** 18));\r\n    }\r\n\r\n\r\n    function transferOwnership(address newOwner) public override onlyOwner  {\r\n        require(!ownershipIsTransferred, \"!unset\");\r\n        super.transferOwnership(newOwner);\r\n        ownershipIsTransferred = true;\r\n    }\r\n\r\n    /// @notice Sends `_amount` token to `_to`. Must only be called by the owner (MasterChef).\r\n    function distribute(address _to, uint256 _amount) external onlyOwner returns (uint256){\r\n        require(ownershipIsTransferred, \"too early!\");\r\n        uint256 sendAmount = _amount;\r\n        if (balanceOf(address(this)) < _amount)\r\n            sendAmount = balanceOf(address(this));\r\n\r\n        if (sendAmount > 0) {\r\n            IERC20(address(this)).transfer(_to, sendAmount);\r\n            emit DistributeCZDiamond(_to, sendAmount);\r\n        }\r\n\r\n        return sendAmount;\r\n    }\r\n\r\n    // To receive MATIC from darksideSwapRouter when swapping\r\n    receive() external payable {}\r\n\r\n    /**\r\n     * @dev sell all of a current type of token for usdc. and distribute on a drip.\r\n     * Can only be called by the current owner.\r\n     */\r\n    function getUSDCDripRate() external view returns (uint256) {\r\n        return usdcRewardCurrency.balanceOf(address(this)) / distributionTimeFrameBlocks;\r\n    }\r\n\r\n    /**\r\n     * @dev sell all of a current type of token for usdc. and distribute on a drip.\r\n     * Can only be called by the current owner.\r\n     */\r\n    function getUSDCDrip() external onlyOwner returns (uint256) {\r\n        uint256 usdcBalance = usdcRewardCurrency.balanceOf(address(this));\r\n        if (pendingUSDC > usdcBalance)\r\n            return 0;\r\n\r\n        uint256 usdcAvailable = usdcBalance - pendingUSDC;\r\n\r\n        // only provide a drip if there has been some blocks passed since the last drip\r\n        uint256 blockSinceLastDistro = block.number > lastUSDCDistroBlock ? block.number - lastUSDCDistroBlock : 0;\r\n\r\n        // We distribute the usdc assuming the old usdc balance wanted to be distributed over distributionTimeFrameBlocks blocks.\r\n        uint256 usdcRelease = (blockSinceLastDistro * usdcAvailable) / distributionTimeFrameBlocks;\r\n\r\n        usdcRelease = usdcRelease > usdcAvailable ? usdcAvailable : usdcRelease;\r\n\r\n        lastUSDCDistroBlock = block.number;\r\n        pendingUSDC += usdcRelease;\r\n\r\n        return usdcRelease;\r\n    }\r\n\r\n    /**\r\n     * @dev sell all of a current type of token for usdc.\r\n     */\r\n    function convertDepositFeesToUSDC(address token, uint256 tokenType) public onlyOwner {\r\n        // shouldn't be trying to sell CZDiamond\r\n        if (token == address(this) || token == address(usdcRewardCurrency))\r\n            return;\r\n\r\n        // LP tokens aren't destroyed in CZDiamond, but this is so CZDiamond can process\r\n        // already destroyed LP fees sent to it by the DarksideToken contract.\r\n        if (tokenType == 1) {\r\n            convertDepositFeesToUSDC(IUniswapV2Pair(token).token0(), 0);\r\n            convertDepositFeesToUSDC(IUniswapV2Pair(token).token1(), 0);\r\n            return;\r\n        }\r\n\r\n        uint256 totalTokenBalance = IERC20(token).balanceOf(address(this));\r\n\r\n        uint256 usdcValue = darksideToolBox.getTokenUSDCValue(totalTokenBalance, token, tokenType, false, address(usdcRewardCurrency));\r\n\r\n        if (totalTokenBalance == 0)\r\n            return;\r\n        if (usdcValue < usdcSwapThreshold)\r\n            return;\r\n\r\n        // generate the darksideSwap pair path of token -> usdc.\r\n        address[] memory path = new address[](2);\r\n        path[0] = token;\r\n        path[1] = address(usdcRewardCurrency);\r\n\r\n        uint256 usdcPriorBalance = usdcRewardCurrency.balanceOf(address(this));\r\n\r\n        require(IERC20(token).approve(address(darksideSwapRouter), totalTokenBalance), 'approval failed');\r\n\r\n        try\r\n            // make the swap\r\n            darksideSwapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                totalTokenBalance,\r\n                0, // accept any amount of USDC\r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n            )\r\n        { /* suceeded */ } catch { /* failed, but we avoided reverting */ }\r\n\r\n\r\n        uint256 usdcProfit = usdcRewardCurrency.balanceOf(address(this)) - usdcPriorBalance;\r\n\r\n        emit DepositFeeConvertedToUSDC(token, totalTokenBalance, usdcProfit);\r\n    }\r\n\r\n    /**\r\n     * @dev send usdc to a user\r\n     * Can only be called by the current operator.\r\n     */\r\n    function transferUSDCToUser(address recipient, uint256 amount) external onlyOwner {\r\n       uint256 usdcBalance = usdcRewardCurrency.balanceOf(address(this));\r\n       if (usdcBalance < amount)\r\n           amount = usdcBalance;\r\n\r\n       require(usdcRewardCurrency.transfer(recipient, amount), \"transfer failed!\");\r\n\r\n       pendingUSDC -= amount;\r\n\r\n        emit USDCTransferredToUser(recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev set the number of blocks we should use to calculate the USDC drip rate.\r\n     * Can only be called by the current operator.\r\n     */\r\n    function setUSDCDistributionTimeFrame(uint256 _usdcDistributionTimeFrame) external onlyOperator {\r\n        require(_usdcDistributionTimeFrame > 1600 && _usdcDistributionTimeFrame < 70080000 /* 5 years */, \"_usdcDistributionTimeFrame out of range!\");\r\n\r\n        distributionTimeFrameBlocks = _usdcDistributionTimeFrame;\r\n\r\n        emit SetUSDCDistributionTimeFrame(distributionTimeFrameBlocks);\r\n    }\r\n\r\n    /**\r\n     * @dev Update the swap router.\r\n     * Can only be called by the current operator.\r\n     */\r\n    function updateDarksideSwapRouter(address _router) external onlyOperator {\r\n        require(_router != address(0), \"updateDarksideSwapRouter: new _router is the zero address\");\r\n        require(address(darksideSwapRouter) == address(0), \"router already set!\");\r\n\r\n        darksideSwapRouter = IUniswapV2Router02(_router);\r\n        emit DarksideSwapRouterUpdated(msg.sender, address(darksideSwapRouter));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers operator of the contract to a new account (`newOperator`).\r\n     * Can only be called by the current operator.\r\n     */\r\n    function transferOperator(address newOperator) external onlyOperator {\r\n        require(newOperator != address(0), \"transferOperator: new operator is the zero address\");\r\n\r\n        emit OperatorTransferred(operator, newOperator);\r\n\r\n        operator = newOperator;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\r\n\r\n// \r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libs/SafeERC20.sol\r\n\r\n// \r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libs/IDarksideReferral.sol\r\n\r\n// \r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IDarksideReferral {\r\n    /**\r\n     * @dev Record referral.\r\n     */\r\n    function recordReferral(address user, address referrer) external;\r\n\r\n    /**\r\n     * @dev Record referral commission.\r\n     */\r\n    function recordReferralCommission(address referrer, uint256 commission) external;\r\n\r\n    /**\r\n     * @dev Get the referrer address that referred the user.\r\n     */\r\n    function getReferrer(address user) external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/DarksideReferral.sol\r\n\r\n// \r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\ncontract DarksideReferral is IDarksideReferral, Ownable {\r\n\r\n    address public operator;\r\n\r\n    mapping(address => address) public referrers; // user address => referrer address\r\n    mapping(address => uint256) public referralsCount; // referrer address => referrals count\r\n    mapping(address => uint256) public totalReferralCommissions; // referrer address => total referral commissions\r\n\r\n    event ReferralRecorded(address indexed user, address indexed referrer);\r\n    event ReferralCommissionRecorded(address indexed referrer, uint256 commission);\r\n    event OperatorUpdated(address indexed operator);\r\n\r\n    modifier onlyOperator {\r\n        require(operator == msg.sender, \"Operator: caller is not the operator\");\r\n        _;\r\n    }\r\n\r\n    function recordReferral(address _user, address _referrer) external override onlyOperator {\r\n        if (_user != address(0)\r\n            && _referrer != address(0)\r\n            && _user != _referrer\r\n            && referrers[_user] == address(0)\r\n        ) {\r\n            referrers[_user] = _referrer;\r\n            referralsCount[_referrer] += 1;\r\n            emit ReferralRecorded(_user, _referrer);\r\n        }\r\n    }\r\n\r\n    function recordReferralCommission(address _referrer, uint256 _commission) external override onlyOperator {\r\n        if (_referrer != address(0) && _commission > 0) {\r\n            totalReferralCommissions[_referrer] += _commission;\r\n            emit ReferralCommissionRecorded(_referrer, _commission);\r\n        }\r\n    }\r\n\r\n    // Get the referrer address that referred the user\r\n    function getReferrer(address _user) external override view returns (address) {\r\n        return referrers[_user];\r\n    }\r\n\r\n    // Update the status of the operator\r\n    function updateOperator(address _operator) external onlyOwner {\r\n        require(_operator != address(0), \"operator cannot be the 0 address\");\r\n        require(operator == address(0), \"operator is already set!\");\r\n\r\n        operator = _operator;\r\n\r\n        emit OperatorUpdated(_operator);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libs/IWETH.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.2.0\r\n\r\n// \r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libs/AddLiquidityHelper.sol\r\n\r\n// \r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n// AddLiquidityHelper, allows anyone to add or remove Darkside liquidity tax free\r\n// Also allows the Darkside Token to do buy backs tax free via an external contract.\r\ncontract AddLiquidityHelper is ReentrancyGuard, Ownable {\r\n    using SafeERC20 for ERC20;\r\n\r\n    address public darksideAddress;\r\n\r\n    IUniswapV2Router02 public immutable darksideSwapRouter;\r\n    // The trading pair\r\n    address public darksideSwapPair;\r\n\r\n    // To receive ETH when swapping\r\n    receive() external payable {}\r\n\r\n    event SetDarksideAddresses(address darksideAddress, address darksideSwapPair);\r\n\r\n    /**\r\n     * @notice Constructs the AddLiquidityHelper contract.\r\n     */\r\n    constructor(address _router) public  {\r\n        require(_router != address(0), \"_router is the zero address\");\r\n        darksideSwapRouter = IUniswapV2Router02(_router);\r\n    }\r\n\r\n    function darksideETHLiquidityWithBuyBack(address lpHolder) external payable nonReentrant {\r\n        require(msg.sender == darksideAddress, \"can only be used by the darkside token!\");\r\n\r\n        (uint256 res0, uint256 res1, ) = IUniswapV2Pair(darksideSwapPair).getReserves();\r\n\r\n        if (res0 != 0 && res1 != 0) {\r\n            // making weth res0\r\n            if (IUniswapV2Pair(darksideSwapPair).token0() == darksideAddress)\r\n                (res1, res0) = (res0, res1);\r\n\r\n            uint256 contractTokenBalance = ERC20(darksideAddress).balanceOf(address(this));\r\n\r\n            // calculate how much eth is needed to use all of contractTokenBalance\r\n            // also boost precision a tad.\r\n            uint256 totalETHNeeded = (res0 * contractTokenBalance) / res1;\r\n\r\n            uint256 existingETH = address(this).balance;\r\n\r\n            uint256 unmatchedDarkside = 0;\r\n\r\n            if (existingETH < totalETHNeeded) {\r\n                // calculate how much darkside will match up with our existing eth.\r\n                uint256 matchedDarkside = (res1 * existingETH) / res0;\r\n                if (contractTokenBalance >= matchedDarkside)\r\n                    unmatchedDarkside = contractTokenBalance - matchedDarkside;\r\n            } else if (existingETH > totalETHNeeded) {\r\n                // use excess eth for darkside buy back\r\n                uint256 excessETH = existingETH - totalETHNeeded;\r\n\r\n                if (excessETH / 2 > 0) {\r\n                    // swap half of the excess eth for lp to be balanced\r\n                    swapETHForTokens(excessETH / 2, darksideAddress);\r\n                }\r\n            }\r\n\r\n            uint256 unmatchedDarksideToSwap = unmatchedDarkside / 2;\r\n\r\n            // swap tokens for ETH\r\n            if (unmatchedDarksideToSwap > 0)\r\n                swapTokensForEth(darksideAddress, unmatchedDarksideToSwap);\r\n\r\n            uint256 darksideBalance = ERC20(darksideAddress).balanceOf(address(this));\r\n\r\n            // approve token transfer to cover all possible scenarios\r\n            ERC20(darksideAddress).approve(address(darksideSwapRouter), darksideBalance);\r\n\r\n            // add the liquidity\r\n            darksideSwapRouter.addLiquidityETH{value: address(this).balance}(\r\n                darksideAddress,\r\n                darksideBalance,\r\n                0, // slippage is unavoidable\r\n                0, // slippage is unavoidable\r\n                lpHolder,\r\n                block.timestamp\r\n            );\r\n\r\n        }\r\n\r\n        if (address(this).balance > 0) {\r\n            // not going to require/check return value of this transfer as reverting behaviour is undesirable.\r\n            payable(address(msg.sender)).call{value: address(this).balance}(\"\");\r\n        }\r\n\r\n        if (ERC20(darksideAddress).balanceOf(address(this)) > 0)\r\n            ERC20(darksideAddress).transfer(msg.sender, ERC20(darksideAddress).balanceOf(address(this)));\r\n    }\r\n\r\n    function addDarksideETHLiquidity(uint256 nativeAmount) external payable nonReentrant {\r\n        require(msg.value > 0, \"!sufficient funds\");\r\n\r\n        ERC20(darksideAddress).safeTransferFrom(msg.sender, address(this), nativeAmount);\r\n\r\n        // approve token transfer to cover all possible scenarios\r\n        ERC20(darksideAddress).approve(address(darksideSwapRouter), nativeAmount);\r\n\r\n        // add the liquidity\r\n        darksideSwapRouter.addLiquidityETH{value: msg.value}(\r\n            darksideAddress,\r\n            nativeAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            msg.sender,\r\n            block.timestamp\r\n        );\r\n\r\n        if (address(this).balance > 0) {\r\n            // not going to require/check return value of this transfer as reverting behaviour is undesirable.\r\n            payable(address(msg.sender)).call{value: address(this).balance}(\"\");\r\n        }\r\n\r\n        uint256 darksideBalance = ERC20(darksideAddress).balanceOf(address(this));\r\n\r\n        if (darksideBalance > 0)\r\n            ERC20(darksideAddress).transfer(msg.sender, darksideBalance);\r\n    }\r\n\r\n    function addDarksideLiquidity(address baseTokenAddress, uint256 baseAmount, uint256 nativeAmount) external nonReentrant {\r\n        ERC20(baseTokenAddress).safeTransferFrom(msg.sender, address(this), baseAmount);\r\n        ERC20(darksideAddress).safeTransferFrom(msg.sender, address(this), nativeAmount);\r\n\r\n        // approve token transfer to cover all possible scenarios\r\n        ERC20(baseTokenAddress).approve(address(darksideSwapRouter), baseAmount);\r\n        ERC20(darksideAddress).approve(address(darksideSwapRouter), nativeAmount);\r\n\r\n        // add the liquidity\r\n        darksideSwapRouter.addLiquidity(\r\n            baseTokenAddress,\r\n            darksideAddress,\r\n            baseAmount,\r\n            nativeAmount ,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            msg.sender,\r\n            block.timestamp\r\n        );\r\n\r\n        if (ERC20(baseTokenAddress).balanceOf(address(this)) > 0)\r\n            ERC20(baseTokenAddress).safeTransfer(msg.sender, ERC20(baseTokenAddress).balanceOf(address(this)));\r\n\r\n        if (ERC20(darksideAddress).balanceOf(address(this)) > 0)\r\n            ERC20(darksideAddress).transfer(msg.sender, ERC20(darksideAddress).balanceOf(address(this)));\r\n    }\r\n\r\n    function removeDarksideLiquidity(address baseTokenAddress, uint256 liquidity) external nonReentrant {\r\n        address lpTokenAddress = IUniswapV2Factory(darksideSwapRouter.factory()).getPair(baseTokenAddress, darksideAddress);\r\n        require(lpTokenAddress != address(0), \"pair hasn't been created yet, so can't remove liquidity!\");\r\n\r\n        ERC20(lpTokenAddress).safeTransferFrom(msg.sender, address(this), liquidity);\r\n        // approve token transfer to cover all possible scenarios\r\n        ERC20(lpTokenAddress).approve(address(darksideSwapRouter), liquidity);\r\n\r\n        // add the liquidity\r\n        darksideSwapRouter.removeLiquidity(\r\n            baseTokenAddress,\r\n            darksideAddress,\r\n            liquidity,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            msg.sender,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /// @dev Swap tokens for eth\r\n    function swapTokensForEth(address saleTokenAddress, uint256 tokenAmount) internal {\r\n        // generate the darksideSwap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = saleTokenAddress;\r\n        path[1] = darksideSwapRouter.WETH();\r\n\r\n        ERC20(saleTokenAddress).approve(address(darksideSwapRouter), tokenAmount);\r\n\r\n        // make the swap\r\n        darksideSwapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n\r\n    function swapETHForTokens(uint256 ethAmount, address wantedTokenAddress) internal {\r\n        require(address(this).balance >= ethAmount, \"insufficient matic provided!\");\r\n        require(wantedTokenAddress != address(0), \"wanted token address can't be the zero address!\");\r\n\r\n        // generate the darksideSwap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = darksideSwapRouter.WETH();\r\n        path[1] = wantedTokenAddress;\r\n\r\n        // make the swap\r\n        darksideSwapRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: ethAmount}(\r\n            0,\r\n            path,\r\n            // cannot send tokens to the token contract of the same type as the output token\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev set the darkside address.\r\n     * Can only be called by the current owner.\r\n     */\r\n    function setDarksideAddress(address _darksideAddress) external onlyOwner {\r\n        require(_darksideAddress != address(0), \"_darksideAddress is the zero address\");\r\n        require(darksideAddress == address(0), \"darksideAddress already set!\");\r\n\r\n        darksideAddress = _darksideAddress;\r\n\r\n        darksideSwapPair = IUniswapV2Factory(darksideSwapRouter.factory()).getPair(darksideAddress, darksideSwapRouter.WETH());\r\n\r\n        require(address(darksideSwapPair) != address(0), \"matic pair !exist\");\r\n\r\n        emit SetDarksideAddresses(darksideAddress, darksideSwapPair);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/DarksideToken.sol\r\n\r\n// \r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// DarksideToken.\r\ncontract DarksideToken is ERC20(\"Darkcoin\", \"DARK\")  {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Transfer tax rate in basis points. (default 6.66%)\r\n    uint16 public transferTaxRate = 666;\r\n    // Extra transfer tax rate in basis points. (default 10.00%)\r\n    uint16 public extraTransferTaxRate = 1000;\r\n    // Burn rate % of transfer tax. (default 54.95% x 6.66% = 3.660336% of total amount).\r\n    uint32 public constant burnRate = 549549549;\r\n    // Max transfer tax rate: 20.00%.\r\n    uint16 public constant MAXIMUM_TRANSFER_TAX_RATE = 2000;\r\n    // Burn address\r\n    address public constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    address public constant usdcCurrencyAddress = 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174;\r\n\r\n    uint256 public constant usdcSwapThreshold = 20 * (10 ** 6);\r\n\r\n    // Min amount to liquify. (default 40 DARKSIDEs)\r\n    uint256 public constant minDarksideAmountToLiquify = 40 * (10 ** 18);\r\n    // Min amount to liquify. (default 100 MATIC)\r\n    uint256 public constant minMaticAmountToLiquify = 100 *  (10 ** 18);\r\n\r\n    IUniswapV2Router02 public darksideSwapRouter;\r\n    // The trading pair\r\n    address public darksideSwapPair;\r\n    // In swap and liquify\r\n    bool private _inSwapAndLiquify;\r\n\r\n    AddLiquidityHelper public immutable addLiquidityHelper;\r\n    DarksideToolBox public immutable darksideToolBox;\r\n\r\n    address public immutable CZDiamond;\r\n\r\n    bool public ownershipIsTransferred = false;\r\n\r\n    mapping(address => bool) public excludeFromMap;\r\n    mapping(address => bool) public excludeToMap;\r\n\r\n    mapping(address => bool) public extraFromMap;\r\n    mapping(address => bool) public extraToMap;\r\n\r\n    event TransferFeeChanged(uint256 txnFee, uint256 extraTxnFee);\r\n    event UpdateFeeMaps(address indexed _contract, bool fromExcluded, bool toExcluded, bool fromHasExtra, bool toHasExtra);\r\n    event SetDarksideRouter(address darksideSwapRouter, address darksideSwapPair);\r\n    event OperatorTransferred(address indexed previousOperator, address indexed newOperator);\r\n\r\n    // The operator can only update the transfer tax rate\r\n    address public operator;\r\n\r\n    modifier onlyOperator() {\r\n        require(operator == msg.sender, \"!operator\");\r\n        _;\r\n    }\r\n\r\n    modifier lockTheSwap {\r\n        _inSwapAndLiquify = true;\r\n        _;\r\n        _inSwapAndLiquify = false;\r\n    }\r\n\r\n    modifier transferTaxFree {\r\n        uint16 _transferTaxRate = transferTaxRate;\r\n        uint16 _extraTransferTaxRate = extraTransferTaxRate;\r\n        transferTaxRate = 0;\r\n        extraTransferTaxRate = 0;\r\n        _;\r\n        transferTaxRate = _transferTaxRate;\r\n        extraTransferTaxRate = _extraTransferTaxRate;\r\n    }\r\n\r\n    /**\r\n     * @notice Constructs the DarksideToken contract.\r\n     */\r\n    constructor(address _CZDiamond, AddLiquidityHelper _addLiquidityHelper, DarksideToolBox _darksideToolBox) public {\r\n        addLiquidityHelper = _addLiquidityHelper;\r\n        darksideToolBox = _darksideToolBox;\r\n        CZDiamond = _CZDiamond;\r\n        operator = _msgSender();\r\n\r\n        // pre-mint\r\n        _mint(address(0x3a1D1114269d7a786C154FE5278bF5b1e3e20d31), uint256(325000 * (10 ** 18)));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public override onlyOwner  {\r\n        require(!ownershipIsTransferred, \"!unset\");\r\n        super.transferOwnership(newOwner);\r\n        ownershipIsTransferred = true;\r\n    }\r\n\r\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef).\r\n    function burn(uint256 _amount) external onlyOwner {\r\n        _burn(msg.sender, _amount);\r\n    }\r\n\r\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef).\r\n    function mint(address _to, uint256 _amount) external onlyOwner {\r\n        require(ownershipIsTransferred, \"too early!\");\r\n        if (_amount > 0)\r\n            _mint(_to, _amount);\r\n    }\r\n\r\n    /// @dev overrides transfer function to meet tokenomics of DARKSIDE\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override {\r\n        bool toFromAddLiquidityHelper = (sender == address(addLiquidityHelper) || recipient == address(addLiquidityHelper));\r\n        // swap and liquify\r\n        if (\r\n            _inSwapAndLiquify == false\r\n            && address(darksideSwapRouter) != address(0)\r\n            && !toFromAddLiquidityHelper\r\n            && sender != darksideSwapPair\r\n            && sender != owner()\r\n        ) {\r\n            swapAndLiquify();\r\n        }\r\n\r\n        if (toFromAddLiquidityHelper ||\r\n            recipient == BURN_ADDRESS || (transferTaxRate == 0 && extraTransferTaxRate == 0) ||\r\n            excludeFromMap[sender] || excludeToMap[recipient]) {\r\n            super._transfer(sender, recipient, amount);\r\n        } else {\r\n            // default tax is 6.66% of every transfer, but extra 2% for dumping tax\r\n            uint256 taxAmount = (amount * (transferTaxRate +\r\n                ((extraFromMap[sender] || extraToMap[recipient]) ? extraTransferTaxRate : 0))) / 10000;\r\n\r\n            uint256 burnAmount = (taxAmount * burnRate) / 1000000000;\r\n            uint256 liquidityAmount = taxAmount - burnAmount;\r\n\r\n            // default 93.34% of transfer sent to recipient\r\n            uint256 sendAmount = amount - taxAmount;\r\n\r\n            assert(amount == sendAmount + taxAmount &&\r\n                        taxAmount == burnAmount + liquidityAmount);\r\n\r\n            super._transfer(sender, BURN_ADDRESS, burnAmount);\r\n            super._transfer(sender, address(this), liquidityAmount);\r\n            super._transfer(sender, recipient, sendAmount);\r\n            amount = sendAmount;\r\n        }\r\n    }\r\n\r\n    /// @dev Swap and liquify\r\n    function swapAndLiquify() private lockTheSwap transferTaxFree {\r\n        uint256 contractTokenBalance = ERC20(address(this)).balanceOf(address(this));\r\n\r\n        uint256 WETHbalance = IERC20(darksideSwapRouter.WETH()).balanceOf(address(this));\r\n\r\n        IWETH(darksideSwapRouter.WETH()).withdraw(WETHbalance);\r\n\r\n        if (address(this).balance >= minMaticAmountToLiquify || contractTokenBalance >= minDarksideAmountToLiquify) {\r\n\r\n            IERC20(address(this)).safeTransfer(address(addLiquidityHelper), IERC20(address(this)).balanceOf(address(this)));\r\n            // send all tokens to add liquidity with, we are refunded any that aren't used.\r\n            addLiquidityHelper.darksideETHLiquidityWithBuyBack{value: address(this).balance}(BURN_ADDRESS);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev unenchant the lp token into its original components.\r\n     * Can only be called by the current operator.\r\n     */\r\n    function swapLpTokensForFee(address token, uint256 amount) internal {\r\n        require(IERC20(token).approve(address(darksideSwapRouter), amount), '!approved');\r\n\r\n        IUniswapV2Pair lpToken = IUniswapV2Pair(token);\r\n\r\n        uint256 token0BeforeLiquidation = IERC20(lpToken.token0()).balanceOf(address(this));\r\n        uint256 token1BeforeLiquidation = IERC20(lpToken.token1()).balanceOf(address(this));\r\n\r\n        // make the swap\r\n        darksideSwapRouter.removeLiquidity(\r\n            lpToken.token0(),\r\n            lpToken.token1(),\r\n            amount,\r\n            0,\r\n            0,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 token0FromLiquidation = IERC20(lpToken.token0()).balanceOf(address(this)) - token0BeforeLiquidation;\r\n        uint256 token1FromLiquidation = IERC20(lpToken.token1()).balanceOf(address(this)) - token1BeforeLiquidation;\r\n\r\n        address tokenForCZDiamondUSDCReward = lpToken.token0();\r\n        address tokenForDarksideAMMReward = lpToken.token1();\r\n\r\n        // If we already have, usdc, save a swap.\r\n       if (lpToken.token1() == usdcCurrencyAddress){\r\n\r\n            (tokenForDarksideAMMReward, tokenForCZDiamondUSDCReward) = (tokenForCZDiamondUSDCReward, tokenForDarksideAMMReward);\r\n        } else if (lpToken.token0() == darksideSwapRouter.WETH()){\r\n            // if one is weth already use the other one for czdiamond and\r\n            // the weth for darkside AMM to save a swap.\r\n\r\n            (tokenForDarksideAMMReward, tokenForCZDiamondUSDCReward) = (tokenForCZDiamondUSDCReward, tokenForDarksideAMMReward);\r\n        }\r\n\r\n        bool czRewardIs0 = tokenForCZDiamondUSDCReward == lpToken.token0();\r\n\r\n        // send czdiamond all of 1 half of the LP to be convereted to USDC later.\r\n        IERC20(tokenForCZDiamondUSDCReward).safeTransfer(address(CZDiamond),\r\n            czRewardIs0 ? token0FromLiquidation : token1FromLiquidation);\r\n\r\n        // send czdiamond 50% share of the other 50% to give czdiamond 75% in total.\r\n        IERC20(tokenForDarksideAMMReward).safeTransfer(address(CZDiamond),\r\n            (czRewardIs0 ? token1FromLiquidation : token0FromLiquidation)/2);\r\n\r\n        swapDepositFeeForWmatic(tokenForDarksideAMMReward, 0);\r\n    }\r\n\r\n    /**\r\n     * @dev sell all of a current type of token for weth, to be used in darkside liquidity later.\r\n     * Can only be called by the current operator.\r\n     */\r\n    function swapDepositFeeForETH(address token, uint256 tokenType) external onlyOwner {\r\n        uint256 usdcValue = darksideToolBox.getTokenUSDCValue(IERC20(token).balanceOf(address(this)), token, tokenType, false, usdcCurrencyAddress);\r\n\r\n        // If darkside or weth already no need to do anything.\r\n        if (token == address(this) || token == darksideSwapRouter.WETH())\r\n            return;\r\n\r\n        // only swap if a certain usdc value\r\n        if (usdcValue < usdcSwapThreshold)\r\n            return;\r\n\r\n        swapDepositFeeForWmatic(token, tokenType);\r\n    }\r\n\r\n    function swapDepositFeeForWmatic(address token, uint256 tokenType) internal {\r\n        address toToken = darksideSwapRouter.WETH();\r\n        uint256 totalTokenBalance = IERC20(token).balanceOf(address(this));\r\n\r\n        // can't trade to darkside inside of darkside anyway\r\n        if (token == toToken || totalTokenBalance == 0 || toToken == address(this))\r\n            return;\r\n\r\n        if (tokenType == 1) {\r\n            swapLpTokensForFee(token, totalTokenBalance);\r\n            return;\r\n        }\r\n\r\n        require(IERC20(token).approve(address(darksideSwapRouter), totalTokenBalance), \"!approved\");\r\n\r\n        // generate the darksideSwap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = token;\r\n        path[1] = toToken;\r\n\r\n        try\r\n            // make the swap\r\n            darksideSwapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                totalTokenBalance,\r\n                0, // accept any amount of tokens\r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n            )\r\n        { /* suceeded */ } catch { /* failed, but we avoided reverting */ }\r\n\r\n        // Unfortunately can't swap directly to darkside inside of darkside (Uniswap INVALID_TO Assert, boo).\r\n        // Also dont want to add an extra swap here.\r\n        // Will leave as WETH and make the darkside Txn AMM utilise available WETH first.\r\n    }\r\n\r\n    // To receive ETH from darksideSwapRouter when swapping\r\n    receive() external payable {}\r\n\r\n    /**\r\n     * @dev Update the transfer tax rate.\r\n     * Can only be called by the current operator.\r\n     */\r\n    function updateTransferTaxRate(uint16 _transferTaxRate, uint16 _extraTransferTaxRate) external onlyOperator {\r\n        require(_transferTaxRate + _extraTransferTaxRate  <= MAXIMUM_TRANSFER_TAX_RATE,\r\n            \"!valid\");\r\n        transferTaxRate = _transferTaxRate;\r\n        extraTransferTaxRate = _extraTransferTaxRate;\r\n\r\n        emit TransferFeeChanged(transferTaxRate, extraTransferTaxRate);\r\n    }\r\n\r\n    /**\r\n     * @dev Update the excludeFromMap\r\n     * Can only be called by the current operator.\r\n     */\r\n    function updateFeeMaps(address _contract, bool fromExcluded, bool toExcluded, bool fromHasExtra, bool toHasExtra) external onlyOperator {\r\n        excludeFromMap[_contract] = fromExcluded;\r\n        excludeToMap[_contract] = toExcluded;\r\n        extraFromMap[_contract] = fromHasExtra;\r\n        extraToMap[_contract] = toHasExtra;\r\n\r\n        emit UpdateFeeMaps(_contract, fromExcluded, toExcluded, fromHasExtra, toHasExtra);\r\n    }\r\n\r\n    /**\r\n     * @dev Update the swap router.\r\n     * Can only be called by the current operator.\r\n     */\r\n    function updateDarksideSwapRouter(address _router) external onlyOperator {\r\n        require(_router != address(0), \"!!0\");\r\n        require(address(darksideSwapRouter) == address(0), \"!unset\");\r\n\r\n        darksideSwapRouter = IUniswapV2Router02(_router);\r\n        darksideSwapPair = IUniswapV2Factory(darksideSwapRouter.factory()).getPair(address(this), darksideSwapRouter.WETH());\r\n\r\n        require(address(darksideSwapPair) != address(0), \"!matic pair\");\r\n\r\n        emit SetDarksideRouter(address(darksideSwapRouter), darksideSwapPair);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers operator of the contract to a new account (`newOperator`).\r\n     * Can only be called by the current operator.\r\n     */\r\n    function transferOperator(address newOperator) external onlyOperator {\r\n        require(newOperator != address(0), \"!!0\");\r\n\r\n        emit OperatorTransferred(operator, newOperator);\r\n\r\n        operator = newOperator;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.2.0\r\n\r\n// \r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721.sol@v4.2.0\r\n\r\n// \r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol@v4.2.0\r\n\r\n// \r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol@v4.2.0\r\n\r\n// \r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Strings.sol@v4.2.0\r\n\r\n// \r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/ERC165.sol@v4.2.0\r\n\r\n// \r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/ERC721.sol@v4.2.0\r\n\r\n// \r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n// File contracts/libs/ERC721Wrapper.sol\r\n\r\ncontract ERC721Wrapper is ERC721{\r\n\r\n    // FOR TESTING ONLY NOT FOR AUDIT!!!\r\n\r\n    constructor(string memory name_, string memory symbol_) public ERC721(name_, symbol_) {\r\n    }\r\n}\r\n\r\n\r\n// File hardhat/console.sol@v2.6.2\r\n\r\n// \r\npragma solidity >= 0.4.22 <0.9.0;\r\n\r\nlibrary console {\r\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\r\n\r\n\tfunction _sendLogPayload(bytes memory payload) private view {\r\n\t\tuint256 payloadLength = payload.length;\r\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\r\n\t\tassembly {\r\n\t\t\tlet payloadStart := add(payload, 32)\r\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\r\n\t\t}\r\n\t}\r\n\r\n\tfunction log() internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\r\n\t}\r\n\r\n\tfunction logInt(int p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\r\n\t}\r\n\r\n\tfunction logUint(uint p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\r\n\t}\r\n\r\n\tfunction logString(string memory p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\r\n\t}\r\n\r\n\tfunction logBool(bool p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\r\n\t}\r\n\r\n\tfunction logAddress(address p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes(bytes memory p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes1(bytes1 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes2(bytes2 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes3(bytes3 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes4(bytes4 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes5(bytes5 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes6(bytes6 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes7(bytes7 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes8(bytes8 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes9(bytes9 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes10(bytes10 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes11(bytes11 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes12(bytes12 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes13(bytes13 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes14(bytes14 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes15(bytes15 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes16(bytes16 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes17(bytes17 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes18(bytes18 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes19(bytes19 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes20(bytes20 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes21(bytes21 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes22(bytes22 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes23(bytes23 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes24(bytes24 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes25(bytes25 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes26(bytes26 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes27(bytes27 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes28(bytes28 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes29(bytes29 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes30(bytes30 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes31(bytes31 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\r\n\t}\r\n\r\n\tfunction logBytes32(bytes32 p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\r\n\t}\r\n\r\n\tfunction log(uint p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\r\n\t}\r\n\r\n\tfunction log(string memory p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\r\n\t}\r\n\r\n\tfunction log(bool p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\r\n\t}\r\n\r\n\tfunction log(address p0) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, uint p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, string memory p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, bool p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, address p2) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\r\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\r\n\t}\r\n\r\n}\r\n\r\n\r\n// File contracts/libs/Multicall.sol\r\n\r\npragma solidity >=0.5.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n/// @title Multicall - Aggregate results from multiple read-only function calls\r\n/// @author Michael Elliot <mike@makerdao.com>\r\n/// @author Joshua Levine <joshua@makerdao.com>\r\n/// @author Nick Johnson <arachnid@notdot.net>\r\n\r\ncontract Multicall {\r\n    struct Call {\r\n        address target;\r\n        bytes callData;\r\n    }\r\n\r\n    // FOR TESTING ONLY NOT FOR AUDIT!!!\r\n\r\n    function aggregate(Call[] memory calls) public returns (uint256 blockNumber, bytes[] memory returnData) {\r\n        console.log(\"multicall is running!!!\");\r\n        blockNumber = block.number;\r\n        returnData = new bytes[](calls.length);\r\n        for(uint256 i = 0; i < calls.length; i++) {\r\n            console.log(\"calling target: %s\", calls[i].target);\r\n            console.logBytes(calls[i].callData);\r\n            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\r\n            console.log(\"op %d returned\", i);\r\n            require(success, \"multicall op FAILED\");\r\n            returnData[i] = ret;\r\n        }\r\n    }\r\n    // Helper functions\r\n    function getEthBalance(address addr) public view returns (uint256 balance) {\r\n        balance = addr.balance;\r\n    }\r\n    function getBlockHash(uint256 blockNumber) public view returns (bytes32 blockHash) {\r\n        blockHash = blockhash(blockNumber);\r\n    }\r\n    function getLastBlockHash() public view returns (bytes32 blockHash) {\r\n        blockHash = blockhash(block.number - 1);\r\n    }\r\n    function getCurrentBlockTimestamp() public view returns (uint256 timestamp) {\r\n        timestamp = block.timestamp;\r\n    }\r\n    function getCurrentBlockDifficulty() public view returns (uint256 difficulty) {\r\n        difficulty = block.difficulty;\r\n    }\r\n    function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {\r\n        gaslimit = block.gaslimit;\r\n    }\r\n    function getCurrentBlockCoinbase() public view returns (address coinbase) {\r\n        coinbase = block.coinbase;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Locker.sol\r\n\r\n// The locker stores IERC20 tokens and only allows the owner to withdraw them after the UNLOCK_BLOCKNUMBER has been reached.\r\n\r\n\r\ncontract Locker is Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint256 public immutable UNLOCK_BLOCKNUMBER;\r\n\r\n    event Claim(address token, address to);\r\n\r\n    // ALREADY AUDITED !!!\r\n\r\n    /**\r\n     * @notice Constructs the DarksideToken contract.\r\n     */\r\n    constructor(uint256 blockNumber) public {\r\n        UNLOCK_BLOCKNUMBER = blockNumber;\r\n    }\r\n\r\n    // claimToken allows the owner to withdraw tokens sent manually to this contract.\r\n    // It is only callable once UNLOCK_BLOCKNUMBER has passed.\r\n    function claimToken(address token, address to) external onlyOwner {\r\n        require(block.number > UNLOCK_BLOCKNUMBER, \"still vesting...\");\r\n\r\n        IERC20(token).safeTransfer(to, IERC20(token).balanceOf(address(this)));\r\n\r\n        emit Claim(token, to);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/structs/EnumerableSet.sol@v4.2.0\r\n\r\n// \r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastvalue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastvalue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n\r\n// File contracts/NFTChef.sol\r\n\r\n// \r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// NFTChef is the keeper of Masterchefs NFTs.\r\n//\r\n//\r\n// Have fun reading it. Hopefully it's bug-free. God bless.\r\ncontract NFTChef is IERC721Receiver, Ownable {\r\n    using EnumerableSet for EnumerableSet.UintSet;\r\n    using SafeERC20 for IERC20;\r\n\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes calldata\r\n    ) external override returns(bytes4) {\r\n        return IERC721Receiver.onERC721Received.selector;\r\n    }\r\n\r\n    // max NFTs a single user can stake in a pool. This is to ensure finite gas usage on emergencyWithdraw.\r\n    uint256 public constant MAX_NFT_COUNT = 32;\r\n    uint256 public constant MAX_MATIC_STAKING_FEE = 1e3 * (1e18);\r\n\r\n    // Mapping of NFT contract address to which NFTs a user has staked.\r\n    mapping(address => mapping(address => mapping(uint256 => bool))) public userStakedMap;\r\n    // Mapping of NFT contract address to array of NFT IDs a user has staked.\r\n    mapping(address => mapping(address => EnumerableSet.UintSet)) private userNftIdsMapArray;\r\n    // mapping of NFT contract address to maticFeeAmount\r\n    mapping(address => uint256) public userNftMaticFeeMap;\r\n\r\n    // MATIC Polygon (MATIC) address\r\n    address public constant maticCurrencyAddress = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;\r\n    address public immutable CZDiamondAddress;\r\n    address public immutable darksideAddress;\r\n\r\n    event AddSetPoolNFT(address indexed nftContractAddress, uint256 maticFee);\r\n    event DepositNFT(address indexed user, address indexed nftContractAddress, uint256 nftId);\r\n    event WithdrawNFT(address indexed user, address indexed nftContractAddress, uint256 nftId);\r\n    event EmergencyWithdrawNFT(address indexed user, address indexed nftContractAddress, uint256 nftId);\r\n    event EmergencyNFTWithdrawCompleted(address indexed user, address indexed nftContractAddress, uint256 amountOfNfts);\r\n\r\n    constructor(\r\n        address _CZDiamondAddress,\r\n        address _darksideAddress\r\n    ) public {\r\n        CZDiamondAddress = _CZDiamondAddress;\r\n        darksideAddress = _darksideAddress;\r\n    }\r\n\r\n    // set NFTs matic deposit Fees.\r\n    function setPoolMaticFee(address nftContractAddress, uint256 maticFee) external onlyOwner {\r\n        IERC721(nftContractAddress).balanceOf(address(this));\r\n        require(maticFee <= MAX_MATIC_STAKING_FEE, \"maximum matic fee for nft staking is 1000 matic!\");\r\n        userNftMaticFeeMap[nftContractAddress] = maticFee;\r\n\r\n        emit AddSetPoolNFT(nftContractAddress, maticFee);\r\n    }\r\n\r\n    // Deposit NFTs to NFTChef for DARKSIDE allocation.\r\n    function deposit(address nftContractAddress, address userAddress, uint256 nftId) external payable onlyOwner {\r\n        require(msg.value >= userNftMaticFeeMap[nftContractAddress], \"not enough unwrapped matic provided!\");\r\n        require(userNftIdsMapArray[nftContractAddress][userAddress].length() < MAX_NFT_COUNT,\r\n            \"you have aleady reached the maximum amount of NFTs you can stake in this pool\");\r\n        IERC721(nftContractAddress).transferFrom(userAddress, address(this), nftId);\r\n\r\n        userStakedMap[nftContractAddress][userAddress][nftId] = true;\r\n\r\n        userNftIdsMapArray[nftContractAddress][userAddress].add(nftId);\r\n\r\n        uint256 maticBalance = address(this).balance;\r\n        // Wrapping native matic for wmatic.\r\n        if (maticBalance > 0)\r\n            IWETH(maticCurrencyAddress).deposit{value:maticBalance}();\r\n\r\n        uint256 wmaticBalance = IERC20(maticCurrencyAddress).balanceOf(address(this));\r\n        uint256 darkSideFee = wmaticBalance/4;\r\n\r\n        if (darkSideFee > 0)\r\n            IERC20(maticCurrencyAddress).safeTransferFrom(address(this), darksideAddress, darkSideFee);\r\n        if (wmaticBalance - darkSideFee > 0)\r\n            IERC20(maticCurrencyAddress).safeTransferFrom(address(this), CZDiamondAddress, wmaticBalance - darkSideFee);\r\n\r\n        emit DepositNFT(userAddress, nftContractAddress, nftId);\r\n    }\r\n\r\n    // Withdraw NFTs from NFTChef.\r\n    function withdraw(address nftContractAddress, address userAddress, uint256 nftId) external onlyOwner {\r\n        require(userStakedMap[nftContractAddress][userAddress][nftId], \"nft not staked\");\r\n\r\n        IERC721(nftContractAddress).transferFrom(address(this), userAddress, nftId);\r\n\r\n        userStakedMap[nftContractAddress][userAddress][nftId] = false;\r\n\r\n        userNftIdsMapArray[nftContractAddress][userAddress].remove(nftId);\r\n\r\n        emit WithdrawNFT(userAddress, nftContractAddress, nftId);\r\n    }\r\n\r\n    // Withdraw all NFTs without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(address nftContractAddress, address userAddress) external onlyOwner {\r\n        EnumerableSet.UintSet storage nftStakedCollection = userNftIdsMapArray[nftContractAddress][userAddress];\r\n\r\n        for (uint256 i = 0;i < nftStakedCollection.length();i++) {\r\n            uint256 nftId = nftStakedCollection.at(i);\r\n\r\n            IERC721(nftContractAddress).transferFrom(address(this), userAddress, nftId);\r\n\r\n            userStakedMap[nftContractAddress][userAddress][nftId] = false;\r\n\r\n            emit EmergencyWithdrawNFT(userAddress, nftContractAddress, nftId);\r\n        }\r\n\r\n        emit EmergencyNFTWithdrawCompleted(userAddress, nftContractAddress, nftStakedCollection.length());\r\n\r\n        // empty user nft Ids array\r\n        delete userNftIdsMapArray[nftContractAddress][userAddress];\r\n    }\r\n\r\n    function viewStakerUserNFTs(address nftContractAddress, address userAddress) public view returns (uint256[] memory){\r\n        EnumerableSet.UintSet storage nftStakedCollection = userNftIdsMapArray[nftContractAddress][userAddress];\r\n\r\n        uint256[] memory nftStakedArray = new uint256[](nftStakedCollection.length());\r\n\r\n        for (uint256 i = 0;i < nftStakedCollection.length();i++)\r\n           nftStakedArray[i] = nftStakedCollection.at(i);\r\n\r\n        return nftStakedArray;\r\n    }\r\n\r\n    // To receive MATIC from depositers when depositing NFTs\r\n    receive() external payable {}\r\n}\r\n\r\n\r\n// File contracts/MasterChef.sol\r\n\r\n// \r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// MasterChef is the master of Darkside. He can make Darkside and he is a fair guy.\r\n//\r\n// Note that it's ownable and the owner wields tremendous power. The ownership\r\n// will be transferred to a governance smart contract once DARKSIDE is sufficiently\r\n// distributed and the community can show to govern itself.\r\n//\r\n// Have fun reading it. Hopefully it's bug-free. God bless.\r\ncontract MasterChef is Ownable, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n\r\n\r\n    // Burn address\r\n    address constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    // USDC Polygon (MATIC) address\r\n    address public constant usdcCurrencyAddress = 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174;\r\n\r\n    // Founder 1 address\r\n    address public constant FOUNDER1_ADDRESS = 0x3a1D1114269d7a786C154FE5278bF5b1e3e20d31;\r\n    // Founder 2 address\r\n    address public constant FOUNDER2_ADDRESS = 0x30139dfe2D78aFE7fb539e2F2b765d794fe52cB4;\r\n\r\n    uint256 public totalUSDCCollected = 0;\r\n\r\n    uint256 public accDepositUSDCRewardPerShare = 0;\r\n\r\n    // NFTChef, the keeper of the NFTs!\r\n    NFTChef public nftChef;\r\n    // The CZDIAMOND TOKEN!\r\n    CZDiamondToken public CZDiamond;\r\n    // The DARKSIDE TOKEN!\r\n    DarksideToken public darkside;\r\n    // Darkside's trusty utility belt.\r\n    DarksideToolBox public darksideToolBox;\r\n\r\n    uint256 public darksideReleaseGradient;\r\n    uint256 public endDarksideGradientBlock;\r\n    uint256 public endGoalDarksideEmission;\r\n    bool public isIncreasingGradient = false;\r\n\r\n\r\n    // The amount of time between Rare release rate halvings.\r\n    uint256 public czdReleaseHalfLife;\r\n    // The inital release rate for the rare rewards period.\r\n    uint256 public initialCZDReleaseRate;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount;         // How many LP tokens the user has provided.\r\n        uint256 darksideRewardDebt;     // Reward debt. See explanation below.\r\n        uint256 CZDiamondRewardDebt;     // Reward debt. See explanation below.\r\n        uint256 usdcRewardDebt;     // Reward debt. See explanation below.\r\n        //\r\n        // We do some fancy math here. Basically, any point in time, the amount of DARKSIDEs\r\n        // entitled to a user but is pending to be distributed is:\r\n        //\r\n        //   pending reward = (user.amount * pool.accDarksidePerShare) - user.rewardDebt\r\n        //\r\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\r\n        //   1. The pool's `accDarksidePerShare` (and `lastRewardBlock`) gets updated.\r\n        //   2. User receives the pending reward sent to his/her address.\r\n        //   3. User's `amount` gets updated.\r\n        //   4. User's `rewardDebt` gets updated.\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        address lpToken;           // Address of LP token contract.\r\n        uint256 allocPoint;       // How many allocation points assigned to this pool. DARKSIDEs to distribute per block.\r\n        uint256 lastRewardBlock;  // Last block number that DARKSIDEs distribution occurs.\r\n        uint256 accDarksidePerShare;   // Accumulated DARKSIDEs per share, times 1e24. See below.\r\n        uint256 accCZDiamondPerShare;   // Accumulated CZDIAMONDs per share, times 1e24. See below.\r\n        uint256 depositFeeBPOrNFTMaticFee;      // Deposit fee in basis points\r\n        uint256 tokenType;          // 0=Token, 1=LP Token, 2=NFT\r\n        uint256 totalLocked;      // total units locked in the pool\r\n    }\r\n\r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n    // Info of each user that stakes LP tokens.\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n    // Total allocation points. Must be the sum of all allocation points in all pools.\r\n    uint256 public totalAllocPoint = 0;\r\n    // The block number when normal DARKSIDE mining starts.\r\n    uint256 public startBlock;\r\n\r\n\r\n    // The last checked balance of DARKSIDE in the burn waller\r\n    uint256 public lastDarksideBurnBalance = 0;\r\n    // How much of burn do CZDiamond stakers get out of 10000\r\n    uint256 public CZDiamondShareOfBurn = 8197;\r\n\r\n    // Darkside referral contract address.\r\n    IDarksideReferral darksideReferral;\r\n    // Referral commission rate in basis points.\r\n    // This is split into 2 halves 3% for the referrer and 3% for the referee.\r\n    uint16 public constant referralCommissionRate = 600;\r\n\r\n    // removed to save some space..\r\n    // uint256 public constant CZDiamondPID = 0;\r\n\r\n    event AddPool(uint256 indexed pid, uint256 tokenType, uint256 allocPoint, address lpToken, uint256 depositFeeBPOrNFTMaticFee);\r\n    event SetPool(uint256 indexed pid, uint256 allocPoint, uint256 depositFeeBPOrNFTMaticFee);\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event GradientUpdated(uint256 newEndGoalDarksideEmmission, uint256 newEndDarksideEmmissionBlock);\r\n    event SetDarksideReferral(address darksideAddress);\r\n\r\n    constructor(\r\n        NFTChef _nftChef,\r\n        CZDiamondToken _CZDiamond,\r\n        DarksideToken _darkside,\r\n        DarksideToolBox _darksideToolBox,\r\n        uint256 _startBlock,\r\n        uint256 _czdReleaseHalfLife,\r\n        uint256 _initialCZDReleaseRate,\r\n        uint256 _beginningDarksideEmission,\r\n        uint256 _endDarksideEmission,\r\n        uint256 _gradient1EndBlock\r\n    ) public {\r\n        require(_beginningDarksideEmission < 80 ether, \"too high\");\r\n        require(_endDarksideEmission < 80 ether, \"too high\");\r\n\r\n        nftChef = _nftChef;\r\n        CZDiamond = _CZDiamond;\r\n        darkside = _darkside;\r\n        darksideToolBox = _darksideToolBox;\r\n\r\n        startBlock = _startBlock;\r\n\r\n        require(_startBlock < _gradient1EndBlock + 40, \"!grad\");\r\n\r\n        isIncreasingGradient = _endDarksideEmission > _beginningDarksideEmission;\r\n\r\n        czdReleaseHalfLife = _czdReleaseHalfLife;\r\n        initialCZDReleaseRate = _initialCZDReleaseRate;\r\n\r\n        endDarksideGradientBlock = _gradient1EndBlock;\r\n        endGoalDarksideEmission = _endDarksideEmission;\r\n\r\n        darksideReleaseGradient = _darksideToolBox.calcEmissionGradient(\r\n            _startBlock, _beginningDarksideEmission, endDarksideGradientBlock, endGoalDarksideEmission);\r\n\r\n        add(0, 10000, address(_CZDiamond), 0, false);\r\n    }\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    mapping(address => bool) public poolExistence;\r\n    modifier nonDuplicated(address _lpToken) {\r\n        require(poolExistence[_lpToken] == false, \"dup-pool\");\r\n        _;\r\n    }\r\n\r\n    // Add a new lp to the pool. Can only be called by the owner.\r\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\r\n    function add(uint256 _tokenType, uint256 _allocPoint, address _lpToken, uint256 _depositFeeBPOrNFTMaticFee, bool _withUpdate) public onlyOwner nonDuplicated(_lpToken) {\r\n        require(_tokenType == 0 || _tokenType == 1 || _tokenType == 2, \"!token-type\");\r\n\r\n        // Make sure the provided token is ERC20/ERC721\r\n        if (_tokenType == 2)\r\n            nftChef.setPoolMaticFee(_lpToken, _depositFeeBPOrNFTMaticFee);\r\n        else {\r\n            ERC20(_lpToken).balanceOf(address(this));\r\n            require(_depositFeeBPOrNFTMaticFee <= 401, \"!feeBP\");\r\n        }\r\n\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n\r\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\r\n        totalAllocPoint = totalAllocPoint + _allocPoint;\r\n\r\n        poolExistence[_lpToken] = true;\r\n\r\n        poolInfo.push(PoolInfo({\r\n            lpToken: _lpToken,\r\n            allocPoint: _allocPoint,\r\n            lastRewardBlock: lastRewardBlock,\r\n            accDarksidePerShare: 0,\r\n            accCZDiamondPerShare: 0,\r\n            depositFeeBPOrNFTMaticFee: _depositFeeBPOrNFTMaticFee,\r\n            tokenType: _tokenType,\r\n            totalLocked: 0\r\n        }));\r\n\r\n        emit AddPool(poolInfo.length - 1, _tokenType, _allocPoint, address(_lpToken), _depositFeeBPOrNFTMaticFee);\r\n    }\r\n\r\n    // Update the given pool's DARKSIDE allocation point and deposit fee. Can only be called by the owner.\r\n    function set(uint256 _pid, uint256 _allocPoint, uint256 _depositFeeBPOrNFTMaticFee, bool _withUpdate) external onlyOwner {\r\n        if (poolInfo[_pid].tokenType == 2)\r\n            nftChef.setPoolMaticFee(poolInfo[_pid].lpToken, _depositFeeBPOrNFTMaticFee);\r\n        else\r\n            require(_depositFeeBPOrNFTMaticFee <= 401);\r\n\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        totalAllocPoint = (totalAllocPoint - poolInfo[_pid].allocPoint) + _allocPoint;\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n        poolInfo[_pid].depositFeeBPOrNFTMaticFee = _depositFeeBPOrNFTMaticFee;\r\n        //poolInfo[_pid].tokenType = _tokenType;\r\n        //poolInfo[_pid].totalLocked = poolInfo[_pid].totalLocked;\r\n\r\n        emit SetPool(_pid, _allocPoint, _depositFeeBPOrNFTMaticFee);\r\n    }\r\n\r\n    // View function to see pending USDCs on frontend.\r\n    function pendingUSDC(address _user) external view returns (uint256) {\r\n        UserInfo storage user = userInfo[0][_user];\r\n\r\n        return ((user.amount * accDepositUSDCRewardPerShare) / (1e24)) - user.usdcRewardDebt;\r\n    }\r\n\r\n    // View function to see pending DARKSIDEs on frontend.\r\n    function pendingDarkside(uint256 _pid, address _user) external view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accDarksidePerShare = pool.accDarksidePerShare;\r\n\r\n        uint256 lpSupply = pool.totalLocked;\r\n        if (block.number > pool.lastRewardBlock && lpSupply != 0 && totalAllocPoint != 0) {\r\n            uint256 release = darksideToolBox.getDarksideRelease(isIncreasingGradient, darksideReleaseGradient, endDarksideGradientBlock, endGoalDarksideEmission, pool.lastRewardBlock, block.number);\r\n            uint256 darksideReward = (release * pool.allocPoint) / totalAllocPoint;\r\n            accDarksidePerShare = accDarksidePerShare + ((darksideReward * 1e24) / lpSupply);\r\n        }\r\n        return ((user.amount * accDarksidePerShare) / 1e24) - user.darksideRewardDebt;\r\n    }\r\n\r\n    // View function to see pending CZDiamond on frontend.\r\n    function pendingCZDiamond(uint256 _pid, address _user) external view returns (uint256) {\r\n        // CZDiamond pool never gets any more CZDiamond.\r\n        if (_pid == 0)\r\n            return 0;\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accCZDiamondPerShare = pool.accCZDiamondPerShare;\r\n\r\n        uint256 lpSupply = pool.totalLocked;\r\n        if (block.number > pool.lastRewardBlock && lpSupply != 0 && totalAllocPoint > poolInfo[0].allocPoint) {\r\n            uint256 release = darksideToolBox.getCZDiamondRelease(initialCZDReleaseRate, czdReleaseHalfLife, pool.lastRewardBlock, block.number);\r\n            uint256 CZDiamondReward = (release * pool.allocPoint) / (totalAllocPoint - poolInfo[0].allocPoint);\r\n            accCZDiamondPerShare = accCZDiamondPerShare + ((CZDiamondReward * 1e24) / lpSupply);\r\n        }\r\n\r\n        return ((user.amount * accCZDiamondPerShare) / 1e24) - user.CZDiamondRewardDebt;\r\n    }\r\n\r\n    // Update reward variables for all pools. Be careful of gas spending!\r\n    function massUpdatePools() public {\r\n        for (uint256 pid = 0; pid < poolInfo.length; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n    }\r\n\r\n    // Transfers any excess coins gained through reflection\r\n    // to DARKSIDE and CZDIAMOND\r\n    function skimPool(uint256 poolId) internal {\r\n        PoolInfo storage pool = poolInfo[poolId];\r\n        // cannot skim any tokens we use for staking rewards.\r\n        if (pool.tokenType == 2 || isNativeToken(address(pool.lpToken)))\r\n            return;\r\n\r\n        uint256 trueBalance = ERC20(pool.lpToken).balanceOf(address(this));\r\n\r\n        uint256 skim = trueBalance > pool.totalLocked ?\r\n                            trueBalance - pool.totalLocked :\r\n                            0;\r\n\r\n        if (skim > 1e4) {\r\n            uint256 CZDiamondShare = skim / 2;\r\n            uint256 darksideShare = skim - CZDiamondShare;\r\n            IERC20(pool.lpToken).safeTransfer(address(CZDiamond), CZDiamondShare);\r\n            IERC20(pool.lpToken).safeTransfer(address(darkside), darksideShare);\r\n        }\r\n    }\r\n\r\n    // Updates darkside release goal and phase change duration\r\n    function updateDarksideRelease(uint256 endBlock, uint256 endDarksideEmission) external onlyOwner {\r\n        require(endDarksideEmission < 80 ether, \"too high\");\r\n        // give some buffer as to stop extrememly large gradients\r\n        require(block.number + 4 < endBlock, \"late!\");\r\n\r\n        // this will be called infrequently\r\n        // and deployed on a cheap gas network POLYGON (MATIC)\r\n        massUpdatePools();\r\n\r\n        uint256 currentDarksideEmission = darksideToolBox.getDarksideEmissionForBlock(block.number,\r\n            isIncreasingGradient, darksideReleaseGradient, endDarksideGradientBlock, endGoalDarksideEmission);\r\n\r\n        isIncreasingGradient = endDarksideEmission > currentDarksideEmission;\r\n        darksideReleaseGradient = darksideToolBox.calcEmissionGradient(block.number,\r\n            currentDarksideEmission, endBlock, endDarksideEmission);\r\n\r\n        endDarksideGradientBlock = endBlock;\r\n        endGoalDarksideEmission = endDarksideEmission;\r\n\r\n        emit GradientUpdated(endGoalDarksideEmission, endDarksideGradientBlock);\r\n    }\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.number <= pool.lastRewardBlock)\r\n            return;\r\n\r\n        uint256 lpSupply = pool.totalLocked;\r\n        if (lpSupply == 0 || pool.allocPoint == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n\r\n        // CZDiamond pool is always pool 0.\r\n        if (poolInfo[0].totalLocked > 0) {\r\n            uint256 usdcRelease = CZDiamond.getUSDCDrip();\r\n\r\n            accDepositUSDCRewardPerShare = accDepositUSDCRewardPerShare + ((usdcRelease * 1e24) / poolInfo[0].totalLocked);\r\n            totalUSDCCollected = totalUSDCCollected + usdcRelease;\r\n        }\r\n\r\n        uint256 darksideRelease = darksideToolBox.getDarksideRelease(isIncreasingGradient, darksideReleaseGradient, endDarksideGradientBlock, endGoalDarksideEmission, pool.lastRewardBlock, block.number);\r\n        uint256 darksideReward = (darksideRelease * pool.allocPoint) / totalAllocPoint;\r\n\r\n        // Darkside Txn fees ONLY for CZDiamond stakers.\r\n        if (_pid == 0) {\r\n            uint256 burnBalance = darkside.balanceOf(BURN_ADDRESS);\r\n            darksideReward = darksideReward + (((burnBalance - lastDarksideBurnBalance) * CZDiamondShareOfBurn) / 10000);\r\n\r\n            lastDarksideBurnBalance = burnBalance;\r\n        }\r\n\r\n        darkside.mint(address(this), darksideReward);\r\n\r\n        if (_pid != 0 && totalAllocPoint > poolInfo[0].allocPoint) {\r\n\r\n            uint256 CZDiamondRelease = darksideToolBox.getCZDiamondRelease(initialCZDReleaseRate, czdReleaseHalfLife, pool.lastRewardBlock, block.number);\r\n\r\n            if (CZDiamondRelease > 0) {\r\n                uint256 CZDiamondReward = ((CZDiamondRelease * pool.allocPoint) / (totalAllocPoint - poolInfo[0].allocPoint));\r\n\r\n                // Getting CZDiamond allocated specificlly for initial distribution.\r\n                CZDiamondReward = CZDiamond.distribute(address(this), CZDiamondReward);\r\n\r\n                pool.accCZDiamondPerShare = pool.accCZDiamondPerShare + ((CZDiamondReward * 1e24) / lpSupply);\r\n            }\r\n        }\r\n\r\n        pool.accDarksidePerShare = pool.accDarksidePerShare + ((darksideReward * 1e24) / lpSupply);\r\n        pool.lastRewardBlock = block.number;\r\n    }\r\n\r\n    // Return if address is a founder address.\r\n    function isFounder(address addr) public pure returns (bool) {\r\n        return addr == FOUNDER1_ADDRESS || addr == FOUNDER2_ADDRESS;\r\n    }\r\n\r\n    // Return if address is a founder address.\r\n    function isNativeToken(address addr) public view returns (bool) {\r\n        return addr == address(CZDiamond) || addr == address(darkside);\r\n    }\r\n\r\n    // Deposit LP tokens to MasterChef for DARKSIDE allocation.\r\n    function deposit(uint256 _pid, uint256 _amountOrId, bool isNFTHarvest, address _referrer) external payable nonReentrant {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n\r\n        updatePool(_pid);\r\n\r\n        if ((pool.tokenType == 2 || _amountOrId > 0) && address(darksideReferral) != address(0) && _referrer != address(0) && _referrer != msg.sender) {\r\n            darksideReferral.recordReferral(msg.sender, _referrer);\r\n        }\r\n\r\n        payPendingCZDiamondDarkside(_pid);\r\n        if (_pid == 0)\r\n            payPendingUSDCReward();\r\n\r\n        if (!isNFTHarvest && pool.tokenType == 2) {\r\n            // I don't think we need to verify we recieved the NFT as safeTransferFrom checks this sufficiently.\r\n            nftChef.deposit{value: address(this).balance}(pool.lpToken, address(msg.sender), _amountOrId);\r\n\r\n            user.amount = user.amount + 1;\r\n            pool.totalLocked = pool.totalLocked + 1;\r\n        } else if (pool.tokenType != 2 && _amountOrId > 0) {\r\n            // Accept the balance of coins we recieve (useful for coins which take fees).\r\n            uint256 previousBalance = ERC20(pool.lpToken).balanceOf(address(this));\r\n            IERC20(pool.lpToken).safeTransferFrom(address(msg.sender), address(this), _amountOrId);\r\n            _amountOrId = ERC20(pool.lpToken).balanceOf(address(this)) - previousBalance;\r\n            require(_amountOrId > 0, \"0 recieved\");\r\n\r\n            if (pool.depositFeeBPOrNFTMaticFee > 0 && !isNativeToken(address(pool.lpToken))) {\r\n                uint256 depositFee = ((_amountOrId * pool.depositFeeBPOrNFTMaticFee) / 10000);\r\n                // For LPs darkside handles it 100%, destroys and distributes\r\n                uint256 darksideDepositFee = pool.tokenType == 1 ? depositFee : (depositFee / 4);\r\n                IERC20(pool.lpToken).safeTransfer(address(darkside), darksideDepositFee);\r\n                // darkside handles all LP type tokens\r\n                darkside.swapDepositFeeForETH(address(pool.lpToken), pool.tokenType);\r\n\r\n                if (pool.tokenType == 0)\r\n                    IERC20(pool.lpToken).safeTransfer(address(CZDiamond), depositFee - darksideDepositFee);\r\n\r\n                CZDiamond.convertDepositFeesToUSDC(address(pool.lpToken), pool.tokenType);\r\n\r\n                user.amount = (user.amount + _amountOrId) - depositFee;\r\n                pool.totalLocked = (pool.totalLocked + _amountOrId) - depositFee;\r\n            } else {\r\n                user.amount = user.amount + _amountOrId;\r\n\r\n                pool.totalLocked = pool.totalLocked + _amountOrId;\r\n            }\r\n        }\r\n\r\n        user.darksideRewardDebt = ((user.amount * pool.accDarksidePerShare) / 1e24);\r\n        user.CZDiamondRewardDebt = ((user.amount * pool.accCZDiamondPerShare) / 1e24);\r\n\r\n        if (_pid == 0)\r\n            user.usdcRewardDebt = ((user.amount * accDepositUSDCRewardPerShare) / 1e24);\r\n\r\n        skimPool(_pid);\r\n\r\n        emit Deposit(msg.sender, _pid, _amountOrId);\r\n    }\r\n\r\n    // Withdraw LP tokens from MasterChef.\r\n    function withdraw(uint256 _pid, uint256 _amountOrId) external nonReentrant {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(pool.tokenType == 2 || user.amount >= _amountOrId, \"!withdraw\");\r\n\r\n        require(!(_pid == 0 && isFounder(msg.sender)) || block.number > startBlock + (60 * 43200),\r\n                \"early!\");\r\n\r\n        updatePool(_pid);\r\n\r\n        payPendingCZDiamondDarkside(_pid);\r\n        if (_pid == 0)\r\n            payPendingUSDCReward();\r\n\r\n        uint256 withdrawQuantity = 0;\r\n\r\n        if (pool.tokenType == 2) {\r\n            nftChef.withdraw(pool.lpToken, address(msg.sender), _amountOrId);\r\n\r\n            withdrawQuantity = 1;\r\n        } else if (_amountOrId > 0) {\r\n            IERC20(pool.lpToken).safeTransfer(address(msg.sender), _amountOrId);\r\n\r\n            withdrawQuantity = _amountOrId;\r\n        }\r\n\r\n        user.amount = user.amount - withdrawQuantity;\r\n        pool.totalLocked = pool.totalLocked - withdrawQuantity;\r\n\r\n        user.darksideRewardDebt = ((user.amount * pool.accDarksidePerShare) / 1e24);\r\n        user.CZDiamondRewardDebt = ((user.amount * pool.accCZDiamondPerShare) / 1e24);\r\n\r\n        if (_pid == 0)\r\n            user.usdcRewardDebt = ((user.amount * accDepositUSDCRewardPerShare) / 1e24);\r\n\r\n        skimPool(_pid);\r\n\r\n        emit Withdraw(msg.sender, _pid, _amountOrId);\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint256 _pid) external nonReentrant {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        uint256 amount = user.amount;\r\n\r\n        require(!(_pid == 0 && isFounder(msg.sender)) || block.number > startBlock + (60 * 43200),\r\n                \"early!\");\r\n\r\n        if (pool.tokenType == 2)\r\n            nftChef.emergencyWithdraw(pool.lpToken, address(msg.sender));\r\n        else\r\n            IERC20(pool.lpToken).safeTransfer(address(msg.sender), amount);\r\n\r\n        user.amount = 0;\r\n        user.darksideRewardDebt = 0;\r\n        user.CZDiamondRewardDebt = 0;\r\n        user.usdcRewardDebt = 0;\r\n\r\n        // In the case of an accounting error, we choose to let the user emergency withdraw anyway\r\n        if (pool.totalLocked >=  amount)\r\n            pool.totalLocked = pool.totalLocked - amount;\r\n        else\r\n            pool.totalLocked = 0;\r\n\r\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\r\n    }\r\n\r\n    // Pay pending DARKSIDEs & CZDIAMONDs.\r\n    function payPendingCZDiamondDarkside(uint256 _pid) internal {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n\r\n        uint256 darksidePending = ((user.amount * pool.accDarksidePerShare) / 1e24) - user.darksideRewardDebt;\r\n        uint256 CZDiamondPending = ((user.amount * pool.accCZDiamondPerShare) / 1e24) - user.CZDiamondRewardDebt;\r\n\r\n        if (darksidePending > 0) {\r\n            // burn founders darkside harvest, without triggering CZD re-mint distro.\r\n            if (isFounder(msg.sender))\r\n                safeTokenDarksideBurn(darksidePending);\r\n            else {\r\n                // send rewards\r\n                safeTokenTransfer(address(darkside), msg.sender, darksidePending);\r\n                payReferralCommission(msg.sender, darksidePending);\r\n            }\r\n        }\r\n        if (CZDiamondPending > 0) {\r\n            // send rewards\r\n            if (isFounder(msg.sender))\r\n                safeTokenTransfer(address(CZDiamond), BURN_ADDRESS, CZDiamondPending);\r\n            else\r\n                safeTokenTransfer(address(CZDiamond), msg.sender, CZDiamondPending);\r\n        }\r\n    }\r\n\r\n    // Pay pending USDC from the CZDiamond staking reward scheme.\r\n    function payPendingUSDCReward() internal {\r\n        UserInfo storage user = userInfo[0][msg.sender];\r\n\r\n        uint256 usdcPending = ((user.amount * accDepositUSDCRewardPerShare) / 1e24) - user.usdcRewardDebt;\r\n\r\n        if (usdcPending > 0) {\r\n            // send rewards\r\n            CZDiamond.transferUSDCToUser(msg.sender, usdcPending);\r\n        }\r\n    }\r\n\r\n    // Safe token transfer function, just in case if rounding error causes pool to not have enough DARKSIDEs.\r\n    function safeTokenDarksideBurn(uint256 _amount) internal {\r\n        uint256 darksideBalance = darkside.balanceOf(address(this));\r\n        if (_amount > darksideBalance) {\r\n            darkside.burn(darksideBalance);\r\n        } else {\r\n            darkside.burn(_amount);\r\n        }\r\n    }\r\n\r\n    // Safe token transfer function, just in case if rounding error causes pool to not have enough DARKSIDEs.\r\n    function safeTokenTransfer(address token, address _to, uint256 _amount) internal {\r\n        uint256 tokenBal = IERC20(token).balanceOf(address(this));\r\n        if (_amount > tokenBal) {\r\n            IERC20(token).safeTransfer(_to, tokenBal);\r\n        } else {\r\n            IERC20(token).safeTransfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n    // To receive MATIC from depositers when depositing NFTs\r\n    receive() external payable {}\r\n\r\n    // Update the darkside referral contract address by the owner\r\n    function setDarksideReferral(IDarksideReferral _darksideReferral) external onlyOwner {\r\n        require(address(_darksideReferral) != address(0), \"!0 address\");\r\n        require(address(darksideReferral) == address(0), \"!unset\");\r\n        darksideReferral = _darksideReferral;\r\n\r\n        emit SetDarksideReferral(address(darksideReferral));\r\n    }\r\n\r\n    // Pay referral commission to the referrer who referred this user.\r\n    function payReferralCommission(address _user, uint256 _pending) internal {\r\n        if (address(darksideReferral) != address(0) && referralCommissionRate > 0) {\r\n            address referrer = darksideReferral.getReferrer(_user);\r\n            uint256 commissionAmount = ((_pending * referralCommissionRate) / 10000);\r\n\r\n            if (referrer != address(0) && commissionAmount > 0) {\r\n                darkside.mint(referrer, commissionAmount / 2);\r\n                darkside.mint(_user, commissionAmount - (commissionAmount / 2));\r\n                darksideReferral.recordReferralCommission(referrer, commissionAmount);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/presale/L3ArcSwap.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract L3ArcSwap is Ownable, ReentrancyGuard {\r\n\r\n    address public constant feeAddress = 0x3a1D1114269d7a786C154FE5278bF5b1e3e20d31;\r\n\r\n    address public constant arcadiumAddress = 0x3F374ed3C8e61A0d250f275609be2219005c021e;\r\n    address public immutable preCZDiamondAddress;\r\n    address public immutable preDarksideAddress;\r\n\r\n    uint256 public constant arcSwapPresaleSize = 834686 * (10 ** 18);\r\n\r\n    uint256 public preCZDiamondSaleINVPriceE35 = 1543664 * (10 ** 27);\r\n    uint256 public preDarksideSaleINVPriceE35 = 12863864 * (10 ** 27);\r\n\r\n    uint256 public preCZDiamondMaximumAvailable = (arcSwapPresaleSize * preCZDiamondSaleINVPriceE35) / 1e35;\r\n    uint256 public preDarksideMaximumAvailable = (arcSwapPresaleSize * preDarksideSaleINVPriceE35) / 1e35;\r\n\r\n    // We use a counter to defend against people sending pre{CZDiamond,Darkside} back\r\n    uint256 public preCZDiamondRemaining = preCZDiamondMaximumAvailable;\r\n    uint256 public preDarksideRemaining = preDarksideMaximumAvailable;\r\n\r\n    uint256 public constant oneHourMatic = 1500;\r\n    uint256 public constant presaleDuration = 71999;\r\n\r\n    uint256 public startBlock;\r\n    uint256 public endBlock = startBlock + presaleDuration;\r\n\r\n    event PrePurchased(address sender, uint256 arcadiumSpent, uint256 preCZDiamondReceived, uint256 preDarksideReceived);\r\n    event RetrieveDepreciatedArcTokens(address feeAddress, uint256 tokenAmount);\r\n    event SaleINVPricesE35Changed(uint256 newCZDiamondSaleINVPriceE35, uint256 newDarksideSaleINVPriceE35);\r\n    event StartBlockChanged(uint256 newStartBlock, uint256 newEndBlock);\r\n\r\n    constructor(uint256 _startBlock, address _preCZDiamondAddress, address _preDarksideAddress) {\r\n        require(block.number < _startBlock, \"cannot set start block in the past!\");\r\n        require(arcadiumAddress != _preCZDiamondAddress, \"arcadiumAddress cannot be equal to preCZDiamond\");\r\n        require(_preCZDiamondAddress != _preDarksideAddress, \"preCZDiamond cannot be equal to preDarkside\");\r\n        require(_preCZDiamondAddress != address(0), \"_preCZDiamondAddress cannot be the zero address\");\r\n        require(_preDarksideAddress != address(0), \"_preDarksideAddress cannot be the zero address\");\r\n\r\n        startBlock = _startBlock;\r\n        endBlock   = _startBlock + presaleDuration;\r\n\r\n        preCZDiamondAddress = _preCZDiamondAddress;\r\n        preDarksideAddress = _preDarksideAddress;\r\n    }\r\n\r\n    function swapArcForPresaleTokensL3(uint256 arcadiumToSwap) external nonReentrant {\r\n        require(msg.sender != feeAddress, \"fee address cannot partake in presale\");\r\n        require(block.number >= startBlock, \"presale hasn't started yet, good things come to those that wait\");\r\n        require(block.number < endBlock, \"presale has ended, come back next time!\");\r\n        require(preCZDiamondRemaining > 0 && preDarksideRemaining > 0, \"No more presale tokens remaining! Come back next time!\");\r\n        require(IERC20(preCZDiamondAddress).balanceOf(address(this)) > 0, \"No more PreCZDiamond left! Come back next time!\");\r\n        require(IERC20(preDarksideAddress).balanceOf(address(this)) > 0, \"No more PreDarkside left! Come back next time!\");\r\n        require(arcadiumToSwap > 1e6, \"not enough arcadium provided\");\r\n\r\n        uint256 originalPreCZDiamondAmount = (arcadiumToSwap * preCZDiamondSaleINVPriceE35) / 1e35;\r\n        uint256 originalPreDarksideAmount = (arcadiumToSwap * preDarksideSaleINVPriceE35) / 1e35;\r\n\r\n        uint256 preCZDiamondPurchaseAmount = originalPreCZDiamondAmount;\r\n        uint256 preDarksidePurchaseAmount = originalPreDarksideAmount;\r\n\r\n        // if we dont have enough left, give them the rest.\r\n        if (preCZDiamondRemaining < preCZDiamondPurchaseAmount)\r\n            preCZDiamondPurchaseAmount = preCZDiamondRemaining;\r\n\r\n        if (preDarksideRemaining < preDarksidePurchaseAmount)\r\n            preDarksidePurchaseAmount = preDarksideRemaining;\r\n\r\n\r\n        require(preCZDiamondPurchaseAmount > 0, \"user cannot purchase 0 preCZDiamond\");\r\n        require(preDarksidePurchaseAmount > 0, \"user cannot purchase 0 preDarkside\");\r\n\r\n        // shouldn't be possible to fail these asserts.\r\n        assert(preCZDiamondPurchaseAmount <= preCZDiamondRemaining);\r\n        assert(preCZDiamondPurchaseAmount <= IERC20(preCZDiamondAddress).balanceOf(address(this)));\r\n\r\n        assert(preDarksidePurchaseAmount <= preDarksideRemaining);\r\n        assert(preDarksidePurchaseAmount <= IERC20(preDarksideAddress).balanceOf(address(this)));\r\n\r\n\r\n        require(IERC20(preCZDiamondAddress).transfer(msg.sender, preCZDiamondPurchaseAmount), \"failed sending preCZDiamond\");\r\n        require(IERC20(preDarksideAddress).transfer(msg.sender, preDarksidePurchaseAmount), \"failed sending preDarkside\");\r\n\r\n        preCZDiamondRemaining = preCZDiamondRemaining - preCZDiamondPurchaseAmount;\r\n        preDarksideRemaining = preDarksideRemaining - preDarksidePurchaseAmount;\r\n\r\n        require(IERC20(arcadiumAddress).transferFrom(msg.sender, address(this), arcadiumToSwap), \"failed to collect arcadium from user\");\r\n\r\n        emit PrePurchased(msg.sender, arcadiumToSwap, preCZDiamondPurchaseAmount, preDarksidePurchaseAmount);\r\n    }\r\n\r\n\r\n    function sendDepreciatedArcToFeeAddress() external onlyOwner {\r\n        require(block.number > endBlock, \"can only retrieve excess tokens after arcadium swap has ended\");\r\n\r\n        uint256 arcadiumInContract = IERC20(arcadiumAddress).balanceOf(address(this));\r\n\r\n        if (arcadiumInContract > 0)\r\n            IERC20(arcadiumAddress).transfer(feeAddress, arcadiumInContract);\r\n\r\n        emit RetrieveDepreciatedArcTokens(feeAddress, arcadiumInContract);\r\n    }\r\n\r\n    function setSaleINVPriceE35(uint256 _newPreCZDiamondSaleINVPriceE35, uint256 _newPreDarksideSaleINVPriceE35) external onlyOwner {\r\n        require(block.number < startBlock - (oneHourMatic * 4), \"cannot change price 4 hours before start block\");\r\n        require(_newPreCZDiamondSaleINVPriceE35 >= 1 * (10 ** 32), \"new CZD price is to high!\");\r\n        require(_newPreCZDiamondSaleINVPriceE35 <= 1 * (10 ** 34), \"new CZD price is too low!\");\r\n\r\n        require(_newPreDarksideSaleINVPriceE35 >= 9 * (10 ** 32), \"new Darkside price is to high!\");\r\n        require(_newPreDarksideSaleINVPriceE35 <= 9 * (10 ** 34), \"new Darkside price is too low!\");\r\n\r\n        preCZDiamondSaleINVPriceE35 = _newPreCZDiamondSaleINVPriceE35;\r\n        preDarksideSaleINVPriceE35 = _newPreDarksideSaleINVPriceE35;\r\n\r\n        preCZDiamondMaximumAvailable = (arcSwapPresaleSize * preCZDiamondSaleINVPriceE35) / 1e35;\r\n        preDarksideMaximumAvailable  = (arcSwapPresaleSize * preDarksideSaleINVPriceE35) / 1e35;\r\n\r\n        preCZDiamondRemaining = preCZDiamondMaximumAvailable;\r\n        preDarksideRemaining = preDarksideMaximumAvailable;\r\n\r\n        emit SaleINVPricesE35Changed(preCZDiamondSaleINVPriceE35, preDarksideSaleINVPriceE35);\r\n    }\r\n\r\n    function setStartBlock(uint256 _newStartBlock) external onlyOwner {\r\n        require(block.number < startBlock, \"cannot change start block if sale has already commenced\");\r\n        require(block.number < _newStartBlock, \"cannot set start block in the past\");\r\n        startBlock = _newStartBlock;\r\n        endBlock   = _newStartBlock + presaleDuration;\r\n\r\n        emit StartBlockChanged(_newStartBlock, endBlock);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/presale/L3MFSwap.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract L3MFSwap is Ownable, ReentrancyGuard {\r\n\r\n    address public constant feeAddress = 0x3a1D1114269d7a786C154FE5278bF5b1e3e20d31;\r\n\r\n    address public constant myFriendsAddress = 0xa509Da749745Ac07E9Ae47E7a092eAd2648B47f2;\r\n    address public immutable preCZDiamondAddress;\r\n    address public immutable preDarksideAddress;\r\n\r\n    uint256 public constant mfSwapPresaleSize = 66800 * (10 ** 18);\r\n\r\n    uint256 public preCZDiamondSaleINVPriceE35 = 25621640 * (10 ** 27);\r\n    uint256 public preDarksideSaleINVPriceE35 = 213513666 * (10 ** 27);\r\n\r\n    uint256 public preCZDiamondMaximumAvailable = (mfSwapPresaleSize * preCZDiamondSaleINVPriceE35) / 1e35;\r\n    uint256 public preDarksideMaximumAvailable = (mfSwapPresaleSize * preDarksideSaleINVPriceE35) / 1e35;\r\n\r\n    // We use a counter to defend against people sending pre{CZDiamond,Darkside} back\r\n    uint256 public preCZDiamondRemaining = preCZDiamondMaximumAvailable;\r\n    uint256 public preDarksideRemaining = preDarksideMaximumAvailable;\r\n\r\n    uint256 public constant oneHourMatic = 1500;\r\n    uint256 public constant presaleDuration = 71999;\r\n\r\n    uint256 public startBlock;\r\n    uint256 public endBlock = startBlock + presaleDuration;\r\n\r\n    event PrePurchased(address sender, uint256 myFriendsSpent, uint256 preCZDiamondReceived, uint256 preDarksideReceived);\r\n    event RetrieveDepreciatedMFTokens(address feeAddress, uint256 tokenAmount);\r\n    event SaleINVPricesE35Changed(uint256 newCZDiamondSaleINVPriceE35, uint256 newDarksideSaleINVPriceE35);\r\n    event StartBlockChanged(uint256 newStartBlock, uint256 newEndBlock);\r\n\r\n    constructor(uint256 _startBlock, address _preCZDiamondAddress, address _preDarksideAddress) {\r\n        require(block.number < _startBlock, \"cannot set start block in the past!\");\r\n        require(myFriendsAddress != _preCZDiamondAddress, \"myFriendsAddress cannot be equal to preCZDiamond\");\r\n        require(_preCZDiamondAddress != _preDarksideAddress, \"preCZDiamond cannot be equal to preDarkside\");\r\n        require(_preCZDiamondAddress != address(0), \"_preCZDiamondAddress cannot be the zero address\");\r\n        require(_preDarksideAddress != address(0), \"_preDarksideAddress cannot be the zero address\");\r\n\r\n        startBlock = _startBlock;\r\n        endBlock   = _startBlock + presaleDuration;\r\n\r\n        preCZDiamondAddress = _preCZDiamondAddress;\r\n        preDarksideAddress = _preDarksideAddress;\r\n    }\r\n\r\n    function swapMFForPresaleTokensL3(uint256 myFriendsToSwap) external nonReentrant {\r\n        require(msg.sender != feeAddress, \"fee address cannot partake in presale\");\r\n        require(block.number >= startBlock, \"presale hasn't started yet, good things come to those that wait\");\r\n        require(block.number < endBlock, \"presale has ended, come back next time!\");\r\n        require(preCZDiamondRemaining > 0 && preDarksideRemaining > 0, \"No more presale tokens remaining! Come back next time!\");\r\n        require(IERC20(preCZDiamondAddress).balanceOf(address(this)) > 0, \"No more PreCZDiamond left! Come back next time!\");\r\n        require(IERC20(preDarksideAddress).balanceOf(address(this)) > 0, \"No more PreDarkside left! Come back next time!\");\r\n        require(myFriendsToSwap > 1e6, \"not enough MyFriends provided\");\r\n\r\n        uint256 originalPreCZDiamondAmount = (myFriendsToSwap * preCZDiamondSaleINVPriceE35) / 1e35;\r\n        uint256 originalPreDarksideAmount = (myFriendsToSwap * preDarksideSaleINVPriceE35) / 1e35;\r\n\r\n        uint256 preCZDiamondPurchaseAmount = originalPreCZDiamondAmount;\r\n        uint256 preDarksidePurchaseAmount = originalPreDarksideAmount;\r\n\r\n        // if we dont have enough left, give them the rest.\r\n        if (preCZDiamondRemaining < preCZDiamondPurchaseAmount)\r\n            preCZDiamondPurchaseAmount = preCZDiamondRemaining;\r\n\r\n        if (preDarksideRemaining < preDarksidePurchaseAmount)\r\n            preDarksidePurchaseAmount = preDarksideRemaining;\r\n\r\n\r\n        require(preCZDiamondPurchaseAmount > 0, \"user cannot purchase 0 preCZDiamond\");\r\n        require(preDarksidePurchaseAmount > 0, \"user cannot purchase 0 preDarkside\");\r\n\r\n        // shouldn't be possible to fail these asserts.\r\n        assert(preCZDiamondPurchaseAmount <= preCZDiamondRemaining);\r\n        assert(preCZDiamondPurchaseAmount <= IERC20(preCZDiamondAddress).balanceOf(address(this)));\r\n\r\n        assert(preDarksidePurchaseAmount <= preDarksideRemaining);\r\n        assert(preDarksidePurchaseAmount <= IERC20(preDarksideAddress).balanceOf(address(this)));\r\n\r\n\r\n        require(IERC20(preCZDiamondAddress).transfer(msg.sender, preCZDiamondPurchaseAmount), \"failed sending preCZDiamond\");\r\n        require(IERC20(preDarksideAddress).transfer(msg.sender, preDarksidePurchaseAmount), \"failed sending preDarkside\");\r\n\r\n        preCZDiamondRemaining = preCZDiamondRemaining - preCZDiamondPurchaseAmount;\r\n        preDarksideRemaining = preDarksideRemaining - preDarksidePurchaseAmount;\r\n\r\n        require(IERC20(myFriendsAddress).transferFrom(msg.sender, address(this), myFriendsToSwap), \"failed to collect myFriends from user\");\r\n\r\n        emit PrePurchased(msg.sender, myFriendsToSwap, preCZDiamondPurchaseAmount, preDarksidePurchaseAmount);\r\n    }\r\n\r\n\r\n    function sendDepreciatedMFToFeeAddress() external onlyOwner {\r\n        require(block.number > endBlock, \"can only retrieve excess tokens after myfriends swap has ended\");\r\n\r\n        uint256 myFriendsInContract = IERC20(myFriendsAddress).balanceOf(address(this));\r\n\r\n        if (myFriendsInContract > 0)\r\n            IERC20(myFriendsAddress).transfer(feeAddress, myFriendsInContract);\r\n\r\n        emit RetrieveDepreciatedMFTokens(feeAddress, myFriendsInContract);\r\n    }\r\n\r\n    function setSaleINVPriceE35(uint256 _newPreCZDiamondSaleINVPriceE35, uint256 _newPreDarksideSaleINVPriceE35) external onlyOwner {\r\n        require(block.number < startBlock - (oneHourMatic * 4), \"cannot change price 4 hours before start block\");\r\n        require(_newPreCZDiamondSaleINVPriceE35 >= 2 * (10 ** 33), \"new myfriends price is to high!\");\r\n        require(_newPreCZDiamondSaleINVPriceE35 <= 28 * (10 ** 34), \"new myfriends price is too low!\");\r\n\r\n        require(_newPreDarksideSaleINVPriceE35 >= 2 * (10 ** 34), \"new darkside price is to high!\");\r\n        require(_newPreDarksideSaleINVPriceE35 <= 23 * (10 ** 35), \"new darkside price is too low!\");\r\n\r\n        preCZDiamondSaleINVPriceE35 = _newPreCZDiamondSaleINVPriceE35;\r\n        preDarksideSaleINVPriceE35 = _newPreDarksideSaleINVPriceE35;\r\n\r\n        preCZDiamondMaximumAvailable = (mfSwapPresaleSize * preCZDiamondSaleINVPriceE35) / 1e35;\r\n        preDarksideMaximumAvailable  = (mfSwapPresaleSize * preDarksideSaleINVPriceE35) / 1e35;\r\n\r\n        preCZDiamondRemaining = preCZDiamondMaximumAvailable;\r\n        preDarksideRemaining = preDarksideMaximumAvailable;\r\n\r\n        emit SaleINVPricesE35Changed(preCZDiamondSaleINVPriceE35, preDarksideSaleINVPriceE35);\r\n    }\r\n\r\n    function setStartBlock(uint256 _newStartBlock) external onlyOwner {\r\n        require(block.number < startBlock, \"cannot change start block if sale has already commenced\");\r\n        require(block.number < _newStartBlock, \"cannot set start block in the past\");\r\n        startBlock = _newStartBlock;\r\n        endBlock   = _newStartBlock + presaleDuration;\r\n\r\n        emit StartBlockChanged(_newStartBlock, endBlock);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/presale/L3TokenRedeem.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ncontract L3TokenRedeem is Ownable, ReentrancyGuard {\r\n\r\n    address public constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    address public constant feeAddress = 0x3a1D1114269d7a786C154FE5278bF5b1e3e20d31;\r\n\r\n    address public immutable preCZDiamond;\r\n    address public immutable preDarksideAddress;\r\n\r\n    address public immutable CZDiamondAddress;\r\n    address public immutable darksideAddress;\r\n\r\n    L3ArcSwap public immutable l3ArcSwap;\r\n    L3MFSwap public immutable l3MFSwap;\r\n\r\n    uint256 public startBlock;\r\n\r\n    bool public hasRetrievedUnsoldPresale = false;\r\n\r\n    event CZDiamondSwap(address sender, uint256 amount);\r\n    event DarksideSwap(address sender, uint256 amount);\r\n    event RetrieveUnclaimedTokens(uint256 CZDiamondAmount, uint256 Darksidemount);\r\n    event StartBlockChanged(uint256 newStartBlock);\r\n\r\n    constructor(uint256 _startBlock, L3ArcSwap _l3ArcSwap, L3MFSwap _l3MFSwap, address _preCZDiamondAddress, address _preDarksideAddress, address _CZDiamondAddress, address _darksideAddress) {\r\n        require(block.number < _startBlock, \"cannot set start block in the past!\");\r\n        require(_preCZDiamondAddress != _preDarksideAddress, \"preCZDiamond cannot be equal to preDarkside\");\r\n        require(_CZDiamondAddress != _darksideAddress, \"preCZDiamond cannot be equal to preDarkside\");\r\n        require(_preCZDiamondAddress != address(0), \"_preCZDiamondAddress cannot be the zero address\");\r\n        require(_CZDiamondAddress != address(0), \"_CZDiamondAddress cannot be the zero address\");\r\n\r\n        startBlock = _startBlock;\r\n\r\n        l3ArcSwap = _l3ArcSwap;\r\n        l3MFSwap = _l3MFSwap;\r\n\r\n        preCZDiamond = _preCZDiamondAddress;\r\n        preDarksideAddress = _preDarksideAddress;\r\n        CZDiamondAddress = _CZDiamondAddress;\r\n        darksideAddress = _darksideAddress;\r\n    }\r\n\r\n    function swapPreCZDiamondForCZDiamond(uint256 CZDiamondSwapAmount) external nonReentrant {\r\n        require(block.number >= startBlock, \"token redemption hasn't started yet, good things come to those that wait\");\r\n        require(IERC20(CZDiamondAddress).balanceOf(address(this)) >= CZDiamondSwapAmount, \"Not Enough tokens in contract for swap\");\r\n\r\n        IERC20(preCZDiamond).transferFrom(msg.sender, BURN_ADDRESS, CZDiamondSwapAmount);\r\n        IERC20(CZDiamondAddress).transfer(msg.sender, CZDiamondSwapAmount);\r\n\r\n        emit CZDiamondSwap(msg.sender, CZDiamondSwapAmount);\r\n    }\r\n\r\n    function swapPreDarksideForDarkside(uint256 darksideSwapAmount) external nonReentrant {\r\n        require(block.number >= startBlock, \"token redemption hasn't started yet, good things come to those that wait\");\r\n        require(IERC20(darksideAddress).balanceOf(address(this)) >= darksideSwapAmount, \"Not Enough tokens in contract for swap\");\r\n\r\n        IERC20(preDarksideAddress).transferFrom(msg.sender, BURN_ADDRESS, darksideSwapAmount);\r\n        IERC20(darksideAddress).transfer(msg.sender, darksideSwapAmount);\r\n\r\n        emit DarksideSwap(msg.sender, darksideSwapAmount);\r\n    }\r\n\r\n    function sendUnclaimedsToFeeAddress() external onlyOwner {\r\n        require(block.number > l3ArcSwap.endBlock(), \"can only retrieve excess tokens after arc swap has ended\");\r\n        require(block.number > l3MFSwap.endBlock(), \"can only retrieve excess tokens after myfriends swap has ended\");\r\n        require(!hasRetrievedUnsoldPresale, \"can only burn unsold presale once!\");\r\n\r\n        uint256 wastedPreCZDiamondTokend = l3ArcSwap.preCZDiamondRemaining() + l3MFSwap.preCZDiamondRemaining();\r\n        uint256 wastedPreDarksideTokens = l3ArcSwap.preDarksideRemaining() + l3MFSwap.preDarksideRemaining();\r\n\r\n        require(wastedPreCZDiamondTokend <= IERC20(CZDiamondAddress).balanceOf(address(this)),\r\n            \"retreiving too much preCZDiamond, has this been setup properly?\");\r\n\r\n        require(wastedPreDarksideTokens <= IERC20(darksideAddress).balanceOf(address(this)),\r\n            \"retreiving too much preDarkside, has this been setup properly?\");\r\n\r\n        if (wastedPreCZDiamondTokend > 0)\r\n            IERC20(CZDiamondAddress).transfer(feeAddress, wastedPreCZDiamondTokend);\r\n\r\n        if (wastedPreDarksideTokens > 0)\r\n            IERC20(darksideAddress).transfer(feeAddress, wastedPreDarksideTokens);\r\n\r\n        hasRetrievedUnsoldPresale = true;\r\n\r\n        emit RetrieveUnclaimedTokens(wastedPreCZDiamondTokend, wastedPreDarksideTokens);\r\n    }\r\n\r\n    function setStartBlock(uint256 _newStartBlock) external onlyOwner {\r\n        require(block.number < startBlock, \"cannot change start block if sale has already commenced\");\r\n        require(block.number < _newStartBlock, \"cannot set start block in the past\");\r\n        startBlock = _newStartBlock;\r\n\r\n        emit StartBlockChanged(_newStartBlock);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/presale/PreCZDiamond.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n// PreCZDiamond\r\ncontract PreCZDiamond is ERC20('PCZDIAMOND', 'PCZDIAMOND') {\r\n    constructor() {\r\n        _mint(address(0x3a1D1114269d7a786C154FE5278bF5b1e3e20d31), uint256(30000 * (10 ** 18)));\r\n    }\r\n}\r\n\r\n\r\n// File contracts/presale/PreDarkside.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n// PreDarkside\r\ncontract PreDarkside is ERC20('PDARKCOIN', 'PDARK') {\r\n    constructor() {\r\n        _mint(address(0x3a1D1114269d7a786C154FE5278bF5b1e3e20d31), uint256(250000 * (10 ** 18)));\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_CZDiamond\",\"type\":\"address\"},{\"internalType\":\"contract AddLiquidityHelper\",\"name\":\"_addLiquidityHelper\",\"type\":\"address\"},{\"internalType\":\"contract DarksideToolBox\",\"name\":\"_darksideToolBox\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"darksideSwapRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"darksideSwapPair\",\"type\":\"address\"}],\"name\":\"SetDarksideRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"txnFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"extraTxnFee\",\"type\":\"uint256\"}],\"name\":\"TransferFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"fromExcluded\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"toExcluded\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"fromHasExtra\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"toHasExtra\",\"type\":\"bool\"}],\"name\":\"UpdateFeeMaps\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CZDiamond\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_TRANSFER_TAX_RATE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidityHelper\",\"outputs\":[{\"internalType\":\"contract AddLiquidityHelper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnRate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"darksideSwapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"darksideSwapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"darksideToolBox\",\"outputs\":[{\"internalType\":\"contract DarksideToolBox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeFromMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeToMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"extraFromMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"extraToMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraTransferTaxRate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDarksideAmountToLiquify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMaticAmountToLiquify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownershipIsTransferred\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"}],\"name\":\"swapDepositFeeForETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"transferOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferTaxRate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"updateDarksideSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fromExcluded\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"toExcluded\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"fromHasExtra\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"toHasExtra\",\"type\":\"bool\"}],\"name\":\"updateFeeMaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_transferTaxRate\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_extraTransferTaxRate\",\"type\":\"uint16\"}],\"name\":\"updateTransferTaxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcCurrencyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DarksideToken", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000006664c64c8582e62da861fcac33a627b0f92ff0f8000000000000000000000000a87bfce2034c40f441a0467e57d5d9ffcc40c85e000000000000000000000000c5673e4fe49378529401ca416eed321b894157c6", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2e6d60e6068ea7c50e51adce1709c01e6de6e11ec57515bb2f65b57c9268c1f0"}