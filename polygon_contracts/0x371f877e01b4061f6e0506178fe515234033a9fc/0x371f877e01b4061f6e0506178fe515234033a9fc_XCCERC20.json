{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/interfaces/EIP2612.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\n/**\\r\\n * @title EIP-2612: permit - 712-signed approvals\\r\\n *\\r\\n * @notice A function permit extending ERC-20 which allows for approvals to be made via secp256k1 signatures.\\r\\n *      This kind of \u201caccount abstraction for ERC-20\u201d brings about two main benefits:\\r\\n *        - transactions involving ERC-20 operations can be paid using the token itself rather than ETH,\\r\\n *        - approve and pull operations can happen in a single transaction instead of two consecutive transactions,\\r\\n *        - while adding as little as possible over the existing ERC-20 standard.\\r\\n *\\r\\n * @notice See https://eips.ethereum.org/EIPS/eip-2612#specification\\r\\n */\\r\\ninterface EIP2612 {\\r\\n\\t/**\\r\\n\\t * @notice EIP712 domain separator of the smart contract. It should be unique to the contract\\r\\n\\t *      and chain to prevent replay attacks from other domains, and satisfy the requirements of EIP-712,\\r\\n\\t *      but is otherwise unconstrained.\\r\\n\\t */\\r\\n\\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Counter of the nonces used for the given address; nonce are used sequentially\\r\\n\\t *\\r\\n\\t * @dev To prevent from replay attacks nonce is incremented for each address after a successful `permit` execution\\r\\n\\t *\\r\\n\\t * @param owner an address to query number of used nonces for\\r\\n\\t * @return number of used nonce, nonce number to be used next\\r\\n\\t */\\r\\n\\tfunction nonces(address owner) external view returns (uint);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice For all addresses owner, spender, uint256s value, deadline and nonce, uint8 v, bytes32 r and s,\\r\\n\\t *      a call to permit(owner, spender, value, deadline, v, r, s) will set approval[owner][spender] to value,\\r\\n\\t *      increment nonces[owner] by 1, and emit a corresponding Approval event,\\r\\n\\t *      if and only if the following conditions are met:\\r\\n\\t *        - The current blocktime is less than or equal to deadline.\\r\\n\\t *        - owner is not the zero address.\\r\\n\\t *        - nonces[owner] (before the state update) is equal to nonce.\\r\\n\\t *        - r, s and v is a valid secp256k1 signature from owner of the message:\\r\\n\\t *\\r\\n\\t * @param owner token owner address, granting an approval to spend its tokens\\r\\n\\t * @param spender an address approved by the owner (token owner)\\r\\n\\t *      to spend some tokens on its behalf\\r\\n\\t * @param value an amount of tokens spender `spender` is allowed to\\r\\n\\t *      transfer on behalf of the token owner\\r\\n\\t * @param v the recovery byte of the signature\\r\\n\\t * @param r half of the ECDSA signature pair\\r\\n\\t * @param s half of the ECDSA signature pair\\r\\n\\t */\\r\\n\\tfunction permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/EIP3009.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\n/**\\r\\n * @title EIP-3009: Transfer With Authorization\\r\\n *\\r\\n * @notice A contract interface that enables transferring of fungible assets via a signed authorization.\\r\\n *      See https://eips.ethereum.org/EIPS/eip-3009\\r\\n *      See https://eips.ethereum.org/EIPS/eip-3009#specification\\r\\n */\\r\\ninterface EIP3009 {\\r\\n\\t/**\\r\\n\\t * @dev Fired whenever the nonce gets used (ex.: `transferWithAuthorization`, `receiveWithAuthorization`)\\r\\n\\t *\\r\\n\\t * @param authorizer an address which has used the nonce\\r\\n\\t * @param nonce the nonce used\\r\\n\\t */\\r\\n\\tevent AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Fired whenever the nonce gets cancelled (ex.: `cancelAuthorization`)\\r\\n\\t *\\r\\n\\t * @dev Both `AuthorizationUsed` and `AuthorizationCanceled` imply the nonce\\r\\n\\t *      cannot be longer used, the only difference is that `AuthorizationCanceled`\\r\\n\\t *      implies no smart contract state change made (except the nonce marked as cancelled)\\r\\n\\t *\\r\\n\\t * @param authorizer an address which has cancelled the nonce\\r\\n\\t * @param nonce the nonce cancelled\\r\\n\\t */\\r\\n\\tevent AuthorizationCanceled(address indexed authorizer, bytes32 indexed nonce);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Returns the state of an authorization, more specifically\\r\\n\\t *      if the specified nonce was already used by the address specified\\r\\n\\t *\\r\\n\\t * @dev Nonces are expected to be client-side randomly generated 32-byte data\\r\\n\\t *      unique to the authorizer's address\\r\\n\\t *\\r\\n\\t * @param authorizer    Authorizer's address\\r\\n\\t * @param nonce         Nonce of the authorization\\r\\n\\t * @return true if the nonce is used\\r\\n\\t */\\r\\n\\tfunction authorizationState(\\r\\n\\t\\taddress authorizer,\\r\\n\\t\\tbytes32 nonce\\r\\n\\t) external view returns (bool);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Execute a transfer with a signed authorization\\r\\n\\t *\\r\\n\\t * @param from          Payer's address (Authorizer)\\r\\n\\t * @param to            Payee's address\\r\\n\\t * @param value         Amount to be transferred\\r\\n\\t * @param validAfter    The time after which this is valid (unix time)\\r\\n\\t * @param validBefore   The time before which this is valid (unix time)\\r\\n\\t * @param nonce         Unique nonce\\r\\n\\t * @param v             v of the signature\\r\\n\\t * @param r             r of the signature\\r\\n\\t * @param s             s of the signature\\r\\n\\t */\\r\\n\\tfunction transferWithAuthorization(\\r\\n\\t\\taddress from,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint256 value,\\r\\n\\t\\tuint256 validAfter,\\r\\n\\t\\tuint256 validBefore,\\r\\n\\t\\tbytes32 nonce,\\r\\n\\t\\tuint8 v,\\r\\n\\t\\tbytes32 r,\\r\\n\\t\\tbytes32 s\\r\\n\\t) external;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Receive a transfer with a signed authorization from the payer\\r\\n\\t *\\r\\n\\t * @dev This has an additional check to ensure that the payee's address matches\\r\\n\\t *      the caller of this function to prevent front-running attacks.\\r\\n\\t * @dev See https://eips.ethereum.org/EIPS/eip-3009#security-considerations\\r\\n\\t *\\r\\n\\t * @param from          Payer's address (Authorizer)\\r\\n\\t * @param to            Payee's address\\r\\n\\t * @param value         Amount to be transferred\\r\\n\\t * @param validAfter    The time after which this is valid (unix time)\\r\\n\\t * @param validBefore   The time before which this is valid (unix time)\\r\\n\\t * @param nonce         Unique nonce\\r\\n\\t * @param v             v of the signature\\r\\n\\t * @param r             r of the signature\\r\\n\\t * @param s             s of the signature\\r\\n\\t */\\r\\n\\tfunction receiveWithAuthorization(\\r\\n\\t\\taddress from,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint256 value,\\r\\n\\t\\tuint256 validAfter,\\r\\n\\t\\tuint256 validBefore,\\r\\n\\t\\tbytes32 nonce,\\r\\n\\t\\tuint8 v,\\r\\n\\t\\tbytes32 r,\\r\\n\\t\\tbytes32 s\\r\\n\\t) external;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Attempt to cancel an authorization\\r\\n\\t *\\r\\n\\t * @param authorizer    Authorizer's address\\r\\n\\t * @param nonce         Nonce of the authorization\\r\\n\\t * @param v             v of the signature\\r\\n\\t * @param r             r of the signature\\r\\n\\t * @param s             s of the signature\\r\\n\\t */\\r\\n\\tfunction cancelAuthorization(\\r\\n\\t\\taddress authorizer,\\r\\n\\t\\tbytes32 nonce,\\r\\n\\t\\tuint8 v,\\r\\n\\t\\tbytes32 r,\\r\\n\\t\\tbytes32 s\\r\\n\\t) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ERC1363Spec.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"./ERC20Spec.sol\\\";\\r\\nimport \\\"./ERC165Spec.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC1363 Interface\\r\\n *\\r\\n * @dev Interface defining a ERC1363 Payable Token contract.\\r\\n *      Implementing contracts MUST implement the ERC1363 interface as well as the ERC20 and ERC165 interfaces.\\r\\n */\\r\\ninterface ERC1363 is ERC20, ERC165  {\\r\\n\\t/*\\r\\n\\t * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\r\\n\\t * 0xb0202a11 ===\\r\\n\\t *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\r\\n\\t *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\r\\n\\t *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\r\\n\\t *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\r\\n\\t *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\r\\n\\t *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\r\\n\\t */\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\\r\\n\\t * @param to address The address which you want to transfer to\\r\\n\\t * @param value uint256 The amount of tokens to be transferred\\r\\n\\t * @return true unless throwing\\r\\n\\t */\\r\\n\\tfunction transferAndCall(address to, uint256 value) external returns (bool);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\\r\\n\\t * @param to address The address which you want to transfer to\\r\\n\\t * @param value uint256 The amount of tokens to be transferred\\r\\n\\t * @param data bytes Additional data with no specified format, sent in call to `to`\\r\\n\\t * @return true unless throwing\\r\\n\\t */\\r\\n\\tfunction transferAndCall(address to, uint256 value, bytes memory data) external returns (bool);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Transfer tokens from one address to another and then call `onTransferReceived` on receiver\\r\\n\\t * @param from address The address which you want to send tokens from\\r\\n\\t * @param to address The address which you want to transfer to\\r\\n\\t * @param value uint256 The amount of tokens to be transferred\\r\\n\\t * @return true unless throwing\\r\\n\\t */\\r\\n\\tfunction transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\r\\n\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Transfer tokens from one address to another and then call `onTransferReceived` on receiver\\r\\n\\t * @param from address The address which you want to send tokens from\\r\\n\\t * @param to address The address which you want to transfer to\\r\\n\\t * @param value uint256 The amount of tokens to be transferred\\r\\n\\t * @param data bytes Additional data with no specified format, sent in call to `to`\\r\\n\\t * @return true unless throwing\\r\\n\\t */\\r\\n\\tfunction transferFromAndCall(address from, address to, uint256 value, bytes memory data) external returns (bool);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\\r\\n\\t * and then call `onApprovalReceived` on spender.\\r\\n\\t * @param spender address The address which will spend the funds\\r\\n\\t * @param value uint256 The amount of tokens to be spent\\r\\n\\t */\\r\\n\\tfunction approveAndCall(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\\r\\n\\t * and then call `onApprovalReceived` on spender.\\r\\n\\t * @param spender address The address which will spend the funds\\r\\n\\t * @param value uint256 The amount of tokens to be spent\\r\\n\\t * @param data bytes Additional data with no specified format, sent in call to `spender`\\r\\n\\t */\\r\\n\\tfunction approveAndCall(address spender, uint256 value, bytes memory data) external returns (bool);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title ERC1363Receiver Interface\\r\\n *\\r\\n * @dev Interface for any contract that wants to support `transferAndCall` or `transferFromAndCall`\\r\\n *      from ERC1363 token contracts.\\r\\n */\\r\\ninterface ERC1363Receiver {\\r\\n\\t/*\\r\\n\\t * Note: the ERC-165 identifier for this interface is 0x88a7ca5c.\\r\\n\\t * 0x88a7ca5c === bytes4(keccak256(\\\"onTransferReceived(address,address,uint256,bytes)\\\"))\\r\\n\\t */\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Handle the receipt of ERC1363 tokens\\r\\n\\t *\\r\\n\\t * @dev Any ERC1363 smart contract calls this function on the recipient\\r\\n\\t *      after a `transfer` or a `transferFrom`. This function MAY throw to revert and reject the\\r\\n\\t *      transfer. Return of other than the magic value MUST result in the\\r\\n\\t *      transaction being reverted.\\r\\n\\t *      Note: the token contract address is always the message sender.\\r\\n\\t *\\r\\n\\t * @param operator address The address which called `transferAndCall` or `transferFromAndCall` function\\r\\n\\t * @param from address The address which are token transferred from\\r\\n\\t * @param value uint256 The amount of tokens transferred\\r\\n\\t * @param data bytes Additional data with no specified format\\r\\n\\t * @return `bytes4(keccak256(\\\"onTransferReceived(address,address,uint256,bytes)\\\"))`\\r\\n\\t *      unless throwing\\r\\n\\t */\\r\\n\\tfunction onTransferReceived(address operator, address from, uint256 value, bytes memory data) external returns (bytes4);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title ERC1363Spender Interface\\r\\n *\\r\\n * @dev Interface for any contract that wants to support `approveAndCall`\\r\\n *      from ERC1363 token contracts.\\r\\n */\\r\\ninterface ERC1363Spender {\\r\\n\\t/*\\r\\n\\t * Note: the ERC-165 identifier for this interface is 0x7b04a2d0.\\r\\n\\t * 0x7b04a2d0 === bytes4(keccak256(\\\"onApprovalReceived(address,uint256,bytes)\\\"))\\r\\n\\t */\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Handle the approval of ERC1363 tokens\\r\\n\\t *\\r\\n\\t * @dev Any ERC1363 smart contract calls this function on the recipient\\r\\n\\t *      after an `approve`. This function MAY throw to revert and reject the\\r\\n\\t *      approval. Return of other than the magic value MUST result in the\\r\\n\\t *      transaction being reverted.\\r\\n\\t *      Note: the token contract address is always the message sender.\\r\\n\\t *\\r\\n\\t * @param owner address The address which called `approveAndCall` function\\r\\n\\t * @param value uint256 The amount of tokens to be spent\\r\\n\\t * @param data bytes Additional data with no specified format\\r\\n\\t * @return `bytes4(keccak256(\\\"onApprovalReceived(address,uint256,bytes)\\\"))`\\r\\n\\t *      unless throwing\\r\\n\\t */\\r\\n\\tfunction onApprovalReceived(address owner, uint256 value, bytes memory data) external returns (bytes4);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ERC165Spec.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\n/**\\r\\n * @title ERC-165 Standard Interface Detection\\r\\n *\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n *       https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * @dev Implementers can declare support of contract interfaces,\\r\\n *      which can then be queried by others.\\r\\n *\\r\\n * @author Christian Reitwie\u00dfner, Nick Johnson, Fabian Vogelsteller, Jordi Baylina, Konrad Feldmeier, William Entriken\\r\\n */\\r\\ninterface ERC165 {\\r\\n\\t/**\\r\\n\\t * @notice Query if a contract implements an interface\\r\\n\\t *\\r\\n\\t * @dev Interface identification is specified in ERC-165.\\r\\n\\t *      This function uses less than 30,000 gas.\\r\\n\\t *\\r\\n\\t * @param interfaceID The interface identifier, as specified in ERC-165\\r\\n\\t * @return `true` if the contract implements `interfaceID` and\\r\\n\\t *      `interfaceID` is not 0xffffffff, `false` otherwise\\r\\n\\t */\\r\\n\\tfunction supportsInterface(bytes4 interfaceID) external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ERC20Spec.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\n/**\\r\\n * @title EIP-20: ERC-20 Token Standard\\r\\n *\\r\\n * @notice The ERC-20 (Ethereum Request for Comments 20), proposed by Fabian Vogelsteller in November 2015,\\r\\n *      is a Token Standard that implements an API for tokens within Smart Contracts.\\r\\n *\\r\\n * @notice It provides functionalities like to transfer tokens from one account to another,\\r\\n *      to get the current token balance of an account and also the total supply of the token available on the network.\\r\\n *      Besides these it also has some other functionalities like to approve that an amount of\\r\\n *      token from an account can be spent by a third party account.\\r\\n *\\r\\n * @notice If a Smart Contract implements the following methods and events it can be called an ERC-20 Token\\r\\n *      Contract and, once deployed, it will be responsible to keep track of the created tokens on Ethereum.\\r\\n *\\r\\n * @notice See https://ethereum.org/en/developers/docs/standards/tokens/erc-20/\\r\\n * @notice See https://eips.ethereum.org/EIPS/eip-20\\r\\n */\\r\\ninterface ERC20 {\\r\\n\\t/**\\r\\n\\t * @dev Fired in transfer(), transferFrom() to indicate that token transfer happened\\r\\n\\t *\\r\\n\\t * @param from an address tokens were consumed from\\r\\n\\t * @param to an address tokens were sent to\\r\\n\\t * @param value number of tokens transferred\\r\\n\\t */\\r\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Fired in approve() to indicate an approval event happened\\r\\n\\t *\\r\\n\\t * @param owner an address which granted a permission to transfer\\r\\n\\t *      tokens on its behalf\\r\\n\\t * @param spender an address which received a permission to transfer\\r\\n\\t *      tokens on behalf of the owner `_owner`\\r\\n\\t * @param value amount of tokens granted to transfer on behalf\\r\\n\\t */\\r\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n\\t/**\\r\\n\\t * @return name of the token (ex.: USD Coin)\\r\\n\\t */\\r\\n\\t// OPTIONAL - This method can be used to improve usability,\\r\\n\\t// but interfaces and other contracts MUST NOT expect these values to be present.\\r\\n\\t// function name() external view returns (string memory);\\r\\n\\r\\n\\t/**\\r\\n\\t * @return symbol of the token (ex.: USDC)\\r\\n\\t */\\r\\n\\t// OPTIONAL - This method can be used to improve usability,\\r\\n\\t// but interfaces and other contracts MUST NOT expect these values to be present.\\r\\n\\t// function symbol() external view returns (string memory);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the number of decimals used to get its user representation.\\r\\n\\t *      For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n\\t *      be displayed to a user as `5,05` (`505 / 10 ** 2`).\\r\\n\\t *\\r\\n\\t * @dev Tokens usually opt for a value of 18, imitating the relationship between\\r\\n\\t *      Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n\\t *      overridden;\\r\\n\\t *\\r\\n\\t * @dev NOTE: This information is only used for _display_ purposes: it in\\r\\n\\t *      no way affects any of the arithmetic of the contract, including\\r\\n\\t *      {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n\\t *\\r\\n\\t * @return token decimals\\r\\n\\t */\\r\\n\\t// OPTIONAL - This method can be used to improve usability,\\r\\n\\t// but interfaces and other contracts MUST NOT expect these values to be present.\\r\\n\\t// function decimals() external view returns (uint8);\\r\\n\\r\\n\\t/**\\r\\n\\t * @return the amount of tokens in existence\\r\\n\\t */\\r\\n\\tfunction totalSupply() external view returns (uint256);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Gets the balance of a particular address\\r\\n\\t *\\r\\n\\t * @param _owner the address to query the the balance for\\r\\n\\t * @return balance an amount of tokens owned by the address specified\\r\\n\\t */\\r\\n\\tfunction balanceOf(address _owner) external view returns (uint256 balance);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Transfers some tokens to an external address or a smart contract\\r\\n\\t *\\r\\n\\t * @dev Called by token owner (an address which has a\\r\\n\\t *      positive token balance tracked by this smart contract)\\r\\n\\t * @dev Throws on any error like\\r\\n\\t *      * insufficient token balance or\\r\\n\\t *      * incorrect `_to` address:\\r\\n\\t *          * zero address or\\r\\n\\t *          * self address or\\r\\n\\t *          * smart contract which doesn't support ERC20\\r\\n\\t *\\r\\n\\t * @param _to an address to transfer tokens to,\\r\\n\\t *      must be either an external address or a smart contract,\\r\\n\\t *      compliant with the ERC20 standard\\r\\n\\t * @param _value amount of tokens to be transferred,, zero\\r\\n\\t *      value is allowed\\r\\n\\t * @return success true on success, throws otherwise\\r\\n\\t */\\r\\n\\tfunction transfer(address _to, uint256 _value) external returns (bool success);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Transfers some tokens on behalf of address `_from' (token owner)\\r\\n\\t *      to some other address `_to`\\r\\n\\t *\\r\\n\\t * @dev Called by token owner on his own or approved address,\\r\\n\\t *      an address approved earlier by token owner to\\r\\n\\t *      transfer some amount of tokens on its behalf\\r\\n\\t * @dev Throws on any error like\\r\\n\\t *      * insufficient token balance or\\r\\n\\t *      * incorrect `_to` address:\\r\\n\\t *          * zero address or\\r\\n\\t *          * same as `_from` address (self transfer)\\r\\n\\t *          * smart contract which doesn't support ERC20\\r\\n\\t *\\r\\n\\t * @param _from token owner which approved caller (transaction sender)\\r\\n\\t *      to transfer `_value` of tokens on its behalf\\r\\n\\t * @param _to an address to transfer tokens to,\\r\\n\\t *      must be either an external address or a smart contract,\\r\\n\\t *      compliant with the ERC20 standard\\r\\n\\t * @param _value amount of tokens to be transferred,, zero\\r\\n\\t *      value is allowed\\r\\n\\t * @return success true on success, throws otherwise\\r\\n\\t */\\r\\n\\tfunction transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Approves address called `_spender` to transfer some amount\\r\\n\\t *      of tokens on behalf of the owner (transaction sender)\\r\\n\\t *\\r\\n\\t * @dev Transaction sender must not necessarily own any tokens to grant the permission\\r\\n\\t *\\r\\n\\t * @param _spender an address approved by the caller (token owner)\\r\\n\\t *      to spend some tokens on its behalf\\r\\n\\t * @param _value an amount of tokens spender `_spender` is allowed to\\r\\n\\t *      transfer on behalf of the token owner\\r\\n\\t * @return success true on success, throws otherwise\\r\\n\\t */\\r\\n\\tfunction approve(address _spender, uint256 _value) external returns (bool success);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Returns the amount which _spender is still allowed to withdraw from _owner.\\r\\n\\t *\\r\\n\\t * @dev A function to check an amount of tokens owner approved\\r\\n\\t *      to transfer on its behalf by some other address called \\\"spender\\\"\\r\\n\\t *\\r\\n\\t * @param _owner an address which approves transferring some tokens on its behalf\\r\\n\\t * @param _spender an address approved to transfer some tokens on behalf\\r\\n\\t * @return remaining an amount of tokens approved address `_spender` can transfer on behalf\\r\\n\\t *      of token owner `_owner`\\r\\n\\t */\\r\\n\\tfunction allowance(address _owner, address _spender) external view returns (uint256 remaining);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/lib/AddressUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\n/**\\r\\n * @title Address Utils\\r\\n *\\r\\n * @dev Utility library of inline functions on addresses\\r\\n *\\r\\n * @dev Copy of the Zeppelin's library:\\r\\n *      https://github.com/gnosis/openzeppelin-solidity/blob/master/contracts/AddressUtils.sol\\r\\n */\\r\\nlibrary AddressUtils {\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Checks if the target address is a contract\\r\\n\\t *\\r\\n\\t * @dev It is unsafe to assume that an address for which this function returns\\r\\n\\t *      false is an externally-owned account (EOA) and not a contract.\\r\\n\\t *\\r\\n\\t * @dev Among others, `isContract` will return false for the following\\r\\n\\t *      types of addresses:\\r\\n\\t *        - an externally-owned account\\r\\n\\t *        - a contract in construction\\r\\n\\t *        - an address where a contract will be created\\r\\n\\t *        - an address where a contract lived, but was destroyed\\r\\n\\t *\\r\\n\\t * @param addr address to check\\r\\n\\t * @return whether the target address is a contract\\r\\n\\t */\\r\\n\\tfunction isContract(address addr) internal view returns (bool) {\\r\\n\\t\\t// a variable to load `extcodesize` to\\r\\n\\t\\tuint256 size = 0;\\r\\n\\r\\n\\t\\t// XXX Currently there is no better way to check if there is a contract in an address\\r\\n\\t\\t// than to check the size of the code at that address.\\r\\n\\t\\t// See https://ethereum.stackexchange.com/a/14016/36603 for more details about how this works.\\r\\n\\t\\t// TODO: Check this again before the Serenity release, because all addresses will be contracts.\\r\\n\\t\\t// solium-disable-next-line security/no-inline-assembly\\r\\n\\t\\tassembly {\\r\\n\\t\\t\\t// retrieve the size of the code at address `addr`\\r\\n\\t\\t\\tsize := extcodesize(addr)\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// positive size indicates a smart contract address\\r\\n\\t\\treturn size > 0;\\r\\n\\t}\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/lib/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\n/**\\r\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\r\\n *\\r\\n * These functions can be used to verify that a message was signed by the holder\\r\\n * of the private keys of a given address.\\r\\n *\\r\\n * @dev Copy of the Zeppelin's library:\\r\\n *      https://github.com/OpenZeppelin/openzeppelin-contracts/blob/b0cf6fbb7a70f31527f36579ad644e1cf12fdf4e/contracts/utils/cryptography/ECDSA.sol\\r\\n */\\r\\nlibrary ECDSA {\\r\\n\\t/**\\r\\n\\t * @dev Returns the address that signed a hashed message (`hash`) with\\r\\n\\t * `signature`. This address can then be used for verification purposes.\\r\\n\\t *\\r\\n\\t * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\r\\n\\t * this function rejects them by requiring the `s` value to be in the lower\\r\\n\\t * half order, and the `v` value to be either 27 or 28.\\r\\n\\t *\\r\\n\\t * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\r\\n\\t * verification to be secure: it is possible to craft signatures that\\r\\n\\t * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\r\\n\\t * this is by receiving a hash of the original message (which may otherwise\\r\\n\\t * be too long), and then calling {toEthSignedMessageHash} on it.\\r\\n\\t *\\r\\n\\t * Documentation for signature generation:\\r\\n\\t * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\r\\n\\t * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\r\\n\\t */\\r\\n\\tfunction recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\r\\n\\t\\t// Divide the signature in r, s and v variables\\r\\n\\t\\tbytes32 r;\\r\\n\\t\\tbytes32 s;\\r\\n\\t\\tuint8 v;\\r\\n\\r\\n\\t\\t// Check the signature length\\r\\n\\t\\t// - case 65: r,s,v signature (standard)\\r\\n\\t\\t// - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\r\\n\\t\\tif (signature.length == 65) {\\r\\n\\t\\t\\t// ecrecover takes the signature parameters, and the only way to get them\\r\\n\\t\\t\\t// currently is to use assembly.\\r\\n\\t\\t\\tassembly {\\r\\n\\t\\t\\t\\tr := mload(add(signature, 0x20))\\r\\n\\t\\t\\t\\ts := mload(add(signature, 0x40))\\r\\n\\t\\t\\t\\tv := byte(0, mload(add(signature, 0x60)))\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\telse if (signature.length == 64) {\\r\\n\\t\\t\\t// ecrecover takes the signature parameters, and the only way to get them\\r\\n\\t\\t\\t// currently is to use assembly.\\r\\n\\t\\t\\tassembly {\\r\\n\\t\\t\\t\\tlet vs := mload(add(signature, 0x40))\\r\\n\\t\\t\\t\\tr := mload(add(signature, 0x20))\\r\\n\\t\\t\\t\\ts := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\r\\n\\t\\t\\t\\tv := add(shr(255, vs), 27)\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\trevert(\\\"invalid signature length\\\");\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn recover(hash, v, r, s);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Overload of {ECDSA-recover} that receives the `v`,\\r\\n\\t * `r` and `s` signature fields separately.\\r\\n\\t */\\r\\n\\tfunction recover(\\r\\n\\t\\tbytes32 hash,\\r\\n\\t\\tuint8 v,\\r\\n\\t\\tbytes32 r,\\r\\n\\t\\tbytes32 s\\r\\n\\t) internal pure returns (address) {\\r\\n\\t\\t// EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\r\\n\\t\\t// unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\r\\n\\t\\t// the valid range for s in (281): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\\r\\n\\t\\t// signatures from current libraries generate a unique signature with an s-value in the lower half order.\\r\\n\\t\\t//\\r\\n\\t\\t// If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\r\\n\\t\\t// with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\r\\n\\t\\t// vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\r\\n\\t\\t// these malleable signatures as well.\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tuint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\r\\n\\t\\t\\t\\\"invalid signature 's' value\\\"\\r\\n\\t\\t);\\r\\n\\t\\trequire(v == 27 || v == 28, \\\"invalid signature 'v' value\\\");\\r\\n\\r\\n\\t\\t// If the signature is valid (and not malleable), return the signer address\\r\\n\\t\\taddress signer = ecrecover(hash, v, r, s);\\r\\n\\t\\trequire(signer != address(0), \\\"invalid signature\\\");\\r\\n\\r\\n\\t\\treturn signer;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\r\\n\\t * produces hash corresponding to the one signed with the\\r\\n\\t * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\r\\n\\t * JSON-RPC method as part of EIP-191.\\r\\n\\t *\\r\\n\\t * See {recover}.\\r\\n\\t */\\r\\n\\tfunction toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\r\\n\\t\\t// 32 is the length in bytes of hash,\\r\\n\\t\\t// enforced by the type signature above\\r\\n\\t\\treturn keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns an Ethereum Signed Typed Data, created from a\\r\\n\\t * `domainSeparator` and a `structHash`. This produces hash corresponding\\r\\n\\t * to the one signed with the\\r\\n\\t * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\r\\n\\t * JSON-RPC method as part of EIP-712.\\r\\n\\t *\\r\\n\\t * See {recover}.\\r\\n\\t */\\r\\n\\tfunction toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\r\\n\\t\\treturn keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\r\\n\\t}\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/token/XCCERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"../interfaces/ERC1363Spec.sol\\\";\\r\\nimport \\\"../interfaces/EIP2612.sol\\\";\\r\\nimport \\\"../interfaces/EIP3009.sol\\\";\\r\\nimport \\\"../utils/AccessControl.sol\\\";\\r\\nimport \\\"../lib/AddressUtils.sol\\\";\\r\\nimport \\\"../lib/ECDSA.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title XCC-G ERC20 Token (XCC-GOLD, XCC-G)\\r\\n *\\r\\n * @notice XCC-G is the native utility token of the TreeCoin Protocol.\\r\\n *\\r\\n * @notice Token Summary:\\r\\n *      - Symbol: XCC-G\\r\\n *      - Name: XCC-GOLD\\r\\n *      - Decimals: 18\\r\\n *      - Initial/maximum total supply:  // TODO: [DEFINE]\\r\\n *      - Initial supply holder (initial holder) address: // TODO: [DEFINE]\\r\\n *\\t\\t- Mintable: XCC-G token will be mintable by Patch-Factory Contract\\r\\n *      - Burnable: existing tokens may get destroyed, total supply may decrease\\r\\n *\\r\\n * @dev Smart contract doesn't use safe math. All arithmetic operations are overflow/underflow safe.\\r\\n *      Additionally, Solidity 0.8.7 enforces overflow/underflow safety.\\r\\n *\\r\\n * @dev Reviewed\\r\\n *      ERC-20   - according to https://eips.ethereum.org/EIPS/eip-20\\r\\n *      ERC-1363 - according to https://eips.ethereum.org/EIPS/eip-1363\\r\\n *      EIP-2612 - according to https://eips.ethereum.org/EIPS/eip-2612\\r\\n *      EIP-3009 - according to https://eips.ethereum.org/EIPS/eip-3009\\r\\n *\\r\\n * @dev Reference implementations \\\"used\\\":\\r\\n *      - Atomic allowance:    https://github.com/OpenZeppelin/openzeppelin-contracts\\r\\n *      - Unlimited allowance: https://github.com/0xProject/protocol\\r\\n *                             https://github.com/OpenZeppelin/openzeppelin-contracts\\r\\n *      - ERC-1363:            https://github.com/vittominacori/erc1363-payable-token\\r\\n *      - EIP-2612:            https://github.com/Uniswap/uniswap-v2-core\\r\\n *      - EIP-3009:            https://github.com/centrehq/centre-tokens\\r\\n *                             https://github.com/CoinbaseStablecoin/eip-3009\\r\\n *      - Meta transactions:   https://github.com/0xProject/protocol\\r\\n *\\r\\n * @author Unblock Technolabs (Vijay Bhayani)\\r\\n */\\r\\ncontract XCCERC20 is ERC1363, EIP2612, EIP3009, AccessControl {\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Name of the token: XCC-GOLD\\r\\n\\t *\\r\\n\\t * @notice ERC20 name of the token (long name)\\r\\n\\t *\\r\\n\\t * @dev ERC20 `function name() public view returns (string)`\\r\\n\\t *\\r\\n\\t * @dev Field is declared public: getter name() is created when compiled,\\r\\n\\t *      it returns the name of the token.\\r\\n\\t */\\r\\n\\tstring public constant name = \\\"XCC-GOLD\\\";\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Symbol of the token: XCC-G\\r\\n\\t *\\r\\n\\t * @notice ERC20 symbol of that token (short name)\\r\\n\\t *\\r\\n\\t * @dev ERC20 `function symbol() public view returns (string)`\\r\\n\\t *\\r\\n\\t * @dev Field is declared public: getter symbol() is created when compiled,\\r\\n\\t *      it returns the symbol of the token\\r\\n\\t */\\r\\n\\tstring public constant symbol = \\\"XCC-G\\\";\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Decimals of the token: 18\\r\\n\\t *\\r\\n\\t * @dev ERC20 `function decimals() public view returns (uint8)`\\r\\n\\t *\\r\\n\\t * @dev Field is declared public: getter decimals() is created when compiled,\\r\\n\\t *      it returns the number of decimals used to get its user representation.\\r\\n\\t *      For example, if `decimals` equals `6`, a balance of `1,500,000` tokens should\\r\\n\\t *      be displayed to a user as `1,5` (`1,500,000 / 10 ** 6`).\\r\\n\\t *\\r\\n\\t * @dev NOTE: This information is only used for _display_ purposes: it in\\r\\n\\t *      no way affects any of the arithmetic of the contract, including balanceOf() and transfer().\\r\\n\\t */\\r\\n\\tuint8 public constant decimals = 18;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Total supply of the token: initially 10,000,000,000,\\r\\n\\t *      with the potential to decline over time as some tokens may get burnt but not minted\\r\\n\\t *\\r\\n\\t * @dev ERC20 `function totalSupply() public view returns (uint256)`\\r\\n\\t *\\r\\n\\t * @dev Field is declared public: getter totalSupply() is created when compiled,\\r\\n\\t *      it returns the amount of tokens in existence.\\r\\n\\t */\\r\\n\\tuint256 public override totalSupply; // is set to 10 billion * 10^18 in the constructor\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev A record of all the token balances\\r\\n\\t * @dev This mapping keeps record of all token owners:\\r\\n\\t *      owner => balance\\r\\n\\t */\\r\\n\\tmapping(address => uint256) private tokenBalances;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev A record of nonces for signing/validating signatures in EIP-2612 `permit`\\r\\n\\t *\\r\\n\\t * @dev Note: EIP2612 doesn't imply a possibility for nonce randomization like in EIP-3009\\r\\n\\t *\\r\\n\\t * @dev Maps delegate address => delegate nonce\\r\\n\\t */\\r\\n\\tmapping(address => uint256) public override nonces;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev A record of used nonces for EIP-3009 transactions\\r\\n\\t *\\r\\n\\t * @dev A record of used nonces for signing/validating signatures\\r\\n\\t *      in `delegateWithAuthorization` for every delegate\\r\\n\\t *\\r\\n\\t * @dev Maps authorizer address => nonce => true/false (used unused)\\r\\n\\t */\\r\\n\\tmapping(address => mapping(bytes32 => bool)) private usedNonces;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice A record of all the allowances to spend tokens on behalf\\r\\n\\t * @dev Maps token owner address to an address approved to spend\\r\\n\\t *      some tokens on behalf, maps approved address to that amount\\r\\n\\t * @dev owner => spender => value\\r\\n\\t */\\r\\n\\tmapping(address => mapping(address => uint256)) private transferAllowances;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Enables ERC20 transfers of the tokens\\r\\n\\t *      (transfer by the token owner himself)\\r\\n\\t * @dev Feature FEATURE_TRANSFERS must be enabled in order for\\r\\n\\t *      `transfer()` function to succeed\\r\\n\\t */\\r\\n\\tuint32 public constant FEATURE_TRANSFERS = 0x0000_0001;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Enables ERC20 transfers on behalf\\r\\n\\t *      (transfer by someone else on behalf of token owner)\\r\\n\\t * @dev Feature FEATURE_TRANSFERS_ON_BEHALF must be enabled in order for\\r\\n\\t *      `transferFrom()` function to succeed\\r\\n\\t * @dev Token owner must call `approve()` first to authorize\\r\\n\\t *      the transfer on behalf\\r\\n\\t */\\r\\n\\tuint32 public constant FEATURE_TRANSFERS_ON_BEHALF = 0x0000_0002;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Defines if the default behavior of `transfer` and `transferFrom`\\r\\n\\t *      checks if the receiver smart contract supports ERC20 tokens\\r\\n\\t * @dev When feature FEATURE_UNSAFE_TRANSFERS is enabled the transfers do not\\r\\n\\t *      check if the receiver smart contract supports ERC20 tokens,\\r\\n\\t *      i.e. `transfer` and `transferFrom` behave like `unsafeTransferFrom`\\r\\n\\t * @dev When feature FEATURE_UNSAFE_TRANSFERS is disabled (default) the transfers\\r\\n\\t *      check if the receiver smart contract supports ERC20 tokens,\\r\\n\\t *      i.e. `transfer` and `transferFrom` behave like `transferFromAndCall`\\r\\n\\t */\\r\\n\\tuint32 public constant FEATURE_UNSAFE_TRANSFERS = 0x0000_0004;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Enables token owners to burn their own tokens\\r\\n\\t *\\r\\n\\t * @dev Feature FEATURE_OWN_BURNS must be enabled in order for\\r\\n\\t *      `burn()` function to succeed when called by token owner\\r\\n\\t */\\r\\n\\tuint32 public constant FEATURE_OWN_BURNS = 0x0000_0008;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Enables approved operators to burn tokens on behalf of their owners\\r\\n\\t *\\r\\n\\t * @dev Feature FEATURE_BURNS_ON_BEHALF must be enabled in order for\\r\\n\\t *      `burn()` function to succeed when called by approved operator\\r\\n\\t */\\r\\n\\tuint32 public constant FEATURE_BURNS_ON_BEHALF = 0x0000_0010;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Enables ERC-1363 transfers with callback\\r\\n\\t * @dev Feature FEATURE_ERC1363_TRANSFERS must be enabled in order for\\r\\n\\t *      ERC-1363 `transferFromAndCall` functions to succeed\\r\\n\\t */\\r\\n\\tuint32 public constant FEATURE_ERC1363_TRANSFERS = 0x0000_0020;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Enables ERC-1363 approvals with callback\\r\\n\\t * @dev Feature FEATURE_ERC1363_APPROVALS must be enabled in order for\\r\\n\\t *      ERC-1363 `approveAndCall` functions to succeed\\r\\n\\t */\\r\\n\\tuint32 public constant FEATURE_ERC1363_APPROVALS = 0x0000_0040;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Enables approvals on behalf (EIP2612 permits\\r\\n\\t *      via an EIP712 signature)\\r\\n\\t * @dev Feature FEATURE_EIP2612_PERMITS must be enabled in order for\\r\\n\\t *      `permit()` function to succeed\\r\\n\\t */\\r\\n\\tuint32 public constant FEATURE_EIP2612_PERMITS = 0x0000_0080;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Enables meta transfers on behalf (EIP3009 transfers\\r\\n\\t *      via an EIP712 signature)\\r\\n\\t * @dev Feature FEATURE_EIP3009_TRANSFERS must be enabled in order for\\r\\n\\t *      `transferWithAuthorization()` function to succeed\\r\\n\\t */\\r\\n\\tuint32 public constant FEATURE_EIP3009_TRANSFERS = 0x0000_0100;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Enables meta transfers on behalf (EIP3009 transfers\\r\\n\\t *      via an EIP712 signature)\\r\\n\\t * @dev Feature FEATURE_EIP3009_RECEPTIONS must be enabled in order for\\r\\n\\t *      `receiveWithAuthorization()` function to succeed\\r\\n\\t */\\r\\n\\tuint32 public constant FEATURE_EIP3009_RECEPTIONS = 0x0000_0200;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Token creator is responsible for creating (minting)\\r\\n\\t *      tokens to an arbitrary address\\r\\n\\t * @dev Role ROLE_TOKEN_CREATOR allows minting tokens\\r\\n\\t *      (calling `mint` function)\\r\\n\\t */\\r\\n\\tuint32 public constant ROLE_TOKEN_CREATOR = 0x0001_0000;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Token destroyer is responsible for destroying (burning)\\r\\n\\t *      tokens owned by an arbitrary address\\r\\n\\t * @dev Role ROLE_TOKEN_DESTROYER allows burning tokens\\r\\n\\t *      (calling `burn` function)\\r\\n\\t */\\r\\n\\tuint32 public constant ROLE_TOKEN_DESTROYER = 0x0002_0000;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice ERC20 receivers are allowed to receive tokens without ERC20 safety checks,\\r\\n\\t *      which may be useful to simplify tokens transfers into \\\"legacy\\\" smart contracts\\r\\n\\t * @dev When `FEATURE_UNSAFE_TRANSFERS` is not enabled addresses having\\r\\n\\t *      `ROLE_ERC20_RECEIVER` permission are allowed to receive tokens\\r\\n\\t *      via `transfer` and `transferFrom` functions in the same way they\\r\\n\\t *      would via `unsafeTransferFrom` function\\r\\n\\t * @dev When `FEATURE_UNSAFE_TRANSFERS` is enabled `ROLE_ERC20_RECEIVER` permission\\r\\n\\t *      doesn't affect the transfer behaviour since\\r\\n\\t *      `transfer` and `transferFrom` behave like `unsafeTransferFrom` for any receiver\\r\\n\\t * @dev ROLE_ERC20_RECEIVER is a shortening for ROLE_UNSAFE_ERC20_RECEIVER\\r\\n\\t */\\r\\n\\tuint32 public constant ROLE_ERC20_RECEIVER = 0x0004_0000;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice ERC20 senders are allowed to send tokens without ERC20 safety checks,\\r\\n\\t *      which may be useful to simplify tokens transfers into \\\"legacy\\\" smart contracts\\r\\n\\t * @dev When `FEATURE_UNSAFE_TRANSFERS` is not enabled senders having\\r\\n\\t *      `ROLE_ERC20_SENDER` permission are allowed to send tokens\\r\\n\\t *      via `transfer` and `transferFrom` functions in the same way they\\r\\n\\t *      would via `unsafeTransferFrom` function\\r\\n\\t * @dev When `FEATURE_UNSAFE_TRANSFERS` is enabled `ROLE_ERC20_SENDER` permission\\r\\n\\t *      doesn't affect the transfer behaviour since\\r\\n\\t *      `transfer` and `transferFrom` behave like `unsafeTransferFrom` for any receiver\\r\\n\\t * @dev ROLE_ERC20_SENDER is a shortening for ROLE_UNSAFE_ERC20_SENDER\\r\\n\\t */\\r\\n\\tuint32 public constant ROLE_ERC20_SENDER = 0x0008_0000;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice EIP-712 contract's domain typeHash,\\r\\n\\t *      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\\r\\n\\t *\\r\\n\\t * @dev Note: we do not include version into the domain typehash/separator,\\r\\n\\t *      it is implied version is concatenated to the name field, like \\\"XCC-G\\\"\\r\\n\\t */\\r\\n\\t// keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\")\\r\\n\\tbytes32 public constant DOMAIN_TYPEHASH = 0x8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice EIP-712 contract's domain separator,\\r\\n\\t *      see https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator\\r\\n\\t */\\r\\n\\tbytes32 public immutable override DOMAIN_SEPARATOR;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice EIP-712 permit (EIP-2612) struct typeHash,\\r\\n\\t *      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\\r\\n\\t */\\r\\n\\t// keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\")\\r\\n\\tbytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice EIP-712 TransferWithAuthorization (EIP-3009) struct typeHash,\\r\\n\\t *      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\\r\\n\\t */\\r\\n\\t// keccak256(\\\"TransferWithAuthorization(address from,address to,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)\\\")\\r\\n\\tbytes32 public constant TRANSFER_WITH_AUTHORIZATION_TYPEHASH = 0x7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a2267;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice EIP-712 ReceiveWithAuthorization (EIP-3009) struct typeHash,\\r\\n\\t *      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\\r\\n\\t */\\r\\n\\t// keccak256(\\\"ReceiveWithAuthorization(address from,address to,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)\\\")\\r\\n\\tbytes32 public constant RECEIVE_WITH_AUTHORIZATION_TYPEHASH = 0xd099cc98ef71107a616c4f0f941f04c322d8e254fe26b3c6668db87aae413de8;\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice EIP-712 CancelAuthorization (EIP-3009) struct typeHash,\\r\\n\\t *      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\\r\\n\\t */\\r\\n\\t// keccak256(\\\"CancelAuthorization(address authorizer,bytes32 nonce)\\\")\\r\\n\\tbytes32 public constant CANCEL_AUTHORIZATION_TYPEHASH = 0x158b0a9edf7a828aad02f63cd515c68ef2f50ba807396f6d12842833a1597429;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Fired in mint() function\\r\\n\\t *\\r\\n\\t * @param by an address which minted some tokens (transaction sender)\\r\\n\\t * @param to an address the tokens were minted to\\r\\n\\t * @param value an amount of tokens minted\\r\\n\\t */\\r\\n\\tevent Minted(address indexed by, address indexed to, uint256 value);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Fired in burn() function\\r\\n\\t *\\r\\n\\t * @param by an address which burned some tokens (transaction sender)\\r\\n\\t * @param from an address the tokens were burnt from\\r\\n\\t * @param value an amount of tokens burnt\\r\\n\\t */\\r\\n\\tevent Burnt(address indexed by, address indexed from, uint256 value);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (arXiv:1907.00903)\\r\\n\\t *\\r\\n\\t * @dev Similar to ERC20 Transfer event, but also logs an address which executed transfer\\r\\n\\t *\\r\\n\\t * @dev Fired in transfer(), transferFrom() and some other (non-ERC20) functions\\r\\n\\t *\\r\\n\\t * @param by an address which performed the transfer\\r\\n\\t * @param from an address tokens were consumed from\\r\\n\\t * @param to an address tokens were sent to\\r\\n\\t * @param value number of tokens transferred\\r\\n\\t */\\r\\n\\tevent Transfer(address indexed by, address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (arXiv:1907.00903)\\r\\n\\t *\\r\\n\\t * @dev Similar to ERC20 Approve event, but also logs old approval value\\r\\n\\t *\\r\\n\\t * @dev Fired in approve(), increaseAllowance(), decreaseAllowance() functions,\\r\\n\\t *      may get fired in transfer functions\\r\\n\\t *\\r\\n\\t * @param owner an address which granted a permission to transfer\\r\\n\\t *      tokens on its behalf\\r\\n\\t * @param spender an address which received a permission to transfer\\r\\n\\t *      tokens on behalf of the owner `_owner`\\r\\n\\t * @param oldValue previously granted amount of tokens to transfer on behalf\\r\\n\\t * @param value new granted amount of tokens to transfer on behalf\\r\\n\\t */\\r\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 oldValue, uint256 value);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Deploys the token smart contract,\\r\\n\\t *      assigns initial token supply to the address specified\\r\\n\\t *\\r\\n\\t * @param _initialHolder owner of the initial token supply\\r\\n\\t */\\r\\n\\tconstructor(address _initialHolder) {\\r\\n\\t\\t// verify initial holder address non-zero (is set)\\r\\n\\t\\trequire(_initialHolder != address(0), \\\"_initialHolder not set (zero address)\\\");\\r\\n\\r\\n\\t\\t// build the EIP-712 contract domain separator, see https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator\\r\\n\\t\\t// note: we specify contract version in its name\\r\\n\\t\\tDOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(\\\"XCC-G\\\")), block.chainid, address(this)));\\r\\n\\r\\n\\t\\t// mint initial supply (1000 XCC Token)\\r\\n\\t\\tmint(_initialHolder, 1000e18);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @inheritdoc ERC165\\r\\n\\t */\\r\\n\\tfunction supportsInterface(bytes4 interfaceId) public pure override returns (bool) {\\r\\n\\t\\t// reconstruct from current interface(s) and super interface(s) (if any)\\r\\n\\t\\treturn interfaceId == type(ERC165).interfaceId\\r\\n\\t\\t    || interfaceId == type(ERC20).interfaceId\\r\\n\\t\\t    || interfaceId == type(ERC1363).interfaceId\\r\\n\\t\\t    || interfaceId == type(EIP2612).interfaceId\\r\\n\\t\\t    || interfaceId == type(EIP3009).interfaceId;\\r\\n\\t}\\r\\n\\r\\n\\t// ===== Start: ERC-1363 functions =====\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Transfers some tokens and then executes `onTransferReceived` callback on the receiver\\r\\n\\t *\\r\\n\\t * @inheritdoc ERC1363\\r\\n\\t *\\r\\n\\t * @dev Called by token owner (an address which has a\\r\\n\\t *      positive token balance tracked by this smart contract)\\r\\n\\t * @dev Throws on any error like\\r\\n\\t *      * insufficient token balance or\\r\\n\\t *      * incorrect `_to` address:\\r\\n\\t *          * zero address or\\r\\n\\t *          * same as `_from` address (self transfer)\\r\\n\\t *          * EOA or smart contract which doesn't support ERC1363Receiver interface\\r\\n\\t * @dev Returns true on success, throws otherwise\\r\\n\\t *\\r\\n\\t * @param _to an address to transfer tokens to,\\r\\n\\t *      must be a smart contract, implementing ERC1363Receiver\\r\\n\\t * @param _value amount of tokens to be transferred,, zero\\r\\n\\t *      value is allowed\\r\\n\\t * @return true unless throwing\\r\\n\\t */\\r\\n\\tfunction transferAndCall(address _to, uint256 _value) public override returns (bool) {\\r\\n\\t\\t// delegate to `transferFromAndCall` passing `msg.sender` as `_from`\\r\\n\\t\\treturn transferFromAndCall(msg.sender, _to, _value);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Transfers some tokens and then executes `onTransferReceived` callback on the receiver\\r\\n\\t *\\r\\n\\t * @inheritdoc ERC1363\\r\\n\\t *\\r\\n\\t * @dev Called by token owner (an address which has a\\r\\n\\t *      positive token balance tracked by this smart contract)\\r\\n\\t * @dev Throws on any error like\\r\\n\\t *      * insufficient token balance or\\r\\n\\t *      * incorrect `_to` address:\\r\\n\\t *          * zero address or\\r\\n\\t *          * same as `_from` address (self transfer)\\r\\n\\t *          * EOA or smart contract which doesn't support ERC1363Receiver interface\\r\\n\\t * @dev Returns true on success, throws otherwise\\r\\n\\t *\\r\\n\\t * @param _to an address to transfer tokens to,\\r\\n\\t *      must be a smart contract, implementing ERC1363Receiver\\r\\n\\t * @param _value amount of tokens to be transferred,, zero\\r\\n\\t *      value is allowed\\r\\n\\t * @param _data [optional] additional data with no specified format,\\r\\n\\t *      sent in onTransferReceived call to `_to`\\r\\n\\t * @return true unless throwing\\r\\n\\t */\\r\\n\\tfunction transferAndCall(address _to, uint256 _value, bytes memory _data) public override returns (bool) {\\r\\n\\t\\t// delegate to `transferFromAndCall` passing `msg.sender` as `_from`\\r\\n\\t\\treturn transferFromAndCall(msg.sender, _to, _value, _data);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Transfers some tokens on behalf of address `_from' (token owner)\\r\\n\\t *      to some other address `_to` and then executes `onTransferReceived` callback on the receiver\\r\\n\\t *\\r\\n\\t * @inheritdoc ERC1363\\r\\n\\t *\\r\\n\\t * @dev Called by token owner on his own or approved address,\\r\\n\\t *      an address approved earlier by token owner to\\r\\n\\t *      transfer some amount of tokens on its behalf\\r\\n\\t * @dev Throws on any error like\\r\\n\\t *      * insufficient token balance or\\r\\n\\t *      * incorrect `_to` address:\\r\\n\\t *          * zero address or\\r\\n\\t *          * same as `_from` address (self transfer)\\r\\n\\t *          * EOA or smart contract which doesn't support ERC1363Receiver interface\\r\\n\\t * @dev Returns true on success, throws otherwise\\r\\n\\t *\\r\\n\\t * @param _from token owner which approved caller (transaction sender)\\r\\n\\t *      to transfer `_value` of tokens on its behalf\\r\\n\\t * @param _to an address to transfer tokens to,\\r\\n\\t *      must be a smart contract, implementing ERC1363Receiver\\r\\n\\t * @param _value amount of tokens to be transferred,, zero\\r\\n\\t *      value is allowed\\r\\n\\t * @return true unless throwing\\r\\n\\t */\\r\\n\\tfunction transferFromAndCall(address _from, address _to, uint256 _value) public override returns (bool) {\\r\\n\\t\\t// delegate to `transferFromAndCall` passing empty data param\\r\\n\\t\\treturn transferFromAndCall(_from, _to, _value, \\\"\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Transfers some tokens on behalf of address `_from' (token owner)\\r\\n\\t *      to some other address `_to` and then executes a `onTransferReceived` callback on the receiver\\r\\n\\t *\\r\\n\\t * @inheritdoc ERC1363\\r\\n\\t *\\r\\n\\t * @dev Called by token owner on his own or approved address,\\r\\n\\t *      an address approved earlier by token owner to\\r\\n\\t *      transfer some amount of tokens on its behalf\\r\\n\\t * @dev Throws on any error like\\r\\n\\t *      * insufficient token balance or\\r\\n\\t *      * incorrect `_to` address:\\r\\n\\t *          * zero address or\\r\\n\\t *          * same as `_from` address (self transfer)\\r\\n\\t *          * EOA or smart contract which doesn't support ERC1363Receiver interface\\r\\n\\t * @dev Returns true on success, throws otherwise\\r\\n\\t *\\r\\n\\t * @param _from token owner which approved caller (transaction sender)\\r\\n\\t *      to transfer `_value` of tokens on its behalf\\r\\n\\t * @param _to an address to transfer tokens to,\\r\\n\\t *      must be a smart contract, implementing ERC1363Receiver\\r\\n\\t * @param _value amount of tokens to be transferred,, zero\\r\\n\\t *      value is allowed\\r\\n\\t * @param _data [optional] additional data with no specified format,\\r\\n\\t *      sent in onTransferReceived call to `_to`\\r\\n\\t * @return true unless throwing\\r\\n\\t */\\r\\n\\tfunction transferFromAndCall(address _from, address _to, uint256 _value, bytes memory _data) public override returns (bool) {\\r\\n\\t\\t// ensure ERC-1363 transfers are enabled\\r\\n\\t\\trequire(isFeatureEnabled(FEATURE_ERC1363_TRANSFERS), \\\"ERC1363 transfers are disabled\\\");\\r\\n\\r\\n\\t\\t// first delegate call to `unsafeTransferFrom` to perform the unsafe token(s) transfer\\r\\n\\t\\tunsafeTransferFrom(_from, _to, _value);\\r\\n\\r\\n\\t\\t// after the successful transfer - check if receiver supports\\r\\n\\t\\t// ERC1363Receiver and execute a callback handler `onTransferReceived`,\\r\\n\\t\\t// reverting whole transaction on any error\\r\\n\\t\\t_notifyTransferred(_from, _to, _value, _data, false);\\r\\n\\r\\n\\t\\t// function throws on any error, so if we're here - it means operation successful, just return true\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Approves address called `_spender` to transfer some amount\\r\\n\\t *      of tokens on behalf of the owner, then executes a `onApprovalReceived` callback on `_spender`\\r\\n\\t *\\r\\n\\t * @inheritdoc ERC1363\\r\\n\\t *\\r\\n\\t * @dev Caller must not necessarily own any tokens to grant the permission\\r\\n\\t *\\r\\n\\t * @dev Throws if `_spender` is an EOA or a smart contract which doesn't support ERC1363Spender interface\\r\\n\\t *\\r\\n\\t * @param _spender an address approved by the caller (token owner)\\r\\n\\t *      to spend some tokens on its behalf\\r\\n\\t * @param _value an amount of tokens spender `_spender` is allowed to\\r\\n\\t *      transfer on behalf of the token owner\\r\\n\\t * @return success true on success, throws otherwise\\r\\n\\t */\\r\\n\\tfunction approveAndCall(address _spender, uint256 _value) public override returns (bool) {\\r\\n\\t\\t// delegate to `approveAndCall` passing empty data\\r\\n\\t\\treturn approveAndCall(_spender, _value, \\\"\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Approves address called `_spender` to transfer some amount\\r\\n\\t *      of tokens on behalf of the owner, then executes a callback on `_spender`\\r\\n\\t *\\r\\n\\t * @inheritdoc ERC1363\\r\\n\\t *\\r\\n\\t * @dev Caller must not necessarily own any tokens to grant the permission\\r\\n\\t *\\r\\n\\t * @param _spender an address approved by the caller (token owner)\\r\\n\\t *      to spend some tokens on its behalf\\r\\n\\t * @param _value an amount of tokens spender `_spender` is allowed to\\r\\n\\t *      transfer on behalf of the token owner\\r\\n\\t * @param _data [optional] additional data with no specified format,\\r\\n\\t *      sent in onApprovalReceived call to `_spender`\\r\\n\\t * @return success true on success, throws otherwise\\r\\n\\t */\\r\\n\\tfunction approveAndCall(address _spender, uint256 _value, bytes memory _data) public override returns (bool) {\\r\\n\\t\\t// ensure ERC-1363 approvals are enabled\\r\\n\\t\\trequire(isFeatureEnabled(FEATURE_ERC1363_APPROVALS), \\\"ERC1363 approvals are disabled\\\");\\r\\n\\r\\n\\t\\t// execute regular ERC20 approve - delegate to `approve`\\r\\n\\t\\tapprove(_spender, _value);\\r\\n\\r\\n\\t\\t// after the successful approve - check if receiver supports\\r\\n\\t\\t// ERC1363Spender and execute a callback handler `onApprovalReceived`,\\r\\n\\t\\t// reverting whole transaction on any error\\r\\n\\t\\t_notifyApproved(_spender, _value, _data);\\r\\n\\r\\n\\t\\t// function throws on any error, so if we're here - it means operation successful, just return true\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Auxiliary function to invoke `onTransferReceived` on a target address\\r\\n\\t *      The call is not executed if the target address is not a contract; in such\\r\\n\\t *      a case function throws if `allowEoa` is set to false, succeeds if it's true\\r\\n\\t *\\r\\n\\t * @dev Throws on any error; returns silently on success\\r\\n\\t *\\r\\n\\t * @param _from representing the previous owner of the given token value\\r\\n\\t * @param _to target address that will receive the tokens\\r\\n\\t * @param _value the amount mount of tokens to be transferred\\r\\n\\t * @param _data [optional] data to send along with the call\\r\\n\\t * @param allowEoa indicates if function should fail if `_to` is an EOA\\r\\n\\t */\\r\\n\\tfunction _notifyTransferred(address _from, address _to, uint256 _value, bytes memory _data, bool allowEoa) private {\\r\\n\\t\\t// if recipient `_to` is EOA\\r\\n\\t\\tif (!AddressUtils.isContract(_to)) {\\r\\n\\t\\t\\t// ensure EOA recipient is allowed\\r\\n\\t\\t\\trequire(allowEoa, \\\"EOA recipient\\\");\\r\\n\\r\\n\\t\\t\\t// exit if successful\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// otherwise - if `_to` is a contract - execute onTransferReceived\\r\\n\\t\\tbytes4 response = ERC1363Receiver(_to).onTransferReceived(msg.sender, _from, _value, _data);\\r\\n\\r\\n\\t\\t// expected response is ERC1363Receiver(_to).onTransferReceived.selector\\r\\n\\t\\t// bytes4(keccak256(\\\"onTransferReceived(address,address,uint256,bytes)\\\"))\\r\\n\\t\\trequire(response == ERC1363Receiver(_to).onTransferReceived.selector, \\\"invalid onTransferReceived response\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Auxiliary function to invoke `onApprovalReceived` on a target address\\r\\n\\t *      The call is not executed if the target address is not a contract; in such\\r\\n\\t *      a case function throws if `allowEoa` is set to false, succeeds if it's true\\r\\n\\t *\\r\\n\\t * @dev Throws on any error; returns silently on success\\r\\n\\t *\\r\\n\\t * @param _spender the address which will spend the funds\\r\\n\\t * @param _value the amount of tokens to be spent\\r\\n\\t * @param _data [optional] data to send along with the call\\r\\n\\t */\\r\\n\\tfunction _notifyApproved(address _spender, uint256 _value, bytes memory _data) private {\\r\\n\\t\\t// ensure recipient is not EOA\\r\\n\\t\\trequire(AddressUtils.isContract(_spender), \\\"EOA spender\\\");\\r\\n\\r\\n\\t\\t// otherwise - if `_to` is a contract - execute onApprovalReceived\\r\\n\\t\\tbytes4 response = ERC1363Spender(_spender).onApprovalReceived(msg.sender, _value, _data);\\r\\n\\r\\n\\t\\t// expected response is ERC1363Spender(_to).onApprovalReceived.selector\\r\\n\\t\\t// bytes4(keccak256(\\\"onApprovalReceived(address,uint256,bytes)\\\"))\\r\\n\\t\\trequire(response == ERC1363Spender(_spender).onApprovalReceived.selector, \\\"invalid onApprovalReceived response\\\");\\r\\n\\t}\\r\\n\\t// ===== End: ERC-1363 functions =====\\r\\n\\r\\n\\t// ===== Start: ERC20 functions =====\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Gets the balance of a particular address\\r\\n\\t *\\r\\n\\t * @inheritdoc ERC20\\r\\n\\t *\\r\\n\\t * @param _owner the address to query the the balance for\\r\\n\\t * @return balance an amount of tokens owned by the address specified\\r\\n\\t */\\r\\n\\tfunction balanceOf(address _owner) public view override returns (uint256 balance) {\\r\\n\\t\\t// read the balance and return\\r\\n\\t\\treturn tokenBalances[_owner];\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Transfers some tokens to an external address or a smart contract\\r\\n\\t *\\r\\n\\t * @inheritdoc ERC20\\r\\n\\t *\\r\\n\\t * @dev Called by token owner (an address which has a\\r\\n\\t *      positive token balance tracked by this smart contract)\\r\\n\\t * @dev Throws on any error like\\r\\n\\t *      * insufficient token balance or\\r\\n\\t *      * incorrect `_to` address:\\r\\n\\t *          * zero address or\\r\\n\\t *          * self address or\\r\\n\\t *          * smart contract which doesn't support ERC20\\r\\n\\t *\\r\\n\\t * @param _to an address to transfer tokens to,\\r\\n\\t *      must be either an external address or a smart contract,\\r\\n\\t *      compliant with the ERC20 standard\\r\\n\\t * @param _value amount of tokens to be transferred,, zero\\r\\n\\t *      value is allowed\\r\\n\\t * @return success true on success, throws otherwise\\r\\n\\t */\\r\\n\\tfunction transfer(address _to, uint256 _value) public override returns (bool success) {\\r\\n\\t\\t// just delegate call to `transferFrom`,\\r\\n\\t\\t// `FEATURE_TRANSFERS` is verified inside it\\r\\n\\t\\treturn transferFrom(msg.sender, _to, _value);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Transfers some tokens on behalf of address `_from' (token owner)\\r\\n\\t *      to some other address `_to`\\r\\n\\t *\\r\\n\\t * @inheritdoc ERC20\\r\\n\\t *\\r\\n\\t * @dev Called by token owner on his own or approved address,\\r\\n\\t *      an address approved earlier by token owner to\\r\\n\\t *      transfer some amount of tokens on its behalf\\r\\n\\t * @dev Throws on any error like\\r\\n\\t *      * insufficient token balance or\\r\\n\\t *      * incorrect `_to` address:\\r\\n\\t *          * zero address or\\r\\n\\t *          * same as `_from` address (self transfer)\\r\\n\\t *          * smart contract which doesn't support ERC20\\r\\n\\t *\\r\\n\\t * @param _from token owner which approved caller (transaction sender)\\r\\n\\t *      to transfer `_value` of tokens on its behalf\\r\\n\\t * @param _to an address to transfer tokens to,\\r\\n\\t *      must be either an external address or a smart contract,\\r\\n\\t *      compliant with the ERC20 standard\\r\\n\\t * @param _value amount of tokens to be transferred,, zero\\r\\n\\t *      value is allowed\\r\\n\\t * @return success true on success, throws otherwise\\r\\n\\t */\\r\\n\\tfunction transferFrom(address _from, address _to, uint256 _value) public override returns (bool success) {\\r\\n\\t\\t// depending on `FEATURE_UNSAFE_TRANSFERS` we execute either safe (default)\\r\\n\\t\\t// or unsafe transfer\\r\\n\\t\\t// if `FEATURE_UNSAFE_TRANSFERS` is enabled\\r\\n\\t\\t// or receiver has `ROLE_ERC20_RECEIVER` permission\\r\\n\\t\\t// or sender has `ROLE_ERC20_SENDER` permission\\r\\n\\t\\tif(isFeatureEnabled(FEATURE_UNSAFE_TRANSFERS)\\r\\n\\t\\t\\t|| isOperatorInRole(_to, ROLE_ERC20_RECEIVER)\\r\\n\\t\\t\\t|| isSenderInRole(ROLE_ERC20_SENDER)) {\\r\\n\\t\\t\\t// we execute unsafe transfer - delegate call to `unsafeTransferFrom`,\\r\\n\\t\\t\\t// `FEATURE_TRANSFERS` is verified inside it\\r\\n\\t\\t\\tunsafeTransferFrom(_from, _to, _value);\\r\\n\\t\\t}\\r\\n\\t\\t// otherwise - if `FEATURE_UNSAFE_TRANSFERS` is disabled\\r\\n\\t\\t// and receiver doesn't have `ROLE_ERC20_RECEIVER` permission\\r\\n\\t\\telse {\\r\\n\\t\\t\\t// we execute safe transfer - delegate call to `safeTransferFrom`, passing empty `_data`,\\r\\n\\t\\t\\t// `FEATURE_TRANSFERS` is verified inside it\\r\\n\\t\\t\\tsafeTransferFrom(_from, _to, _value, \\\"\\\");\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// both `unsafeTransferFrom` and `safeTransferFrom` throw on any error, so\\r\\n\\t\\t// if we're here - it means operation successful,\\r\\n\\t\\t// just return true\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Transfers some tokens on behalf of address `_from' (token owner)\\r\\n\\t *      to some other address `_to` and then executes `onTransferReceived` callback\\r\\n\\t *      on the receiver if it is a smart contract (not an EOA)\\r\\n\\t *\\r\\n\\t * @dev Called by token owner on his own or approved address,\\r\\n\\t *      an address approved earlier by token owner to\\r\\n\\t *      transfer some amount of tokens on its behalf\\r\\n\\t * @dev Throws on any error like\\r\\n\\t *      * insufficient token balance or\\r\\n\\t *      * incorrect `_to` address:\\r\\n\\t *          * zero address or\\r\\n\\t *          * same as `_from` address (self transfer)\\r\\n\\t *          * smart contract which doesn't support ERC1363Receiver interface\\r\\n\\t * @dev Returns true on success, throws otherwise\\r\\n\\t *\\r\\n\\t * @param _from token owner which approved caller (transaction sender)\\r\\n\\t *      to transfer `_value` of tokens on its behalf\\r\\n\\t * @param _to an address to transfer tokens to,\\r\\n\\t *      must be either an external address or a smart contract,\\r\\n\\t *      implementing ERC1363Receiver\\r\\n\\t * @param _value amount of tokens to be transferred,, zero\\r\\n\\t *      value is allowed\\r\\n\\t * @param _data [optional] additional data with no specified format,\\r\\n\\t *      sent in onTransferReceived call to `_to` in case if its a smart contract\\r\\n\\t * @return true unless throwing\\r\\n\\t */\\r\\n\\tfunction safeTransferFrom(address _from, address _to, uint256 _value, bytes memory _data) public returns (bool) {\\r\\n\\t\\t// first delegate call to `unsafeTransferFrom` to perform the unsafe token(s) transfer\\r\\n\\t\\tunsafeTransferFrom(_from, _to, _value);\\r\\n\\r\\n\\t\\t// after the successful transfer - check if receiver supports\\r\\n\\t\\t// ERC1363Receiver and execute a callback handler `onTransferReceived`,\\r\\n\\t\\t// reverting whole transaction on any error\\r\\n\\t\\t_notifyTransferred(_from, _to, _value, _data, true);\\r\\n\\r\\n\\t\\t// function throws on any error, so if we're here - it means operation successful, just return true\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Transfers some tokens on behalf of address `_from' (token owner)\\r\\n\\t *      to some other address `_to`\\r\\n\\t *\\r\\n\\t * @dev In contrast to `transferFromAndCall` doesn't check recipient\\r\\n\\t *      smart contract to support ERC20 tokens (ERC1363Receiver)\\r\\n\\t * @dev Designed to be used by developers when the receiver is known\\r\\n\\t *      to support ERC20 tokens but doesn't implement ERC1363Receiver interface\\r\\n\\t * @dev Called by token owner on his own or approved address,\\r\\n\\t *      an address approved earlier by token owner to\\r\\n\\t *      transfer some amount of tokens on its behalf\\r\\n\\t * @dev Throws on any error like\\r\\n\\t *      * insufficient token balance or\\r\\n\\t *      * incorrect `_to` address:\\r\\n\\t *          * zero address or\\r\\n\\t *          * same as `_from` address (self transfer)\\r\\n\\t * @dev Returns silently on success, throws otherwise\\r\\n\\t *\\r\\n\\t * @param _from token sender, token owner which approved caller (transaction sender)\\r\\n\\t *      to transfer `_value` of tokens on its behalf\\r\\n\\t * @param _to token receiver, an address to transfer tokens to\\r\\n\\t * @param _value amount of tokens to be transferred,, zero\\r\\n\\t *      value is allowed\\r\\n\\t */\\r\\n\\tfunction unsafeTransferFrom(address _from, address _to, uint256 _value) public {\\r\\n\\t\\t// make an internal transferFrom - delegate to `__transferFrom`\\r\\n\\t\\t__transferFrom(msg.sender, _from, _to, _value);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Powers the meta transactions for `unsafeTransferFrom` - EIP-3009 `transferWithAuthorization`\\r\\n\\t *      and `receiveWithAuthorization`\\r\\n\\t *\\r\\n\\t * @dev See `unsafeTransferFrom` and `transferFrom` soldoc for details\\r\\n\\t *\\r\\n\\t * @param _by an address executing the transfer, it can be token owner itself,\\r\\n\\t *      or an operator previously approved with `approve()`\\r\\n\\t * @param _from token sender, token owner which approved caller (transaction sender)\\r\\n\\t *      to transfer `_value` of tokens on its behalf\\r\\n\\t * @param _to token receiver, an address to transfer tokens to\\r\\n\\t * @param _value amount of tokens to be transferred,, zero\\r\\n\\t *      value is allowed\\r\\n\\t */\\r\\n\\tfunction __transferFrom(address _by, address _from, address _to, uint256 _value) private {\\r\\n\\t\\t// if `_from` is equal to sender, require transfers feature to be enabled\\r\\n\\t\\t// otherwise require transfers on behalf feature to be enabled\\r\\n\\t\\trequire(_from == _by && isFeatureEnabled(FEATURE_TRANSFERS)\\r\\n\\t\\t     || _from != _by && isFeatureEnabled(FEATURE_TRANSFERS_ON_BEHALF),\\r\\n\\t\\t        _from == _by? \\\"transfers are disabled\\\": \\\"transfers on behalf are disabled\\\");\\r\\n\\r\\n\\t\\t// non-zero source address check - Zeppelin\\r\\n\\t\\t// obviously, zero source address is a client mistake\\r\\n\\t\\t// it's not part of ERC20 standard but it's reasonable to fail fast\\r\\n\\t\\t// since for zero value transfer transaction succeeds otherwise\\r\\n\\t\\trequire(_from != address(0), \\\"transfer from the zero address\\\");\\r\\n\\r\\n\\t\\t// non-zero recipient address check\\r\\n\\t\\trequire(_to != address(0), \\\"transfer to the zero address\\\");\\r\\n\\r\\n\\t\\t// sender and recipient cannot be the same\\r\\n\\t\\trequire(_from != _to, \\\"sender and recipient are the same (_from = _to)\\\");\\r\\n\\r\\n\\t\\t// sending tokens to the token smart contract itself is a client mistake\\r\\n\\t\\trequire(_to != address(this), \\\"invalid recipient (transfer to the token smart contract itself)\\\");\\r\\n\\r\\n\\t\\t// according to ERC-20 Token Standard, https://eips.ethereum.org/EIPS/eip-20\\r\\n\\t\\t// \\\"Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.\\\"\\r\\n\\t\\tif(_value == 0) {\\r\\n\\t\\t\\t// emit an ERC20 transfer event\\r\\n\\t\\t\\temit Transfer(_from, _to, _value);\\r\\n\\r\\n\\t\\t\\t// don't forget to return - we're done\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// no need to make arithmetic overflow check on the _value - by design of mint()\\r\\n\\r\\n\\t\\t// in case of transfer on behalf\\r\\n\\t\\tif(_from != _by) {\\r\\n\\t\\t\\t// read allowance value - the amount of tokens allowed to transfer - into the stack\\r\\n\\t\\t\\tuint256 _allowance = transferAllowances[_from][_by];\\r\\n\\r\\n\\t\\t\\t// verify sender has an allowance to transfer amount of tokens requested\\r\\n\\t\\t\\trequire(_allowance >= _value, \\\"transfer amount exceeds allowance\\\");\\r\\n\\r\\n\\t\\t\\t// we treat max uint256 allowance value as an \\\"unlimited\\\" and\\r\\n\\t\\t\\t// do not decrease allowance when it is set to \\\"unlimited\\\" value\\r\\n\\t\\t\\tif(_allowance < type(uint256).max) {\\r\\n\\t\\t\\t\\t// update allowance value on the stack\\r\\n\\t\\t\\t\\t_allowance -= _value;\\r\\n\\r\\n\\t\\t\\t\\t// update the allowance value in storage\\r\\n\\t\\t\\t\\ttransferAllowances[_from][_by] = _allowance;\\r\\n\\r\\n\\t\\t\\t\\t// emit an improved atomic approve event\\r\\n\\t\\t\\t\\temit Approval(_from, _by, _allowance + _value, _allowance);\\r\\n\\r\\n\\t\\t\\t\\t// emit an ERC20 approval event to reflect the decrease\\r\\n\\t\\t\\t\\temit Approval(_from, _by, _allowance);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// verify sender has enough tokens to transfer on behalf\\r\\n\\t\\trequire(tokenBalances[_from] >= _value, \\\"transfer amount exceeds balance\\\");\\r\\n\\r\\n\\t\\t// perform the transfer:\\r\\n\\t\\t// decrease token owner (sender) balance\\r\\n\\t\\ttokenBalances[_from] -= _value;\\r\\n\\r\\n\\t\\t// increase `_to` address (receiver) balance\\r\\n\\t\\ttokenBalances[_to] += _value;\\r\\n\\r\\n\\t\\t// emit an improved transfer event (arXiv:1907.00903)\\r\\n\\t\\temit Transfer(_by, _from, _to, _value);\\r\\n\\r\\n\\t\\t// emit an ERC20 transfer event\\r\\n\\t\\temit Transfer(_from, _to, _value);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Approves address called `_spender` to transfer some amount\\r\\n\\t *      of tokens on behalf of the owner (transaction sender)\\r\\n\\t *\\r\\n\\t * @inheritdoc ERC20\\r\\n\\t *\\r\\n\\t * @dev Transaction sender must not necessarily own any tokens to grant the permission\\r\\n\\t *\\r\\n\\t * @param _spender an address approved by the caller (token owner)\\r\\n\\t *      to spend some tokens on its behalf\\r\\n\\t * @param _value an amount of tokens spender `_spender` is allowed to\\r\\n\\t *      transfer on behalf of the token owner\\r\\n\\t * @return success true on success, throws otherwise\\r\\n\\t */\\r\\n\\tfunction approve(address _spender, uint256 _value) public override returns (bool success) {\\r\\n\\t\\t// make an internal approve - delegate to `__approve`\\r\\n\\t\\t__approve(msg.sender, _spender, _value);\\r\\n\\r\\n\\t\\t// operation successful, return true\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Powers the meta transaction for `approve` - EIP-2612 `permit`\\r\\n\\t *\\r\\n\\t * @dev Approves address called `_spender` to transfer some amount\\r\\n\\t *      of tokens on behalf of the `_owner`\\r\\n\\t *\\r\\n\\t * @dev `_owner` must not necessarily own any tokens to grant the permission\\r\\n\\t * @dev Throws if `_spender` is a zero address\\r\\n\\t *\\r\\n\\t * @param _owner owner of the tokens to set approval on behalf of\\r\\n\\t * @param _spender an address approved by the token owner\\r\\n\\t *      to spend some tokens on its behalf\\r\\n\\t * @param _value an amount of tokens spender `_spender` is allowed to\\r\\n\\t *      transfer on behalf of the token owner\\r\\n\\t */\\r\\n\\tfunction __approve(address _owner, address _spender, uint256 _value) private {\\r\\n\\t\\t// non-zero spender address check - Zeppelin\\r\\n\\t\\t// obviously, zero spender address is a client mistake\\r\\n\\t\\t// it's not part of ERC20 standard but it's reasonable to fail fast\\r\\n\\t\\trequire(_spender != address(0), \\\"approve to the zero address\\\");\\r\\n\\r\\n\\t\\t// read old approval value to emmit an improved event (arXiv:1907.00903)\\r\\n\\t\\tuint256 _oldValue = transferAllowances[_owner][_spender];\\r\\n\\r\\n\\t\\t// perform an operation: write value requested into the storage\\r\\n\\t\\ttransferAllowances[_owner][_spender] = _value;\\r\\n\\r\\n\\t\\t// emit an improved atomic approve event (arXiv:1907.00903)\\r\\n\\t\\temit Approval(_owner, _spender, _oldValue, _value);\\r\\n\\r\\n\\t\\t// emit an ERC20 approval event\\r\\n\\t\\temit Approval(_owner, _spender, _value);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Returns the amount which _spender is still allowed to withdraw from _owner.\\r\\n\\t *\\r\\n\\t * @inheritdoc ERC20\\r\\n\\t *\\r\\n\\t * @dev A function to check an amount of tokens owner approved\\r\\n\\t *      to transfer on its behalf by some other address called \\\"spender\\\"\\r\\n\\t *\\r\\n\\t * @param _owner an address which approves transferring some tokens on its behalf\\r\\n\\t * @param _spender an address approved to transfer some tokens on behalf\\r\\n\\t * @return remaining an amount of tokens approved address `_spender` can transfer on behalf\\r\\n\\t *      of token owner `_owner`\\r\\n\\t */\\r\\n\\tfunction allowance(address _owner, address _spender) public view override returns (uint256 remaining) {\\r\\n\\t\\t// read the value from storage and return\\r\\n\\t\\treturn transferAllowances[_owner][_spender];\\r\\n\\t}\\r\\n\\r\\n\\t// ===== End: ERC20 functions =====\\r\\n\\r\\n\\t// ===== Start: Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (arXiv:1907.00903) =====\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Increases the allowance granted to `spender` by the transaction sender\\r\\n\\t *\\r\\n\\t * @dev Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (arXiv:1907.00903)\\r\\n\\t *\\r\\n\\t * @dev Throws if value to increase by is zero or too big and causes arithmetic overflow\\r\\n\\t *\\r\\n\\t * @param _spender an address approved by the caller (token owner)\\r\\n\\t *      to spend some tokens on its behalf\\r\\n\\t * @param _value an amount of tokens to increase by\\r\\n\\t * @return success true on success, throws otherwise\\r\\n\\t */\\r\\n\\tfunction increaseAllowance(address _spender, uint256 _value) public returns (bool) {\\r\\n\\t\\t// read current allowance value\\r\\n\\t\\tuint256 currentVal = transferAllowances[msg.sender][_spender];\\r\\n\\r\\n\\t\\t// non-zero _value and arithmetic overflow check on the allowance\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\t// put operation into unchecked block to display user-friendly overflow error message for Solidity 0.8+\\r\\n\\t\\t\\trequire(currentVal + _value > currentVal, \\\"zero value approval increase or arithmetic overflow\\\");\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// delegate call to `approve` with the new value\\r\\n\\t\\treturn approve(_spender, currentVal + _value);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Decreases the allowance granted to `spender` by the caller.\\r\\n\\t *\\r\\n\\t * @dev Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (arXiv:1907.00903)\\r\\n\\t *\\r\\n\\t * @dev Throws if value to decrease by is zero or is greater than currently allowed value\\r\\n\\t *\\r\\n\\t * @param _spender an address approved by the caller (token owner)\\r\\n\\t *      to spend some tokens on its behalf\\r\\n\\t * @param _value an amount of tokens to decrease by\\r\\n\\t * @return success true on success, throws otherwise\\r\\n\\t */\\r\\n\\tfunction decreaseAllowance(address _spender, uint256 _value) public returns (bool) {\\r\\n\\t\\t// read current allowance value\\r\\n\\t\\tuint256 currentVal = transferAllowances[msg.sender][_spender];\\r\\n\\r\\n\\t\\t// non-zero _value check on the allowance\\r\\n\\t\\trequire(_value > 0, \\\"zero value approval decrease\\\");\\r\\n\\r\\n\\t\\t// verify allowance decrease doesn't underflow\\r\\n\\t\\trequire(currentVal >= _value, \\\"ERC20: decreased allowance below zero\\\");\\r\\n\\r\\n\\t\\t// delegate call to `approve` with the new value\\r\\n\\t\\treturn approve(_spender, currentVal - _value);\\r\\n\\t}\\r\\n\\r\\n\\t// ===== End: Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (arXiv:1907.00903) =====\\r\\n\\r\\n\\t// ===== Start: Minting/burning extension =====\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Mints (creates) some tokens to address specified\\r\\n\\t * @dev The value specified is treated as is without taking\\r\\n\\t *      into account what `decimals` value is\\r\\n\\t *\\r\\n\\t * @dev Requires executor to have `ROLE_TOKEN_CREATOR` permission\\r\\n\\t *\\r\\n\\t * @dev Throws on overflow, if totalSupply + _value doesn't fit into uint256\\r\\n\\t *\\r\\n\\t * @param _to an address to mint tokens to\\r\\n\\t * @param _value an amount of tokens to mint (create)\\r\\n\\t */\\r\\n\\tfunction mint(address _to, uint256 _value) public {\\r\\n\\t\\t// check if caller has sufficient permissions to mint tokens\\r\\n\\t\\trequire(isSenderInRole(ROLE_TOKEN_CREATOR), \\\"access denied\\\");\\r\\n\\r\\n\\t\\t// non-zero recipient address check\\r\\n\\t\\trequire(_to != address(0), \\\"zero address\\\");\\r\\n\\r\\n\\t\\t// non-zero _value and arithmetic overflow check on the total supply\\r\\n\\t\\t// this check automatically secures arithmetic overflow on the individual balance\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\t// put operation into unchecked block to display user-friendly overflow error message for Solidity 0.8+\\r\\n\\t\\t\\trequire(totalSupply + _value > totalSupply, \\\"zero value or arithmetic overflow\\\");\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// uint192 overflow check (required by voting delegation)\\r\\n\\t\\trequire(totalSupply + _value <= type(uint192).max, \\\"total supply overflow (uint192)\\\");\\r\\n\\r\\n\\t\\t// perform mint:\\r\\n\\t\\t// increase total amount of tokens value\\r\\n\\t\\ttotalSupply += _value;\\r\\n\\r\\n\\t\\t// increase `_to` address balance\\r\\n\\t\\ttokenBalances[_to] += _value;\\r\\n\\r\\n\\t\\t// fire a minted event\\r\\n\\t\\temit Minted(msg.sender, _to, _value);\\r\\n\\r\\n\\t\\t// emit an improved transfer event (arXiv:1907.00903)\\r\\n\\t\\temit Transfer(msg.sender, address(0), _to, _value);\\r\\n\\r\\n\\t\\t// fire ERC20 compliant transfer event\\r\\n\\t\\temit Transfer(address(0), _to, _value);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Burns (destroys) some tokens from the address specified\\r\\n\\t *\\r\\n\\t * @dev The value specified is treated as is without taking\\r\\n\\t *      into account what `decimals` value is\\r\\n\\t *\\r\\n\\t * @dev Requires executor to have `ROLE_TOKEN_DESTROYER` permission\\r\\n\\t *      or FEATURE_OWN_BURNS/FEATURE_BURNS_ON_BEHALF features to be enabled\\r\\n\\t *\\r\\n\\t * @dev Can be disabled by the contract creator forever by disabling\\r\\n\\t *      FEATURE_OWN_BURNS/FEATURE_BURNS_ON_BEHALF features and then revoking\\r\\n\\t *      its own roles to burn tokens and to enable burning features\\r\\n\\t *\\r\\n\\t * @param _from an address to burn some tokens from\\r\\n\\t * @param _value an amount of tokens to burn (destroy)\\r\\n\\t */\\r\\n\\tfunction burn(address _from, uint256 _value) public {\\r\\n\\t\\t// check if caller has sufficient permissions to burn tokens\\r\\n\\t\\t// and if not - check for possibility to burn own tokens or to burn on behalf\\r\\n\\t\\tif(!isSenderInRole(ROLE_TOKEN_DESTROYER)) {\\r\\n\\t\\t\\t// if `_from` is equal to sender, require own burns feature to be enabled\\r\\n\\t\\t\\t// otherwise require burns on behalf feature to be enabled\\r\\n\\t\\t\\trequire(_from == msg.sender && isFeatureEnabled(FEATURE_OWN_BURNS)\\r\\n\\t\\t\\t     || _from != msg.sender && isFeatureEnabled(FEATURE_BURNS_ON_BEHALF),\\r\\n\\t\\t\\t        _from == msg.sender? \\\"burns are disabled\\\": \\\"burns on behalf are disabled\\\");\\r\\n\\r\\n\\t\\t\\t// in case of burn on behalf\\r\\n\\t\\t\\tif(_from != msg.sender) {\\r\\n\\t\\t\\t\\t// read allowance value - the amount of tokens allowed to be burnt - into the stack\\r\\n\\t\\t\\t\\tuint256 _allowance = transferAllowances[_from][msg.sender];\\r\\n\\r\\n\\t\\t\\t\\t// verify sender has an allowance to burn amount of tokens requested\\r\\n\\t\\t\\t\\trequire(_allowance >= _value, \\\"burn amount exceeds allowance\\\");\\r\\n\\r\\n\\t\\t\\t\\t// we treat max uint256 allowance value as an \\\"unlimited\\\" and\\r\\n\\t\\t\\t\\t// do not decrease allowance when it is set to \\\"unlimited\\\" value\\r\\n\\t\\t\\t\\tif(_allowance < type(uint256).max) {\\r\\n\\t\\t\\t\\t\\t// update allowance value on the stack\\r\\n\\t\\t\\t\\t\\t_allowance -= _value;\\r\\n\\r\\n\\t\\t\\t\\t\\t// update the allowance value in storage\\r\\n\\t\\t\\t\\t\\ttransferAllowances[_from][msg.sender] = _allowance;\\r\\n\\r\\n\\t\\t\\t\\t\\t// emit an improved atomic approve event (arXiv:1907.00903)\\r\\n\\t\\t\\t\\t\\temit Approval(msg.sender, _from, _allowance + _value, _allowance);\\r\\n\\r\\n\\t\\t\\t\\t\\t// emit an ERC20 approval event to reflect the decrease\\r\\n\\t\\t\\t\\t\\temit Approval(_from, msg.sender, _allowance);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// at this point we know that either sender is ROLE_TOKEN_DESTROYER or\\r\\n\\t\\t// we burn own tokens or on behalf (in latest case we already checked and updated allowances)\\r\\n\\t\\t// we have left to execute balance checks and burning logic itself\\r\\n\\r\\n\\t\\t// non-zero burn value check\\r\\n\\t\\trequire(_value != 0, \\\"zero value burn\\\");\\r\\n\\r\\n\\t\\t// non-zero source address check - Zeppelin\\r\\n\\t\\trequire(_from != address(0), \\\"burn from the zero address\\\");\\r\\n\\r\\n\\t\\t// verify `_from` address has enough tokens to destroy\\r\\n\\t\\t// (basically this is a arithmetic overflow check)\\r\\n\\t\\trequire(tokenBalances[_from] >= _value, \\\"burn amount exceeds balance\\\");\\r\\n\\r\\n\\t\\t// perform burn:\\r\\n\\t\\t// decrease `_from` address balance\\r\\n\\t\\ttokenBalances[_from] -= _value;\\r\\n\\r\\n\\t\\t// decrease total amount of tokens value\\r\\n\\t\\ttotalSupply -= _value;\\r\\n\\r\\n\\t\\t// fire a burnt event\\r\\n\\t\\temit Burnt(msg.sender, _from, _value);\\r\\n\\r\\n\\t\\t// emit an improved transfer event (arXiv:1907.00903)\\r\\n\\t\\temit Transfer(msg.sender, _from, address(0), _value);\\r\\n\\r\\n\\t\\t// fire ERC20 compliant transfer event\\r\\n\\t\\temit Transfer(_from, address(0), _value);\\r\\n\\t}\\r\\n\\r\\n\\t// ===== End: Minting/burning extension =====\\r\\n\\r\\n\\t// ===== Start: EIP-2612 functions =====\\r\\n\\r\\n\\t/**\\r\\n\\t * @inheritdoc EIP2612\\r\\n\\t *\\r\\n\\t * @dev Executes approve(_spender, _value) on behalf of the owner who EIP-712\\r\\n\\t *      signed the transaction, i.e. as if transaction sender is the EIP712 signer\\r\\n\\t *\\r\\n\\t * @dev Sets the `_value` as the allowance of `_spender` over `_owner` tokens,\\r\\n\\t *      given `_owner` EIP-712 signed approval\\r\\n\\t *\\r\\n\\t * @dev Inherits the Multiple Withdrawal Attack on ERC20 Tokens (arXiv:1907.00903)\\r\\n\\t *      vulnerability in the same way as ERC20 `approve`, use standard ERC20 workaround\\r\\n\\t *      if this might become an issue:\\r\\n\\t *      https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/edit\\r\\n\\t *\\r\\n\\t * @dev Emits `Approval` event(s) in the same way as `approve` does\\r\\n\\t *\\r\\n\\t * @dev Requires:\\r\\n\\t *     - `_spender` to be non-zero address\\r\\n\\t *     - `_exp` to be a timestamp in the future\\r\\n\\t *     - `v`, `r` and `s` to be a valid `secp256k1` signature from `_owner`\\r\\n\\t *        over the EIP712-formatted function arguments.\\r\\n\\t *     - the signature to use `_owner` current nonce (see `nonces`).\\r\\n\\t *\\r\\n\\t * @dev For more information on the signature format, see the\\r\\n\\t *      https://eips.ethereum.org/EIPS/eip-2612#specification\\r\\n\\t *\\r\\n\\t * @param _owner owner of the tokens to set approval on behalf of,\\r\\n\\t *      an address which signed the EIP-712 message\\r\\n\\t * @param _spender an address approved by the token owner\\r\\n\\t *      to spend some tokens on its behalf\\r\\n\\t * @param _value an amount of tokens spender `_spender` is allowed to\\r\\n\\t *      transfer on behalf of the token owner\\r\\n\\t * @param _exp signature expiration time (unix timestamp)\\r\\n\\t * @param v the recovery byte of the signature\\r\\n\\t * @param r half of the ECDSA signature pair\\r\\n\\t * @param s half of the ECDSA signature pair\\r\\n\\t */\\r\\n\\tfunction permit(address _owner, address _spender, uint256 _value, uint256 _exp, uint8 v, bytes32 r, bytes32 s) public override {\\r\\n\\t\\t// verify permits are enabled\\r\\n\\t\\trequire(isFeatureEnabled(FEATURE_EIP2612_PERMITS), \\\"EIP2612 permits are disabled\\\");\\r\\n\\r\\n\\t\\t// derive signer of the EIP712 Permit message, and\\r\\n\\t\\t// update the nonce for that particular signer to avoid replay attack!!! --------->>> \u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\\r\\n\\t\\taddress signer = __deriveSigner(abi.encode(PERMIT_TYPEHASH, _owner, _spender, _value, nonces[_owner]++, _exp), v, r, s);\\r\\n\\r\\n\\t\\t// perform message integrity and security validations\\r\\n\\t\\trequire(signer == _owner, \\\"invalid signature\\\");\\r\\n\\t\\trequire(block.timestamp < _exp, \\\"signature expired\\\");\\r\\n\\r\\n\\t\\t// delegate call to `__approve` - execute the logic required\\r\\n\\t\\t__approve(_owner, _spender, _value);\\r\\n\\t}\\r\\n\\r\\n\\t// ===== End: EIP-2612 functions =====\\r\\n\\r\\n\\t// ===== Start: EIP-3009 functions =====\\r\\n\\r\\n\\t/**\\r\\n\\t * @inheritdoc EIP3009\\r\\n\\t *\\r\\n\\t * @notice Checks if specified nonce was already used\\r\\n\\t *\\r\\n\\t * @dev Nonces are expected to be client-side randomly generated 32-byte values\\r\\n\\t *      unique to the authorizer's address\\r\\n\\t *\\r\\n\\t * @dev Alias for usedNonces(authorizer, nonce)\\r\\n\\t *\\r\\n\\t * @param _authorizer an address to check nonce for\\r\\n\\t * @param _nonce a nonce to check\\r\\n\\t * @return true if the nonce was used, false otherwise\\r\\n\\t */\\r\\n\\tfunction authorizationState(address _authorizer, bytes32 _nonce) public override view returns (bool) {\\r\\n\\t\\t// simply return the value from the mapping\\r\\n\\t\\treturn usedNonces[_authorizer][_nonce];\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @inheritdoc EIP3009\\r\\n\\t *\\r\\n\\t * @notice Execute a transfer with a signed authorization\\r\\n\\t *\\r\\n\\t * @param _from token sender and transaction authorizer\\r\\n\\t * @param _to token receiver\\r\\n\\t * @param _value amount to be transferred\\r\\n\\t * @param _validAfter signature valid after time (unix timestamp)\\r\\n\\t * @param _validBefore signature valid before time (unix timestamp)\\r\\n\\t * @param _nonce unique random nonce\\r\\n\\t * @param v the recovery byte of the signature\\r\\n\\t * @param r half of the ECDSA signature pair\\r\\n\\t * @param s half of the ECDSA signature pair\\r\\n\\t */\\r\\n\\tfunction transferWithAuthorization(\\r\\n\\t\\taddress _from,\\r\\n\\t\\taddress _to,\\r\\n\\t\\tuint256 _value,\\r\\n\\t\\tuint256 _validAfter,\\r\\n\\t\\tuint256 _validBefore,\\r\\n\\t\\tbytes32 _nonce,\\r\\n\\t\\tuint8 v,\\r\\n\\t\\tbytes32 r,\\r\\n\\t\\tbytes32 s\\r\\n\\t) public override {\\r\\n\\t\\t// ensure EIP-3009 transfers are enabled\\r\\n\\t\\trequire(isFeatureEnabled(FEATURE_EIP3009_TRANSFERS), \\\"EIP3009 transfers are disabled\\\");\\r\\n\\r\\n\\t\\t// derive signer of the EIP712 TransferWithAuthorization message\\r\\n\\t\\taddress signer = __deriveSigner(abi.encode(TRANSFER_WITH_AUTHORIZATION_TYPEHASH, _from, _to, _value, _validAfter, _validBefore, _nonce), v, r, s);\\r\\n\\r\\n\\t\\t// perform message integrity and security validations\\r\\n\\t\\trequire(signer == _from, \\\"invalid signature\\\");\\r\\n\\t\\trequire(block.timestamp > _validAfter, \\\"signature not yet valid\\\");\\r\\n\\t\\trequire(block.timestamp < _validBefore, \\\"signature expired\\\");\\r\\n\\r\\n\\t\\t// use the nonce supplied (verify, mark as used, emit event)\\r\\n\\t\\t__useNonce(_from, _nonce, false);\\r\\n\\r\\n\\t\\t// delegate call to `__transferFrom` - execute the logic required\\r\\n\\t\\t__transferFrom(signer, _from, _to, _value);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @inheritdoc EIP3009\\r\\n\\t *\\r\\n\\t * @notice Receive a transfer with a signed authorization from the payer\\r\\n\\t *\\r\\n\\t * @dev This has an additional check to ensure that the payee's address\\r\\n\\t *      matches the caller of this function to prevent front-running attacks.\\r\\n\\t *\\r\\n\\t * @param _from token sender and transaction authorizer\\r\\n\\t * @param _to token receiver\\r\\n\\t * @param _value amount to be transferred\\r\\n\\t * @param _validAfter signature valid after time (unix timestamp)\\r\\n\\t * @param _validBefore signature valid before time (unix timestamp)\\r\\n\\t * @param _nonce unique random nonce\\r\\n\\t * @param v the recovery byte of the signature\\r\\n\\t * @param r half of the ECDSA signature pair\\r\\n\\t * @param s half of the ECDSA signature pair\\r\\n\\t */\\r\\n\\tfunction receiveWithAuthorization(\\r\\n\\t\\taddress _from,\\r\\n\\t\\taddress _to,\\r\\n\\t\\tuint256 _value,\\r\\n\\t\\tuint256 _validAfter,\\r\\n\\t\\tuint256 _validBefore,\\r\\n\\t\\tbytes32 _nonce,\\r\\n\\t\\tuint8 v,\\r\\n\\t\\tbytes32 r,\\r\\n\\t\\tbytes32 s\\r\\n\\t) public override {\\r\\n\\t\\t// verify EIP3009 receptions are enabled\\r\\n\\t\\trequire(isFeatureEnabled(FEATURE_EIP3009_RECEPTIONS), \\\"EIP3009 receptions are disabled\\\");\\r\\n\\r\\n\\t\\t// derive signer of the EIP712 ReceiveWithAuthorization message\\r\\n\\t\\taddress signer = __deriveSigner(abi.encode(RECEIVE_WITH_AUTHORIZATION_TYPEHASH, _from, _to, _value, _validAfter, _validBefore, _nonce), v, r, s);\\r\\n\\r\\n\\t\\t// perform message integrity and security validations\\r\\n\\t\\trequire(signer == _from, \\\"invalid signature\\\");\\r\\n\\t\\trequire(block.timestamp > _validAfter, \\\"signature not yet valid\\\");\\r\\n\\t\\trequire(block.timestamp < _validBefore, \\\"signature expired\\\");\\r\\n\\t\\trequire(_to == msg.sender, \\\"access denied\\\");\\r\\n\\r\\n\\t\\t// use the nonce supplied (verify, mark as used, emit event)\\r\\n\\t\\t__useNonce(_from, _nonce, false);\\r\\n\\r\\n\\t\\t// delegate call to `__transferFrom` - execute the logic required\\r\\n\\t\\t__transferFrom(signer, _from, _to, _value);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @inheritdoc EIP3009\\r\\n\\t *\\r\\n\\t * @notice Attempt to cancel an authorization\\r\\n\\t *\\r\\n\\t * @param _authorizer transaction authorizer\\r\\n\\t * @param _nonce unique random nonce to cancel (mark as used)\\r\\n\\t * @param v the recovery byte of the signature\\r\\n\\t * @param r half of the ECDSA signature pair\\r\\n\\t * @param s half of the ECDSA signature pair\\r\\n\\t */\\r\\n\\tfunction cancelAuthorization(\\r\\n\\t\\taddress _authorizer,\\r\\n\\t\\tbytes32 _nonce,\\r\\n\\t\\tuint8 v,\\r\\n\\t\\tbytes32 r,\\r\\n\\t\\tbytes32 s\\r\\n\\t) public override {\\r\\n\\t\\t// derive signer of the EIP712 ReceiveWithAuthorization message\\r\\n\\t\\taddress signer = __deriveSigner(abi.encode(CANCEL_AUTHORIZATION_TYPEHASH, _authorizer, _nonce), v, r, s);\\r\\n\\r\\n\\t\\t// perform message integrity and security validations\\r\\n\\t\\trequire(signer == _authorizer, \\\"invalid signature\\\");\\r\\n\\r\\n\\t\\t// cancel the nonce supplied (verify, mark as used, emit event)\\r\\n\\t\\t__useNonce(_authorizer, _nonce, true);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Auxiliary function to verify structured EIP712 message signature and derive its signer\\r\\n\\t *\\r\\n\\t * @param abiEncodedTypehash abi.encode of the message typehash together with all its parameters\\r\\n\\t * @param v the recovery byte of the signature\\r\\n\\t * @param r half of the ECDSA signature pair\\r\\n\\t * @param s half of the ECDSA signature pair\\r\\n\\t */\\r\\n\\tfunction __deriveSigner(bytes memory abiEncodedTypehash, uint8 v, bytes32 r, bytes32 s) private view returns(address) {\\r\\n\\t\\t// build the EIP-712 hashStruct of the message\\r\\n\\t\\tbytes32 hashStruct = keccak256(abiEncodedTypehash);\\r\\n\\r\\n\\t\\t// calculate the EIP-712 digest \\\"\\\\x19\\\\x01\\\" \u2016 domainSeparator \u2016 hashStruct(message)\\r\\n\\t\\tbytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, hashStruct));\\r\\n\\r\\n\\t\\t// recover the address which signed the message with v, r, s\\r\\n\\t\\taddress signer = ECDSA.recover(digest, v, r, s);\\r\\n\\r\\n\\t\\t// return the signer address derived from the signature\\r\\n\\t\\treturn signer;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Auxiliary function to use/cancel the nonce supplied for a given authorizer:\\r\\n\\t *      1. Verifies the nonce was not used before\\r\\n\\t *      2. Marks the nonce as used\\r\\n\\t *      3. Emits an event that the nonce was used/cancelled\\r\\n\\t *\\r\\n\\t * @dev Set `_cancellation` to false (default) to use nonce,\\r\\n\\t *      set `_cancellation` to true to cancel nonce\\r\\n\\t *\\r\\n\\t * @dev It is expected that the nonce supplied is a randomly\\r\\n\\t *      generated uint256 generated by the client\\r\\n\\t *\\r\\n\\t * @param _authorizer an address to use/cancel nonce for\\r\\n\\t * @param _nonce random nonce to use\\r\\n\\t * @param _cancellation true to emit `AuthorizationCancelled`, false to emit `AuthorizationUsed` event\\r\\n\\t */\\r\\n\\tfunction __useNonce(address _authorizer, bytes32 _nonce, bool _cancellation) private {\\r\\n\\t\\t// verify nonce was not used before\\r\\n\\t\\trequire(!usedNonces[_authorizer][_nonce], \\\"invalid nonce\\\");\\r\\n\\r\\n\\t\\t// update the nonce state to \\\"used\\\" for that particular signer to avoid replay attack\\r\\n\\t\\tusedNonces[_authorizer][_nonce] = true;\\r\\n\\r\\n\\t\\t// depending on the usage type (use/cancel)\\r\\n\\t\\tif(_cancellation) {\\r\\n\\t\\t\\t// emit an event regarding the nonce cancelled\\r\\n\\t\\t\\temit AuthorizationCanceled(_authorizer, _nonce);\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\t// emit an event regarding the nonce used\\r\\n\\t\\t\\temit AuthorizationUsed(_authorizer, _nonce);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t// ===== End: EIP-3009 functions =====\\r\\n}\\r\\n\\r\\n\"\r\n    },\r\n    \"contracts/utils/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.7;\\r\\n\\r\\n/**\\r\\n * @title Access Control List\\r\\n *\\r\\n * @notice Access control smart contract provides an API to check\\r\\n *      if specific operation is permitted globally and/or\\r\\n *      if particular user has a permission to execute it.\\r\\n *\\r\\n * @notice It deals with two main entities: features and roles.\\r\\n *\\r\\n * @notice Features are designed to be used to enable/disable specific\\r\\n *      functions (public functions) of the smart contract for everyone.\\r\\n * @notice User roles are designed to restrict access to specific\\r\\n *      functions (restricted functions) of the smart contract to some users.\\r\\n *\\r\\n * @notice Terms \\\"role\\\", \\\"permissions\\\" and \\\"set of permissions\\\" have equal meaning\\r\\n *      in the documentation text and may be used interchangeably.\\r\\n * @notice Terms \\\"permission\\\", \\\"single permission\\\" implies only one permission bit set.\\r\\n *\\r\\n * @notice Access manager is a special role which allows to grant/revoke other roles.\\r\\n *      Access managers can only grant/revoke permissions which they have themselves.\\r\\n *      As an example, access manager with no other roles set can only grant/revoke its own\\r\\n *      access manager permission and nothing else.\\r\\n *\\r\\n * @notice Access manager permission should be treated carefully, as a super admin permission:\\r\\n *      Access manager with even no other permission can interfere with another account by\\r\\n *      granting own access manager permission to it and effectively creating more powerful\\r\\n *      permission set than its own.\\r\\n *\\r\\n * @dev Both current and OpenZeppelin AccessControl implementations feature a similar API\\r\\n *      to check/know \\\"who is allowed to do this thing\\\".\\r\\n * @dev Zeppelin implementation is more flexible:\\r\\n *      - it allows setting unlimited number of roles, while current is limited to 256 different roles\\r\\n *      - it allows setting an admin for each role, while current allows having only one global admin\\r\\n * @dev Current implementation is more lightweight:\\r\\n *      - it uses only 1 bit per role, while Zeppelin uses 256 bits\\r\\n *      - it allows setting up to 256 roles at once, in a single transaction, while Zeppelin allows\\r\\n *        setting only one role in a single transaction\\r\\n *\\r\\n * @dev This smart contract is designed to be inherited by other\\r\\n *      smart contracts which require access control management capabilities.\\r\\n *\\r\\n * @dev Access manager permission has a bit 255 set.\\r\\n *      This bit must not be used by inheriting contracts for any other permissions/features.\\r\\n *\\r\\n * @author Unblock Technolabs (Vijay Bhayani)\\r\\n */\\r\\ncontract AccessControl {\\r\\n\\t/**\\r\\n\\t * @notice Access manager is responsible for assigning the roles to users,\\r\\n\\t *      enabling/disabling global features of the smart contract\\r\\n\\t * @notice Access manager can add, remove and update user roles,\\r\\n\\t *      remove and update global features\\r\\n\\t *\\r\\n\\t * @dev Role ROLE_ACCESS_MANAGER allows modifying user roles and global features\\r\\n\\t * @dev Role ROLE_ACCESS_MANAGER has single bit at position 255 enabled\\r\\n\\t */\\r\\n\\tuint256 public constant ROLE_ACCESS_MANAGER = 0x8000000000000000000000000000000000000000000000000000000000000000;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Bitmask representing all the possible permissions (super admin role)\\r\\n\\t * @dev Has all the bits are enabled (2^256 - 1 value)\\r\\n\\t */\\r\\n\\tuint256 private constant FULL_PRIVILEGES_MASK = type(uint256).max; // before 0.8.0: uint256(-1) overflows to 0xFFFF...\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Privileged addresses with defined roles/permissions\\r\\n\\t * @notice In the context of ERC20/ERC721 tokens these can be permissions to\\r\\n\\t *      allow minting or burning tokens, transferring on behalf and so on\\r\\n\\t *\\r\\n\\t * @dev Maps user address to the permissions bitmask (role), where each bit\\r\\n\\t *      represents a permission\\r\\n\\t * @dev Bitmask 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\r\\n\\t *      represents all possible permissions\\r\\n\\t * @dev 'This' address mapping represents global features of the smart contract\\r\\n\\t */\\r\\n\\tmapping(address => uint256) public userRoles;\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Fired in updateRole() and updateFeatures()\\r\\n\\t *\\r\\n\\t * @param _by operator which called the function\\r\\n\\t * @param _to address which was granted/revoked permissions\\r\\n\\t * @param _requested permissions requested\\r\\n\\t * @param _actual permissions effectively set\\r\\n\\t */\\r\\n\\tevent RoleUpdated(address indexed _by, address indexed _to, uint256 _requested, uint256 _actual);\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Creates an access control instance,\\r\\n\\t *      setting contract creator to have full privileges\\r\\n\\t */\\r\\n\\tconstructor() {\\r\\n\\t\\t// contract creator has full privileges\\r\\n\\t\\tuserRoles[msg.sender] = FULL_PRIVILEGES_MASK;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Retrieves globally set of features enabled\\r\\n\\t *\\r\\n\\t * @dev Effectively reads userRoles role for the contract itself\\r\\n\\t *\\r\\n\\t * @return 256-bit bitmask of the features enabled\\r\\n\\t */\\r\\n\\tfunction features() public view returns(uint256) {\\r\\n\\t\\t// features are stored in 'this' address  mapping of `userRoles` structure\\r\\n\\t\\treturn userRoles[address(this)];\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Updates set of the globally enabled features (`features`),\\r\\n\\t *      taking into account sender's permissions\\r\\n\\t *\\r\\n\\t * @dev Requires transaction sender to have `ROLE_ACCESS_MANAGER` permission\\r\\n\\t * @dev Function is left for backward compatibility with older versions\\r\\n\\t *\\r\\n\\t * @param _mask bitmask representing a set of features to enable/disable\\r\\n\\t */\\r\\n\\tfunction updateFeatures(uint256 _mask) public {\\r\\n\\t\\t// delegate call to `updateRole`\\r\\n\\t\\tupdateRole(address(this), _mask);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Updates set of permissions (role) for a given user,\\r\\n\\t *      taking into account sender's permissions.\\r\\n\\t *\\r\\n\\t * @dev Setting role to zero is equivalent to removing an all permissions\\r\\n\\t * @dev Setting role to `FULL_PRIVILEGES_MASK` is equivalent to\\r\\n\\t *      copying senders' permissions (role) to the user\\r\\n\\t * @dev Requires transaction sender to have `ROLE_ACCESS_MANAGER` permission\\r\\n\\t *\\r\\n\\t * @param operator address of a user to alter permissions for or zero\\r\\n\\t *      to alter global features of the smart contract\\r\\n\\t * @param role bitmask representing a set of permissions to\\r\\n\\t *      enable/disable for a user specified\\r\\n\\t */\\r\\n\\tfunction updateRole(address operator, uint256 role) public {\\r\\n\\t\\t// caller must have a permission to update user roles\\r\\n\\t\\trequire(isSenderInRole(ROLE_ACCESS_MANAGER), \\\"access denied\\\");\\r\\n\\r\\n\\t\\t// evaluate the role and reassign it\\r\\n\\t\\tuserRoles[operator] = evaluateBy(msg.sender, userRoles[operator], role);\\r\\n\\r\\n\\t\\t// fire an event\\r\\n\\t\\temit RoleUpdated(msg.sender, operator, role, userRoles[operator]);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Determines the permission bitmask an operator can set on the\\r\\n\\t *      target permission set\\r\\n\\t * @notice Used to calculate the permission bitmask to be set when requested\\r\\n\\t *     in `updateRole` and `updateFeatures` functions\\r\\n\\t *\\r\\n\\t * @dev Calculated based on:\\r\\n\\t *      1) operator's own permission set read from userRoles[operator]\\r\\n\\t *      2) target permission set - what is already set on the target\\r\\n\\t *      3) desired permission set - what do we want set target to\\r\\n\\t *\\r\\n\\t * @dev Corner cases:\\r\\n\\t *      1) Operator is super admin and its permission set is `FULL_PRIVILEGES_MASK`:\\r\\n\\t *        `desired` bitset is returned regardless of the `target` permission set value\\r\\n\\t *        (what operator sets is what they get)\\r\\n\\t *      2) Operator with no permissions (zero bitset):\\r\\n\\t *        `target` bitset is returned regardless of the `desired` value\\r\\n\\t *        (operator has no authority and cannot modify anything)\\r\\n\\t *\\r\\n\\t * @dev Example:\\r\\n\\t *      Consider an operator with the permissions bitmask     00001111\\r\\n\\t *      is about to modify the target permission set          01010101\\r\\n\\t *      Operator wants to set that permission set to          00110011\\r\\n\\t *      Based on their role, an operator has the permissions\\r\\n\\t *      to update only lowest 4 bits on the target, meaning that\\r\\n\\t *      high 4 bits of the target set in this example is left\\r\\n\\t *      unchanged and low 4 bits get changed as desired:      01010011\\r\\n\\t *\\r\\n\\t * @param operator address of the contract operator which is about to set the permissions\\r\\n\\t * @param target input set of permissions to operator is going to modify\\r\\n\\t * @param desired desired set of permissions operator would like to set\\r\\n\\t * @return resulting set of permissions given operator will set\\r\\n\\t */\\r\\n\\tfunction evaluateBy(address operator, uint256 target, uint256 desired) public view returns(uint256) {\\r\\n\\t\\t// read operator's permissions\\r\\n\\t\\tuint256 p = userRoles[operator];\\r\\n\\r\\n\\t\\t// taking into account operator's permissions,\\r\\n\\t\\t// 1) enable the permissions desired on the `target`\\r\\n\\t\\ttarget |= p & desired;\\r\\n\\t\\t// 2) disable the permissions desired on the `target`\\r\\n\\t\\ttarget &= FULL_PRIVILEGES_MASK ^ (p & (FULL_PRIVILEGES_MASK ^ desired));\\r\\n\\r\\n\\t\\t// return calculated result\\r\\n\\t\\treturn target;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Checks if requested set of features is enabled globally on the contract\\r\\n\\t *\\r\\n\\t * @param required set of features to check against\\r\\n\\t * @return true if all the features requested are enabled, false otherwise\\r\\n\\t */\\r\\n\\tfunction isFeatureEnabled(uint256 required) public view returns(bool) {\\r\\n\\t\\t// delegate call to `__hasRole`, passing `features` property\\r\\n\\t\\treturn __hasRole(features(), required);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Checks if transaction sender `msg.sender` has all the permissions required\\r\\n\\t *\\r\\n\\t * @param required set of permissions (role) to check against\\r\\n\\t * @return true if all the permissions requested are enabled, false otherwise\\r\\n\\t */\\r\\n\\tfunction isSenderInRole(uint256 required) public view returns(bool) {\\r\\n\\t\\t// delegate call to `isOperatorInRole`, passing transaction sender\\r\\n\\t\\treturn isOperatorInRole(msg.sender, required);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Checks if operator has all the permissions (role) required\\r\\n\\t *\\r\\n\\t * @param operator address of the user to check role for\\r\\n\\t * @param required set of permissions (role) to check\\r\\n\\t * @return true if all the permissions requested are enabled, false otherwise\\r\\n\\t */\\r\\n\\tfunction isOperatorInRole(address operator, uint256 required) public view returns(bool) {\\r\\n\\t\\t// delegate call to `__hasRole`, passing operator's permissions (role)\\r\\n\\t\\treturn __hasRole(userRoles[operator], required);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Checks if role `actual` contains all the permissions required `required`\\r\\n\\t *\\r\\n\\t * @param actual existent role\\r\\n\\t * @param required required role\\r\\n\\t * @return true if actual has required role (all permissions), false otherwise\\r\\n\\t */\\r\\n\\tfunction __hasRole(uint256 actual, uint256 required) internal pure returns(bool) {\\r\\n\\t\\t// check the bitmask for the role required and return the result\\r\\n\\t\\treturn actual & required == required;\\r\\n\\t}\\r\\n}\\r\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initialHolder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"AuthorizationCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"AuthorizationUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_requested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_actual\",\"type\":\"uint256\"}],\"name\":\"RoleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CANCEL_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_BURNS_ON_BEHALF\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_EIP2612_PERMITS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_EIP3009_RECEPTIONS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_EIP3009_TRANSFERS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_ERC1363_APPROVALS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_ERC1363_TRANSFERS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_OWN_BURNS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_TRANSFERS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_TRANSFERS_ON_BEHALF\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_UNSAFE_TRANSFERS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RECEIVE_WITH_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_ACCESS_MANAGER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_ERC20_RECEIVER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_ERC20_SENDER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_TOKEN_CREATOR\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_TOKEN_DESTROYER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSFER_WITH_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authorizer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"authorizationState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authorizer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"cancelAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"desired\",\"type\":\"uint256\"}],\"name\":\"evaluateBy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"features\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"isFeatureEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"isOperatorInRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"isSenderInRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_exp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"receiveWithAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"transferWithAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"unsafeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mask\",\"type\":\"uint256\"}],\"name\":\"updateFeatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"updateRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRoles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "XCCERC20", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000f9c1e6ff7f9aa086502dd6a25ced3f66c93a0c73", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}