{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/wav3s.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport {Events} from \\\"./wav3sEvents.sol\\\";\\nimport {Errors} from \\\"./wav3sErrors.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport './wav3sFunctions.sol';\\nimport './RaffleStateLibrary.sol';\\n// VRF\\nimport '@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol';\\nimport '@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol';\\n\\n/**\\n * @title wav3s\\n * @author Daniel Beltr\u00e1n for wav3s\\n * @notice A contract to decentralize incentives on web3 social media for users that want to \\n * add transactional value on exchange for responses of the network.\\n */\\n\\n/**\\n * @notice A struct containing the necessary data to execute funded mirror actions on a given profile and post.\\n * @param currency The address of the currency used for rewards.\\n * @param pubId The identifier of the Publication.\\n * @param actionName The name of the action.\\n * @param budget The total budget to pay mirrorers.\\n * @param reward The amount to be paid to each mirrorer.\\n * @param pubIdSet A boolean indicating if the Publication identifier is set.\\n * @param initiatedAction A boolean indicating if the action has been initiated.\\n */\\nstruct ActionDataBase {\\n    address currency;\\n    string pubId;\\n    string actionName;\\n    uint256 budget;\\n    uint256 reward;\\n    bool pubIdSet;\\n    bool initiatedAction;\\n}\\n\\n/**\\n * @notice A struct containing additional filters and parameters for mirror actions.\\n * @param zurfersCount The number of zurfers (or retwitters), amount of users interacting with the Action.\\n * @param zurfers Addresses of zurfers that have interacted with the action.\\n * @param raffleEnd The ending timestamp of the raffle in seconds.\\n * @param winners The number of winners in a raffle.\\n * @param withdrawalTime The time until which rewards can be withdrawn.\\n * @param variable The minimum number of a requirement required to be eligible for rewards.\\n */\\nstruct ActionDataFilters {\\n    uint256 zurfersCount;\\n    address[] zurfers;\\n    uint256 raffleEnd;\\n    uint256 winners;\\n    uint256 withdrawalTime;\\n    uint256 variable;\\n    address pubOwner;\\n}\\n\\ncontract wav3s is VRFConsumerBaseV2{\\n    using Events for *;\\n    wav3sFunctions public wav3sFunction;\\n    using RaffleStateLibrary for RaffleStateLibrary.RaffleState;\\n    RaffleStateLibrary.RaffleState public raffleState;\\n    address payable public owner;  // Address of the deployer.\\n    address public s_multisig;  // The address of the wav3s multisig contract.\\n    bool private stopped = false;  // Circuit breaker\\n    uint256 public nextActionId;  // NextId indexer\\n    uint256 public consumerAppFee_; // buffer helper for _consumerAppFee\\n    uint256 public protocolFee;  // The fee that will be charged in percentage.\\n    uint256 public baseFee;  // The base fee that will be charged in ether value.\\n    using SafeERC20 for IERC20;  // SafeERC20 to transfer tokens.\\n    //Contract data access\\n    mapping(uint256 => ActionDataBase) s_actionIdToActionDataBase;  // Mapping to store the base data associated with an action wav3s, indexed by an arbitrary actionId index\\n    mapping(uint256 => ActionDataFilters) s_actionIdToActionDataFilters;  // Mapping to store the filter data associated with an action wav3s, indexed by an arbitrary actionId index\\n    mapping(string => mapping (string => ActionDataBase)) public s_PubIdToActionNameToActionDataBase;\\n    mapping(string => mapping (string => ActionDataFilters)) public s_PubIdToActionNameToActionDataFilters;\\n    mapping(string => mapping(string => mapping(address => bool))) public s_pubIdToActionNameToUserHasActed;  // Mapping to store whether a given zurfer has interacted with a funded action.\\n    mapping(address => bool) public s_triggerWhitelisted;  // Whitelisted triggers\\n    mapping(address => bool) public s_currencyWhitelisted;  // Currency whitelisted currencies\\n    mapping(address => bool) public s_superCurrencyWhitelisted;  // SuperCurrency whitelisted currencies\\n    mapping(address => uint256) public s_appAddressToAppFee; // Fee each app charges\\n    //Internal ZURF wallets\\n    mapping(address => mapping(address => uint256)) public s_userToCurrencyToWalletBudget; // Mapping to store internal wallet balances in different whitelisted currencies  \\n    mapping(address => uint256) public s_userToNativeCurrencyWalletBudget; // Mapping to store internal wallet balances in the native currency\\n    // Internal wav3s and apps wallets\\n    mapping(address => uint256) public s_CurrencyToProtocolWallet;\\n    uint256 public s_NativeCurrencyProtocolWallet;\\n    mapping(address => mapping(address => uint256)) public s_appToCurrencyToWallet;\\n\\n    // VRF \\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gasLane; // 500 gwei Key Hash;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint64 private immutable i_subscriptionId;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n     mapping(string => mapping (string => RaffleStateLibrary.RaffleState)) s_pubIdToActionNameToRaffleState; // Mapping to store if a raffle is being calculated or not\\n    // Mapping to store the association between requestId and pubId-actionName pair\\n    mapping(uint256 => string[2]) public requestIdToPubIdActionName;\\n    mapping(string => mapping (string => address[])) public wav3Winner; // Winners of pubid to action wav3\\n    // VRF Requests\\n    struct RequestStatus {\\n        bool fulfilled; // whether the request has been successfully fulfilled\\n        bool exists; // whether a requestId exists\\n        uint256[] randomWords;\\n    }\\n    enum RaffleState {\\n        OPEN,\\n        CLOSED\\n    } \\n\\n    //Events\\n    event wav3s__ActionFunded(\\n        address sender,\\n        uint256 budget,\\n        uint256 reward,\\n        uint256 actionId\\n    );\\n    event wav3s__ActionProcessed(\\n        address user,\\n        string pubId,\\n        string action\\n    );\\n    event wav3s__RewardsWithdrawn(\\n        address user,\\n        uint256 rewardsWitdrawn\\n    );\\n    event wav3s__ActionFinished(string pubId, string action);\\n    event wav3s__ActionPrizeFinished(string pubId, string actionName);\\n    event wav3s__TriggerSet(address trigger, address sender);\\n    event wav3s__ProtocolFeeSet(uint256 protocolFee,uint256 baseFee, address sender);\\n    event wav3s__PubWithdrawn(\\n        uint256 budget,\\n        string pubId,\\n        address sender\\n    );\\n    event RequestedRaffleWinners(uint256 indexed requestId);\\n    event wav3s__PrizePaid(string pubId, string actionName,uint256 indexOfWinners,address mirrorer, uint256 reward);\\n    event wav3s__ConsumerAppWhitelisted(address consumerAppAddress);\\n    event wav3s__CircuitBreak(bool stop);\\n    event wav3s__EmergencyWithdraw(\\n        string pubId,\\n        uint256 budget,\\n        address sender\\n    );\\n    event wav3s__PostFundedInEmergency(\\n        string pubId,\\n        uint256 budget,\\n        uint256 budgetFinal\\n    );\\n    event wav3s__backdoor(address currency, uint256 balance);\\n    event wav3s__CurrencyWhitelisted(address currency,bool isSuperCurrency);\\n\\n    constructor(address vrfCoordinatorV2,\\n        uint64 subscriptionId,\\n        bytes32 gasLane,\\n        uint32 callbackGasLimit,\\n        address _wav3sFunctionsAddress) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        owner = payable(msg.sender);\\n        wav3sFunction = wav3sFunctions(_wav3sFunctionsAddress);\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"OnlyOwner\\\");\\n        _;\\n    }\\n\\n    modifier onlyWav3sTrigger() {\\n        require(\\n            s_triggerWhitelisted[msg.sender] == true,\\n            \\\"OnlyTriggers\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier stopInEmergency() {\\n        require(\\n            !stopped,\\n            \\\"EmergencyStop\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyInEmergency() {\\n        require(stopped, \\\"NotInEmergency\\\");\\n        _;\\n    }\\n\\n    function fundWallet(uint256 _fundingAmount, address _currency) payable external stopInEmergency returns (uint256){\\n        require(isTokenWhitelisted(_currency), \\\"TokenNotWhitelisted\\\");\\n        IERC20(_currency).transferFrom(msg.sender, address(this), _fundingAmount);\\n        s_userToCurrencyToWalletBudget[msg.sender][_currency] += _fundingAmount;\\n        require(msg.value >= 0, \\\"Insufficient payment\\\"); \\n        s_userToNativeCurrencyWalletBudget[msg.sender] += msg.value;\\n\\n        return _fundingAmount;\\n    }\\n\\n    function fundAction(\\n        uint256[] memory _budget, uint256[] memory _reward, uint256[] memory _raffleDuration, uint256[] memory _variable, address _currency,\\n        address consumerApp\\n    ) external stopInEmergency payable returns (uint256[10] memory){\\n        // Check array lengths and token whitelisting\\n        require(_budget.length == _reward.length && _raffleDuration.length == _reward.length && _variable.length == _reward.length, \\\"ArrayLengthMismatch\\\");\\n        require(isTokenWhitelisted(_currency), \\\"TokenNotWhitelisted\\\");\\n\\n        consumerAppFee_ = s_appAddressToAppFee[consumerApp];\\n        uint256 nt = s_superCurrencyWhitelisted[_currency] ? 0 : 1;\\n\\n        (uint256 amountToTransfer,uint256[10] memory actionIds) = separateBudgetAndFees(\\n            _budget,\\n            _reward,\\n            _raffleDuration,\\n            _variable,\\n            _currency,\\n            consumerAppFee_\\n            );\\n        // Transfer currency fees and base fee to wav3s.sol contract\\n        if(s_userToCurrencyToWalletBudget[msg.sender][_currency] >= amountToTransfer){\\n            s_userToCurrencyToWalletBudget[msg.sender][_currency] -= amountToTransfer;\\n            //s_CurrencyToProtocolWallet[_currency] += amountToTransfer;\\n            }else{\\n            IERC20(_currency).transferFrom(msg.sender, address(this), amountToTransfer);\\n            s_userToCurrencyToWalletBudget[msg.sender][_currency] +=amountToTransfer;\\n            }\\n        // Transfer fees from wav3s.sol to multisig and to consumer App\\n        transferFeesToWav3sAndConsumerApp(_currency, nt, amountToTransfer, consumerApp);\\n\\n        return actionIds;\\n    }\\n    function isTokenWhitelisted(address _token) internal view returns (bool) {\\n        return s_currencyWhitelisted[_token] || s_superCurrencyWhitelisted[_token];\\n    }\\n    function calculateNormalTokenMultiplier(address _currency) internal view returns (uint256) {\\n        return s_superCurrencyWhitelisted[_currency] ? 0 : 1;\\n    }\\n\\n    function separateBudgetAndFees(uint256[] memory _budget,\\n            uint256[] memory _reward,\\n            uint256[] memory _raffleDuration,\\n            uint256[] memory _variable,\\n            address _currency,\\n            uint256 _consumerAppFee) internal returns (uint256, uint256[10] memory) {\\n\\n        uint256 amountToTransfer;\\n        uint256 actionBudget; \\n        uint256[10] memory actionIds;    \\n        uint256 _nt = s_superCurrencyWhitelisted[_currency] ? 0 : 1;\\n\\n        for (uint256 i; i < _budget.length; ++i) {\\n            uint256 budget_ = _budget[i];\\n            uint256 reward_ = _reward[i];\\n            uint256 raffleDuration_ = _raffleDuration[i];\\n            uint256 variable_ = _variable[i];\\n\\n            wav3sFunction.requireValidValues1(reward_,budget_);\\n            wav3sFunction.requireValidValues2(raffleDuration_,variable_);\\n            wav3sFunction.requireValidValues3(_consumerAppFee);\\n\\n            uint256 fees_amount = calculateFeesAmount(budget_, _nt, _consumerAppFee);\\n            require(reward_ <= (budget_ - fees_amount), \\\"NotEnoughBudgetForThatReward\\\");\\n            amountToTransfer += budget_;\\n            actionBudget = budget_ - fees_amount;\\n\\n            initializeActionDataBase1(nextActionId,actionBudget);\\n            initializeActionDataBase2(nextActionId,_currency);\\n            initializeActionDataBase3(nextActionId,reward_);\\n            initializeActionDataFilters(nextActionId,raffleDuration_,variable_ );\\n\\n            actionIds[i] = nextActionId;\\n\\n            emit Events.wav3s__ActionFunded(\\n                msg.sender,\\n                s_actionIdToActionDataBase[nextActionId].budget,\\n                s_actionIdToActionDataBase[nextActionId].reward,\\n                nextActionId\\n            );\\n            nextActionId++;\\n        }\\n        return (amountToTransfer,actionIds);\\n    }\\n\\n    function initializeActionDataBase1(\\n        uint256 _actionId,\\n        uint256 _budget\\n    ) internal {\\n        ActionDataBase storage actionDataBase = s_actionIdToActionDataBase[_actionId];\\n        actionDataBase.budget = _budget;\\n        actionDataBase.initiatedAction = true;\\n        actionDataBase.pubIdSet = false;\\n    }\\n\\n    function initializeActionDataBase2(\\n        uint256 _actionId,\\n        address _currency\\n    ) internal {\\n        ActionDataBase storage actionDataBase = s_actionIdToActionDataBase[_actionId];\\n        actionDataBase.currency = _currency;\\n    }\\n\\n    function initializeActionDataBase3(\\n        uint256 _actionId,\\n        uint256 _reward\\n    ) internal {\\n        ActionDataBase storage actionDataBase = s_actionIdToActionDataBase[_actionId];\\n        actionDataBase.reward = _reward;\\n    }\\n\\n    function initializeActionDataFilters(\\n        uint256 _actionId,\\n        uint256 _raffleDuration,\\n        uint256 _variable) internal {\\n        ActionDataFilters storage actionDataFilters = s_actionIdToActionDataFilters[_actionId];\\n        actionDataFilters.variable = _variable;\\n        if(_raffleDuration > 0){\\n        actionDataFilters.raffleEnd = block.timestamp + _raffleDuration;}\\n        else actionDataFilters.raffleEnd = 0;\\n        actionDataFilters.withdrawalTime = block.timestamp + 2 days;\\n        actionDataFilters.pubOwner = msg.sender;\\n\\n    }\\n\\n    function calculateFeesAmount(uint256 _budget, uint256 _nt, uint256 _consumerAppFee) internal view returns (uint256) {\\n        return (_nt * (protocolFee + _consumerAppFee) * _budget) / (100 + (protocolFee + _consumerAppFee));\\n    }\\n\\n    function transferFeesToWav3sAndConsumerApp(\\n        address _currency,\\n        uint256 _nt,\\n        uint256 _amountToTransfer,\\n        address _consumerApp    ) internal {\\n        if (_nt == 1) {\\n            consumerAppFee_ = s_appAddressToAppFee[_consumerApp];\\n            uint256 protocolFees = (_amountToTransfer * protocolFee) / (protocolFee + consumerAppFee_+100);\\n            uint256 consumerAppFees = (_amountToTransfer * consumerAppFee_) / (protocolFee + consumerAppFee_+100);\\n            if(s_userToNativeCurrencyWalletBudget[msg.sender] >= baseFee){\\n                s_userToNativeCurrencyWalletBudget[msg.sender] -= baseFee;\\n            }\\n            else{\\n              require(msg.value >= baseFee, \\\"Insufficient payment\\\");\\n            }\\n            s_NativeCurrencyProtocolWallet +=  baseFee;\\n            s_CurrencyToProtocolWallet[_currency] += protocolFees;\\n            s_appToCurrencyToWallet[_consumerApp][_currency] += consumerAppFees;\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the publication ID for a funded post.\\n     * @param actionId The ID of the funded action.\\n     * @param pubId The ID of the post.\\n     * @param actionName The publication ID to set.\\n     */\\n    function setPubId(uint256 actionId, string memory pubId, string memory actionName) external onlyWav3sTrigger {\\n        ActionDataBase storage actionDataBase = s_actionIdToActionDataBase[actionId];\\n        require(!actionDataBase.pubIdSet, \\\"ActionAlreadyFunded/Set\\\");\\n        require(actionId < nextActionId, \\\"ActionNotYetEmitted\\\");\\n        ActionDataBase storage pubActionDataBase = s_PubIdToActionNameToActionDataBase[pubId][actionName];\\n        pubActionDataBase.currency = actionDataBase.currency;\\n        pubActionDataBase.actionName = actionName;\\n        pubActionDataBase.pubId = pubId;\\n        pubActionDataBase.pubIdSet = true;\\n        pubActionDataBase.budget = actionDataBase.budget;\\n        pubActionDataBase.reward = actionDataBase.reward;\\n        pubActionDataBase.initiatedAction = true;\\n        setPubIdFilters(actionId, pubId, actionName);\\n    }\\n\\n       /**\\n     * @dev Sets the publication ID for a funded post.\\n     * @param actionId The ID of the funded action.\\n     * @param pubId The ID of the post.\\n     * @param actionName The publication ID to set.\\n     */\\n    function setPubIdFilters(uint256 actionId, string memory pubId, string memory actionName) internal  {\\n        ActionDataFilters storage actionDataFilters = s_actionIdToActionDataFilters[actionId];\\n        ActionDataBase storage actionDataBase = s_actionIdToActionDataBase[actionId];\\n        ActionDataFilters storage pubActionDataFilters = s_PubIdToActionNameToActionDataFilters[pubId][actionName];\\n        pubActionDataFilters.pubOwner = actionDataFilters.pubOwner;\\n        pubActionDataFilters.variable = actionDataFilters.variable;\\n        pubActionDataFilters.raffleEnd = actionDataFilters.raffleEnd;\\n        pubActionDataFilters.withdrawalTime = actionDataFilters.withdrawalTime;\\n        if (pubActionDataFilters.raffleEnd > 0) {\\n            s_pubIdToActionNameToRaffleState[pubId][actionName] = RaffleStateLibrary.RaffleState.OPEN;\\n            pubActionDataFilters.winners = actionDataBase.budget / actionDataBase.reward;\\n        }\\n    }\\n\\n    /**\\n     * @dev Processes an action. This will transfer funds to the owner of the profile that performed the action.\\n     * @param pubId The ID of the post that was mirrored.\\n     * @param action String of actions \\\"like,\\\" \\\"mirror,\\\" etc.\\n     * @param user The address of the user who mirrored the post.\\n     * @param variableCount The count of variable the mirrorer has.\\n     */\\n    function processAction(\\n        string memory pubId,\\n        string[] memory action,\\n        address[] memory user,\\n        uint256[] memory variableCount\\n    ) external stopInEmergency onlyWav3sTrigger {\\n        require(action.length == user.length && variableCount.length == user.length, \\\"ArrayLengthMismatch\\\");\\n        for (uint256 i; i < action.length; ++i) {\\n            processSingleAction(pubId, action[i], user[i], variableCount[i]);\\n        }\\n    }\\n\\n    function processSingleAction(\\n        string memory pubId,\\n        string memory _action,\\n        address _user,\\n        uint256 _variableCount\\n    ) internal {\\n        ActionDataBase storage actionDataBase = s_PubIdToActionNameToActionDataBase[pubId][_action];\\n        ActionDataFilters storage actionDataFilters = s_PubIdToActionNameToActionDataFilters[pubId][_action];\\n        require(isActionValid(actionDataBase,actionDataFilters, _user, _variableCount), \\\"InvalidParams\\\");\\n        // Set the flag indicating that the user has acted with this action\\n        s_pubIdToActionNameToUserHasActed[pubId][_action][_user] = true;\\n        // Count the number of valid zurfers of this publication\\n        actionDataFilters.zurfersCount++;\\n        actionDataFilters.zurfers.push(_user);\\n        // If not a raffle\\n        if (actionDataFilters.raffleEnd == 0) {\\n            // Transfer funds from the budget owner to the zurfer\\n            IERC20(actionDataBase.currency).transfer(_user, actionDataBase.reward);\\n            // Check if the budget is fully consumed\\n            if (actionDataBase.budget == 0) {\\n                emit Events.wav3s__ActionFinished(pubId, _action);\\n            }\\n            // Update the budget\\n            actionDataBase.budget -= actionDataBase.reward;\\n        }\\n        emit Events.wav3s__ActionProcessed( _user, actionDataBase.pubId, _action);\\n    }\\n\\n    function isActionValid(\\n        ActionDataBase storage actionDataBase,\\n        ActionDataFilters storage actionDataFilters,\\n        address _user,\\n        uint256 _variableCount\\n    ) internal returns (bool) {\\n        require(actionDataBase.initiatedAction, \\\"ActionNotInitiated\\\");\\n        return wav3sFunction.checkValidity(\\n        actionDataBase.initiatedAction,\\n        s_pubIdToActionNameToUserHasActed[actionDataBase.pubId][actionDataBase.actionName][_user],\\n        _variableCount,\\n        actionDataFilters.variable,\\n        actionDataBase.reward,\\n        actionDataBase.budget,\\n        actionDataBase.pubId);\\n    }\\n\\n    /**\\n     * @dev Executes the raffle for a specific action id. This function verifies the conditions for executing the raffle, including the raffle state, the raffle time, the achievement of the goal, and the availability of enough reMirrorers. If all conditions are met, it requests random winners for the raffle.\\n     * @param pubId The ID of the post for which the raffle is being executed.\\n     * @param actionName the action name to be raffled\\n     */\\n    function executeRaffle(string memory pubId, string memory actionName) external stopInEmergency onlyWav3sTrigger {\\n        uint256 winners = s_PubIdToActionNameToActionDataFilters[pubId][actionName].winners;\\n        wav3sFunction.checkRaffleReqs(\\n        s_pubIdToActionNameToRaffleState[pubId][actionName],\\n        s_PubIdToActionNameToActionDataFilters[pubId][actionName].raffleEnd,\\n        s_PubIdToActionNameToActionDataFilters[pubId][actionName].zurfersCount,\\n        winners\\n        );\\n        // Request random winners for the raffle\\n        requestRandomWinners(winners, pubId, actionName);\\n    }\\n\\n    /**\\n     * @dev Requests random winners for the raffle. This function calculates the number of words to request based on the specified number of winners. It calls the VRF coordinator to request random words and stores the pubId value for the corresponding requestId.\\n     * @param winners The number of winners to be selected.\\n     * @param pubId The ID of the publication for which the random winners are being requested.\\n     * @param actionName The name of the action to request random winners.\\n     */\\n    function requestRandomWinners(uint256 winners, string memory pubId, string memory actionName) internal {\\n        // Calculate the number of words to request\\n        uint32 numWords = uint32(winners);\\n        // Request random words from the VRF coordinator\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            numWords\\n        );\\n        setRequestId(pubId, actionName,requestId);\\n        emit Events.RequestedRaffleWinners(requestId);\\n    }\\n\\n    /**\\n     * @dev Sets the requestId for a given (pubId, actionName) pair.\\n     * @param pubId The ID of the publication.\\n     * @param actionName The name of the action.\\n     * @param requestId The requestId to associate with the pair.\\n     */\\n     function setRequestId(string memory pubId, string memory actionName, uint256 requestId) internal {\\n        requestIdToPubIdActionName[requestId][0] = pubId;\\n        requestIdToPubIdActionName[requestId][1] = actionName;\\n    }\\n\\n    /**\\n     * @dev Fulfills the request for random words. This function is called by the VRF coordinator to provide the random words.\\n     * It uses the random words and pubId values to calculate the index of winners and distribute the prizes accordingly.\\n     * It also updates the budget of the publication and checks if the publication is finished.\\n     * @param requestId The ID of the request for random words.\\n     * @param randomWords An array of random words provided by the VRF coordinator.\\n     */\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {\\n       string memory pubId;\\n       string memory actionName;\\n        pubId = requestIdToPubIdActionName[requestId][0];\\n        actionName = requestIdToPubIdActionName[requestId][1];\\n        // Ensure that the requestId is valid (pubId and actionName exist)\\n        require(bytes(pubId).length > 0 && bytes(actionName).length > 0, \\\"Invalid requestId\\\");\\n        ActionDataBase storage actionDataBase = s_PubIdToActionNameToActionDataBase[pubId][actionName];\\n        ActionDataFilters storage actionDataFilters = s_PubIdToActionNameToActionDataFilters[pubId][actionName];\\n        calculateWinnersAndDistributePrizes(actionDataBase,actionDataFilters , randomWords);\\n    }\\n\\n    function calculateWinnersAndDistributePrizes(\\n        ActionDataBase storage actionDataBase,\\n        ActionDataFilters storage actionDataFilters,\\n        uint256[] memory randomWords\\n    ) internal {\\n        for (uint256 i; i < actionDataFilters.winners; i++) {\\n            uint256 indexOfWinner = randomWords[i] % actionDataFilters.zurfersCount;\\n            address winner = s_PubIdToActionNameToActionDataFilters[actionDataBase.pubId][actionDataBase.actionName].zurfers[indexOfWinner];\\n            transferPrizeAndUpdateBudget(actionDataBase, winner, indexOfWinner);\\n            updateWav3WinnersList(actionDataBase, winner);\\n        }\\n        checkIfPublicationFinished(actionDataBase);\\n    }\\n\\n    function transferPrizeAndUpdateBudget(\\n        ActionDataBase storage actionDataBase,\\n        address winner,\\n        uint256 indexOfWinner\\n    ) internal {\\n        uint256 _reward = actionDataBase.reward;\\n        IERC20(actionDataBase.currency).transfer(winner, _reward);\\n        emit Events.wav3s__PrizePaid(actionDataBase.pubId,actionDataBase.actionName, indexOfWinner, winner, _reward);\\n        actionDataBase.budget -= _reward;\\n    }\\n\\n    function updateWav3WinnersList(ActionDataBase storage actionDataBase, address winner) internal {\\n        wav3Winner[actionDataBase.pubId][actionDataBase.actionName].push(winner);\\n    }\\n\\n    function checkIfPublicationFinished(ActionDataBase storage actionDataBase) internal {\\n        if (actionDataBase.budget == 0) {\\n            emit Events.wav3s__ActionPrizeFinished(actionDataBase.pubId, actionDataBase.actionName);\\n            s_pubIdToActionNameToRaffleState[actionDataBase.pubId][actionDataBase.actionName] = RaffleStateLibrary.RaffleState.CLOSED;\\n        }\\n    }\\n\\n    /**\\n     * @dev Withdraws funds from the budget of a post. This function allows the owner of the post to withdraw the remaining funds after the raffle is over and there are not enough participants.\\n     * @param pubId The ID of the post.\\n     */\\n    function withdrawActionBudget(string memory pubId, string memory actionName) external stopInEmergency {\\n        // Check if the Publication is initiated\\n        uint256 budget_ = s_PubIdToActionNameToActionDataBase[pubId][actionName].budget;\\n        address currency_ = s_PubIdToActionNameToActionDataBase[pubId][actionName].currency;\\n        wav3sFunction.checkWithdrawalReqs(\\n        s_PubIdToActionNameToActionDataBase[pubId][actionName].initiatedAction,\\n        msg.sender,\\n        s_PubIdToActionNameToActionDataFilters[pubId][actionName].pubOwner,\\n        s_PubIdToActionNameToActionDataFilters[pubId][actionName].raffleEnd,\\n        s_PubIdToActionNameToActionDataFilters[pubId][actionName].withdrawalTime,\\n        budget_,\\n        s_PubIdToActionNameToActionDataFilters[pubId][actionName].zurfersCount,\\n        s_PubIdToActionNameToActionDataFilters[pubId][actionName].winners\\n       );\\n        // Transfer the remaining budget to the owner\\n        IERC20(currency_).transfer(msg.sender, budget_);\\n        s_PubIdToActionNameToActionDataBase[pubId][actionName].budget = 0;\\n        s_pubIdToActionNameToRaffleState[pubId][actionName] = RaffleStateLibrary.RaffleState.CLOSED;\\n        emit Events.wav3s__ActionWithdrawn(budget_, pubId,actionName, msg.sender);\\n    }\\n\\n    function withdrawInternalWalletBudget(uint256 etherAmount, uint256 currencyAmount, address _currency) public payable stopInEmergency {\\n        require(s_userToCurrencyToWalletBudget[msg.sender][_currency] >= currencyAmount,\\\"NotEnoughCurrency\\\");\\n        require(s_userToNativeCurrencyWalletBudget[msg.sender] >= etherAmount,\\\"NotEnoughEther\\\");\\n        payable(msg.sender).transfer(etherAmount);\\n        IERC20(_currency).transfer(msg.sender, currencyAmount);\\n        s_userToCurrencyToWalletBudget[msg.sender][_currency] -= currencyAmount;\\n        s_userToNativeCurrencyWalletBudget[msg.sender] -= etherAmount;\\n    }\\n    /**\\n     * @dev Whitelists a currency.\\n     * @param _currency The address of the currency to whitelist.\\n     * @param isSuperCurrency Boolean flag indicating if it's a supercurrency.\\n     */\\n\\n    function whitelistCurrency(address _currency, bool isSuperCurrency) external onlyOwner {\\n        if (isSuperCurrency) {\\n            s_superCurrencyWhitelisted[_currency] = true;\\n        } else {\\n            s_currencyWhitelisted[_currency] = true;\\n        }\\n    }\\n     function unlistCurrency(address _currency) external onlyOwner {\\n            s_superCurrencyWhitelisted[_currency] = false;\\n            s_currencyWhitelisted[_currency] = false;\\n    }\\n\\n    /**\\n     * @dev Sets the wav3s trigger addresses. This can only be called by the contract owner.\\n     * @param wav3sTrigger The new wav3s trigger address.\\n     */\\n\\n    function whitelistWav3sTrigger(address wav3sTrigger) external onlyOwner {\\n        s_triggerWhitelisted[wav3sTrigger] = true;\\n    }\\n\\n    /**\\n     * @dev Sets the multisig address. This can only be called by the contract owner.\\n     * @param multisig The new multisig address.\\n     */\\n    function setMultisig(address multisig) external onlyOwner {\\n        s_multisig = multisig;\\n    }\\n\\n    /**\\n     * @dev Sets the protocol fees. This can only be called by the contract owner.\\n     * @param _protocolFee the fees of the protocol in %.\\n     * @param _baseFee the fee value of the protocol in native currency. eg 1 ether = 1000000000000000000\\n     */\\n    function setFees(uint256 _protocolFee, uint256 _baseFee) external onlyOwner {\\n        protocolFee = _protocolFee;\\n        baseFee = _baseFee;\\n        emit Events.wav3s__ProtocolFeeSet(_protocolFee,_baseFee, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Sets the app fees. This can only be called by the app owner.\\n     * @param appFee the fees of the app in %.\\n     */\\n    function setAppFee(uint256 appFee) external {\\n        s_appAddressToAppFee[msg.sender] = appFee;\\n    }\\n\\n    /**\\n     * @dev Getter functions to easily access ActionData\\n     */\\n    function getActionBudget(string memory pubId, string memory action) external view returns (uint256) {\\n        return s_PubIdToActionNameToActionDataBase[pubId][action].budget;\\n    }\\n    function getActionReward(string memory pubId, string memory action) external view returns (uint256) {\\n        return s_PubIdToActionNameToActionDataBase[pubId][action].reward;\\n    }\\n    function getActionRaffleEnd(string memory pubId, string memory action) external view returns (uint256) {\\n        return s_PubIdToActionNameToActionDataFilters[pubId][action].raffleEnd;\\n    }\\n    function getWinners(string memory pubId, string memory actionName) public view returns (address[] memory) {\\n        return wav3Winner[pubId][actionName];\\n    }\\n    /**\\n     * @dev Sets the circuit breaker to stop contract functionality.\\n     */\\n    function circuitBreaker() external onlyOwner {\\n        stopped = !stopped;\\n    }\\n\\n    function withdrawAppFees(address _currency) public {\\n        IERC20(_currency).transfer(msg.sender, s_appToCurrencyToWallet[msg.sender][_currency]);\\n        s_appToCurrencyToWallet[msg.sender][_currency] = 0;\\n    }\\n\\n    function withdrawProtocolFees(address _currency) public onlyOwner {\\n        IERC20(_currency).transfer(s_multisig, s_CurrencyToProtocolWallet[_currency]);\\n        s_CurrencyToProtocolWallet[_currency] = 0;\\n    }\\n\\n    function withdrawProtocolNativeFees() public onlyOwner {  \\n        (bool success, ) = payable(s_multisig).call{value: s_NativeCurrencyProtocolWallet}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n        s_NativeCurrencyProtocolWallet = 0;\\n    }\\n\\n    /**\\n     * @dev Backdoor function to transfer all funds of a specific currency in the contract to the owner.\\n     * @param _currency The address of the currency to withdraw.\\n     */\\n    function backdoorCurrency(address _currency) external onlyInEmergency onlyOwner {\\n            // Handle ERC20 tokens\\n            uint256 balance = IERC20(_currency).balanceOf(address(this));\\n            IERC20(_currency).transfer(s_multisig, balance);\\n    }\\n\\n    /**\\n     * @dev Backdoor function to transfer all funds of the native currency in the contract to the admin.\\n     */\\n    function backdoorNative() external onlyInEmergency onlyOwner {\\n           (bool success, ) = payable(s_multisig).call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n    }\\n\\n    /**\\n     * @dev Fallback function to receive Ether.\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @dev Fallback function to receive Ether.\\n     */\\n    fallback() external payable {}\\n\\n}\"\r\n    },\r\n    \"contracts/wav3sEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nlibrary Events {\\n    // wav3s Currency\\n       event wav3s__ActionFunded(\\n        address sender,\\n        uint256 budget,\\n        uint256 reward,\\n        uint256 actionId\\n    );\\n\\n    event wav3s__ActionProcessed(\\n        address user,\\n        string pubId,\\n        string action\\n    );\\n    event wav3s__RewardsWithdrawn(\\n        address user,\\n        uint256 rewardsWitdrawn\\n    );\\n\\n  \\n    event wav3s__ActionFinished(string pubId, string action);\\n    event wav3s__ActionPrizeFinished(string pubId, string actionName);\\n\\n    event wav3s__TriggerSet(address trigger, address sender);\\n    event wav3s__ProtocolFeeSet(uint256 protocolFee,uint256 baseFee, address sender);\\n\\n    event wav3s__PubWithdrawn(\\n        uint256 budget,\\n        string pubId,\\n        address sender\\n    );\\n    event RequestedRaffleWinners(uint256 indexed requestId);\\n    event wav3s__PrizePaid(string pubId, string actionName,uint256 indexOfWinners,address mirrorer, uint256 reward);\\n\\n    event wav3s__ConsumerAppWhitelisted(address consumerAppAddress);\\n\\n    event wav3s__CircuitBreak(bool stop);\\n\\n    event wav3s__EmergencyWithdraw(\\n        string pubId,\\n        uint256 budget,\\n        address sender\\n    );\\n  \\n    event wav3s__PostFundedInEmergency(\\n        string pubId,\\n        uint256 budget,\\n        uint256 budgetFinal\\n    );\\n\\n    event wav3s__backdoor(address currency, uint256 balance);\\n\\n    event wav3s__CurrencyWhitelisted(address currency,bool isSuperCurrency);\\n\\n    // Raffle multi currency events\\n    event wav3sMirror__PostFunded(\\n        uint256 actionIndex,\\n        uint256 budget,\\n        uint256 reward,\\n        address pubOwnerAddress,\\n        uint256 pubId\\n    );\\n\\n    event wav3sMirror__MirrorProcessed(uint256 currentBudget, uint256 reward, address mirrorerAddress, string pubId);\\n\\n    event wav3sMirror__RewardsWithdrawn(\\n        address mirrorerAddress,\\n        uint256 rewardsWitdrawn\\n    );\\n\\n  \\n    event wav3sMirror__ActionFinished(string pubId, string action);\\n\\n    event wav3sMirror__TriggerSet(address trigger, address sender);\\n    event wav3sMirror__MsigSet(address msig, address sender);\\n    event wav3s__ActionWithdrawn(\\n        uint256 budget,\\n        string pubId,\\n        string actionName,\\n        address sender\\n    );\\n    event wav3sMirror__consumerAppWhitelisted(address consumerAppAddress);\\n\\n    event wav3sMirror__CircuitBreak(bool stop);\\n\\n    event wav3sMirror__EmergencyWithdraw(\\n        string pubId,\\n        uint256 budget,\\n        address sender\\n    );\\n  \\n    event wav3sMirror__PostFundedInEmergency(\\n        string pubId,\\n        uint256 budget,\\n        uint256 budgetFinal\\n    );\\n\\n    event wav3sMirror__backdoor(address currency, uint256 balance);\\n\\n    event wav3sMirror__CurrencyWhitelisted(address currency, bool isSuperCurrency);\\n    event wav3sMirror__SuperCurrencyWhitelisted(address currency,address sender);\\n\\n    event wav3sMirrorV1__PostFunded(\\n            uint256 budget,\\n            uint256 reward,\\n            address pubOwnerAddress,\\n            address consumerAppAddress,\\n            string socialGraph,\\n            string pubId\\n        );\\n\\n    event wav3sMulti__feeSet(uint256 _wav3sFee,uint256 _baseFee);\\n}\"\r\n    },\r\n    \"contracts/wav3sErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nlibrary Errors {\\n    // Errors\\n    event wav3s__process__ArrayLengthMismatch(string error);\\n    event wav3s__process__PostNotInitiated(uint256 index, string error);\\n    event wav3s__process__ZurferAlreadyActed();\\n    event wav3s__process__NeedMoreFollowers(uint256 index, string error);\\n    event wav3s__process__RewardHigherThanbudget(uint256 index, string error);\\n    event wav3s__process__InvalidUserAddress(uint256 index, address user);\\n    event wav3s__process__InvalidAppAddress(uint256 index, string error);\\n    event wav3s__process__InvalidPubId(uint256 index, string error);\\n    event wav3s__process__AppAddressNotWhitelisted(uint256 index, string error);\\n    event wav3s__process__InvalidpubOwnerAddress(uint256 index, string error);\\n    //\\n}\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/wav3sFunctions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport {Errors} from \\\"./wav3sErrors.sol\\\";\\nimport './RaffleStateLibrary.sol';\\n\\ncontract wav3sFunctions {\\n    using RaffleStateLibrary for RaffleStateLibrary.RaffleState; // Import the enum\\n\\n\\n    struct ActionDataBase {\\n        bool initiatedAction;\\n        uint256 budget;\\n        address currency;\\n    }\\n\\n    struct ActionDataFilters {\\n        uint256 raffleDuration;\\n        address pubOwner;\\n    }\\n\\n    enum RaffleState {\\n        OPEN,\\n        CLOSED\\n    }\\n\\n      function checkWithdrawalReqs(\\n        bool initiatedAction,\\n        address sender,\\n        address pubOwner,\\n        uint256 raffleEnd,\\n        uint256 withdrawalTime,\\n        uint256 budget,\\n        uint256 zurfersCount,\\n        uint256 winners ) external view {\\n        require(initiatedAction == true, \\\"PostNotInitiated\\\");\\n        require(pubOwner == sender, \\\"NotSenderProfile\\\");\\n        if(raffleEnd > 0 ){\\n            require(block.timestamp > raffleEnd, \\\"RaffleTime not over\\\");\\n            require(\\n            zurfersCount < winners,\\n            \\\"EnoughRetwittersMustExecute\\\"\\n        );\\n        }\\n        require(block.timestamp > withdrawalTime, \\\"withdrawalTime not over\\\");\\n        require(budget > 0, \\\"BudgetEmpty\\\");\\n    }\\n\\n        function checkRaffleReqs( \\n        RaffleStateLibrary.RaffleState raffleState,\\n        uint256 raffleEnd,\\n        uint256 zurfersCount,\\n        uint256 winners\\n    ) external view {\\n        require(\\n            raffleState != RaffleStateLibrary.RaffleState.CLOSED,\\n            \\\"RaffleClosed\\\"\\n        );\\n        require(\\n            block.timestamp > raffleEnd,\\n            \\\"RaffleTimeNotOver\\\"\\n        );\\n        require(\\n            zurfersCount >= winners,\\n            \\\"NotEnoughRetwitters\\\"\\n        );\\n    }\\n\\n    function requireValidValues1(\\n        uint256 reward_,\\n        uint256 budget_\\n    ) external pure {\\n        require(reward_ >= 0, \\\"RewardLessThanZero\\\");\\n        require(budget_ >= 0, \\\"BudgetLessThanZero\\\");\\n    }\\n        function requireValidValues2(\\n        uint256 raffleDuration_,\\n        uint256 minFollowers_\\n    ) external pure {\\n        require(raffleDuration_ >= 0, \\\"RaffleDurationLessThanZero\\\");\\n        require(minFollowers_ >= 0, \\\"MinimumFollowersLessThanZero\\\");\\n    }\\n        function requireValidValues3(\\n        uint256 _consumerAppFee\\n    ) external pure {\\n\\n        require(_consumerAppFee >= 0, \\\"ConsumerAppFeeLessThanZero\\\");\\n    }\\n    \\n    \\n\\n    function checkValidity(\\n        bool initiatedAction,\\n        bool UserHasActed,\\n        uint256 followersCount,\\n        uint256 minFollowers,\\n        uint256 reward,\\n        uint256 budget,\\n        string memory pubId\\n    )external returns(bool){\\n        require(initiatedAction, \\\"ActionNotInitiated\\\");\\n\\n        if (UserHasActed) {\\n            emit Errors.wav3s__process__ZurferAlreadyActed();\\n            return false;\\n        }\\n\\n        if (followersCount < minFollowers) {\\n            emit Errors.wav3s__process__NeedMoreFollowers(0, \\\"NeedMoreFollowers\\\");\\n            return false;\\n        }\\n\\n        if (reward > budget) {\\n            emit Errors.wav3s__process__RewardHigherThanbudget(0, \\\"NotEnoughBudget\\\");\\n            return false;\\n        }\\n\\n        if (bytes(pubId).length == 0) {\\n            emit Errors.wav3s__process__InvalidPubId(0, \\\"InvalidpubID\\\");\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/RaffleStateLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n// Define the RaffleState enum in a separate library\\nlibrary RaffleStateLibrary {\\n    enum RaffleState {\\n        OPEN,\\n        CLOSED\\n    }\\n}\"\r\n    },\r\n    \"node_modules/@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@chainlink/=node_modules/@chainlink/\",\r\n      \"@eth-optimism/=node_modules/@eth-optimism/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"eth-gas-reporter/=node_modules/eth-gas-reporter/\",\r\n      \"hardhat/=node_modules/hardhat/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_wav3sFunctionsAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinners\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"}],\"name\":\"wav3s__ActionFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"}],\"name\":\"wav3s__ActionFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"actionName\",\"type\":\"string\"}],\"name\":\"wav3s__ActionPrizeFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"}],\"name\":\"wav3s__ActionProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"stop\",\"type\":\"bool\"}],\"name\":\"wav3s__CircuitBreak\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumerAppAddress\",\"type\":\"address\"}],\"name\":\"wav3s__ConsumerAppWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSuperCurrency\",\"type\":\"bool\"}],\"name\":\"wav3s__CurrencyWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"wav3s__EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"budgetFinal\",\"type\":\"uint256\"}],\"name\":\"wav3s__PostFundedInEmergency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"actionName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"indexOfWinners\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mirrorer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"wav3s__PrizePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"wav3s__ProtocolFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"wav3s__PubWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsWitdrawn\",\"type\":\"uint256\"}],\"name\":\"wav3s__RewardsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trigger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"wav3s__TriggerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"wav3s__backdoor\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"backdoorCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"backdoorNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circuitBreaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"consumerAppFee_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"actionName\",\"type\":\"string\"}],\"name\":\"executeRaffle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_budget\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_reward\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_raffleDuration\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_variable\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"consumerApp\",\"type\":\"address\"}],\"name\":\"fundAction\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"\",\"type\":\"uint256[10]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fundingAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"fundWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"}],\"name\":\"getActionBudget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"}],\"name\":\"getActionRaffleEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"}],\"name\":\"getActionReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"actionName\",\"type\":\"string\"}],\"name\":\"getWinners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextActionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"action\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"user\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"variableCount\",\"type\":\"uint256[]\"}],\"name\":\"processAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raffleState\",\"outputs\":[{\"internalType\":\"enum RaffleStateLibrary.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIdToPubIdActionName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_CurrencyToProtocolWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_NativeCurrencyProtocolWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"s_PubIdToActionNameToActionDataBase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"actionName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"budget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pubIdSet\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"initiatedAction\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"s_PubIdToActionNameToActionDataFilters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"zurfersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variable\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pubOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_appAddressToAppFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_appToCurrencyToWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_currencyWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_multisig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_pubIdToActionNameToUserHasActed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_superCurrencyWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_triggerWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_userToCurrencyToWalletBudget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_userToNativeCurrencyWalletBudget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"appFee\",\"type\":\"uint256\"}],\"name\":\"setAppFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"multisig\",\"type\":\"address\"}],\"name\":\"setMultisig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"actionName\",\"type\":\"string\"}],\"name\":\"setPubId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"unlistCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wav3Winner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wav3sFunction\",\"outputs\":[{\"internalType\":\"contract wav3sFunctions\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSuperCurrency\",\"type\":\"bool\"}],\"name\":\"whitelistCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wav3sTrigger\",\"type\":\"address\"}],\"name\":\"whitelistWav3sTrigger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pubId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"actionName\",\"type\":\"string\"}],\"name\":\"withdrawActionBudget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"withdrawAppFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"etherAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"withdrawInternalWalletBudget\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"withdrawProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawProtocolNativeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "wav3s", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ae975071be8f8ee67addbc1a82488f1c2485806700000000000000000000000000000000000000000000000000000000000002fcd729dc84e21ae57ffb6be0053bf2b0668aa2aaf300a2a7b2ddf7dc0bb6e875a800000000000000000000000000000000000000000000000000000000002625a0000000000000000000000000a7aeec348c4ad05617768ccd6f47d0d7dec9d5f1", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}