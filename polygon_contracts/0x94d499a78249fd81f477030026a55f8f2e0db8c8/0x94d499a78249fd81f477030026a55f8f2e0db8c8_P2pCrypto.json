{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/P2PCrypto/P2PCrypto.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface ICommissionsAddressRouter {\\n    function getAddress() external view returns (address);\\n}\\n\\ninterface ICommissionsRouter {\\n    function receiveFees(uint256, bytes32) external;\\n}\\n\\ncontract P2pCrypto is Ownable {\\n    event CreatedAd(\\n        address indexed exchanger,\\n        uint _fromToken,\\n        uint _toToken,\\n        uint amount,\\n        uint price\\n    );\\n    event EndedAd(address indexed exchanger, uint adId);\\n    event Purchase(\\n        address indexed client,\\n        address indexed exchanger,\\n        uint adId,\\n        uint amount,\\n        uint scost\\n    );\\n    enum TokenType {\\n        BRIN,\\n        BRING,\\n        BRLD,\\n        USDT,\\n        MATIC\\n    }\\n    struct Ad {\\n        address sellerAddress;\\n        bool isActive;\\n        uint id;\\n        uint balance;\\n        uint price;\\n        TokenType fromToken;\\n        TokenType toToken;\\n        uint createdAt;\\n        uint amountPerToken;\\n    }\\n\\n    struct SellerData {\\n        address sellerAddress;\\n        bool exists;\\n        bool isSelling;\\n        uint activeAdCount;\\n        Ad[] ads;\\n    }\\n    mapping(TokenType => IERC20) tokenList;\\n    using Counters for Counters.Counter;\\n    uint public BRINGOLD_FEE = 4 ether;\\n    uint public MAX_AD_COUNT = 50;\\n    address[] sellers;\\n    Counters.Counter private adsCount;\\n    mapping(address => SellerData) sellerInfo;\\n    address public subscriptionContract;\\n    ICommissionsAddressRouter commissionsAddressRouter;\\n\\n    constructor(\\n        address BRIN_ADDRESS,\\n        address BRING_ADDRESS,\\n        address BRLD_ADDRESS,\\n        address _USDT,\\n        address _commissionsAddressRouter,\\n        address _subscriptionContract\\n    ) {\\n        subscriptionContract = _subscriptionContract;\\n        tokenList[TokenType.BRIN] = IERC20(BRIN_ADDRESS);\\n        tokenList[TokenType.BRING] = IERC20(BRING_ADDRESS);\\n        tokenList[TokenType.BRLD] = IERC20(BRLD_ADDRESS);\\n        tokenList[TokenType.USDT] = IERC20(_USDT);\\n        commissionsAddressRouter = ICommissionsAddressRouter(\\n            _commissionsAddressRouter\\n        );\\n    }\\n\\n    function setFee(uint fee) external onlyOwner {\\n        require(fee > 0, \\\"zero\\\");\\n        BRINGOLD_FEE = fee;\\n    }\\n\\n    function getTokenType(uint value) internal pure returns (TokenType) {\\n        if (value == 0) {\\n            return TokenType.BRIN;\\n        } else if (value == 1) {\\n            return TokenType.BRING;\\n        } else if (value == 2) {\\n            return TokenType.BRLD;\\n        } else if (value == 3) {\\n            return TokenType.USDT;\\n        }\\n        return TokenType.MATIC;\\n    }\\n\\n    /**\\n    @dev Creates and ad with given parameters\\n    @param amount Amount of tokens to be funded to Ad(in wei)\\n    @param price Price of one token in wei\\n    */\\n    function createAd(\\n        uint amount,\\n        uint price,\\n        uint _fromToken,\\n        uint _toToken\\n    ) public {\\n        require(amount > 0, \\\"Amount must be greater than zero\\\");\\n        require(price > 0, \\\"Price must be greater than zero\\\");\\n        require(\\n            _fromToken == 0 || _fromToken == 1 || _fromToken == 2,\\n            \\\"invalid fromToken type\\\"\\n        );\\n        uint amountPerToken;\\n        TokenType fromToken = getTokenType(_fromToken);\\n        TokenType toToken = getTokenType(_toToken);\\n        if ((_fromToken == 0 && _toToken == 2) || _toToken == 1) {\\n            require(\\n                getRealCost(amount, fromToken) % price == 0,\\n                \\\"price not divisible\\\"\\n            );\\n            amountPerToken = getRealCost(amount, fromToken) / price;\\n        }\\n        if (isCrystalMember(msg.sender)) {\\n            require(\\n                _toToken == 0 ||\\n                    _toToken == 1 ||\\n                    _toToken == 2 ||\\n                    _toToken == 3 ||\\n                    _toToken == 4,\\n                \\\"invalid toToken type\\\"\\n            );\\n        } else {\\n            require(\\n                _toToken == 0 || _toToken == 1 || _toToken == 2,\\n                \\\"invalid toToken type\\\"\\n            );\\n        }\\n\\n        require(fromToken != toToken, \\\"invalid token types\\\");\\n\\n        if (!sellerInfo[msg.sender].exists) {\\n            sellers.push(msg.sender);\\n        }\\n        require(sellerInfo[msg.sender].activeAdCount < MAX_AD_COUNT, \\\"max ads\\\");\\n        if (fromToken == TokenType.BRIN) {\\n            tokenList[fromToken].transferFrom(\\n                msg.sender,\\n                address(this),\\n                amount + BRINGOLD_FEE\\n            );\\n        } else {\\n            tokenList[fromToken].transferFrom(\\n                msg.sender,\\n                address(this),\\n                amount\\n            );\\n            tokenList[TokenType.BRIN].transferFrom(\\n                msg.sender,\\n                address(this),\\n                BRINGOLD_FEE\\n            );\\n        }\\n\\n        sellerInfo[msg.sender].isSelling = true;\\n        sellerInfo[msg.sender].sellerAddress = msg.sender;\\n        sellerInfo[msg.sender].exists = true;\\n        sellerInfo[msg.sender].activeAdCount++;\\n        sellerInfo[msg.sender].ads.push(\\n            Ad(\\n                msg.sender,\\n                true,\\n                sellerInfo[msg.sender].ads.length,\\n                amount,\\n                price,\\n                fromToken,\\n                toToken,\\n                block.timestamp,\\n                amountPerToken\\n            )\\n        );\\n        adsCount.increment();\\n        transferFees();\\n        emit CreatedAd(msg.sender, _fromToken, _toToken, amount, price);\\n    }\\n\\n    function transferFees() internal {\\n        address commissionsAddress = commissionsAddressRouter.getAddress();\\n        tokenList[TokenType.BRIN].approve(commissionsAddress, BRINGOLD_FEE);\\n        ICommissionsRouter(commissionsAddress).receiveFees(\\n            BRINGOLD_FEE,\\n            bytes32(\\\"TX\\\")\\n        );\\n    }\\n\\n    function setMaxAdCount(uint adCount) external onlyOwner {\\n        MAX_AD_COUNT = adCount;\\n    }\\n\\n    /**\\n    @dev Add funds to an active ad\\n    @param amount Amount of tokens to be funded to Ad\\n    @param id Id of ad the funds to be added\\n    */\\n    function addFunds(uint amount, uint id) public {\\n        require(sellerInfo[msg.sender].ads[id].isActive, \\\"Ad does not exist\\\");\\n        require(id <= sellerInfo[msg.sender].ads.length, \\\"notExist\\\");\\n        require(sellerInfo[msg.sender].ads[id].isActive == true, \\\"notActive\\\");\\n        TokenType fromToken = sellerInfo[msg.sender].ads[id].fromToken;\\n\\n        tokenList[fromToken].transferFrom(msg.sender, address(this), amount);\\n\\n        sellerInfo[msg.sender].ads[id].balance =\\n            sellerInfo[msg.sender].ads[id].balance +\\n            amount;\\n    }\\n\\n    /**\\n    @dev Returns ads of caller of this function\\n    */\\n    function getMyAds() public view returns (Ad[] memory) {\\n        return sellerInfo[msg.sender].ads;\\n    }\\n\\n    /**\\n    @dev Returns ads of given seller\\n    @param seller Wallet address of seller\\n    */\\n    function getAdsByAddress(address seller) public view returns (Ad[] memory) {\\n        return sellerInfo[seller].ads;\\n    }\\n\\n    /**\\n    @dev Returns an ad with given seller and adId\\n    @param seller Wallet address of seller\\n    @param id Id of ad\\n    */\\n    function getAd(address seller, uint id) public view returns (Ad memory) {\\n        //add require to get error\\n        return sellerInfo[seller].ads[id];\\n    }\\n\\n    /**\\n    @dev Removes an ad and returns tokens in ad to seller\\n    @param adId Id of ad\\n    */\\n    function endAd(uint adId) public {\\n        address seller = msg.sender;\\n        require(adId <= sellerInfo[seller].ads.length, \\\"notExist\\\");\\n        require(sellerInfo[seller].ads[adId].isActive == true, \\\"notActive\\\");\\n        tokenList[sellerInfo[seller].ads[adId].fromToken].transfer(\\n            seller,\\n            sellerInfo[seller].ads[adId].balance\\n        );\\n        sellerInfo[seller].ads[adId].isActive = false;\\n        sellerInfo[seller].activeAdCount--;\\n        adsCount.decrement();\\n        emit EndedAd(seller, adId);\\n    }\\n\\n    /**\\n    @dev Buyer buys tokens from sellers ad\\n    @param seller Wallet address of seller\\n    @param adId Id of ad\\n    @param amount amount of tokens to buy\\n    */\\n    function buy(address seller, uint adId, uint amount) public payable {\\n        require(adId <= sellerInfo[seller].ads.length, \\\"could not find ad\\\");\\n        require(\\n            sellerInfo[seller].ads[adId].isActive == true,\\n            \\\"ad is not active\\\"\\n        );\\n        require(\\n            sellerInfo[seller].ads[adId].balance >= amount,\\n            \\\"Insufficient Ad Balance\\\"\\n        );\\n        require(seller != address(0), \\\"seller cannot be address zero\\\");\\n\\n        TokenType _toToken = sellerInfo[seller].ads[adId].toToken;\\n        uint cost;\\n        if (\\n            (sellerInfo[seller].ads[adId].fromToken == TokenType.BRIN &&\\n                _toToken == TokenType.BRLD) || _toToken == TokenType.BRING\\n        ) {\\n            require(\\n                getRealCost(amount, sellerInfo[seller].ads[adId].fromToken) %\\n                    sellerInfo[seller].ads[adId].amountPerToken ==\\n                    0,\\n                \\\"amount not divisible\\\"\\n            );\\n            cost = amount / sellerInfo[seller].ads[adId].amountPerToken;\\n        } else {\\n            cost = amount * sellerInfo[seller].ads[adId].price;\\n        }\\n\\n        if (!isCrystalMember(msg.sender)) {\\n            require(\\n                _toToken != TokenType.MATIC && _toToken != TokenType.USDT,\\n                \\\"invalid toToken type\\\"\\n            );\\n            tokenList[TokenType.BRIN].transferFrom(\\n                msg.sender,\\n                address(this),\\n                BRINGOLD_FEE\\n            );\\n            transferFees();\\n        }\\n\\n        uint realCost = getRealCost(\\n            cost,\\n            sellerInfo[seller].ads[adId].fromToken\\n        );\\n        if (_toToken == TokenType.MATIC) {\\n            _validateNativeAmount(realCost);\\n            (bool sent, ) = payable(seller).call{value: realCost}(\\\"\\\");\\n            require(sent, \\\"Failed to send Ether\\\");\\n        } else {\\n            IERC20 toToken = tokenList[_toToken];\\n            toToken.transferFrom(msg.sender, seller, realCost);\\n        }\\n        IERC20 fromToken = tokenList[sellerInfo[seller].ads[adId].fromToken];\\n        fromToken.transfer(msg.sender, amount);\\n        sellerInfo[seller].ads[adId].balance =\\n            sellerInfo[seller].ads[adId].balance -\\n            amount;\\n\\n        if (sellerInfo[seller].ads[adId].balance == 0) {\\n            sellerInfo[seller].ads[adId].isActive = false;\\n            sellerInfo[seller].activeAdCount--;\\n            adsCount.decrement();\\n        }\\n        emit Purchase(msg.sender, seller, adId, amount, realCost);\\n    }\\n\\n    function getRealCost(\\n        uint cost,\\n        TokenType tokenType\\n    ) internal pure returns (uint) {\\n        if (tokenType == TokenType.BRIN) {\\n            require(cost >= 1 ether, \\\"amount too small\\\");\\n            return cost / 1 ether;\\n        }\\n        return cost;\\n    }\\n\\n    /**\\n    @dev Returns all active ads in market\\n    */\\n    function getAllActiveAds() public view returns (Ad[] memory) {\\n        uint count = adsCount.current();\\n        Ad[] memory ads = new Ad[](count);\\n        uint currentIndex = 0;\\n        for (uint i = 0; i < sellers.length; i++) {\\n            if (sellerInfo[sellers[i]].ads.length > 0) {\\n                for (uint k = 0; k < sellerInfo[sellers[i]].ads.length; k++) {\\n                    if (sellerInfo[sellers[i]].ads[k].isActive) {\\n                        ads[currentIndex] = sellerInfo[sellers[i]].ads[k];\\n                        currentIndex++;\\n                    }\\n                }\\n            }\\n        }\\n        return ads;\\n    }\\n\\n    function isCrystalMember(address account) public view returns (bool) {\\n        (bool success, bytes memory returnBytes) = subscriptionContract\\n            .staticcall(\\n                abi.encodeWithSignature(\\n                    \\\"getSubscriptionNameOfAccount(address)\\\",\\n                    account\\n                )\\n            );\\n        if (success) {\\n            bytes32 subscriptionType = abi.decode(returnBytes, (bytes32));\\n            if (bytes32(\\\"CRYSTAL\\\") == subscriptionType) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function _validateNativeAmount(uint amount) private view {\\n        require(msg.value == amount, \\\"wrong matic amount\\\");\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"BRIN_ADDRESS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"BRING_ADDRESS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"BRLD_ADDRESS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_commissionsAddressRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_subscriptionContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exchanger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"CreatedAd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exchanger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adId\",\"type\":\"uint256\"}],\"name\":\"EndedAd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exchanger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scost\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BRINGOLD_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_AD_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"addFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"adId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fromToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toToken\",\"type\":\"uint256\"}],\"name\":\"createAd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adId\",\"type\":\"uint256\"}],\"name\":\"endAd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getAd\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sellerAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"enum P2pCrypto.TokenType\",\"name\":\"fromToken\",\"type\":\"uint8\"},{\"internalType\":\"enum P2pCrypto.TokenType\",\"name\":\"toToken\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountPerToken\",\"type\":\"uint256\"}],\"internalType\":\"struct P2pCrypto.Ad\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"getAdsByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sellerAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"enum P2pCrypto.TokenType\",\"name\":\"fromToken\",\"type\":\"uint8\"},{\"internalType\":\"enum P2pCrypto.TokenType\",\"name\":\"toToken\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountPerToken\",\"type\":\"uint256\"}],\"internalType\":\"struct P2pCrypto.Ad[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllActiveAds\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sellerAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"enum P2pCrypto.TokenType\",\"name\":\"fromToken\",\"type\":\"uint8\"},{\"internalType\":\"enum P2pCrypto.TokenType\",\"name\":\"toToken\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountPerToken\",\"type\":\"uint256\"}],\"internalType\":\"struct P2pCrypto.Ad[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyAds\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sellerAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"enum P2pCrypto.TokenType\",\"name\":\"fromToken\",\"type\":\"uint8\"},{\"internalType\":\"enum P2pCrypto.TokenType\",\"name\":\"toToken\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountPerToken\",\"type\":\"uint256\"}],\"internalType\":\"struct P2pCrypto.Ad[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isCrystalMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adCount\",\"type\":\"uint256\"}],\"name\":\"setMaxAdCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "P2pCrypto", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000bc0b7de316f4e57c677370ccd3a36697d6fc5de2000000000000000000000000b67b696a7f55a52723d80f62bb5f8532abdbc67400000000000000000000000009a89f63023ac7ea03c8e8810a95e19ef150e2f2000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f00000000000000000000000064c156b1741991a3cb823f827c3546778130d75300000000000000000000000001924e39142f48525dd0d269002d0474cc41205d", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}