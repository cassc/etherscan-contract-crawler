{"SourceCode": "// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns (address payable) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns (bytes memory) {\r\n\t\tthis;\r\n\t\t// silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin/contracts/introspection/IERC165.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n\t/**\r\n\t * @dev Returns true if this contract implements the interface defined by\r\n\t * `interfaceId`. See the corresponding\r\n\t * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n\t * to learn more about how these ids are created.\r\n\t *\r\n\t * This function call must use less than 30 000 gas.\r\n\t */\r\n\tfunction supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n\t/**\r\n\t * @dev Emitted when `tokenId` token is transfered from `from` to `to`.\r\n\t */\r\n\tevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n\t/**\r\n\t * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n\t */\r\n\tevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n\t/**\r\n\t * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n\t */\r\n\tevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n\t/**\r\n\t * @dev Returns the number of tokens in ``owner``'s account.\r\n\t */\r\n\tfunction balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n\t/**\r\n\t * @dev Returns the owner of the `tokenId` token.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `tokenId` must exist.\r\n\t */\r\n\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n\t/**\r\n\t * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n\t * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `from` cannot be the zero address.\r\n\t * - `to` cannot be the zero address.\r\n\t * - `tokenId` token must exist and be owned by `from`.\r\n\t * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n\t/**\r\n\t * @dev Transfers `tokenId` token from `from` to `to`.\r\n\t *\r\n\t * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `from` cannot be the zero address.\r\n\t * - `to` cannot be the zero address.\r\n\t * - `tokenId` token must be owned by `from`.\r\n\t * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n\t/**\r\n\t * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n\t * The approval is cleared when the token is transferred.\r\n\t *\r\n\t * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The caller must own the token or be an approved operator.\r\n\t * - `tokenId` must exist.\r\n\t *\r\n\t * Emits an {Approval} event.\r\n\t */\r\n\tfunction approve(address to, uint256 tokenId) external;\r\n\r\n\t/**\r\n\t * @dev Returns the account approved for `tokenId` token.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `tokenId` must exist.\r\n\t */\r\n\tfunction getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n\t/**\r\n\t * @dev Approve or remove `operator` as an operator for the caller.\r\n\t * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The `operator` cannot be the caller.\r\n\t *\r\n\t * Emits an {ApprovalForAll} event.\r\n\t */\r\n\tfunction setApprovalForAll(address operator, bool _approved) external;\r\n\r\n\t/**\r\n\t * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n\t *\r\n\t * See {setApprovalForAll}\r\n\t */\r\n\tfunction isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n\t/**\r\n\t  * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n\t  *\r\n\t  * Requirements:\r\n\t  *\r\n\t * - `from` cannot be the zero address.\r\n\t * - `to` cannot be the zero address.\r\n\t  * - `tokenId` token must exist and be owned by `from`.\r\n\t  * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n\t  * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n\t  *\r\n\t  * Emits a {Transfer} event.\r\n\t  */\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n\r\n\t/**\r\n\t * @dev Returns the token collection name.\r\n\t */\r\n\tfunction name() external view returns (string memory);\r\n\r\n\t/**\r\n\t * @dev Returns the token collection symbol.\r\n\t */\r\n\tfunction symbol() external view returns (string memory);\r\n\r\n\t/**\r\n\t * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n\t */\r\n\tfunction tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n\r\n\t/**\r\n\t * @dev Returns the total amount of tokens stored by the contract.\r\n\t */\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n\t * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n\t */\r\n\tfunction tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n\t/**\r\n\t * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n\t * Use along with {totalSupply} to enumerate all tokens.\r\n\t */\r\n\tfunction tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n\t/**\r\n\t * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n\t * by `operator` from `from`, this function is called.\r\n\t *\r\n\t * It must return its Solidity selector to confirm the token transfer.\r\n\t * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n\t *\r\n\t * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n\t */\r\n\tfunction onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\r\n\texternal returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/introspection/ERC165.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts may inherit from this and call {_registerInterface} to declare\r\n * their support of an interface.\r\n */\r\ncontract ERC165 is IERC165 {\r\n\t/*\r\n\t * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n\t */\r\n\tbytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n\t/**\r\n\t * @dev Mapping of interface ids to whether or not it's supported.\r\n\t */\r\n\tmapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n\tconstructor () internal {\r\n\t\t// Derived contracts need only register support for their own interfaces,\r\n\t\t// we register support for ERC165 itself here\r\n\t\t_registerInterface(_INTERFACE_ID_ERC165);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC165-supportsInterface}.\r\n\t *\r\n\t * Time complexity O(1), guaranteed to always use less than 30 000 gas.\r\n\t */\r\n\tfunction supportsInterface(bytes4 interfaceId) public view override returns (bool) {\r\n\t\treturn _supportedInterfaces[interfaceId];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Registers the contract as an implementer of the interface defined by\r\n\t * `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n\t * registering its interface id is not required.\r\n\t *\r\n\t * See {IERC165-supportsInterface}.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n\t */\r\n\tfunction _registerInterface(bytes4 interfaceId) internal virtual {\r\n\t\trequire(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n\t\t_supportedInterfaces[interfaceId] = true;\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n\t/**\r\n\t * @dev Returns the addition of two unsigned integers, reverting on\r\n\t * overflow.\r\n\t *\r\n\t * Counterpart to Solidity's `+` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Addition cannot overflow.\r\n\t */\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the subtraction of two unsigned integers, reverting on\r\n\t * overflow (when the result is negative).\r\n\t *\r\n\t * Counterpart to Solidity's `-` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Subtraction cannot overflow.\r\n\t */\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n\t * overflow (when the result is negative).\r\n\t *\r\n\t * Counterpart to Solidity's `-` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Subtraction cannot overflow.\r\n\t */\r\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b <= a, errorMessage);\r\n\t\tuint256 c = a - b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the multiplication of two unsigned integers, reverting on\r\n\t * overflow.\r\n\t *\r\n\t * Counterpart to Solidity's `*` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Multiplication cannot overflow.\r\n\t */\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\t\t// benefit is lost if 'b' is also tested.\r\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the integer division of two unsigned integers. Reverts on\r\n\t * division by zero. The result is rounded towards zero.\r\n\t *\r\n\t * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\t * uses an invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn div(a, b, \"SafeMath: division by zero\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n\t * division by zero. The result is rounded towards zero.\r\n\t *\r\n\t * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\t * uses an invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b > 0, errorMessage);\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\t * Reverts when dividing by zero.\r\n\t *\r\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\t * invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn mod(a, b, \"SafeMath: modulo by zero\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\t * Reverts with custom message when dividing by zero.\r\n\t *\r\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\t * invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b != 0, errorMessage);\r\n\t\treturn a % b;\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n\t/**\r\n\t * @dev Returns true if `account` is a contract.\r\n\t *\r\n\t * [IMPORTANT]\r\n\t * ====\r\n\t * It is unsafe to assume that an address for which this function returns\r\n\t * false is an externally-owned account (EOA) and not a contract.\r\n\t *\r\n\t * Among others, `isContract` will return false for the following\r\n\t * types of addresses:\r\n\t *\r\n\t *  - an externally-owned account\r\n\t *  - a contract in construction\r\n\t *  - an address where a contract will be created\r\n\t *  - an address where a contract lived, but was destroyed\r\n\t * ====\r\n\t */\r\n\tfunction isContract(address account) internal view returns (bool) {\r\n\t\t// According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n\t\t// and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n\t\t// for accounts without code, i.e. `keccak256('')`\r\n\t\tbytes32 codehash;\r\n\t\tbytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n\t\t// solhint-disable-next-line no-inline-assembly\r\n\t\tassembly {codehash := extcodehash(account)}\r\n\t\treturn (codehash != accountHash && codehash != 0x0);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n\t * `recipient`, forwarding all available gas and reverting on errors.\r\n\t *\r\n\t * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n\t * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n\t * imposed by `transfer`, making them unable to receive funds via\r\n\t * `transfer`. {sendValue} removes this limitation.\r\n\t *\r\n\t * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n\t *\r\n\t * IMPORTANT: because control is transferred to `recipient`, care must be\r\n\t * taken to not create reentrancy vulnerabilities. Consider using\r\n\t * {ReentrancyGuard} or the\r\n\t * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n\t */\r\n\tfunction sendValue(address payable recipient, uint256 amount) internal {\r\n\t\trequire(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n\t\t// solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n\t\t(bool success,) = recipient.call{value : amount}(\"\");\r\n\t\trequire(success, \"Address: unable to send value, recipient may have reverted\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Performs a Solidity function call using a low level `call`. A\r\n\t * plain`call` is an unsafe replacement for a function call: use this\r\n\t * function instead.\r\n\t *\r\n\t * If `target` reverts with a revert reason, it is bubbled up by this\r\n\t * function (like regular Solidity function calls).\r\n\t *\r\n\t * Returns the raw returned data. To convert to the expected return value,\r\n\t * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `target` must be a contract.\r\n\t * - calling `target` with `data` must not revert.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n\t\treturn functionCall(target, data, \"Address: low-level call failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n\t * `errorMessage` as a fallback revert reason when `target` reverts.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n\t\treturn _functionCallWithValue(target, data, 0, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\t * but also transferring `value` wei to `target`.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - the calling contract must have an ETH balance of at least `value`.\r\n\t * - the called Solidity function must be `payable`.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n\t\treturn functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n\t * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n\t\trequire(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n\t\treturn _functionCallWithValue(target, data, value, errorMessage);\r\n\t}\r\n\r\n\tfunction _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n\t\trequire(isContract(target), \"Address: call to non-contract\");\r\n\r\n\t\t// solhint-disable-next-line avoid-low-level-calls\r\n\t\t(bool success, bytes memory returndata) = target.call{value : weiValue}(data);\r\n\t\tif (success) {\r\n\t\t\treturn returndata;\r\n\t\t} else {\r\n\t\t\t// Look for revert reason and bubble it up if present\r\n\t\t\tif (returndata.length > 0) {\r\n\t\t\t\t// The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n\t\t\t\t// solhint-disable-next-line no-inline-assembly\r\n\t\t\t\tassembly {\r\n\t\t\t\t\tlet returndata_size := mload(returndata)\r\n\t\t\t\t\trevert(add(32, returndata), returndata_size)\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\trevert(errorMessage);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/EnumerableSet.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\r\n * (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n\t// To implement this library for multiple types with as little code\r\n\t// repetition as possible, we write it in terms of a generic Set type with\r\n\t// bytes32 values.\r\n\t// The Set implementation uses private functions, and user-facing\r\n\t// implementations (such as AddressSet) are just wrappers around the\r\n\t// underlying Set.\r\n\t// This means that we can only create new EnumerableSets for types that fit\r\n\t// in bytes32.\r\n\r\n\tstruct Set {\r\n\t\t// Storage of set values\r\n\t\tbytes32[] _values;\r\n\r\n\t\t// Position of the value in the `values` array, plus 1 because index 0\r\n\t\t// means a value is not in the set.\r\n\t\tmapping(bytes32 => uint256) _indexes;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Add a value to a set. O(1).\r\n\t *\r\n\t * Returns true if the value was added to the set, that is if it was not\r\n\t * already present.\r\n\t */\r\n\tfunction _add(Set storage set, bytes32 value) private returns (bool) {\r\n\t\tif (!_contains(set, value)) {\r\n\t\t\tset._values.push(value);\r\n\t\t\t// The value is stored at length-1, but we add 1 to all indexes\r\n\t\t\t// and use 0 as a sentinel value\r\n\t\t\tset._indexes[value] = set._values.length;\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Removes a value from a set. O(1).\r\n\t *\r\n\t * Returns true if the value was removed from the set, that is if it was\r\n\t * present.\r\n\t */\r\n\tfunction _remove(Set storage set, bytes32 value) private returns (bool) {\r\n\t\t// We read and store the value's index to prevent multiple reads from the same storage slot\r\n\t\tuint256 valueIndex = set._indexes[value];\r\n\r\n\t\tif (valueIndex != 0) {// Equivalent to contains(set, value)\r\n\t\t\t// To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n\t\t\t// the array, and then remove the last element (sometimes called as 'swap and pop').\r\n\t\t\t// This modifies the order of the array, as noted in {at}.\r\n\r\n\t\t\tuint256 toDeleteIndex = valueIndex - 1;\r\n\t\t\tuint256 lastIndex = set._values.length - 1;\r\n\r\n\t\t\t// When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n\t\t\t// so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n\t\t\tbytes32 lastvalue = set._values[lastIndex];\r\n\r\n\t\t\t// Move the last value to the index where the value to delete is\r\n\t\t\tset._values[toDeleteIndex] = lastvalue;\r\n\t\t\t// Update the index for the moved value\r\n\t\t\tset._indexes[lastvalue] = toDeleteIndex + 1;\r\n\t\t\t// All indexes are 1-based\r\n\r\n\t\t\t// Delete the slot where the moved value was stored\r\n\t\t\tset._values.pop();\r\n\r\n\t\t\t// Delete the index for the deleted slot\r\n\t\t\tdelete set._indexes[value];\r\n\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns true if the value is in the set. O(1).\r\n\t */\r\n\tfunction _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n\t\treturn set._indexes[value] != 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the number of values on the set. O(1).\r\n\t */\r\n\tfunction _length(Set storage set) private view returns (uint256) {\r\n\t\treturn set._values.length;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the value stored at position `index` in the set. O(1).\r\n\t *\r\n\t * Note that there are no guarantees on the ordering of values inside the\r\n\t * array, and it may change when more values are added or removed.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `index` must be strictly less than {length}.\r\n\t */\r\n\tfunction _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n\t\trequire(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n\t\treturn set._values[index];\r\n\t}\r\n\r\n\t// AddressSet\r\n\r\n\tstruct AddressSet {\r\n\t\tSet _inner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Add a value to a set. O(1).\r\n\t *\r\n\t * Returns true if the value was added to the set, that is if it was not\r\n\t * already present.\r\n\t */\r\n\tfunction add(AddressSet storage set, address value) internal returns (bool) {\r\n\t\treturn _add(set._inner, bytes32(uint256(value)));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Removes a value from a set. O(1).\r\n\t *\r\n\t * Returns true if the value was removed from the set, that is if it was\r\n\t * present.\r\n\t */\r\n\tfunction remove(AddressSet storage set, address value) internal returns (bool) {\r\n\t\treturn _remove(set._inner, bytes32(uint256(value)));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns true if the value is in the set. O(1).\r\n\t */\r\n\tfunction contains(AddressSet storage set, address value) internal view returns (bool) {\r\n\t\treturn _contains(set._inner, bytes32(uint256(value)));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the number of values in the set. O(1).\r\n\t */\r\n\tfunction length(AddressSet storage set) internal view returns (uint256) {\r\n\t\treturn _length(set._inner);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the value stored at position `index` in the set. O(1).\r\n\t *\r\n\t * Note that there are no guarantees on the ordering of values inside the\r\n\t * array, and it may change when more values are added or removed.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `index` must be strictly less than {length}.\r\n\t */\r\n\tfunction at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n\t\treturn address(uint256(_at(set._inner, index)));\r\n\t}\r\n\r\n\r\n\t// UintSet\r\n\r\n\tstruct UintSet {\r\n\t\tSet _inner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Add a value to a set. O(1).\r\n\t *\r\n\t * Returns true if the value was added to the set, that is if it was not\r\n\t * already present.\r\n\t */\r\n\tfunction add(UintSet storage set, uint256 value) internal returns (bool) {\r\n\t\treturn _add(set._inner, bytes32(value));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Removes a value from a set. O(1).\r\n\t *\r\n\t * Returns true if the value was removed from the set, that is if it was\r\n\t * present.\r\n\t */\r\n\tfunction remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n\t\treturn _remove(set._inner, bytes32(value));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns true if the value is in the set. O(1).\r\n\t */\r\n\tfunction contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n\t\treturn _contains(set._inner, bytes32(value));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the number of values on the set. O(1).\r\n\t */\r\n\tfunction length(UintSet storage set) internal view returns (uint256) {\r\n\t\treturn _length(set._inner);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the value stored at position `index` in the set. O(1).\r\n\t *\r\n\t * Note that there are no guarantees on the ordering of values inside the\r\n\t * array, and it may change when more values are added or removed.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `index` must be strictly less than {length}.\r\n\t */\r\n\tfunction at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n\t\treturn uint256(_at(set._inner, index));\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/EnumerableMap.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Library for managing an enumerable variant of Solidity's\r\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\r\n * type.\r\n *\r\n * Maps have the following properties:\r\n *\r\n * - Entries are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableMap.UintToAddressMap private myMap;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\r\n * supported.\r\n */\r\nlibrary EnumerableMap {\r\n\t// To implement this library for multiple types with as little code\r\n\t// repetition as possible, we write it in terms of a generic Map type with\r\n\t// bytes32 keys and values.\r\n\t// The Map implementation uses private functions, and user-facing\r\n\t// implementations (such as Uint256ToAddressMap) are just wrappers around\r\n\t// the underlying Map.\r\n\t// This means that we can only create new EnumerableMaps for types that fit\r\n\t// in bytes32.\r\n\r\n\tstruct MapEntry {\r\n\t\tbytes32 _key;\r\n\t\tbytes32 _value;\r\n\t}\r\n\r\n\tstruct Map {\r\n\t\t// Storage of map keys and values\r\n\t\tMapEntry[] _entries;\r\n\r\n\t\t// Position of the entry defined by a key in the `entries` array, plus 1\r\n\t\t// because index 0 means a key is not in the map.\r\n\t\tmapping(bytes32 => uint256) _indexes;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Adds a key-value pair to a map, or updates the value for an existing\r\n\t * key. O(1).\r\n\t *\r\n\t * Returns true if the key was added to the map, that is if it was not\r\n\t * already present.\r\n\t */\r\n\tfunction _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\r\n\t\t// We read and store the key's index to prevent multiple reads from the same storage slot\r\n\t\tuint256 keyIndex = map._indexes[key];\r\n\r\n\t\tif (keyIndex == 0) {// Equivalent to !contains(map, key)\r\n\t\t\tmap._entries.push(MapEntry({_key : key, _value : value}));\r\n\t\t\t// The entry is stored at length-1, but we add 1 to all indexes\r\n\t\t\t// and use 0 as a sentinel value\r\n\t\t\tmap._indexes[key] = map._entries.length;\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\tmap._entries[keyIndex - 1]._value = value;\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Removes a key-value pair from a map. O(1).\r\n\t *\r\n\t * Returns true if the key was removed from the map, that is if it was present.\r\n\t */\r\n\tfunction _remove(Map storage map, bytes32 key) private returns (bool) {\r\n\t\t// We read and store the key's index to prevent multiple reads from the same storage slot\r\n\t\tuint256 keyIndex = map._indexes[key];\r\n\r\n\t\tif (keyIndex != 0) {// Equivalent to contains(map, key)\r\n\t\t\t// To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\r\n\t\t\t// in the array, and then remove the last entry (sometimes called as 'swap and pop').\r\n\t\t\t// This modifies the order of the array, as noted in {at}.\r\n\r\n\t\t\tuint256 toDeleteIndex = keyIndex - 1;\r\n\t\t\tuint256 lastIndex = map._entries.length - 1;\r\n\r\n\t\t\t// When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n\t\t\t// so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n\t\t\tMapEntry storage lastEntry = map._entries[lastIndex];\r\n\r\n\t\t\t// Move the last entry to the index where the entry to delete is\r\n\t\t\tmap._entries[toDeleteIndex] = lastEntry;\r\n\t\t\t// Update the index for the moved entry\r\n\t\t\tmap._indexes[lastEntry._key] = toDeleteIndex + 1;\r\n\t\t\t// All indexes are 1-based\r\n\r\n\t\t\t// Delete the slot where the moved entry was stored\r\n\t\t\tmap._entries.pop();\r\n\r\n\t\t\t// Delete the index for the deleted slot\r\n\t\t\tdelete map._indexes[key];\r\n\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns true if the key is in the map. O(1).\r\n\t */\r\n\tfunction _contains(Map storage map, bytes32 key) private view returns (bool) {\r\n\t\treturn map._indexes[key] != 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the number of key-value pairs in the map. O(1).\r\n\t */\r\n\tfunction _length(Map storage map) private view returns (uint256) {\r\n\t\treturn map._entries.length;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the key-value pair stored at position `index` in the map. O(1).\r\n\t *\r\n\t * Note that there are no guarantees on the ordering of entries inside the\r\n\t * array, and it may change when more entries are added or removed.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `index` must be strictly less than {length}.\r\n\t */\r\n\tfunction _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\r\n\t\trequire(map._entries.length > index, \"EnumerableMap: index out of bounds\");\r\n\r\n\t\tMapEntry storage entry = map._entries[index];\r\n\t\treturn (entry._key, entry._value);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the value associated with `key`.  O(1).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `key` must be in the map.\r\n\t */\r\n\tfunction _get(Map storage map, bytes32 key) private view returns (bytes32) {\r\n\t\treturn _get(map, key, \"EnumerableMap: nonexistent key\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {_get}, with a custom error message when `key` is not in the map.\r\n\t */\r\n\tfunction _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\r\n\t\tuint256 keyIndex = map._indexes[key];\r\n\t\trequire(keyIndex != 0, errorMessage);\r\n\t\t// Equivalent to contains(map, key)\r\n\t\treturn map._entries[keyIndex - 1]._value;\r\n\t\t// All indexes are 1-based\r\n\t}\r\n\r\n\t// UintToAddressMap\r\n\r\n\tstruct UintToAddressMap {\r\n\t\tMap _inner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Adds a key-value pair to a map, or updates the value for an existing\r\n\t * key. O(1).\r\n\t *\r\n\t * Returns true if the key was added to the map, that is if it was not\r\n\t * already present.\r\n\t */\r\n\tfunction set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\r\n\t\treturn _set(map._inner, bytes32(key), bytes32(uint256(value)));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Removes a value from a set. O(1).\r\n\t *\r\n\t * Returns true if the key was removed from the map, that is if it was present.\r\n\t */\r\n\tfunction remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\r\n\t\treturn _remove(map._inner, bytes32(key));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns true if the key is in the map. O(1).\r\n\t */\r\n\tfunction contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\r\n\t\treturn _contains(map._inner, bytes32(key));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the number of elements in the map. O(1).\r\n\t */\r\n\tfunction length(UintToAddressMap storage map) internal view returns (uint256) {\r\n\t\treturn _length(map._inner);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the element stored at position `index` in the set. O(1).\r\n\t * Note that there are no guarantees on the ordering of values inside the\r\n\t * array, and it may change when more values are added or removed.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `index` must be strictly less than {length}.\r\n\t */\r\n\tfunction at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\r\n\t\t(bytes32 key, bytes32 value) = _at(map._inner, index);\r\n\t\treturn (uint256(key), address(uint256(value)));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the value associated with `key`.  O(1).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `key` must be in the map.\r\n\t */\r\n\tfunction get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\r\n\t\treturn address(uint256(_get(map._inner, bytes32(key))));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {get}, with a custom error message when `key` is not in the map.\r\n\t */\r\n\tfunction get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\r\n\t\treturn address(uint256(_get(map._inner, bytes32(key), errorMessage)));\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n\t/**\r\n\t * @dev Converts a `uint256` to its ASCII `string` representation.\r\n\t */\r\n\tfunction toString(uint256 value) internal pure returns (string memory) {\r\n\t\t// Inspired by OraclizeAPI's implementation - MIT licence\r\n\t\t// https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n\t\tif (value == 0) {\r\n\t\t\treturn \"0\";\r\n\t\t}\r\n\t\tuint256 temp = value;\r\n\t\tuint256 digits;\r\n\t\twhile (temp != 0) {\r\n\t\t\tdigits++;\r\n\t\t\ttemp /= 10;\r\n\t\t}\r\n\t\tbytes memory buffer = new bytes(digits);\r\n\t\tuint256 index = digits - 1;\r\n\t\ttemp = value;\r\n\t\twhile (temp != 0) {\r\n\t\t\tbuffer[index--] = byte(uint8(48 + temp % 10));\r\n\t\t\ttemp /= 10;\r\n\t\t}\r\n\t\treturn string(buffer);\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/ERC721.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\r\n\tusing SafeMath for uint256;\r\n\tusing Address for address;\r\n\tusing EnumerableSet for EnumerableSet.UintSet;\r\n\tusing EnumerableMap for EnumerableMap.UintToAddressMap;\r\n\tusing Strings for uint256;\r\n\r\n\t// Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n\t// which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\r\n\tbytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n\r\n\t// Mapping from holder address to their (enumerable) set of owned tokens\r\n\tmapping(address => EnumerableSet.UintSet) private _holderTokens;\r\n\r\n\t// Enumerable mapping from token ids to their owners\r\n\tEnumerableMap.UintToAddressMap private _tokenOwners;\r\n\r\n\t// Mapping from token ID to approved address\r\n\tmapping(uint256 => address) private _tokenApprovals;\r\n\r\n\t// Mapping from owner to operator approvals\r\n\tmapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n\t// Token name\r\n\tstring private _name;\r\n\r\n\t// Token symbol\r\n\tstring private _symbol;\r\n\r\n\t// Optional mapping for token URIs\r\n\tmapping(uint256 => string) private _tokenURIs;\r\n\r\n\t// Base URI\r\n\tstring private _baseURI;\r\n\r\n\t/*\r\n\t *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\r\n\t *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\r\n\t *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\r\n\t *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\r\n\t *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\r\n\t *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\r\n\t *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\r\n\t *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\r\n\t *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\r\n\t *\r\n\t *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\r\n\t *        0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\r\n\t */\r\n\tbytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n\r\n\t/*\r\n\t *     bytes4(keccak256('name()')) == 0x06fdde03\r\n\t *     bytes4(keccak256('symbol()')) == 0x95d89b41\r\n\t *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\r\n\t *\r\n\t *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\r\n\t */\r\n\tbytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\r\n\r\n\t/*\r\n\t *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\r\n\t *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\r\n\t *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\r\n\t *\r\n\t *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\r\n\t */\r\n\tbytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\r\n\r\n\t/**\r\n\t * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n\t */\r\n\tconstructor (string memory name, string memory symbol) public {\r\n\t\t_name = name;\r\n\t\t_symbol = symbol;\r\n\r\n\t\t// register the supported interfaces to conform to ERC721 via ERC165\r\n\t\t_registerInterface(_INTERFACE_ID_ERC721);\r\n\t\t_registerInterface(_INTERFACE_ID_ERC721_METADATA);\r\n\t\t_registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-balanceOf}.\r\n\t */\r\n\tfunction balanceOf(address owner) public view override returns (uint256) {\r\n\t\trequire(owner != address(0), \"ERC721: balance query for the zero address\");\r\n\r\n\t\treturn _holderTokens[owner].length();\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-ownerOf}.\r\n\t */\r\n\tfunction ownerOf(uint256 tokenId) public view override returns (address) {\r\n\t\treturn _tokenOwners.get(tokenId, \"ERC721: owner query for nonexistent token\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721Metadata-name}.\r\n\t */\r\n\tfunction name() public view override returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721Metadata-symbol}.\r\n\t */\r\n\tfunction symbol() public view override returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721Metadata-tokenURI}.\r\n\t */\r\n\tfunction tokenURI(uint256 tokenId) public view override returns (string memory) {\r\n\t\trequire(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n\t\tstring memory _tokenURI = _tokenURIs[tokenId];\r\n\r\n\t\t// If there is no base URI, return the token URI.\r\n\t\tif (bytes(_baseURI).length == 0) {\r\n\t\t\treturn _tokenURI;\r\n\t\t}\r\n\t\t// If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\r\n\t\tif (bytes(_tokenURI).length > 0) {\r\n\t\t\treturn string(abi.encodePacked(_baseURI, _tokenURI));\r\n\t\t}\r\n\t\t// If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\r\n\t\treturn string(abi.encodePacked(_baseURI, tokenId.toString()));\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Returns the base URI set via {_setBaseURI}. This will be\r\n\t* automatically added as a prefix in {tokenURI} to each token's URI, or\r\n\t* to the token ID if no specific URI is set for that token ID.\r\n\t*/\r\n\tfunction baseURI() public view returns (string memory) {\r\n\t\treturn _baseURI;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n\t */\r\n\tfunction tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\r\n\t\treturn _holderTokens[owner].at(index);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721Enumerable-totalSupply}.\r\n\t */\r\n\tfunction totalSupply() public view override returns (uint256) {\r\n\t\t// _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\r\n\t\treturn _tokenOwners.length();\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721Enumerable-tokenByIndex}.\r\n\t */\r\n\tfunction tokenByIndex(uint256 index) public view override returns (uint256) {\r\n\t\t(uint256 tokenId,) = _tokenOwners.at(index);\r\n\t\treturn tokenId;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-approve}.\r\n\t */\r\n\tfunction approve(address to, uint256 tokenId) public virtual override {\r\n\t\taddress owner = ownerOf(tokenId);\r\n\t\trequire(to != owner, \"ERC721: approval to current owner\");\r\n\r\n\t\trequire(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n\t\t\t\"ERC721: approve caller is not owner nor approved for all\"\r\n\t\t);\r\n\r\n\t\t_approve(to, tokenId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-getApproved}.\r\n\t */\r\n\tfunction getApproved(uint256 tokenId) public view override returns (address) {\r\n\t\trequire(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n\t\treturn _tokenApprovals[tokenId];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-setApprovalForAll}.\r\n\t */\r\n\tfunction setApprovalForAll(address operator, bool approved) public virtual override {\r\n\t\trequire(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n\t\t_operatorApprovals[_msgSender()][operator] = approved;\r\n\t\temit ApprovalForAll(_msgSender(), operator, approved);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-isApprovedForAll}.\r\n\t */\r\n\tfunction isApprovedForAll(address owner, address operator) public view override returns (bool) {\r\n\t\treturn _operatorApprovals[owner][operator];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-transferFrom}.\r\n\t */\r\n\tfunction transferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n\t\t//solhint-disable-next-line max-line-length\r\n\t\trequire(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n\t\t_transfer(from, to, tokenId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-safeTransferFrom}.\r\n\t */\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n\t\tsafeTransferFrom(from, to, tokenId, \"\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-safeTransferFrom}.\r\n\t */\r\n\tfunction safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\r\n\t\trequire(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\t\t_safeTransfer(from, to, tokenId, _data);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n\t * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n\t *\r\n\t * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n\t *\r\n\t * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n\t * implement alternative mecanisms to perform token transfer, such as signature-based.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `from` cannot be the zero address.\r\n\t * - `to` cannot be the zero address.\r\n\t * - `tokenId` token must exist and be owned by `from`.\r\n\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n\t\t_transfer(from, to, tokenId);\r\n\t\trequire(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns whether `tokenId` exists.\r\n\t *\r\n\t * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n\t *\r\n\t * Tokens start existing when they are minted (`_mint`),\r\n\t * and stop existing when they are burned (`_burn`).\r\n\t */\r\n\tfunction _exists(uint256 tokenId) internal view returns (bool) {\r\n\t\treturn _tokenOwners.contains(tokenId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `tokenId` must exist.\r\n\t */\r\n\tfunction _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\r\n\t\trequire(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n\t\taddress owner = ownerOf(tokenId);\r\n\t\treturn (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Safely mints `tokenId` and transfers it to `to`.\r\n\t *\r\n\t * Requirements:\r\n\t d*\r\n\t * - `tokenId` must not exist.\r\n\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction _safeMint(address to, uint256 tokenId) internal virtual {\r\n\t\t_safeMint(to, tokenId, \"\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n\t * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n\t */\r\n\tfunction _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n\t\t_mint(to, tokenId);\r\n\t\trequire(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Mints `tokenId` and transfers it to `to`.\r\n\t *\r\n\t * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `tokenId` must not exist.\r\n\t * - `to` cannot be the zero address.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction _mint(address to, uint256 tokenId) internal virtual {\r\n\t\trequire(to != address(0), \"ERC721: mint to the zero address\");\r\n\t\trequire(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n\t\t_beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n\t\t_holderTokens[to].add(tokenId);\r\n\r\n\t\t_tokenOwners.set(tokenId, to);\r\n\r\n\t\temit Transfer(address(0), to, tokenId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Destroys `tokenId`.\r\n\t * The approval is cleared when the token is burned.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `tokenId` must exist.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction _burn(uint256 tokenId) internal virtual {\r\n\t\taddress owner = ownerOf(tokenId);\r\n\r\n\t\t_beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n\t\t// Clear approvals\r\n\t\t_approve(address(0), tokenId);\r\n\r\n\t\t// Clear metadata (if any)\r\n\t\tif (bytes(_tokenURIs[tokenId]).length != 0) {\r\n\t\t\tdelete _tokenURIs[tokenId];\r\n\t\t}\r\n\r\n\t\t_holderTokens[owner].remove(tokenId);\r\n\r\n\t\t_tokenOwners.remove(tokenId);\r\n\r\n\t\temit Transfer(owner, address(0), tokenId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers `tokenId` from `from` to `to`.\r\n\t *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `to` cannot be the zero address.\r\n\t * - `tokenId` token must be owned by `from`.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction _transfer(address from, address to, uint256 tokenId) internal virtual {\r\n\t\trequire(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n\t\trequire(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n\t\t_beforeTokenTransfer(from, to, tokenId);\r\n\r\n\t\t// Clear approvals from the previous owner\r\n\t\t_approve(address(0), tokenId);\r\n\r\n\t\t_holderTokens[from].remove(tokenId);\r\n\t\t_holderTokens[to].add(tokenId);\r\n\r\n\t\t_tokenOwners.set(tokenId, to);\r\n\r\n\t\temit Transfer(from, to, tokenId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `tokenId` must exist.\r\n\t */\r\n\tfunction _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\r\n\t\trequire(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\r\n\t\t_tokenURIs[tokenId] = _tokenURI;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Internal function to set the base URI for all token IDs. It is\r\n\t * automatically added as a prefix to the value returned in {tokenURI},\r\n\t * or to the token ID if {tokenURI} is empty.\r\n\t */\r\n\tfunction _setBaseURI(string memory baseURI_) internal virtual {\r\n\t\t_baseURI = baseURI_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n\t * The call is not executed if the target address is not a contract.\r\n\t *\r\n\t * @param from address representing the previous owner of the given token ID\r\n\t * @param to target address that will receive the tokens\r\n\t * @param tokenId uint256 ID of the token to be transferred\r\n\t * @param _data bytes optional data to send along with the call\r\n\t * @return bool whether the call correctly returned the expected magic value\r\n\t */\r\n\tfunction _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\r\n\tprivate returns (bool)\r\n\t{\r\n\t\tif (!to.isContract()) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tbytes memory returndata = to.functionCall(abi.encodeWithSelector(\r\n\t\t\t\tIERC721Receiver(to).onERC721Received.selector,\r\n\t\t\t\t_msgSender(),\r\n\t\t\t\tfrom,\r\n\t\t\t\ttokenId,\r\n\t\t\t\t_data\r\n\t\t\t), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n\t\tbytes4 retval = abi.decode(returndata, (bytes4));\r\n\t\treturn (retval == _ERC721_RECEIVED);\r\n\t}\r\n\r\n\tfunction _approve(address to, uint256 tokenId) private {\r\n\t\t_tokenApprovals[tokenId] = to;\r\n\t\temit Approval(ownerOf(tokenId), to, tokenId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Hook that is called before any token transfer. This includes minting\r\n\t * and burning.\r\n\t *\r\n\t * Calling conditions:\r\n\t *\r\n\t * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n\t * transferred to `to`.\r\n\t * - When `from` is zero, `tokenId` will be minted for `to`.\r\n\t * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n\t * - `from` cannot be the zero address.\r\n\t * - `to` cannot be the zero address.\r\n\t *\r\n\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n\t */\r\n\tfunction _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual {}\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/AccessControl.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context {\r\n\tusing EnumerableSet for EnumerableSet.AddressSet;\r\n\tusing Address for address;\r\n\r\n\tstruct RoleData {\r\n\t\tEnumerableSet.AddressSet members;\r\n\t\tbytes32 adminRole;\r\n\t}\r\n\r\n\tmapping(bytes32 => RoleData) private _roles;\r\n\r\n\tbytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n\t/**\r\n\t * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n\t *\r\n\t * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n\t * {RoleAdminChanged} not being emitted signaling this.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tevent RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n\t/**\r\n\t * @dev Emitted when `account` is granted `role`.\r\n\t *\r\n\t * `sender` is the account that originated the contract call, an admin role\r\n\t * bearer except when using {_setupRole}.\r\n\t */\r\n\tevent RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n\t/**\r\n\t * @dev Emitted when `account` is revoked `role`.\r\n\t *\r\n\t * `sender` is the account that originated the contract call:\r\n\t *   - if using `revokeRole`, it is the admin role bearer\r\n\t *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n\t */\r\n\tevent RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n\t/**\r\n\t * @dev Returns `true` if `account` has been granted `role`.\r\n\t */\r\n\tfunction hasRole(bytes32 role, address account) public view returns (bool) {\r\n\t\treturn _roles[role].members.contains(account);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the number of accounts that have `role`. Can be used\r\n\t * together with {getRoleMember} to enumerate all bearers of a role.\r\n\t */\r\n\tfunction getRoleMemberCount(bytes32 role) public view returns (uint256) {\r\n\t\treturn _roles[role].members.length();\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns one of the accounts that have `role`. `index` must be a\r\n\t * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n\t *\r\n\t * Role bearers are not sorted in any particular way, and their ordering may\r\n\t * change at any point.\r\n\t *\r\n\t * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n\t * you perform all queries on the same block. See the following\r\n\t * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n\t * for more information.\r\n\t */\r\n\tfunction getRoleMember(bytes32 role, uint256 index) public view returns (address) {\r\n\t\treturn _roles[role].members.at(index);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n\t * {revokeRole}.\r\n\t *\r\n\t * To change a role's admin, use {_setRoleAdmin}.\r\n\t */\r\n\tfunction getRoleAdmin(bytes32 role) public view returns (bytes32) {\r\n\t\treturn _roles[role].adminRole;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Grants `role` to `account`.\r\n\t *\r\n\t * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n\t * event.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - the caller must have ``role``'s admin role.\r\n\t */\r\n\tfunction grantRole(bytes32 role, address account) public virtual {\r\n\t\trequire(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\r\n\r\n\t\t_grantRole(role, account);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Revokes `role` from `account`.\r\n\t *\r\n\t * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - the caller must have ``role``'s admin role.\r\n\t */\r\n\tfunction revokeRole(bytes32 role, address account) public virtual {\r\n\t\trequire(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\r\n\r\n\t\t_revokeRole(role, account);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Revokes `role` from the calling account.\r\n\t *\r\n\t * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n\t * purpose is to provide a mechanism for accounts to lose their privileges\r\n\t * if they are compromised (such as when a trusted device is misplaced).\r\n\t *\r\n\t * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n\t * event.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - the caller must be `account`.\r\n\t */\r\n\tfunction renounceRole(bytes32 role, address account) public virtual {\r\n\t\trequire(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n\t\t_revokeRole(role, account);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Grants `role` to `account`.\r\n\t *\r\n\t * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n\t * event. Note that unlike {grantRole}, this function doesn't perform any\r\n\t * checks on the calling account.\r\n\t *\r\n\t * [WARNING]\r\n\t * ====\r\n\t * This function should only be called from the constructor when setting\r\n\t * up the initial roles for the system.\r\n\t *\r\n\t * Using this function in any other way is effectively circumventing the admin\r\n\t * system imposed by {AccessControl}.\r\n\t * ====\r\n\t */\r\n\tfunction _setupRole(bytes32 role, address account) internal virtual {\r\n\t\t_grantRole(role, account);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Sets `adminRole` as ``role``'s admin role.\r\n\t *\r\n\t * Emits a {RoleAdminChanged} event.\r\n\t */\r\n\tfunction _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n\t\temit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\r\n\t\t_roles[role].adminRole = adminRole;\r\n\t}\r\n\r\n\tfunction _grantRole(bytes32 role, address account) private {\r\n\t\tif (_roles[role].members.add(account)) {\r\n\t\t\temit RoleGranted(role, account, _msgSender());\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _revokeRole(bytes32 role, address account) private {\r\n\t\tif (_roles[role].members.remove(account)) {\r\n\t\t\temit RoleRevoked(role, account, _msgSender());\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// File: contracts/common/AccessControlMixin.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\ncontract AccessControlMixin is AccessControl {\r\n\tstring private _revertMsg;\r\n\r\n\tfunction _setupContractId(string memory contractId) internal {\r\n\t\t_revertMsg = string(abi.encodePacked(contractId, \": INSUFFICIENT_PERMISSIONS\"));\r\n\t}\r\n\r\n\tmodifier only(bytes32 role) {\r\n\t\trequire(\r\n\t\t\thasRole(role, _msgSender()),\r\n\t\t\t_revertMsg\r\n\t\t);\r\n\t\t_;\r\n\t}\r\n}\r\n\r\n// File: contracts/child/ChildToken/IChildToken.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\ninterface IChildToken {\r\n\tfunction deposit(address user, bytes calldata depositData) external;\r\n}\r\n\r\n// File: contracts/common/Initializable.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\ncontract Initializable {\r\n\tbool inited = false;\r\n\r\n\tmodifier initializer() {\r\n\t\trequire(!inited, \"already inited\");\r\n\t\t_;\r\n\t\tinited = true;\r\n\t}\r\n}\r\n\r\n// File: contracts/common/EIP712Base.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\ncontract EIP712Base is Initializable {\r\n\tstruct EIP712Domain {\r\n\t\tstring name;\r\n\t\tstring version;\r\n\t\taddress verifyingContract;\r\n\t\tbytes32 salt;\r\n\t}\r\n\r\n\tstring constant public ERC712_VERSION = \"1\";\r\n\r\n\tbytes32 internal constant EIP712_DOMAIN_TYPEHASH = keccak256(\r\n\t\tbytes(\r\n\t\t\t\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\"\r\n\t\t)\r\n\t);\r\n\tbytes32 internal domainSeperator;\r\n\r\n\t// supposed to be called once while initializing.\r\n\t// one of the contractsa that inherits this contract follows proxy pattern\r\n\t// so it is not possible to do this in a constructor\r\n\tfunction _initializeEIP712(\r\n\t\tstring memory name\r\n\t)\r\n\tinternal\r\n\tinitializer\r\n\t{\r\n\t\t_setDomainSeperator(name);\r\n\t}\r\n\r\n\tfunction _setDomainSeperator(string memory name) internal {\r\n\t\tdomainSeperator = keccak256(\r\n\t\t\tabi.encode(\r\n\t\t\t\tEIP712_DOMAIN_TYPEHASH,\r\n\t\t\t\tkeccak256(bytes(name)),\r\n\t\t\t\tkeccak256(bytes(ERC712_VERSION)),\r\n\t\t\t\taddress(this),\r\n\t\t\t\tbytes32(getChainId())\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tfunction getDomainSeperator() public view returns (bytes32) {\r\n\t\treturn domainSeperator;\r\n\t}\r\n\r\n\tfunction getChainId() public pure returns (uint256) {\r\n\t\tuint256 id;\r\n\t\tassembly {\r\n\t\t\tid := chainid()\r\n\t\t}\r\n\t\treturn id;\r\n\t}\r\n\r\n\t/**\r\n\t * Accept message hash and returns hash message in EIP712 compatible form\r\n\t * So that it can be used to recover signer from signature signed using EIP712 formatted data\r\n\t * https://eips.ethereum.org/EIPS/eip-712\r\n\t * \"\\\\x19\" makes the encoding deterministic\r\n\t * \"\\\\x01\" is the version byte to make it compatible to EIP-191\r\n\t */\r\n\tfunction toTypedMessageHash(bytes32 messageHash)\r\n\tinternal\r\n\tview\r\n\treturns (bytes32)\r\n\t{\r\n\t\treturn\r\n\t\tkeccak256(\r\n\t\t\tabi.encodePacked(\"\\x19\\x01\", getDomainSeperator(), messageHash)\r\n\t\t);\r\n\t}\r\n}\r\n\r\n// File: contracts/common/NativeMetaTransaction.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\ncontract NativeMetaTransaction is EIP712Base {\r\n\tusing SafeMath for uint256;\r\n\tbytes32 private constant META_TRANSACTION_TYPEHASH = keccak256(\r\n\t\tbytes(\r\n\t\t\t\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\"\r\n\t\t)\r\n\t);\r\n\r\n\tevent MetaTransactionExecuted(\r\n\t\taddress userAddress,\r\n\t\taddress payable relayerAddress,\r\n\t\tbytes functionSignature\r\n\t);\r\n\r\n\tmapping(address => uint256) nonces;\r\n\r\n\t/*\r\n\t * Meta transaction structure.\r\n\t * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\r\n\t * He should call the desired function directly in that case.\r\n\t */\r\n\tstruct MetaTransaction {\r\n\t\tuint256 nonce;\r\n\t\taddress from;\r\n\t\tbytes functionSignature;\r\n\t}\r\n\r\n\tfunction executeMetaTransaction(\r\n\t\taddress userAddress,\r\n\t\tbytes memory functionSignature,\r\n\t\tbytes32 sigR,\r\n\t\tbytes32 sigS,\r\n\t\tuint8 sigV\r\n\t) public payable returns (bytes memory) {\r\n\t\tMetaTransaction memory metaTx = MetaTransaction({\r\n\t\tnonce : nonces[userAddress],\r\n\t\tfrom : userAddress,\r\n\t\tfunctionSignature : functionSignature\r\n\t\t});\r\n\r\n\t\trequire(\r\n\t\t\tverify(userAddress, metaTx, sigR, sigS, sigV),\r\n\t\t\t\"Signer and signature do not match\"\r\n\t\t);\r\n\r\n\t\t// increase nonce for user (to avoid re-use)\r\n\t\tnonces[userAddress] = nonces[userAddress].add(1);\r\n\r\n\t\temit MetaTransactionExecuted(\r\n\t\t\tuserAddress,\r\n\t\t\tmsg.sender,\r\n\t\t\tfunctionSignature\r\n\t\t);\r\n\r\n\t\t// Append userAddress and relayer address at the end to extract it from calling context\r\n\t\t(bool success, bytes memory returnData) = address(this).call(\r\n\t\t\tabi.encodePacked(functionSignature, userAddress)\r\n\t\t);\r\n\t\trequire(success, \"Function call not successful\");\r\n\r\n\t\treturn returnData;\r\n\t}\r\n\r\n\tfunction hashMetaTransaction(MetaTransaction memory metaTx)\r\n\tinternal\r\n\tpure\r\n\treturns (bytes32)\r\n\t{\r\n\t\treturn\r\n\t\tkeccak256(\r\n\t\t\tabi.encode(\r\n\t\t\t\tMETA_TRANSACTION_TYPEHASH,\r\n\t\t\t\tmetaTx.nonce,\r\n\t\t\t\tmetaTx.from,\r\n\t\t\t\tkeccak256(metaTx.functionSignature)\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tfunction getNonce(address user) public view returns (uint256 nonce) {\r\n\t\tnonce = nonces[user];\r\n\t}\r\n\r\n\tfunction verify(\r\n\t\taddress signer,\r\n\t\tMetaTransaction memory metaTx,\r\n\t\tbytes32 sigR,\r\n\t\tbytes32 sigS,\r\n\t\tuint8 sigV\r\n\t) internal view returns (bool) {\r\n\t\trequire(signer != address(0), \"NativeMetaTransaction: INVALID_SIGNER\");\r\n\t\treturn\r\n\t\tsigner ==\r\n\t\tecrecover(\r\n\t\t\ttoTypedMessageHash(hashMetaTransaction(metaTx)),\r\n\t\t\tsigV,\r\n\t\t\tsigR,\r\n\t\t\tsigS\r\n\t\t);\r\n\t}\r\n}\r\n\r\n// File: contracts/common/ContextMixin.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\nabstract contract ContextMixin {\r\n\tfunction msgSender()\r\n\tinternal\r\n\tview\r\n\treturns (address payable sender)\r\n\t{\r\n\t\tif (msg.sender == address(this)) {\r\n\t\t\tbytes memory array = msg.data;\r\n\t\t\tuint256 index = msg.data.length;\r\n\t\t\tassembly {\r\n\t\t\t// Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\r\n\t\t\t\tsender := and(\r\n\t\t\t\tmload(add(array, index)),\r\n\t\t\t\t0xffffffffffffffffffffffffffffffffffffffff\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tsender = msg.sender;\r\n\t\t}\r\n\t\treturn sender;\r\n\t}\r\n}\r\n\r\ninterface WETHInterface {\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) external returns (bool);\r\n\r\n\tfunction approve(address _spender, uint256 _value) external returns (bool);\r\n\r\n\tfunction balanceOf(address _owner) external view returns (uint256);\r\n\r\n\tfunction transfer(address _to, uint256 _value) external returns (bool);\r\n}\r\n\r\n// File: contracts/child/ChildToken/ChildMintableERC721.sol\r\npragma experimental ABIEncoderV2;\r\npragma solidity 0.6.6;\r\n\r\n\r\ncontract ArtvatarsMintableERC721Child is\r\nERC721,\r\nIChildToken,\r\nAccessControlMixin,\r\nNativeMetaTransaction,\r\nContextMixin\r\n{\r\n\tusing SafeMath for uint256;\r\n\tbytes32 public constant DEPOSITOR_ROLE = keccak256(\"DEPOSITOR_ROLE\");\r\n\tbytes32 public constant SERVER_ROLE = keccak256(\"SERVER_ROLE\");\r\n\r\n\tWETHInterface WETHContract;\r\n\r\n\tmapping(uint256 => bool) public withdrawnTokens;\r\n\tmapping(uint256 => Artvatar) public tokenToArtvatar;\r\n\r\n\tuint256 MAX_SUPPLY = 20000;\r\n\tuint256 MAX_BUY_ONCE = 2;\r\n\t// limit batching of tokens due to gas limit restrictions\r\n\tuint256 public constant BATCH_LIMIT = 20;\r\n\r\n\tuint256 public mintedTokens;\r\n\tbool public mintingClosed = false;\r\n\tbool public init = false;\r\n\r\n\tstruct Attribute {\r\n\t\tstring title;\r\n\t\tstring name;\r\n\t}\r\n\r\n\tstruct Artvatar {\r\n\t\tuint256 id;\r\n\t\tstring series;\r\n\t\tstring title;\r\n\t\tstring description;\r\n\t\tstring image;\r\n\t\tAttribute[] attributes;\r\n\t\tbool metadataChanged;\r\n\t}\r\n\r\n\tevent WithdrawnBatch(address indexed user, uint256[] tokenIds);\r\n\tevent TransferWithMetadata(address indexed from, address indexed to, uint256 indexed tokenId, bytes metaData);\r\n\r\n\tconstructor(\r\n\t\tstring memory name_,\r\n\t\tstring memory symbol_,\r\n\t\taddress server,\r\n\t\taddress childChainManager\r\n\t) public ERC721(name_, symbol_) {\r\n\t\tWETHContract = WETHInterface(address(0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619));\r\n\t\t_setupContractId(\"ChildMintableERC721\");\r\n\t\t_setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n\t\t_setupRole(SERVER_ROLE, server);\r\n\t\t_setupRole(DEPOSITOR_ROLE, childChainManager);\r\n\t\t_initializeEIP712(name_);\r\n\t}\r\n\r\n\tfunction initializeMinting() public only(DEFAULT_ADMIN_ROLE) {\r\n\t\trequire(init == false, \"INIT_ALREADY_CALLED\");\r\n\t\tinit = true;\r\n\r\n\t\tfor (uint256 i = 0; i < 26; i++) {\r\n\t\t\tuint256 tokenId = mintedTokens;\r\n\t\t\tArtvatar storage artvatar = tokenToArtvatar[tokenId];\r\n\t\t\tartvatar.id = tokenId;\r\n\t\t\trequire(!withdrawnTokens[tokenId], \"ChildMintableERC721: TOKEN_EXISTS_ON_ROOT_CHAIN\");\r\n\t\t\t_mint(_msgSender(), tokenId);\r\n\t\t\tmintedTokens = mintedTokens.add(1);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction balanceWETH() public view returns (uint256) {\r\n\t\treturn WETHContract.balanceOf(msgSender());\r\n\t}\r\n\r\n\tfunction setBaseURI(string memory _baseURI) public only(DEFAULT_ADMIN_ROLE) {\r\n\t\t_setBaseURI(_baseURI);\r\n\t}\r\n\r\n\tfunction ceil(uint a, uint m) public pure returns (uint) {\r\n\t\treturn ((a + m - 1) / m) * m;\r\n\t}\r\n\r\n\tfunction calcPrice(uint256 _totalSupply, uint8 _amount) public pure returns (uint256) {\r\n\t\treturn ceil(_totalSupply.mul(10000).div(5000), 10000).div(10000).mul(150000000000000000).mul(_amount);\r\n\t}\r\n\r\n\t// This is to support Native meta transactions\r\n\t// never use msg.sender directly, use _msgSender() instead\r\n\tfunction _msgSender()\r\n\tinternal\r\n\toverride\r\n\tview\r\n\treturns (address payable sender)\r\n\t{\r\n\t\treturn ContextMixin.msgSender();\r\n\t}\r\n\r\n\t/**\r\n\t   * @notice called when token is deposited on root chain\r\n\t   * @dev Should be callable only by ChildChainManager\r\n\t   * Should handle deposit by minting the required tokenId(s) for user\r\n\t   * Should set `withdrawnTokens` mapping to `false` for the tokenId being deposited\r\n\t   * Minting can also be done by other functions\r\n\t   * @param user user address for whom deposit is being done\r\n\t   * @param depositData abi encoded tokenIds. Batch deposit also supported.\r\n\t   */\r\n\tfunction deposit(address user, bytes calldata depositData)\r\n\texternal\r\n\toverride\r\n\tonly(DEPOSITOR_ROLE)\r\n\t{\r\n\r\n\t\t// deposit single\r\n\t\tif (depositData.length == 32) {\r\n\t\t\tuint256 tokenId = abi.decode(depositData, (uint256));\r\n\t\t\twithdrawnTokens[tokenId] = false;\r\n\t\t\t_mint(user, tokenId);\r\n\r\n\t\t\t// deposit batch\r\n\t\t} else {\r\n\t\t\tuint256[] memory tokenIds = abi.decode(depositData, (uint256[]));\r\n\t\t\tuint256 length = tokenIds.length;\r\n\t\t\tfor (uint256 i; i < length; i++) {\r\n\t\t\t\twithdrawnTokens[tokenIds[i]] = false;\r\n\t\t\t\t_mint(user, tokenIds[i]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @notice called when user wants to withdraw token back to root chain\r\n\t * @dev Should handle withraw by burning user's token.\r\n\t * Should set `withdrawnTokens` mapping to `true` for the tokenId being withdrawn\r\n\t * This transaction will be verified when exiting on root chain\r\n\t * @param tokenId tokenId to withdraw\r\n\t */\r\n\tfunction withdraw(uint256 tokenId) external {\r\n\t\trequire(_msgSender() == ownerOf(tokenId), \"ChildMintableERC721: INVALID_TOKEN_OWNER\");\r\n\t\twithdrawnTokens[tokenId] = true;\r\n\r\n\t\temit TransferWithMetadata(ownerOf(tokenId), address(0), tokenId, this.encodeTokenMetadata(tokenId));\r\n\r\n\t\t_burn(tokenId);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice called when user wants to withdraw multiple tokens back to root chain\r\n\t * @dev Should burn user's tokens. This transaction will be verified when exiting on root chain\r\n\t * @param tokenIds tokenId list to withdraw\r\n\t */\r\n\tfunction withdrawBatch(uint256[] calldata tokenIds) external {\r\n\r\n\t\tuint256 length = tokenIds.length;\r\n\t\trequire(length <= BATCH_LIMIT, \"ChildMintableERC721: EXCEEDS_BATCH_LIMIT\");\r\n\r\n\t\t// Iteratively burn ERC721 tokens, for performing\r\n\t\t// batch withdraw\r\n\t\tfor (uint256 i; i < length; i++) {\r\n\r\n\t\t\tuint256 tokenId = tokenIds[i];\r\n\r\n\t\t\trequire(_msgSender() == ownerOf(tokenId), string(abi.encodePacked(\"ChildMintableERC721: INVALID_TOKEN_OWNER \", tokenId)));\r\n\t\t\twithdrawnTokens[tokenId] = true;\r\n\r\n\t\t\temit TransferWithMetadata(ownerOf(tokenId), address(0), tokenId, this.encodeTokenMetadata(tokenId));\r\n\r\n\t\t\t_burn(tokenId);\r\n\r\n\t\t}\r\n\r\n\t\t// At last emit this event, which will be used\r\n\t\t// in MintableERC721 predicate contract on L1\r\n\t\t// while verifying burn proof\r\n\t\temit WithdrawnBatch(_msgSender(), tokenIds);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @notice called when user wants to withdraw token back to root chain with token URI\r\n\t * @dev Should handle withraw by burning user's token.\r\n\t * Should set `withdrawnTokens` mapping to `true` for the tokenId being withdrawn\r\n\t * This transaction will be verified when exiting on root chain\r\n\t *\r\n\t * @param tokenId tokenId to withdraw\r\n\t */\r\n\tfunction withdrawWithMetadata(uint256 tokenId) external {\r\n\r\n\t\trequire(_msgSender() == ownerOf(tokenId), \"ChildMintableERC721: INVALID_TOKEN_OWNER\");\r\n\t\twithdrawnTokens[tokenId] = true;\r\n\r\n\t\t// Encoding metadata associated with tokenId & emitting event\r\n\t\temit TransferWithMetadata(ownerOf(tokenId), address(0), tokenId, this.encodeTokenMetadata(tokenId));\r\n\r\n\t\t_burn(tokenId);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @notice This method is supposed to be called by client when withdrawing token with metadata\r\n\t * and pass return value of this function as second paramter of `withdrawWithMetadata` method\r\n\t *\r\n\t * It can be overridden by clients to encode data in a different form, which needs to\r\n\t * be decoded back by them correctly during exiting\r\n\t *\r\n\t * @param tokenId Token for which URI to be fetched\r\n\t */\r\n\tfunction encodeTokenMetadata(uint256 tokenId) external view virtual returns (bytes memory) {\r\n\r\n\t\t// You're always free to change this default implementation\r\n\t\t// and pack more data in byte array which can be decoded back\r\n\t\t// in L1\r\n\r\n\t\tArtvatar memory artvatar = tokenToArtvatar[tokenId];\r\n\t\treturn abi.encode(artvatar, tokenURI(tokenId));\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Example function to handle minting tokens on matic chain\r\n\t * @dev Minting can be done as per requirement,\r\n\t * This implementation allows only admin to mint tokens but it can be changed as per requirement\r\n\t * Should verify if token is withdrawn by checking `withdrawnTokens` mapping\r\n\t * @param user user for whom tokens are being minted\r\n\t * @param tokenId tokenId to mint\r\n\t */\r\n\tfunction mint(address user, uint256 tokenId) public only(DEFAULT_ADMIN_ROLE) {\r\n\t\trequire(!withdrawnTokens[tokenId], \"ChildMintableERC721: TOKEN_EXISTS_ON_ROOT_CHAIN\");\r\n\t\t_mint(user, tokenId);\r\n\t}\r\n\r\n\tfunction buyTokens(address _toAddress, uint8 _amount, uint256 _value) public {\r\n\t\trequire(mintingClosed == false && init == true, \"MINTING_CLOSED\");\r\n\t\trequire(mintedTokens.add(_amount) <= MAX_SUPPLY, \"MAX_SUPPLY reached.\");\r\n\t\trequire(MAX_BUY_ONCE > 0 && _amount <= MAX_BUY_ONCE, \"MAX_BUY_ONCE\");\r\n\r\n\t\tuint256 totalPrice;\r\n\r\n\t\tfor (uint256 i = 0; i < _amount; i++) {\r\n\t\t\tuint256 price = calcPrice(mintedTokens.add(1), 1);\r\n\t\t\trequire(WETHContract.transferFrom(msgSender(), address(this), price) == true, \"Not enough WETH\");\r\n\t\t\tWETHContract.transfer(address(0x6F24CBca9A3Ae5eC552d94f8A69B4046a2794C67), price);\r\n\r\n\t\t\tuint256 tokenId = mintedTokens;\r\n\t\t\tArtvatar storage artvatar = tokenToArtvatar[tokenId];\r\n\t\t\tartvatar.id = tokenId;\r\n\r\n\t\t\trequire(!withdrawnTokens[tokenId], \"ChildMintableERC721: TOKEN_EXISTS_ON_ROOT_CHAIN\");\r\n\t\t\t_mint(_toAddress, tokenId);\r\n\r\n\t\t\tmintedTokens = mintedTokens.add(1);\r\n\t\t\ttotalPrice = totalPrice.add(price);\r\n\t\t}\r\n\r\n\t\trequire(_value == totalPrice, \"VALUE_TOTAL_MISSMATCH\");\r\n\t}\r\n\r\n\tfunction changeMetadata(Artvatar memory _artvatar) public only(SERVER_ROLE) {\r\n\t\tArtvatar storage artvatar = tokenToArtvatar[_artvatar.id];\r\n\t\trequire(artvatar.metadataChanged == false, \"Metadata of token already changed\");\r\n\t\tAttribute[] memory _attributes = _artvatar.attributes;\r\n\t\tartvatar.series = _artvatar.series;\r\n\t\tartvatar.title = _artvatar.title;\r\n\t\tartvatar.description = _artvatar.description;\r\n\t\tartvatar.image = _artvatar.image;\r\n\r\n\t\tfor (uint256 i = 0; i < _attributes.length; i++) {\r\n\t\t\tAttribute memory attribute = _attributes[i];\r\n\t\t\tartvatar.attributes.push(attribute);\r\n\t\t}\r\n\r\n\t\tartvatar.metadataChanged = true;\r\n\t}\r\n\r\n\tfunction getArtvatarByTokenId(uint256 _tokenId) public view returns (Artvatar memory artvatar) {\r\n\t\treturn tokenToArtvatar[_tokenId];\r\n\t}\r\n\r\n\tfunction closeMinting() public only(DEFAULT_ADMIN_ROLE) {\r\n\t\tmintingClosed = true;\r\n\t}\r\n}\r\n", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"server\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"childChainManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"metaData\",\"type\":\"bytes\"}],\"name\":\"TransferWithMetadata\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"WithdrawnBatch\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BATCH_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSITOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERC712_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SERVER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceWETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_amount\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_amount\",\"type\":\"uint8\"}],\"name\":\"calcPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"}],\"name\":\"ceil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"series\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct ArtvatarsMintableERC721Child.Attribute[]\",\"name\":\"attributes\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"metadataChanged\",\"type\":\"bool\"}],\"internalType\":\"struct ArtvatarsMintableERC721Child.Artvatar\",\"name\":\"_artvatar\",\"type\":\"tuple\"}],\"name\":\"changeMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"depositData\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"encodeTokenMetadata\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getArtvatarByTokenId\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"series\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct ArtvatarsMintableERC721Child.Attribute[]\",\"name\":\"attributes\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"metadataChanged\",\"type\":\"bool\"}],\"internalType\":\"struct ArtvatarsMintableERC721Child.Artvatar\",\"name\":\"artvatar\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeperator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenToArtvatar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"series\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"metadataChanged\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"withdrawBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawWithMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawnTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ArtvatarsMintableERC721Child", "CompilerVersion": "v0.6.6+commit.6c089d02", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000c6b5f5084c9d80a40be1c6a9f1e62c086f5a43ef000000000000000000000000a6fa4fb5f76172d178d61b04b0ecd319c5d1c0aa0000000000000000000000000000000000000000000000000000000000000009417274766174617273000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044152545600000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}