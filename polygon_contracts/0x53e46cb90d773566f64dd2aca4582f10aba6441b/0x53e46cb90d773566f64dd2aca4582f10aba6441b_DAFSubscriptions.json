{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DAFSubscriptions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nimport \\\"./DAFactoryI.sol\\\";\\nimport \\\"./PreviousDAFactoryContractI.sol\\\";\\nimport \\\"./PreviousDAFSubscriptionsContractI.sol\\\";\\nimport \\\"./DAFLib.sol\\\";\\n\\n/// @title DAF (Decentralized Autonomous Factory) subscription token contract.\\n/// @notice This token is an NFT, and its possession is payable. The token corresponds to a subscription to the DAF and allows its holder to access the results of the curation actions performed by the DAF contributors.\\ncontract DAFSubscriptions is ERC721, Ownable, Pausable {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Emitted when a new subscription token is minted.\\n    /// @param senderAddress Address of the new holder.\\n    /// @param tokenId ID of the token minted.\\n    event DAFSubscriptionTokenEmitted(\\n        address indexed senderAddress,\\n        uint256 tokenId\\n    );\\n\\n    /// @notice Emitted when a subscription token add subscription time on his token.\\n    /// @param senderAddress Address of the new holder.\\n    /// @param tokenId ID of the subscriber token.\\n    event DAFSubscriptionTokenAddSubscriptionTime(\\n        address indexed senderAddress,\\n        uint256 tokenId\\n    );\\n\\n    /// @notice Emitted when a subscription token is destroyed.\\n    /// @param punisherAddress Address address of a contributor token owner that invokes the operation.\\n    /// @param punishedTokenId ID of the subscription token to destroy.\\n    /// @param punisherTokenId ID of the contributor token to reward.\\n    event DAFSubscriptionTokenDestroyed(\\n        address indexed punisherAddress,\\n        address senderContractAddress,\\n        address indexed punishedAddress,\\n        uint256 indexed punishedTokenId,\\n        uint256 punisherTokenId,\\n        uint256 rewardPointDeltaForDestruction\\n    );\\n\\n    event DAFSubscriptionTokenMigrated(\\n        address indexed tokenOwner,\\n        uint256 indexed tokenId,\\n        address previousContractAddress,\\n        uint256 oldTokenId,\\n        uint256 dateOfDeath\\n    );\\n\\n    /// @notice Token maximum supply\\n    uint256 public immutable tokenMaxSupply;\\n\\n    /// @dev Holds the ID of the next token to be minted\\n    uint256 public nextId = 0;\\n    /// @notice Price for minting or adding time to a token\\n    uint256 public price;\\n    //// @notice The duration of a unit of subscription time, in seconds. It is the duration of the subscription of a new token.\\n    uint256 public subscriptionTimePeriodInSeconds;\\n    /// @notice Address of DAFactory contract\\n    DAFactoryContract public dafContract;\\n    DAFSubscriptionToken[] public dafSubscriberTokens;\\n    IERC20 private paymentTokenContract;\\n    /// @notice Owner to token mapping\\n    mapping(address => uint256) public ownerToToken;\\n    /// @notice Address of a previous or future version of the contract to use in an eventual migration process\\n    address public migrationVersionAddress;\\n    /// @notice Contract Migration state, if the contract should migrate\\n    MigrationState public migrationState;\\n    /// @notice Migration start time\\n    uint256 public pauseStartTime;\\n\\n    error DAFSubscriptionsAccountMustHaveToken(address account);\\n    error DAFSubscriptionsInvokerMustBeTokenOwner(address invoker);\\n    error DAFSubscriptionsCannotAddZero(uint256 numberOfDurationToAdd);\\n    error DAFSubscriptionsInvokerMustBeDAFactoryContract(address caller);\\n    error DAFSubscriptionsShouldNotBePaused();\\n    error DAFSubscriptionsMigrationNotStarted();\\n    error DAFSubscriptionsNewVersionIsNotDefined();\\n    error DAFSubscriptionsZeroAddressForbidden();\\n    error DAFSubscriptionsDAFContractAddressCantBeNull();\\n    error DAFSubscriptionsMaxSupplyReached();\\n    error DAFSubscriptionsTokenNotExpired();\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint256 _price,\\n        uint256 _subscriptionTimePeriodInSeconds,\\n        uint256 _numberMaxOfTokens,\\n        address _paymentTokenContractAddress\\n    ) ERC721(_name, _symbol) Ownable() {\\n        price = _price;\\n        subscriptionTimePeriodInSeconds = _subscriptionTimePeriodInSeconds;\\n        tokenMaxSupply = _numberMaxOfTokens;\\n        if (_paymentTokenContractAddress == address(0)) {\\n            revert DAFSubscriptionsZeroAddressForbidden();\\n        }\\n        paymentTokenContract = IERC20(_paymentTokenContractAddress);\\n    }\\n\\n    /// @notice Pause the contract\\n    function pause() external onlyOwner {\\n        pauseStartTime = block.timestamp;\\n        _pause();\\n    }\\n\\n    /// @notice Unpause the contract\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /// @notice Get the token ID of a token owner\\n    /// @param owner expected to be a token owner\\n\\n    function getTokenIdOf(address owner) external view returns (uint256) {\\n        if (balanceOf(owner) == 0) {\\n            revert DAFSubscriptionsAccountMustHaveToken(owner);\\n        }\\n        return ownerToToken[owner];\\n    }\\n\\n    /// @notice Get the info of a token\\n    /// @param tokenId ID of the token\\n    /// @return Info of a token, of type `DAFSubscriptionToken`\\n    function getToken(uint256 tokenId)\\n        external\\n        view\\n        returns (DAFSubscriptionToken memory)\\n    {\\n        _requireMinted(tokenId);\\n        return dafSubscriberTokens[tokenId];\\n    }\\n\\n    /// @notice Get the number of active tokens.\\n    /// @return The number of active tokens.\\n    function getTokensCount() external view returns (uint256) {\\n        uint256 tokenNumber = 0;\\n        for (uint256 i = 0; i < dafSubscriberTokens.length; i++) {\\n            if (_exists(i)) {\\n                tokenNumber++;\\n            }\\n        }\\n        return tokenNumber;\\n    }\\n\\n    /// @notice Indicates whether or not an address has a valid token. An expired token is not considered as valid.\\n    /// @param _owner An address\\n    /// @return true if the address has a valid token, false else\\n    function isNftOwnerOfValidToken(address _owner) public view returns (bool) {\\n        if (\\n            _owner == address(0) ||\\n            balanceOf(_owner) == 0 ||\\n            !_exists(ownerToToken[_owner])\\n        ) {\\n            return false;\\n        }\\n\\n        return !dateIsOver(ownerToToken[_owner]);\\n    }\\n\\n    /// @notice Check in the current contract and in the previous version of the contract - if it exists, following an eventual migration -if an address has a valid token.\\n    /// An expired token is not considered as valid.\\n    /// @return true if the address has a valid token, false else.\\n    function isNftOwnerOfValidTokenFromCurrentOrMigratedVersion(address account)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        // Check first in the current contract\\n        if (isNftOwnerOfValidToken(account)) {\\n            return true;\\n        }\\n\\n        if (\\n            migrationVersionAddress == address(0) ||\\n            migrationState != MigrationState.Started\\n        ) {\\n            return false;\\n        }\\n        PreviousDAFSubscriptionsContractI migratedVersion = PreviousDAFSubscriptionsContractI(\\n                migrationVersionAddress\\n            );\\n        return migratedVersion.isNftOwnerOfValidToken(account);\\n    }\\n\\n    /// @notice Allow to know if a token is burnable\\n    /// @param tokenId The token ID to get info on\\n    function isBurnable(uint256 tokenId) external view returns (bool) {\\n        return\\n            dafSubscriberTokens[tokenId].dateOfDeath > 0 &&\\n            block.timestamp > dafSubscriberTokens[tokenId].dateOfDeath;\\n    }\\n\\n    /// @notice Returns the number of token left to mint. We have a total of `tokenMaxSupply` tokens.\\n    /// @return numberOfNFTsLeft The number of token left  to mint.\\n    function getNumberOfNFTsLeft()\\n        public\\n        view\\n        returns (uint256 numberOfNFTsLeft)\\n    {\\n        return tokenMaxSupply - this.getTokensCount();\\n    }\\n\\n    function mintAndStore(address account, DAFSubscriptionToken memory newToken)\\n        internal\\n        returns (uint256 newTokenId)\\n    {\\n        ownerToToken[account] = nextId;\\n\\n        if (nextId >= dafSubscriberTokens.length) {\\n            dafSubscriberTokens.push(newToken);\\n        } else {\\n            dafSubscriberTokens[nextId] = newToken;\\n        }\\n\\n        newTokenId = nextId;\\n        _mint(account, newTokenId);\\n\\n        uint256 newNextId = dafSubscriberTokens.length;\\n        // compute nextId from actual array to fill the gaps\\n        for (uint256 i = 0; i < dafSubscriberTokens.length; i++) {\\n            if (!_exists(i)) {\\n                newNextId = i;\\n                break;\\n            }\\n        }\\n        nextId = newNextId;\\n\\n        return newTokenId;\\n    }\\n\\n    /// @notice Mint a DAF subscriber token for the invoker of the function. This invocation is not free (`price` ).\\n    /// @notice A subscriber token gives access to the result of the curations performed by the DAF contributors on the information submitted by the core contributors.\\n    //slither-disable-next-line external-function https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external\\n    function mint() public payable {\\n        if (address(dafContract) == address(0)) {\\n            revert DAFSubscriptionsDAFContractAddressCantBeNull();\\n        }\\n        DAFLib.requireAccountNotToHaveToken(\\n            msg.sender,\\n            dafContract,\\n            DAFSubscriptionsContract(address(this))\\n        );\\n        if (getNumberOfNFTsLeft() == 0) {\\n            revert DAFSubscriptionsMaxSupplyReached();\\n        }\\n\\n        // Get tokens from sender to the main contract\\n        paymentTokenContract.safeTransferFrom(\\n            msg.sender,\\n            address(dafContract),\\n            price\\n        );\\n\\n        DAFSubscriptionToken memory newToken = DAFSubscriptionToken(\\n            msg.sender,\\n            block.timestamp + subscriptionTimePeriodInSeconds\\n        );\\n\\n        uint256 newTokenId = mintAndStore(msg.sender, newToken);\\n\\n        emit DAFSubscriptionTokenEmitted(msg.sender, newTokenId);\\n    }\\n\\n    /// @notice Allows you to add a subscription time unit to the token's subscription duration (`subscriptionTimePeriodInSeconds`).\\n    /// The function is not free (`price`).\\n\\n    function addTime(uint256 numberOfDurationToAdd)\\n        external\\n        payable\\n        whenNotPaused\\n    {\\n        if (balanceOf(msg.sender) == 0) {\\n            revert DAFSubscriptionsInvokerMustBeTokenOwner(msg.sender);\\n        }\\n        if (numberOfDurationToAdd == 0) {\\n            revert DAFSubscriptionsCannotAddZero(numberOfDurationToAdd);\\n        }\\n\\n        uint256 newDateByAddition = dafSubscriberTokens[\\n            ownerToToken[msg.sender]\\n        ].dateOfDeath + numberOfDurationToAdd * subscriptionTimePeriodInSeconds;\\n        uint256 newDateFromNow = block.timestamp +\\n            numberOfDurationToAdd *\\n            subscriptionTimePeriodInSeconds;\\n        //slither-disable-next-line timestamp\\n        if (newDateFromNow > newDateByAddition) {\\n            dafSubscriberTokens[ownerToToken[msg.sender]]\\n                .dateOfDeath = newDateFromNow;\\n        } else {\\n            dafSubscriberTokens[ownerToToken[msg.sender]]\\n                .dateOfDeath = newDateByAddition;\\n        }\\n        emit DAFSubscriptionTokenAddSubscriptionTime(\\n            msg.sender,\\n            ownerToToken[msg.sender]\\n        );\\n\\n        paymentTokenContract.safeTransferFrom(\\n            msg.sender,\\n            address(dafContract),\\n            price * numberOfDurationToAdd\\n        );\\n    }\\n\\n    function setPrice(uint256 _newPrice) external onlyOwner {\\n        price = _newPrice;\\n    }\\n\\n    function setSubscriptionTimePeriodInSeconds(uint256 _time)\\n        external\\n        onlyOwner\\n    {\\n        subscriptionTimePeriodInSeconds = _time;\\n    }\\n\\n    //// @dev Set the reference to the application main contract, DAFactory.\\n    /// @param _dafContract The address of DAFactory contract.\\n    function setDAFContract(address _dafContract) external onlyOwner {\\n        if (_dafContract == address(0)) {\\n            revert DAFSubscriptionsZeroAddressForbidden();\\n        }\\n        dafContract = DAFactoryContract(_dafContract);\\n    }\\n\\n    //// @notice Allows to know if a token has expired.\\n    /// @param _tokenId ID of the subscription token.\\n    function dateIsOver(uint256 _tokenId) public view returns (bool) {\\n        //slither-disable-next-line timestamp\\n        return dafSubscriberTokens[_tokenId].dateOfDeath < block.timestamp;\\n    }\\n\\n    /// @notice Burn a token that has expired.\\n    /// @param punishedTokenId ID of the token to burn\\n\\n    function burnToken(\\n        address punisherAddress,\\n        uint256 punisherTokenId,\\n        uint256 punishedTokenId,\\n        uint256 rewardPointDeltaForDestruction\\n    ) external whenNotPaused {\\n        //slither-disable-next-line incorrect-equality: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities\\n        if (msg.sender != address(dafContract)) {\\n            revert DAFSubscriptionsInvokerMustBeDAFactoryContract(msg.sender);\\n        }\\n        _requireMinted(punishedTokenId);\\n        if (!dateIsOver(punishedTokenId)) {\\n            revert DAFSubscriptionsTokenNotExpired();\\n        }\\n        address punishedAddress = ERC721.ownerOf(punishedTokenId);\\n        ownerToToken[ERC721.ownerOf(punishedTokenId)] = 0;\\n        _burn(punishedTokenId);\\n        nextId = punishedTokenId;\\n        delete dafSubscriberTokens[punishedTokenId];\\n        emit DAFSubscriptionTokenDestroyed(\\n            punisherAddress,\\n            msg.sender,\\n            punishedAddress,\\n            punishedTokenId,\\n            punisherTokenId,\\n            rewardPointDeltaForDestruction\\n        );\\n    }\\n\\n    function getTimeLeftAsAString(uint256 _dateOfDeath)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        uint256 numberOfDays = 0;\\n        uint256 numberOfHoursLeft = 0;\\n        //slither-disable-next-line timestamp\\n        if (_dateOfDeath > block.timestamp) {\\n            numberOfDays = ((_dateOfDeath - block.timestamp) / 86400);\\n            //slither-disable-next-line weak-prng: https://github.com/crytic/slither/wiki/Detector-Documentation#weak-prng\\n            numberOfHoursLeft =\\n                ((_dateOfDeath - block.timestamp) % 86400) /\\n                3600;\\n        }\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    numberOfDays >= 1\\n                        ? Strings.toString(numberOfDays)\\n                        : Strings.toString(numberOfHoursLeft),\\n                    numberOfDays >= 1 ? \\\" Days\\\" : \\\" Hours\\\"\\n                )\\n            );\\n    }\\n\\n    function getImageURI(uint256 _dateOfDeath)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        string memory svg = string(\\n            abi.encodePacked(\\n                \\\"<svg xmlns='http://www.w3.org/2000/svg' width='50px' height='50px'><path fill='#fff' d='M1 1h350v300H1z'/><text x='50%' y='40%' text-anchor='middle' font-size='9' fill='#000'>\\\",\\n                getTimeLeftAsAString(_dateOfDeath),\\n                \\\"<tspan x='50%' y='70%'>Left</tspan></text></svg>\\\"\\n            )\\n        );\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:image/svg+xml;base64,\\\",\\n                    Base64.encode(bytes(string(abi.encodePacked(svg))))\\n                )\\n            );\\n    }\\n\\n    /// @notice Overriding of ERC721 tokenURI function.\\n    function tokenURI(uint256 _tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        _requireMinted(_tokenId);\\n        /* solhint-disable quotes */\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        bytes(\\n                            abi.encodePacked(\\n                                '{\\\"name\\\": \\\"TAF Subscriber\\\",\\\"description\\\": \\\"thealphafactory.xyz\\\", \\\"image\\\":\\\"',\\n                                getImageURI(\\n                                    dafSubscriberTokens[_tokenId].dateOfDeath\\n                                ),\\n                                '\\\",\\\"attributes\\\": [{\\\"trait_type\\\": \\\"time left\\\", \\\"value\\\":\\\"',\\n                                getTimeLeftAsAString(\\n                                    dafSubscriberTokens[_tokenId].dateOfDeath\\n                                ),\\n                                '\\\"}]}'\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n        /* solhint-enable quotes */\\n    }\\n\\n    /// @dev Know if a token exists\\n    /// @param tokenId ID of the token\\n    /// @return true if the token exists, false.\\n    function exists(uint256 tokenId) external view returns (bool) {\\n        return _exists(tokenId);\\n    }\\n\\n    /// @dev Implement _beforeTokenTransfer function from {ERC721URIStorage}\\n    /// @param from adress to transfer token from\\n    /// @param to adress to transfer token to\\n    /// @param tokenId ID of the token\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256\\n    ) internal override whenNotPaused {\\n        ownerToToken[to] = tokenId;\\n        ownerToToken[from] = 0;\\n\\n        // In case of burn, we don't want to check\\n        if (to != address(0)) {\\n            DAFLib.requireAccountNotToHaveToken(\\n                to,\\n                dafContract,\\n                DAFSubscriptionsContract(address(this))\\n            );\\n        }\\n    }\\n\\n    ///************************** Migration functions ***********************\\n\\n    /**\\n     * @dev Override _requireNotPaused from {Pausable} with a more instructive message for the user.\\n     * Throws if the contract is paused.\\n     */\\n\\n    function _requireNotPaused() internal view override(Pausable) {\\n        if (paused()) {\\n            revert DAFSubscriptionsShouldNotBePaused();\\n        }\\n    }\\n\\n    /// @notice Validates that all the conditions are met to perform a migration operation.\\n\\n    modifier onlyIfMigrationStateIsValid() {\\n        //slither-disable-next-line incorrect-equality https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities\\n        bool migrationStarted = migrationState == MigrationState.Started;\\n        if (!migrationStarted) {\\n            revert DAFSubscriptionsMigrationNotStarted();\\n        }\\n        bool newVersionAddressDefined = migrationVersionAddress != address(0);\\n        if (!newVersionAddressDefined) {\\n            revert DAFSubscriptionsNewVersionIsNotDefined();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Requires migration to be explicitly started\\n    modifier onlyWhenMigrationStarted() {\\n        //slither-disable-next-line incorrect-equality https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities\\n        bool migrationStarted = migrationState == MigrationState.Started;\\n        if (!migrationStarted) {\\n            revert DAFSubscriptionsMigrationNotStarted();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Explicitly put the contract in migration state. Migration functions can only be invoked in this state.\\n    function startMigration() external onlyOwner {\\n        migrationState = MigrationState.Started;\\n    }\\n\\n    /// @notice Ending the migration\\n    function finishMigration() external onlyOwner onlyWhenMigrationStarted {\\n        migrationState = MigrationState.Ended;\\n        migrationVersionAddress = address(0);\\n    }\\n\\n    /// @notice Set the address of the new of previous version of the contract.\\n    /// @param _migrationVersionAddress Contract new or previous version address, in the context of a migration\\n\\n    function setContractMigrationVersionAddress(\\n        address _migrationVersionAddress\\n    ) external onlyOwner {\\n        if (_migrationVersionAddress == address(0)) {\\n            revert DAFSubscriptionsZeroAddressForbidden();\\n        }\\n        //slither-disable-next-line events-access https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-access-control\\n        migrationVersionAddress = _migrationVersionAddress;\\n    }\\n\\n    /// @notice Migrates the subscriber's token from the previous version of the contract being migrated to this new version, keeping the token data.\\n    function migrateTokenFromPreviousVersion()\\n        external\\n        onlyIfMigrationStateIsValid\\n    {\\n        DAFLib.requireAccountNotToHaveToken(\\n            msg.sender,\\n            dafContract,\\n            DAFSubscriptionsContract(address(this))\\n        );\\n\\n        PreviousDAFSubscriptionsContractI previousVersion = PreviousDAFSubscriptionsContractI(\\n                migrationVersionAddress\\n            );\\n\\n        // If the invoker is not a token  owner, this next call is supposed to fail\\n        uint256 tokenId = previousVersion.getTokenIdOf(msg.sender);\\n        DAFSubscriptionToken memory token = previousVersion.getToken(tokenId);\\n\\n        // New date of death\\n        uint256 currentVersionPauseStartTime = previousVersion.pauseStartTime();\\n        uint256 dateOfDeathUpdated = token.dateOfDeath;\\n        int256 tokenTimeRemaining = int256(token.dateOfDeath) -\\n            int256(currentVersionPauseStartTime);\\n        if (tokenTimeRemaining > 0) {\\n            dateOfDeathUpdated = block.timestamp + uint256(tokenTimeRemaining);\\n        }\\n        token.dateOfDeath = dateOfDeathUpdated;\\n\\n        uint256 newTokenId = mintAndStore(msg.sender, token);\\n\\n        emit DAFSubscriptionTokenMigrated(\\n            msg.sender,\\n            newTokenId,\\n            migrationVersionAddress,\\n            tokenId,\\n            dateOfDeathUpdated\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/PreviousDAFactoryContractI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity 0.8.13;\\n\\nimport \\\"./DAFLib.sol\\\";\\n\\n/// @title Interface specifying some functions of the previous deployed version of DAFactory contract,with possible differences with the new version to be deployed.\\n/// This interface is intended to be used mainly in the context of a migration operation.\\ninterface PreviousDAFactoryContractI {\\n    /// @dev See {DAFactory-setDAFSubscriptionsContract}.\\n    function setDAFSubscriptionsContract(\\n        address dafSubscriptionsContractAddress\\n    ) external;\\n\\n    /// @dev See {DAFactory-getQuestion}.\\n    function getQuestion(string calldata id)\\n        external\\n        view\\n        returns (GetQuestionPageItemQueryResult memory);\\n\\n    /// @dev See {DAFactory-mint}.\\n    function mint() external;\\n\\n    /// @dev See {DAFactory-createQuestion}.\\n    function createQuestion(\\n        string calldata questionId,\\n        string[] calldata answersIds,\\n        uint256 timeToVote\\n    ) external;\\n\\n    /// @dev See {DAFactory-vote}.\\n    function vote(string calldata questionId, uint256 answerIdIndex) external;\\n\\n    /// @dev See {DAFactory-vote}.\\n    function totalOfPoints() external view returns (uint256);\\n\\n    /// @dev See {IERC721-balanceOf}.\\n    function balanceOf(address) external view returns (uint256);\\n\\n    /// @dev See {DAFactory-getBalance}.\\n    function getBalance() external view returns (uint256);\\n\\n    /// @dev See {DAFactory-isNftOwnerOfValidToken}.\\n    function isNftOwnerOfValidToken(address wallet)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @dev See {DAFactory-exists}.\\n    function exists(uint256 tokenId) external view returns (bool);\\n\\n    /// @dev See {DAFactory-isCoreMember}.\\n    function isCoreMember(address account) external view returns (bool);\\n\\n    /// @dev See {DAFactory-getTokenIdOf}.\\n    function getTokenIdOf(address owner) external view returns (uint256);\\n\\n    /// @dev See {DAFactory-getToken}.\\n    function getToken(uint256 tokenId)\\n        external\\n        view\\n        returns (DAFContributorToken memory);\\n\\n    function punishInactiveToken(\\n        uint256 punishedTokenId,\\n        string calldata questionId\\n    ) external;\\n\\n    /// @dev See {DAFactory-burnContributorTokenForMigration}.\\n    function burnContributorTokenForMigration(uint256 tokenId) external;\\n\\n    /// @dev See {DAFactory-burnExpiredSubscriptionToken}.\\n    function burnExpiredSubscriptionToken(uint256 _subscribedTokenId) external;\\n\\n    /// @dev See {DAFactory-startMigration}.\\n    function startMigration() external;\\n\\n    /// @dev See {DAFactory-finishMigration}.\\n    function finishMigration() external;\\n\\n    /// @notice Set the address of the new version of the contract.\\n    /// @param newVersionAddress Contract new version address\\n    function setContractMigrationVersionAddress(address newVersionAddress)\\n        external;\\n\\n    /// @dev See {DAFactory-getNewVersionAddress}.\\n    function getNewVersionAddress() external view returns (address);\\n\\n    /// @dev See {DAFactory-migrationState}.\\n    function migrationState() external view returns (MigrationState);\\n\\n    /// @dev See {DAFactory-pauseStartTime}.\\n    function pauseStartTime() external view returns (uint256);\\n\\n    /// @dev See {DAFactory-paused}.\\n    function paused() external view returns (bool);\\n\\n    /// @dev See {DAFactory-pause}.\\n    function pause() external;\\n\\n    /// @dev See {DAFactory-unpause}.\\n    function unpause() external;\\n\\n    /// @dev See {DAFactory-upgrade}.\\n    function upgrade() external;\\n\\n    /// @dev See {DAFactory-gracefulTokenPunishmentTimePeriod}.\\n    function gracefulTokenPunishmentTimePeriod()\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/DAFactoryI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity 0.8.13;\\n\\n/// @title Interface specifying the functions of DAFactory contract used in external invocations.\\ninterface DAFactoryContract {\\n    /// @dev See {IERC721-balanceOf}.\\n    function balanceOf(address) external view returns (uint256);\\n\\n    /// @dev See {DAFactory-getBalance}.\\n    function getBalance() external view returns (uint256);\\n\\n    /// @dev See {DAFactory-isNftOwnerOfValidToken}.\\n    function isNftOwnerOfValidToken(address wallet)\\n        external\\n        view\\n        returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/PreviousDAFSubscriptionsContractI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity 0.8.13;\\n\\nimport \\\"./DAFLib.sol\\\";\\n\\n/// @title Interface specifying some functions of the previous deployed version of DAFSubscriptions contract,with possible differences with the new version to be deployed.\\n/// This interface is intended to be used mainly in the context of a migration operation.\\ninterface PreviousDAFSubscriptionsContractI {\\n    /// @dev See {DAFSubscriptions-balanceOf}.\\n    function balanceOf(address) external view returns (uint256);\\n\\n    /// @dev See {DAFSubscriptions-mint}.\\n    function mint() external;\\n\\n    /// @dev See {DAFSubscriptions-setDAFContract}.\\n    function setDAFContract(address _dafContract) external;\\n\\n    /// @dev See {DAFSubscriptions-isNftOwnerOfValidToken}.\\n    function isNftOwnerOfValidToken(address wallet)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @dev See {DAFSubscriptions-exists}.\\n    function exists(uint256 tokenId) external view returns (bool);\\n\\n    /// @dev See {DAFSubscriptions-burnToken}.\\n    function burnToken(\\n        address punisherAddress,\\n        uint256 _tokenId,\\n        uint256 rewardPointDeltaForDestruction\\n    ) external;\\n\\n    /// @dev See {DAFSubscriptions-setContractMigrationVersionAddress}.\\n    function setContractMigrationVersionAddress(address newVersionAddress)\\n        external;\\n\\n    /// @dev See {DAFSubscriptions-getTokenIdOf}.\\n    function getTokenIdOf(address owner) external view returns (uint256);\\n\\n    /// @dev See {DAFSubscriptions-getToken}.\\n    function getToken(uint256 tokenId)\\n        external\\n        view\\n        returns (DAFSubscriptionToken memory);\\n\\n    /// @dev See {DAFSubscriptions-startMigration}.\\n    function startMigration() external;\\n\\n    /// @dev See {DAFSubscriptions-finishMigration}.\\n    function finishMigration() external;\\n\\n    /// @dev See {DAFSubscriptions-migrationState}.\\n    function migrationState() external view returns (MigrationState);\\n\\n    /// @dev See {DAFSubscriptions-pauseStartTime}.\\n    function pauseStartTime() external view returns (uint256);\\n\\n    /// @dev See {DAFSubscriptions-paused}.\\n    function paused() external view returns (bool);\\n\\n    /// @dev See {DAFSubscriptions-pause}.\\n    function pause() external;\\n\\n    /// @dev See {DAFSubscriptions-unpause}.\\n    function unpause() external;\\n\\n    /// @dev See {DAFSubscriptions-addTime}.\\n    function addTime(uint256 numberOfDurationToAdd) external;\\n}\\n\"\r\n    },\r\n    \"contracts/DAFLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./IntegerWrapper.sol\\\";\\nimport \\\"./DAFactoryI.sol\\\";\\nimport \\\"./DAFSubscriptionsI.sol\\\";\\n\\n/// @dev Possible roles of DAF tokens.\\nenum Role {\\n    Contributor,\\n    Core\\n}\\n\\n/// @dev Possible states of a token in a voting process\\nenum TokenVotingState {\\n    Pending,\\n    Voted,\\n    Punished\\n}\\n\\n/// @dev Data structure of a question\\nstruct QuestionStruct {\\n    string baseQuestion;\\n    string id;\\n    string[] answersIds;\\n    uint256[] votesOfEachAnswers;\\n    uint256 dateOfCreation;\\n    uint256 timeToVote;\\n    uint256[] bestAnswers;\\n    uint256 minimumVotesForConsensus;\\n    bool reachedConsensus;\\n}\\n\\nenum MigrationState {\\n    NotStarted,\\n    Started,\\n    Ended\\n}\\n\\n/// @dev Data structure containing all state variables of DAFactory contract.\\n/// It is an approach inspired by the AppStorage pattern\\nstruct DAFStorage {\\n    /// @notice Reference to DAFSubscriptions external interface\\n    DAFSubscriptionsContract dafSubscriptionsContract;\\n    /// @notice Starting score (number of points) of a new token. Also score assigned to a dead token revived (against payment)\\n    uint256 startScore;\\n    /// @notice Holds the ID of the next token to be minted\\n    uint256 nextId;\\n    /// @notice Price for reviving a token that has no more points (in wei)\\n    uint256 revivePrice;\\n    /// @notice Grace period (in second)  granted to a token which has just had zero point before authorizing its destruction by other tokens.\\n    uint256 gracefulTokenPunishmentTimePeriod;\\n    /// @notice Number of points required to upgrade a contributor token to core contributor\\n    uint256 scoreToUpgrade;\\n    /// @notice Holds the total number of points generated by the efforts of the DAF contributors\\n    IntegerWrapper.Integer totalOfPoints;\\n    /// @notice List of information for each contributor token\\n    DAFContributorToken[] dafContributorTokens;\\n    /// @notice Owner to token mapping\\n    mapping(address => uint256) ownerToToken;\\n    /// @notice Number of penalty points for a punished token\\n    uint256 punishmentPointDelta;\\n    /// @notice Reward in points of a token for a voting action\\n    uint256 rewardPointDeltaForVoting;\\n    /// @notice Reward in number of points of a token for a punishment action on another token\\n    uint256 rewardPointDeltaForPunishment;\\n    /// @notice Reward in points of a token for the destruction of a token which does not have any more points\\n    uint256 rewardPointDeltaForDestruction;\\n    /// @notice Minimum time required between the creation of a new question and the end of the vote. Expressed in seconds.\\n    uint256 minimumTimeToVote;\\n    /// @notice The generic question used to introduce the subject of each vote\\n    string baseQuestion;\\n    /// @notice The generic choices proposed as possible answers to the voting questions. For now: yes and no\\n    string[] baseAnswers;\\n    /// @notice The IDs of all the questions created\\n    string[] allQuestionIds;\\n    /// @notice Question info by question ID mapping\\n    mapping(string => QuestionStruct) questionsById;\\n    /// @notice Tokens voting states for a question  by the question ID\\n    mapping(string => mapping(uint256 => TokenVotingState)) tokensState;\\n    /// @notice Address of a previous or future version of the contract to use in an eventual migration process\\n    address migrationVersionAddress;\\n    /// @notice Contract Migration state, if the contract should migrate\\n    MigrationState migrationState;\\n    /// @notice Contract pause start time\\n    uint256 pauseStartTime;\\n}\\n\\n/// @dev Result of getQuestionsPage function\\nstruct GetQuestionPageResult {\\n    GetQuestionPageItemQueryResult[] items;\\n    uint256 numberOfPages;\\n}\\n\\n/// @dev Structure containing the result of a query for questions\\nstruct GetQuestionPageItemQueryResult {\\n    QuestionStruct question;\\n    bool invokerVotedOn;\\n}\\n\\n/// @dev Structure containing the information of a contributor token\\nstruct DAFContributorToken {\\n    uint256 id;\\n    address owner;\\n    uint256 score;\\n    uint256 dateOfCreation;\\n    uint256 dateOfDeath;\\n    Role role;\\n}\\n\\nstruct DAFSubscriptionToken {\\n    address owner;\\n    uint256 dateOfDeath;\\n}\\n\\n/// @title  DAF library.\\nlibrary DAFLib {\\n    using IntegerWrapper for IntegerWrapper.Integer;\\n    using SafeERC20 for IERC20;\\n\\n    // Sharing event with DAFactory here in order to emit event from DAFLib\\n    // https://blog.aragon.org/library-driven-development-in-solidity-2bebcaf88736/#events-and-libraries\\n    event ConsensusReached(string questionId, string consensusAnswerId);\\n\\n    error DAFQuestionDoesNotExist(string id);\\n    error DAFTokenScoreIsNotNull(uint256 tokenId);\\n    error DAFTokenNotInDeathStage(uint256 tokenId);\\n    error DAFTokenHasAlreadyBeenBurnt(uint256 tokenId);\\n    error DAFQuestionAlreadyExists(string questionId);\\n    error DAFQuestionTimeToVoteShouldBeBiggerThanMinimumTimeToVote(\\n        string questionId,\\n        uint256 time\\n    );\\n    error DAFQuestionMoreThanOneAnswerRequired(\\n        string questionId,\\n        uint256 numberOfAnswersProvided\\n    );\\n    error DAFAccountShouldNotHaveContributorToken(address account);\\n    error DAFAccountShouldNotHaveSubscriberToken(address account);\\n    error DAFSubscribersShouldGetQuestionsFromBackend();\\n    error DAFQuestionVotingTimeIsOver(\\n        string questionId,\\n        uint256 deadlineToVote\\n    );\\n    error DAFTokenReviveTimeIsOver(uint256 tokenId, uint256 deadlineToRevive);\\n    error DAFTokenOwnerCannotPunishItself(uint256 tokenId);\\n    error DAFCannotPunishTokenCreatedAfterQuestion(\\n        uint256 tokenId,\\n        uint256 tokenCreationDate,\\n        uint256 questionCreationDate\\n    );\\n    error DAFCannotPunishOnQuestionBeforeItsOver(\\n        string questionId,\\n        uint256 deadlineToVote\\n    );\\n    error DAFTokenScoreMustNotBeNull();\\n    error DAFTokenMustNotHaveVoted(uint256 tokenId);\\n    error DAFNotEnoughPointsToWithdraw();\\n    error DAFCannotWithdrawUnderStartScore();\\n    error DAFCoreContributorCannotUpgrade(uint256 tokenId);\\n    error DAFInsufficientScoreToUpgrade(uint256 tokenId);\\n\\n    function getCurrentMinimumVoteNumberToShowToSubscriber(\\n        uint256 validTokensNumber\\n    ) public pure returns (uint256 voteNumber) {\\n        uint256 halfInt = validTokensNumber / 2;\\n\\n        return halfInt + 1;\\n    }\\n\\n    /// @notice Get a question from its id.\\n    /// @dev The other arguments come from the contract that invokes this library.\\n    /// @return result The question whose index is passed as argument.\\n\\n    function getQuestion(\\n        QuestionStruct storage question,\\n        bool isValidContributor,\\n        bool isValidSubscriber,\\n        uint256 tokenId,\\n        mapping(string => mapping(uint256 => TokenVotingState))\\n            storage tokensState\\n    ) public view returns (GetQuestionPageItemQueryResult memory result) {\\n        if (bytes(question.id).length == 0) {\\n            revert DAFQuestionDoesNotExist(question.id);\\n        }\\n        result.invokerVotedOn =\\n            isValidContributor &&\\n            tokensState[question.id][tokenId] == TokenVotingState.Voted;\\n\\n        // slither-disable-next-line timestamp\\n        bool isAllowedToSeeVotes = isValidContributor &&\\n            (question.dateOfCreation + question.timeToVote < block.timestamp || // Voting is over\\n                tokensState[question.id][tokenId] == TokenVotingState.Voted || // Has voted\\n                tokensState[question.id][tokenId] == TokenVotingState.Punished);\\n        // Has been punished\\n\\n        if (isValidSubscriber || isAllowedToSeeVotes) {\\n            result.question = question;\\n        } else {\\n            result.question = QuestionStruct(\\n                question.baseQuestion,\\n                question.id,\\n                question.answersIds,\\n                new uint256[](question.answersIds.length),\\n                question.dateOfCreation,\\n                question.timeToVote,\\n                new uint256[](question.answersIds.length),\\n                question.minimumVotesForConsensus,\\n                question.reachedConsensus\\n            );\\n        }\\n    }\\n\\n    /// @notice See {DAFactory-getTokensState}.\\n    function getTokensState(\\n        DAFContributorToken[] storage dafContributorTokens,\\n        mapping(string => mapping(uint256 => TokenVotingState))\\n            storage tokensState,\\n        string calldata questionId\\n    ) external view returns (TokenVotingState[] memory states) {\\n        states = new TokenVotingState[](dafContributorTokens.length);\\n        for (uint256 i = 0; i < dafContributorTokens.length; i++) {\\n            states[i] = tokensState[questionId][i];\\n        }\\n        return states;\\n    }\\n\\n    function addPoints(\\n        DAFContributorToken storage token,\\n        uint256 _nbOfPoints,\\n        IntegerWrapper.Integer storage totalOfPoints\\n    ) public {\\n        token.score = token.score + _nbOfPoints;\\n        totalOfPoints.increment(_nbOfPoints);\\n    }\\n\\n    function addPoints(DAFContributorToken storage token, uint256 _nbOfPoints)\\n        public\\n    {\\n        token.score = token.score + _nbOfPoints;\\n    }\\n\\n    /// @notice See {DAFactory-burnContributorToken}.\\n\\n    function burnContributorToken(\\n        DAFContributorToken storage targetToken,\\n        DAFContributorToken storage invokerToken,\\n        uint256 gracefulTokenPunishmentTimePeriod,\\n        uint256 rewardPointDeltaForDestruction,\\n        IntegerWrapper.Integer storage totalOfPoints,\\n        mapping(address => uint256) storage ownerToToken,\\n        MigrationState migrationState\\n    ) public {\\n        if (migrationState != MigrationState.Started) {\\n            if (targetToken.score > 0) {\\n                revert DAFTokenScoreIsNotNull(targetToken.id);\\n            }\\n            // slither-disable-next-line timestamp\\n            if (\\n                targetToken.dateOfDeath + gracefulTokenPunishmentTimePeriod >=\\n                block.timestamp\\n            ) {\\n                revert DAFTokenNotInDeathStage(targetToken.id);\\n            }\\n        }\\n        if (targetToken.owner == address(0)) {\\n            revert DAFTokenHasAlreadyBeenBurnt(targetToken.id);\\n        }\\n        ownerToToken[targetToken.owner] = 0;\\n        targetToken.owner = address(0);\\n        addPoints(invokerToken, rewardPointDeltaForDestruction, totalOfPoints);\\n    }\\n\\n    /// @notice See {DAFactory-burnExpiredSubscriptionToken}.\\n    function burnExpiredSubscriptionToken(\\n        address punisherAddress,\\n        DAFContributorToken[] storage dafContributorTokens,\\n        uint256 punisherTokenId,\\n        uint256 subscribedTokenId,\\n        IntegerWrapper.Integer storage totalOfPoints,\\n        uint256 rewardPointDeltaForDestruction,\\n        DAFSubscriptionsContract dafSubscriptionsContract\\n    ) external {\\n        requireTokenToBeAlive(dafContributorTokens[punisherTokenId]);\\n        addPoints(\\n            dafContributorTokens[punisherTokenId],\\n            rewardPointDeltaForDestruction,\\n            totalOfPoints\\n        );\\n        dafSubscriptionsContract.burnToken(\\n            punisherAddress,\\n            punisherTokenId,\\n            subscribedTokenId,\\n            rewardPointDeltaForDestruction\\n        );\\n    }\\n\\n    /// @notice See {DAFactory-createQuestion and DAFactory-createQuestionAsOwner}.\\n    function createQuestion(\\n        // slither-disable-next-line timestamp\\n        string memory baseQuestionToSave,\\n        string memory questionId,\\n        string[] calldata answersIds,\\n        uint256 timeToVote,\\n        uint256 minimumTimeToVote,\\n        mapping(string => QuestionStruct) storage questionsById,\\n        DAFContributorToken[] storage dafContributorTokens,\\n        string[] storage allQuestions\\n    ) internal {\\n        // slither-disable-next-line timestamp\\n        if (bytes(questionsById[questionId].id).length > 0) {\\n            revert DAFQuestionAlreadyExists(questionId);\\n        }\\n        if (timeToVote < minimumTimeToVote) {\\n            revert DAFQuestionTimeToVoteShouldBeBiggerThanMinimumTimeToVote(\\n                questionId,\\n                timeToVote\\n            );\\n        }\\n        if (answersIds.length <= 1) {\\n            revert DAFQuestionMoreThanOneAnswerRequired(\\n                questionId,\\n                answersIds.length\\n            );\\n        }\\n\\n        uint256 numberOfValidTokens = 0;\\n        for (uint256 i = 0; i < dafContributorTokens.length; i++) {\\n            if (dafContributorTokens[i].score > 0) {\\n                numberOfValidTokens += 1;\\n            }\\n        }\\n\\n        // solhint-disable not-rely-on-time\\n        questionsById[questionId] = QuestionStruct(\\n            baseQuestionToSave,\\n            questionId,\\n            answersIds,\\n            new uint256[](answersIds.length),\\n            block.timestamp,\\n            timeToVote,\\n            new uint256[](answersIds.length),\\n            getCurrentMinimumVoteNumberToShowToSubscriber(numberOfValidTokens),\\n            false\\n        );\\n        allQuestions.push(questionId);\\n    }\\n\\n    /// @notice To know if an address has or not a token, of contributor or subscriber type\\n    /// @param _account An Address\\n    /// @param daFactoryContract DAFactoryContract reference\\n    /// @param dafSubscriptionsContract DAFSubscriptionsContract reference\\n\\n    function requireAccountNotToHaveToken(\\n        address _account,\\n        DAFactoryContract daFactoryContract,\\n        DAFSubscriptionsContract dafSubscriptionsContract\\n    ) external view {\\n        if (daFactoryContract.balanceOf(_account) > 0) {\\n            revert DAFAccountShouldNotHaveContributorToken(_account);\\n        }\\n        if (dafSubscriptionsContract.balanceOf(_account) > 0) {\\n            revert DAFAccountShouldNotHaveSubscriberToken(_account);\\n        }\\n    }\\n\\n    function getQuestionPageArgs(\\n        uint256 pageNumber,\\n        uint256 pageSize,\\n        uint256 numberOfQuestions\\n    ) public pure returns (uint256 lowIndex, uint256 highIndex) {\\n        highIndex = 0;\\n        if (numberOfQuestions > 0) {\\n            highIndex = numberOfQuestions;\\n        }\\n\\n        if (pageNumber > 0) {\\n            if (highIndex < pageNumber * pageSize) {\\n                highIndex = 0;\\n            } else {\\n                highIndex = highIndex - pageNumber * pageSize;\\n            }\\n        }\\n\\n        lowIndex = 0;\\n        // Testing (highIndex - pageSize > 0) without\\n        // calculating potentially negative number\\n        if (highIndex > pageSize) {\\n            lowIndex = highIndex - pageSize;\\n        }\\n\\n        return (lowIndex, highIndex);\\n    }\\n\\n    /// @notice See {DAFactory-getQuestionsPage}.\\n\\n    function getQuestionsPage(\\n        address wallet,\\n        uint256 pageNumber,\\n        uint256 pageSize,\\n        string[] storage questionsIds,\\n        mapping(string => QuestionStruct) storage questionsById,\\n        DAFactoryContract daFactoryContract,\\n        DAFSubscriptionsContract dafSubscriptionsContract,\\n        uint256 tokenId,\\n        mapping(string => mapping(uint256 => TokenVotingState))\\n            storage tokensState\\n    ) external view returns (GetQuestionPageResult memory pageResult) {\\n        (uint256 lowIndex, uint256 highIndex) = getQuestionPageArgs(\\n            pageNumber,\\n            pageSize,\\n            questionsIds.length\\n        );\\n\\n        bool isValidContributor = daFactoryContract.isNftOwnerOfValidToken(\\n            wallet\\n        );\\n        bool isValidSubscriber = dafSubscriptionsContract\\n            .isNftOwnerOfValidToken(wallet);\\n\\n        if (isValidSubscriber) {\\n            revert DAFSubscribersShouldGetQuestionsFromBackend();\\n        }\\n\\n        pageResult.numberOfPages =\\n            (questionsIds.length / pageSize) +\\n            (questionsIds.length % pageSize != 0 ? 1 : 0);\\n        pageResult.items = new GetQuestionPageItemQueryResult[](\\n            highIndex - lowIndex\\n        );\\n\\n        if (highIndex == 0) {\\n            return pageResult;\\n        }\\n\\n        // int / uint conversion needed here for the evaluation of i-- >= 0\\n        // (it does need to compute i = -1 before evaluating i >= lowIndex)\\n        uint256 indexToSet = 0;\\n        for (int256 i = int256(highIndex - 1); i >= int256(lowIndex); i--) {\\n            pageResult.items[indexToSet] = getQuestion(\\n                questionsById[questionsIds[uint256(i)]],\\n                isValidContributor,\\n                isValidSubscriber,\\n                tokenId,\\n                tokensState\\n            );\\n            indexToSet++;\\n        }\\n\\n        return pageResult;\\n    }\\n\\n    /// @notice See {DAFactory-vote}.\\n\\n    function vote(\\n        uint256 tokenId,\\n        QuestionStruct storage question,\\n        DAFContributorToken[] storage dafContributorTokens,\\n        IntegerWrapper.Integer storage totalOfPoints,\\n        uint256 answerIdIndex,\\n        uint256 rewardPointDeltaForVoting,\\n        mapping(string => mapping(uint256 => TokenVotingState))\\n            storage tokensState\\n    ) public returns (bool justReachedConsensus) {\\n        if (bytes(question.id).length == 0) {\\n            revert DAFQuestionDoesNotExist(question.id);\\n        }\\n        if (isVotingTimeOverForQuestion(question)) {\\n            revert DAFQuestionVotingTimeIsOver(\\n                question.id,\\n                question.dateOfCreation + question.timeToVote\\n            );\\n        }\\n        requireTokenNotToHaveVoted(tokensState[question.id], tokenId);\\n        requireTokenToBeAlive(dafContributorTokens[tokenId]);\\n\\n        question.votesOfEachAnswers[answerIdIndex] =\\n            question.votesOfEachAnswers[answerIdIndex] +\\n            1;\\n        tokensState[question.id][tokenId] = TokenVotingState.Voted;\\n\\n        uint256 bestAnswer = question.bestAnswers[0];\\n        if (bestAnswer != answerIdIndex) {\\n            if (\\n                question.votesOfEachAnswers[bestAnswer] ==\\n                question.votesOfEachAnswers[answerIdIndex]\\n            ) {\\n                question.bestAnswers.push(answerIdIndex);\\n            } else if (\\n                question.votesOfEachAnswers[bestAnswer] <\\n                question.votesOfEachAnswers[answerIdIndex]\\n            ) {\\n                question.bestAnswers = [answerIdIndex];\\n            }\\n        } else {\\n            question.bestAnswers = [answerIdIndex];\\n        }\\n\\n        uint256 maxNumberOfVotes = question.votesOfEachAnswers[\\n            question.bestAnswers[0]\\n        ];\\n        if (\\n            question.bestAnswers.length == 1 &&\\n            maxNumberOfVotes >= question.minimumVotesForConsensus\\n        ) {\\n            justReachedConsensus = !question.reachedConsensus;\\n            question.reachedConsensus = true;\\n        }\\n\\n        addPoints(\\n            dafContributorTokens[tokenId],\\n            rewardPointDeltaForVoting,\\n            totalOfPoints\\n        );\\n\\n        return justReachedConsensus;\\n    }\\n\\n    function emitConsensusIfNeeded(\\n        bool justReachedConsensus,\\n        QuestionStruct storage question\\n    ) external {\\n        if (justReachedConsensus) {\\n            string memory consensusAnswerId = question.answersIds[\\n                question.bestAnswers[0]\\n            ];\\n\\n            emit ConsensusReached(question.id, consensusAnswerId);\\n        }\\n    }\\n\\n    /// @notice See {DAFactory-revive}.\\n\\n    function revive(\\n        DAFContributorToken[] storage dafContributorTokens,\\n        uint256 tokenId,\\n        uint256 timeToRevive,\\n        uint256 startScore\\n    ) external {\\n        if (dafContributorTokens[tokenId].score > 0) {\\n            revert DAFTokenScoreIsNotNull(tokenId);\\n        }\\n        // solhint-disable not-rely-on-time\\n        // slither-disable-next-line timestamp\\n        if (block.timestamp >= block.timestamp + timeToRevive) {\\n            revert DAFTokenReviveTimeIsOver(\\n                tokenId,\\n                block.timestamp + timeToRevive\\n            );\\n        }\\n        dafContributorTokens[tokenId].score = startScore;\\n        dafContributorTokens[tokenId].role = Role.Contributor;\\n    }\\n\\n    function isTimeOverForVoting(QuestionStruct storage question)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        // solhint-disable not-rely-on-time\\n        // slither-disable-next-line timestamp\\n        bool timeIsOver = (question.dateOfCreation + question.timeToVote) <\\n            block.timestamp;\\n\\n        return timeIsOver;\\n    }\\n\\n    /// @notice See {DAFactory-punishInactiveToken}.\\n\\n    function punishInactiveToken(\\n        DAFContributorToken storage punishedToken,\\n        DAFContributorToken storage ownerToken,\\n        QuestionStruct storage question,\\n        uint256 punishedTokenId,\\n        uint256 punishmentPointDelta,\\n        uint256 rewardPointDeltaForPunishment,\\n        uint256 startScore,\\n        IntegerWrapper.Integer storage totalOfPoints,\\n        mapping(string => mapping(uint256 => TokenVotingState))\\n            storage tokensState\\n    ) public returns (bool justReachedConsensus) {\\n        if (bytes(question.id).length == 0) {\\n            revert DAFQuestionDoesNotExist(question.id);\\n        }\\n        if (punishedToken.owner == ownerToken.owner) {\\n            revert DAFTokenOwnerCannotPunishItself(punishedToken.id);\\n        }\\n        requireTokenNotToHaveVoted(tokensState[question.id], punishedTokenId);\\n        requireTokenToBeAlive(punishedToken);\\n        bool tokenCreatedBeforeVoteEvent = punishedToken.dateOfCreation <\\n            question.dateOfCreation;\\n        if (!tokenCreatedBeforeVoteEvent) {\\n            revert DAFCannotPunishTokenCreatedAfterQuestion(\\n                punishedToken.id,\\n                punishedToken.dateOfCreation,\\n                question.dateOfCreation\\n            );\\n        }\\n        bool votingTimeIsOver = isVotingTimeOverForQuestion(question);\\n        // slither-disable-next-line timestamp\\n        if (!votingTimeIsOver) {\\n            revert DAFCannotPunishOnQuestionBeforeItsOver(\\n                question.id,\\n                question.dateOfCreation + question.timeToVote\\n            );\\n        }\\n        tokensState[question.id][punishedTokenId] = TokenVotingState.Punished;\\n\\n        addPoints(ownerToken, rewardPointDeltaForPunishment);\\n        int256 diffToApplyToTotalPoints = int256(rewardPointDeltaForPunishment);\\n\\n        // if punishedToken.score <= startScore,\\n        // there's no redeemable points to get on punished token\\n        // means nothing to remove from totalOfPoints\\n        if (punishedToken.score > startScore) {\\n            uint256 removableRedeemablePoints = punishedToken.score -\\n                startScore;\\n            if (removableRedeemablePoints < punishmentPointDelta) {\\n                diffToApplyToTotalPoints -= int256(removableRedeemablePoints);\\n            } else {\\n                diffToApplyToTotalPoints -= int256(punishmentPointDelta);\\n            }\\n        }\\n\\n        removePointsOnlyFromToken(punishedToken, punishmentPointDelta);\\n\\n        if (diffToApplyToTotalPoints < 0) {\\n            if (int256(totalOfPoints.current()) <= -diffToApplyToTotalPoints) {\\n                totalOfPoints.reset();\\n            } else {\\n                totalOfPoints.decrement(uint256(diffToApplyToTotalPoints));\\n            }\\n        } else {\\n            totalOfPoints.increment(uint256(diffToApplyToTotalPoints));\\n        }\\n\\n        // Handle consensus modification on question, considering the number of voter changed\\n        // (punished token cannot vote anymore), we should update the necessary vote count and consensus status\\n        if (question.minimumVotesForConsensus >= 1) {\\n            question.minimumVotesForConsensus -= 1;\\n        }\\n\\n        uint256 maxNumberOfVotes = question.votesOfEachAnswers[\\n            question.bestAnswers[0]\\n        ];\\n        if (\\n            question.bestAnswers.length == 1 &&\\n            maxNumberOfVotes > question.minimumVotesForConsensus\\n        ) {\\n            justReachedConsensus = !question.reachedConsensus;\\n            question.reachedConsensus = true;\\n        }\\n\\n        return justReachedConsensus;\\n    }\\n\\n    function removePoints(\\n        DAFContributorToken storage token,\\n        IntegerWrapper.Integer storage totalOfPoints,\\n        uint256 nbOfPoints\\n    ) public {\\n        if (token.score <= nbOfPoints) {\\n            // solhint-disable not-rely-on-time\\n            token.dateOfDeath = block.timestamp;\\n            if (totalOfPoints.current() <= nbOfPoints) {\\n                totalOfPoints.reset();\\n            } else {\\n                totalOfPoints.decrement(nbOfPoints);\\n            }\\n            token.score = 0;\\n            token.role = Role.Contributor;\\n        } else {\\n            token.score = token.score - nbOfPoints;\\n            if (totalOfPoints.current() <= nbOfPoints) {\\n                totalOfPoints.reset();\\n            } else {\\n                totalOfPoints.decrement(nbOfPoints);\\n            }\\n        }\\n    }\\n\\n    function removePointsOnlyFromToken(\\n        DAFContributorToken storage token,\\n        uint256 nbOfPoints\\n    ) internal {\\n        if (token.score <= nbOfPoints) {\\n            // solhint-disable not-rely-on-time\\n            token.dateOfDeath = block.timestamp;\\n            token.score = 0;\\n            token.role = Role.Contributor;\\n        } else {\\n            token.score = token.score - nbOfPoints;\\n        }\\n    }\\n\\n    function getTokenURI(\\n        uint256 _score,\\n        bool _isAlive,\\n        Role _role\\n    ) external pure returns (string memory) {\\n        /* solhint-disable quotes */\\n        string memory svg = string(\\n            abi.encodePacked(\\n                \\\"<svg xmlns='http://www.w3.org/2000/svg' width='50px' height='50px'><path fill='\\\",\\n                _isAlive\\n                    ? (_role == Role.Contributor ? \\\"#fff\\\" : \\\"#32CD32\\\")\\n                    : \\\"#000\\\",\\n                \\\"' d='M1 1h350v300H1z'/><text x='50%' y='55%' text-anchor='middle' font-size='9' fill='\\\",\\n                _isAlive ? \\\"#000\\\" : \\\"#fff\\\",\\n                \\\"'>\\\",\\n                Strings.toString(_score),\\n                \\\" POINTS</text></svg>\\\"\\n            )\\n        );\\n\\n        string memory encodedSvg = string(\\n            abi.encodePacked(\\n                '\\\"data:image/svg+xml;base64,',\\n                Base64.encode(bytes(string(abi.encodePacked(svg))))\\n            )\\n        );\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        bytes(\\n                            abi.encodePacked(\\n                                '{\\\"name\\\": \\\"TAF ',\\n                                _role == Role.Contributor\\n                                    ? \\\"Contributor\\\"\\n                                    : \\\"Core contributor\\\",\\n                                '\\\",\\\"description\\\": \\\"thealphafactory.xyz\\\"',\\n                                ', \\\"image\\\": ',\\n                                encodedSvg,\\n                                '\\\",\\\"attributes\\\": [{\\\"trait_type\\\": \\\"score\\\", \\\"value\\\":',\\n                                Strings.toString(_score),\\n                                \\\"}]}\\\"\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n        /* solhint-enable quotes */\\n    }\\n\\n    function requireTokenToBeAlive(DAFContributorToken storage token)\\n        public\\n        view\\n    {\\n        if (token.score == 0) {\\n            revert DAFTokenScoreMustNotBeNull();\\n        }\\n    }\\n\\n    function requireTokenNotToHaveVoted(\\n        mapping(uint256 => TokenVotingState) storage tokensState,\\n        uint256 tokenId\\n    ) private view {\\n        if (tokensState[tokenId] != TokenVotingState.Pending) {\\n            revert DAFTokenMustNotHaveVoted(tokenId);\\n        }\\n    }\\n\\n    function isVotingTimeOverForQuestion(QuestionStruct storage question)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        // slither-disable-next-line timestamp\\n        return\\n            (question.dateOfCreation + question.timeToVote) < block.timestamp;\\n    }\\n\\n    function beforeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        mapping(address => uint256) storage ownerToToken,\\n        DAFContributorToken[] storage dafContributorTokens\\n    ) public {\\n        ownerToToken[to] = tokenId;\\n        ownerToToken[from] = 0;\\n        // Update relevant token fields\\n        dafContributorTokens[ownerToToken[to]].owner = to;\\n    }\\n\\n    /// @notice See {DAFactory-claimReward}.\\n    function claimReward(\\n        DAFContributorToken storage token,\\n        uint256 points,\\n        uint256 startScore,\\n        IntegerWrapper.Integer storage totalOfPoints,\\n        DAFactoryContract daFactoryContract\\n    ) external returns (uint256 amountToClaim) {\\n        if (token.score < points) {\\n            revert DAFNotEnoughPointsToWithdraw();\\n        }\\n        if (token.score - points < startScore) {\\n            revert DAFCannotWithdrawUnderStartScore();\\n        }\\n        amountToClaim = calculateClaimableAmount(\\n            points,\\n            totalOfPoints,\\n            daFactoryContract\\n        );\\n\\n        removePoints(token, totalOfPoints, points);\\n\\n        return amountToClaim;\\n    }\\n\\n    /// @notice Calculate how many payment tokens the user is able to claim Reward\\n    /// @param points Points owned by the user\\n    /// @param totalOfPoints Total redeemable points\\n    /// @param daFactoryContract DAFactoryContract reference\\n    function calculateClaimableAmount(\\n        uint256 points,\\n        IntegerWrapper.Integer storage totalOfPoints,\\n        DAFactoryContract daFactoryContract\\n    ) internal view returns (uint256 amountToClaim) {\\n        amountToClaim =\\n            (daFactoryContract.getBalance() * points) /\\n            totalOfPoints.current();\\n    }\\n\\n    /// @notice Force Upgrade the sent contributor token to a core contributor token. This is only possible to be done by the owner\\n\\n    function upgrade(\\n        uint256 tokenId,\\n        DAFStorage storage dafStorage,\\n        bool checkScore\\n    ) external {\\n        DAFContributorToken storage token = dafStorage.dafContributorTokens[\\n            tokenId\\n        ];\\n\\n        if (token.role == Role.Core) {\\n            revert DAFCoreContributorCannotUpgrade(tokenId);\\n        }\\n        if (checkScore && token.score < dafStorage.scoreToUpgrade) {\\n            revert DAFInsufficientScoreToUpgrade(tokenId);\\n        }\\n        token.role = Role.Core;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IntegerWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity 0.8.13;\\n\\n/// @title A wrapper that allows, among other things, to transmit an integer by reference to functions.\\nlibrary IntegerWrapper {\\n    /// @notice The structure containing the integer value, initially at zero.\\n    struct Integer {\\n        uint256 _value; // default: 0\\n    }\\n\\n    /// @notice Get the value of the wrapped integer.\\n    /// @param integer The integer wrapper.\\n    /// @return The value of the wrapped integer.\\n    function current(Integer storage integer) internal view returns (uint256) {\\n        return integer._value;\\n    }\\n\\n    /// @notice Increment the value of the wrapped integer by the increment value.\\n    /// @param integer The integer wrapper.\\n    /// @param incrementValue The increment value.\\n    function increment(Integer storage integer, uint256 incrementValue)\\n        internal\\n    {\\n        integer._value += incrementValue;\\n    }\\n\\n    /// @notice Decrement the value of the wrapped integer by the decrement value.\\n    /// @param integer The integer wrapper.\\n    /// @param decrementValue The decrement value.\\n    function decrement(Integer storage integer, uint256 decrementValue)\\n        internal\\n    {\\n        uint256 value = integer._value;\\n        require(value >= decrementValue, \\\"Counter: decrement overflow\\\");\\n        integer._value -= decrementValue;\\n    }\\n\\n    /// @notice Reset the value the wrapped integer to zero.\\n    /// @param integer The integer wrapper.\\n    function reset(Integer storage integer) internal {\\n        integer._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/DAFSubscriptionsI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity 0.8.13;\\n\\n/// @title Interface specifying the functions of DAFSubscriptions contract used in external invocations.\\ninterface DAFSubscriptionsContract {\\n    /// @dev See {IERC721-balanceOf}.\\n    function balanceOf(address) external view returns (uint256);\\n\\n    /// @dev See {DAFSubscriptions-isNftOwnerOfValidToken}.\\n    function isNftOwnerOfValidToken(address wallet)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @dev See {DAFSubscriptions-isNftOwnerOfValidTokenFromCurrentOrMigratedVersion}.\\n    function isNftOwnerOfValidTokenFromCurrentOrMigratedVersion(address _owner)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @dev See {DAFSubscriptions-burnToken}.\\n    function burnToken(\\n        address punisherAddress,\\n        uint256 punisherTokenId,\\n        uint256 punishedTokenId,\\n        uint256 rewardPointDeltaForDestruction\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/DAFLib.sol\": {\r\n        \"DAFLib\": \"0x00398e33f0a3519bd662f50620728d06c074317f\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_subscriptionTimePeriodInSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numberMaxOfTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_paymentTokenContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"DAFSubscriptionsAccountMustHaveToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfDurationToAdd\",\"type\":\"uint256\"}],\"name\":\"DAFSubscriptionsCannotAddZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DAFSubscriptionsDAFContractAddressCantBeNull\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"DAFSubscriptionsInvokerMustBeDAFactoryContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"invoker\",\"type\":\"address\"}],\"name\":\"DAFSubscriptionsInvokerMustBeTokenOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DAFSubscriptionsMaxSupplyReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DAFSubscriptionsMigrationNotStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DAFSubscriptionsNewVersionIsNotDefined\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DAFSubscriptionsShouldNotBePaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DAFSubscriptionsTokenNotExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DAFSubscriptionsZeroAddressForbidden\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"DAFSubscriptionTokenAddSubscriptionTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"punisherAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"senderContractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"punishedAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"punishedTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"punisherTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPointDeltaForDestruction\",\"type\":\"uint256\"}],\"name\":\"DAFSubscriptionTokenDestroyed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"DAFSubscriptionTokenEmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dateOfDeath\",\"type\":\"uint256\"}],\"name\":\"DAFSubscriptionTokenMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfDurationToAdd\",\"type\":\"uint256\"}],\"name\":\"addTime\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"punisherAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"punisherTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishedTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPointDeltaForDestruction\",\"type\":\"uint256\"}],\"name\":\"burnToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dafContract\",\"outputs\":[{\"internalType\":\"contract DAFactoryContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dafSubscriberTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dateOfDeath\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"dateIsOver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfNFTsLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfNFTsLeft\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dateOfDeath\",\"type\":\"uint256\"}],\"internalType\":\"struct DAFSubscriptionToken\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getTokenIdOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokensCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isBurnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isNftOwnerOfValidToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isNftOwnerOfValidTokenFromCurrentOrMigratedVersion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrateTokenFromPreviousVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationState\",\"outputs\":[{\"internalType\":\"enum MigrationState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationVersionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_migrationVersionAddress\",\"type\":\"address\"}],\"name\":\"setContractMigrationVersionAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dafContract\",\"type\":\"address\"}],\"name\":\"setDAFContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setSubscriptionTimePeriodInSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionTimePeriodInSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DAFSubscriptions", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000ee6b2800000000000000000000000000000000000000000000000000000000000278d0000000000000000000000000000000000000000000000000000000000000000640000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa841740000000000000000000000000000000000000000000000000000000000000010444146537562736372697074696f6e730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044441467300000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}