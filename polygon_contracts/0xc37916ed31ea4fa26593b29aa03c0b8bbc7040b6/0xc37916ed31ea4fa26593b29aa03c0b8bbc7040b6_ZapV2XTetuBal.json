{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/infrastructure/zap/ZapV2XTetuBal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n/**\\n* By using this software, you understand, acknowledge and accept that Tetu\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\n* basis and without warranties or representations of any kind either expressed\\n* or implied. Any use of this open source software released under the ISC\\n* Internet Systems Consortium license is done at your own risk to the fullest\\n* extent permissible pursuant to applicable law any and all liability as well\\n* as all warranties, including any fitness for a particular purpose with respect\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\n*/\\npragma solidity 0.8.4;\\n\\nimport \\\"../../openzeppelin/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"../../base/governance/Controllable.sol\\\";\\nimport \\\"../../base/interface/ISmartVault.sol\\\";\\nimport \\\"./ZapV2CommonLibrary.sol\\\";\\nimport \\\"./ZapV2BalancerCommonLibrary.sol\\\";\\n\\n/// @title Able to zap in/out assets to xtetuBAL vault\\n/// @author a17\\ncontract ZapV2XTetuBal is Controllable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    address private constant XTETUBAL = 0x915E49F7CD8B2b5763759c23D9463A74d5b5C1D5;\\n    address private constant TETUBAL = 0x7fC9E0Aa043787BFad28e29632AdA302C790Ce33;\\n    bytes32 private constant TETUBAL_WETHBAL_POOL_ID = 0xb797adfb7b268faeaa90cadbfed464c76ee599cd0002000000000000000005ba;\\n    address private constant WETH20BAL80_BPT = 0x3d468AB2329F296e1b9d8476Bb54Dd77D8c2320f;\\n    bytes32 private constant WETH20BAL80_POOL_ID = 0x3d468ab2329f296e1b9d8476bb54dd77d8c2320f000200000000000000000426;\\n    address private constant WETH = 0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619;\\n    address private constant BAL = 0x9a71012B13CA4d3D0Cdc72A177DF3ef03b0E76A3;\\n\\n    string public constant VERSION = \\\"1.0.0\\\";\\n    mapping(address => uint) private calls;\\n\\n    constructor(address controller_) {\\n        Controllable.initializeControllable(controller_);\\n    }\\n\\n    modifier onlyOneCallPerBlock() {\\n        require(calls[msg.sender] < block.number, \\\"ZC: call in the same block forbidden\\\");\\n        _;\\n        calls[msg.sender] = block.number;\\n    }\\n\\n    function zapInto(\\n        address tokenIn,\\n        bytes memory asset0SwapData,\\n        bytes memory asset1SwapData,\\n        uint tokenInAmount\\n    ) external nonReentrant onlyOneCallPerBlock {\\n        require(tokenInAmount > 1, \\\"ZC: not enough amount\\\");\\n        IERC20(tokenIn).safeTransferFrom(msg.sender, address(this), tokenInAmount);\\n\\n        if (tokenIn != WETH) {\\n            ZapV2CommonLibrary._callOneInchSwap(\\n                tokenIn,\\n                tokenInAmount * 2 / 10,\\n                asset0SwapData\\n            );\\n        }\\n\\n        if (tokenIn != BAL) {\\n            ZapV2CommonLibrary._callOneInchSwap(\\n                tokenIn,\\n                tokenInAmount * 8 / 10,\\n                asset1SwapData\\n            );\\n        }\\n\\n        address[] memory assets = new address[](2);\\n        assets[0] = WETH;\\n        assets[1] = BAL;\\n        uint[] memory amounts = new uint[](2);\\n        amounts[0] = IERC20(WETH).balanceOf(address(this));\\n        amounts[1] = IERC20(BAL).balanceOf(address(this));\\n        ZapV2BalancerCommonLibrary._addLiquidityBalancer(WETH20BAL80_POOL_ID, assets, amounts, WETH20BAL80_BPT);\\n        uint bptBalance = IERC20(WETH20BAL80_BPT).balanceOf(address(this));\\n        (, uint[] memory tetuBalWethBalPoolBalances,) = IBVault(ZapV2BalancerCommonLibrary.BALANCER_VAULT).getPoolTokens(TETUBAL_WETHBAL_POOL_ID);\\n        uint canBuyTetuBalBPTByGoodPrice = tetuBalWethBalPoolBalances[1] > tetuBalWethBalPoolBalances[0] ? (tetuBalWethBalPoolBalances[1] - tetuBalWethBalPoolBalances[0]) / 2 : 0;\\n        uint needToMintTetuBal;\\n        if (canBuyTetuBalBPTByGoodPrice < bptBalance) {\\n            needToMintTetuBal = bptBalance - canBuyTetuBalBPTByGoodPrice;\\n        }\\n        if (needToMintTetuBal != 0) {\\n            ZapV2CommonLibrary._approveIfNeeds(WETH20BAL80_BPT, needToMintTetuBal, TETUBAL);\\n            ISmartVault(TETUBAL).depositAndInvest(needToMintTetuBal);\\n        }\\n        ZapV2BalancerCommonLibrary._balancerSwap(TETUBAL_WETHBAL_POOL_ID, WETH20BAL80_BPT, TETUBAL, bptBalance - needToMintTetuBal);\\n        uint tetuBalBalance = IERC20(TETUBAL).balanceOf(address(this));\\n        require(tetuBalBalance != 0, \\\"ZC: zero tetuBAL\\\");\\n\\n        ZapV2CommonLibrary._approveIfNeeds(TETUBAL, tetuBalBalance, XTETUBAL);\\n        ISmartVault(XTETUBAL).depositAndInvest(tetuBalBalance);\\n\\n        uint xtetuBalBalance = IERC20(XTETUBAL).balanceOf(address(this));\\n        require(xtetuBalBalance != 0, \\\"ZC: zero xtetuBAL\\\");\\n\\n        IERC20(XTETUBAL).safeTransfer(msg.sender, xtetuBalBalance);\\n\\n        address[] memory dustAssets = new address[](4);\\n        dustAssets[0] = tokenIn;\\n        dustAssets[1] = WETH20BAL80_BPT;\\n        dustAssets[2] = WETH;\\n        dustAssets[3] = BAL;\\n        ZapV2CommonLibrary._sendBackChange(dustAssets);\\n    }\\n\\n    function zapOut(\\n        address tokenOut,\\n        bytes memory asset0SwapData,\\n        bytes memory asset1SwapData,\\n        uint shareAmount\\n    ) external nonReentrant onlyOneCallPerBlock {\\n        require(shareAmount != 0, \\\"ZC: zero amount\\\");\\n        IERC20(XTETUBAL).safeTransferFrom(msg.sender, address(this), shareAmount);\\n\\n        uint assetBalance = ZapV2CommonLibrary._withdrawFromVault(XTETUBAL, TETUBAL, shareAmount);\\n\\n        ZapV2BalancerCommonLibrary._balancerSwap(TETUBAL_WETHBAL_POOL_ID, TETUBAL, WETH20BAL80_BPT, assetBalance);\\n\\n        uint[] memory amounts = new uint[](2);\\n        address[] memory assets = new address[](2);\\n        assets[0] = WETH;\\n        assets[1] = BAL;\\n        uint[] memory amountsOut = ZapV2BalancerCommonLibrary._removeLiquidityBalancer(WETH20BAL80_POOL_ID, assets, amounts, IERC20(WETH20BAL80_BPT).balanceOf(address(this)));\\n        if (tokenOut != WETH) {\\n            ZapV2CommonLibrary._callOneInchSwap(\\n                WETH,\\n                amountsOut[0],\\n                asset0SwapData\\n            );\\n        }\\n\\n        if (tokenOut != BAL) {\\n            ZapV2CommonLibrary._callOneInchSwap(\\n                BAL,\\n                amountsOut[1],\\n                asset1SwapData\\n            );\\n        }\\n\\n        uint tokenOutBalance = IERC20(tokenOut).balanceOf(address(this));\\n        require(tokenOutBalance != 0, \\\"zero token out balance\\\");\\n        IERC20(tokenOut).safeTransfer(msg.sender, tokenOutBalance);\\n\\n        address[] memory dustAssets = new address[](4);\\n        dustAssets[0] = WETH20BAL80_BPT;\\n        dustAssets[1] = WETH;\\n        dustAssets[2] = BAL;\\n        dustAssets[3] = TETUBAL;\\n        ZapV2CommonLibrary._sendBackChange(dustAssets);\\n    }\\n\\n    function quoteInto(uint wethAmount, uint balAmount) external returns(uint) {\\n        uint[] memory amounts = new uint[](2);\\n        amounts[0] = wethAmount;\\n        amounts[1] = balAmount;\\n\\n        address[] memory assets = new address[](2);\\n        assets[0] = WETH;\\n        assets[1] = BAL;\\n\\n        uint bptOut = ZapV2BalancerCommonLibrary._quoteJoinBalancer(WETH20BAL80_POOL_ID, assets, amounts, WETH20BAL80_BPT);\\n        (, uint[] memory tetuBalWethBalPoolBalances,) = IBVault(ZapV2BalancerCommonLibrary.BALANCER_VAULT).getPoolTokens(TETUBAL_WETHBAL_POOL_ID);\\n        uint canBuyTetuBalBPTByGoodPrice = tetuBalWethBalPoolBalances[1] > tetuBalWethBalPoolBalances[0] ? (tetuBalWethBalPoolBalances[1] - tetuBalWethBalPoolBalances[0]) / 2 : 0;\\n        uint needToMintTetuBal;\\n        if (canBuyTetuBalBPTByGoodPrice < bptOut) {\\n            needToMintTetuBal = bptOut - canBuyTetuBalBPTByGoodPrice;\\n        }\\n\\n        uint swapOut = ZapV2BalancerCommonLibrary._queryBalancerSingleSwap(TETUBAL_WETHBAL_POOL_ID, 0, 1, bptOut - needToMintTetuBal);\\n\\n        return (swapOut + needToMintTetuBal) * IERC20(XTETUBAL).totalSupply() / ISmartVault(XTETUBAL).underlyingBalanceWithInvestment();\\n    }\\n\\n    function quoteOut(uint shareAmount) external returns(uint[] memory) {\\n        uint amount = shareAmount * ISmartVault(XTETUBAL).underlyingBalanceWithInvestment() / IERC20(XTETUBAL).totalSupply();\\n\\n        uint wethBalBpt = ZapV2BalancerCommonLibrary._queryBalancerSingleSwap(TETUBAL_WETHBAL_POOL_ID, 1, 0, amount);\\n        address[] memory assets = new address[](2);\\n        assets[0] = WETH;\\n        assets[1] = BAL;\\n        uint[] memory amounts = new uint[](2);\\n        (, uint[] memory amountsOut) = IBalancerHelper(ZapV2BalancerCommonLibrary.BALANCER_HELPER).queryExit(\\n            WETH20BAL80_POOL_ID,\\n            address(this),\\n            payable(address(this)),\\n            IVault.JoinPoolRequest({\\n                assets : assets,\\n                maxAmountsIn : amounts,\\n                userData : abi.encode(IBVault.ExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT, wethBalBpt),\\n                fromInternalBalance : false\\n            })\\n        );\\n\\n        return amountsOut;\\n    }\\n}\"\r\n    },\r\n    \"contracts/openzeppelin/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n   * {IERC20-approve}, and its usage is discouraged.\\n   *\\n   * Whenever possible, use {safeIncreaseAllowance} and\\n   * {safeDecreaseAllowance} instead.\\n   */\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    // safeApprove should only be called when setting an initial allowance,\\n    // or when resetting it to zero. To increase and decrease it, use\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n    );\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function safeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n  }\\n\\n  function safeDecreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n  unchecked {\\n    uint256 oldAllowance = token.allowance(address(this), spender);\\n    require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n    uint256 newAllowance = oldAllowance - value;\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n  }\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\n   * @param token The token targeted by the call.\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\n   */\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n    // the target address contains contract code and also asserts for success in the low-level call.\\n\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/governance/Controllable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n/**\\n* By using this software, you understand, acknowledge and accept that Tetu\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\n* basis and without warranties or representations of any kind either expressed\\n* or implied. Any use of this open source software released under the ISC\\n* Internet Systems Consortium license is done at your own risk to the fullest\\n* extent permissible pursuant to applicable law any and all liability as well\\n* as all warranties, including any fitness for a particular purpose with respect\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\n*/\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"../../openzeppelin/Initializable.sol\\\";\\nimport \\\"../interface/IController.sol\\\";\\nimport \\\"../interface/IControllable.sol\\\";\\n\\n/// @title Implement basic functionality for any contract that require strict control\\n/// @dev Can be used with upgradeable pattern.\\n///      Require call initializeControllable() in any case.\\n/// @author belbix\\nabstract contract Controllable is Initializable, IControllable {\\n  bytes32 internal constant _CONTROLLER_SLOT = 0x5165972ef41194f06c5007493031d0b927c20741adcb74403b954009fd2c3617;\\n  bytes32 internal constant _CREATED_SLOT = 0x6f55f470bdc9cb5f04223fd822021061668e4dccb43e8727b295106dc9769c8a;\\n\\n  /// @notice Controller address changed\\n  event UpdateController(address oldValue, address newValue);\\n\\n  constructor() {\\n    assert(_CONTROLLER_SLOT == bytes32(uint256(keccak256(\\\"eip1967.controllable.controller\\\")) - 1));\\n    assert(_CREATED_SLOT == bytes32(uint256(keccak256(\\\"eip1967.controllable.created\\\")) - 1));\\n  }\\n\\n  /// @notice Initialize contract after setup it as proxy implementation\\n  ///         Save block.timestamp in the \\\"created\\\" variable\\n  /// @dev Use it only once after first logic setup\\n  /// @param _controller Controller address\\n  function initializeControllable(address _controller) public initializer {\\n    setController(_controller);\\n    setCreated(block.timestamp);\\n  }\\n\\n  function isController(address _adr) public override view returns (bool) {\\n    return _adr == controller();\\n  }\\n\\n  /// @notice Return true is given address is setup as governance in Controller\\n  /// @param _adr Address for check\\n  /// @return true if given address is governance\\n  function isGovernance(address _adr) public override view returns (bool) {\\n    return IController(controller()).governance() == _adr;\\n  }\\n\\n  // ************ MODIFIERS **********************\\n\\n  /// @dev Allow operation only for Controller\\n  modifier onlyController() {\\n    require(controller() == msg.sender, \\\"not controller\\\");\\n    _;\\n  }\\n\\n  /// @dev Allow operation only for Controller or Governance\\n  modifier onlyControllerOrGovernance() {\\n    require(isController(msg.sender) || isGovernance(msg.sender), \\\"not controller or gov\\\");\\n    _;\\n  }\\n\\n  /// @dev Only smart contracts will be affected by this modifier\\n  ///      If it is a contract it should be whitelisted\\n  modifier onlyAllowedUsers() {\\n    require(IController(controller()).isAllowedUser(msg.sender), \\\"not allowed\\\");\\n    _;\\n  }\\n\\n  /// @dev Only Reward Distributor allowed. Governance is Reward Distributor by default.\\n  modifier onlyRewardDistribution() {\\n    require(IController(controller()).isRewardDistributor(msg.sender), \\\"only distr\\\");\\n    _;\\n  }\\n\\n  // ************* SETTERS/GETTERS *******************\\n\\n  /// @notice Return controller address saved in the contract slot\\n  /// @return adr Controller address\\n  function controller() public view returns (address adr) {\\n    bytes32 slot = _CONTROLLER_SLOT;\\n    assembly {\\n      adr := sload(slot)\\n    }\\n  }\\n\\n  /// @dev Set a controller address to contract slot\\n  /// @param _newController Controller address\\n  function setController(address _newController) internal {\\n    require(_newController != address(0), \\\"zero address\\\");\\n    emit UpdateController(controller(), _newController);\\n    bytes32 slot = _CONTROLLER_SLOT;\\n    assembly {\\n      sstore(slot, _newController)\\n    }\\n  }\\n\\n  /// @notice Return creation timestamp\\n  /// @return ts Creation timestamp\\n  function created() external view returns (uint256 ts) {\\n    bytes32 slot = _CREATED_SLOT;\\n    assembly {\\n      ts := sload(slot)\\n    }\\n  }\\n\\n  /// @dev Filled only once when contract initialized\\n  /// @param _created block.timestamp\\n  function setCreated(uint256 _created) private {\\n    bytes32 slot = _CREATED_SLOT;\\n    assembly {\\n      sstore(slot, _created)\\n    }\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/ISmartVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n/**\\n* By using this software, you understand, acknowledge and accept that Tetu\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\n* basis and without warranties or representations of any kind either expressed\\n* or implied. Any use of this open source software released under the ISC\\n* Internet Systems Consortium license is done at your own risk to the fullest\\n* extent permissible pursuant to applicable law any and all liability as well\\n* as all warranties, including any fitness for a particular purpose with respect\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\n*/\\n\\npragma solidity 0.8.4;\\n\\ninterface ISmartVault {\\n\\n  function DEPOSIT_FEE_DENOMINATOR() external view returns (uint256);\\n\\n  function LOCK_PENALTY_DENOMINATOR() external view returns (uint256);\\n\\n  function TO_INVEST_DENOMINATOR() external view returns (uint256);\\n\\n  function VERSION() external view returns (string memory);\\n\\n  function active() external view returns (bool);\\n\\n  function addRewardToken(address rt) external;\\n\\n  function alwaysInvest() external view returns (bool);\\n\\n  function availableToInvestOut() external view returns (uint256);\\n\\n  function changeActivityStatus(bool _active) external;\\n\\n  function changeAlwaysInvest(bool _active) external;\\n\\n  function changeDoHardWorkOnInvest(bool _active) external;\\n\\n  function changePpfsDecreaseAllowed(bool _value) external;\\n\\n  function changeProtectionMode(bool _active) external;\\n\\n  function deposit(uint256 amount) external;\\n\\n  function depositAndInvest(uint256 amount) external;\\n\\n  function depositFeeNumerator() external view returns (uint256);\\n\\n  function depositFor(uint256 amount, address holder) external;\\n\\n  function doHardWork() external;\\n\\n  function doHardWorkOnInvest() external view returns (bool);\\n\\n  function duration() external view returns (uint256);\\n\\n  function earned(address rt, address account)\\n  external\\n  view\\n  returns (uint256);\\n\\n  function earnedWithBoost(address rt, address account)\\n  external\\n  view\\n  returns (uint256);\\n\\n  function exit() external;\\n\\n  function getAllRewards() external;\\n\\n  function getAllRewardsAndRedirect(address owner) external;\\n\\n  function getPricePerFullShare() external view returns (uint256);\\n\\n  function getReward(address rt) external;\\n\\n  function getRewardTokenIndex(address rt) external view returns (uint256);\\n\\n  function initializeSmartVault(\\n    string memory _name,\\n    string memory _symbol,\\n    address _controller,\\n    address __underlying,\\n    uint256 _duration,\\n    bool _lockAllowed,\\n    address _rewardToken,\\n    uint256 _depositFee\\n  ) external;\\n\\n  function lastTimeRewardApplicable(address rt)\\n  external\\n  view\\n  returns (uint256);\\n\\n  function lastUpdateTimeForToken(address) external view returns (uint256);\\n\\n  function lockAllowed() external view returns (bool);\\n\\n  function lockPenalty() external view returns (uint256);\\n\\n  function notifyRewardWithoutPeriodChange(\\n    address _rewardToken,\\n    uint256 _amount\\n  ) external;\\n\\n  function notifyTargetRewardAmount(address _rewardToken, uint256 amount)\\n  external;\\n\\n  function overrideName(string memory value) external;\\n\\n  function overrideSymbol(string memory value) external;\\n\\n  function periodFinishForToken(address) external view returns (uint256);\\n\\n  function ppfsDecreaseAllowed() external view returns (bool);\\n\\n  function protectionMode() external view returns (bool);\\n\\n  function rebalance() external;\\n\\n  function removeRewardToken(address rt) external;\\n\\n  function rewardPerToken(address rt) external view returns (uint256);\\n\\n  function rewardPerTokenStoredForToken(address)\\n  external\\n  view\\n  returns (uint256);\\n\\n  function rewardRateForToken(address) external view returns (uint256);\\n\\n  function rewardTokens() external view returns (address[] memory);\\n\\n  function rewardTokensLength() external view returns (uint256);\\n\\n  function rewardsForToken(address, address) external view returns (uint256);\\n\\n  function setLockPenalty(uint256 _value) external;\\n\\n  function setRewardsRedirect(address owner, address receiver) external;\\n\\n  function setLockPeriod(uint256 _value) external;\\n\\n  function setStrategy(address newStrategy) external;\\n\\n  function setToInvest(uint256 _value) external;\\n\\n  function stop() external;\\n\\n  function strategy() external view returns (address);\\n\\n  function toInvest() external view returns (uint256);\\n\\n  function underlying() external view returns (address);\\n\\n  function underlyingBalanceInVault() external view returns (uint256);\\n\\n  function underlyingBalanceWithInvestment() external view returns (uint256);\\n\\n  function underlyingBalanceWithInvestmentForHolder(address holder)\\n  external\\n  view\\n  returns (uint256);\\n\\n  function underlyingUnit() external view returns (uint256);\\n\\n  function userBoostTs(address) external view returns (uint256);\\n\\n  function userLastDepositTs(address) external view returns (uint256);\\n\\n  function userLastWithdrawTs(address) external view returns (uint256);\\n\\n  function userLockTs(address) external view returns (uint256);\\n\\n  function userRewardPerTokenPaidForToken(address, address)\\n  external\\n  view\\n  returns (uint256);\\n\\n  function withdraw(uint256 numberOfShares) external;\\n\\n  function withdrawAllToVault() external;\\n\\n  function getAllRewardsFor(address rewardsReceiver) external;\\n\\n  function lockPeriod() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/infrastructure/zap/ZapV2CommonLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n/**\\n* By using this software, you understand, acknowledge and accept that Tetu\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\n* basis and without warranties or representations of any kind either expressed\\n* or implied. Any use of this open source software released under the ISC\\n* Internet Systems Consortium license is done at your own risk to the fullest\\n* extent permissible pursuant to applicable law any and all liability as well\\n* as all warranties, including any fitness for a particular purpose with respect\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\n*/\\npragma solidity 0.8.4;\\n\\nimport \\\"../../openzeppelin/SafeERC20.sol\\\";\\nimport \\\"../../base/interface/ISmartVault.sol\\\";\\n\\nlibrary ZapV2CommonLibrary {\\n    using SafeERC20 for IERC20;\\n    address private constant ONEINCH_ROUTER = 0x1111111254fb6c44bAC0beD2854e76F90643097d;\\n\\n    function _sendBackChange(address[] memory assets) internal {\\n        uint len = assets.length;\\n        for (uint i; i < len; i++) {\\n            uint bal = IERC20(assets[i]).balanceOf(address(this));\\n            if (bal != 0) {\\n                IERC20(assets[i]).safeTransfer(msg.sender, bal);\\n            }\\n        }\\n    }\\n\\n    function _callOneInchSwap(address tokenIn, uint tokenInAmount, bytes memory swapData) internal {\\n        require(tokenInAmount <= IERC20(tokenIn).balanceOf(address(this)), \\\"ZC: not enough balance for swap\\\");\\n        _approveIfNeeds(tokenIn, tokenInAmount, ONEINCH_ROUTER);\\n        (bool success,bytes memory result) = ONEINCH_ROUTER.call(swapData);\\n        require(success, string(result));\\n    }\\n\\n    /// @dev Deposit into the vault, check the result and send share token to msg.sender\\n    function _depositToVault(address vault, address asset, uint amount) internal {\\n        _approveIfNeeds(asset, amount, vault);\\n        ISmartVault(vault).depositAndInvest(amount);\\n        uint shareBalance = IERC20(vault).balanceOf(address(this));\\n        require(shareBalance != 0, \\\"ZC: zero shareBalance\\\");\\n        IERC20(vault).safeTransfer(msg.sender, shareBalance);\\n    }\\n\\n    /// @dev Withdraw from vault and check the result\\n    function _withdrawFromVault(address vault, address asset, uint amount) internal returns (uint) {\\n        ISmartVault(vault).withdraw(amount);\\n        uint underlyingBalance = IERC20(asset).balanceOf(address(this));\\n        require(underlyingBalance != 0, \\\"ZC: zero underlying balance\\\");\\n        return underlyingBalance;\\n    }\\n\\n    function _approveIfNeeds(address token, uint amount, address spender) internal {\\n        if (IERC20(token).allowance(address(this), spender) < amount) {\\n            IERC20(token).safeApprove(spender, 0);\\n            IERC20(token).safeApprove(spender, type(uint).max);\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/infrastructure/zap/ZapV2BalancerCommonLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n/**\\n* By using this software, you understand, acknowledge and accept that Tetu\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\n* basis and without warranties or representations of any kind either expressed\\n* or implied. Any use of this open source software released under the ISC\\n* Internet Systems Consortium license is done at your own risk to the fullest\\n* extent permissible pursuant to applicable law any and all liability as well\\n* as all warranties, including any fitness for a particular purpose with respect\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\n*/\\npragma solidity 0.8.4;\\n\\nimport \\\"../../third_party/balancer/IBVault.sol\\\";\\nimport \\\"../../third_party/balancer/IBPT.sol\\\";\\nimport \\\"../../third_party/balancer/IBalancerHelper.sol\\\";\\nimport \\\"./ZapV2CommonLibrary.sol\\\";\\n\\nlibrary ZapV2BalancerCommonLibrary {\\n    address internal constant BALANCER_VAULT = 0xBA12222222228d8Ba445958a75a0704d566BF2C8;\\n    address internal constant BALANCER_HELPER = 0x239e55F427D44C3cc793f49bFB507ebe76638a2b;\\n\\n    function _quoteJoinBalancer(bytes32 poolId, address[] memory assets, uint[] memory amounts, address bpt) internal returns(uint) {\\n        uint len = assets.length;\\n        uint userDataAmountsLen;\\n        for (uint i; i < len; i++) {\\n            if (assets[i] != bpt) {\\n                userDataAmountsLen++;\\n            }\\n        }\\n\\n        uint[] memory userDataAmounts = new uint[](userDataAmountsLen);\\n        uint k;\\n        for (uint i = 0; i < len; i++) {\\n            if (assets[i] != bpt) {\\n                userDataAmounts[k] = amounts[i];\\n                k++;\\n            }\\n        }\\n\\n        (uint bptOut,) = IBalancerHelper(BALANCER_HELPER).queryJoin(\\n            poolId,\\n            address(this),\\n            address(this),\\n            IVault.JoinPoolRequest({\\n                assets : assets,\\n                maxAmountsIn : amounts,\\n                userData : abi.encode(IBVault.JoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT, userDataAmounts, 0),\\n                fromInternalBalance : false\\n            })\\n        );\\n\\n        return bptOut;\\n    }\\n\\n    function _addLiquidityBalancer(bytes32 poolId, address[] memory assets, uint[] memory amounts, address bpt) internal {\\n        uint len = assets.length;\\n        IAsset[] memory _poolTokens = new IAsset[](len);\\n        uint userDataAmountsLen;\\n        uint i;\\n        for (; i < len; i++) {\\n            if (assets[i] != bpt) {\\n                if (amounts[i] != 0) {\\n                    ZapV2CommonLibrary._approveIfNeeds(assets[i], amounts[i], BALANCER_VAULT);\\n                }\\n                userDataAmountsLen++;\\n            }\\n            _poolTokens[i] = IAsset(assets[i]);\\n        }\\n\\n        uint[] memory userDataAmounts = new uint[](userDataAmountsLen);\\n        uint k;\\n        for (i = 0; i < len; i++) {\\n            if (assets[i] != bpt) {\\n                userDataAmounts[k] = amounts[i];\\n                k++;\\n            }\\n        }\\n\\n        IBVault(BALANCER_VAULT).joinPool(\\n            poolId,\\n            address(this),\\n            address(this),\\n            IBVault.JoinPoolRequest({\\n                assets : _poolTokens,\\n                maxAmountsIn : amounts,\\n                userData : abi.encode(IBVault.JoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT, userDataAmounts, 0),\\n                fromInternalBalance : false\\n            })\\n        );\\n    }\\n\\n    function _removeLiquidityBalancer(bytes32 poolId, address[] memory assets, uint[] memory amounts, uint bptAmount) internal returns(uint[] memory) {\\n        require(bptAmount != 0, \\\"ZC: zero amount\\\");\\n        uint len = assets.length;\\n\\n        uint[] memory _amounts = new uint[](len);\\n\\n        IAsset[] memory _poolTokens = new IAsset[](len);\\n        uint i;\\n        for (; i < len; i++) {\\n            _poolTokens[i] = IAsset(assets[i]);\\n        }\\n\\n        IBVault(BALANCER_VAULT).exitPool(\\n            poolId,\\n            address(this),\\n            payable(address(this)),\\n            IBVault.ExitPoolRequest({\\n                assets : _poolTokens,\\n                minAmountsOut : _amounts,\\n                /// BPT_IN_FOR_EXACT_TOKENS_OUT for stable pools or EXACT_BPT_IN_FOR_TOKENS_OUT for weighted pools\\n                userData : amounts[0] != 0 ? abi.encode(1, amounts, bptAmount) : abi.encode(1, bptAmount),\\n                toInternalBalance : false\\n            })\\n        );\\n\\n        for (i = 0; i < len; i++) {\\n            _amounts[i] = IERC20(assets[i]).balanceOf(address(this));\\n        }\\n\\n        return _amounts;\\n    }\\n\\n    /// @dev Swap _tokenIn to _tokenOut using pool identified by _poolId\\n    function _balancerSwap(bytes32 poolId, address tokenIn, address tokenOut, uint amountIn) internal {\\n        if (amountIn != 0) {\\n            IBVault.SingleSwap memory singleSwapData = IBVault.SingleSwap({\\n                poolId : poolId,\\n                kind : IBVault.SwapKind.GIVEN_IN,\\n                assetIn : IAsset(tokenIn),\\n                assetOut : IAsset(tokenOut),\\n                amount : amountIn,\\n                userData : \\\"\\\"\\n            });\\n\\n            IBVault.FundManagement memory fundManagementStruct = IBVault.FundManagement({\\n                sender : address(this),\\n                fromInternalBalance : false,\\n                recipient : payable(address(this)),\\n                toInternalBalance : false\\n            });\\n\\n            ZapV2CommonLibrary._approveIfNeeds(tokenIn, amountIn, BALANCER_VAULT);\\n            IBVault(BALANCER_VAULT).swap(singleSwapData, fundManagementStruct, 1, block.timestamp);\\n        }\\n    }\\n\\n    function _queryBalancerSingleSwap(bytes32 poolId, uint assetInIndex, uint assetOutIndex, uint amountIn) internal returns (uint) {\\n        (IERC20[] memory tokens,,) = IBVault(BALANCER_VAULT).getPoolTokens(poolId);\\n        IAsset[] memory assets = new IAsset[](tokens.length);\\n        for (uint i; i < tokens.length; i++) {\\n            assets[i] = IAsset(address(tokens[i]));\\n        }\\n\\n        IBVault.BatchSwapStep[] memory swaps = new IBVault.BatchSwapStep[](1);\\n\\n        IBVault.FundManagement memory fundManagementStruct = IBVault.FundManagement({\\n            sender : address(this),\\n            fromInternalBalance : false,\\n            recipient : payable(address(this)),\\n            toInternalBalance : false\\n        });\\n\\n        swaps[0] = IBVault.BatchSwapStep(\\n            poolId,\\n            assetInIndex,\\n            assetOutIndex,\\n            amountIn,\\n            \\\"\\\"\\n        );\\n\\n        int256[] memory assetDeltas = IBVault(BALANCER_VAULT).queryBatchSwap(\\n            IBVault.SwapKind.GIVEN_IN,\\n            swaps,\\n            assets,\\n            fundManagementStruct\\n        );\\n\\n        return uint(-assetDeltas[assetOutIndex]);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize, which returns 0 for contracts in\\n    // construction, since the code is only stored at the end of the\\n    // constructor execution.\\n\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(account)\\n    }\\n    return size > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason using the provided one.\\n   *\\n   * _Available since v4.3._\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private _initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private _initializing;\\n\\n  /**\\n   * @dev Modifier to protect an initializer function from being invoked twice.\\n   */\\n  modifier initializer() {\\n    require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n    bool isTopLevelCall = !_initializing;\\n    if (isTopLevelCall) {\\n      _initializing = true;\\n      _initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      _initializing = false;\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n/**\\n* By using this software, you understand, acknowledge and accept that Tetu\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\n* basis and without warranties or representations of any kind either expressed\\n* or implied. Any use of this open source software released under the ISC\\n* Internet Systems Consortium license is done at your own risk to the fullest\\n* extent permissible pursuant to applicable law any and all liability as well\\n* as all warranties, including any fitness for a particular purpose with respect\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\n*/\\n\\npragma solidity 0.8.4;\\n\\ninterface IController {\\n\\n\\n  function VERSION() external view returns (string memory);\\n\\n  function addHardWorker(address _worker) external;\\n\\n  function addStrategiesToSplitter(\\n    address _splitter,\\n    address[] memory _strategies\\n  ) external;\\n\\n  function addStrategy(address _strategy) external;\\n\\n  function addVaultsAndStrategies(\\n    address[] memory _vaults,\\n    address[] memory _strategies\\n  ) external;\\n\\n  function announcer() external view returns (address);\\n\\n  function bookkeeper() external view returns (address);\\n\\n  function changeWhiteListStatus(address[] memory _targets, bool status)\\n  external;\\n\\n  function controllerTokenMove(\\n    address _recipient,\\n    address _token,\\n    uint256 _amount\\n  ) external;\\n\\n  function dao() external view returns (address);\\n\\n  function distributor() external view returns (address);\\n\\n  function doHardWork(address _vault) external;\\n\\n  function feeRewardForwarder() external view returns (address);\\n\\n  function fund() external view returns (address);\\n\\n  function fundDenominator() external view returns (uint256);\\n\\n  function fundKeeperTokenMove(\\n    address _fund,\\n    address _token,\\n    uint256 _amount\\n  ) external;\\n\\n  function fundNumerator() external view returns (uint256);\\n\\n  function fundToken() external view returns (address);\\n\\n  function governance() external view returns (address);\\n\\n  function hardWorkers(address) external view returns (bool);\\n\\n  function initialize() external;\\n\\n  function isAllowedUser(address _adr) external view returns (bool);\\n\\n  function isDao(address _adr) external view returns (bool);\\n\\n  function isHardWorker(address _adr) external view returns (bool);\\n\\n  function isPoorRewardConsumer(address _adr) external view returns (bool);\\n\\n  function isRewardDistributor(address _adr) external view returns (bool);\\n\\n  function isValidStrategy(address _strategy) external view returns (bool);\\n\\n  function isValidVault(address _vault) external view returns (bool);\\n\\n  function mintAndDistribute(uint256 totalAmount, bool mintAllAvailable)\\n  external;\\n\\n  function mintHelper() external view returns (address);\\n\\n  function psDenominator() external view returns (uint256);\\n\\n  function psNumerator() external view returns (uint256);\\n\\n  function psVault() external view returns (address);\\n\\n  function pureRewardConsumers(address) external view returns (bool);\\n\\n  function rebalance(address _strategy) external;\\n\\n  function removeHardWorker(address _worker) external;\\n\\n  function rewardDistribution(address) external view returns (bool);\\n\\n  function rewardToken() external view returns (address);\\n\\n  function setAnnouncer(address _newValue) external;\\n\\n  function setBookkeeper(address newValue) external;\\n\\n  function setDao(address newValue) external;\\n\\n  function setDistributor(address _distributor) external;\\n\\n  function setFeeRewardForwarder(address _feeRewardForwarder) external;\\n\\n  function setFund(address _newValue) external;\\n\\n  function setFundNumeratorDenominator(uint256 numerator, uint256 denominator)\\n  external;\\n\\n  function setFundToken(address _newValue) external;\\n\\n  function setGovernance(address newValue) external;\\n\\n  function setMintHelper(address _newValue) external;\\n\\n  function setPSNumeratorDenominator(uint256 numerator, uint256 denominator)\\n  external;\\n\\n  function setPsVault(address _newValue) external;\\n\\n  function setPureRewardConsumers(address[] memory _targets, bool _flag)\\n  external;\\n\\n  function setRewardDistribution(\\n    address[] memory _newRewardDistribution,\\n    bool _flag\\n  ) external;\\n\\n  function setRewardToken(address _newValue) external;\\n\\n  function setVaultController(address _newValue) external;\\n\\n  function setVaultStrategyBatch(\\n    address[] memory _vaults,\\n    address[] memory _strategies\\n  ) external;\\n\\n  function strategies(address) external view returns (bool);\\n\\n  function strategyTokenMove(\\n    address _strategy,\\n    address _token,\\n    uint256 _amount\\n  ) external;\\n\\n  function upgradeTetuProxyBatch(\\n    address[] memory _contracts,\\n    address[] memory _implementations\\n  ) external;\\n\\n  function vaultController() external view returns (address);\\n\\n  function vaults(address) external view returns (bool);\\n\\n  function whiteList(address) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/IControllable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n/**\\n* By using this software, you understand, acknowledge and accept that Tetu\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\n* basis and without warranties or representations of any kind either expressed\\n* or implied. Any use of this open source software released under the ISC\\n* Internet Systems Consortium license is done at your own risk to the fullest\\n* extent permissible pursuant to applicable law any and all liability as well\\n* as all warranties, including any fitness for a particular purpose with respect\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\n*/\\n\\npragma solidity 0.8.4;\\n\\ninterface IControllable {\\n\\n  function isController(address _contract) external view returns (bool);\\n\\n  function isGovernance(address _contract) external view returns (bool);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/third_party/balancer/IBVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\npragma solidity 0.8.4;\\n\\nimport \\\"../../openzeppelin/IERC20.sol\\\";\\n\\n\\ninterface IAsset {\\n}\\n\\ninterface IBVault {\\n  // Internal Balance\\n  //\\n  // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\\n  // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\\n  // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\\n  // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\\n  //\\n  // Internal Balance management features batching, which means a single contract call can be used to perform multiple\\n  // operations of different kinds, with different senders and recipients, at once.\\n\\n  /**\\n   * @dev Returns `user`'s Internal Balance for a set of tokens.\\n     */\\n  function getInternalBalance(address user, IERC20[] calldata tokens) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\\n     * it lets integrators reuse a user's Vault allowance.\\n     *\\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\\n     */\\n  function manageUserBalance(UserBalanceOp[] calldata ops) external payable;\\n\\n  /**\\n   * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\\n     without manual WETH wrapping or unwrapping.\\n     */\\n  struct UserBalanceOp {\\n    UserBalanceOpKind kind;\\n    IAsset asset;\\n    uint256 amount;\\n    address sender;\\n    address payable recipient;\\n  }\\n\\n  // There are four possible operations in `manageUserBalance`:\\n  //\\n  // - DEPOSIT_INTERNAL\\n  // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\\n  // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\\n  //\\n  // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\\n  // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\\n  // relevant for relayers).\\n  //\\n  // Emits an `InternalBalanceChanged` event.\\n  //\\n  //\\n  // - WITHDRAW_INTERNAL\\n  // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\\n  //\\n  // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\\n  // it to the recipient as ETH.\\n  //\\n  // Emits an `InternalBalanceChanged` event.\\n  //\\n  //\\n  // - TRANSFER_INTERNAL\\n  // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\\n  //\\n  // Reverts if the ETH sentinel value is passed.\\n  //\\n  // Emits an `InternalBalanceChanged` event.\\n  //\\n  //\\n  // - TRANSFER_EXTERNAL\\n  // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\\n  // relayers, as it lets them reuse a user's Vault allowance.\\n  //\\n  // Reverts if the ETH sentinel value is passed.\\n  //\\n  // Emits an `ExternalBalanceTransfer` event.\\n\\n  enum UserBalanceOpKind {DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL}\\n\\n  /**\\n   * @dev Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through\\n     * interacting with Pools using Internal Balance.\\n     *\\n     * Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\\n     * address.\\n     */\\n  event InternalBalanceChanged(address indexed user, IERC20 indexed token, int256 delta);\\n\\n  /**\\n   * @dev Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\\n     */\\n  event ExternalBalanceTransfer(IERC20 indexed token, address indexed sender, address recipient, uint256 amount);\\n\\n  // Pools\\n  //\\n  // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\\n  // functionality:\\n  //\\n  //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\\n  // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\\n  // which increase with the number of registered tokens.\\n  //\\n  //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\\n  // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\\n  // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\\n  // independent of the number of registered tokens.\\n  //\\n  //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\\n  // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\\n\\n  enum PoolSpecialization {GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN}\\n\\n  /**\\n   * @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which\\n     * is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be\\n     * changed.\\n     *\\n     * The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\\n     * depending on the chosen specialization setting. This contract is known as the Pool's contract.\\n     *\\n     * Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\\n     * multiple Pools may share the same contract.\\n     *\\n     * Emits a `PoolRegistered` event.\\n     */\\n  function registerPool(PoolSpecialization specialization) external returns (bytes32);\\n\\n  /**\\n   * @dev Emitted when a Pool is registered by calling `registerPool`.\\n     */\\n  event PoolRegistered(bytes32 indexed poolId, address indexed poolAddress, PoolSpecialization specialization);\\n\\n  /**\\n   * @dev Returns a Pool's contract address and specialization setting.\\n     */\\n  function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\n\\n  /**\\n   * @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\n     *\\n     * Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\\n     * exit by receiving registered tokens, and can only swap registered tokens.\\n     *\\n     * Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\\n     * of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\\n     * ascending order.\\n     *\\n     * The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\\n     * Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`,\\n     * depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\\n     * expected to be highly secured smart contracts with sound design principles, and the decision to register an\\n     * Asset Manager should not be made lightly.\\n     *\\n     * Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\\n     * Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\\n     * different Asset Manager.\\n     *\\n     * Emits a `TokensRegistered` event.\\n     */\\n  function registerTokens(\\n    bytes32 poolId,\\n    IERC20[] calldata tokens,\\n    address[] calldata assetManagers\\n  ) external;\\n\\n  /**\\n   * @dev Emitted when a Pool registers tokens by calling `registerTokens`.\\n     */\\n  event TokensRegistered(bytes32 indexed poolId, IERC20[] tokens, address[] assetManagers);\\n\\n  /**\\n   * @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\n     *\\n     * Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\\n     * balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\\n     * must be deregistered in the same `deregisterTokens` call.\\n     *\\n     * A deregistered token can be re-registered later on, possibly with a different Asset Manager.\\n     *\\n     * Emits a `TokensDeregistered` event.\\n     */\\n  function deregisterTokens(bytes32 poolId, IERC20[] calldata tokens) external;\\n\\n  /**\\n   * @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\\n     */\\n  event TokensDeregistered(bytes32 indexed poolId, IERC20[] tokens);\\n\\n  /**\\n   * @dev Returns detailed information for a Pool's registered token.\\n     *\\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\\n     * equals the sum of `cash` and `managed`.\\n     *\\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\\n     * `managed` or `total` balance to be greater than 2^112 - 1.\\n     *\\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\\n     * change for this purpose, and will update `lastChangeBlock`.\\n     *\\n     * `assetManager` is the Pool's token Asset Manager.\\n     */\\n  function getPoolTokenInfo(bytes32 poolId, IERC20 token)\\n  external\\n  view\\n  returns (\\n    uint256 cash,\\n    uint256 managed,\\n    uint256 lastChangeBlock,\\n    address assetManager\\n  );\\n\\n  /**\\n   * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\n     * the tokens' `balances` changed.\\n     *\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\n     *\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\n     * order as passed to `registerTokens`.\\n     *\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\n     * instead.\\n     */\\n  function getPoolTokens(bytes32 poolId)\\n  external\\n  view\\n  returns (\\n    IERC20[] memory tokens,\\n    uint256[] memory balances,\\n    uint256 lastChangeBlock\\n  );\\n\\n  /**\\n   * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\n     * Pool shares.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\n     * these maximums.\\n     *\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\n     * back to the caller (not the sender, which is important for relayers).\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\n     *\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\n     *\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\n     * directly to the Pool's contract, as is `recipient`.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n  function joinPool(\\n    bytes32 poolId,\\n    address sender,\\n    address recipient,\\n    JoinPoolRequest calldata request\\n  ) external payable;\\n\\n  enum JoinKind { INIT, EXACT_TOKENS_IN_FOR_BPT_OUT, TOKEN_IN_FOR_EXACT_BPT_OUT, ALL_TOKENS_IN_FOR_EXACT_BPT_OUT }\\n  enum ExitKind { EXACT_BPT_IN_FOR_ONE_TOKEN_OUT, EXACT_BPT_IN_FOR_TOKENS_OUT, BPT_IN_FOR_EXACT_TOKENS_OUT }\\n\\n  struct JoinPoolRequest {\\n    IAsset[] assets;\\n    uint256[] maxAmountsIn;\\n    bytes userData;\\n    bool fromInternalBalance;\\n  }\\n\\n  /**\\n   * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\\n     * `getPoolTokenInfo`).\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\n     * it just enforces these minimums.\\n     *\\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\n     *\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\n     * do so will trigger a revert.\\n     *\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\n     * `tokens` array. This array must match the Pool's registered tokens.\\n     *\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\n     * passed directly to the Pool's contract.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n  function exitPool(\\n    bytes32 poolId,\\n    address sender,\\n    address payable recipient,\\n    ExitPoolRequest calldata request\\n  ) external;\\n\\n  struct ExitPoolRequest {\\n    IAsset[] assets;\\n    uint256[] minAmountsOut;\\n    bytes userData;\\n    bool toInternalBalance;\\n  }\\n\\n  /**\\n   * @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\\n     */\\n  event PoolBalanceChanged(\\n    bytes32 indexed poolId,\\n    address indexed liquidityProvider,\\n    IERC20[] tokens,\\n    int256[] deltas,\\n    uint256[] protocolFeeAmounts\\n  );\\n\\n  enum PoolBalanceChangeKind {JOIN, EXIT}\\n\\n  // Swaps\\n  //\\n  // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\n  // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\n  // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\n  //\\n  // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\n  // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\\n  // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\\n  // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\n  // individual swaps.\\n  //\\n  // There are two swap kinds:\\n  //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\n  // `onSwap` hook) the amount of tokens out (to send to the recipient).\\n  //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\n  // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\n  //\\n  // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\n  // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\\n  // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\\n  // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\\n  // the final intended token.\\n  //\\n  // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\n  // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\n  // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\n  // much less gas than they would otherwise.\\n  //\\n  // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\n  // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\n  // updating the Pool's internal accounting).\\n  //\\n  // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\n  // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\n  // minimum amount of tokens to receive (by passing a negative value) is specified.\\n  //\\n  // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\n  // this point in time (e.g. if the transaction failed to be included in a block promptly).\\n  //\\n  // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\n  // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\n  // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\n  // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\n  //\\n  // Finally, Internal Balance can be used when either sending or receiving tokens.\\n\\n  enum SwapKind {GIVEN_IN, GIVEN_OUT}\\n\\n  /**\\n   * @dev Performs a swap with a single Pool.\\n     *\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\n     *\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\n     * sent to the Pool, which must be less than or equal to `limit`.\\n     *\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\n     *\\n     * Emits a `Swap` event.\\n     */\\n  function swap(\\n    SingleSwap calldata singleSwap,\\n    FundManagement calldata funds,\\n    uint256 limit,\\n    uint256 deadline\\n  ) external payable returns (uint256);\\n\\n  /**\\n   * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\n     * the `kind` value.\\n     *\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n  struct SingleSwap {\\n    bytes32 poolId;\\n    SwapKind kind;\\n    IAsset assetIn;\\n    IAsset assetOut;\\n    uint256 amount;\\n    bytes userData;\\n  }\\n\\n  /**\\n   * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\n     *\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\n     * the same index in the `assets` array.\\n     *\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\n     * `amountOut` depending on the swap kind.\\n     *\\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\n     *\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\n     * or unwrapped from WETH by the Vault.\\n     *\\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\\n     *\\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\n     * equivalent `swap` call.\\n     *\\n     * Emits `Swap` events.\\n     */\\n  function batchSwap(\\n    SwapKind kind,\\n    BatchSwapStep[] calldata swaps,\\n    IAsset[] calldata assets,\\n    FundManagement calldata funds,\\n    int256[] calldata limits,\\n    uint256 deadline\\n  ) external payable returns (int256[] memory);\\n\\n  /**\\n   * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\n     *\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\n     * from the previous swap, depending on the swap kind.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n  struct BatchSwapStep {\\n    bytes32 poolId;\\n    uint256 assetInIndex;\\n    uint256 assetOutIndex;\\n    uint256 amount;\\n    bytes userData;\\n  }\\n\\n  /**\\n   * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\\n     */\\n  event Swap(\\n    bytes32 indexed poolId,\\n    IERC20 indexed tokenIn,\\n    IERC20 indexed tokenOut,\\n    uint256 amountIn,\\n    uint256 amountOut\\n  );\\n\\n  /**\\n   * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\n     * `recipient` account.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n     * `joinPool`.\\n     *\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n     * transferred. This matches the behavior of `exitPool`.\\n     *\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\n     * revert.\\n     */\\n  struct FundManagement {\\n    address sender;\\n    bool fromInternalBalance;\\n    address payable recipient;\\n    bool toInternalBalance;\\n  }\\n\\n  /**\\n   * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\\n     * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\\n     *\\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\\n     * receives are the same that an equivalent `batchSwap` call would receive.\\n     *\\n     * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\\n     * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\\n     * approve them for the Vault, or even know a user's address.\\n     *\\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\\n     * eth_call instead of eth_sendTransaction.\\n     */\\n  function queryBatchSwap(\\n    SwapKind kind,\\n    BatchSwapStep[] calldata swaps,\\n    IAsset[] calldata assets,\\n    FundManagement calldata funds\\n  ) external returns (int256[] memory assetDeltas);\\n\\n  // BasePool.sol\\n\\n  /**\\n* @dev Returns the amount of BPT that would be burned from `sender` if the `onExitPool` hook were called by the\\n     * Vault with the same arguments, along with the number of tokens `recipient` would receive.\\n     *\\n     * This function is not meant to be called directly, but rather from a helper contract that fetches current Vault\\n     * data, such as the protocol swap fee percentage and Pool balances.\\n     *\\n     * Like `IVault.queryBatchSwap`, this function is not view due to internal implementation details: the caller must\\n     * explicitly use eth_call instead of eth_sendTransaction.\\n     */\\n  function queryExit(\\n    bytes32 poolId,\\n    address sender,\\n    address recipient,\\n    uint256[] memory balances,\\n    uint256 lastChangeBlock,\\n    uint256 protocolSwapFeePercentage,\\n    bytes memory userData\\n  ) external returns (uint256 bptIn, uint256[] memory amountsOut);\\n\\n\\n}\\n\"\r\n    },\r\n    \"contracts/third_party/balancer/IBPT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n/**\\n* By using this software, you understand, acknowledge and accept that Tetu\\n* and/or the underlying software are provided \u201cas is\u201d and \u201cas available\u201d\\n* basis and without warranties or representations of any kind either expressed\\n* or implied. Any use of this open source software released under the ISC\\n* Internet Systems Consortium license is done at your own risk to the fullest\\n* extent permissible pursuant to applicable law any and all liability as well\\n* as all warranties, including any fitness for a particular purpose with respect\\n* to Tetu and/or the underlying software and the use thereof are disclaimed.\\n*/\\n\\npragma solidity 0.8.4;\\n\\n/// @dev lite version of BPT token\\ninterface IBPT {\\n    function getNormalizedWeights() external view returns (uint256[] memory);\\n    function getVault() external view returns (address);\\n    function getPoolId() external view returns (bytes32);\\n    function totalSupply() external view returns (uint256);\\n    function symbol() external view returns (string memory);\\n}\"\r\n    },\r\n    \"contracts/third_party/balancer/IBalancerHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\npragma solidity 0.8.4;\\n\\ninterface IBalancerHelper {\\n  function queryExit(\\n    bytes32 poolId,\\n    address sender,\\n    address recipient,\\n    IVault.JoinPoolRequest memory request\\n  ) external returns (uint256 bptIn, uint256[] memory amountsOut);\\n\\n  function queryJoin(\\n    bytes32 poolId,\\n    address sender,\\n    address recipient,\\n    IVault.JoinPoolRequest memory request\\n  ) external returns (uint256 bptOut, uint256[] memory amountsIn);\\n\\n  function vault() external view returns (address);\\n}\\n\\ninterface IVault {\\n  struct JoinPoolRequest {\\n    address[] assets;\\n    uint256[] maxAmountsIn;\\n    bytes userData;\\n    bool fromInternalBalance;\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 150\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"UpdateController\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"created\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"initializeControllable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"isGovernance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balAmount\",\"type\":\"uint256\"}],\"name\":\"quoteInto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shareAmount\",\"type\":\"uint256\"}],\"name\":\"quoteOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"asset0SwapData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"asset1SwapData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"tokenInAmount\",\"type\":\"uint256\"}],\"name\":\"zapInto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"asset0SwapData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"asset1SwapData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"shareAmount\",\"type\":\"uint256\"}],\"name\":\"zapOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ZapV2XTetuBal", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "150", "ConstructorArguments": "0000000000000000000000006678814c273d5088114b6e40cc49c8db04f9bc29", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}