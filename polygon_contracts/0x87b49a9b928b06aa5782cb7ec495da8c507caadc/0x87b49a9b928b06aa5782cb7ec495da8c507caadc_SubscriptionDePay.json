{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SubscriptionDePay.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.17;\\nimport \\\"./interfaces/ISubscriptionData.sol\\\";\\nimport \\\"./interfaces/IStaking.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./utils/ERC2771Context.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./interfaces/IDiaOracle.sol\\\";\\n\\ncontract SubscriptionDePay is ReentrancyGuard, ERC2771Context {\\n\\n    using SafeERC20 for IERC20;\\n    address public treasury;\\n    address public company;\\n    address public pendingCompany;\\n\\n    struct UserData {\\n        uint256 deposit;\\n        uint256 balance;\\n    }\\n    mapping(address => mapping(address => UserData)) public userData;\\n\\n    uint256 public timeStampGap;\\n    \\n    // to temporarily pause the deposit and withdrawal function\\n\\n    bool public pauseDeposit;\\n    bool public pauseWithdrawal;\\n\\n    //For improved precision\\n    uint256 constant PRECISION = 10**25;\\n    uint256 constant PERCENT = 100 * PRECISION;\\n    \\n    mapping(address => uint256) public totalDeposit; //(token => amount)\\n    mapping(address => uint256) public totalCharges; //(token => amount)\\n    mapping(address => uint256) public totalWithdraws; //(token => amount)\\n    mapping(address => uint256) public companyRevenue; //(token => amount)\\n\\n    event UserCharged(address indexed user, address indexed token, uint256 fee);\\n    event UserDeposit(address indexed user, address indexed token, uint256 deposit);\\n    event UserWithdraw(address indexed user, address indexed token, uint256 amount);\\n    event CompanyWithdraw(address indexed token, uint256 amount);\\n    event TreasurySet(address indexed _treasury);\\n    event CompanySet(address indexed _company);\\n    event CompanyPendingSet(address indexed _company);\\n    event DataContractUpdated(address indexed _dataContract);\\n    event DepositStatusChanged(bool _status);\\n    event WithdrawalStatusChanged(bool _status);\\n    // event UserSubscribed(address indexed user, string[] params, uint256[] values);\\n    constructor(uint256 _timeStampGap, address _treasury, address _company, address _data, address _trustedForwarder) ERC2771Context(_trustedForwarder, _data) {\\n        require(\\n            _treasury != address(0),\\n            \\\"SpheronSubscriptionPayments: Invalid address for treasury\\\"\\n        );\\n        require(\\n            _company != address(0),\\n            \\\"SpheronSubscriptionPayments: Invalid address for company\\\"\\n        );\\n        require(\\n            _data != address(0),\\n            \\\"SpheronSubscriptionPayments: Invalid address of subscription data contract\\\"\\n        );\\n        subscriptionData = ISubscriptionData(_data);\\n        treasury = _treasury;\\n        company = _company;\\n        timeStampGap = _timeStampGap;\\n        \\n    }\\n    // ROLES\\n    // Manager - limited to only contract data and does not have access to any funds. responsible for changing deposit and withdrawal status, adding tokens, updating params and other contract data.\\n    // Treasury - It would be a Mulitisg acocunt, mostly handled by the company or a governance or DAO\\n    // Company - It would be out account with mulitisig\\n    // Owner - owner of the contract, responsible for setting the treasury and company address and other core functions that involves users funds.\\n    /**\\n     * @notice only manager modifier\\n     *\\n     */\\n    modifier onlyOwnerOrManager() {\\n        bool hasAccess = subscriptionData.isManager(_msgSender());\\n        require(\\n            hasAccess,\\n            \\\"Only manager and owner can call this function\\\"\\n        );\\n        _;\\n    }\\n    /**\\n     * @notice only company modifier\\n     *\\n     */\\n    modifier onlyCompany() {\\n        require(\\n            _msgSender() == company || subscriptionData.isManager(_msgSender()),\\n            \\\"Only company and managers can call this function\\\"\\n        );\\n        _;\\n    }\\n    /**\\n     * @notice unchecked iterator increment for gas optimization\\n        * @param x uint256\\n     */\\n    function unsafeInc(uint x) private pure returns (uint) {\\n        unchecked { return x + 1;}\\n    }\\n    /**\\n     * @notice set address of the treasury\\n     * @param _treasury treasury address\\n     */\\n    function setTreasury(address _treasury) external onlyOwnerOrManager {\\n        require(\\n            _treasury != address(0),\\n            \\\"SpheronSubscriptionPayments: Invalid address for treasury\\\"\\n        );\\n        treasury = _treasury;\\n        emit TreasurySet(treasury);\\n    }\\n    /**\\n     * @notice set address of the company\\n     * @param _company company address\\n     */\\n    function setCompany(address _company) external onlyCompany {\\n        require(\\n            _company != address(0),\\n            \\\"SpheronSubscriptionPayments: Invalid address for company\\\"\\n        );\\n        pendingCompany = _company;\\n        emit CompanyPendingSet(pendingCompany);\\n    }\\n\\n    /**\\n     * @notice approve pending company address\\n     */\\n\\n    function approveSetCompany(address _pendingCompany) external onlyOwnerOrManager {\\n        require(\\n            pendingCompany != address(0),\\n            \\\"SpheronSubscriptionPayments: Invalid address for company\\\"\\n        );\\n        require(\\n            _pendingCompany != address(0) && _pendingCompany == pendingCompany,\\n            \\\"\\\");\\n        company = pendingCompany;\\n        pendingCompany = address(0);\\n        emit CompanySet(company);\\n    }\\n    /**\\n     * @notice deposit one of the accepted erc20 to the treasury\\n     * @param _token address of erc20 token\\n     * @param _amount amount of tokens to deposit to treasury\\n     */\\n\\n    function userDeposit(address _token, uint _amount) external nonReentrant {\\n        require(!pauseDeposit, \\\"Deposit is paused\\\");\\n        require(\\n            subscriptionData.isAcceptedToken(_token),\\n            \\\"SpheronSubscriptionPayments: Token not accepted\\\"\\n        );\\n        require(\\n            _amount > 0,\\n            \\\"SpheronSubscriptionPayments: Deposit must be greater than zero\\\"\\n        );\\n        IERC20 erc20 = IERC20(_token);\\n        require(\\n            erc20.allowance(_msgSender(), address(this)) >= _amount,\\n            \\\"SpheronPayments: Insufficient allowance\\\"\\n        );\\n        erc20.safeTransferFrom(_msgSender(), treasury, _amount);\\n        totalDeposit[_token] += _amount;\\n        userData[_msgSender()][_token].deposit += _amount;\\n        userData[_msgSender()][_token].balance += _amount;\\n        emit UserDeposit(_msgSender(), _token, _amount); \\n    }\\n    /**\\n     * @notice user token withdrawal one of the accepted erc20 to the treasury\\n     * @param _token address of erc20 token\\n     * @param _amount amount of tokens to be withdrawn from treasury\\n     */\\n    function userWithdraw(address _token, uint _amount) external nonReentrant {\\n        require(!pauseWithdrawal, \\\"Withdrawal is paused\\\");\\n        require(\\n            _amount > 0,\\n            \\\"SpheronSubscriptionPayments: Amount must be greater than zero\\\"\\n        );\\n        require(\\n            _amount <= userData[_msgSender()][_token].balance,\\n            \\\"SpheronSubscriptionPayments: Amount must be less than or equal to user balance\\\"\\n        );\\n        IERC20 erc20 = IERC20(_token);\\n        require(\\n            erc20.allowance(treasury, address(this)) >= _amount,\\n            \\\"SpheronPayments: Insufficient allowance\\\"\\n        );\\n        userData[_msgSender()][_token].balance -= _amount;\\n        totalWithdraws[_token] += _amount;\\n        erc20.safeTransferFrom(treasury, _msgSender(), _amount);\\n        emit UserWithdraw(_msgSender(), _token, _amount); \\n    }\\n    /**\\n     * @notice company token withdrawal of one of the accepted erc20 from the treasury\\n     * @param _token address of erc20 token\\n     * @param _amount amount of tokens to be withdrawn from treasury\\n     */\\n    function companyWithdraw(address _token, uint _amount) public nonReentrant {\\n        require(\\n            _msgSender() == company,\\n            \\\"Only callable by company\\\"\\n        );\\n        require(\\n            _amount > 0,\\n            \\\"SpheronPayments: Amount must be greater than zero\\\"\\n        );\\n        require(\\n            _amount <= companyRevenue[_token],\\n            \\\"SpheronSubscriptionPayments: Balance must be less than or equal to company balance\\\"\\n        );\\n        IERC20 erc20 = IERC20(_token);\\n        require(\\n            erc20.allowance(treasury, address(this)) >= _amount,\\n            \\\"SpheronPayments: Insufficient allowance\\\"\\n        );\\n        companyRevenue[_token] -= _amount;\\n        erc20.safeTransferFrom(treasury, company, _amount);\\n        emit UserWithdraw(_msgSender(), _token, _amount); \\n    }\\n\\n    /**\\n     * @notice charge user for one time charges\\n     * @param _user user address\\n     * @param _parameters list for subscription payment\\n     * @param _values value list for subscription payment\\n     * @param _token address of token contract\\n     */\\n    function chargeUser(\\n        address _user,\\n        string[] memory _parameters,\\n        uint256[] memory _values,\\n        address _token\\n    ) external onlyOwnerOrManager {\\n        require(_user != address(0), \\\"SpheronSubscriptionPayments: Invalid user address\\\");\\n        require(_token != address(0), \\\"SpheronSubscriptionPayments: Invalid token address\\\");\\n        require(\\n            _parameters.length > 0, \\\"SpheronSubscriptionPayments: No params\\\"\\n        );\\n        require(\\n            _values.length > 0, \\\"SpheronSubscriptionPayments: No values\\\"\\n        );\\n        require(\\n            _parameters.length == _values.length,\\n            \\\"SpheronSubscriptionPayments: unequal length of array\\\"\\n        );\\n        require(\\n            subscriptionData.isAcceptedToken(_token),\\n            \\\"SpheronSubscriptionPayments: Token not accepted\\\"\\n        );\\n\\n        uint256 fee = 0;\\n\\n        for (uint256 i = 0; i < _parameters.length; i = unsafeInc(i)) {\\n            fee += _values[i] * subscriptionData.priceData(_parameters[i]);\\n        }\\n        uint256 discountedFee = fee - _calculateDiscount(_user, fee);\\n        uint256 underlying = _calculatePriceInToken(discountedFee, _token);\\n        require(\\n            underlying <= userData[_user][_token].balance,\\n            \\\"SpheronSubscriptionPayments: Balance must be less than or equal to amount charged\\\"\\n        );\\n        userData[_user][_token].balance -= underlying;\\n        totalCharges[_token] += underlying;\\n        companyRevenue[_token] += underlying;\\n        emit UserCharged(_user, _token, underlying);\\n    }\\n\\n    /**\\n     * @notice change status for user deposit. On or off\\n     */\\n    function changeDepositStatus() public onlyOwnerOrManager {\\n        pauseDeposit = !pauseDeposit;\\n        emit DepositStatusChanged(pauseDeposit);\\n    }\\n\\n    /**\\n     * @notice change status for user deposit. On or off\\n     */\\n    function changeWithdrawalStatus() public onlyOwnerOrManager {\\n        pauseWithdrawal = !pauseWithdrawal;\\n        emit WithdrawalStatusChanged(pauseWithdrawal);\\n    }\\n    /**\\n     * @notice update subscriptionDataContract\\n     * @param d data contract address\\n     */\\n    function updateDataContract(address d) external onlyOwnerOrManager {\\n        require(\\n            d != address(0),\\n            \\\"SpheronSubscriptionPayments: data contract address can not be zero address\\\"\\n        );\\n        subscriptionData = ISubscriptionData(d);\\n        emit DataContractUpdated(d);\\n    }\\n\\n    /**\\n     * @dev calculate discount that user gets for staking\\n     * @param u address of user that needs to be charged\\n     * @param a amount the user will pay without discount\\n     */\\n    function _calculateDiscount(address u, uint256 a)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (!subscriptionData.discountsEnabled()) return 0;\\n        IStaking stakingManager = IStaking(subscriptionData.stakingManager());\\n        uint256 stake = stakingManager.balanceOf(\\n            u,\\n            address(subscriptionData.stakedToken())\\n        );\\n        uint256[] memory discountSlabs = subscriptionData.slabs();\\n        uint256[] memory discountPercents = subscriptionData.discountPercents();\\n        uint256 length = discountSlabs.length;\\n        uint256 percent = 0;\\n        for (uint256 i = 0; i < length; i = unsafeInc(i)) {\\n            if (stake >= discountSlabs[i]) {\\n                percent = discountPercents[i];\\n            } else {\\n                break;\\n            }\\n        }\\n        return (a * percent * PRECISION) / PERCENT;\\n    }\\n    /**\\n     * @notice get price of underlying token\\n     * @param t underlying token address\\n     * @return underlyingPrice of underlying token in usd\\n     * @return timestamp of underlying token in usd\\n     */\\n    function getUnderlyingPrice(address t) public view returns (uint256 underlyingPrice, uint256 timestamp) {\\n        (string memory symbol,\\n        uint128 decimals,\\n        ,\\n        bool accepted,\\n        bool isChainLinkFeed,\\n        address priceFeedAddress,\\n        uint128 priceFeedPrecision) = subscriptionData.acceptedTokens(t);\\n        require(accepted, \\\"Token is not accepted\\\");\\n        uint256 _price;\\n        uint256 _timestamp;\\n        if (isChainLinkFeed) {\\n            AggregatorV3Interface chainlinkFeed = AggregatorV3Interface(\\n                priceFeedAddress\\n            );\\n            (\\n                uint80 roundID,\\n                int256 price,\\n                uint256 startedAt,\\n                uint256 timeStamp,\\n                uint80 answeredInRound\\n            ) = chainlinkFeed.latestRoundData();\\n            _price = uint256(price);\\n            _timestamp = uint256(timeStamp);\\n        } else {\\n            IDiaOracle priceFeed = IDiaOracle(priceFeedAddress);\\n            (uint128 price, uint128 timeStamp) = priceFeed.getValue(\\n                symbol\\n            );\\n            _price = price;\\n            _timestamp = timeStamp;\\n        }\\n        uint256 price = _toPrecision(\\n            uint256(_price),\\n            priceFeedPrecision,\\n            decimals\\n        );\\n        return (price, _timestamp);\\n    }\\n    /**\\n     * @dev calculate price in Spheron\\n     * @notice ensure that price is within 6 hour window\\n     * @param a total amount in USD\\n     * @return price\\n     */\\n    function _calculatePriceInToken(uint256 a, address t)\\n        internal\\n        returns (uint256)\\n    {\\n        (, uint128 decimals, , , , , ) = subscriptionData.acceptedTokens(t);\\n        uint256 precision = 10**decimals;\\n        a = _toPrecision(a, subscriptionData.usdPricePrecision(), decimals);\\n        (\\n            uint256 underlyingPrice,\\n            uint256 timestamp\\n        ) = getUnderlyingPrice(t);\\n        require((block.timestamp - timestamp) <= timeStampGap, \\\"SpheronSubscriptionPayments: underlying price not updated\\\");\\n        return (a * precision) / underlyingPrice;\\n    }\\n\\n    /**\\n     * @notice trim or add number for certain precision as required\\n     * @param a amount/number that needs to be modded\\n     * @param p older precision\\n     * @param n new desired precision\\n     * @return price of underlying token in usd\\n     */\\n    function _toPrecision(\\n        uint256 a,\\n        uint128 p,\\n        uint128 n\\n    ) internal pure returns (uint256) {\\n        int128 decimalFactor = int128(p) - int128(n);\\n        if (decimalFactor > 0) {\\n            a = a / (10**uint128(decimalFactor));\\n        } else if (decimalFactor < 0) {\\n            a = a * (10**uint128(-1 * decimalFactor));\\n        }\\n        return a;\\n    }\\n    function updateTimeStampGap(uint256 _timeStampGap) external onlyOwnerOrManager {\\n        require(_timeStampGap > 0, \\\"SpheronSubscriptionPayments: timestamp gap must be greater than 0\\\");\\n        timeStampGap = _timeStampGap;\\n    }\\n    /**\\n     * @notice Return user data\\n     * @param _token address of deposit ERC20 token\\n     * @param _user address of the user\\n     */\\n    function getUserData(address _user, address _token) public view returns (UserData memory) {\\n        return userData[_user][_token];\\n    }\\n    /**\\n     * @notice Return total deposits of all users for a token\\n     */\\n    function getTotalDeposit(address t) public view returns (uint256) {\\n        return totalDeposit[t];\\n    }\\n    /**\\n     * @notice Return total withdrawals of all users for a token\\n     */\\n    function getTotalWithdraws(address t) public view returns (uint256) {\\n        return totalWithdraws[t];\\n    }\\n    /**\\n     * @notice Return total charges of all users for a token\\n     */\\n    function getTotalCharges(address t) public view returns (uint256) {\\n        return totalCharges[t];\\n    }\\n    function _msgSender() internal view override(ERC2771Context)\\n      returns (address sender) {\\n      sender = ERC2771Context._msgSender();\\n    }\\n    function _msgData() internal view override(ERC2771Context)\\n      returns (bytes calldata) {\\n      return ERC2771Context._msgData();\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/ISubscriptionData.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISubscriptionData {\\n    function priceData(string memory name) external view returns (uint256);\\n\\n    function availableParams(string memory name) external view returns (bool);\\n\\n    function params(uint256 name) external view returns (bool);\\n\\n    function managerByAddress(address user) external view returns (bool);\\n\\n    function discountsEnabled() external view returns (bool);\\n\\n    function stakingManager() external view returns (address);\\n\\n    function stakedToken() external view returns (address);\\n\\n    function getUnderlyingPrice(address t) external view returns (uint256);\\n\\n    function escrow() external view returns (address);\\n\\n    function slabs() external view returns (uint256[] memory);\\n\\n    function discountPercents() external view returns (uint256[] memory);\\n\\n    function addNewTokens(\\n        string[] memory s,\\n        address[] memory t,\\n        uint128[] memory d,\\n        bool[] memory isChainLinkFeed_,\\n        address[] memory priceFeedAddress_,\\n        uint128[] memory priceFeedPrecision_\\n    ) external;\\n\\n    function removeTokens(address[] memory t) external;\\n\\n    function usdPricePrecision() external returns (uint128);\\n    \\n    function changeUsdPrecision(uint128 p) external;\\n\\n    function acceptedTokens(address token)\\n        external view\\n        returns (\\n            string memory symbol,\\n            uint128 decimals,\\n            address tokenAddress,\\n            bool accepted,\\n            bool isChainLinkFeed,\\n            address priceFeedAddress,\\n            uint128 priceFeedPrecision\\n        );\\n    function isAcceptedToken(address token) external returns (bool);\\n\\n    function isManager(address user) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ninterface IStaking {\\n    function getEpochId(uint256 timestamp) external view returns (uint256); // get epoch id\\n\\n    function getEpochUserBalance(\\n        address user,\\n        address token,\\n        uint128 epoch\\n    ) external view returns (uint256);\\n\\n    function getEpochPoolSize(address token, uint128 epoch)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function depositFor(\\n        address tokenAddress,\\n        address userAddress,\\n        uint256 amount\\n    ) external;\\n\\n    function epoch1Start() external view returns (uint256);\\n\\n    function epochDuration() external view returns (uint256);\\n\\n    function balanceOf(address user, address token)\\n        external\\n        view\\n        returns (uint256);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ERC2771Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"./../interfaces/ISubscriptionData.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771Context is Context {\\n    address private _trustedForwarder;\\n    event ChangeTrustedForwarder(address indexed trustedForwarder);\\n    ISubscriptionData public subscriptionData;\\n\\n    constructor(address trustedForwarder, address _data) {\\n        _trustedForwarder = trustedForwarder;\\n        subscriptionData = ISubscriptionData(_data);\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n\\n    function setTrustedForwarder(address forwarder) public virtual {\\n        require(forwarder != address(0), \\\"Forwarder cannot be zero address\\\");\\n        require(subscriptionData.isManager(msg.sender), \\\"Only manager can call this function\\\");\\n        _trustedForwarder = forwarder;\\n        emit ChangeTrustedForwarder(forwarder);\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDiaOracle.sol\": {\r\n      \"content\": \"\\n//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IDiaOracle {\\n\\tfunction setValue(string memory key, uint128 value, uint128 timestamp) external;\\n\\n\\tfunction updateOracleUpdaterAddress(address newOracleUpdaterAddress) external;\\n    \\n\\tfunction getValue(string memory key) external view returns (uint128, uint128);\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeStampGap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_company\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_data\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"ChangeTrustedForwarder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_company\",\"type\":\"address\"}],\"name\":\"CompanyPendingSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_company\",\"type\":\"address\"}],\"name\":\"CompanySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CompanyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_dataContract\",\"type\":\"address\"}],\"name\":\"DataContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"DepositStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"TreasurySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"UserCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"UserDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"WithdrawalStatusChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingCompany\",\"type\":\"address\"}],\"name\":\"approveSetCompany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeDepositStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeWithdrawalStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"_parameters\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"chargeUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"company\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"companyRevenue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"companyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"}],\"name\":\"getTotalCharges\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"}],\"name\":\"getTotalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"}],\"name\":\"getTotalWithdraws\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getUserData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct SubscriptionDePay.UserData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseWithdrawal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingCompany\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_company\",\"type\":\"address\"}],\"name\":\"setCompany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionData\",\"outputs\":[{\"internalType\":\"contract ISubscriptionData\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeStampGap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalCharges\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalWithdraws\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"d\",\"type\":\"address\"}],\"name\":\"updateDataContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeStampGap\",\"type\":\"uint256\"}],\"name\":\"updateTimeStampGap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"userDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"userWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SubscriptionDePay", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000001518000000000000000000000000055d4e9d19d7ae8e12a747c0ccb392d12d13d5b3b000000000000000000000000d0bd2a6bb8b9a0bc4474e6c50c591ea435bcb347000000000000000000000000cf5f08686dbe94b88b93fb2e8e5482a7f432c892000000000000000000000000f0511f123164602042ab2bcf02111fa5d3fe97cd", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}