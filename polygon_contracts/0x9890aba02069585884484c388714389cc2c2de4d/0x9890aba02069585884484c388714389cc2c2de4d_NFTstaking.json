{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.13;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns(uint256);\r\n\r\n    function balanceOf(address account) external view returns(uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n    external\r\n    returns(bool);\r\n\r\n    function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns(uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns(bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns(bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    function burnFrom(address user, uint256 amount) external;\r\n\r\n    function mint(address user, uint256 amount) external;\r\n}\r\n\r\ninterface IERC165 {\r\n\r\n    function supportsInterface(bytes4 interfaceId) external view returns(bool);\r\n}\r\n\r\ninterface Ireciept is IERC165 {\r\n\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    function balanceOf(address account, uint256 id) external view returns(uint256);\r\n\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n    external\r\n    view\r\n    returns(uint256[] memory);\r\n\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    function isApprovedForAll(address account, address operator) external view returns(bool);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function mint(address _to, uint _id, uint _amount) external;\r\n\r\n    function mintBatch(address _to, uint[] memory _ids, uint[] memory _amounts) external;\r\n\r\n    function burn(uint _id, uint _amount) external;\r\n\r\n    function burnFrom(address user, uint _id, uint _amount) external;\r\n\r\n    function burnBatch(uint[] memory _ids, uint[] memory _amounts) external;\r\n\r\n    function burnFromBatch(address user, uint[] memory _ids, uint[] memory _amounts) external;\r\n\r\n    function burnForMint(address _from, uint[] memory _burnIds, uint[] memory _burnAmounts, uint[] memory _mintIds, uint[] memory _mintAmounts) external;\r\n\r\n    function setURI(uint _id, string memory _uri) external;\r\n}\r\n\r\ninterface IshipBase is IERC165 {\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    function balanceOf(address owner) external view returns(uint256 balance);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns(address owner);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    function getApproved(uint256 tokenId) external view returns(address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    function isApprovedForAll(address owner, address operator) external view returns(bool);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function mint(\r\n        address _to,\r\n        string memory tokenURI_\r\n    ) external;\r\n\r\n    function burn(uint256 ID) external;\r\n\r\n    function postSetTokenURI(uint256 tokenId, string memory _tokenURI) external;\r\n\r\n    function tokenURI(uint256 tokenId) external view returns(string memory);\r\n}\r\n\r\ninterface IshipDB {\r\n    function pushSpeed(uint256 shipnum, uint256 newSpeed) external;\r\n\r\n    function pushStrength(uint256 shipnum, uint256 newStrength) external;\r\n\r\n    function pushAttack(uint256 shipnum, uint256 newAttack) external;\r\n\r\n    function pushID(uint256 shipnum) external;\r\n\r\n    function pushFuel(uint256 shipnum, uint256 newFuel) external;\r\n\r\n    function pushClass(uint256 shipnum, uint256 newClass) external;\r\n\r\n    function pushAll(uint256 shipnum, uint256 newSpeed, uint256 newStrength, uint256 newAttack, uint256 newFuel, uint256 newClass) external;\r\n\r\n    function getSpeed(uint256 shipnum) external view returns(uint256);\r\n\r\n    function getStrength(uint256 shipnum) external view returns(uint256);\r\n\r\n    function getAttack(uint256 shipnum) external view returns(uint256);\r\n\r\n    function getID(uint256 shipnum) external view returns(uint256);\r\n\r\n    function getFuel(uint256 shipnum) external view returns(uint256);\r\n\r\n    function getClass(uint256 shipnum) external view returns(uint256);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns(address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns(bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns(address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract NFTstaking is Ownable {\r\n    address public fuel = 0x0edb04e937E66D34e33f3DB7795B2C4413eC1798;\r\n    address public avatar = 0x8A514A40eD06fc44B6E0C9875cDd58e20063d10e;\r\n    address public shipBase = 0x2dE932AAF7C5b091AA36fBC75aF787B4aBd096Cf;\r\n    address public shipDB = 0x76679fB89599682620D1D130B00216ac50E0F914;\r\n    address public avatarReciept = 0x51016911D662Fe2f16b7274E68D7aebd31b77891;\r\n    address public shipReciept = 0xE968BD0543228694B9bcB74bFe33467d5FE0C53E;\r\n    IERC20 fl = IERC20(fuel);\r\n    IshipBase sb = IshipBase(shipBase);\r\n    IshipBase av = IshipBase(avatar);\r\n    Ireciept sr = Ireciept(shipReciept);\r\n    Ireciept ar = Ireciept(avatarReciept);\r\n    IshipDB db = IshipDB(shipDB);\r\n\r\n    uint256 public avatarDaily = 25;\r\n    uint256 public class1Daily = 10;\r\n    uint256 public class2Daily = 20;\r\n    uint256 public class3Daily = 30;\r\n    uint256 private stamp = 60 * 60 * 24;\r\n    bool public emergencyClaim = false;\r\n    bool public systemOn = true;\r\n\r\n    struct Spaceship {\r\n        address staker;\r\n        uint256 id;\r\n        uint256 time;\r\n    }\r\n\r\n    mapping(uint256 => Spaceship) spaceships;\r\n\r\n    struct Avatar {\r\n        address staker;\r\n        uint256 id;\r\n        uint256 time;\r\n    }\r\n\r\n    mapping(uint256 => Avatar) avatars;\r\n\r\n    function stakeShip(uint256 ID) external {\r\n        require(systemOn == true);\r\n        require(emergencyClaim == false);\r\n        require(sb.ownerOf(ID) == msg.sender);\r\n        sb.transferFrom(msg.sender, address(this), ID);\r\n        pushShip(msg.sender, ID, block.timestamp);\r\n        sr.mint(msg.sender, ID, 1);\r\n    }\r\n\r\n    function unstakeShip(uint256 ID) external {\r\n        if(emergencyClaim == false){\r\n        require(block.timestamp >= getShipTime(ID) + 5 days);\r\n        }\r\n        sr.burnFrom(msg.sender, ID, 1);\r\n        sb.transferFrom(address(this), msg.sender, ID);\r\n        fl.mint(msg.sender, calculateShipPay(ID) * 1e18);\r\n        pushShip(0x0000000000000000000000000000000000000000, ID, 0);\r\n    }\r\n\r\n    function stakeAvatar(uint256 ID) external {\r\n        require(systemOn == true);\r\n        require(emergencyClaim == false);\r\n        require(av.ownerOf(ID) == msg.sender);\r\n        av.transferFrom(msg.sender, address(this), ID);\r\n        pushAvatar(msg.sender, ID, block.timestamp);\r\n        ar.mint(msg.sender, ID, 1);\r\n    }\r\n\r\n    function unstakeAvatar(uint256 ID) external {\r\n        if(emergencyClaim == false){\r\n        require(block.timestamp >= getAvTime(ID) + 5 days);\r\n        }\r\n        ar.burnFrom(msg.sender, ID, 1);\r\n        av.transferFrom(address(this), msg.sender, ID);\r\n        fl.mint(msg.sender, calculateAvatarPay(ID) * 1e18);\r\n        pushAvatar(0x0000000000000000000000000000000000000000, ID, 0);\r\n    }\r\n\r\n    function pushAvatar(address setstaker, uint256 setID, uint256 settime) internal {\r\n        avatars[setID].staker = setstaker;\r\n        avatars[setID].id = setID;\r\n        avatars[setID].time = settime;\r\n    }\r\n\r\n    function pushShip(address setstaker, uint256 setID, uint256 settime) internal {\r\n        spaceships[setID].staker = setstaker;\r\n        spaceships[setID].id = setID;\r\n        spaceships[setID].time = settime;\r\n    }\r\n\r\n    function calculateShipPay(uint256 ID) public view returns(uint256 shipPay) {\r\n        if (db.getClass(ID) == 1) {\r\n            shipPay = (class1Daily * (block.timestamp - spaceships[ID].time)) / stamp;\r\n        }\r\n        if (db.getClass(ID) == 2) {\r\n            shipPay = (class2Daily * (block.timestamp - spaceships[ID].time)) / stamp;\r\n        }\r\n        if (db.getClass(ID) == 3) {\r\n            shipPay = (class3Daily * (block.timestamp - spaceships[ID].time)) / stamp;\r\n        }\r\n    }\r\n\r\n    function calculateAvatarPay(uint256 ID) public view returns(uint256) {\r\n        return (avatarDaily * (block.timestamp - avatars[ID].time)) / stamp;\r\n    }\r\n\r\n    function isShipStaked(uint256 ID) public view returns (bool shipIsStaked) {\r\n        if(spaceships[ID].time == 0) {\r\n            shipIsStaked = false;\r\n        } else  {\r\n            shipIsStaked = true;\r\n        }\r\n    }\r\n\r\n    function isAvatarStaked(uint256 ID) public view returns (bool avatarIsStaked) {\r\n        if(avatars[ID].time == 0) {\r\n            avatarIsStaked = false;\r\n        } else {\r\n            avatarIsStaked = true;\r\n        }\r\n    }\r\n\r\n    function getShipTime(uint256 ID) internal view returns(uint256) {\r\n        return spaceships[ID].time;\r\n    }\r\n\r\n    function getAvTime(uint256 ID) internal view returns(uint256) {\r\n        return avatars[ID].time;\r\n    }\r\n\r\n    function setFuelAddr(address newFuel) external onlyOwner {\r\n        fuel = newFuel;\r\n    }\r\n\r\n    function setAvAddr(address newAv) external onlyOwner {\r\n        avatar = newAv;\r\n    }\r\n\r\n    function setShipBase(address newBase) external onlyOwner {\r\n        shipBase = newBase;\r\n    }\r\n\r\n    function setDB(address newDB) external onlyOwner {\r\n        shipDB = newDB;\r\n    }\r\n\r\n    function setAvRec(address newAvRec) external onlyOwner {\r\n        avatarReciept = newAvRec;\r\n    }\r\n\r\n    function setShipRec(address newShipRec) external onlyOwner {\r\n        shipReciept = newShipRec;\r\n    }\r\n\r\n    function setAvPay(uint256 value) external onlyOwner {\r\n        avatarDaily = value;\r\n    }\r\n\r\n    function setC1Pay(uint256 value) external onlyOwner {\r\n        class1Daily = value;\r\n    }\r\n\r\n    function setC2Pay(uint256 value) external onlyOwner {\r\n        class2Daily = value;\r\n    }\r\n\r\n    function setC3Pay(uint256 value) external onlyOwner {\r\n        class3Daily = value;\r\n    }\r\n\r\n    function setEmerStatus(bool isEmer) external onlyOwner {\r\n        emergencyClaim = isEmer;\r\n    }\r\n\r\n    function systemPower() external onlyOwner {\r\n    if(systemOn == false){systemOn = true;}\r\n    if(systemOn == true){systemOn = false;}\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"avatar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avatarDaily\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avatarReciept\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"}],\"name\":\"calculateAvatarPay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"}],\"name\":\"calculateShipPay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shipPay\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"class1Daily\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"class2Daily\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"class3Daily\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fuel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"}],\"name\":\"isAvatarStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"avatarIsStaked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"}],\"name\":\"isShipStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"shipIsStaked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAv\",\"type\":\"address\"}],\"name\":\"setAvAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setAvPay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAvRec\",\"type\":\"address\"}],\"name\":\"setAvRec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setC1Pay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setC2Pay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setC3Pay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDB\",\"type\":\"address\"}],\"name\":\"setDB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isEmer\",\"type\":\"bool\"}],\"name\":\"setEmerStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFuel\",\"type\":\"address\"}],\"name\":\"setFuelAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBase\",\"type\":\"address\"}],\"name\":\"setShipBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newShipRec\",\"type\":\"address\"}],\"name\":\"setShipRec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shipBase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shipDB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shipReciept\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"}],\"name\":\"stakeAvatar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"}],\"name\":\"stakeShip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"systemOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"systemPower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"}],\"name\":\"unstakeAvatar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"}],\"name\":\"unstakeShip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NFTstaking", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6b2766722f412cab637082872d3e0fea4b2eefd30397e2d16ab1c75790e2514c"}