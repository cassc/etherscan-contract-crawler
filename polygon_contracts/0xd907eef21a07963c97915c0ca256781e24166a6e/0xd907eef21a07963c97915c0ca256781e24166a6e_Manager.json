{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/eip/2535/interfaces/IDiamond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\ninterface IDiamond {\\r\\n    struct FacetCut{\\r\\n        address  facetAddress;\\r\\n        bytes4[] addSelectors;\\r\\n        bytes4[] removeSelectors;   \\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/eip/2535/interfaces/IDiamondCut.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport { IDiamond } from \\\"./IDiamond.sol\\\";\\r\\n\\r\\ninterface IDiamondCut is IDiamond {    \\r\\n    function diamondCut(\\r\\n        FacetCut[] calldata _diamondCut,\\r\\n        address _init,\\r\\n        bytes memory _calldata\\r\\n    ) external;    \\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/eip/2535/interfaces/IDiamondLoupe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\ninterface IDiamondLoupe {\\r\\n    struct Facet {\\r\\n        address facetAddress;\\r\\n        bytes4[] functionSelectors;\\r\\n    }\\r\\n\\r\\n\\r\\n    function facets() external view returns (Facet[] memory facets_);\\r\\n\\r\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\r\\n\\r\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\r\\n\\r\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/internal/ILendFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\ninterface ILendFacet{\\r\\n     enum CollateralNftType{\\r\\n         UnUsed,\\r\\n         UniswapV3\\r\\n     }\\r\\n\\r\\n     struct LendInfo{\\r\\n        uint256 orderId;\\r\\n        address loaner;\\r\\n        address debtor;\\r\\n        address recipient;\\r\\n        /**\\r\\n          if collateralAssetType==0  collateralAsset is Token\\r\\n          if collateralAssetType==1  collateralAsset  is nft\\r\\n         */\\r\\n        address collateralAsset;\\r\\n        /**\\r\\n          if collateralAssetType==0  collateralAmount is Token amount\\r\\n          if collateralAssetType==1  collateralAsset  is liquidity\\r\\n         */\\r\\n        uint256 collateralAmount;\\r\\n        address borrowAsset;\\r\\n        uint256 borrowMinAmount;\\r\\n        uint256 borrowAmount;\\r\\n        uint256 maturity;\\r\\n        uint256 platformFee;\\r\\n        uint256 index;\\r\\n        uint256 collateralAssetType;\\r\\n        uint256 collateralNftId;\\r\\n    }\\r\\n    struct StakeInfo{\\r\\n        uint256 orderId;\\r\\n        address borrower;\\r\\n        address lender;\\r\\n        address recipient;\\r\\n        address borrowAsset;\\r\\n        uint256 borrowAmount;\\r\\n        address lendAsset;\\r\\n        uint256 payNowAmount;\\r\\n        uint256 payNowMinAmount;\\r\\n        uint256 interestAmount;\\r\\n        uint256 payLaterMinAmount;\\r\\n        uint256 payLaterAmount;\\r\\n        uint256 maturity;\\r\\n        uint256 platformFee;\\r\\n        uint256 index; \\r\\n        uint256 borrowAssetType;\\r\\n        uint256 borrowNftId;\\r\\n    }\\r\\n    event SetCollateralNft(address _nft,CollateralNftType _type);\\r\\n    event SetLendFeePlatformRecipient(address _recipient);\\r\\n    event SetDomainHash(bytes32 _domainHash);\\r\\n\\r\\n\\r\\n    function setDebtorLendInfo(address _debtor,LendInfo memory _lendInfo) external;\\r\\n    function deleteDebtorLendInfo(address _debtor) external;\\r\\n    function getDebtorLendInfo(address _debtor) external view returns(LendInfo memory);\\r\\n\\r\\n    function setLoanerLendInfo(address _loaner,address _debtor) external;\\r\\n    function getLoanerLendInfo(address _loaner) external view returns(address[] memory);\\r\\n    function getLoanerLendInfoLength(address _loaner) external view returns(uint256);\\r\\n    function deleteLoanerLendInfo(address _loaner,uint256 _index) external;\\r\\n    function setDebtorLendInfoNftInfo(address _debtor,uint256 _collateralNftId,uint256 _newLiquidity) external;\\r\\n\\r\\n\\r\\n    function setDomainHash(bytes32 _domainHash) external;\\r\\n    function getDomainHash() external view returns(bytes32);\\r\\n    function setLendFeePlatformRecipient(address _lendFeePlatformRecipient) external;\\r\\n    function getLendFeePlatformRecipient() external view returns(address);\\r\\n\\r\\n    //-----\\r\\n    function setBorrowerStakeInfo(address _borrower,StakeInfo memory _stakeInfo) external;\\r\\n    function deleteBorrowerStakeInfo(address _borrower) external;\\r\\n    function getBorrowerStakeInfo(address _borrower) external view returns(StakeInfo memory);\\r\\n    function setLenderStakeInfo(address _lender,address _borrower) external;\\r\\n    function getBorrowers(address _lender) external view returns(address[] memory);\\r\\n    function getBorrowersLength(address _lender) external view returns(uint256);\\r\\n    function deleteBorrowerStakeInfo(address _lender,uint256 _index) external;\\r\\n    function setBorrowerStakeInfoNftInfo(address _borrower,uint256 _borrowNftId,uint256 _newLiquidity) external;\\r\\n\\r\\n    //----\\r\\n    function setCollateralNft(address _nft,CollateralNftType _type) external;\\r\\n    function getCollateralNft(address _nft) external view returns(CollateralNftType);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/internal/IOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\ninterface IOwnable{\\r\\n    function owner() external view returns(address);\\r\\n    function transferOwnership(address _newOwner) external;\\r\\n    function setDBControlWhitelist(address[] memory _modules,bool[] memory _status)  external;\\r\\n    function getDBControlWhitelist(address _module) external view returns(bool);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/internal/IPaymasterFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\ninterface IPaymasterFacet{\\r\\n    struct DepositInfo{\\r\\n        address wallet;\\r\\n        string protocol;\\r\\n        uint256 positionType;\\r\\n        address sendAsset; \\r\\n        address receiveAsset;  \\r\\n        uint256 adapterType;  \\r\\n        uint256 amountIn;\\r\\n        uint256 amountLimit;\\r\\n        uint256 approveAmount;\\r\\n        bytes adapterData;  \\r\\n    }\\r\\n    function setWalletPaymasterBalance(address _wallet,uint256 _amount,bool _type) external;\\r\\n    function getWalletPaymasterBalance(address _wallet) external view returns(uint256);\\r\\n    function setPayer(address _payer) external;\\r\\n    function getPayer() external view returns(address);\\r\\n    function setQuotaWhiteList(address _target,uint256 _amount,bool _type) external;\\r\\n    function getQuota(address _target) external view returns(uint256);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/internal/IPlatformFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\ninterface IPlatformFacet{\\r\\n    struct ProtocolAndA{\\r\\n        address addr;\\r\\n        address module;\\r\\n        string  protocol;      \\r\\n    }\\r\\n    event SetModules(address[]  _modules,bool[]  _status);\\r\\n    event SetProtocols(address _module,string[]  _protocols,address[]  _protocolAddrs);\\r\\n    event SetTokens(address[]  _tokens,uint256[]  _tokenTypes);\\r\\n    event AddWalletToVault(address _wallet,address _vault,uint256 _salt);\\r\\n    event RemoveWalletToVault(address _wallet,address[]  _vaults);\\r\\n    event SetWeth(address _weth);\\r\\n    event SetEth(address _eth);\\r\\n    event SetVaultImplementation(address _implementation);\\r\\n    event SetProxyCodeHash(address _proxy,bool _option);\\r\\n\\r\\n    function setModules(address[] memory _modules,bool[] memory _status)  external;\\r\\n    function getAllModules()  external view returns(address[] memory);\\r\\n    function getModuleStatus(address _module) external view returns(bool);   \\r\\n\\r\\n\\r\\n    function setProtocols(address _module,string[] memory _protocols,address[] memory _protocolAddrs) external;\\r\\n    function getProtocols()  external view returns(ProtocolAndA[] memory);\\r\\n    function getModuleToProtocolA(address _module,string memory _protocol) external view returns(address);\\r\\n\\r\\n\\r\\n    function setTokens(address[] memory _tokens,uint256[] memory _tokenTypes)  external;\\r\\n    function getTokens()  external view returns(address[] memory);  \\r\\n    function getTokenType(address _token) external view returns(uint256);\\r\\n\\r\\n\\r\\n    function addWalletToVault(address _wallet,address _vault,uint256 _salt) external;\\r\\n    function removeWalletToVault(address _wallet,address[] memory _vaults) external;\\r\\n    function getAllVaultByWallet(address _wallet) external view returns(address[] memory);\\r\\n    function getVaultToSalt(address _vault) external view returns(uint256);\\r\\n    function getIsVault(address _vault) external view returns(bool);\\r\\n\\r\\n    function setWeth(address _weth) external;\\r\\n    function getWeth() external view returns(address);\\r\\n\\r\\n    function setEth(address _eth) external;\\r\\n    function getEth() external view returns(address);\\r\\n\\r\\n    function getVaultImplementation() external view returns(address);\\r\\n    function setVaultImplementation(address _implementation) external; \\r\\n    function setProxyCodeHash(address _proxy,bool _option) external;  \\r\\n    function getProxyCodeHash(address _proxy) external view returns(bool);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/internal/IVaultFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\ninterface IVaultFacet{\\r\\n      struct Position{  \\r\\n           uint16  positionType;  //1 normal 2 aave asset 3 compound asset 4gmx  asset  5 lido asset  6 nft asset\\r\\n           uint16  debtType;   // 0 normal    1  debt           \\r\\n           uint16 ableUse;   // 0 unused   1 used\\r\\n           address component; \\r\\n           uint256 balance;\\r\\n           bytes data; \\r\\n      }\\r\\n     event SetVaultType(address _vault,uint256 _vaultType);\\r\\n     event SetSourceType(address _vault,uint256 _sourceType);\\r\\n     event SetVaultMasterToken(address _vault,address _masterToken);\\r\\n     event SetVaultLock(address _vault,bool _lock);\\r\\n     event SetVaultTime(address _vault,uint256 _time);\\r\\n     event SetVaultModules(address _vault,address[]  _modules,bool[]  _status);\\r\\n     event SetVaultTokens(address _vault,address[] _tokens,uint256[]  _types);\\r\\n     event SetVaultProtocol(address _vault,address[]  _protocols,bool[]  _status);\\r\\n     event SetVaultPosition(address _vault,address _component,uint16[3]  _append);\\r\\n     event SetVaultPositionData(address _vault,address _component,uint256 _positionType,bytes  _data);\\r\\n     event SetVaultPositionBalance(address _vault,address _component,uint256 _positionType,uint256 _balance);  \\r\\n    \\r\\n     event SetFuncWhiteList(address _vault,bytes4 _func,bool _type);\\r\\n     event SetFuncBlackList(address _vault,bytes4 _func,bool _type);\\r\\n\\r\\n\\r\\n\\r\\n     function setVaultType(address _vault,uint256 _vaultType) external;\\r\\n     function getVaultType(address _vault) external view returns(uint256);\\r\\n     function setSourceType(address _vault,uint256 _sourceType) external;\\r\\n     function getSourceType(address _vault) external view returns(uint256);\\r\\n     \\r\\n     function setVaultMasterToken(address _vault,address _masterToken) external;\\r\\n     function getVaultMasterToken(address _vault) external view returns(address);\\r\\n     \\r\\n     function setVaultLock(address _vault,bool _lock) external;\\r\\n     function getVaultLock(address _vault) external view returns(bool);\\r\\n     function setVaultTime(address _vault,uint256 _time) external;\\r\\n     function getVaulTime(address _vault) external view returns(uint256);\\r\\n\\r\\n\\r\\n     function setVaultModules(address _vault,address[] memory _modules,bool[] memory _status) external; \\r\\n     function getVaultAllModules(address _vault) external view returns(address[] memory);\\r\\n     function getVaultModuleStatus(address _vault,address _module) external view returns(bool);\\r\\n\\r\\n     function setVaultTokens(address _vault,address[] memory _tokens,uint256[] memory _status) external;\\r\\n     function getVaultAllTokens(address _vault) external view returns(address[] memory);\\r\\n     function getVaultTokenType(address _vault,address _token) external view returns(uint256);\\r\\n\\r\\n     function setVaultProtocol(address _vault,address[] memory _protocols,bool[] memory _status) external;\\r\\n     function getVaultAllProtocol(address _vault) external view returns(address[] memory);\\r\\n     function getVaultProtocolStatus(address _vault,address  _protocol) external view returns(bool);\\r\\n\\r\\n     function setVaultPosition(address _vault,address _component,uint16[3] memory _append) external;\\r\\n     function setVaultPositionData(address _vault,address _component,uint256 _positionType,bytes memory _data) external;\\r\\n     function getVaultAllPosition(address _vault,uint16[] memory _positionTypes) external view returns(Position[] memory positions);\\r\\n     function getVaultProtocolPosition(address _vault,uint16 _positionType) external view returns(Position[] memory positions);\\r\\n     function getVaultPosition(address _vault,address _component, uint256 _positionType) external view returns(Position memory position);\\r\\n    \\r\\n     function setFuncWhiteList(address _vault,bytes4 _func,bool _type) external;\\r\\n     function getFuncWhiteList(address _vault,bytes4 _func) external view returns(bool);\\r\\n     function setFuncBlackList(address _vault,bytes4 _func,bool _type) external;\\r\\n     function getFuncBlackList(address _vault,bytes4 _func) external view returns(bool);\\r\\n}\"\r\n    },\r\n    \"contracts/Manager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport  \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport {IOwnable} from \\\"./interfaces/internal/IOwnable.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport {IVaultFacet} from \\\"./interfaces/internal/IVaultFacet.sol\\\";\\r\\nimport {IPlatformFacet} from \\\"./interfaces/internal/IPlatformFacet.sol\\\";\\r\\nimport {ILendFacet} from \\\"./interfaces/internal/ILendFacet.sol\\\";\\r\\nimport {IDiamondLoupe} from \\\"./eip/2535/interfaces/IDiamondLoupe.sol\\\";\\r\\nimport {IDiamondCut} from \\\"./eip/2535/interfaces/IDiamondCut.sol\\\";\\r\\nimport {IDiamond} from \\\"./eip/2535/interfaces/IDiamond.sol\\\";\\r\\nimport {IPaymasterFacet} from \\\"./interfaces/internal/IPaymasterFacet.sol\\\";\\r\\ncontract Manager is  Initializable, UUPSUpgradeable, ReentrancyGuardUpgradeable{\\r\\n    address public diamond; \\r\\n    event TransferOwnership(address _newOwner);\\r\\n    modifier onlyOwner() {\\r\\n        require(\\r\\n            msg.sender == IOwnable(diamond).owner(),\\r\\n            \\\"Quoter:only owner\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    function initialize(address _diamond) public initializer {\\r\\n        __UUPSUpgradeable_init();\\r\\n        diamond=_diamond;\\r\\n    }\\r\\n\\r\\n    function _authorizeUpgrade(\\r\\n        address newImplementation\\r\\n    ) internal override onlyOwner {}\\r\\n    //-----------write--------------------\\r\\n    function setPayer(address _payer) external onlyOwner{\\r\\n       IPaymasterFacet(diamond).setPayer(_payer);\\r\\n    }\\r\\n    function setWethAndEth(address _weth,address _eth) external onlyOwner{\\r\\n       IPlatformFacet(diamond).setWeth(_weth);\\r\\n       IPlatformFacet(diamond).setEth(_eth);   \\r\\n    }\\r\\n\\r\\n    function setModules(address[] memory _modules,bool[] memory _status) external onlyOwner{\\r\\n       IPlatformFacet(diamond).setModules(_modules, _status);\\r\\n    }\\r\\n\\r\\n\\r\\n   function setProtocols(address _module,string[] memory _protocols,address[] memory _protocolAddrs) external onlyOwner{\\r\\n        IPlatformFacet(diamond).setProtocols(_module, _protocols,_protocolAddrs);\\r\\n   } \\r\\n\\r\\n   function setTokens(address[] memory _tokens,uint256[] memory _tokenTypes) external onlyOwner{\\r\\n        IPlatformFacet(diamond).setTokens(_tokens, _tokenTypes);\\r\\n   }\\r\\n\\r\\n   function setDBControlWhitelist(address[] memory _modules,bool[] memory _status) external onlyOwner{\\r\\n        IOwnable(diamond).setDBControlWhitelist(_modules,_status);\\r\\n   }\\r\\n\\r\\n   function transferOwnership(address _newOwner) external onlyOwner{\\r\\n        require(_newOwner != address(0),\\\"invalid address\\\");\\r\\n        IOwnable(diamond).transferOwnership(_newOwner);\\r\\n        emit TransferOwnership(_newOwner);\\r\\n   }\\r\\n   function getSelector(string memory _func) internal pure returns(bytes4){\\r\\n         return bytes4(keccak256(bytes(_func)));\\r\\n   }\\r\\n\\r\\n   function diamondCut(address _facetAddress,string[] memory _addSelectors,string[] memory _removeSelectors,address _init,bytes memory _calldata)  external onlyOwner{  \\r\\n         bytes4[] memory addSelectors=new  bytes4[](_addSelectors.length);\\r\\n         bytes4[] memory removeSelectors=new  bytes4[](_removeSelectors.length);\\r\\n         for(uint i;i<_addSelectors.length;i++){\\r\\n             addSelectors[i]=getSelector(_addSelectors[i]);\\r\\n         }\\r\\n         for(uint i;i<_removeSelectors.length;i++){\\r\\n             removeSelectors[i]=getSelector(_removeSelectors[i]);\\r\\n         }\\r\\n         IDiamond.FacetCut[] memory  _diamondCut=new IDiamond.FacetCut[](1);   \\r\\n         _diamondCut[0]= IDiamond.FacetCut({\\r\\n             facetAddress:_facetAddress,\\r\\n             addSelectors:addSelectors,\\r\\n             removeSelectors:removeSelectors\\r\\n         }); \\r\\n         IDiamondCut(diamond).diamondCut(_diamondCut, _init, _calldata);\\r\\n   }\\r\\n\\r\\n   function deleteFacetAllSelector(address _facetAddress) external onlyOwner{\\r\\n       bytes4[] memory removeSelectors=IDiamondLoupe(diamond).facetFunctionSelectors(_facetAddress);\\r\\n       require(removeSelectors.length >0,\\\"facetAddress not exist\\\");\\r\\n       bytes4[] memory addSelectors=new  bytes4[](0);\\r\\n       IDiamond.FacetCut[] memory  _diamondCut=new IDiamond.FacetCut[](1);   \\r\\n         _diamondCut[0]= IDiamond.FacetCut({\\r\\n             facetAddress:_facetAddress,\\r\\n             addSelectors:addSelectors,\\r\\n             removeSelectors:removeSelectors\\r\\n         }); \\r\\n         IDiamondCut(diamond).diamondCut(_diamondCut, address(0),new bytes(0));\\r\\n    }\\r\\n   \\r\\n     function setFuncWhiteList(address _vault,bytes4 _func,bool _type) external onlyOwner{\\r\\n         IVaultFacet(diamond).setFuncWhiteList(_vault,_func,_type);   \\r\\n     }\\r\\n     function setFuncBlackList(address _vault,bytes4 _func,bool _type) external onlyOwner{\\r\\n         IVaultFacet(diamond).setFuncBlackList(_vault,_func,_type);\\r\\n     }\\r\\n    //--------------view---------------------\\r\\n\\r\\n    function multiCall(\\r\\n        address[] calldata targets,\\r\\n        bytes[] calldata data\\r\\n    ) external view returns (bytes[] memory) {\\r\\n        require(targets.length == data.length, \\\"target length != data length\\\");\\r\\n\\r\\n        bytes[] memory results = new bytes[](data.length);\\r\\n\\r\\n        for (uint i; i < targets.length; i++) {\\r\\n            (bool success, bytes memory result) = targets[i].staticcall(data[i]);\\r\\n            require(success, \\\"call failed\\\");\\r\\n            results[i] = result;\\r\\n        }\\r\\n        return results;\\r\\n    }\\r\\n\\r\\n\\r\\n    function facets() external view returns (IDiamondLoupe.Facet[] memory facets_){\\r\\n         return IDiamondLoupe(diamond).facets();\\r\\n     }  \\r\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_){\\r\\n         return IDiamondLoupe(diamond).facetFunctionSelectors(_facet);\\r\\n    }\\r\\n\\r\\n    function facetAddresses() external view returns (address[] memory facetAddresses_){\\r\\n         return IDiamondLoupe(diamond).facetAddresses();\\r\\n    }\\r\\n\\r\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_){\\r\\n         return IDiamondLoupe(diamond).facetAddress(_functionSelector);\\r\\n    }\\r\\n\\r\\n     function getDBControlWhitelist(address _module) external view returns(bool){\\r\\n         return  IOwnable(diamond).getDBControlWhitelist(_module);\\r\\n     }\\r\\n    //-----------\\r\\n    function getVaultAllPosition(address _vault,uint16[] memory _positionTypes) external view returns(IVaultFacet.Position[] memory positions,uint256[] memory amounts,uint256[] memory decimals){\\r\\n             positions=IVaultFacet(diamond).getVaultAllPosition(_vault,_positionTypes);\\r\\n             amounts=new uint256[](positions.length);\\r\\n             decimals=new uint256[](positions.length);\\r\\n             for(uint256 i;i<positions.length;i++){\\r\\n                 if(positions[i].component == IPlatformFacet(diamond).getEth()){\\r\\n                   amounts[i]=_vault.balance;\\r\\n                   decimals[i]=18;\\r\\n                 }else{\\r\\n                     amounts[i]=IERC20(positions[i].component).balanceOf(_vault);\\r\\n                     if(_positionTypes[i] !=6){\\r\\n                          decimals[i]=IERC20Metadata(positions[i].component).decimals();\\r\\n                     }   \\r\\n                 }\\r\\n                \\r\\n             }\\r\\n\\r\\n    }\\r\\n    function getVaultProtocolPosition(address _vault,uint16 _positionType) external view returns(IVaultFacet.Position[] memory positions,uint256[] memory amounts,uint256[] memory decimals){\\r\\n             positions=IVaultFacet(diamond).getVaultProtocolPosition(_vault,_positionType);\\r\\n             amounts=new uint256[](positions.length);\\r\\n             decimals=new uint256[](positions.length);\\r\\n             for(uint256 i;i<positions.length;i++){\\r\\n                 if(positions[i].component == IPlatformFacet(diamond).getEth()){\\r\\n                    amounts[i]=_vault.balance;\\r\\n                    decimals[i]=18;\\r\\n                 }else{\\r\\n                      amounts[i]=IERC20(positions[i].component).balanceOf(_vault);\\r\\n                      if(_positionType!=6){\\r\\n                          decimals[i]=IERC20Metadata(positions[i].component).decimals();\\r\\n                      }  \\r\\n                 }\\r\\n             }\\r\\n    }\\r\\n    function setCollateralNft(address _nft,ILendFacet.CollateralNftType _type) external onlyOwner{\\r\\n        ILendFacet(diamond).setCollateralNft(_nft,_type);\\r\\n    }  \\r\\n    //---------------\\r\\n    function getVaultMasterToken(address _vault) external view returns(address){\\r\\n        return IVaultFacet(diamond).getVaultMasterToken(_vault);\\r\\n    }  \\r\\n    function getVaultLock(address _vault) external view returns(bool){\\r\\n         return IVaultFacet(diamond).getVaultLock(_vault);\\r\\n    }\\r\\n \\r\\n    function getVaulTime(address _vault) external view returns(uint256){\\r\\n         return IVaultFacet(diamond).getVaulTime(_vault);\\r\\n    }   \\r\\n    function getVaultAllModules(address _vault) external view returns(address[] memory){\\r\\n         return IVaultFacet(diamond).getVaultAllModules(_vault);\\r\\n    }\\r\\n    function getVaultModuleStatus(address _vault,address _module) external view returns(bool){\\r\\n         return IVaultFacet(diamond).getVaultModuleStatus(_vault,_module);\\r\\n    }\\r\\n    function getVaultAllTokens(address _vault) external view returns(address[] memory){\\r\\n          return IVaultFacet(diamond).getVaultAllTokens(_vault);  \\r\\n    }\\r\\n    function getVaultTokenType(address _vault,address _token) external view returns(uint256){\\r\\n         return IVaultFacet(diamond).getVaultTokenType(_vault,_token);  \\r\\n    }\\r\\n    function getVaultAllProtocol(address _vault) external view returns(address[] memory){\\r\\n         return IVaultFacet(diamond).getVaultAllProtocol(_vault);   \\r\\n    }\\r\\n\\r\\n    function getVaultProtocolStatus(address _vault,address  _protocol) external view returns(bool){\\r\\n         return IVaultFacet(diamond).getVaultProtocolStatus(_vault,_protocol);   \\r\\n    }\\r\\n\\r\\n\\r\\n    function getVaultPosition(address _vault,address _component, uint256 _positionType) external view returns(IVaultFacet.Position memory position){\\r\\n        return IVaultFacet(diamond).getVaultPosition(_vault,_component,_positionType);\\r\\n    }\\r\\n    //---------------\\r\\n    function getAllModules() external view returns(address[] memory){\\r\\n         return IPlatformFacet(diamond).getAllModules();\\r\\n    }\\r\\n    function getModuleStatus(address _module) external view returns(bool){\\r\\n         return IPlatformFacet(diamond).getModuleStatus(_module);\\r\\n    }\\r\\n    function getProtocols()  external view returns(IPlatformFacet.ProtocolAndA[] memory){\\r\\n        return IPlatformFacet(diamond).getProtocols();\\r\\n    }\\r\\n    function getModuleToProtocolA(address _module,string memory _protocol) external view returns(address){\\r\\n        return  IPlatformFacet(diamond).getModuleToProtocolA(_module,_protocol);\\r\\n    }\\r\\n    function getTokens()  external view returns(address[] memory){\\r\\n        return  IPlatformFacet(diamond).getTokens();\\r\\n    }\\r\\n    function getTokenType(address _token) external view returns(uint256){\\r\\n         return  IPlatformFacet(diamond).getTokenType(_token);\\r\\n    }\\r\\n    function getIsVault(address _vault) external view returns(bool){\\r\\n         return IPlatformFacet(diamond).getIsVault(_vault);\\r\\n    }\\r\\n    function getWeth() external view returns(address){\\r\\n         return IPlatformFacet(diamond).getWeth();\\r\\n    }\\r\\n    function getVaultImplementation() external view returns(address){\\r\\n         return IPlatformFacet(diamond).getVaultImplementation();\\r\\n    }\\r\\n    function getDomainHash() external view returns(bytes32){\\r\\n         return ILendFacet(diamond).getDomainHash();\\r\\n    }\\r\\n    function getLendFeePlatformRecipient() external view returns(address){\\r\\n         return ILendFacet(diamond).getLendFeePlatformRecipient();\\r\\n    }\\r\\n\\r\\n    function getLoanerLendInfos(address _loaner) external view returns(address[] memory){\\r\\n         return ILendFacet(diamond).getLoanerLendInfo(_loaner);\\r\\n    }\\r\\n\\r\\n    function getDebtorLendInfo(address _debtor) external view returns(ILendFacet.LendInfo memory){\\r\\n         return  ILendFacet(diamond).getDebtorLendInfo(_debtor);\\r\\n    }\\r\\n    //\\r\\n    function getVaultType(address _vault) external view returns(uint256){\\r\\n          return IVaultFacet(diamond).getVaultType(_vault);\\r\\n    }\\r\\n    function getSourceType(address _vault) external view returns(uint256){\\r\\n         return IVaultFacet(diamond).getSourceType(_vault);\\r\\n    }\\r\\n    //    \\r\\n    function getBorrowerStakeInfo(address _borrower) external view returns(ILendFacet.StakeInfo memory){\\r\\n        return ILendFacet(diamond).getBorrowerStakeInfo(_borrower);\\r\\n    }\\r\\n    function getBorrowers(address _lender) external view returns(address[] memory) {\\r\\n        return ILendFacet(diamond).getBorrowers(_lender);\\r\\n    }\\r\\n    function getCollateralNft(address _nft) external view returns(ILendFacet.CollateralNftType){\\r\\n         return ILendFacet(diamond).getCollateralNft(_nft);\\r\\n    }\\r\\n    \\r\\n\\r\\n     function getFuncWhiteList(address _vault,bytes4 _func) external view returns(bool){\\r\\n           return  IVaultFacet(diamond).getFuncWhiteList(_vault,_func);\\r\\n      }\\r\\n\\r\\n      function getFuncBlackList(address _vault,bytes4 _func) external view returns(bool){\\r\\n           return    IVaultFacet(diamond).getFuncBlackList(_vault,_func);\\r\\n\\r\\n      }\\r\\n\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_facetAddress\",\"type\":\"address\"}],\"name\":\"deleteFacetAllSelector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"diamond\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_facetAddress\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"_addSelectors\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_removeSelectors\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"diamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_functionSelector\",\"type\":\"bytes4\"}],\"name\":\"facetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"facetAddress_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facetAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"facetAddresses_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_facet\",\"type\":\"address\"}],\"name\":\"facetFunctionSelectors\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"facetFunctionSelectors_\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondLoupe.Facet[]\",\"name\":\"facets_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllModules\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getBorrowerStakeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrowAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lendAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payNowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payNowMinAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payLaterMinAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payLaterAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platformFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAssetType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowNftId\",\"type\":\"uint256\"}],\"internalType\":\"struct ILendFacet.StakeInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lender\",\"type\":\"address\"}],\"name\":\"getBorrowers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"getCollateralNft\",\"outputs\":[{\"internalType\":\"enum ILendFacet.CollateralNftType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"getDBControlWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_debtor\",\"type\":\"address\"}],\"name\":\"getDebtorLendInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"loaner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrowAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowMinAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platformFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAssetType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralNftId\",\"type\":\"uint256\"}],\"internalType\":\"struct ILendFacet.LendInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_func\",\"type\":\"bytes4\"}],\"name\":\"getFuncBlackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_func\",\"type\":\"bytes4\"}],\"name\":\"getFuncWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getIsVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLendFeePlatformRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loaner\",\"type\":\"address\"}],\"name\":\"getLoanerLendInfos\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"getModuleStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_protocol\",\"type\":\"string\"}],\"name\":\"getModuleToProtocolA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocols\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"protocol\",\"type\":\"string\"}],\"internalType\":\"struct IPlatformFacet.ProtocolAndA[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getSourceType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getVaulTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getVaultAllModules\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"_positionTypes\",\"type\":\"uint16[]\"}],\"name\":\"getVaultAllPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"positionType\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"debtType\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"ableUse\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"component\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IVaultFacet.Position[]\",\"name\":\"positions\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"decimals\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getVaultAllProtocol\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getVaultAllTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getVaultLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getVaultMasterToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"getVaultModuleStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_component\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_positionType\",\"type\":\"uint256\"}],\"name\":\"getVaultPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"positionType\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"debtType\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"ableUse\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"component\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IVaultFacet.Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_positionType\",\"type\":\"uint16\"}],\"name\":\"getVaultProtocolPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"positionType\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"debtType\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"ableUse\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"component\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IVaultFacet.Position[]\",\"name\":\"positions\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"decimals\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"}],\"name\":\"getVaultProtocolStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getVaultTokenType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getVaultType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWeth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_diamond\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multiCall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"enum ILendFacet.CollateralNftType\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"setCollateralNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_modules\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_status\",\"type\":\"bool[]\"}],\"name\":\"setDBControlWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_func\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"_type\",\"type\":\"bool\"}],\"name\":\"setFuncBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_func\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"_type\",\"type\":\"bool\"}],\"name\":\"setFuncWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_modules\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_status\",\"type\":\"bool[]\"}],\"name\":\"setModules\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payer\",\"type\":\"address\"}],\"name\":\"setPayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"_protocols\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_protocolAddrs\",\"type\":\"address[]\"}],\"name\":\"setProtocols\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenTypes\",\"type\":\"uint256[]\"}],\"name\":\"setTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_eth\",\"type\":\"address\"}],\"name\":\"setWethAndEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "Manager", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}