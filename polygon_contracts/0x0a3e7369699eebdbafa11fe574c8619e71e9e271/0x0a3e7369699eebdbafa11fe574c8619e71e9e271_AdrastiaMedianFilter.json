{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@adrastia-oracle/adrastia-core/contracts/interfaces/IHistoricalOracle.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\nimport \\\"../libraries/ObservationLibrary.sol\\\";\\n\\n/**\\n * @title IHistoricalOracle\\n * @notice An interface that defines an oracle contract that stores historical observations.\\n */\\ninterface IHistoricalOracle {\\n    /// @notice Gets an observation for a token at a specific index.\\n    /// @param token The address of the token to get the observation for.\\n    /// @param index The index of the observation to get, where index 0 contains the latest observation, and the last\\n    ///   index contains the oldest observation (uses reverse chronological ordering).\\n    /// @return observation The observation for the token at the specified index.\\n    function getObservationAt(\\n        address token,\\n        uint256 index\\n    ) external view returns (ObservationLibrary.Observation memory);\\n\\n    /// @notice Gets the latest observations for a token.\\n    /// @param token The address of the token to get the observations for.\\n    /// @param amount The number of observations to get.\\n    /// @return observations The latest observations for the token, in reverse chronological order, from newest to oldest.\\n    function getObservations(\\n        address token,\\n        uint256 amount\\n    ) external view returns (ObservationLibrary.Observation[] memory);\\n\\n    /// @notice Gets the latest observations for a token.\\n    /// @param token The address of the token to get the observations for.\\n    /// @param amount The number of observations to get.\\n    /// @param offset The index of the first observation to get (default: 0).\\n    /// @param increment The increment between observations to get (default: 1).\\n    /// @return observations The latest observations for the token, in reverse chronological order, from newest to oldest.\\n    function getObservations(\\n        address token,\\n        uint256 amount,\\n        uint256 offset,\\n        uint256 increment\\n    ) external view returns (ObservationLibrary.Observation[] memory);\\n\\n    /// @notice Gets the number of observations for a token.\\n    /// @param token The address of the token to get the number of observations for.\\n    /// @return count The number of observations for the token.\\n    function getObservationsCount(address token) external view returns (uint256);\\n\\n    /// @notice Gets the capacity of observations for a token.\\n    /// @param token The address of the token to get the capacity of observations for.\\n    /// @return capacity The capacity of observations for the token.\\n    function getObservationsCapacity(address token) external view returns (uint256);\\n\\n    /// @notice Sets the capacity of observations for a token.\\n    /// @param token The address of the token to set the capacity of observations for.\\n    /// @param amount The new capacity of observations for the token.\\n    function setObservationsCapacity(address token, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/interfaces/ILiquidityOracle.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\nimport \\\"./IUpdateable.sol\\\";\\nimport \\\"./IQuoteToken.sol\\\";\\n\\n/**\\n * @title ILiquidityOracle\\n * @notice An interface that defines a liquidity oracle with a single quote token (or currency) and many exchange\\n *  tokens.\\n */\\nabstract contract ILiquidityOracle is IUpdateable, IQuoteToken {\\n    /// @notice Gets the liquidity levels of the token and the quote token in the underlying pool.\\n    /// @param token The token to get liquidity levels of (along with the quote token).\\n    /// @return tokenLiquidity The amount of the token that is liquid in the underlying pool, in wei.\\n    /// @return quoteTokenLiquidity The amount of the quote token that is liquid in the underlying pool, in wei.\\n    function consultLiquidity(address token)\\n        public\\n        view\\n        virtual\\n        returns (uint112 tokenLiquidity, uint112 quoteTokenLiquidity);\\n\\n    /**\\n     * @notice Gets the liquidity levels of the token and the quote token in the underlying pool, reverting if the\\n     *  quotation is older than the maximum allowable age.\\n     * @dev Using maxAge of 0 can be gas costly and the returned data is easier to manipulate.\\n     * @param token The token to get liquidity levels of (along with the quote token).\\n     * @param maxAge The maximum age of the quotation, in seconds. If 0, the function gets the instant rates as of the\\n     *   latest block, straight from the source.\\n     * @return tokenLiquidity The amount of the token that is liquid in the underlying pool, in wei.\\n     * @return quoteTokenLiquidity The amount of the quote token that is liquid in the underlying pool, in wei.\\n     */\\n    function consultLiquidity(address token, uint256 maxAge)\\n        public\\n        view\\n        virtual\\n        returns (uint112 tokenLiquidity, uint112 quoteTokenLiquidity);\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/interfaces/IOracle.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\nimport \\\"./IUpdateable.sol\\\";\\nimport \\\"./ILiquidityOracle.sol\\\";\\nimport \\\"./IPriceOracle.sol\\\";\\n\\n/**\\n * @title IOracle\\n * @notice An interface that defines a price and liquidity oracle.\\n */\\nabstract contract IOracle is IUpdateable, IPriceOracle, ILiquidityOracle {\\n    /**\\n     * @notice Gets the price of a token in terms of the quote token along with the liquidity levels of the token\\n     *  andquote token in the underlying pool.\\n     * @param token The token to get the price of.\\n     * @return price The quote token denominated price for a whole token.\\n     * @return tokenLiquidity The amount of the token that is liquid in the underlying pool, in wei.\\n     * @return quoteTokenLiquidity The amount of the quote token that is liquid in the underlying pool, in wei.\\n     */\\n    function consult(\\n        address token\\n    ) public view virtual returns (uint112 price, uint112 tokenLiquidity, uint112 quoteTokenLiquidity);\\n\\n    /**\\n     * @notice Gets the price of a token in terms of the quote token along with the liquidity levels of the token and\\n     *  quote token in the underlying pool, reverting if the quotation is older than the maximum allowable age.\\n     * @dev Using maxAge of 0 can be gas costly and the returned data is easier to manipulate.\\n     * @param token The token to get the price of.\\n     * @param maxAge The maximum age of the quotation, in seconds. If 0, the function gets the instant rates as of the\\n     *   latest block, straight from the source.\\n     * @return price The quote token denominated price for a whole token.\\n     * @return tokenLiquidity The amount of the token that is liquid in the underlying pool, in wei.\\n     * @return quoteTokenLiquidity The amount of the quote token that is liquid in the underlying pool, in wei.\\n     */\\n    function consult(\\n        address token,\\n        uint256 maxAge\\n    ) public view virtual returns (uint112 price, uint112 tokenLiquidity, uint112 quoteTokenLiquidity);\\n\\n    function liquidityDecimals() public view virtual returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/interfaces/IPriceOracle.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\nimport \\\"./IUpdateable.sol\\\";\\nimport \\\"./IQuoteToken.sol\\\";\\n\\n/// @title IPriceOracle\\n/// @notice An interface that defines a price oracle with a single quote token (or currency) and many exchange tokens.\\nabstract contract IPriceOracle is IUpdateable, IQuoteToken {\\n    /**\\n     * @notice Gets the price of a token in terms of the quote token.\\n     * @param token The token to get the price of.\\n     * @return price The quote token denominated price for a whole token.\\n     */\\n    function consultPrice(address token) public view virtual returns (uint112 price);\\n\\n    /**\\n     * @notice Gets the price of a token in terms of the quote token, reverting if the quotation is older than the\\n     *  maximum allowable age.\\n     * @dev Using maxAge of 0 can be gas costly and the returned data is easier to manipulate.\\n     * @param token The token to get the price of.\\n     * @param maxAge The maximum age of the quotation, in seconds. If 0, the function gets the instant rates as of the\\n     *   latest block, straight from the source.\\n     * @return price The quote token denominated price for a whole token.\\n     */\\n    function consultPrice(address token, uint256 maxAge) public view virtual returns (uint112 price);\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/interfaces/IQuoteToken.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\n/**\\n * @title IQuoteToken\\n * @notice An interface that defines a contract containing a quote token (or currency), providing the associated\\n *  metadata.\\n */\\nabstract contract IQuoteToken {\\n    /// @notice Gets the quote token (or currency) name.\\n    /// @return The name of the quote token (or currency).\\n    function quoteTokenName() public view virtual returns (string memory);\\n\\n    /// @notice Gets the quote token address (if any).\\n    /// @dev This may return address(0) if no specific quote token is used (such as an aggregate of quote tokens).\\n    /// @return The address of the quote token, or address(0) if no specific quote token is used.\\n    function quoteTokenAddress() public view virtual returns (address);\\n\\n    /// @notice Gets the quote token (or currency) symbol.\\n    /// @return The symbol of the quote token (or currency).\\n    function quoteTokenSymbol() public view virtual returns (string memory);\\n\\n    /// @notice Gets the number of decimal places that quote prices have.\\n    /// @return The number of decimals of the quote token (or currency) that quote prices have.\\n    function quoteTokenDecimals() public view virtual returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/interfaces/IUpdateable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\n/// @title IUpdateByToken\\n/// @notice An interface that defines a contract that is updateable as per the input data.\\nabstract contract IUpdateable {\\n    /// @notice Performs an update as per the input data.\\n    /// @param data Any data needed for the update.\\n    /// @return b True if anything was updated; false otherwise.\\n    function update(bytes memory data) public virtual returns (bool b);\\n\\n    /// @notice Checks if an update needs to be performed.\\n    /// @param data Any data relating to the update.\\n    /// @return b True if an update needs to be performed; false otherwise.\\n    function needsUpdate(bytes memory data) public view virtual returns (bool b);\\n\\n    /// @notice Check if an update can be performed by the caller (if needed).\\n    /// @dev Tries to determine if the caller can call update with a valid observation being stored.\\n    /// @dev This is not meant to be called by state-modifying functions.\\n    /// @param data Any data relating to the update.\\n    /// @return b True if an update can be performed by the caller; false otherwise.\\n    function canUpdate(bytes memory data) public view virtual returns (bool b);\\n\\n    /// @notice Gets the timestamp of the last update.\\n    /// @param data Any data relating to the update.\\n    /// @return A unix timestamp.\\n    function lastUpdateTime(bytes memory data) public view virtual returns (uint256);\\n\\n    /// @notice Gets the amount of time (in seconds) since the last update.\\n    /// @param data Any data relating to the update.\\n    /// @return Time in seconds.\\n    function timeSinceLastUpdate(bytes memory data) public view virtual returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/libraries/ObservationLibrary.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\npragma experimental ABIEncoderV2;\\n\\nlibrary ObservationLibrary {\\n    struct ObservationMetadata {\\n        address oracle;\\n    }\\n\\n    struct Observation {\\n        uint112 price;\\n        uint112 tokenLiquidity;\\n        uint112 quoteTokenLiquidity;\\n        uint32 timestamp;\\n    }\\n\\n    struct MetaObservation {\\n        ObservationMetadata metadata;\\n        Observation data;\\n    }\\n\\n    struct LiquidityObservation {\\n        uint112 tokenLiquidity;\\n        uint112 quoteTokenLiquidity;\\n        uint32 timestamp;\\n    }\\n\\n    struct PriceObservation {\\n        uint112 price;\\n        uint32 timestamp;\\n    }\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/libraries/SortingLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\nlibrary SortingLibrary {\\n    /**\\n     * @notice Sorts the array of numbers using the quick sort algorithm.\\n     *\\n     * @param self The array of numbers to sort.\\n     * @param left The left boundary of the sorting range.\\n     * @param right The right boundary of the sorting range.\\n     */\\n    function quickSort(uint112[] memory self, int256 left, int256 right) internal pure {\\n        if (right - left <= 10) {\\n            insertionSort(self, left, right);\\n            return;\\n        }\\n\\n        int256 i = left;\\n        int256 j = right;\\n\\n        // The following is commented out because it is not possible for i to be equal to j at this point.\\n        // if (i == j) return;\\n\\n        uint256 pivotIndex = uint256(left + (right - left) / 2);\\n        uint256 pivotPrice = self[pivotIndex];\\n\\n        while (i <= j) {\\n            while (self[uint256(i)] < pivotPrice) {\\n                i = i + 1;\\n            }\\n            while (pivotPrice < self[uint256(j)]) {\\n                j = j - 1;\\n            }\\n            if (i <= j) {\\n                (self[uint256(i)], self[uint256(j)]) = (self[uint256(j)], self[uint256(i)]);\\n                i = i + 1;\\n                j = j - 1;\\n            }\\n        }\\n\\n        if (left < j) {\\n            quickSort(self, left, j);\\n        }\\n        if (i < right) {\\n            quickSort(self, i, right);\\n        }\\n    }\\n\\n    /**\\n     * @notice Sorts the array of numbers using the insertion sort algorithm.\\n     *\\n     * @param self The array of numbers to sort.\\n     * @param left The left boundary of the sorting range.\\n     * @param right The right boundary of the sorting range.\\n     */\\n    function insertionSort(uint112[] memory self, int256 left, int256 right) internal pure {\\n        for (int256 i = left + 1; i <= right; i = i + 1) {\\n            uint112 key = self[uint256(i)];\\n            int256 j = i - 1;\\n\\n            while (j >= left && self[uint256(j)] > key) {\\n                self[uint256(j + 1)] = self[uint256(j)];\\n                j = j - 1;\\n            }\\n            self[uint256(j + 1)] = key;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/oracles/AbstractOracle.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\nimport \\\"@openzeppelin-v4/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin-v4/contracts/utils/introspection/IERC165.sol\\\";\\n\\nimport \\\"../interfaces/IOracle.sol\\\";\\nimport \\\"../libraries/ObservationLibrary.sol\\\";\\nimport \\\"../utils/SimpleQuotationMetadata.sol\\\";\\n\\nabstract contract AbstractOracle is IERC165, IOracle, SimpleQuotationMetadata {\\n    constructor(address quoteToken_) SimpleQuotationMetadata(quoteToken_) {}\\n\\n    /// @param data The encoded address of the token for which to perform the update.\\n    /// @inheritdoc IUpdateable\\n    function update(bytes memory data) public virtual override returns (bool);\\n\\n    /// @param data The encoded address of the token for which to perform the update.\\n    /// @inheritdoc IUpdateable\\n    function needsUpdate(bytes memory data) public view virtual override returns (bool);\\n\\n    /// @param data The encoded address of the token for which to perform the update.\\n    /// @inheritdoc IUpdateable\\n    function canUpdate(bytes memory data) public view virtual override returns (bool);\\n\\n    function getLatestObservation(\\n        address token\\n    ) public view virtual returns (ObservationLibrary.Observation memory observation);\\n\\n    /// @param data The encoded address of the token for which the update relates to.\\n    /// @inheritdoc IUpdateable\\n    function lastUpdateTime(bytes memory data) public view virtual override returns (uint256) {\\n        address token = abi.decode(data, (address));\\n\\n        return getLatestObservation(token).timestamp;\\n    }\\n\\n    /// @param data The encoded address of the token for which the update relates to.\\n    /// @inheritdoc IUpdateable\\n    function timeSinceLastUpdate(bytes memory data) public view virtual override returns (uint256) {\\n        return block.timestamp - lastUpdateTime(data);\\n    }\\n\\n    function consultPrice(address token) public view virtual override returns (uint112 price) {\\n        if (token == quoteTokenAddress()) return uint112(10 ** quoteTokenDecimals());\\n\\n        ObservationLibrary.Observation memory observation = getLatestObservation(token);\\n\\n        require(observation.timestamp != 0, \\\"AbstractOracle: MISSING_OBSERVATION\\\");\\n\\n        return observation.price;\\n    }\\n\\n    /// @inheritdoc IPriceOracle\\n    function consultPrice(address token, uint256 maxAge) public view virtual override returns (uint112 price) {\\n        if (token == quoteTokenAddress()) return uint112(10 ** quoteTokenDecimals());\\n\\n        if (maxAge == 0) {\\n            (price, , ) = instantFetch(token);\\n\\n            return price;\\n        }\\n\\n        ObservationLibrary.Observation memory observation = getLatestObservation(token);\\n\\n        require(observation.timestamp != 0, \\\"AbstractOracle: MISSING_OBSERVATION\\\");\\n        require(block.timestamp <= observation.timestamp + maxAge, \\\"AbstractOracle: RATE_TOO_OLD\\\");\\n\\n        return observation.price;\\n    }\\n\\n    /// @inheritdoc ILiquidityOracle\\n    function consultLiquidity(\\n        address token\\n    ) public view virtual override returns (uint112 tokenLiquidity, uint112 quoteTokenLiquidity) {\\n        if (token == quoteTokenAddress()) return (0, 0);\\n\\n        ObservationLibrary.Observation memory observation = getLatestObservation(token);\\n\\n        require(observation.timestamp != 0, \\\"AbstractOracle: MISSING_OBSERVATION\\\");\\n\\n        tokenLiquidity = observation.tokenLiquidity;\\n        quoteTokenLiquidity = observation.quoteTokenLiquidity;\\n    }\\n\\n    /// @inheritdoc ILiquidityOracle\\n    function consultLiquidity(\\n        address token,\\n        uint256 maxAge\\n    ) public view virtual override returns (uint112 tokenLiquidity, uint112 quoteTokenLiquidity) {\\n        if (token == quoteTokenAddress()) return (0, 0);\\n\\n        if (maxAge == 0) {\\n            (, tokenLiquidity, quoteTokenLiquidity) = instantFetch(token);\\n\\n            return (tokenLiquidity, quoteTokenLiquidity);\\n        }\\n\\n        ObservationLibrary.Observation memory observation = getLatestObservation(token);\\n\\n        require(observation.timestamp != 0, \\\"AbstractOracle: MISSING_OBSERVATION\\\");\\n        require(block.timestamp <= observation.timestamp + maxAge, \\\"AbstractOracle: RATE_TOO_OLD\\\");\\n\\n        tokenLiquidity = observation.tokenLiquidity;\\n        quoteTokenLiquidity = observation.quoteTokenLiquidity;\\n    }\\n\\n    /// @inheritdoc IOracle\\n    function consult(\\n        address token\\n    ) public view virtual override returns (uint112 price, uint112 tokenLiquidity, uint112 quoteTokenLiquidity) {\\n        if (token == quoteTokenAddress()) return (uint112(10 ** quoteTokenDecimals()), 0, 0);\\n\\n        ObservationLibrary.Observation memory observation = getLatestObservation(token);\\n\\n        require(observation.timestamp != 0, \\\"AbstractOracle: MISSING_OBSERVATION\\\");\\n\\n        price = observation.price;\\n        tokenLiquidity = observation.tokenLiquidity;\\n        quoteTokenLiquidity = observation.quoteTokenLiquidity;\\n    }\\n\\n    /// @inheritdoc IOracle\\n    function consult(\\n        address token,\\n        uint256 maxAge\\n    ) public view virtual override returns (uint112 price, uint112 tokenLiquidity, uint112 quoteTokenLiquidity) {\\n        if (token == quoteTokenAddress()) return (uint112(10 ** quoteTokenDecimals()), 0, 0);\\n\\n        if (maxAge == 0) return instantFetch(token);\\n\\n        ObservationLibrary.Observation memory observation = getLatestObservation(token);\\n\\n        require(observation.timestamp != 0, \\\"AbstractOracle: MISSING_OBSERVATION\\\");\\n        require(block.timestamp <= observation.timestamp + maxAge, \\\"AbstractOracle: RATE_TOO_OLD\\\");\\n\\n        price = observation.price;\\n        tokenLiquidity = observation.tokenLiquidity;\\n        quoteTokenLiquidity = observation.quoteTokenLiquidity;\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(SimpleQuotationMetadata, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IOracle).interfaceId ||\\n            interfaceId == type(IUpdateable).interfaceId ||\\n            interfaceId == type(IPriceOracle).interfaceId ||\\n            interfaceId == type(ILiquidityOracle).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @notice Fetches the instant rates as of the latest block, straight from the source.\\n     * @dev This is costly in gas and the rates are easier to manipulate.\\n     * @param token The token to get the rates for.\\n     * @return price The quote token denominated price for a whole token.\\n     * @return tokenLiquidity The amount of the token that is liquid in the underlying pool, in wei.\\n     * @return quoteTokenLiquidity The amount of the quote token that is liquid in the underlying pool, in wei.\\n     */\\n    function instantFetch(\\n        address token\\n    ) internal view virtual returns (uint112 price, uint112 tokenLiquidity, uint112 quoteTokenLiquidity);\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/oracles/HistoricalAggregatorOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\nimport \\\"./AbstractOracle.sol\\\";\\nimport \\\"./HistoricalOracle.sol\\\";\\n\\n/**\\n * @title HistoricalAggregatorOracle\\n * @notice An oracle that aggregates historical data from another oracle implementing IHistoricalOracle.\\n * @dev Override computeObservation to implement the aggregation logic.\\n */\\nabstract contract HistoricalAggregatorOracle is AbstractOracle, HistoricalOracle {\\n    IHistoricalOracle internal immutable cSource;\\n\\n    uint256 internal immutable cObservationAmount;\\n    uint256 internal immutable cObservationOffset;\\n    uint256 internal immutable cObservationIncrement;\\n\\n    uint8 internal immutable _priceDecimals;\\n    uint8 internal immutable _liquidityDecimals;\\n\\n    error InvalidAmount(uint256 amount);\\n    error InvalidIncrement(uint256 increment);\\n\\n    constructor(\\n        IHistoricalOracle source_,\\n        uint256 observationAmount_,\\n        uint256 observationOffset_,\\n        uint256 observationIncrement_\\n    ) AbstractOracle(IOracle(address(source_)).quoteTokenAddress()) HistoricalOracle(1) {\\n        if (observationAmount_ == 0) revert InvalidAmount(observationAmount_);\\n        if (observationIncrement_ == 0) revert InvalidIncrement(observationIncrement_);\\n\\n        cSource = source_;\\n        cObservationAmount = observationAmount_;\\n        cObservationOffset = observationOffset_;\\n        cObservationIncrement = observationIncrement_;\\n\\n        _priceDecimals = IOracle(address(source_)).quoteTokenDecimals();\\n        _liquidityDecimals = IOracle(address(source_)).liquidityDecimals();\\n    }\\n\\n    function source() external view virtual returns (IHistoricalOracle) {\\n        return _source();\\n    }\\n\\n    function observationAmount() external view virtual returns (uint256) {\\n        return _observationAmount();\\n    }\\n\\n    function observationOffset() external view virtual returns (uint256) {\\n        return _observationOffset();\\n    }\\n\\n    function observationIncrement() external view virtual returns (uint256) {\\n        return _observationIncrement();\\n    }\\n\\n    /// @inheritdoc AbstractOracle\\n    function needsUpdate(bytes memory data) public view virtual override returns (bool) {\\n        address token = abi.decode(data, (address));\\n\\n        IHistoricalOracle sourceOracle = _source();\\n\\n        uint256 amount = _observationAmount();\\n        uint256 offset = _observationOffset();\\n        uint256 increment = _observationIncrement();\\n\\n        if (sourceOracle.getObservationsCount(token) <= (amount - 1) * increment + offset) {\\n            // If the source oracle doesn't have enough observations, we can't update\\n            return false;\\n        }\\n\\n        // Get the latest observation from the source oracle\\n        ObservationLibrary.Observation memory sourceObservation = sourceOracle.getObservationAt(token, offset);\\n\\n        // Get our latest observation\\n        ObservationLibrary.Observation memory observation = getLatestObservation(token);\\n\\n        // We need an update if the source has a new observation\\n        // Note: We must set our observation timestamp as the source's last observation timestamp for this to work\\n        return sourceObservation.timestamp > observation.timestamp;\\n    }\\n\\n    /// @inheritdoc AbstractOracle\\n    function canUpdate(bytes memory data) public view virtual override returns (bool) {\\n        return needsUpdate(data);\\n    }\\n\\n    /// @inheritdoc AbstractOracle\\n    function update(bytes memory data) public virtual override returns (bool) {\\n        if (needsUpdate(data)) return performUpdate(data);\\n\\n        return false;\\n    }\\n\\n    function getLatestObservation(\\n        address token\\n    ) public view virtual override returns (ObservationLibrary.Observation memory observation) {\\n        BufferMetadata storage meta = observationBufferMetadata[token];\\n\\n        if (meta.size == 0) {\\n            // If the buffer is empty, return the default observation\\n            return ObservationLibrary.Observation({price: 0, tokenLiquidity: 0, quoteTokenLiquidity: 0, timestamp: 0});\\n        }\\n\\n        return observationBuffers[token][meta.end];\\n    }\\n\\n    function liquidityDecimals() public view virtual override returns (uint8) {\\n        return _liquidityDecimals;\\n    }\\n\\n    function quoteTokenName()\\n        public\\n        view\\n        virtual\\n        override(IQuoteToken, SimpleQuotationMetadata)\\n        returns (string memory)\\n    {\\n        return IOracle(address(_source())).quoteTokenName();\\n    }\\n\\n    function quoteTokenSymbol()\\n        public\\n        view\\n        virtual\\n        override(IQuoteToken, SimpleQuotationMetadata)\\n        returns (string memory)\\n    {\\n        return IOracle(address(_source())).quoteTokenSymbol();\\n    }\\n\\n    function quoteTokenDecimals() public view virtual override(IQuoteToken, SimpleQuotationMetadata) returns (uint8) {\\n        return _priceDecimals;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(AbstractOracle) returns (bool) {\\n        return interfaceId == type(IHistoricalOracle).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _source() internal view virtual returns (IHistoricalOracle) {\\n        return cSource;\\n    }\\n\\n    function _observationAmount() internal view virtual returns (uint256) {\\n        return cObservationAmount;\\n    }\\n\\n    function _observationOffset() internal view virtual returns (uint256) {\\n        return cObservationOffset;\\n    }\\n\\n    function _observationIncrement() internal view virtual returns (uint256) {\\n        return cObservationIncrement;\\n    }\\n\\n    function computeObservation(\\n        address token\\n    ) internal view virtual returns (ObservationLibrary.Observation memory observation);\\n\\n    function performUpdate(bytes memory data) internal virtual returns (bool) {\\n        address token = abi.decode(data, (address));\\n\\n        ObservationLibrary.Observation memory observation = computeObservation(token);\\n\\n        push(token, observation);\\n\\n        return true;\\n    }\\n\\n    function instantFetch(\\n        address token\\n    ) internal view virtual override returns (uint112 price, uint112 tokenLiquidity, uint112 quoteTokenLiquidity) {\\n        ObservationLibrary.Observation memory observation = computeObservation(token);\\n\\n        price = observation.price;\\n        tokenLiquidity = observation.tokenLiquidity;\\n        quoteTokenLiquidity = observation.quoteTokenLiquidity;\\n    }\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/oracles/HistoricalOracle.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\nimport \\\"../interfaces/IHistoricalOracle.sol\\\";\\nimport \\\"../libraries/ObservationLibrary.sol\\\";\\n\\nabstract contract HistoricalOracle is IHistoricalOracle {\\n    struct BufferMetadata {\\n        uint16 start;\\n        uint16 end;\\n        uint16 size;\\n        uint16 maxSize;\\n        uint16 flags; // Bit flags for future use\\n        uint112 __reserved; // Reserved for future use\\n        uint64 extra; // For user extensions\\n    }\\n\\n    mapping(address => BufferMetadata) internal observationBufferMetadata;\\n\\n    mapping(address => ObservationLibrary.Observation[]) internal observationBuffers;\\n\\n    uint16 internal immutable initialCapacity;\\n\\n    /// @notice Emitted when a stored quotation is updated.\\n    /// @param token The address of the token that the quotation is for.\\n    /// @param price The quote token denominated price for a whole token.\\n    /// @param tokenLiquidity The amount of the token that is liquid in the underlying pool, in wei.\\n    /// @param quoteTokenLiquidity The amount of the quote token that is liquid in the underlying pool, in wei.\\n    /// @param timestamp The epoch timestamp of the quotation (in seconds).\\n    event Updated(\\n        address indexed token,\\n        uint256 price,\\n        uint256 tokenLiquidity,\\n        uint256 quoteTokenLiquidity,\\n        uint256 timestamp\\n    );\\n\\n    /// @notice Event emitted when an observation buffer's capacity is increased past the initial capacity.\\n    /// @dev Buffer initialization does not emit an event.\\n    /// @param token The token for which the observation buffer's capacity was increased.\\n    /// @param oldCapacity The previous capacity of the observation buffer.\\n    /// @param newCapacity The new capacity of the observation buffer.\\n    event ObservationCapacityIncreased(address indexed token, uint256 oldCapacity, uint256 newCapacity);\\n\\n    /// @notice Event emitted when an observation buffer's capacity is initialized.\\n    /// @param token The token for which the observation buffer's capacity was initialized.\\n    /// @param capacity The capacity of the observation buffer.\\n    event ObservationCapacityInitialized(address indexed token, uint256 capacity);\\n\\n    /// @notice An error that is thrown if we try to initialize an observation buffer that has already been initialized.\\n    /// @param token The token for which we tried to initialize the observation buffer.\\n    error BufferAlreadyInitialized(address token);\\n\\n    /// @notice An error that is thrown if we try to retrieve an observation at an invalid index.\\n    /// @param token The token for which we tried to retrieve the observation.\\n    /// @param index The index of the observation that we tried to retrieve.\\n    /// @param size The size of the observation buffer.\\n    error InvalidIndex(address token, uint256 index, uint256 size);\\n\\n    /// @notice An error that is thrown if we try to decrease the capacity of an observation buffer.\\n    /// @param token The token for which we tried to decrease the capacity of the observation buffer.\\n    /// @param amount The capacity that we tried to decrease the observation buffer to.\\n    /// @param currentCapacity The current capacity of the observation buffer.\\n    error CapacityCannotBeDecreased(address token, uint256 amount, uint256 currentCapacity);\\n\\n    /// @notice An error that is thrown if we try to increase the capacity of an observation buffer past the maximum capacity.\\n    /// @param token The token for which we tried to increase the capacity of the observation buffer.\\n    /// @param amount The capacity that we tried to increase the observation buffer to.\\n    /// @param maxCapacity The maximum capacity of the observation buffer.\\n    error CapacityTooLarge(address token, uint256 amount, uint256 maxCapacity);\\n\\n    /// @notice An error that is thrown if we try to retrieve more observations than are available in the observation buffer.\\n    /// @param token The token for which we tried to retrieve the observations.\\n    /// @param size The size of the observation buffer.\\n    /// @param minSizeRequired The minimum size of the observation buffer that we require.\\n    error InsufficientData(address token, uint256 size, uint256 minSizeRequired);\\n\\n    constructor(uint16 initialCapacity_) {\\n        initialCapacity = initialCapacity_;\\n    }\\n\\n    /// @inheritdoc IHistoricalOracle\\n    function getObservationAt(\\n        address token,\\n        uint256 index\\n    ) external view virtual override returns (ObservationLibrary.Observation memory) {\\n        BufferMetadata memory meta = observationBufferMetadata[token];\\n\\n        if (index >= meta.size) {\\n            revert InvalidIndex(token, index, meta.size);\\n        }\\n\\n        uint256 bufferIndex = meta.end < index ? meta.end + meta.size - index : meta.end - index;\\n\\n        return observationBuffers[token][bufferIndex];\\n    }\\n\\n    /// @inheritdoc IHistoricalOracle\\n    function getObservations(\\n        address token,\\n        uint256 amount\\n    ) external view virtual override returns (ObservationLibrary.Observation[] memory) {\\n        return getObservationsInternal(token, amount, 0, 1);\\n    }\\n\\n    /// @inheritdoc IHistoricalOracle\\n    function getObservations(\\n        address token,\\n        uint256 amount,\\n        uint256 offset,\\n        uint256 increment\\n    ) external view virtual returns (ObservationLibrary.Observation[] memory) {\\n        return getObservationsInternal(token, amount, offset, increment);\\n    }\\n\\n    /// @inheritdoc IHistoricalOracle\\n    function getObservationsCount(address token) external view override returns (uint256) {\\n        return observationBufferMetadata[token].size;\\n    }\\n\\n    /// @inheritdoc IHistoricalOracle\\n    function getObservationsCapacity(address token) external view virtual override returns (uint256) {\\n        uint256 maxSize = observationBufferMetadata[token].maxSize;\\n        if (maxSize == 0) return initialCapacity;\\n\\n        return maxSize;\\n    }\\n\\n    /// @inheritdoc IHistoricalOracle\\n    /// @param amount The new capacity of observations for the token. Must be greater than the current capacity, but\\n    ///   less than 65536.\\n    function setObservationsCapacity(address token, uint256 amount) external virtual override {\\n        BufferMetadata storage meta = observationBufferMetadata[token];\\n        if (meta.maxSize == 0) {\\n            // Buffer is not initialized yet\\n            initializeBuffers(token);\\n        }\\n\\n        if (amount < meta.maxSize) revert CapacityCannotBeDecreased(token, amount, meta.maxSize);\\n        if (amount > type(uint16).max) revert CapacityTooLarge(token, amount, type(uint16).max);\\n\\n        ObservationLibrary.Observation[] storage observationBuffer = observationBuffers[token];\\n\\n        // Add new slots to the buffer\\n        uint256 capacityToAdd = amount - meta.maxSize;\\n        for (uint256 i = 0; i < capacityToAdd; ++i) {\\n            // Push a dummy observation with non-zero values to put most of the gas cost on the caller\\n            observationBuffer.push(\\n                ObservationLibrary.Observation({price: 1, tokenLiquidity: 1, quoteTokenLiquidity: 1, timestamp: 1})\\n            );\\n        }\\n\\n        if (meta.maxSize != amount) {\\n            emit ObservationCapacityIncreased(token, meta.maxSize, amount);\\n\\n            // Update the metadata\\n            meta.maxSize = uint16(amount);\\n        }\\n    }\\n\\n    function getObservationsInternal(\\n        address token,\\n        uint256 amount,\\n        uint256 offset,\\n        uint256 increment\\n    ) internal view virtual returns (ObservationLibrary.Observation[] memory) {\\n        if (amount == 0) return new ObservationLibrary.Observation[](0);\\n\\n        BufferMetadata memory meta = observationBufferMetadata[token];\\n        if (meta.size <= (amount - 1) * increment + offset)\\n            revert InsufficientData(token, meta.size, (amount - 1) * increment + offset + 1);\\n\\n        ObservationLibrary.Observation[] memory observations = new ObservationLibrary.Observation[](amount);\\n\\n        uint256 count = 0;\\n\\n        for (\\n            uint256 i = meta.end < offset ? meta.end + meta.size - offset : meta.end - offset;\\n            count < amount;\\n            i = (i < increment) ? (i + meta.size) - increment : i - increment\\n        ) {\\n            observations[count++] = observationBuffers[token][i];\\n        }\\n\\n        return observations;\\n    }\\n\\n    function initializeBuffers(address token) internal virtual {\\n        if (observationBuffers[token].length != 0) {\\n            revert BufferAlreadyInitialized(token);\\n        }\\n\\n        BufferMetadata storage meta = observationBufferMetadata[token];\\n\\n        // Initialize the buffers\\n        ObservationLibrary.Observation[] storage observationBuffer = observationBuffers[token];\\n\\n        for (uint256 i = 0; i < initialCapacity; ++i) {\\n            observationBuffer.push();\\n        }\\n\\n        // Initialize the metadata\\n        meta.start = 0;\\n        meta.end = 0;\\n        meta.size = 0;\\n        meta.maxSize = initialCapacity;\\n\\n        emit ObservationCapacityInitialized(token, meta.maxSize);\\n    }\\n\\n    function push(address token, ObservationLibrary.Observation memory observation) internal virtual {\\n        BufferMetadata storage meta = observationBufferMetadata[token];\\n\\n        if (meta.size == 0) {\\n            if (meta.maxSize == 0) {\\n                // Initialize the buffers\\n                initializeBuffers(token);\\n            }\\n        } else {\\n            meta.end = (meta.end + 1) % meta.maxSize;\\n        }\\n\\n        observationBuffers[token][meta.end] = observation;\\n\\n        emit Updated(\\n            token,\\n            observation.price,\\n            observation.tokenLiquidity,\\n            observation.quoteTokenLiquidity,\\n            block.timestamp\\n        );\\n\\n        if (meta.size < meta.maxSize && meta.end == meta.size) {\\n            // We are at the end of the array and we have not yet filled it\\n            meta.size++;\\n        } else {\\n            // start was just overwritten\\n            meta.start = (meta.start + 1) % meta.size;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/oracles/IOracleAggregator.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../strategies/aggregation/IAggregationStrategy.sol\\\";\\nimport \\\"../strategies/validation/IValidationStrategy.sol\\\";\\n\\n/**\\n * @title IOracleAggregator\\n * @notice This interface defines the functions for an aggregator oracle. An aggregator oracle collects and processes\\n * data from multiple underlying oracles to provide a single source of truth that is accurate and reliable.\\n */\\ninterface IOracleAggregator {\\n    /**\\n     * @dev Struct representing an individual oracle.\\n     * Contains the following properties:\\n     * - oracle: The address of the oracle (160 bits)\\n     * - priceDecimals: The number of decimals in the oracle's price data\\n     * - liquidityDecimals: The number of decimals in the oracle's liquidity data\\n     */\\n    struct Oracle {\\n        address oracle; // The oracle address, 160 bits\\n        uint8 priceDecimals; // The number of decimals of the price\\n        uint8 liquidityDecimals; // The number of decimals of the liquidity\\n    }\\n\\n    /**\\n     * @notice Returns the aggregation strategy being used by the aggregator oracle for a given token.\\n     * @dev The aggregation strategy is used to aggregate the data from the underlying oracles.\\n     * @param token The address of the token for which the aggregation strategy is being requested.\\n     * @return strategy The instance of the IAggregationStrategy being used.\\n     */\\n    function aggregationStrategy(address token) external view returns (IAggregationStrategy strategy);\\n\\n    /**\\n     * @notice Returns the validation strategy being used by the aggregator oracle for a given token.\\n     * @dev The validation strategy is used to validate the data from the underlying oracles before it is aggregated.\\n     * Results from the underlying oracles that do not pass validation will be ignored.\\n     * @param token The address of the token for which the validation strategy is being requested.\\n     * @return strategy The instance of the IValidationStrategy being used, or the zero address if no validation\\n     * strategy is being used.\\n     */\\n    function validationStrategy(address token) external view returns (IValidationStrategy strategy);\\n\\n    /**\\n     * @notice Returns an array of Oracle structs representing the underlying oracles for a given token.\\n     * @param token The address of the token for which oracles are being requested.\\n     * @return oracles An array of Oracle structs for the given token.\\n     */\\n    function getOracles(address token) external view returns (Oracle[] memory oracles);\\n\\n    /**\\n     * @notice Returns the minimum number of oracle responses required for the aggregator to push a new observation.\\n     * @param token The address of the token for which the minimum number of responses is being requested.\\n     * @return minimumResponses The minimum number of responses required.\\n     */\\n    function minimumResponses(address token) external view returns (uint256 minimumResponses);\\n\\n    /**\\n     * @notice Returns the maximum age (in seconds) of an underlying oracle response for it to be considered valid.\\n     * @dev The maximum response age is used to prevent stale data from being aggregated.\\n     * @param token The address of the token for which the maximum response age is being requested.\\n     * @return maximumResponseAge The maximum response age in seconds.\\n     */\\n    function maximumResponseAge(address token) external view returns (uint256 maximumResponseAge);\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/oracles/MedianFilteringOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\nimport \\\"./HistoricalAggregatorOracle.sol\\\";\\nimport \\\"../libraries/SortingLibrary.sol\\\";\\n\\ncontract MedianFilteringOracle is HistoricalAggregatorOracle {\\n    using SortingLibrary for uint112[];\\n\\n    constructor(\\n        IHistoricalOracle source_,\\n        uint256 filterAmount_,\\n        uint256 filterOffset_,\\n        uint256 filterIncrement_\\n    ) HistoricalAggregatorOracle(source_, filterAmount_, filterOffset_, filterIncrement_) {}\\n\\n    function computeObservation(\\n        address token\\n    ) internal view virtual override returns (ObservationLibrary.Observation memory observation) {\\n        uint256 len = _observationAmount();\\n\\n        IHistoricalOracle sourceOracle = _source();\\n\\n        // Get the required number of observations from the source oracle\\n        ObservationLibrary.Observation[] memory observations = sourceOracle.getObservations(\\n            token,\\n            len,\\n            _observationOffset(),\\n            _observationIncrement()\\n        );\\n        if (len == 1) return observations[0];\\n\\n        // Extract all prices and liquidities from the observations\\n        uint112[] memory prices = new uint112[](len);\\n        uint112[] memory tokenLiquidities = new uint112[](len);\\n        uint112[] memory quoteTokenLiquidities = new uint112[](len);\\n        for (uint256 i = 0; i < len; ++i) {\\n            prices[i] = observations[i].price;\\n            tokenLiquidities[i] = observations[i].tokenLiquidity;\\n            quoteTokenLiquidities[i] = observations[i].quoteTokenLiquidity;\\n        }\\n\\n        // Sort the prices and liquidities\\n        prices.quickSort(0, int256(prices.length - 1));\\n        tokenLiquidities.quickSort(0, int256(tokenLiquidities.length - 1));\\n        quoteTokenLiquidities.quickSort(0, int256(quoteTokenLiquidities.length - 1));\\n\\n        uint256 medianIndex = len / 2;\\n\\n        if (len % 2 == 0) {\\n            // If the number of observations is even, take the average of the two middle values\\n\\n            // Casting to uint112 because the average of two uint112s cannot overflow a uint112\\n            observation.price = uint112((uint256(prices[medianIndex - 1]) + uint256(prices[medianIndex])) / 2);\\n            observation.tokenLiquidity = uint112(\\n                (uint256(tokenLiquidities[medianIndex - 1]) + uint256(tokenLiquidities[medianIndex])) / 2\\n            );\\n            observation.quoteTokenLiquidity = uint112(\\n                (uint256(quoteTokenLiquidities[medianIndex - 1]) + uint256(quoteTokenLiquidities[medianIndex])) / 2\\n            );\\n        } else {\\n            // If the number of observations is odd, take the middle value\\n            observation.price = prices[medianIndex];\\n            observation.tokenLiquidity = tokenLiquidities[medianIndex];\\n            observation.quoteTokenLiquidity = quoteTokenLiquidities[medianIndex];\\n        }\\n\\n        // Set the observation timestamp to the source's latest observation timestamp\\n        observation.timestamp = observations[0].timestamp;\\n    }\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/strategies/aggregation/IAggregationStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\nimport \\\"../../libraries/ObservationLibrary.sol\\\";\\n\\n/**\\n * @title IAggregationStrategy\\n * @notice Interface for implementing a strategy to aggregate data from a series of observations\\n * within a specified range. This can be useful when working with time-weighted average prices,\\n * volume-weighted average prices, or any other custom aggregation logic.\\n *\\n * Implementations of this interface can be used in a variety of scenarios, such as DeFi\\n * protocols, on-chain analytics, and other smart contract applications.\\n */\\ninterface IAggregationStrategy {\\n    /**\\n     * @notice Aggregate the observations within the specified range and return the result\\n     * as a single Observation.\\n     *\\n     * The aggregation strategy can be customized to include various forms of logic,\\n     * such as calculating the median, mean, or mode of the observations.\\n     *\\n     * @dev The implementation of this function should perform input validation, such as\\n     * ensuring the provided range is valid (i.e., 'from' <= 'to'), and that the input\\n     * array of observations is not empty.\\n     *\\n     * @param token The address of the token for which to aggregate observations.\\n     * @param observations An array of MetaObservation structs containing the data to aggregate.\\n     * @param from The starting index (inclusive) of the range to aggregate from the observations array.\\n     * @param to The ending index (inclusive) of the range to aggregate from the observations array.\\n     *\\n     * @return ObservationLibrary.Observation memory An Observation struct containing the result\\n     * of the aggregation.\\n     */\\n    function aggregateObservations(\\n        address token,\\n        ObservationLibrary.MetaObservation[] calldata observations,\\n        uint256 from,\\n        uint256 to\\n    ) external view returns (ObservationLibrary.Observation memory);\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/strategies/validation/IValidationStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\nimport \\\"../../libraries/ObservationLibrary.sol\\\";\\n\\n/**\\n * @title IValidationStrategy\\n * @notice Interface for implementing validation strategies for observation data in a token pair.\\n */\\ninterface IValidationStrategy {\\n    /**\\n     * @notice Returns the number of decimals of the quote token.\\n     * @dev This is useful for validations involving prices, which are always expressed in the quote token.\\n     * @return The number of decimals for the quote token.\\n     */\\n    function quoteTokenDecimals() external view returns (uint8);\\n\\n    /**\\n     * @notice Validates the given observation data for a token pair.\\n     * @param token The address of the token for which the observation data is being validated.\\n     * @param observation The observation data to be validated.\\n     * @return True if the observation passes validation; false otherwise.\\n     */\\n    function validateObservation(\\n        address token,\\n        ObservationLibrary.MetaObservation calldata observation\\n    ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-core/contracts/utils/SimpleQuotationMetadata.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\nimport \\\"@openzeppelin-v4/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"@openzeppelin-v4/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"../interfaces/IQuoteToken.sol\\\";\\n\\ncontract SimpleQuotationMetadata is IQuoteToken, IERC165 {\\n    address public immutable quoteToken;\\n\\n    constructor(address quoteToken_) {\\n        quoteToken = quoteToken_;\\n    }\\n\\n    /// @inheritdoc IQuoteToken\\n    function quoteTokenName() public view virtual override returns (string memory) {\\n        return getStringOrBytes32(quoteToken, IERC20Metadata.name.selector);\\n    }\\n\\n    /// @inheritdoc IQuoteToken\\n    function quoteTokenAddress() public view virtual override returns (address) {\\n        return quoteToken;\\n    }\\n\\n    /// @inheritdoc IQuoteToken\\n    function quoteTokenSymbol() public view virtual override returns (string memory) {\\n        return getStringOrBytes32(quoteToken, IERC20Metadata.symbol.selector);\\n    }\\n\\n    /// @inheritdoc IQuoteToken\\n    function quoteTokenDecimals() public view virtual override returns (uint8) {\\n        (bool success, bytes memory result) = quoteToken.staticcall(\\n            abi.encodeWithSelector(IERC20Metadata.decimals.selector)\\n        );\\n        if (!success) return 18; // Return 18 by default\\n\\n        return abi.decode(result, (uint8));\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IQuoteToken).interfaceId;\\n    }\\n\\n    function bytes32ToString(bytes32 _bytes32) internal pure returns (string memory) {\\n        // Calculate string length\\n        uint256 i = 0;\\n        while (i < 32 && _bytes32[i] != 0) ++i;\\n\\n        bytes memory bytesArray = new bytes(i);\\n\\n        // Extract characters\\n        for (i = 0; i < 32 && _bytes32[i] != 0; ++i) bytesArray[i] = _bytes32[i];\\n\\n        return string(bytesArray);\\n    }\\n\\n    function getStringOrBytes32(address contractAddress, bytes4 selector) internal view returns (string memory) {\\n        (bool success, bytes memory result) = contractAddress.staticcall(abi.encodeWithSelector(selector));\\n        if (!success) return \\\"\\\";\\n\\n        return result.length == 32 ? bytes32ToString(bytes32(result)) : abi.decode(result, (string));\\n    }\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-periphery/contracts/access/Roles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\nlibrary Roles {\\n    bytes32 public constant ADMIN = keccak256(\\\"ADMIN_ROLE\\\");\\n\\n    bytes32 public constant UPDATER_ADMIN = keccak256(\\\"UPDATER_ADMIN_ROLE\\\");\\n\\n    bytes32 public constant ORACLE_UPDATER = keccak256(\\\"ORACLE_UPDATER_ROLE\\\");\\n\\n    bytes32 public constant RATE_ADMIN = keccak256(\\\"RATE_ADMIN_ROLE\\\");\\n\\n    bytes32 public constant UPDATE_PAUSE_ADMIN = keccak256(\\\"UPDATE_PAUSE_ADMIN_ROLE\\\");\\n\\n    bytes32 public constant CONFIG_ADMIN = keccak256(\\\"CONFIG_ADMIN_ROLE\\\");\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-periphery/contracts/oracles/ManagedMedianFilteringOracle.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\nimport \\\"@adrastia-oracle/adrastia-core/contracts/oracles/MedianFilteringOracle.sol\\\";\\n\\nimport \\\"./bases/ManagedHistoricalAggregatorOracleBase.sol\\\";\\n\\ncontract ManagedMedianFilteringOracle is MedianFilteringOracle, ManagedHistoricalAggregatorOracleBase {\\n    constructor(\\n        IHistoricalOracle source_,\\n        uint256 observationAmount_,\\n        uint256 observationOffset_,\\n        uint256 observationIncrement_\\n    )\\n        MedianFilteringOracle(source_, observationAmount_, observationOffset_, observationIncrement_)\\n        ManagedHistoricalAggregatorOracleBase(source_, observationAmount_, observationOffset_, observationIncrement_)\\n    {}\\n\\n    function setUpdatesPaused(address token, bool paused) external virtual onlyRole(Roles.UPDATE_PAUSE_ADMIN) {\\n        uint16 flags = observationBufferMetadata[token].flags;\\n\\n        if (paused) {\\n            flags |= PAUSE_FLAG_MASK;\\n        } else {\\n            flags &= ~PAUSE_FLAG_MASK;\\n        }\\n\\n        observationBufferMetadata[token].flags = flags;\\n\\n        emit PauseStatusChanged(token, paused);\\n    }\\n\\n    function areUpdatesPaused(address token) external view virtual returns (bool) {\\n        return _areUpdatesPaused(token);\\n    }\\n\\n    function canUpdate(bytes memory data) public view virtual override returns (bool) {\\n        // Return false if the message sender is missing the required role\\n        if (!hasRole(Roles.ORACLE_UPDATER, address(0)) && !hasRole(Roles.ORACLE_UPDATER, msg.sender)) return false;\\n\\n        address token = abi.decode(data, (address));\\n        if (_areUpdatesPaused(token)) return false;\\n\\n        return super.canUpdate(data);\\n    }\\n\\n    function update(bytes memory data) public virtual override onlyRoleOrOpenRole(Roles.ORACLE_UPDATER) returns (bool) {\\n        address token = abi.decode(data, (address));\\n        if (_areUpdatesPaused(token)) revert UpdatesArePaused(token);\\n\\n        return super.update(data);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(AccessControlEnumerable, HistoricalAggregatorOracle) returns (bool) {\\n        return\\n            AccessControlEnumerable.supportsInterface(interfaceId) ||\\n            HistoricalAggregatorOracle.supportsInterface(interfaceId);\\n    }\\n\\n    function _source() internal view virtual override returns (IHistoricalOracle) {\\n        return config.source;\\n    }\\n\\n    function _observationAmount() internal view virtual override returns (uint256) {\\n        return config.observationAmount;\\n    }\\n\\n    function _observationOffset() internal view virtual override returns (uint256) {\\n        return config.observationOffset;\\n    }\\n\\n    function _observationIncrement() internal view virtual override returns (uint256) {\\n        return config.observationIncrement;\\n    }\\n\\n    function _areUpdatesPaused(address token) internal view virtual returns (bool) {\\n        return (observationBufferMetadata[token].flags & PAUSE_FLAG_MASK) != 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-periphery/contracts/oracles/bases/ManagedHistoricalAggregatorOracleBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\nimport \\\"@adrastia-oracle/adrastia-core/contracts/interfaces/IHistoricalOracle.sol\\\";\\nimport \\\"@adrastia-oracle/adrastia-core/contracts/interfaces/IOracle.sol\\\";\\n\\nimport \\\"./ManagedOracleBase.sol\\\";\\nimport \\\"../configs/IOracleAggregatorTokenConfig.sol\\\";\\n\\n/// @title ManagedHistoricalAggregatorOracleBase\\n/// @notice A base contract for historical observation (single source) aggregators that are managed by access control.\\nabstract contract ManagedHistoricalAggregatorOracleBase is ManagedOracleBase {\\n    struct Config {\\n        IHistoricalOracle source; // 160 bits\\n        uint16 observationAmount; // 16 bits\\n        uint16 observationOffset; // 16 bits\\n        uint16 observationIncrement; // 16 bits\\n    }\\n\\n    uint256 internal constant ERROR_INVALID_AMOUNT = 200;\\n    uint256 internal constant ERROR_INVALID_INCREMENT = 201;\\n    uint256 internal constant ERROR_INVALID_SOURCE = 202;\\n    uint256 internal constant ERROR_INVALID_SOURCE_DECIMAL_MISMATCH = 203;\\n\\n    /// @notice Emitted when the configuration is updated.\\n    /// @param oldConfig The old configuration.\\n    /// @param newConfig The new configuration.\\n    event ConfigUpdated(Config oldConfig, Config newConfig);\\n\\n    /// @notice An error thrown when attempting to set an invalid configuration.\\n    /// @param config The invalid configuration.\\n    /// @param errorCode The error code.\\n    error InvalidConfig(Config config, uint256 errorCode);\\n\\n    /// @notice The current configuration for the source, observation amount, observation offset, and observation\\n    /// increment.\\n    Config internal config;\\n\\n    /// @notice Constructs a new ManagedHistoricalAggregatorOracleBase.\\n    constructor(\\n        IHistoricalOracle source_,\\n        uint256 observationAmount_,\\n        uint256 observationOffset_,\\n        uint256 observationIncrement_\\n    ) ManagedOracleBase() {\\n        config.source = source_;\\n        config.observationAmount = uint16(observationAmount_);\\n        config.observationOffset = uint16(observationOffset_);\\n        config.observationIncrement = uint16(observationIncrement_);\\n    }\\n\\n    /**\\n     * @notice Sets a new configuration that applies to all tokens.\\n     * @dev This configuration is for the update threshold, update delay, and heartbeat.\\n     * @param newConfig The new config.\\n     * @custom:throws InvalidConfig if the new configuration is invalid.\\n     */\\n    function setConfig(Config calldata newConfig) external onlyRole(Roles.CONFIG_ADMIN) {\\n        // Ensure that the observation amount is not zero\\n        if (newConfig.observationAmount == 0) revert InvalidConfig(newConfig, ERROR_INVALID_AMOUNT);\\n        // Ensure that the observation increment is not zero\\n        if (newConfig.observationIncrement == 0) revert InvalidConfig(newConfig, ERROR_INVALID_INCREMENT);\\n        // Ensure that the source is not the zero address\\n        if (address(newConfig.source) == address(0)) revert InvalidConfig(newConfig, ERROR_INVALID_SOURCE);\\n        // Ensure that the source decimals match the token decimals\\n        if (\\n            IOracle(address(newConfig.source)).quoteTokenDecimals() !=\\n            IOracle(address(config.source)).quoteTokenDecimals() ||\\n            IOracle(address(newConfig.source)).liquidityDecimals() !=\\n            IOracle(address(config.source)).liquidityDecimals()\\n        ) revert InvalidConfig(newConfig, ERROR_INVALID_SOURCE_DECIMAL_MISMATCH);\\n\\n        Config memory oldConfig = config;\\n        config = newConfig;\\n        emit ConfigUpdated(oldConfig, newConfig);\\n    }\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-periphery/contracts/oracles/bases/ManagedOracleBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\nimport \\\"@openzeppelin-v4/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"../../access/Roles.sol\\\";\\n\\nabstract contract ManagedOracleBase is AccessControlEnumerable {\\n    uint16 internal constant PAUSE_FLAG_MASK = 1;\\n\\n    /// @notice Event emitted when the pause status of updates for a token is changed.\\n    /// @param token The token for which the pause status of updates was changed.\\n    /// @param areUpdatesPaused Whether updates are paused for the token.\\n    event PauseStatusChanged(address indexed token, bool areUpdatesPaused);\\n\\n    /// @notice An error that is thrown when updates are paused for a token.\\n    /// @param token The token for which updates are paused.\\n    error UpdatesArePaused(address token);\\n\\n    /// @notice An error thrown when attempting to call a function that requires a certain role.\\n    /// @param account The account that is missing the role.\\n    /// @param role The role that is missing.\\n    error MissingRole(address account, bytes32 role);\\n\\n    constructor() {\\n        initializeRoles();\\n    }\\n\\n    /**\\n     * @notice Modifier to make a function callable only by a certain role. In addition to checking the sender's role,\\n     * `address(0)` 's role is also considered. Granting a role to `address(0)` is equivalent to enabling this role for\\n     * everyone.\\n     * @param role The role to check.\\n     */\\n    modifier onlyRoleOrOpenRole(bytes32 role) {\\n        if (!hasRole(role, address(0))) {\\n            if (!hasRole(role, msg.sender)) revert MissingRole(msg.sender, role);\\n        }\\n        _;\\n    }\\n\\n    function initializeRoles() internal virtual {\\n        // Setup admin role, setting msg.sender as admin\\n        _setupRole(Roles.ADMIN, msg.sender);\\n        _setRoleAdmin(Roles.ADMIN, Roles.ADMIN);\\n\\n        // CONFIG_ADMIN is managed by ADMIN\\n        _setRoleAdmin(Roles.CONFIG_ADMIN, Roles.ADMIN);\\n\\n        // UPDATER_ADMIN is managed by ADMIN\\n        _setRoleAdmin(Roles.UPDATER_ADMIN, Roles.ADMIN);\\n\\n        // ORACLE_UPDATER is managed by UPDATER_ADMIN\\n        _setRoleAdmin(Roles.ORACLE_UPDATER, Roles.UPDATER_ADMIN);\\n\\n        // UPDATE_PAUSE_ADMIN is managed by ADMIN\\n        _setRoleAdmin(Roles.UPDATE_PAUSE_ADMIN, Roles.ADMIN);\\n\\n        // Hierarchy:\\n        // ADMIN\\n        //   - CONFIG_ADMIN\\n        //   - UPDATER_ADMIN\\n        //     - ORACLE_UPDATER\\n        //   - UPDATE_PAUSE_ADMIN\\n    }\\n}\\n\"\r\n    },\r\n    \"@adrastia-oracle/adrastia-periphery/contracts/oracles/configs/IOracleAggregatorTokenConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\nimport \\\"@adrastia-oracle/adrastia-core/contracts/oracles/IOracleAggregator.sol\\\";\\n\\ninterface IOracleAggregatorTokenConfig {\\n    function aggregationStrategy() external view returns (IAggregationStrategy);\\n\\n    function validationStrategy() external view returns (IValidationStrategy);\\n\\n    function minimumResponses() external view returns (uint256);\\n\\n    function oracles() external view returns (IOracleAggregator.Oracle[] memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-v4/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-v4/contracts/access/AccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-v4/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-v4/contracts/access/IAccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-v4/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-v4/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-v4/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-v4/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-v4/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-v4/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-v4/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/AdrastiaVersioning.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\ncontract AdrastiaVersioning {\\n    string public constant ADRASTIA_CORE_VERSION = \\\"v4.0.0-beta.4\\\";\\n    string public constant ADRASTIA_PERIPHERY_VERSION = \\\"v4.0.0-beta.3\\\";\\n    string public constant ADRASTIA_PROTOCOL_VERSION = \\\"v0.1.0\\\";\\n}\\n\"\r\n    },\r\n    \"contracts/oracles/MedianFilteringOracle.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.13;\\n\\nimport \\\"@adrastia-oracle/adrastia-periphery/contracts/oracles/ManagedMedianFilteringOracle.sol\\\";\\n\\nimport \\\"../AdrastiaVersioning.sol\\\";\\n\\ncontract AdrastiaMedianFilteringOracle is AdrastiaVersioning, ManagedMedianFilteringOracle {\\n    struct MedianFilteringOracleParams {\\n        IHistoricalOracle source;\\n        uint256 observationAmount;\\n        uint256 observationOffset;\\n        uint256 observationIncrement;\\n    }\\n\\n    string public name;\\n\\n    constructor(\\n        string memory name_,\\n        MedianFilteringOracleParams memory params\\n    )\\n        ManagedMedianFilteringOracle(\\n            params.source,\\n            params.observationAmount,\\n            params.observationOffset,\\n            params.observationIncrement\\n        )\\n    {\\n        name = name_;\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"contract IHistoricalOracle\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"observationAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"observationOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"observationIncrement\",\"type\":\"uint256\"}],\"internalType\":\"struct AdrastiaMedianFilteringOracle.MedianFilteringOracleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"BufferAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentCapacity\",\"type\":\"uint256\"}],\"name\":\"CapacityCannotBeDecreased\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCapacity\",\"type\":\"uint256\"}],\"name\":\"CapacityTooLarge\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSizeRequired\",\"type\":\"uint256\"}],\"name\":\"InsufficientData\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IHistoricalOracle\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"observationAmount\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationOffset\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationIncrement\",\"type\":\"uint16\"}],\"internalType\":\"struct ManagedHistoricalAggregatorOracleBase.Config\",\"name\":\"config\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"InvalidConfig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"increment\",\"type\":\"uint256\"}],\"name\":\"InvalidIncrement\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"InvalidIndex\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"MissingRole\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"UpdatesArePaused\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"contract IHistoricalOracle\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"observationAmount\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationOffset\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationIncrement\",\"type\":\"uint16\"}],\"indexed\":false,\"internalType\":\"struct ManagedHistoricalAggregatorOracleBase.Config\",\"name\":\"oldConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IHistoricalOracle\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"observationAmount\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationOffset\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationIncrement\",\"type\":\"uint16\"}],\"indexed\":false,\"internalType\":\"struct ManagedHistoricalAggregatorOracleBase.Config\",\"name\":\"newConfig\",\"type\":\"tuple\"}],\"name\":\"ConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCapacity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCapacity\",\"type\":\"uint256\"}],\"name\":\"ObservationCapacityIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"}],\"name\":\"ObservationCapacityInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"areUpdatesPaused\",\"type\":\"bool\"}],\"name\":\"PauseStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenLiquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quoteTokenLiquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Updated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADRASTIA_CORE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADRASTIA_PERIPHERY_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADRASTIA_PROTOCOL_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"areUpdatesPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"canUpdate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"consult\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"price\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"tokenLiquidity\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"quoteTokenLiquidity\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAge\",\"type\":\"uint256\"}],\"name\":\"consult\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"price\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"tokenLiquidity\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"quoteTokenLiquidity\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"consultLiquidity\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"tokenLiquidity\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"quoteTokenLiquidity\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAge\",\"type\":\"uint256\"}],\"name\":\"consultLiquidity\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"tokenLiquidity\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"quoteTokenLiquidity\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAge\",\"type\":\"uint256\"}],\"name\":\"consultPrice\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"price\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"consultPrice\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"price\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getLatestObservation\",\"outputs\":[{\"components\":[{\"internalType\":\"uint112\",\"name\":\"price\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"tokenLiquidity\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"quoteTokenLiquidity\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"internalType\":\"struct ObservationLibrary.Observation\",\"name\":\"observation\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getObservationAt\",\"outputs\":[{\"components\":[{\"internalType\":\"uint112\",\"name\":\"price\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"tokenLiquidity\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"quoteTokenLiquidity\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"internalType\":\"struct ObservationLibrary.Observation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getObservations\",\"outputs\":[{\"components\":[{\"internalType\":\"uint112\",\"name\":\"price\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"tokenLiquidity\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"quoteTokenLiquidity\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"internalType\":\"struct ObservationLibrary.Observation[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"increment\",\"type\":\"uint256\"}],\"name\":\"getObservations\",\"outputs\":[{\"components\":[{\"internalType\":\"uint112\",\"name\":\"price\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"tokenLiquidity\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"quoteTokenLiquidity\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"internalType\":\"struct ObservationLibrary.Observation[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getObservationsCapacity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getObservationsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"needsUpdate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"observationAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"observationIncrement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"observationOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteTokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteTokenName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteTokenSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IHistoricalOracle\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"observationAmount\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationOffset\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"observationIncrement\",\"type\":\"uint16\"}],\"internalType\":\"struct ManagedHistoricalAggregatorOracleBase.Config\",\"name\":\"newConfig\",\"type\":\"tuple\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setObservationsCapacity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"setUpdatesPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"source\",\"outputs\":[{\"internalType\":\"contract IHistoricalOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"timeSinceLastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"update\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AdrastiaMedianFilteringOracle", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000d853d2d527f5f5e6f91b91f29299cb88a4f1f0ca000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000001f4d656469616e2046696c746572696e67204f7261636c65205745544820336400", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}