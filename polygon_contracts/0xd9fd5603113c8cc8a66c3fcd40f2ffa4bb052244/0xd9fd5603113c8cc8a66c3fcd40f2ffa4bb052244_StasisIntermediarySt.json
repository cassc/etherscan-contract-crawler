{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.14;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    function symbol() external view returns(string memory);\r\n    \r\n    function name() external view returns(string memory);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    /**\r\n     * @dev Returns the number of decimal places\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IYield {\r\n    function stake(address user, uint256 amount) external;\r\n}\r\n\r\n/**\r\n * @title Owner\r\n * @dev Set & change owner\r\n */\r\ncontract Ownable {\r\n\r\n    address private owner;\r\n    \r\n    // event for EVM logging\r\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\r\n    \r\n    // modifier to check if caller is owner\r\n    modifier onlyOwner() {\r\n        // If the first argument of 'require' evaluates to 'false', execution terminates and all\r\n        // changes to the state and to Ether balances are reverted.\r\n        // This used to consume all gas in old EVM versions, but not anymore.\r\n        // It is often a good idea to use 'require' to check if functions are called correctly.\r\n        // As a second argument, you can also provide an explanation about what went wrong.\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Set contract deployer as owner\r\n     */\r\n    constructor() {\r\n        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\r\n        emit OwnerSet(address(0), owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Change owner\r\n     * @param newOwner address of new owner\r\n     */\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        emit OwnerSet(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Return owner address \r\n     * @return address of owner\r\n     */\r\n    function getOwner() external view returns (address) {\r\n        return owner;\r\n    }\r\n}\r\n\r\ncontract StasisIntermediaryStaking is Ownable {\r\n\r\n    address[] public allReinvestors;\r\n\r\n    struct Reinvestor {\r\n        uint256 amount;\r\n        uint256 index;\r\n    }\r\n    \r\n    mapping ( address => Reinvestor ) public reinvestors;\r\n\r\n    uint256 public currentIndex;\r\n\r\n    address public customizedRewards;\r\n\r\n    uint256 public minToReinvest;\r\n\r\n    address public STSStaking;\r\n\r\n    address public STS;\r\n\r\n    constructor(\r\n        address STS_,\r\n        address STSStaking_,\r\n        address customizedRewards_\r\n    ) {\r\n        STS = STS_;\r\n        STSStaking = STSStaking_;\r\n        customizedRewards = customizedRewards_;\r\n    }\r\n\r\n    function setMinToReinvest(uint256 newMin) external onlyOwner {\r\n        minToReinvest = newMin;\r\n    }\r\n\r\n    function setCustomizedRewards(address newCustomizedRewards) external onlyOwner {\r\n        customizedRewards = newCustomizedRewards;\r\n    }\r\n\r\n    function setSTSStaking(address STSStaking_) external onlyOwner {\r\n        STSStaking = STSStaking_;\r\n    }\r\n\r\n    function setSTS(address STS_) external onlyOwner {\r\n        STS = STS_;\r\n    }\r\n\r\n    function resetCurrentIndex() external onlyOwner {\r\n        currentIndex = 0;\r\n    }\r\n\r\n    function withdraw(address token, uint256 amount) external onlyOwner {\r\n        IERC20(token).transfer(msg.sender, amount);\r\n    }\r\n\r\n    function addToReinvestAmount(address reinvestor, uint256 amount) external {\r\n        require(msg.sender == customizedRewards, 'Only Cust Rewards');\r\n\r\n        if (reinvestors[reinvestor].amount == 0) {\r\n            _addReinvestor(reinvestor);\r\n        }\r\n\r\n        unchecked {\r\n            reinvestors[reinvestor].amount += amount;\r\n        }\r\n    }\r\n\r\n    function trigger(uint256 amount) external {\r\n\r\n        for (uint i = 0; i < amount;) {\r\n            if (currentIndex >= allReinvestors.length) {\r\n                currentIndex = 0;\r\n                unchecked { ++i; }\r\n                continue;\r\n            }\r\n\r\n            if (reinvestors[allReinvestors[currentIndex]].amount > minToReinvest) {\r\n                _trigger(allReinvestors[currentIndex]);\r\n            }\r\n\r\n            unchecked { ++i; ++currentIndex; }\r\n        }\r\n    }\r\n\r\n    function _trigger(address reinvestor) internal {\r\n\r\n        // fetch amount to reinvest\r\n        uint amount = reinvestors[reinvestor].amount;\r\n\r\n        // remove reinvestor from list\r\n        _removeReinvestor(reinvestor);\r\n\r\n        // return out if zero amount\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        // approve and stake into staking\r\n        IERC20(STS).approve(STSStaking, amount);\r\n        IYield(STSStaking).stake(reinvestor, amount);\r\n    }\r\n\r\n    function isReinvestor(address reinvestor) public view returns (bool) {\r\n        if (allReinvestors.length <= reinvestors[reinvestor].index) {\r\n            return false;\r\n        }\r\n        return allReinvestors[reinvestors[reinvestor].index] == reinvestor;\r\n    }\r\n\r\n    function numReinvestors() external view returns (uint256) {\r\n        return allReinvestors.length;\r\n    }\r\n\r\n    function viewAllReinvestors() external view returns (address[] memory) {\r\n        return allReinvestors;\r\n    }\r\n\r\n    function _addReinvestor(address reinvestor) internal {\r\n        if (isReinvestor(reinvestor)) {\r\n            return;\r\n        }\r\n        reinvestors[reinvestor].index = allReinvestors.length;\r\n        allReinvestors.push(reinvestor);\r\n    }\r\n\r\n    function _removeReinvestor(address reinvestor) internal {\r\n\r\n        if (!isReinvestor(reinvestor)) {\r\n            delete reinvestors[reinvestor];\r\n            return;\r\n        }\r\n\r\n         // copy the last element of the array into their index\r\n        allReinvestors[\r\n            reinvestors[reinvestor].index\r\n        ] = allReinvestors[allReinvestors.length - 1];\r\n\r\n        // set the index of the last holder to be the removed index\r\n        reinvestors[\r\n            allReinvestors[allReinvestors.length - 1]\r\n        ].index = reinvestors[reinvestor].index;\r\n\r\n        // pop the last element off the array\r\n        allReinvestors.pop();\r\n\r\n        // save storage space\r\n        delete reinvestors[reinvestor];\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"STS_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"STSStaking_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"customizedRewards_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"STS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STSStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reinvestor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addToReinvestAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allReinvestors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"customizedRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reinvestor\",\"type\":\"address\"}],\"name\":\"isReinvestor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minToReinvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numReinvestors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reinvestors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetCurrentIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCustomizedRewards\",\"type\":\"address\"}],\"name\":\"setCustomizedRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMin\",\"type\":\"uint256\"}],\"name\":\"setMinToReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"STS_\",\"type\":\"address\"}],\"name\":\"setSTS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"STSStaking_\",\"type\":\"address\"}],\"name\":\"setSTSStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"trigger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewAllReinvestors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StasisIntermediaryStaking", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000fc3559771aa5a0666420f2365cf66139fbf4b37f000000000000000000000000c6b2c8783cb12436fa89253a746c5b92bff43f6b000000000000000000000000e882b69fae3cd4c3609f97a8b80ba3684d0de67f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://763e53c02d5127cb0a63c449390df35de9f128ab671bfb0cb906ffbb48d3fb99"}