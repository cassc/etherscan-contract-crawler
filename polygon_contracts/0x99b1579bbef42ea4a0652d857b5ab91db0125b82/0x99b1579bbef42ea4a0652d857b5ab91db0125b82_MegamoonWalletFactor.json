{"SourceCode": "pragma solidity >=0.7.0 <0.9.0;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n/// @title GnosisSafeProxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.io>\r\n/// @author Richard Meissner - <richard@gnosis.io>\r\ncontract GnosisSafeProxy {\r\n    // singleton always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal singleton;\r\n\r\n    /// @dev Constructor function sets address of singleton contract.\r\n    /// @param _singleton Singleton address.\r\n    constructor(address _singleton) {\r\n        require(_singleton != address(0), \"Invalid singleton address provided\");\r\n        singleton = _singleton;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    fallback() external payable {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let _singleton := and(\r\n                sload(0),\r\n                0xffffffffffffffffffffffffffffffffffffffff\r\n            )\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(\r\n                calldataload(0),\r\n                0xa619486e00000000000000000000000000000000000000000000000000000000\r\n            ) {\r\n                mstore(0, _singleton)\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(\r\n                gas(),\r\n                _singleton,\r\n                0,\r\n                calldatasize(),\r\n                0,\r\n                0\r\n            )\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) {\r\n                revert(0, returndatasize())\r\n            }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}\r\n\r\ninterface IGnosisSafeProxyFactory {\r\n    function createProxy(address singleton, bytes memory data)\r\n        external\r\n        returns (GnosisSafeProxy proxy);\r\n}\r\n\r\ninterface IUserValidator {\r\n    function viewWalletById(string calldata _id) external view returns (address);\r\n    function viewWalletByAddress(address _user) external view returns (address);\r\n    function isMegamoonWallet(address _wallet) external view returns (bool);\r\n}\r\n\r\ninterface IValidator {\r\n    function checkAdmin(address _admin, address _to) external view returns (bool);\r\n}\r\n\r\ninterface IMegamoonFactory {\r\n    function createGnosisSafeProxyWallet(bytes memory _initializer) external returns (address proxy);\r\n}\r\n\r\ncontract MegamoonWalletFactory is IUserValidator, Ownable, ReentrancyGuard {\r\n    address public gnosisSafeProxyFactory;\r\n    address public singleton;\r\n\r\n    IValidator public validator;\r\n\r\n    mapping(string => address) private _systemWallets;\r\n    mapping(address => address) private _userWallets;\r\n    mapping(address => bool) private _isSystemWallet;\r\n\r\n    event UserRegisteredById(address indexed wallet, string id);\r\n    event UserRegisteredByAddress(address indexed wallet, address user);\r\n    event SetFactory(address indexed factory);\r\n    event SetNewAdmin(address indexed admin);\r\n    event RemoveSystemWallet(string uid, address wallet);\r\n    event RemoveUserWallet(address user, address wallet);\r\n    event UpgradeSingleton(address singleton);\r\n\r\n    constructor(address _validator, address _factory, address _singleton) {\r\n        validator = IValidator(_validator);\r\n        gnosisSafeProxyFactory = _factory;\r\n        singleton = _singleton;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(validator.checkAdmin(msg.sender, address(this)), \"not megamoon admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyValidator() {\r\n        require(msg.sender == address(validator), \"not validator\");\r\n        _;\r\n    }\r\n\r\n    function viewWalletById(string calldata _id) external view onlyValidator returns (address) {\r\n        return _systemWallets[_id];\r\n    }\r\n\r\n    function viewWalletByAddress(address _user) external view onlyValidator returns (address) {\r\n        return _userWallets[_user];\r\n    }\r\n\r\n    function isMegamoonWallet(address _wallet) external view onlyValidator returns (bool) {\r\n        return _isSystemWallet[_wallet];\r\n    }\r\n    \r\n    function registerUserById(string calldata _id, bytes calldata _initializer) external nonReentrant onlyAdmin returns (address) {\r\n        if (_systemWallets[_id] != address(0)) {\r\n            return _systemWallets[_id];\r\n        }\r\n\r\n        GnosisSafeProxy proxy = IGnosisSafeProxyFactory(gnosisSafeProxyFactory).createProxy(singleton, _initializer);\r\n        address wallet = address(proxy);\r\n\r\n        require (wallet != address(0), \"create proxy wallet failed\");\r\n\r\n        _systemWallets[_id] = wallet;\r\n        _isSystemWallet[wallet] = true;\r\n\r\n        emit UserRegisteredById(wallet, _id);\r\n\r\n        return wallet;\r\n    }\r\n        \r\n    function registerUserByAddress(address _address, bytes memory _initializer) external nonReentrant onlyAdmin returns (address) {\r\n        if (_userWallets[_address] != address(0)) {\r\n            return _userWallets[_address];\r\n        }\r\n\r\n        GnosisSafeProxy proxy = IGnosisSafeProxyFactory(gnosisSafeProxyFactory).createProxy(singleton, _initializer);\r\n        address wallet = address(proxy);\r\n\r\n        require (wallet != address(0), \"create proxy wallet failed\");\r\n\r\n        _userWallets[_address] = wallet;\r\n\r\n        emit UserRegisteredByAddress(wallet, _address);\r\n\r\n        return wallet;\r\n    }\r\n\r\n    function upgradeSingleton(address _singleton) external onlyOwner {\r\n        require(_singleton != address(0), \"Zero address is not allowed\");\r\n\r\n        singleton = _singleton;\r\n\r\n        emit UpgradeSingleton(singleton);\r\n    }\r\n\r\n    function setFactory(address _factory) external onlyOwner {\r\n        require(_factory != address(0x0), \"invalid address\");\r\n\r\n        gnosisSafeProxyFactory = _factory;\r\n\r\n        emit SetFactory(_factory);\r\n    }\r\n\r\n    function removeSystemWallet(string calldata _id, address _wallet) external onlyOwner {\r\n        require(_systemWallets[_id] == _wallet, \"wallet address is not correct\");\r\n\r\n        _systemWallets[_id] = address(0);\r\n        _isSystemWallet[_wallet] = false;\r\n\r\n        emit RemoveSystemWallet(_id, _wallet);\r\n    }\r\n\r\n    function removeUserWallet(address _address, address _wallet) external onlyOwner {\r\n        require(_userWallets[_address] == _wallet, \"wallet address is not correct\");\r\n\r\n        _userWallets[_address] = address(0);\r\n\r\n        emit RemoveUserWallet(_address, _wallet);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_singleton\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"RemoveSystemWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"RemoveUserWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"SetFactory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"SetNewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"singleton\",\"type\":\"address\"}],\"name\":\"UpgradeSingleton\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"UserRegisteredByAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"UserRegisteredById\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"gnosisSafeProxyFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"isMegamoonWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_initializer\",\"type\":\"bytes\"}],\"name\":\"registerUserByAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_id\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_initializer\",\"type\":\"bytes\"}],\"name\":\"registerUserById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_id\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"removeSystemWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"removeUserWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"singleton\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_singleton\",\"type\":\"address\"}],\"name\":\"upgradeSingleton\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validator\",\"outputs\":[{\"internalType\":\"contract IValidator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewWalletByAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_id\",\"type\":\"string\"}],\"name\":\"viewWalletById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MegamoonWalletFactory", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000191ab030081ef9af7781063a7602f4e026eeaa32000000000000000000000000a6b71e26c5e0845f74c812102ca7114b6a896ab20000000000000000000000003e5c63644e683549055b9be8653de26e0b4cd36e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d1b26ce192cda056a1f31260a47912d0c2e7e6742aefeaa2148e5f2c2f72436f"}