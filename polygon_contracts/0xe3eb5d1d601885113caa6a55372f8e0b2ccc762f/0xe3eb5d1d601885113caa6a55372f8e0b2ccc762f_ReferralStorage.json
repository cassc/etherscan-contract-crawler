{"SourceCode": "// Sources flattened with hardhat v2.10.2 https://hardhat.org\r\n\r\n// File contracts/libraries/math/SafeMath.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/access/Governable.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract Governable {\r\n    address public gov;\r\n\r\n    constructor() public {\r\n        gov = msg.sender;\r\n    }\r\n\r\n    modifier onlyGov() {\r\n        require(msg.sender == gov, \"Governable: forbidden\");\r\n        _;\r\n    }\r\n\r\n    function setGov(address _gov) external onlyGov {\r\n        gov = _gov;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/peripherals/interfaces/ITimelock.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface ITimelock {\r\n    function setAdmin(address _admin) external;\r\n    function enableLeverage(address _vault) external;\r\n    function disableLeverage(address _vault) external;\r\n    function setIsLeverageEnabled(address _vault, bool _isLeverageEnabled) external;\r\n    function signalSetGov(address _target, address _gov) external;\r\n}\r\n\r\n\r\n// File contracts/referrals/interfaces/IReferralStorage.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IReferralStorage {\r\n    function codeOwners(bytes32 _code) external view returns (address);\r\n    function getTraderReferralInfo(address _account) external view returns (bytes32, address);\r\n    function setTraderReferralCode(address _account, bytes32 _code) external;\r\n    function setTier(uint256 _tierId, uint256 _totalRebate, uint256 _discountShare) external;\r\n    function setReferrerTier(address _referrer, uint256 _tierId) external;\r\n    function govSetCodeOwner(bytes32 _code, address _newAccount) external;\r\n}\r\n\r\n\r\n// File contracts/referrals/ReferralStorage.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ncontract ReferralStorage is Governable, IReferralStorage {\r\n    using SafeMath for uint256;\r\n\r\n    struct Tier {\r\n        uint256 totalRebate; // e.g. 2400 for 24%\r\n        uint256 discountShare; // 5000 for 50%/50%, 7000 for 30% rebates/70% discount\r\n    }\r\n\r\n    uint256 public constant BASIS_POINTS = 10000;\r\n\r\n    mapping (address => uint256) public referrerDiscountShares; // to override default value in tier\r\n    mapping (address => uint256) public referrerTiers; // link between user <> tier\r\n    mapping (uint256 => Tier) public tiers;\r\n\r\n    mapping (address => bool) public isHandler;\r\n\r\n    mapping (bytes32 => address) public override codeOwners;\r\n    mapping (address => bytes32) public traderReferralCodes;\r\n\r\n    event SetHandler(address handler, bool isActive);\r\n    event SetTraderReferralCode(address account, bytes32 code);\r\n    event SetTier(uint256 tierId, uint256 totalRebate, uint256 discountShare);\r\n    event SetReferrerTier(address referrer, uint256 tierId);\r\n    event SetReferrerDiscountShare(address referrer, uint256 discountShare);\r\n    event RegisterCode(address account, bytes32 code);\r\n    event SetCodeOwner(address account, address newAccount, bytes32 code);\r\n    event GovSetCodeOwner(bytes32 code, address newAccount);\r\n\r\n    modifier onlyHandler() {\r\n        require(isHandler[msg.sender], \"ReferralStorage: forbidden\");\r\n        _;\r\n    }\r\n\r\n    function setHandler(address _handler, bool _isActive) external onlyGov {\r\n        isHandler[_handler] = _isActive;\r\n        emit SetHandler(_handler, _isActive);\r\n    }\r\n\r\n    function setTier(uint256 _tierId, uint256 _totalRebate, uint256 _discountShare) external override onlyGov {\r\n        require(_totalRebate <= BASIS_POINTS, \"ReferralStorage: invalid totalRebate\");\r\n        require(_discountShare <= BASIS_POINTS, \"ReferralStorage: invalid discountShare\");\r\n\r\n        Tier memory tier = tiers[_tierId];\r\n        tier.totalRebate = _totalRebate;\r\n        tier.discountShare = _discountShare;\r\n        tiers[_tierId] = tier;\r\n        emit SetTier(_tierId, _totalRebate, _discountShare);\r\n    }\r\n\r\n    function setReferrerTier(address _referrer, uint256 _tierId) external override onlyGov {\r\n        referrerTiers[_referrer] = _tierId;\r\n        emit SetReferrerTier(_referrer, _tierId);\r\n    }\r\n\r\n    function setReferrerDiscountShare(uint256 _discountShare) external {\r\n        require(_discountShare <= BASIS_POINTS, \"ReferralStorage: invalid discountShare\");\r\n\r\n        referrerDiscountShares[msg.sender] = _discountShare;\r\n        emit SetReferrerDiscountShare(msg.sender, _discountShare);\r\n    }\r\n\r\n    function setTraderReferralCode(address _account, bytes32 _code) external override onlyHandler {\r\n        _setTraderReferralCode(_account, _code);\r\n    }\r\n\r\n    function setTraderReferralCodeByUser(bytes32 _code) external {\r\n        _setTraderReferralCode(msg.sender, _code);\r\n    }\r\n\r\n    function registerCode(bytes32 _code) external {\r\n        require(_code != bytes32(0), \"ReferralStorage: invalid _code\");\r\n        require(codeOwners[_code] == address(0), \"ReferralStorage: code already exists\");\r\n\r\n        codeOwners[_code] = msg.sender;\r\n        emit RegisterCode(msg.sender, _code);\r\n    }\r\n\r\n    function setCodeOwner(bytes32 _code, address _newAccount) external {\r\n        require(_code != bytes32(0), \"ReferralStorage: invalid _code\");\r\n\r\n        address account = codeOwners[_code];\r\n        require(msg.sender == account, \"ReferralStorage: forbidden\");\r\n\r\n        codeOwners[_code] = _newAccount;\r\n        emit SetCodeOwner(msg.sender, _newAccount, _code);\r\n    }\r\n\r\n    function govSetCodeOwner(bytes32 _code, address _newAccount) external override onlyGov {\r\n        require(_code != bytes32(0), \"ReferralStorage: invalid _code\");\r\n\r\n        codeOwners[_code] = _newAccount;\r\n        emit GovSetCodeOwner(_code, _newAccount);\r\n    }\r\n\r\n    function getTraderReferralInfo(address _account) external override view returns (bytes32, address) {\r\n        bytes32 code = traderReferralCodes[_account];\r\n        address referrer;\r\n        if (code != bytes32(0)) {\r\n            referrer = codeOwners[code];\r\n        }\r\n        return (code, referrer);\r\n    }\r\n\r\n    function _setTraderReferralCode(address _account, bytes32 _code) private {\r\n        traderReferralCodes[_account] = _code;\r\n        emit SetTraderReferralCode(_account, _code);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAccount\",\"type\":\"address\"}],\"name\":\"GovSetCodeOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"}],\"name\":\"RegisterCode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"}],\"name\":\"SetCodeOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"SetHandler\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"discountShare\",\"type\":\"uint256\"}],\"name\":\"SetReferrerDiscountShare\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"}],\"name\":\"SetReferrerTier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRebate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"discountShare\",\"type\":\"uint256\"}],\"name\":\"SetTier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"}],\"name\":\"SetTraderReferralCode\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"codeOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getTraderReferralInfo\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_code\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_newAccount\",\"type\":\"address\"}],\"name\":\"govSetCodeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHandler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrerDiscountShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrerTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_code\",\"type\":\"bytes32\"}],\"name\":\"registerCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_code\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_newAccount\",\"type\":\"address\"}],\"name\":\"setCodeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_handler\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_discountShare\",\"type\":\"uint256\"}],\"name\":\"setReferrerDiscountShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tierId\",\"type\":\"uint256\"}],\"name\":\"setReferrerTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRebate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_discountShare\",\"type\":\"uint256\"}],\"name\":\"setTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_code\",\"type\":\"bytes32\"}],\"name\":\"setTraderReferralCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_code\",\"type\":\"bytes32\"}],\"name\":\"setTraderReferralCodeByUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalRebate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"traderReferralCodes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ReferralStorage", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://17df1a719e6aaa4177fc0a5da1848b010261f46f24d3fe13661c2ce89cb2349b"}