{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: @openzeppelin/contracts/utils/math/Math.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    enum Rounding {\r\n        Down, // Toward negative infinity\r\n        Up, // Toward infinity\r\n        Zero // Toward zero\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a == 0 ? 0 : (a - 1) / b + 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\r\n     * with further edits by Uniswap Labs also under MIT license.\r\n     */\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n            // variables such that product = prod1 * 2^256 + prod0.\r\n            uint256 prod0; // Least significant 256 bits of the product\r\n            uint256 prod1; // Most significant 256 bits of the product\r\n            assembly {\r\n                let mm := mulmod(x, y, not(0))\r\n                prod0 := mul(x, y)\r\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n            }\r\n\r\n            // Handle non-overflow cases, 256 by 256 division.\r\n            if (prod1 == 0) {\r\n                return prod0 / denominator;\r\n            }\r\n\r\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n            require(denominator > prod1);\r\n\r\n            ///////////////////////////////////////////////\r\n            // 512 by 256 division.\r\n            ///////////////////////////////////////////////\r\n\r\n            // Make division exact by subtracting the remainder from [prod1 prod0].\r\n            uint256 remainder;\r\n            assembly {\r\n                // Compute remainder using mulmod.\r\n                remainder := mulmod(x, y, denominator)\r\n\r\n                // Subtract 256 bit number from 512 bit number.\r\n                prod1 := sub(prod1, gt(remainder, prod0))\r\n                prod0 := sub(prod0, remainder)\r\n            }\r\n\r\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\r\n            // See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\r\n            uint256 twos = denominator & (~denominator + 1);\r\n            assembly {\r\n                // Divide denominator by twos.\r\n                denominator := div(denominator, twos)\r\n\r\n                // Divide [prod1 prod0] by twos.\r\n                prod0 := div(prod0, twos)\r\n\r\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n\r\n            // Shift in bits from prod1 into prod0.\r\n            prod0 |= prod1 * twos;\r\n\r\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n            // four bits. That is, denominator * inv = 1 mod 2^4.\r\n            uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\r\n            // in modular arithmetic, doubling the correct bits in each step.\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inverse;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n     */\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator,\r\n        Rounding rounding\r\n    ) internal pure returns (uint256) {\r\n        uint256 result = mulDiv(x, y, denominator);\r\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\r\n     *\r\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n     */\r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n        //\r\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\r\n        //\r\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\r\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\r\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\r\n        //\r\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\r\n        uint256 result = 1 << (log2(a) >> 1);\r\n\r\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n        // into the expected uint128 result.\r\n        unchecked {\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            return min(result, a / result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates sqrt(a), following the selected rounding direction.\r\n     */\r\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = sqrt(a);\r\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 128;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 64;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 32;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 16;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                value >>= 8;\r\n                result += 8;\r\n            }\r\n            if (value >> 4 > 0) {\r\n                value >>= 4;\r\n                result += 4;\r\n            }\r\n            if (value >> 2 > 0) {\r\n                value >>= 2;\r\n                result += 2;\r\n            }\r\n            if (value >> 1 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log2(value);\r\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >= 10**64) {\r\n                value /= 10**64;\r\n                result += 64;\r\n            }\r\n            if (value >= 10**32) {\r\n                value /= 10**32;\r\n                result += 32;\r\n            }\r\n            if (value >= 10**16) {\r\n                value /= 10**16;\r\n                result += 16;\r\n            }\r\n            if (value >= 10**8) {\r\n                value /= 10**8;\r\n                result += 8;\r\n            }\r\n            if (value >= 10**4) {\r\n                value /= 10**4;\r\n                result += 4;\r\n            }\r\n            if (value >= 10**2) {\r\n                value /= 10**2;\r\n                result += 2;\r\n            }\r\n            if (value >= 10**1) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log10(value);\r\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     *\r\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\r\n     */\r\n    function log256(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 16;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 8;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 4;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 2;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log256(value);\r\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            uint256 length = Math.log10(value) + 1;\r\n            string memory buffer = new string(length);\r\n            uint256 ptr;\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                ptr := add(buffer, add(32, length))\r\n            }\r\n            while (true) {\r\n                ptr--;\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\r\n                }\r\n                value /= 10;\r\n                if (value == 0) break;\r\n            }\r\n            return buffer;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            return toHexString(value, Math.log256(value) + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\r\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```solidity\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n *\r\n * [WARNING]\r\n * ====\r\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\r\n * unusable.\r\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\r\n *\r\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\r\n * array of EnumerableSet.\r\n * ====\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastValue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastValue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        bytes32[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n// File: contracts/ME-RarMinRoyaltieAIO/ME-RoyaltieAIO.sol\r\n\r\n\r\n\r\n// import contracts/ME-RarMinRoyaltieAIO/ME-RoyaltieAIO.sol\";\r\n\r\npragma solidity ^0.8.18;\r\n\r\n// LibPart.sol =============================================================================================================|\r\n\r\n    library LibPart {\r\n        bytes32 public constant TYPE_HASH = keccak256(\"Part(address account,uint96 value)\");\r\n\r\n        struct Part {\r\n            address payable account;\r\n            uint96 value;\r\n        }\r\n\r\n        function hash(Part memory part) internal pure returns (bytes32) {\r\n            return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\r\n        }\r\n    }\r\n\r\n\r\n// LibRoyaltiesV2.sol ======================================================================================================|\r\n\r\n    library LibRoyaltiesV2 {\r\n        /*\r\n        * bytes4(keccak256('getRoyalties(LibAsset.AssetType)')) == 0x44c74bcc\r\n        */\r\n        bytes4 constant _INTERFACE_ID_ROYALTIES = 0x44c74bcc;\r\n    }\r\n\r\n\r\n// RoyaltiesV2.sol =========================================================================================================|\r\n\r\n    interface RoyaltiesV2 {\r\n        event RoyaltiesSet(uint256 tokenId, LibPart.Part[] royalties);\r\n\r\n        function getRaribleV2Royalties(uint256 tokenId) external view returns (LibPart.Part[] memory);\r\n    }\r\n\r\n\r\n// AbstractRoyalties.sol ===================================================================================================|\r\n\r\n    abstract contract AbstractRoyalties {\r\n        mapping (uint256 => LibPart.Part[]) internal royalties;    \r\n\r\n        function _saveRoyalties(uint256 _tokenId, LibPart.Part[] memory _royalties) internal {\r\n            for (uint i = 0; i < _royalties.length; i++) {\r\n                require(_royalties[i].account != address(0x0), \"Recipient should be present\");\r\n                require(_royalties[i].value != 0, \"Royalty value should be positive\");\r\n                royalties[_tokenId].push(_royalties[i]);\r\n            }\r\n            _onRoyaltiesSet(_tokenId, _royalties);\r\n        }\r\n\r\n        function _updateAccount(uint256 _tokenId, address _from, address _to) internal {\r\n            uint length = royalties[_tokenId].length;\r\n            for(uint i = 0; i < length; i++) {\r\n                if (royalties[_tokenId][i].account == _from) {\r\n                    royalties[_tokenId][i].account = payable(address(uint160(_to)));\r\n                }\r\n            }\r\n        }\r\n\r\n        function _onRoyaltiesSet(uint256 _tokenId, LibPart.Part[] memory _royalties) virtual internal;\r\n    }\r\n\r\n\r\n// IRoyaltiesProvider.sol ==================================================================================================|\r\n\r\n    interface IRoyaltiesProvider {\r\n        function getRoyalties(address token, uint tokenId) external returns (LibPart.Part[] memory);\r\n    }\r\n\r\n\r\n// RoyaltiesV2Impl.sol =====================================================================================================|\r\n\r\n    contract RoyaltiesV2Impl is AbstractRoyalties, RoyaltiesV2 {\r\n        \r\n        function getRaribleV2Royalties(uint256 tokenId) override external view returns (LibPart.Part[] memory) {   \r\n            return royalties[tokenId];\r\n        }\r\n\r\n        function _onRoyaltiesSet(uint256 _tokenId, LibPart.Part[] memory _royalties) override internal {\r\n            emit RoyaltiesSet(_tokenId, _royalties);\r\n        }\r\n    }\r\n// End ME-RoyaltiesAIO =====================================================================================================|\r\n\r\n\r\n\r\n// File: contracts/PolygonBasicContractIntegration/ContextMixin.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract ContextMixin {\r\n    function msgSender() internal view returns (address payable sender)\r\n    {\r\n        if (msg.sender == address(this)) {\r\n            bytes memory array = msg.data;\r\n            uint256 index = msg.data.length;\r\n            assembly {\r\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\r\n                sender := and(\r\n                    mload(add(array, index)),\r\n                    0xffffffffffffffffffffffffffffffffffffffff\r\n                )\r\n            }\r\n        } else {\r\n            sender = payable(msg.sender);\r\n        }\r\n        return sender;\r\n    }\r\n}\r\n\r\n\r\n// File: @openzeppelin/contracts/utils/Counters.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable2Step.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership} and {acceptOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available all functions\r\n * from parent (Ownable).\r\n */\r\nabstract contract Ownable2Step is Ownable {\r\n    address private _pendingOwner;\r\n\r\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Returns the address of the pending owner.\r\n     */\r\n    function pendingOwner() public view virtual returns (address) {\r\n        return _pendingOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\r\n        _pendingOwner = newOwner;\r\n        emit OwnershipTransferStarted(owner(), newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual override {\r\n        delete _pendingOwner;\r\n        super._transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev The new owner accepts the ownership transfer.\r\n     */\r\n    function acceptOwnership() public virtual {\r\n        address sender = _msgSender();\r\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\r\n        _transferOwnership(sender);\r\n    }\r\n}\r\n\r\n// File: contracts/ME-DefaultOperatorFiltererAIO/ME-OperatorFiltererAIO.sol\r\n\r\n\r\n\r\n// import \"contracts/ME-DefaultOperatorFiltererAIO/ME-OperatorFiltererAIO.sol\";\r\n\r\npragma solidity ^0.8.18;\r\n\r\n// import for >> OwnedRegistrant.sol =============================================================================================|\r\n\r\n\r\n// import for >> OperatorFilterRegistry.sol ======================================================================================|\r\n\r\n\r\n\r\n\r\n// Constants.sol =================================================================================================================|\r\n\r\n    address constant CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS = 0x000000000000AAeB6D7670E522A718067333cd4E;\r\n    address constant CANONICAL_CORI_SUBSCRIPTION = 0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6;\r\n\r\n\r\n// OperatorFilterRegistryErrorsAndEvents.sol =====================================================================================|\r\n\r\n    contract OperatorFilterRegistryErrorsAndEvents {\r\n        /// @notice Emitted when trying to register an address that has no code.\r\n        error CannotFilterEOAs();\r\n\r\n        /// @notice Emitted when trying to add an address that is already filtered.\r\n        error AddressAlreadyFiltered(address operator);\r\n\r\n        /// @notice Emitted when trying to remove an address that is not filtered.\r\n        error AddressNotFiltered(address operator);\r\n\r\n        /// @notice Emitted when trying to add a codehash that is already filtered.\r\n        error CodeHashAlreadyFiltered(bytes32 codeHash);\r\n\r\n        /// @notice Emitted when trying to remove a codehash that is not filtered.\r\n        error CodeHashNotFiltered(bytes32 codeHash);\r\n\r\n        /// @notice Emitted when the caller is not the address or EIP-173 \"owner()\"\r\n        error OnlyAddressOrOwner();\r\n\r\n        /// @notice Emitted when the registrant is not registered.\r\n        error NotRegistered(address registrant);\r\n\r\n        /// @notice Emitted when the registrant is already registered.\r\n        error AlreadyRegistered();\r\n\r\n        /// @notice Emitted when the registrant is already subscribed.\r\n        error AlreadySubscribed(address subscription);\r\n\r\n        /// @notice Emitted when the registrant is not subscribed.\r\n        error NotSubscribed();\r\n\r\n        /// @notice Emitted when trying to update a registration where the registrant is already subscribed.\r\n        error CannotUpdateWhileSubscribed(address subscription);\r\n\r\n        /// @notice Emitted when trying to subscribe to itself.\r\n        error CannotSubscribeToSelf();\r\n\r\n        /// @notice Emitted when trying to subscribe to the zero address.\r\n        error CannotSubscribeToZeroAddress();\r\n\r\n        /// @notice Emitted when trying to register and the contract is not ownable (EIP-173 \"owner()\")\r\n        error NotOwnable();\r\n\r\n        /// @notice Emitted when an address is filtered.\r\n        error AddressFiltered(address filtered);\r\n\r\n        /// @notice Emitted when a codeHash is filtered.\r\n        error CodeHashFiltered(address account, bytes32 codeHash);\r\n\r\n        /// @notice Emited when trying to register to a registrant with a subscription.\r\n        error CannotSubscribeToRegistrantWithSubscription(address registrant);\r\n\r\n        /// @notice Emitted when trying to copy a registration from itself.\r\n        error CannotCopyFromSelf();\r\n\r\n        /// @notice Emitted when a registration is updated.\r\n        event RegistrationUpdated(address indexed registrant, bool indexed registered);\r\n\r\n        /// @notice Emitted when an operator is updated.\r\n        event OperatorUpdated(address indexed registrant, address indexed operator, bool indexed filtered);\r\n\r\n        /// @notice Emitted when multiple operators are updated.\r\n        event OperatorsUpdated(address indexed registrant, address[] operators, bool indexed filtered);\r\n\r\n        /// @notice Emitted when a codeHash is updated.\r\n        event CodeHashUpdated(address indexed registrant, bytes32 indexed codeHash, bool indexed filtered);\r\n\r\n        /// @notice Emitted when multiple codeHashes are updated.\r\n        event CodeHashesUpdated(address indexed registrant, bytes32[] codeHashes, bool indexed filtered);\r\n\r\n        /// @notice Emitted when a subscription is updated.\r\n        event SubscriptionUpdated(address indexed registrant, address indexed subscription, bool indexed subscribed);\r\n    }\r\n\r\n\r\n// IOperatorFilterRegistry.sol ===================================================================================================|\r\n\r\n    interface IOperatorFilterRegistry {\r\n        /**\r\n        * @notice Returns true if operator is not filtered for a given token, either by address or codeHash. Also returns\r\n        *         true if supplied registrant address is not registered.\r\n        */\r\n        function isOperatorAllowed(address registrant, address operator) external view returns (bool);\r\n\r\n        /**\r\n        * @notice Registers an address with the registry. May be called by address itself or by EIP-173 owner.\r\n        */\r\n        function register(address registrant) external;\r\n\r\n        /**\r\n        * @notice Registers an address with the registry and \"subscribes\" to another address's filtered operators and codeHashes.\r\n        */\r\n        function registerAndSubscribe(address registrant, address subscription) external;\r\n\r\n        /**\r\n        * @notice Registers an address with the registry and copies the filtered operators and codeHashes from another\r\n        *         address without subscribing.\r\n        */\r\n        function registerAndCopyEntries(address registrant, address registrantToCopy) external;\r\n\r\n        /**\r\n        * @notice Unregisters an address with the registry and removes its subscription. May be called by address itself or by EIP-173 owner.\r\n        *         Note that this does not remove any filtered addresses or codeHashes.\r\n        *         Also note that any subscriptions to this registrant will still be active and follow the existing filtered addresses and codehashes.\r\n        */\r\n        function unregister(address addr) external;\r\n\r\n        /**\r\n        * @notice Update an operator address for a registered address - when filtered is true, the operator is filtered.\r\n        */\r\n        function updateOperator(address registrant, address operator, bool filtered) external;\r\n\r\n        /**\r\n        * @notice Update multiple operators for a registered address - when filtered is true, the operators will be filtered. Reverts on duplicates.\r\n        */\r\n        function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\r\n\r\n        /**\r\n        * @notice Update a codeHash for a registered address - when filtered is true, the codeHash is filtered.\r\n        */\r\n        function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\r\n\r\n        /**\r\n        * @notice Update multiple codeHashes for a registered address - when filtered is true, the codeHashes will be filtered. Reverts on duplicates.\r\n        */\r\n        function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\r\n\r\n        /**\r\n        * @notice Subscribe an address to another registrant's filtered operators and codeHashes. Will remove previous\r\n        *         subscription if present.\r\n        *         Note that accounts with subscriptions may go on to subscribe to other accounts - in this case,\r\n        *         subscriptions will not be forwarded. Instead the former subscription's existing entries will still be\r\n        *         used.\r\n        */\r\n        function subscribe(address registrant, address registrantToSubscribe) external;\r\n\r\n        /**\r\n        * @notice Unsubscribe an address from its current subscribed registrant, and optionally copy its filtered operators and codeHashes.\r\n        */\r\n        function unsubscribe(address registrant, bool copyExistingEntries) external;\r\n\r\n        /**\r\n        * @notice Get the subscription address of a given registrant, if any.\r\n        */\r\n        function subscriptionOf(address addr) external returns (address registrant);\r\n\r\n        /**\r\n        * @notice Get the set of addresses subscribed to a given registrant.\r\n        *         Note that order is not guaranteed as updates are made.\r\n        */\r\n        function subscribers(address registrant) external returns (address[] memory);\r\n\r\n        /**\r\n        * @notice Get the subscriber at a given index in the set of addresses subscribed to a given registrant.\r\n        *         Note that order is not guaranteed as updates are made.\r\n        */\r\n        function subscriberAt(address registrant, uint256 index) external returns (address);\r\n\r\n        /**\r\n        * @notice Copy filtered operators and codeHashes from a different registrantToCopy to addr.\r\n        */\r\n        function copyEntriesOf(address registrant, address registrantToCopy) external;\r\n\r\n        /**\r\n        * @notice Returns true if operator is filtered by a given address or its subscription.\r\n        */\r\n        function isOperatorFiltered(address registrant, address operator) external returns (bool);\r\n\r\n        /**\r\n        * @notice Returns true if the hash of an address's code is filtered by a given address or its subscription.\r\n        */\r\n        function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\r\n\r\n        /**\r\n        * @notice Returns true if a codeHash is filtered by a given address or its subscription.\r\n        */\r\n        function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\r\n\r\n        /**\r\n        * @notice Returns a list of filtered operators for a given address or its subscription.\r\n        */\r\n        function filteredOperators(address addr) external returns (address[] memory);\r\n\r\n        /**\r\n        * @notice Returns the set of filtered codeHashes for a given address or its subscription.\r\n        *         Note that order is not guaranteed as updates are made.\r\n        */\r\n        function filteredCodeHashes(address addr) external returns (bytes32[] memory);\r\n\r\n        /**\r\n        * @notice Returns the filtered operator at the given index of the set of filtered operators for a given address or\r\n        *         its subscription.\r\n        *         Note that order is not guaranteed as updates are made.\r\n        */\r\n        function filteredOperatorAt(address registrant, uint256 index) external returns (address);\r\n\r\n        /**\r\n        * @notice Returns the filtered codeHash at the given index of the list of filtered codeHashes for a given address or\r\n        *         its subscription.\r\n        *         Note that order is not guaranteed as updates are made.\r\n        */\r\n        function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\r\n\r\n        /**\r\n        * @notice Returns true if an address has registered\r\n        */\r\n        function isRegistered(address addr) external returns (bool);\r\n\r\n        /**\r\n        * @dev Convenience method to compute the code hash of an arbitrary contract\r\n        */\r\n        function codeHashOf(address addr) external returns (bytes32);\r\n    }\r\n\r\n\r\n// OwnedRegistrant.sol ===========================================================================================================|\r\n\r\n    contract OwnedRegistrant is Ownable2Step {\r\n        /// @dev The constructor that is called when the contract is being deployed.\r\n        constructor(address _owner) {\r\n            IOperatorFilterRegistry(CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS).register(address(this));\r\n            transferOwnership(_owner);\r\n        }\r\n    }\r\n\r\n\r\n// OperatorFilterRegistry.sol ====================================================================================================|\r\n\r\n    /**\r\n    * @title  OperatorFilterRegistry\r\n    * @notice Borrows heavily from the QQL BlacklistOperatorFilter contract:\r\n    *         https://github.com/qql-art/contracts/blob/main/contracts/BlacklistOperatorFilter.sol\r\n    * @notice This contracts allows tokens or token owners to register specific addresses or codeHashes that may be\r\n    * *       restricted according to the isOperatorAllowed function.\r\n    */\r\n    contract OperatorFilterRegistry is IOperatorFilterRegistry, OperatorFilterRegistryErrorsAndEvents {\r\n        using EnumerableSet for EnumerableSet.AddressSet;\r\n        using EnumerableSet for EnumerableSet.Bytes32Set;\r\n\r\n        /// @dev initialized accounts have a nonzero codehash (see https://eips.ethereum.org/EIPS/eip-1052)\r\n        /// Note that this will also be a smart contract's codehash when making calls from its constructor.\r\n        bytes32 constant EOA_CODEHASH = keccak256(\"\");\r\n\r\n        mapping(address => EnumerableSet.AddressSet) private _filteredOperators;\r\n        mapping(address => EnumerableSet.Bytes32Set) private _filteredCodeHashes;\r\n        mapping(address => address) private _registrations;\r\n        mapping(address => EnumerableSet.AddressSet) private _subscribers;\r\n\r\n        /**\r\n        * @notice Restricts method caller to the address or EIP-173 \"owner()\"\r\n        */\r\n        modifier onlyAddressOrOwner(address addr) {\r\n            if (msg.sender != addr) {\r\n                try Ownable(addr).owner() returns (address owner) {\r\n                    if (msg.sender != owner) {\r\n                        revert OnlyAddressOrOwner();\r\n                    }\r\n                } catch (bytes memory reason) {\r\n                    if (reason.length == 0) {\r\n                        revert NotOwnable();\r\n                    } else {\r\n                        /// @solidity memory-safe-assembly\r\n                        assembly {\r\n                            revert(add(32, reason), mload(reason))\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            _;\r\n        }\r\n\r\n        /**\r\n        * @notice Returns true if operator is not filtered for a given token, either by address or codeHash. Also returns\r\n        *         true if supplied registrant address is not registered.\r\n        *         Note that this method will *revert* if an operator or its codehash is filtered with an error that is\r\n        *         more informational than a false boolean, so smart contracts that query this method for informational\r\n        *         purposes will need to wrap in a try/catch or perform a low-level staticcall in order to handle the case\r\n        *         that an operator is filtered.\r\n        */\r\n        function isOperatorAllowed(address registrant, address operator) external view returns (bool) {\r\n            address registration = _registrations[registrant];\r\n            if (registration != address(0)) {\r\n                EnumerableSet.AddressSet storage filteredOperatorsRef;\r\n                EnumerableSet.Bytes32Set storage filteredCodeHashesRef;\r\n\r\n                filteredOperatorsRef = _filteredOperators[registration];\r\n                filteredCodeHashesRef = _filteredCodeHashes[registration];\r\n\r\n                if (filteredOperatorsRef.contains(operator)) {\r\n                    revert AddressFiltered(operator);\r\n                }\r\n                if (operator.code.length > 0) {\r\n                    bytes32 codeHash = operator.codehash;\r\n                    if (filteredCodeHashesRef.contains(codeHash)) {\r\n                        revert CodeHashFiltered(operator, codeHash);\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        //////////////////\r\n        // AUTH METHODS //\r\n        //////////////////\r\n\r\n        /**\r\n        * @notice Registers an address with the registry. May be called by address itself or by EIP-173 owner.\r\n        */\r\n        function register(address registrant) external onlyAddressOrOwner(registrant) {\r\n            if (_registrations[registrant] != address(0)) {\r\n                revert AlreadyRegistered();\r\n            }\r\n            _registrations[registrant] = registrant;\r\n            emit RegistrationUpdated(registrant, true);\r\n        }\r\n\r\n        /**\r\n        * @notice Unregisters an address with the registry and removes its subscription. May be called by address itself or by EIP-173 owner.\r\n        *         Note that this does not remove any filtered addresses or codeHashes.\r\n        *         Also note that any subscriptions to this registrant will still be active and follow the existing filtered addresses and codehashes.\r\n        */\r\n        function unregister(address registrant) external onlyAddressOrOwner(registrant) {\r\n            address registration = _registrations[registrant];\r\n            if (registration == address(0)) {\r\n                revert NotRegistered(registrant);\r\n            }\r\n            if (registration != registrant) {\r\n                _subscribers[registration].remove(registrant);\r\n                emit SubscriptionUpdated(registrant, registration, false);\r\n            }\r\n            _registrations[registrant] = address(0);\r\n            emit RegistrationUpdated(registrant, false);\r\n        }\r\n\r\n        /**\r\n        * @notice Registers an address with the registry and \"subscribes\" to another address's filtered operators and codeHashes.\r\n        */\r\n        function registerAndSubscribe(address registrant, address subscription) external onlyAddressOrOwner(registrant) {\r\n            address registration = _registrations[registrant];\r\n            if (registration != address(0)) {\r\n                revert AlreadyRegistered();\r\n            }\r\n            if (registrant == subscription) {\r\n                revert CannotSubscribeToSelf();\r\n            }\r\n            address subscriptionRegistration = _registrations[subscription];\r\n            if (subscriptionRegistration == address(0)) {\r\n                revert NotRegistered(subscription);\r\n            }\r\n            if (subscriptionRegistration != subscription) {\r\n                revert CannotSubscribeToRegistrantWithSubscription(subscription);\r\n            }\r\n\r\n            _registrations[registrant] = subscription;\r\n            _subscribers[subscription].add(registrant);\r\n            emit RegistrationUpdated(registrant, true);\r\n            emit SubscriptionUpdated(registrant, subscription, true);\r\n        }\r\n\r\n        /**\r\n        * @notice Registers an address with the registry and copies the filtered operators and codeHashes from another\r\n        *         address without subscribing.\r\n        */\r\n        function registerAndCopyEntries(address registrant, address registrantToCopy)\r\n            external\r\n            onlyAddressOrOwner(registrant)\r\n        {\r\n            if (registrantToCopy == registrant) {\r\n                revert CannotCopyFromSelf();\r\n            }\r\n            address registration = _registrations[registrant];\r\n            if (registration != address(0)) {\r\n                revert AlreadyRegistered();\r\n            }\r\n            address registrantRegistration = _registrations[registrantToCopy];\r\n            if (registrantRegistration == address(0)) {\r\n                revert NotRegistered(registrantToCopy);\r\n            }\r\n            _registrations[registrant] = registrant;\r\n            emit RegistrationUpdated(registrant, true);\r\n            _copyEntries(registrant, registrantToCopy);\r\n        }\r\n\r\n        /**\r\n        * @notice Update an operator address for a registered address - when filtered is true, the operator is filtered.\r\n        */\r\n        function updateOperator(address registrant, address operator, bool filtered)\r\n            external\r\n            onlyAddressOrOwner(registrant)\r\n        {\r\n            address registration = _registrations[registrant];\r\n            if (registration == address(0)) {\r\n                revert NotRegistered(registrant);\r\n            }\r\n            if (registration != registrant) {\r\n                revert CannotUpdateWhileSubscribed(registration);\r\n            }\r\n            EnumerableSet.AddressSet storage filteredOperatorsRef = _filteredOperators[registrant];\r\n\r\n            if (!filtered) {\r\n                bool removed = filteredOperatorsRef.remove(operator);\r\n                if (!removed) {\r\n                    revert AddressNotFiltered(operator);\r\n                }\r\n            } else {\r\n                bool added = filteredOperatorsRef.add(operator);\r\n                if (!added) {\r\n                    revert AddressAlreadyFiltered(operator);\r\n                }\r\n            }\r\n            emit OperatorUpdated(registrant, operator, filtered);\r\n        }\r\n\r\n        /**\r\n        * @notice Update a codeHash for a registered address - when filtered is true, the codeHash is filtered.\r\n        *         Note that this will allow adding the bytes32(0) codehash, which could result in unexpected behavior,\r\n        *         since calling `isCodeHashFiltered` will return true for bytes32(0), which is the codeHash of any\r\n        *         un-initialized account. Since un-initialized accounts have no code, the registry will not validate\r\n        *         that an un-initalized account's codeHash is not filtered. By the time an account is able to\r\n        *         act as an operator (an account is initialized or a smart contract exclusively in the context of its\r\n        *         constructor),  it will have a codeHash of EOA_CODEHASH, which cannot be filtered.\r\n        */\r\n        function updateCodeHash(address registrant, bytes32 codeHash, bool filtered)\r\n            external\r\n            onlyAddressOrOwner(registrant)\r\n        {\r\n            if (codeHash == EOA_CODEHASH) {\r\n                revert CannotFilterEOAs();\r\n            }\r\n            address registration = _registrations[registrant];\r\n            if (registration == address(0)) {\r\n                revert NotRegistered(registrant);\r\n            }\r\n            if (registration != registrant) {\r\n                revert CannotUpdateWhileSubscribed(registration);\r\n            }\r\n            EnumerableSet.Bytes32Set storage filteredCodeHashesRef = _filteredCodeHashes[registrant];\r\n\r\n            if (!filtered) {\r\n                bool removed = filteredCodeHashesRef.remove(codeHash);\r\n                if (!removed) {\r\n                    revert CodeHashNotFiltered(codeHash);\r\n                }\r\n            } else {\r\n                bool added = filteredCodeHashesRef.add(codeHash);\r\n                if (!added) {\r\n                    revert CodeHashAlreadyFiltered(codeHash);\r\n                }\r\n            }\r\n            emit CodeHashUpdated(registrant, codeHash, filtered);\r\n        }\r\n\r\n        /**\r\n        * @notice Update multiple operators for a registered address - when filtered is true, the operators will be filtered. Reverts on duplicates.\r\n        */\r\n        function updateOperators(address registrant, address[] calldata operators, bool filtered)\r\n            external\r\n            onlyAddressOrOwner(registrant)\r\n        {\r\n            address registration = _registrations[registrant];\r\n            if (registration == address(0)) {\r\n                revert NotRegistered(registrant);\r\n            }\r\n            if (registration != registrant) {\r\n                revert CannotUpdateWhileSubscribed(registration);\r\n            }\r\n            EnumerableSet.AddressSet storage filteredOperatorsRef = _filteredOperators[registrant];\r\n            uint256 operatorsLength = operators.length;\r\n            if (!filtered) {\r\n                for (uint256 i = 0; i < operatorsLength;) {\r\n                    address operator = operators[i];\r\n                    bool removed = filteredOperatorsRef.remove(operator);\r\n                    if (!removed) {\r\n                        revert AddressNotFiltered(operator);\r\n                    }\r\n                    unchecked {\r\n                        ++i;\r\n                    }\r\n                }\r\n            } else {\r\n                for (uint256 i = 0; i < operatorsLength;) {\r\n                    address operator = operators[i];\r\n                    bool added = filteredOperatorsRef.add(operator);\r\n                    if (!added) {\r\n                        revert AddressAlreadyFiltered(operator);\r\n                    }\r\n                    unchecked {\r\n                        ++i;\r\n                    }\r\n                }\r\n            }\r\n            emit OperatorsUpdated(registrant, operators, filtered);\r\n        }\r\n\r\n        /**\r\n        * @notice Update multiple codeHashes for a registered address - when filtered is true, the codeHashes will be filtered. Reverts on duplicates.\r\n        *         Note that this will allow adding the bytes32(0) codehash, which could result in unexpected behavior,\r\n        *         since calling `isCodeHashFiltered` will return true for bytes32(0), which is the codeHash of any\r\n        *         un-initialized account. Since un-initialized accounts have no code, the registry will not validate\r\n        *         that an un-initalized account's codeHash is not filtered. By the time an account is able to\r\n        *         act as an operator (an account is initialized or a smart contract exclusively in the context of its\r\n        *         constructor),  it will have a codeHash of EOA_CODEHASH, which cannot be filtered.\r\n        */\r\n        function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered)\r\n            external\r\n            onlyAddressOrOwner(registrant)\r\n        {\r\n            address registration = _registrations[registrant];\r\n            if (registration == address(0)) {\r\n                revert NotRegistered(registrant);\r\n            }\r\n            if (registration != registrant) {\r\n                revert CannotUpdateWhileSubscribed(registration);\r\n            }\r\n            EnumerableSet.Bytes32Set storage filteredCodeHashesRef = _filteredCodeHashes[registrant];\r\n            uint256 codeHashesLength = codeHashes.length;\r\n            if (!filtered) {\r\n                for (uint256 i = 0; i < codeHashesLength;) {\r\n                    bytes32 codeHash = codeHashes[i];\r\n                    bool removed = filteredCodeHashesRef.remove(codeHash);\r\n                    if (!removed) {\r\n                        revert CodeHashNotFiltered(codeHash);\r\n                    }\r\n                    unchecked {\r\n                        ++i;\r\n                    }\r\n                }\r\n            } else {\r\n                for (uint256 i = 0; i < codeHashesLength;) {\r\n                    bytes32 codeHash = codeHashes[i];\r\n                    if (codeHash == EOA_CODEHASH) {\r\n                        revert CannotFilterEOAs();\r\n                    }\r\n                    bool added = filteredCodeHashesRef.add(codeHash);\r\n                    if (!added) {\r\n                        revert CodeHashAlreadyFiltered(codeHash);\r\n                    }\r\n                    unchecked {\r\n                        ++i;\r\n                    }\r\n                }\r\n            }\r\n            emit CodeHashesUpdated(registrant, codeHashes, filtered);\r\n        }\r\n\r\n        /**\r\n        * @notice Subscribe an address to another registrant's filtered operators and codeHashes. Will remove previous\r\n        *         subscription if present.\r\n        *         Note that accounts with subscriptions may go on to subscribe to other accounts - in this case,\r\n        *         subscriptions will not be forwarded. Instead the former subscription's existing entries will still be\r\n        *         used.\r\n        */\r\n        function subscribe(address registrant, address newSubscription) external onlyAddressOrOwner(registrant) {\r\n            if (registrant == newSubscription) {\r\n                revert CannotSubscribeToSelf();\r\n            }\r\n            if (newSubscription == address(0)) {\r\n                revert CannotSubscribeToZeroAddress();\r\n            }\r\n            address registration = _registrations[registrant];\r\n            if (registration == address(0)) {\r\n                revert NotRegistered(registrant);\r\n            }\r\n            if (registration == newSubscription) {\r\n                revert AlreadySubscribed(newSubscription);\r\n            }\r\n            address newSubscriptionRegistration = _registrations[newSubscription];\r\n            if (newSubscriptionRegistration == address(0)) {\r\n                revert NotRegistered(newSubscription);\r\n            }\r\n            if (newSubscriptionRegistration != newSubscription) {\r\n                revert CannotSubscribeToRegistrantWithSubscription(newSubscription);\r\n            }\r\n\r\n            if (registration != registrant) {\r\n                _subscribers[registration].remove(registrant);\r\n                emit SubscriptionUpdated(registrant, registration, false);\r\n            }\r\n            _registrations[registrant] = newSubscription;\r\n            _subscribers[newSubscription].add(registrant);\r\n            emit SubscriptionUpdated(registrant, newSubscription, true);\r\n        }\r\n\r\n        /**\r\n        * @notice Unsubscribe an address from its current subscribed registrant, and optionally copy its filtered operators and codeHashes.\r\n        */\r\n        function unsubscribe(address registrant, bool copyExistingEntries) external onlyAddressOrOwner(registrant) {\r\n            address registration = _registrations[registrant];\r\n            if (registration == address(0)) {\r\n                revert NotRegistered(registrant);\r\n            }\r\n            if (registration == registrant) {\r\n                revert NotSubscribed();\r\n            }\r\n            _subscribers[registration].remove(registrant);\r\n            _registrations[registrant] = registrant;\r\n            emit SubscriptionUpdated(registrant, registration, false);\r\n            if (copyExistingEntries) {\r\n                _copyEntries(registrant, registration);\r\n            }\r\n        }\r\n\r\n        /**\r\n        * @notice Copy filtered operators and codeHashes from a different registrantToCopy to addr.\r\n        */\r\n        function copyEntriesOf(address registrant, address registrantToCopy) external onlyAddressOrOwner(registrant) {\r\n            if (registrant == registrantToCopy) {\r\n                revert CannotCopyFromSelf();\r\n            }\r\n            address registration = _registrations[registrant];\r\n            if (registration == address(0)) {\r\n                revert NotRegistered(registrant);\r\n            }\r\n            if (registration != registrant) {\r\n                revert CannotUpdateWhileSubscribed(registration);\r\n            }\r\n            address registrantRegistration = _registrations[registrantToCopy];\r\n            if (registrantRegistration == address(0)) {\r\n                revert NotRegistered(registrantToCopy);\r\n            }\r\n            _copyEntries(registrant, registrantToCopy);\r\n        }\r\n\r\n        /// @dev helper to copy entries from registrantToCopy to registrant and emit events\r\n        function _copyEntries(address registrant, address registrantToCopy) private {\r\n            EnumerableSet.AddressSet storage filteredOperatorsRef = _filteredOperators[registrantToCopy];\r\n            EnumerableSet.Bytes32Set storage filteredCodeHashesRef = _filteredCodeHashes[registrantToCopy];\r\n            uint256 filteredOperatorsLength = filteredOperatorsRef.length();\r\n            uint256 filteredCodeHashesLength = filteredCodeHashesRef.length();\r\n            for (uint256 i = 0; i < filteredOperatorsLength;) {\r\n                address operator = filteredOperatorsRef.at(i);\r\n                bool added = _filteredOperators[registrant].add(operator);\r\n                if (added) {\r\n                    emit OperatorUpdated(registrant, operator, true);\r\n                }\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n            for (uint256 i = 0; i < filteredCodeHashesLength;) {\r\n                bytes32 codehash = filteredCodeHashesRef.at(i);\r\n                bool added = _filteredCodeHashes[registrant].add(codehash);\r\n                if (added) {\r\n                    emit CodeHashUpdated(registrant, codehash, true);\r\n                }\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n\r\n        //////////////////\r\n        // VIEW METHODS //\r\n        //////////////////\r\n\r\n        /**\r\n        * @notice Get the subscription address of a given registrant, if any.\r\n        */\r\n        function subscriptionOf(address registrant) external view returns (address subscription) {\r\n            subscription = _registrations[registrant];\r\n            if (subscription == address(0)) {\r\n                revert NotRegistered(registrant);\r\n            } else if (subscription == registrant) {\r\n                subscription = address(0);\r\n            }\r\n        }\r\n\r\n        /**\r\n        * @notice Get the set of addresses subscribed to a given registrant.\r\n        *         Note that order is not guaranteed as updates are made.\r\n        */\r\n        function subscribers(address registrant) external view returns (address[] memory) {\r\n            return _subscribers[registrant].values();\r\n        }\r\n\r\n        /**\r\n        * @notice Get the subscriber at a given index in the set of addresses subscribed to a given registrant.\r\n        *         Note that order is not guaranteed as updates are made.\r\n        */\r\n        function subscriberAt(address registrant, uint256 index) external view returns (address) {\r\n            return _subscribers[registrant].at(index);\r\n        }\r\n\r\n        /**\r\n        * @notice Returns true if operator is filtered by a given address or its subscription.\r\n        */\r\n        function isOperatorFiltered(address registrant, address operator) external view returns (bool) {\r\n            address registration = _registrations[registrant];\r\n            if (registration != registrant) {\r\n                return _filteredOperators[registration].contains(operator);\r\n            }\r\n            return _filteredOperators[registrant].contains(operator);\r\n        }\r\n\r\n        /**\r\n        * @notice Returns true if a codeHash is filtered by a given address or its subscription.\r\n        */\r\n        function isCodeHashFiltered(address registrant, bytes32 codeHash) external view returns (bool) {\r\n            address registration = _registrations[registrant];\r\n            if (registration != registrant) {\r\n                return _filteredCodeHashes[registration].contains(codeHash);\r\n            }\r\n            return _filteredCodeHashes[registrant].contains(codeHash);\r\n        }\r\n\r\n        /**\r\n        * @notice Returns true if the hash of an address's code is filtered by a given address or its subscription.\r\n        */\r\n        function isCodeHashOfFiltered(address registrant, address operatorWithCode) external view returns (bool) {\r\n            bytes32 codeHash = operatorWithCode.codehash;\r\n            address registration = _registrations[registrant];\r\n            if (registration != registrant) {\r\n                return _filteredCodeHashes[registration].contains(codeHash);\r\n            }\r\n            return _filteredCodeHashes[registrant].contains(codeHash);\r\n        }\r\n\r\n        /**\r\n        * @notice Returns true if an address has registered\r\n        */\r\n        function isRegistered(address registrant) external view returns (bool) {\r\n            return _registrations[registrant] != address(0);\r\n        }\r\n\r\n        /**\r\n        * @notice Returns a list of filtered operators for a given address or its subscription.\r\n        */\r\n        function filteredOperators(address registrant) external view returns (address[] memory) {\r\n            address registration = _registrations[registrant];\r\n            if (registration != registrant) {\r\n                return _filteredOperators[registration].values();\r\n            }\r\n            return _filteredOperators[registrant].values();\r\n        }\r\n\r\n        /**\r\n        * @notice Returns the set of filtered codeHashes for a given address or its subscription.\r\n        *         Note that order is not guaranteed as updates are made.\r\n        */\r\n        function filteredCodeHashes(address registrant) external view returns (bytes32[] memory) {\r\n            address registration = _registrations[registrant];\r\n            if (registration != registrant) {\r\n                return _filteredCodeHashes[registration].values();\r\n            }\r\n            return _filteredCodeHashes[registrant].values();\r\n        }\r\n\r\n        /**\r\n        * @notice Returns the filtered operator at the given index of the set of filtered operators for a given address or\r\n        *         its subscription.\r\n        *         Note that order is not guaranteed as updates are made.\r\n        */\r\n        function filteredOperatorAt(address registrant, uint256 index) external view returns (address) {\r\n            address registration = _registrations[registrant];\r\n            if (registration != registrant) {\r\n                return _filteredOperators[registration].at(index);\r\n            }\r\n            return _filteredOperators[registrant].at(index);\r\n        }\r\n\r\n        /**\r\n        * @notice Returns the filtered codeHash at the given index of the list of filtered codeHashes for a given address or\r\n        *         its subscription.\r\n        *         Note that order is not guaranteed as updates are made.\r\n        */\r\n        function filteredCodeHashAt(address registrant, uint256 index) external view returns (bytes32) {\r\n            address registration = _registrations[registrant];\r\n            if (registration != registrant) {\r\n                return _filteredCodeHashes[registration].at(index);\r\n            }\r\n            return _filteredCodeHashes[registrant].at(index);\r\n        }\r\n\r\n        /**\r\n        * @dev Convenience method to compute the code hash of an arbitrary contract\r\n        */\r\n        function codeHashOf(address a) external view returns (bytes32) {\r\n            return a.codehash;\r\n        }\r\n    }\r\n\r\n\r\n// OperatorFilterer.sol ==========================================================================================================|\r\n\r\n    /**\r\n    * @title  OperatorFilterer\r\n    * @notice Abstract contract whose constructor automatically registers and optionally subscribes to or copies another\r\n    *         registrant's entries in the OperatorFilterRegistry.\r\n    * @dev    This smart contract is meant to be inherited by token contracts so they can use the following:\r\n    *         - `onlyAllowedOperator` modifier for `transferFrom` and `safeTransferFrom` methods.\r\n    *         - `onlyAllowedOperatorApproval` modifier for `approve` and `setApprovalForAll` methods.\r\n    *         Please note that if your token contract does not provide an owner with EIP-173, it must provide\r\n    *         administration methods on the contract itself to interact with the registry otherwise the subscription\r\n    *         will be locked to the options set during construction.\r\n    */\r\n\r\n    abstract contract OperatorFilterer {\r\n        /// @dev Emitted when an operator is not allowed.\r\n        error OperatorNotAllowed(address operator);\r\n\r\n        IOperatorFilterRegistry public constant OPERATOR_FILTER_REGISTRY =\r\n            IOperatorFilterRegistry(CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS);\r\n\r\n        /// @dev The constructor that is called when the contract is being deployed.\r\n        constructor(address subscriptionOrRegistrantToCopy, bool subscribe) {\r\n            // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\r\n            // will not revert, but the contract will need to be registered with the registry once it is deployed in\r\n            // order for the modifier to filter addresses.\r\n            if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\r\n                if (subscribe) {\r\n                    OPERATOR_FILTER_REGISTRY.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\r\n                } else {\r\n                    if (subscriptionOrRegistrantToCopy != address(0)) {\r\n                        OPERATOR_FILTER_REGISTRY.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\r\n                    } else {\r\n                        OPERATOR_FILTER_REGISTRY.register(address(this));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n        * @dev A helper function to check if an operator is allowed.\r\n        */\r\n        modifier onlyAllowedOperator(address from) virtual {\r\n            // Allow spending tokens from addresses with balance\r\n            // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\r\n            // from an EOA.\r\n            if (from != msg.sender) {\r\n                _checkFilterOperator(msg.sender);\r\n            }\r\n            _;\r\n        }\r\n\r\n        /**\r\n        * @dev A helper function to check if an operator approval is allowed.\r\n        */\r\n        modifier onlyAllowedOperatorApproval(address operator) virtual {\r\n            _checkFilterOperator(operator);\r\n            _;\r\n        }\r\n\r\n        /**\r\n        * @dev A helper function to check if an operator is allowed.\r\n        */\r\n        function _checkFilterOperator(address operator) internal view virtual {\r\n            // Check registry code length to facilitate testing in environments without a deployed registry.\r\n            if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\r\n                // under normal circumstances, this function will revert rather than return false, but inheriting contracts\r\n                // may specify their own OperatorFilterRegistry implementations, which may behave differently\r\n                if (!OPERATOR_FILTER_REGISTRY.isOperatorAllowed(address(this), operator)) {\r\n                    revert OperatorNotAllowed(operator);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n// UpdatableOperatorFilterer.sol =================================================================================================|\r\n\r\n    /**\r\n    * @title  UpdatableOperatorFilterer\r\n    * @notice Abstract contract whose constructor automatically registers and optionally subscribes to or copies another\r\n    *         registrant's entries in the OperatorFilterRegistry. This contract allows the Owner to update the\r\n    *         OperatorFilterRegistry address via updateOperatorFilterRegistryAddress, including to the zero address,\r\n    *         which will bypass registry checks.\r\n    *         Note that OpenSea will still disable creator earnings enforcement if filtered operators begin fulfilling orders\r\n    *         on-chain, eg, if the registry is revoked or bypassed.\r\n    * @dev    This smart contract is meant to be inherited by token contracts so they can use the following:\r\n    *         - `onlyAllowedOperator` modifier for `transferFrom` and `safeTransferFrom` methods.\r\n    *         - `onlyAllowedOperatorApproval` modifier for `approve` and `setApprovalForAll` methods.\r\n    */\r\n    abstract contract UpdatableOperatorFilterer {\r\n        /// @dev Emitted when an operator is not allowed.\r\n        error OperatorNotAllowed(address operator);\r\n        /// @dev Emitted when someone other than the owner is trying to call an only owner function.\r\n        error OnlyOwner();\r\n\r\n        event OperatorFilterRegistryAddressUpdated(address newRegistry);\r\n\r\n        IOperatorFilterRegistry public operatorFilterRegistry;\r\n\r\n        /// @dev The constructor that is called when the contract is being deployed.\r\n        constructor(address _registry, address subscriptionOrRegistrantToCopy, bool subscribe) {\r\n            IOperatorFilterRegistry registry = IOperatorFilterRegistry(_registry);\r\n            operatorFilterRegistry = registry;\r\n            // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\r\n            // will not revert, but the contract will need to be registered with the registry once it is deployed in\r\n            // order for the modifier to filter addresses.\r\n            if (address(registry).code.length > 0) {\r\n                if (subscribe) {\r\n                    registry.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\r\n                } else {\r\n                    if (subscriptionOrRegistrantToCopy != address(0)) {\r\n                        registry.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\r\n                    } else {\r\n                        registry.register(address(this));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n        * @dev A helper function to check if the operator is allowed.\r\n        */\r\n        modifier onlyAllowedOperator(address from) virtual {\r\n            // Allow spending tokens from addresses with balance\r\n            // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\r\n            // from an EOA.\r\n            if (from != msg.sender) {\r\n                _checkFilterOperator(msg.sender);\r\n            }\r\n            _;\r\n        }\r\n\r\n        /**\r\n        * @dev A helper function to check if the operator approval is allowed.\r\n        */\r\n        modifier onlyAllowedOperatorApproval(address operator) virtual {\r\n            _checkFilterOperator(operator);\r\n            _;\r\n        }\r\n\r\n        /**\r\n        * @notice Update the address that the contract will make OperatorFilter checks against. When set to the zero\r\n        *         address, checks will be bypassed. OnlyOwner.\r\n        */\r\n        function updateOperatorFilterRegistryAddress(address newRegistry) public virtual {\r\n            if (msg.sender != owner()) {\r\n                revert OnlyOwner();\r\n            }\r\n            operatorFilterRegistry = IOperatorFilterRegistry(newRegistry);\r\n            emit OperatorFilterRegistryAddressUpdated(newRegistry);\r\n        }\r\n\r\n        /**\r\n        * @dev Assume the contract has an owner, but leave specific Ownable implementation up to inheriting contract.\r\n        */\r\n        function owner() public view virtual returns (address);\r\n\r\n        /**\r\n        * @dev A helper function to check if the operator is allowed.\r\n        */\r\n        function _checkFilterOperator(address operator) internal view virtual {\r\n            IOperatorFilterRegistry registry = operatorFilterRegistry;\r\n            // Check registry code length to facilitate testing in environments without a deployed registry.\r\n            if (address(registry) != address(0) && address(registry).code.length > 0) {\r\n                // under normal circumstances, this function will revert rather than return false, but inheriting contracts\r\n                // may specify their own OperatorFilterRegistry implementations, which may behave differently\r\n                if (!registry.isOperatorAllowed(address(this), operator)) {\r\n                    revert OperatorNotAllowed(operator);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n// RevokableOperatorFilterer.sol =================================================================================================|\r\n\r\n    /**\r\n    * @title  RevokableOperatorFilterer\r\n    * @notice This contract is meant to allow contracts to permanently skip OperatorFilterRegistry checks if desired. The\r\n    *         Registry itself has an \"unregister\" function, but if the contract is ownable, the owner can re-register at\r\n    *         any point. As implemented, this abstract contract allows the contract owner to permanently skip the\r\n    *         OperatorFilterRegistry checks by calling revokeOperatorFilterRegistry. Once done, the registry\r\n    *         address cannot be further updated.\r\n    *         Note that OpenSea will still disable creator earnings enforcement if filtered operators begin fulfilling orders\r\n    *         on-chain, eg, if the registry is revoked or bypassed.\r\n    */\r\n    abstract contract RevokableOperatorFilterer is UpdatableOperatorFilterer {\r\n        /// @dev Emitted when the registry has already been revoked.\r\n        error RegistryHasBeenRevoked();\r\n        /// @dev Emitted when the initial registry address is attempted to be set to the zero address.\r\n        error InitialRegistryAddressCannotBeZeroAddress();\r\n\r\n        event OperatorFilterRegistryRevoked();\r\n\r\n        bool public isOperatorFilterRegistryRevoked;\r\n\r\n        /// @dev The constructor that is called when the contract is being deployed.\r\n        constructor(address _registry, address subscriptionOrRegistrantToCopy, bool subscribe)\r\n            UpdatableOperatorFilterer(_registry, subscriptionOrRegistrantToCopy, subscribe)\r\n        {\r\n            // don't allow creating a contract with a permanently revoked registry\r\n            if (_registry == address(0)) {\r\n                revert InitialRegistryAddressCannotBeZeroAddress();\r\n            }\r\n        }\r\n\r\n        /**\r\n        * @notice Update the address that the contract will make OperatorFilter checks against. When set to the zero\r\n        *         address, checks will be permanently bypassed, and the address cannot be updated again. OnlyOwner.\r\n        */\r\n        function updateOperatorFilterRegistryAddress(address newRegistry) public override {\r\n            if (msg.sender != owner()) {\r\n                revert OnlyOwner();\r\n            }\r\n            // if registry has been revoked, do not allow further updates\r\n            if (isOperatorFilterRegistryRevoked) {\r\n                revert RegistryHasBeenRevoked();\r\n            }\r\n\r\n            operatorFilterRegistry = IOperatorFilterRegistry(newRegistry);\r\n            emit OperatorFilterRegistryAddressUpdated(newRegistry);\r\n        }\r\n\r\n        /**\r\n        * @notice Revoke the OperatorFilterRegistry address, permanently bypassing checks. OnlyOwner.\r\n        */\r\n        function revokeOperatorFilterRegistry() public {\r\n            if (msg.sender != owner()) {\r\n                revert OnlyOwner();\r\n            }\r\n            // if registry has been revoked, do not allow further updates\r\n            if (isOperatorFilterRegistryRevoked) {\r\n                revert RegistryHasBeenRevoked();\r\n            }\r\n\r\n            // set to zero address to bypass checks\r\n            operatorFilterRegistry = IOperatorFilterRegistry(address(0));\r\n            isOperatorFilterRegistryRevoked = true;\r\n            emit OperatorFilterRegistryRevoked();\r\n        }\r\n    }\r\n\r\n\r\n// RevokableDefaultOperatorFilterer.sol ==========================================================================================|\r\n\r\n    /**\r\n    * @title  RevokableDefaultOperatorFilterer\r\n    * @notice Inherits from RevokableOperatorFilterer and automatically subscribes to the default OpenSea subscription.\r\n    *         Note that OpenSea will disable creator earnings enforcement if filtered operators begin fulfilling orders\r\n    *         on-chain, eg, if the registry is revoked or bypassed.\r\n    */\r\n\r\n    abstract contract RevokableDefaultOperatorFilterer is RevokableOperatorFilterer {\r\n        /// @dev The constructor that is called when the contract is being deployed.\r\n        constructor()\r\n            RevokableOperatorFilterer(CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS, CANONICAL_CORI_SUBSCRIPTION, true)\r\n        {}\r\n    }\r\n\r\n\r\n// DefaultOperatorFilterer.sol ===================================================================================================|\r\n\r\n    /**\r\n    * @title  DefaultOperatorFilterer\r\n    * @notice Inherits from OperatorFilterer and automatically subscribes to the default OpenSea subscription.\r\n    * @dev    Please note that if your token contract does not provide an owner with EIP-173, it must provide\r\n    *         administration methods on the contract itself to interact with the registry otherwise the subscription\r\n    *         will be locked to the options set during construction.\r\n    */\r\n\r\n    abstract contract DefaultOperatorFilterer is OperatorFilterer {\r\n        /// @dev The constructor that is called when the contract is being deployed.\r\n        constructor() OperatorFilterer(CANONICAL_CORI_SUBSCRIPTION, true) {}\r\n    }\r\n// End ME-OperatorFiltererAIO ====================================================================================================|\r\n\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/interfaces/IERC2981.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the NFT Royalty Standard.\r\n *\r\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\r\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\r\n *\r\n * _Available since v4.5._\r\n */\r\ninterface IERC2981 is IERC165 {\r\n    /**\r\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\r\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\r\n     */\r\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\r\n        external\r\n        view\r\n        returns (address receiver, uint256 royaltyAmount);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/common/ERC2981.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\r\n *\r\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\r\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\r\n *\r\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\r\n * fee is specified in basis points by default.\r\n *\r\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\r\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\r\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\r\n *\r\n * _Available since v4.5._\r\n */\r\nabstract contract ERC2981 is IERC2981, ERC165 {\r\n    struct RoyaltyInfo {\r\n        address receiver;\r\n        uint96 royaltyFraction;\r\n    }\r\n\r\n    RoyaltyInfo private _defaultRoyaltyInfo;\r\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\r\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IERC2981\r\n     */\r\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\r\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\r\n\r\n        if (royalty.receiver == address(0)) {\r\n            royalty = _defaultRoyaltyInfo;\r\n        }\r\n\r\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\r\n\r\n        return (royalty.receiver, royaltyAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\r\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\r\n     * override.\r\n     */\r\n    function _feeDenominator() internal pure virtual returns (uint96) {\r\n        return 10000;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the royalty information that all ids in this contract will default to.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `receiver` cannot be the zero address.\r\n     * - `feeNumerator` cannot be greater than the fee denominator.\r\n     */\r\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\r\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\r\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\r\n\r\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes default royalty information.\r\n     */\r\n    function _deleteDefaultRoyalty() internal virtual {\r\n        delete _defaultRoyaltyInfo;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `receiver` cannot be the zero address.\r\n     * - `feeNumerator` cannot be greater than the fee denominator.\r\n     */\r\n    function _setTokenRoyalty(\r\n        uint256 tokenId,\r\n        address receiver,\r\n        uint96 feeNumerator\r\n    ) internal virtual {\r\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\r\n        require(receiver != address(0), \"ERC2981: Invalid parameters\");\r\n\r\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\r\n    }\r\n\r\n    /**\r\n     * @dev Resets royalty information for the token id back to the global default.\r\n     */\r\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\r\n        delete _tokenRoyaltyInfo[tokenId];\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n    /**\r\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\r\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\r\n     *\r\n     * NOTE: To accept the transfer, this must return\r\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n     * (i.e. 0xf23a6e61, or its own function selector).\r\n     *\r\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\r\n     * @param from The address which previously owned the token\r\n     * @param id The ID of the token being transferred\r\n     * @param value The amount of tokens being transferred\r\n     * @param data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n     */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n\r\n    /**\r\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\r\n     * been updated.\r\n     *\r\n     * NOTE: To accept the transfer(s), this must return\r\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n     * (i.e. 0xbc197c81, or its own function selector).\r\n     *\r\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n     * @param from The address which previously owned the token\r\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n     * @param data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n     */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\r\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155MetadataURI is IERC1155 {\r\n    /**\r\n     * @dev Returns the URI for token type `id`.\r\n     *\r\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\r\n     * clients with the actual token type ID.\r\n     */\r\n    function uri(uint256 id) external view returns (string memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/ERC1155.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the basic standard multi-token.\r\n * See https://eips.ethereum.org/EIPS/eip-1155\r\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\r\n *\r\n * _Available since v3.1._\r\n */\r\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\r\n    using Address for address;\r\n\r\n    // Mapping from token ID to account balances\r\n    mapping(uint256 => mapping(address => uint256)) private _balances;\r\n\r\n    // Mapping from account to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\r\n    string private _uri;\r\n\r\n    /**\r\n     * @dev See {_setURI}.\r\n     */\r\n    constructor(string memory uri_) {\r\n        _setURI(uri_);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC1155).interfaceId ||\r\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155MetadataURI-uri}.\r\n     *\r\n     * This implementation returns the same URI for *all* token types. It relies\r\n     * on the token type ID substitution mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * Clients calling this function must replace the `\\{id\\}` substring with the\r\n     * actual token type ID.\r\n     */\r\n    function uri(uint256) public view virtual override returns (string memory) {\r\n        return _uri;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\r\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\r\n        return _balances[id][account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOfBatch}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256[] memory)\r\n    {\r\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\r\n\r\n        uint256[] memory batchBalances = new uint256[](accounts.length);\r\n\r\n        for (uint256 i = 0; i < accounts.length; ++i) {\r\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\r\n        }\r\n\r\n        return batchBalances;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[account][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: caller is not token owner or approved\"\r\n        );\r\n        _safeTransferFrom(from, to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeBatchTransferFrom}.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: caller is not token owner or approved\"\r\n        );\r\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n        uint256[] memory ids = _asSingletonArray(id);\r\n        uint256[] memory amounts = _asSingletonArray(amount);\r\n\r\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        uint256 fromBalance = _balances[id][from];\r\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\r\n        unchecked {\r\n            _balances[id][from] = fromBalance - amount;\r\n        }\r\n        _balances[id][to] += amount;\r\n\r\n        emit TransferSingle(operator, from, to, id, amount);\r\n\r\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        for (uint256 i = 0; i < ids.length; ++i) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            uint256 fromBalance = _balances[id][from];\r\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\r\n            unchecked {\r\n                _balances[id][from] = fromBalance - amount;\r\n            }\r\n            _balances[id][to] += amount;\r\n        }\r\n\r\n        emit TransferBatch(operator, from, to, ids, amounts);\r\n\r\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new URI for all token types, by relying on the token type ID\r\n     * substitution mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\r\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\r\n     * clients with the token type ID.\r\n     *\r\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\r\n     * interpreted by clients as\r\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\r\n     * for token type ID 0x4cce0.\r\n     *\r\n     * See {uri}.\r\n     *\r\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\r\n     * this function emits no events.\r\n     */\r\n    function _setURI(string memory newuri) internal virtual {\r\n        _uri = newuri;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mint(\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"ERC1155: mint to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n        uint256[] memory ids = _asSingletonArray(id);\r\n        uint256[] memory amounts = _asSingletonArray(amount);\r\n\r\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n        _balances[id][to] += amount;\r\n        emit TransferSingle(operator, address(0), to, id, amount);\r\n\r\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mintBatch(\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"ERC1155: mint to the zero address\");\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            _balances[ids[i]][to] += amounts[i];\r\n        }\r\n\r\n        emit TransferBatch(operator, address(0), to, ids, amounts);\r\n\r\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens of token type `id` from `from`\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `from` must have at least `amount` tokens of token type `id`.\r\n     */\r\n    function _burn(\r\n        address from,\r\n        uint256 id,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC1155: burn from the zero address\");\r\n\r\n        address operator = _msgSender();\r\n        uint256[] memory ids = _asSingletonArray(id);\r\n        uint256[] memory amounts = _asSingletonArray(amount);\r\n\r\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\r\n\r\n        uint256 fromBalance = _balances[id][from];\r\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[id][from] = fromBalance - amount;\r\n        }\r\n\r\n        emit TransferSingle(operator, from, address(0), id, amount);\r\n\r\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     */\r\n    function _burnBatch(\r\n        address from,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC1155: burn from the zero address\");\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\r\n\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            uint256 fromBalance = _balances[id][from];\r\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\r\n            unchecked {\r\n                _balances[id][from] = fromBalance - amount;\r\n            }\r\n        }\r\n\r\n        emit TransferBatch(operator, from, address(0), ids, amounts);\r\n\r\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `operator` to operate on all of `owner` tokens\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function _setApprovalForAll(\r\n        address owner,\r\n        address operator,\r\n        bool approved\r\n    ) internal virtual {\r\n        require(owner != operator, \"ERC1155: setting approval status for self\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning, as well as batched variants.\r\n     *\r\n     * The same hook is called on both single and batched variants. For single\r\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\r\n     *\r\n     * Calling conditions (for each `id` and `amount` pair):\r\n     *\r\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * of token type `id` will be  transferred to `to`.\r\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\r\n     * for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\r\n     * will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     * - `ids` and `amounts` have the same, non-zero length.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any token transfer. This includes minting\r\n     * and burning, as well as batched variants.\r\n     *\r\n     * The same hook is called on both single and batched variants. For single\r\n     * transfers, the length of the `id` and `amount` arrays will be 1.\r\n     *\r\n     * Calling conditions (for each `id` and `amount` pair):\r\n     *\r\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * of token type `id` will be  transferred to `to`.\r\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\r\n     * for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\r\n     * will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     * - `ids` and `amounts` have the same, non-zero length.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {}\r\n\r\n    function _doSafeTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) private {\r\n        if (to.isContract()) {\r\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\r\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _doSafeBatchTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) private {\r\n        if (to.isContract()) {\r\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\r\n                bytes4 response\r\n            ) {\r\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\r\n        uint256[] memory array = new uint256[](1);\r\n        array[0] = element;\r\n\r\n        return array;\r\n    }\r\n}\r\n\r\n\r\n// File: contracts/1155_Base/Base1155 NoKill 65 DefaultME.sol\r\n/*\r\n \r\n\r\n\r\n    +---------------------------------------------------------------------------------------------------------------------------------------------------------+\r\n    |    written by:                                                                                                                                          |    \r\n    |                                                                                                                                                         |\r\n    |    $$\\   $$\\ $$$$$$$$\\ $$$$$$$$\\                         $$\\                          $$\\       $$\\       $$\\               $$\\  $$$$$$\\        $$\\     |\r\n    |    $$$\\  $$ |$$  _____|\\__$$  __|                        $$ |                         $$ |      $$ |      \\__|              \\__|$$  __$$\\       $$ |    |\r\n    |    $$$$\\ $$ |$$ |         $$ |        $$$$$$$\\  $$$$$$$\\ $$$$$$$\\   $$$$$$\\  $$$$$$\\  $$$$$$$\\  $$$$$$$\\  $$\\    $$\\    $$\\ $$\\ \\__/  $$ | $$$$$$$ |    |\r\n    |    $$ $$\\$$ |$$$$$\\       $$ |       $$  _____|$$  _____|$$  __$$\\ $$  __$$\\ \\____$$\\ $$  __$$\\ $$  __$$\\ $$ |   \\$$\\  $$  |$$ | $$$$$$  |$$  __$$ |    |\r\n    |    $$ \\$$$$ |$$  __|      $$ |       \\$$$$$$\\  $$ /      $$ |  $$ |$$ |  \\__|$$$$$$$ |$$ |  $$ |$$ |  $$ |$$ |    \\$$\\$$  / $$ |$$  ____/ $$ /  $$ |    |\r\n    |    $$ |\\$$$ |$$ |         $$ |        \\____$$\\ $$ |      $$ |  $$ |$$ |     $$  __$$ |$$ |  $$ |$$ |  $$ |$$ |     \\$$$  /  $$ |$$ |      $$ |  $$ |    |\r\n    |    $$ | \\$$ |$$ |         $$ |       $$$$$$$  |\\$$$$$$$\\ $$ |  $$ |$$ |     \\$$$$$$$ |$$$$$$$  |$$$$$$$  |$$ |      \\$  /   $$ |$$$$$$$$\\ \\$$$$$$$ |    |\r\n    |    \\__|  \\__|\\__|         \\__|$$$$$$\\\\_______/  \\_______|\\__|  \\__|\\__|      \\_______|\\_______/ \\_______/ \\__|$$$$$$\\\\_/    \\__|\\________| \\_______|    |\r\n    |                               \\______|                                                                        \\______|                                  |\r\n    |                                                                                                                                                         |\r\n    +---------------------------------------------------------------------------------------------------------------------------------------------------------+               \r\n\r\n\r\n\r\n*/\r\npragma solidity ^0.8.18;\r\n//===================================================================================================================================================================================================================|\r\n\r\ncontract CyberpunkArtDistrict is ERC1155, Ownable, ERC2981, DefaultOperatorFilterer, ContextMixin, RoyaltiesV2Impl { \r\n\r\n    //===============================================================================================================================================================================================================|   \r\n    using Strings for uint256;\r\n    using Counters for Counters.Counter;\r\n    Counters.Counter private supply;\r\n    RoyaltyInfo private _defaultRoyaltyInfo;                           \r\n    bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;         \r\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;         \r\n    mapping (uint256 => uint256) private tokenCopys;\r\n    mapping (uint256 => bool) internal exist;\r\n    mapping(uint256 => bool) internal tokenIsHidden;\r\n    bool public  paused = false;       \r\n    bool private collectionIsHidden = false; \r\n    bool private polygonOnlyOnOpenSea = false;\r\n    string private baseURI; \r\n    string private hiddenURI; \r\n    string public  name;  \r\n    string public  symbol;\r\n    address payable receiverRoyalty;\r\n    address payable AddressWithdrawBalanceOne;                          \r\n    address payable AddressWithdrawBalanceTwo; \r\n    uint96  private royaltyFeesInBips;\r\n    uint256 private FaktorWithdrawBalanceOne = 25;                                   \r\n    uint256 private FaktorWithdrawBalanceTwo = 75;                              \r\n    uint256 private FakCheck = 100;\r\n    uint256 private maxTokenInCollection; \r\n    uint256 private _totalSupplyAll;      \r\n    \r\n\r\n    constructor(string memory _name, string memory _symbol, string memory _uri, string memory _hiddenURI, uint96 _royaltyFeesInBips, address payable _receiverRoyalty, address payable _AddressWithdrawBalanceOne, address payable _AddressWithdrawBalanceTwo, uint256 _MaxTokenInCollection) ERC1155(_uri) {    \r\n        name = _name;\r\n        symbol = _symbol;\r\n        baseURI = _uri; \r\n        hiddenURI = _hiddenURI;\r\n        receiverRoyalty = _receiverRoyalty;\r\n        royaltyFeesInBips = _royaltyFeesInBips;\r\n        maxTokenInCollection = _MaxTokenInCollection;\r\n        setPaused(false);\r\n        setBaseURI(_uri);\r\n        setHiddenURI(_hiddenURI);\r\n        _setDefaultRoyalty(receiverRoyalty, royaltyFeesInBips);\r\n        setAddressWithdrawBalanceOne(_AddressWithdrawBalanceOne);\r\n        setFaktorWithdrawBalanceOne(FaktorWithdrawBalanceOne);\r\n        setAddressWithdrawBalanceTwo(_AddressWithdrawBalanceTwo);\r\n        setFaktorWithdrawBalanceTwo(FaktorWithdrawBalanceTwo);\r\n        require(FaktorWithdrawBalanceOne + FaktorWithdrawBalanceTwo == FakCheck, \"constructor - missconfiguration of both FaktorWithdrawBalance\"); \r\n    }\r\n\r\n\r\n    function existsToken(uint256 tokenId) public view returns (bool) {\r\n        return exist[tokenId] == true;\r\n    }\r\n\r\n    function hiddenToken(uint256 tokenId) public view returns (bool) {   \r\n        return tokenIsHidden[tokenId] == true;\r\n    }\r\n\r\n    function perTokenCopys(uint256 tokenId) public view returns (uint256) {\r\n        return tokenCopys[tokenId];\r\n    }\r\n\r\n    function _msgSender() internal override view returns (address sender) {\r\n        return ContextMixin.msgSender();\r\n    }\r\n\r\n     \r\n    function uri(uint256 tokenId) public view override returns (string memory) {\r\n\r\n        if(tokenIsHidden[tokenId] == true) {  \r\n            return string(abi.encodePacked(hiddenURI, Strings.toString(tokenId),\".json\")); \r\n        }\r\n\r\n        if(exist[tokenId]  == false) {\r\n            return string(abi.encodePacked(hiddenURI, Strings.toString(tokenId),\".json\")); \r\n        }\r\n\r\n        return string(abi.encodePacked(baseURI, Strings.toString(tokenId),\".json\")); \r\n    }\r\n\r\n\r\n    function mintAllAtOnceToLimit(uint256 amountCopysEachToken) public onlyOwner {\r\n        require(!paused, \"mintAllAtOnceToLimit - the contract is paused!\");\r\n\r\n        for(uint256 i=1; i<= maxTokenInCollection; i++){\r\n            uint256 startTokenId = 0;\r\n            require(tokenCopys[startTokenId + i] < amountCopysEachToken, \"mintAllAtOnceToLimit - the amountCopysEachToken is smaller than the already existing tokens. Increase the amountCopysEachToken and try again.\");\r\n\r\n            if(exist[startTokenId + i]  == false) {\r\n                _mint(msg.sender, startTokenId + i, amountCopysEachToken, \"\");          \r\n                tokenCopys[startTokenId + i] = amountCopysEachToken;\r\n            }\r\n            \r\n            if(exist[startTokenId + i]  == true) {\r\n                if(tokenCopys[startTokenId + i] < amountCopysEachToken) {\r\n                    _mint(msg.sender, startTokenId + i, amountCopysEachToken - tokenCopys[startTokenId + i], \"\");\r\n                    tokenCopys[startTokenId + i] = tokenCopys[startTokenId + i] + (amountCopysEachToken - tokenCopys[startTokenId + i]);\r\n                }\r\n\r\n                if(tokenCopys[startTokenId + i] >= amountCopysEachToken) {\r\n                    tokenCopys[startTokenId + i] = tokenCopys[startTokenId + i];\r\n                }\r\n            } \r\n\r\n            _setDefaultRoyalty(receiverRoyalty, royaltyFeesInBips);\r\n\r\n            LibPart.Part[] memory _royalties = new LibPart.Part[](1);     \r\n            _royalties[0].value = royaltyFeesInBips;\r\n            _royalties[0].account = receiverRoyalty;\r\n            _saveRoyalties(startTokenId + i, _royalties);\r\n            \r\n            if(tokenCopys[startTokenId + i] > 0) {\r\n            exist[startTokenId + i] = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function mintAreaToLimit(uint256 areaStart, uint256 areaEnd, uint256 amountCopysEachToken) public onlyOwner {\r\n        require(!paused, \"mintAreaToLimit - the contract is paused!\");\r\n        \r\n        for(uint256 i= areaStart; i<= areaEnd; i++) {\r\n            uint256 startTokenId = 0;\r\n            require(areaEnd <= maxTokenInCollection, \"mintAreaToLimit - the areaEnd value can not be bigger then the max. token in collection. Decrease the value areaEnd and try again\");\r\n \r\n            if(exist[startTokenId + i]  == false) {\r\n                _mint(msg.sender, startTokenId + i, amountCopysEachToken, \"\");          \r\n                tokenCopys[startTokenId + i] = amountCopysEachToken;\r\n            }\r\n            \r\n            if(exist[startTokenId + i]  == true) {\r\n                if(tokenCopys[startTokenId + i] < amountCopysEachToken) {\r\n                    _mint(msg.sender, startTokenId + i, amountCopysEachToken - tokenCopys[startTokenId + i], \"\");\r\n                    tokenCopys[startTokenId + i] = tokenCopys[startTokenId + i] + (amountCopysEachToken - tokenCopys[startTokenId + i]);\r\n                }\r\n\r\n                if(tokenCopys[startTokenId + i] >= amountCopysEachToken) {\r\n                    tokenCopys[startTokenId + i] = tokenCopys[startTokenId + i];\r\n                }\r\n            }\r\n\r\n            _setDefaultRoyalty(receiverRoyalty, royaltyFeesInBips);\r\n\r\n            LibPart.Part[] memory _royalties = new LibPart.Part[](1);    \r\n            _royalties[0].value = royaltyFeesInBips;\r\n            _royalties[0].account = receiverRoyalty;\r\n            _saveRoyalties(startTokenId + i, _royalties);\r\n\r\n            if(tokenCopys[startTokenId + i] > 0) {\r\n            exist[startTokenId + i] = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n    function mintSingle(uint256 tokenId, uint256 amountCopys) public onlyOwner {\r\n        require(!paused, \"mintSingle - the contract is paused!\");\r\n        require(tokenId <= maxTokenInCollection, \"mintSingle - the tokenId you will mint is not in collection. TokenId > maxTokenInCollection!\");\r\n        \r\n        _mint(msg.sender, tokenId, amountCopys, \"\");\r\n        tokenCopys[tokenId] = tokenCopys[tokenId] + amountCopys;\r\n\r\n        _setDefaultRoyalty(receiverRoyalty, royaltyFeesInBips);\r\n\r\n        LibPart.Part[] memory _royalties = new LibPart.Part[](1);    \r\n        _royalties[0].value = royaltyFeesInBips;\r\n        _royalties[0].account = receiverRoyalty;\r\n        _saveRoyalties(tokenId, _royalties);\r\n\r\n        if(tokenCopys[tokenId] > 0) {\r\n            exist[tokenId] = true;\r\n        }\r\n\r\n    }\r\n    \r\n    function mintBatch(uint256[] memory tokenIds, uint256[] memory amountCopys) public onlyOwner {\r\n        require(!paused, \"mintBatch - the contract is paused!\");\r\n        require(tokenIds.length == amountCopys.length, \"mintBatch - tokenIds and amounts length mismatch\");\r\n\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            uint256 tokenId = tokenIds[i];\r\n            uint256 numberCopys = amountCopys[i];\r\n            require(tokenId <= maxTokenInCollection, \"mintBatch - the tokenId you will mint is not in collection. TokenId > maxTokenInCollection!\");\r\n\r\n            _mintBatch(msg.sender,  tokenIds, amountCopys, \"\");\r\n            tokenCopys[tokenId] = tokenCopys[tokenId] + numberCopys; \r\n\r\n            _setDefaultRoyalty(receiverRoyalty, royaltyFeesInBips);\r\n\r\n            LibPart.Part[] memory _royalties = new LibPart.Part[](1);    \r\n            _royalties[0].value = royaltyFeesInBips;\r\n            _royalties[0].account = receiverRoyalty;\r\n            _saveRoyalties(tokenId, _royalties);\r\n\r\n            if(tokenCopys[tokenId] > 0) {\r\n                exist[tokenId] = true;\r\n            }\r\n        }        \r\n    }\r\n\r\n\r\n    function isApprovedForAll(address _owner, address _operator) public view override returns (bool isOperator) {    \r\n        \r\n        if(polygonOnlyOnOpenSea == true) {  \r\n            if(_operator == address(0x207Fa8Df3a17D96Ca7EA4f2893fcdCb78a304101)) {      \r\n                return true;                                                            \r\n            } \r\n        }\r\n\r\n        return ERC1155.isApprovedForAll(_owner, _operator);                             \r\n    }\r\n  \r\n\r\n    function setApprovalForAll(address operator, bool approved) public override onlyAllowedOperatorApproval(operator) {\r\n        super.setApprovalForAll(operator, approved);\r\n    }\r\n\r\n    function approve(address operator, uint256 tokenId) public onlyAllowedOperatorApproval(operator) {    \r\n        approve(operator, tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, uint256 amountCopys, bytes memory data) public override onlyAllowedOperator(from) {\r\n        super.safeTransferFrom(from, to, tokenId, amountCopys, data);\r\n    }\r\n\r\n    function safeBatchTransferFrom(address from, address to, uint256[] memory tokenIds, uint256[] memory amountCopys, bytes memory data) public override onlyAllowedOperator(from) {\r\n        super.safeBatchTransferFrom(from, to, tokenIds, amountCopys, data);\r\n    }\r\n\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155, ERC2981) returns (bool) {\r\n        \r\n        if(interfaceId == LibRoyaltiesV2._INTERFACE_ID_ROYALTIES) {\r\n            return true;\r\n        }\r\n\r\n        if(interfaceId == _INTERFACE_ID_ERC2981) {\r\n            return true;\r\n        }\r\n\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n\r\n\r\n    function setPolygonOnlyOnOpenSea(bool _state) public onlyOwner { \r\n        polygonOnlyOnOpenSea = _state;\r\n    }\r\n    \r\n    function setPaused(bool _state) public onlyOwner {\r\n        paused = _state;\r\n    }\r\n\r\n    function setItemHidden(uint256 tokenId) public onlyOwner { \r\n        tokenIsHidden[tokenId] = true;\r\n    }\r\n\r\n    function setItemRevield(uint256 tokenId) public onlyOwner { \r\n        tokenIsHidden[tokenId] = false;\r\n    }\r\n\r\n    function setBaseURI(string memory _newBaseURI) public onlyOwner {\r\n        baseURI = _newBaseURI;\r\n    }\r\n    \r\n    function setHiddenURI(string memory _newHiddenURI) public onlyOwner { \r\n        hiddenURI = _newHiddenURI;\r\n    }\r\n\r\n    function setMaxTokenInCollection(uint256 _newMaxTokenInCollection) public onlyOwner { \r\n        maxTokenInCollection = _newMaxTokenInCollection;\r\n    }\r\n\r\n    \r\n    function setRoyaltyGeneraly(address payable _receiverRoyaltyGeneraly, uint96 _royaltyFeesInBipsGeneraly) public onlyOwner {\r\n        _setDefaultRoyalty(_receiverRoyaltyGeneraly, _royaltyFeesInBipsGeneraly);\r\n    } \r\n\r\n    function setRoyaltyRariableMintable(address payable _receiverRoyaltyRariableMintable, uint96 _royaltyFeesInBipsRariableMintable) public onlyOwner { \r\n        \r\n        for(uint256 i=1; i<= maxTokenInCollection; i++){\r\n            uint256 startTokenId = 0;\r\n\r\n            LibPart.Part[] memory _royalties = new LibPart.Part[](1);\r\n            _royalties[0].value = _royaltyFeesInBipsRariableMintable;\r\n            _royalties[0].account = _receiverRoyaltyRariableMintable;\r\n            _saveRoyalties(startTokenId + i, _royalties);\r\n        }\r\n    }\r\n\r\n    function _royaltyMintable(uint256 _tokenId, uint256 _salePrice) external view onlyOwner returns(address receiver, uint256 royaltyAmount) {  \r\n        //use the same royalties that were saved for Rariable \r\n        LibPart.Part[] memory _royalties = royalties[_tokenId];\r\n        if(_royalties.length > 0) {\r\n            return (_royalties[0].account, (_salePrice * _royalties[0].value)/10000);\r\n        }\r\n        return (address(0), 0);\r\n    }\r\n\r\n\r\n    function burnSingle(uint256 tokenId, uint256 amountCopys) public onlyOwner {\r\n        require(!paused, \"burnSingle - the contract is paused!\");\r\n        \r\n        _burn(msg.sender, tokenId, amountCopys);\r\n        tokenCopys[tokenId] = tokenCopys[tokenId] - amountCopys;\r\n        _resetTokenRoyalty(tokenId);\r\n\r\n        if(tokenCopys[tokenId] <= 0) {\r\n            exist[tokenId] = false;\r\n        }\r\n    }\r\n\r\n    function burnAreaTokenAtOnce(uint256 areaStart, uint256 areaEnd, uint256 amountCopysEachToken) public onlyOwner {\r\n        require(!paused, \"burnAreaTokenAtOnce - the contract is paused!\");\r\n        \r\n        for(uint256 i= areaStart; i<= areaEnd; i++){\r\n            uint256 startTokenId = 0;\r\n            require(areaEnd <= maxTokenInCollection, \"burnAreaTokenAtOnce - the areaEnd value can not be bigger then the max. token in collection. Decrease the value areaEnd and try again\");\r\n            require(exist[startTokenId + i] && (tokenCopys[startTokenId + i] >= amountCopysEachToken), \"burnAreaTokenAtOnce - the burn amount is bigger tha the real exist token. Decrease the value areaEnd and try again\");\r\n            \r\n            _burn(msg.sender, startTokenId + i, amountCopysEachToken);\r\n            tokenCopys[startTokenId + i] = tokenCopys[startTokenId + i] - amountCopysEachToken;\r\n            _resetTokenRoyalty(startTokenId + i);\r\n            \r\n            if(tokenCopys[startTokenId + i] <= 0) {\r\n            exist[startTokenId + i] = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    function burnSingleForMint(uint256 burnTokenId, uint256 burnAmountCopys, uint256 mintTokenId, uint256 mintAmountCopys) public onlyOwner {\r\n        require(!paused, \"burnSingleForMint - the contract is paused!\");\r\n        require(burnTokenId == mintTokenId, \"burnSingleForMint - ATTENTION: The value of burnTokenId and mintTokenId must be equale !!!\");\r\n        uint256 tokenId = burnTokenId; \r\n\r\n        _burn(msg.sender, burnTokenId, burnAmountCopys);\r\n        _mint(msg.sender, mintTokenId, mintAmountCopys, \"\");\r\n        \r\n        tokenCopys[tokenId] = tokenCopys[tokenId] +  (mintAmountCopys - burnAmountCopys);\r\n    }\r\n\r\n\r\n    function setAddressWithdrawBalanceOne(address payable _newAddressWithdrawBalanceOne) public onlyOwner {     \r\n        AddressWithdrawBalanceOne = _newAddressWithdrawBalanceOne;\r\n    }\r\n\r\n    function setAddressWithdrawBalanceTwo(address payable _newAddressWithdrawBalanceTwo) public onlyOwner {    \r\n        AddressWithdrawBalanceTwo = _newAddressWithdrawBalanceTwo;\r\n    }\r\n\r\n    function setFaktorWithdrawBalanceOne(uint256 _newFaktorWithdrawBalanceOne) public onlyOwner {               \r\n        FaktorWithdrawBalanceOne = _newFaktorWithdrawBalanceOne;\r\n    }\r\n\r\n    function setFaktorWithdrawBalanceTwo(uint256 _newFaktorWithdrawBalanceTwo) public onlyOwner {              \r\n        FaktorWithdrawBalanceTwo = _newFaktorWithdrawBalanceTwo;\r\n    }\r\n\r\n    function withdraw() public payable onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        require(balance > 0, \"withdrawAllAmount - no balance left to withdraw\");\r\n    \r\n        (bool successTransferOne, ) = payable(AddressWithdrawBalanceOne).call{value: address(this).balance * FaktorWithdrawBalanceOne / 100}(\"\");\r\n        require(successTransferOne, \"withdrawAllAmount - transferOne is failed.\");\r\n        \r\n        (bool successTransferTwo, ) = payable(AddressWithdrawBalanceTwo).call{value: address(this).balance}(\"\");\r\n        require(successTransferTwo, \"withdrawAllAmount - transferTwo is failed.\");\r\n    }\r\n}\r\n// END of Contract ==================================================================================================================================================================================================|", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_hiddenURI\",\"type\":\"string\"},{\"internalType\":\"uint96\",\"name\":\"_royaltyFeesInBips\",\"type\":\"uint96\"},{\"internalType\":\"address payable\",\"name\":\"_receiverRoyalty\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_AddressWithdrawBalanceOne\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_AddressWithdrawBalanceTwo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_MaxTokenInCollection\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"struct LibPart.Part[]\",\"name\":\"royalties\",\"type\":\"tuple[]\"}],\"name\":\"RoyaltiesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OPERATOR_FILTER_REGISTRY\",\"outputs\":[{\"internalType\":\"contract IOperatorFilterRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"_royaltyMintable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"areaStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"areaEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCopysEachToken\",\"type\":\"uint256\"}],\"name\":\"burnAreaTokenAtOnce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCopys\",\"type\":\"uint256\"}],\"name\":\"burnSingle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnAmountCopys\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintAmountCopys\",\"type\":\"uint256\"}],\"name\":\"burnSingleForMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"existsToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRaribleV2Royalties\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"internalType\":\"struct LibPart.Part[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"hiddenToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountCopysEachToken\",\"type\":\"uint256\"}],\"name\":\"mintAllAtOnceToLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"areaStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"areaEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCopysEachToken\",\"type\":\"uint256\"}],\"name\":\"mintAreaToLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountCopys\",\"type\":\"uint256[]\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCopys\",\"type\":\"uint256\"}],\"name\":\"mintSingle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"perTokenCopys\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountCopys\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCopys\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newAddressWithdrawBalanceOne\",\"type\":\"address\"}],\"name\":\"setAddressWithdrawBalanceOne\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newAddressWithdrawBalanceTwo\",\"type\":\"address\"}],\"name\":\"setAddressWithdrawBalanceTwo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFaktorWithdrawBalanceOne\",\"type\":\"uint256\"}],\"name\":\"setFaktorWithdrawBalanceOne\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFaktorWithdrawBalanceTwo\",\"type\":\"uint256\"}],\"name\":\"setFaktorWithdrawBalanceTwo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newHiddenURI\",\"type\":\"string\"}],\"name\":\"setHiddenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"setItemHidden\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"setItemRevield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxTokenInCollection\",\"type\":\"uint256\"}],\"name\":\"setMaxTokenInCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setPolygonOnlyOnOpenSea\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_receiverRoyaltyGeneraly\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_royaltyFeesInBipsGeneraly\",\"type\":\"uint96\"}],\"name\":\"setRoyaltyGeneraly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_receiverRoyaltyRariableMintable\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_royaltyFeesInBipsRariableMintable\",\"type\":\"uint96\"}],\"name\":\"setRoyaltyRariableMintable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "CyberpunkArtDistrict", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000001f40000000000000000000000009eb3fd97b3b48e06f609e52f1ba9b5f02080c8eb0000000000000000000000009eb3fd97b3b48e06f609e52f1ba9b5f02080c8eb0000000000000000000000009eb3fd97b3b48e06f609e52f1ba9b5f02080c8eb0000000000000000000000009eb3fd97b3b48e06f609e52f1ba9b5f02080c8eb0000000000000000000000000000000000000000000000000000000000000014437962657270756e6b4172744469737472696374000000000000000000000000000000000000000000000000000000000000000000000000000000000000000343414400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043697066733a2f2f6261667962656962373234726d6b6b7a6a6e65716462326b3564766635656d786d66753233686735667a62797362777165666961786476663470692f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043697066733a2f2f62616679626569626b75697867613336636a37666f6a6f68796b77766e376c61757671327976336b6b726b6275736275676f7870617561776b36792f0000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d66ebd97d00a29c6f03655fff0bb33a7d8282622f1dde13617b21c8385349784"}