{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Token/IERC20.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.14;\\r\\n\\r\\ninterface IERC20 {\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    \\r\\n    function symbol() external view returns(string memory);\\r\\n    \\r\\n    function name() external view returns(string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    \\r\\n    /**\\r\\n     * @dev Returns the number of decimal places\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"\r\n    },\r\n    \"contracts/Token/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.14;\\r\\n\\r\\n/**\\r\\n * @title Owner\\r\\n * @dev Set & change owner\\r\\n */\\r\\ncontract Ownable {\\r\\n\\r\\n    address private owner;\\r\\n    \\r\\n    // event for EVM logging\\r\\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\\r\\n    \\r\\n    // modifier to check if caller is owner\\r\\n    modifier onlyOwner() {\\r\\n        // If the first argument of 'require' evaluates to 'false', execution terminates and all\\r\\n        // changes to the state and to Ether balances are reverted.\\r\\n        // This used to consume all gas in old EVM versions, but not anymore.\\r\\n        // It is often a good idea to use 'require' to check if functions are called correctly.\\r\\n        // As a second argument, you can also provide an explanation about what went wrong.\\r\\n        require(msg.sender == owner, \\\"Caller is not owner\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Set contract deployer as owner\\r\\n     */\\r\\n    constructor() {\\r\\n        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\\r\\n        emit OwnerSet(address(0), owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change owner\\r\\n     * @param newOwner address of new owner\\r\\n     */\\r\\n    function changeOwner(address newOwner) public onlyOwner {\\r\\n        emit OwnerSet(owner, newOwner);\\r\\n        owner = newOwner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return owner address \\r\\n     * @return address of owner\\r\\n     */\\r\\n    function getOwner() external view returns (address) {\\r\\n        return owner;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/Token/SafeMath.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.14;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/Token/Stasis.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.14;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\ninterface IFeeReceiver {\\r\\n    function trigger() external;\\r\\n}\\r\\n\\r\\ninterface IEmissionRecipient {\\r\\n    function trigger() external;\\r\\n}\\r\\n\\r\\ninterface ISwapper {\\r\\n    function buy(address user) external payable;\\r\\n    function sell(address user) external;\\r\\n}\\r\\n\\r\\n/**\\r\\n    Modular Upgradeable Token\\r\\n    Token System Designed By DeFi Mark\\r\\n */\\r\\ncontract Stasis is IERC20, Ownable {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // total supply\\r\\n    uint256 private _totalSupply = 260_000_000 * 10**18;\\r\\n\\r\\n    // token data\\r\\n    string private constant _name = 'Stasis';\\r\\n    string private constant _symbol = 'STS';\\r\\n    uint8  private constant _decimals = 18;\\r\\n\\r\\n    // balances\\r\\n    mapping (address => uint256) private _balances;\\r\\n    mapping (address => mapping (address => uint256)) private _allowances;\\r\\n\\r\\n    // Swapper\\r\\n    address public swapper;\\r\\n\\r\\n    // Zero & DEAD addresses\\r\\n    address private immutable DEAD_ADDRESS = 0x000000000000000000000000000000000000dEaD;\\r\\n    address private immutable ZERO_ADDRESS = 0x0000000000000000000000000000000000000000;\\r\\n\\r\\n    // Amount Burned\\r\\n    uint256 public totalBurned;\\r\\n\\r\\n    // Taxation on transfers\\r\\n    uint256 public buyFee             = 500;\\r\\n    uint256 public sellFee            = 1000;\\r\\n    uint256 public transferFee        = 0;\\r\\n    uint256 public constant TAX_DENOM = 10000;\\r\\n\\r\\n    // permissions\\r\\n    struct Permissions {\\r\\n        bool isFeeExempt;\\r\\n        bool isLiquidityPool;\\r\\n    }\\r\\n    mapping ( address => Permissions ) public permissions;\\r\\n\\r\\n    // Fee Recipients\\r\\n    address public sellFeeRecipient;\\r\\n    address public buyFeeRecipient;\\r\\n    address public transferFeeRecipient;\\r\\n\\r\\n    // Trigger Fee Recipients\\r\\n    bool public triggerBuyRecipient = true;\\r\\n    bool public triggerTransferRecipient = false;\\r\\n    bool public triggerSellRecipient = false;\\r\\n\\r\\n    // Launched, allows set up without bots\\r\\n    bool public launched = false;\\r\\n\\r\\n    // events\\r\\n    event SetBuyFeeRecipient(address recipient);\\r\\n    event SetSellFeeRecipient(address recipient);\\r\\n    event SetTransferFeeRecipient(address recipient);\\r\\n    event SetFeeExemption(address account, bool isFeeExempt);\\r\\n    event SetAutomatedMarketMaker(address account, bool isMarketMaker);\\r\\n    event SetFees(uint256 buyFee, uint256 sellFee, uint256 transferFee);\\r\\n    event SetSwapper(address newSwapper);\\r\\n    event Launched(uint256 blockNo);\\r\\n    event SetAutoTriggers(bool triggerBuy, bool triggerSell, bool triggerTransfer);\\r\\n\\r\\n    constructor() {\\r\\n\\r\\n        // exempt sender for tax-free initial distribution\\r\\n        permissions[msg.sender].isFeeExempt = true;\\r\\n\\r\\n        // initial supply allocation\\r\\n        _balances[msg.sender] = _totalSupply;\\r\\n        emit Transfer(address(0), msg.sender, _totalSupply);\\r\\n    }\\r\\n\\r\\n    /////////////////////////////////\\r\\n    /////    ERC20 FUNCTIONS    /////\\r\\n    /////////////////////////////////\\r\\n\\r\\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\\r\\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\\r\\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\\r\\n    \\r\\n    function name() public pure override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public pure override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public pure override returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _allowances[msg.sender][spender] = amount;\\r\\n        emit Approval(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /** Transfer Function */\\r\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\r\\n        if (msg.sender == recipient) {\\r\\n            return _sell(amount, msg.sender);\\r\\n        } else {\\r\\n            return _transferFrom(msg.sender, recipient, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** Transfer Function */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\r\\n        _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, 'Insufficient Allowance');\\r\\n        return _transferFrom(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    /////////////////////////////////\\r\\n    /////   PUBLIC FUNCTIONS    /////\\r\\n    /////////////////////////////////\\r\\n\\r\\n    function burn(uint256 amount) external returns (bool) {\\r\\n        return _burn(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function burnFrom(address account, uint256 amount) external returns (bool) {\\r\\n        _allowances[account][msg.sender] = _allowances[account][msg.sender].sub(amount, 'Insufficient Allowance');\\r\\n        return _burn(account, amount);\\r\\n    }\\r\\n\\r\\n    function sell(uint256 amount) external returns (bool) {\\r\\n        return _sell(amount, msg.sender);\\r\\n    }\\r\\n\\r\\n    function sellFor(uint256 amount, address recipient) external returns (bool) {\\r\\n        return _sell(amount, recipient);\\r\\n    }\\r\\n\\r\\n    function buyFor(address account) external payable {\\r\\n        require(\\r\\n            account != ZERO_ADDRESS ||\\r\\n            account != DEAD_ADDRESS, \\\"Zero Address!\\\"\\r\\n            );\\r\\n\\r\\n        ISwapper(swapper).buy{value: msg.value}(account);\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        ISwapper(swapper).buy{value: address(this).balance}(msg.sender);\\r\\n    }\\r\\n\\r\\n    /////////////////////////////////\\r\\n    /////    OWNER FUNCTIONS    /////\\r\\n    /////////////////////////////////\\r\\n\\r\\n    function withdraw(address token) external onlyOwner {\\r\\n        require(token != address(0), 'Zero Address');\\r\\n        bool s = IERC20(token).transfer(msg.sender, IERC20(token).balanceOf(address(this)));\\r\\n        require(s, 'Failure On Token Withdraw');\\r\\n    }\\r\\n\\r\\n    function withdrawBNB() external onlyOwner {\\r\\n        (bool s,) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\r\\n        require(s);\\r\\n    }\\r\\n\\r\\n    function setTransferFeeRecipient(address recipient) external onlyOwner {\\r\\n        require(recipient != address(0), 'Zero Address');\\r\\n\\r\\n        permissions[transferFeeRecipient].isFeeExempt = false;\\r\\n\\r\\n        transferFeeRecipient = recipient;\\r\\n        permissions[recipient].isFeeExempt = true;\\r\\n        emit SetTransferFeeRecipient(recipient);\\r\\n    }\\r\\n\\r\\n    function setBuyFeeRecipient(address recipient) external onlyOwner {\\r\\n        require(recipient != address(0), 'Zero Address');\\r\\n\\r\\n        permissions[transferFeeRecipient].isFeeExempt = false;\\r\\n\\r\\n        buyFeeRecipient = recipient;\\r\\n        permissions[recipient].isFeeExempt = true;\\r\\n        emit SetBuyFeeRecipient(recipient);\\r\\n    }\\r\\n\\r\\n    function setSellFeeRecipient(address recipient) external onlyOwner {\\r\\n        require(recipient != address(0), 'Zero Address');\\r\\n        \\r\\n        permissions[transferFeeRecipient].isFeeExempt = false;\\r\\n\\r\\n        sellFeeRecipient = recipient;\\r\\n        permissions[recipient].isFeeExempt = true;\\r\\n        emit SetSellFeeRecipient(recipient);\\r\\n    }\\r\\n\\r\\n    function registerAutomatedMarketMaker(address account) external onlyOwner {\\r\\n        require(account != address(0), 'Zero Address');\\r\\n        require(!permissions[account].isLiquidityPool, 'Already An AMM');\\r\\n        permissions[account].isLiquidityPool = true;\\r\\n        emit SetAutomatedMarketMaker(account, true);\\r\\n    }\\r\\n\\r\\n    function unRegisterAutomatedMarketMaker(address account) external onlyOwner {\\r\\n        require(account != address(0), 'Zero Address');\\r\\n        require(permissions[account].isLiquidityPool, 'Not An AMM');\\r\\n        permissions[account].isLiquidityPool = false;\\r\\n        emit SetAutomatedMarketMaker(account, false);\\r\\n    }\\r\\n\\r\\n    function setAutoTriggers(\\r\\n        bool autoBuyTrigger,\\r\\n        bool autoTransferTrigger,\\r\\n        bool autoSellTrigger\\r\\n    ) external onlyOwner {\\r\\n        triggerBuyRecipient = autoBuyTrigger;\\r\\n        triggerTransferRecipient = autoTransferTrigger;\\r\\n        triggerSellRecipient = autoSellTrigger;\\r\\n        emit SetAutoTriggers(autoBuyTrigger, autoSellTrigger, autoTransferTrigger);\\r\\n    }\\r\\n\\r\\n    function setFees(uint _buyFee, uint _sellFee, uint _transferFee) external onlyOwner {\\r\\n        require(\\r\\n            _buyFee <= 2000,\\r\\n            'Buy Fee Too High'\\r\\n        );\\r\\n        require(\\r\\n            _sellFee <= 2000,\\r\\n            'Sell Fee Too High'\\r\\n        );\\r\\n        require(\\r\\n            _transferFee <= 2000,\\r\\n            'Transfer Fee Too High'\\r\\n        );\\r\\n\\r\\n        buyFee = _buyFee;\\r\\n        sellFee = _sellFee;\\r\\n        transferFee = _transferFee;\\r\\n\\r\\n        emit SetFees(_buyFee, _sellFee, _transferFee);\\r\\n    }\\r\\n\\r\\n    function setFeeExempt(address account, bool isExempt) external onlyOwner {\\r\\n        require(account != address(0), 'Zero Address');\\r\\n        permissions[account].isFeeExempt = isExempt;\\r\\n        emit SetFeeExemption(account, isExempt);\\r\\n    }\\r\\n\\r\\n    function setSwapper(address newSwapper) external onlyOwner {\\r\\n        require(\\r\\n            newSwapper != address(0),\\r\\n            'Zero Address'\\r\\n        );\\r\\n        swapper = newSwapper;\\r\\n        emit SetSwapper(newSwapper);\\r\\n    }\\r\\n\\r\\n    function launch() external onlyOwner {\\r\\n        require(launched == false, 'Already Launched');\\r\\n        launched = true;\\r\\n        emit Launched(block.number);\\r\\n    }\\r\\n\\r\\n\\r\\n    /////////////////////////////////\\r\\n    /////     READ FUNCTIONS    /////\\r\\n    /////////////////////////////////\\r\\n\\r\\n    function getTax(address sender, address recipient, uint256 amount) public view returns (uint256, address, bool) {\\r\\n        if ( permissions[sender].isFeeExempt || permissions[recipient].isFeeExempt ) {\\r\\n            return (0, address(0), false);\\r\\n        }\\r\\n        return permissions[sender].isLiquidityPool ? \\r\\n               (amount.mul(buyFee).div(TAX_DENOM), buyFeeRecipient, triggerBuyRecipient) : \\r\\n               permissions[recipient].isLiquidityPool ? \\r\\n               (amount.mul(sellFee).div(TAX_DENOM), sellFeeRecipient, triggerSellRecipient) :\\r\\n               (amount.mul(transferFee).div(TAX_DENOM), transferFeeRecipient, triggerTransferRecipient);\\r\\n    }\\r\\n\\r\\n    //////////////////////////////////\\r\\n    /////   INTERNAL FUNCTIONS   /////\\r\\n    //////////////////////////////////\\r\\n\\r\\n    /** Internal Transfer */\\r\\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\\r\\n        require(\\r\\n            recipient != address(0),\\r\\n            'Zero Recipient'\\r\\n        );\\r\\n        require(\\r\\n            amount > 0,\\r\\n            'Zero Amount'\\r\\n        );\\r\\n        require(\\r\\n            amount <= balanceOf(sender),\\r\\n            'Insufficient Balance'\\r\\n        );\\r\\n\\r\\n        // make pre-launch checks\\r\\n        if (!launched) {\\r\\n            require(\\r\\n                sender == this.getOwner(),\\r\\n                'Only Owner Can Transfer Tokens Pre Launch'\\r\\n            );\\r\\n        }\\r\\n        \\r\\n        // decrement sender balance\\r\\n        _balances[sender] -= amount;\\r\\n\\r\\n        // fee for transaction\\r\\n        (uint256 fee, address feeDestination, bool trigger) = getTax(sender, recipient, amount);\\r\\n\\r\\n        // give amount to recipient less fee\\r\\n        uint256 sendAmount = amount - fee;\\r\\n        _balances[recipient] += sendAmount;\\r\\n        emit Transfer(sender, recipient, sendAmount);\\r\\n\\r\\n        // allocate fee if any\\r\\n        if (fee > 0) {\\r\\n\\r\\n            // if recipient field is valid\\r\\n            bool isValidRecipient = feeDestination != ZERO_ADDRESS && feeDestination != DEAD_ADDRESS && feeDestination != address(this);\\r\\n\\r\\n            // allocate amount to recipient\\r\\n            address feeRecipient = isValidRecipient ? feeDestination : address(this);\\r\\n            _balances[feeRecipient] = _balances[feeRecipient].add(fee);\\r\\n            emit Transfer(sender, feeRecipient, fee);\\r\\n\\r\\n            // if valid and trigger is enabled, trigger tokenomics mid transfer\\r\\n            if (trigger && isValidRecipient) {\\r\\n                uint256 _length;\\r\\n\\r\\n                assembly {\\r\\n                    _length:= extcodesize(feeRecipient)\\r\\n                }\\r\\n\\r\\n                if(_length == 0) {\\r\\n                    return true;\\r\\n                } else {\\r\\n                    IFeeReceiver(feeRecipient).trigger();\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 amount) internal returns (bool) {\\r\\n        require(\\r\\n            account != address(0),\\r\\n            'Zero Address'\\r\\n        );\\r\\n        require(\\r\\n            amount > 0,\\r\\n            'Zero Amount'\\r\\n        );\\r\\n        require(\\r\\n            amount <= balanceOf(account),\\r\\n            'Insufficient Balance'\\r\\n        );\\r\\n\\r\\n        // delete from balance and supply\\r\\n        _balances[account] = _balances[account].sub(amount, 'Balance Underflow');\\r\\n        _totalSupply = _totalSupply.sub(amount, 'Supply Underflow');\\r\\n\\r\\n        // increment total burned\\r\\n        unchecked {\\r\\n            totalBurned += amount;\\r\\n        }\\r\\n\\r\\n        // emit transfer\\r\\n        emit Transfer(account, address(0), amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _sell(uint256 amount, address recipient) internal returns (bool) {\\r\\n        require(\\r\\n            amount > 0,\\r\\n            'Zero Amount'\\r\\n        );\\r\\n        require(\\r\\n            recipient != address(0) && recipient != address(this) && recipient != swapper,\\r\\n            'Invalid Recipient'\\r\\n        );\\r\\n        require(\\r\\n            amount <= balanceOf(msg.sender),\\r\\n            'Insufficient Balance'\\r\\n        );\\r\\n\\r\\n        // re-allocate balances\\r\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\\r\\n        _balances[swapper] = _balances[swapper].add(amount);\\r\\n        emit Transfer(msg.sender, swapper, amount);\\r\\n\\r\\n        // sell token for user\\r\\n        ISwapper(swapper).sell(recipient);\\r\\n        return true;\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNo\",\"type\":\"uint256\"}],\"name\":\"Launched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"triggerBuy\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"triggerSell\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"triggerTransfer\",\"type\":\"bool\"}],\"name\":\"SetAutoTriggers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isMarketMaker\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMaker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"SetBuyFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFeeExempt\",\"type\":\"bool\"}],\"name\":\"SetFeeExemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferFee\",\"type\":\"uint256\"}],\"name\":\"SetFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"SetSellFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSwapper\",\"type\":\"address\"}],\"name\":\"SetSwapper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"SetTransferFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TAX_DENOM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"buyFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"permissions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isFeeExempt\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isLiquidityPool\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"registerAutomatedMarketMaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sellFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"autoBuyTrigger\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"autoTransferTrigger\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"autoSellTrigger\",\"type\":\"bool\"}],\"name\":\"setAutoTriggers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setBuyFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExempt\",\"type\":\"bool\"}],\"name\":\"setFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transferFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setSellFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSwapper\",\"type\":\"address\"}],\"name\":\"setSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setTransferFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerBuyRecipient\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerSellRecipient\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerTransferRecipient\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unRegisterAutomatedMarketMaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Stasis", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}