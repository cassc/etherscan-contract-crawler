{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/GhostCollection.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n  \\npragma solidity ^0.8.0;\\n\\nimport \\\"./presets/ERC721EnviousDynamicPreset.sol\\\";\\n\\ncontract GhostCollection is ERC721EnviousDynamicPreset {\\n\\t\\n\\taddress private _superUser;\\n\\taddress private _superMinter;\\n\\t\\n\\tconstructor(\\n\\t\\tstring memory tokenName,\\n\\t\\tstring memory tokenSymbol,\\n\\t\\tstring memory baseTokenURI,\\n\\t\\tuint256[] memory edgeValues,\\n\\t\\tuint256[] memory edgeOffsets,\\n\\t\\tuint256[] memory edgeRanges,\\n\\t\\taddress tokenMeasurment\\n\\t) ERC721EnviousDynamicPreset(\\n\\t\\ttokenName,\\n\\t\\ttokenSymbol,\\n\\t\\tbaseTokenURI,\\n\\t\\tedgeValues,\\n\\t\\tedgeOffsets,\\n\\t\\tedgeRanges,\\n\\t\\ttokenMeasurment\\n\\t) {\\n\\t\\t_superUser = _msgSender();\\n\\t\\t_superMinter = _msgSender();\\n\\t}\\n\\n\\tmodifier onlySuperUser {\\n\\t\\trequire(_msgSender() == _superUser, \\\"only for super user\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction mint(address to) public override {\\n\\t\\trequire(_msgSender() == _superMinter, \\\"only for super minter\\\");\\n\\t\\tsuper.mint(to);\\n\\t}\\n\\n\\tfunction setGhostAddresses(\\n\\t\\taddress ghostToken, \\n\\t\\taddress ghostBonding\\n\\t) public override onlySuperUser {\\n\\t\\tsuper.setGhostAddresses(ghostToken, ghostBonding);\\n\\t}\\n\\n\\tfunction changeBaseUri(string memory newBaseURI) external onlySuperUser {\\n\\t\\tsuper._changeBaseURI(newBaseURI);\\n\\t}\\n\\n\\tfunction renewSuperMinter(address who) external onlySuperUser {\\n\\t\\t_superMinter = who;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"/contracts/presets/ERC721EnviousDynamicPreset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../extension/ERC721Envious.sol\\\";\\nimport \\\"../interfaces/IERC721EnviousDynamic.sol\\\";\\nimport \\\"../openzeppelin/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"../openzeppelin/token/ERC20/IERC20.sol\\\";\\nimport \\\"../openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../openzeppelin/utils/Address.sol\\\";\\nimport \\\"../openzeppelin/utils/Strings.sol\\\";\\nimport \\\"../openzeppelin/utils/Counters.sol\\\";\\n\\n/**\\n * @title ERC721 Collateralization Dynamic Mock\\n * This mock shows an implementation of ERC721Envious with dynamic URI.\\n * It will change on every collateral modification. Handmade `totalSupply` \\n * function will be used in order to be used in {_disperse} function.\\n *\\n * @author 5Tr3TcH @ghostchain\\n * @author 571nkY @ghostchain\\n */\\ncontract ERC721EnviousDynamicPreset is IERC721EnviousDynamic, ERC721Enumerable, ERC721Envious {\\n\\n\\tusing SafeERC20 for IERC20;\\n\\tusing Address for address;\\n\\tusing Strings for uint256;\\n\\tusing Counters for Counters.Counter;\\n\\n\\tstring private _baseTokenURI;\\n\\tCounters.Counter private _tokenTracker;\\n\\n\\t// token that will be used for dynamic measurment\\n\\taddress public measurmentTokenAddress;\\n\\n\\t// edges within which redistribution of URI will take place\\n\\tEdge[] public edges;\\n\\n\\t// solhint-disable-next-line\\n\\tstring private constant ZERO_ADDRESS = \\\"zero address found\\\";\\n\\t\\n\\tconstructor(\\n\\t\\tstring memory tokenName,\\n\\t\\tstring memory tokenSymbol,\\n\\t\\tstring memory baseTokenURI,\\n\\t\\tuint256[] memory edgeValues,\\n\\t\\tuint256[] memory edgeOffsets,\\n\\t\\tuint256[] memory edgeRanges,\\n\\t\\taddress tokenMeasurment\\n\\t) ERC721(tokenName, tokenSymbol) {\\n\\t\\trequire(tokenMeasurment != address(0), ZERO_ADDRESS);\\n\\t\\trequire(\\n\\t\\t\\tedgeValues.length == edgeOffsets.length && \\n\\t\\t\\tedgeValues.length == edgeRanges.length,\\n\\t\\t\\tZERO_ADDRESS\\n\\t\\t);\\n\\n\\t\\tmeasurmentTokenAddress = tokenMeasurment;\\n\\t\\t_changeBaseURI(baseTokenURI);\\n\\n\\t\\tfor (uint256 i = 0; i < edgeValues.length; i++) {\\n\\t\\t\\tedges.push(Edge({\\n\\t\\t\\t\\tvalue: edgeValues[i], \\n\\t\\t\\t\\toffset: edgeOffsets[i], \\n\\t\\t\\t\\trange: edgeRanges[i]\\n\\t\\t\\t}));\\n\\t\\t}\\n\\t}\\n\\n\\treceive() external payable {\\n\\t\\t_disperseTokenCollateral(msg.value, address(0));\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC165-supportsInterface}.\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride(IERC165, ERC721Enumerable, ERC721Envious)\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn interfaceId == type(IERC721EnviousDynamic).interfaceId ||\\n\\t\\t\\tERC721Enumerable.supportsInterface(interfaceId) ||\\n\\t\\t\\tERC721Envious.supportsInterface(interfaceId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {_baseURI}.\\n\\t */\\n\\tfunction baseURI() external view virtual returns (string memory) {\\n\\t\\treturn _baseURI();\\n\\t}\\n\\n\\t/**\\n\\t * @dev Getter function for each token URI.\\n\\t *\\n\\t * Requirements:\\n\\t * - `tokenId` must exist.\\n\\t *\\n\\t * @param tokenId unique identifier of token\\n\\t * @return token URI string\\n\\t */\\n\\tfunction tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n\\t\\t_requireMinted(tokenId);\\n\\t\\t\\n\\t\\tstring memory currentURI = _baseURI();\\n\\t\\tuint256 tokenPointer = getTokenPointer(tokenId);\\n\\t\\treturn string(abi.encodePacked(currentURI, tokenPointer.toString(), \\\".json\\\"));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Get `tokenURI` for specific token based on predefined `edges`.\\n\\t *\\n\\t * @param tokenId unique identifier for token\\n\\t */\\n\\tfunction getTokenPointer(uint256 tokenId) public view virtual override returns (uint256) {\\n\\t\\tuint256 collateral = collateralBalances[tokenId][measurmentTokenAddress];\\n\\t\\tuint256 totalDisperse = disperseBalance[measurmentTokenAddress] / totalSupply();\\n\\t\\tuint256\\ttakenDisperse = disperseTaken[tokenId][measurmentTokenAddress];\\n\\t\\tuint256 value = collateral + totalDisperse - takenDisperse;\\n\\n\\t\\tuint256 range = 1;\\n\\t\\tuint256 offset = 0;\\n\\n\\t\\tfor (uint256 i = edges.length; i > 0; i--) {\\n\\t\\t\\tif (value >= edges[i-1].value) {\\n\\t\\t\\t\\trange = edges[i-1].range;\\n\\t\\t\\t\\toffset = edges[i-1].offset;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tuint256 seed = uint256(keccak256(abi.encodePacked(tokenId, collateral, totalDisperse))) % range;\\n\\t\\treturn seed + offset;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Set ghost related addresses.\\n\\t *\\n\\t * Requirements:\\n\\t * - `ghostAddress` must be non-zero address\\n\\t * - `ghostBonding` must be non-zero address\\n\\t *\\n\\t * @param ghostToken non-rebasing wrapping token address\\n\\t * @param ghostBonding bonding contract address\\n\\t */\\n\\tfunction setGhostAddresses(\\n\\t\\taddress ghostToken, \\n\\t\\taddress ghostBonding\\n\\t) public virtual {\\n\\t\\trequire(\\n\\t\\t\\tghostToken != address(0) && ghostBonding != address(0),\\n\\t\\t\\tZERO_ADDRESS\\n\\t\\t);\\n\\t\\t_changeGhostAddresses(ghostToken, ghostBonding);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Envious-_changeCommunityAddresses}.\\n\\t */\\n\\tfunction changeCommunityAddresses(address newTokenAddress, address newBlackHole) public virtual {\\n\\t\\trequire(newTokenAddress != address(0), ZERO_ADDRESS);\\n\\t\\t_changeCommunityAddresses(newTokenAddress, newBlackHole);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {ERC721EnviousDynamic-mint}\\n\\t */\\n\\tfunction mint(address to) public virtual override {\\n\\t\\t_tokenTracker.increment();\\n\\t\\t_safeMint(to, _tokenTracker.current());\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {ERC721-_burn}\\n\\t */\\n\\tfunction burn(uint256 tokenId) public virtual {\\n\\t\\t_burn(tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {ERC721Envious-_disperse}\\n\\t */\\n\\tfunction _disperse(address tokenAddress, uint256 tokenId) internal virtual override {\\n\\t\\tuint256 balance = disperseBalance[tokenAddress] / totalSupply();\\n\\n\\t\\tif (disperseTotalTaken[tokenAddress] + balance > disperseBalance[tokenAddress]) {\\n\\t\\t\\tbalance = disperseBalance[tokenAddress] - disperseTotalTaken[tokenAddress];\\n\\t\\t}\\n\\n\\t\\tif (balance > disperseTaken[tokenId][tokenAddress]) {\\n\\t\\t\\tuint256 amount = balance - disperseTaken[tokenId][tokenAddress];\\n\\t\\t\\tdisperseTaken[tokenId][tokenAddress] += amount;\\n\\n\\t\\t\\t(bool shouldAppend,) = _arrayContains(tokenAddress, collateralTokens[tokenId]);\\n\\t\\t\\tif (shouldAppend) {\\n\\t\\t\\t\\tcollateralTokens[tokenId].push(tokenAddress);\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\tcollateralBalances[tokenId][tokenAddress] += amount;\\n\\t\\t\\tdisperseTotalTaken[tokenAddress] += amount;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Getter function for `_baseTokenURI`.\\n\\t *\\n\\t * @return base URI string\\n\\t */\\n\\tfunction _baseURI() internal view virtual override returns (string memory) {\\n\\t\\treturn _baseTokenURI;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Ability to change URI for the collection.\\n\\t */\\n\\tfunction _changeBaseURI(string memory newBaseURI) internal virtual {\\n\\t\\t_baseTokenURI = newBaseURI;\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {ERC721-_beforeTokenTransfer}.\\n\\t */\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 firstTokenId,\\n\\t\\tuint256 batchSize\\n\\t) internal virtual override(ERC721, ERC721Enumerable) {\\n\\t\\tERC721Enumerable._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"/contracts/openzeppelin/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/openzeppelin/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/contracts/openzeppelin/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/openzeppelin/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/openzeppelin/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/openzeppelin/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/openzeppelin/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/openzeppelin/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"/contracts/openzeppelin/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/contracts/openzeppelin/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/openzeppelin/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"/contracts/openzeppelin/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/contracts/openzeppelin/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"/contracts/openzeppelin/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/openzeppelin/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"/contracts/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"/contracts/openzeppelin/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/INoteKeeper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity ^0.8.0;\\n\\ninterface INoteKeeper {\\n    // Info for market note\\n\\tstruct Note {\\n\\t\\tuint256 payout; // gOHM remaining to be paid\\n\\t\\tuint48 created; // time market was created\\n\\t\\tuint48 matured; // timestamp when market is matured\\n\\t\\tuint48 redeemed; // time market was redeemed\\n\\t\\tuint48 marketID; // market ID of deposit. uint48 to avoid adding a slot.\\n\\t}\\n\\t\\n\\tfunction redeem(address _user, uint256[] memory _indexes, bool _sendgOHM) external returns (uint256);\\n\\t\\n\\tfunction redeemAll(address _user, bool _sendgOHM) external returns (uint256);\\n\\t\\n\\tfunction pushNote(address to, uint256 index) external;\\n\\t\\n\\tfunction pullNote(address from, uint256 index) external returns (uint256 newIndex_);\\n\\t\\n\\tfunction indexesFor(address _user) external view returns (uint256[] memory);\\n\\t\\n\\tfunction pendingFor(address _user, uint256 _index) external view returns (uint256 payout_, bool matured_);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IERC721EnviousDynamic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Envious.sol\\\";\\n\\n/**\\n * @title Additional extension for IERC721Envious, in order to make \\n * `tokenURI` dynamic, based on actual collateral.\\n * @author 571nkY @ghostchain\\n * @dev Ability to get royalty payments from collateral NFTs.\\n */\\ninterface IERC721EnviousDynamic is IERC721Envious {\\n\\tstruct Edge {\\n\\t\\tuint256 value;\\n\\t\\tuint256 offset;\\n\\t\\tuint256 range;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Get `tokenURI` for specific token based on edges. Where actual \\n\\t * collateral should define which edge should be used, range shows\\n\\t * maximum value in current edge, offset shows minimal value in current\\n\\t * edge.\\n\\t *\\n\\t * @param tokenId unique identifier for token\\n\\t */\\n\\tfunction getTokenPointer(uint256 tokenId) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IERC721Envious.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../openzeppelin/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional Envious extension.\\n * @author F4T50 @ghostchain\\n * @author 571nkY @ghostchain\\n * @author 5Tr3TcH @ghostchain\\n * @dev Ability to collateralize each NFT in collection.\\n */\\ninterface IERC721Envious is IERC721 {\\n\\tevent Collateralized(uint256 indexed tokenId, uint256 amount, address tokenAddress);\\n\\tevent Uncollateralized(uint256 indexed tokenId, uint256 amount, address tokenAddress);\\n\\tevent Dispersed(address indexed tokenAddress, uint256 amount);\\n\\tevent Harvested(address indexed tokenAddress, uint256 amount, uint256 scaledAmount);\\n\\n\\t/**\\n\\t * @dev An array with two elements. Each of them represents percentage from collateral\\n\\t * to be taken as a commission. First element represents collateralization commission.\\n\\t * Second element represents uncollateralization commission. There should be 3 \\n\\t * decimal buffer for each of them, e.g. 1000 = 1%.\\n\\t *\\n\\t * @param index of value in array.\\n\\t */\\n\\tfunction commissions(uint256 index) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Address of token that will be paid on bonds.\\n\\t *\\n\\t * @return address address of token.\\n\\t */\\n\\tfunction ghostAddress() external view returns (address);\\n\\n\\t/**\\n\\t * @dev Address of smart contract, that provides purchasing of DeFi 2.0 bonds.\\n\\t *\\n\\t * @return address address of bonding smart.\\n\\t */\\n\\tfunction ghostBondingAddress() external view returns (address);\\n\\n\\t/**\\n\\t * @dev 'Black hole' is any address that guarantee tokens sent to it will not be \\n\\t * retrieved from there. Note: some tokens revert on transfer to zero address.\\n\\t *\\n\\t * @return address address of black hole.\\n\\t */\\n\\tfunction blackHole() external view returns (address);\\n\\n\\t/**\\n\\t * @dev Token that will be used to harvest collected commissions.\\n\\t *\\n\\t * @return address address of token.\\n\\t */\\n\\tfunction communityToken() external view returns (address);\\n\\n\\t/**\\n\\t * @dev Pool of available tokens for harvesting.\\n\\t *\\n\\t * @param index in array.\\n\\t * @return address of token.\\n\\t */\\n\\tfunction communityPool(uint256 index) external view returns (address);\\n\\n\\t/**\\n\\t * @dev Token balance available for harvesting.\\n\\t *\\n\\t * @param tokenAddress addres of token.\\n\\t * @return uint256 token balance.\\n\\t */\\n\\tfunction communityBalance(address tokenAddress) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Array of tokens that were dispersed.\\n\\t *\\n\\t * @param index in array.\\n\\t * @return address address of dispersed token.\\n\\t */\\n\\tfunction disperseTokens(uint256 index) external view returns (address);\\n\\n\\t/**\\n\\t * @dev Amount of tokens that was dispersed.\\n\\t *\\n\\t * @param tokenAddress address of token.\\n\\t * @return uint256 token balance.\\n\\t */\\n\\tfunction disperseBalance(address tokenAddress) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Amount of tokens that was already taken from the disperse.\\n\\t *\\n\\t * @param tokenAddress address of token.\\n\\t * @return uint256 total amount of tokens already taken.\\n\\t */\\n\\tfunction disperseTotalTaken(address tokenAddress) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Amount of disperse already taken by each tokenId.\\n\\t *\\n\\t * @param tokenId unique identifier of unit.\\n\\t * @param tokenAddress address of token.\\n\\t * @return uint256 amount of tokens already taken.\\n\\t */\\n\\tfunction disperseTaken(uint256 tokenId, address tokenAddress) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Available payouts.\\n\\t *\\n\\t * @param bondId bond unique identifier.\\n\\t * @return uint256 potential payout.\\n\\t */\\n\\tfunction bondPayouts(uint256 bondId) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Mapping of `tokenId`s to array of bonds.\\n\\t *\\n\\t * @param tokenId unique identifier of unit.\\n\\t * @param index in array.\\n\\t * @return uint256 index of bond.\\n\\t */\\n\\tfunction bondIndexes(uint256 tokenId, uint256 index) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Mapping of `tokenId`s to token addresses who have collateralized before.\\n\\t *\\n\\t * @param tokenId unique identifier of unit.\\n\\t * @param index in array.\\n\\t * @return address address of token.\\n\\t */\\n\\tfunction collateralTokens(uint256 tokenId, uint256 index) external view returns (address);\\n\\n\\t/**\\n\\t * @dev Token balances that are stored under `tokenId`.\\n\\t *\\n\\t * @param tokenId unique identifier of unit.\\n\\t * @param tokenAddress address of token.\\n\\t * @return uint256 token balance.\\n\\t */\\n\\tfunction collateralBalances(uint256 tokenId, address tokenAddress) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Calculator function for harvesting.\\n\\t *\\n\\t * @param amount of `communityToken`s to spend\\n\\t * @param tokenAddress of token to be harvested\\n\\t * @return amount to harvest based on inputs\\n\\t */\\n\\tfunction getAmount(uint256 amount, address tokenAddress) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Collect commission fees gathered in exchange for `communityToken`.\\n\\t *\\n\\t * @param amounts array of amounts to collateralize\\n\\t * @param tokenAddresses array of token addresses\\n\\t */\\n\\tfunction harvest(uint256[] memory amounts, address[] memory tokenAddresses) external;\\n\\n\\t/**\\n\\t * @dev Collateralize NFT with different tokens and amounts.\\n\\t *\\n\\t * @param tokenId unique identifier for specific NFT\\n\\t * @param amounts array of amounts to collateralize\\n\\t * @param tokenAddresses array of token addresses\\n\\t */\\n\\tfunction collateralize(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256[] memory amounts,\\n\\t\\taddress[] memory tokenAddresses\\n\\t) external payable;\\n\\n\\t/**\\n\\t * @dev Withdraw underlying collateral.\\n\\t *\\n\\t * Requirements:\\n\\t * - only owner of NFT\\n\\t *\\n\\t * @param tokenId unique identifier for specific NFT\\n\\t * @param amounts array of amounts to collateralize\\n\\t * @param tokenAddresses array of token addresses\\n\\t */\\n\\tfunction uncollateralize(\\n\\t\\tuint256 tokenId, \\n\\t\\tuint256[] memory amounts, \\n\\t\\taddress[] memory tokenAddresses\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Collateralize NFT with discount, based on available bonds. While\\n\\t * purchased bond will have delay the owner will be current smart contract\\n\\t *\\n\\t * @param bondId the ID of the market\\n\\t * @param tokenId unique identifier of NFT inside current smart contract\\n\\t * @param amount the amount of quote token to spend\\n\\t * @param maxPrice the maximum price at which to buy bond\\n\\t */\\n\\tfunction getDiscountedCollateral(\\n\\t\\tuint256 bondId,\\n\\t\\taddress quoteToken,\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 maxPrice\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Claim collateral inside this smart contract and extending underlying\\n\\t * data mappings.\\n\\t *\\n\\t * @param tokenId unique identifier of NFT inside current smart contract\\n\\t * @param indexes array of note indexes to redeem\\n\\t */\\n\\tfunction claimDiscountedCollateral(uint256 tokenId, uint256[] memory indexes) external;\\n\\n\\t/**\\n\\t * @dev Split collateral among all existent tokens.\\n\\t *\\n\\t * @param amounts to be dispersed among all NFT owners\\n\\t * @param tokenAddresses of token to be dispersed\\n\\t */\\n\\tfunction disperse(uint256[] memory amounts, address[] memory tokenAddresses) external payable;\\n\\n\\t/**\\n\\t * @dev See {IERC721-_mint}\\n\\t */\\n\\tfunction mint(address who) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IBondDepository.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBondDepository {\\n\\tevent CreateMarket(\\n\\t\\tuint256 indexed id,\\n\\t\\taddress indexed baseToken,\\n\\t\\taddress indexed quoteToken,\\n\\t\\tuint256 initialPrice\\n\\t);\\n\\t\\n\\tevent CloseMarket(uint256 indexed id);\\n\\t\\n\\tevent Bond(\\n\\t\\tuint256 indexed id,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 price\\n\\t);\\n\\t\\n\\tevent Tuned(\\n\\t\\tuint256 indexed id,\\n\\t\\tuint64 oldControlVariable,\\n\\t\\tuint64 newControlVariable\\n\\t);\\n\\t\\n\\t// Info about each type of market\\n\\tstruct Market {\\n\\t\\tuint256 capacity;           // capacity remaining\\n\\t\\tIERC20 quoteToken;          // token to accept as payment\\n\\t\\tbool capacityInQuote;       // capacity limit is in payment token (true) or in STRL (false, default)\\n\\t\\tuint64 totalDebt;           // total debt from market\\n\\t\\tuint64 maxPayout;           // max tokens in/out (determined by capacityInQuote false/true)\\n\\t\\tuint64 sold;                // base tokens out\\n\\t\\tuint256 purchased;          // quote tokens in\\n\\t}\\n\\t\\n\\t// Info for creating new markets\\n\\tstruct Terms {\\n\\t\\tbool fixedTerm;             // fixed term or fixed expiration\\n\\t\\tuint64 controlVariable;     // scaling variable for price\\n\\t\\tuint48 vesting;             // length of time from deposit to maturity if fixed-term\\n\\t\\tuint48 conclusion;          // timestamp when market no longer offered (doubles as time when market matures if fixed-expiry)\\n\\t\\tuint64 maxDebt;             // 9 decimal debt maximum in STRL\\n\\t}\\n\\t\\n\\t// Additional info about market.\\n\\tstruct Metadata {\\n\\t\\tuint48 lastTune;            // last timestamp when control variable was tuned\\n\\t\\tuint48 lastDecay;           // last timestamp when market was created and debt was decayed\\n\\t\\tuint48 length;              // time from creation to conclusion. used as speed to decay debt.\\n\\t\\tuint48 depositInterval;     // target frequency of deposits\\n\\t\\tuint48 tuneInterval;        // frequency of tuning\\n\\t\\tuint8 quoteDecimals;        // decimals of quote token\\n\\t}\\n\\t\\n\\t// Control variable adjustment data\\n\\tstruct Adjustment {\\n\\t\\tuint64 change;              // adjustment for price scaling variable \\n\\t\\tuint48 lastAdjustment;      // time of last adjustment\\n\\t\\tuint48 timeToAdjusted;      // time after which adjustment should happen\\n\\t\\tbool active;                // if adjustment is available\\n\\t}\\n\\t\\n\\tfunction deposit(\\n\\t\\tuint256 _bid,               // the ID of the market\\n\\t\\tuint256 _amount,            // the amount of quote token to spend\\n\\t\\tuint256 _maxPrice,          // the maximum price at which to buy\\n\\t\\taddress _user,              // the recipient of the payout\\n\\t\\taddress _referral           // the operator address\\n\\t) external returns (uint256 payout_, uint256 expiry_, uint256 index_);\\n\\t\\n\\tfunction create (\\n\\t\\tIERC20 _quoteToken,         // token used to deposit\\n\\t\\tuint256[3] memory _market,  // [capacity, initial price]\\n\\t\\tbool[2] memory _booleans,   // [capacity in quote, fixed term]\\n\\t\\tuint256[2] memory _terms,   // [vesting, conclusion]\\n\\t\\tuint32[2] memory _intervals // [deposit interval, tune interval]\\n\\t) external returns (uint256 id_);\\n\\t\\n\\tfunction close(uint256 _id) external;\\n\\tfunction isLive(uint256 _bid) external view returns (bool);\\n\\tfunction liveMarkets() external view returns (uint256[] memory);\\n\\tfunction liveMarketsFor(address _quoteToken) external view returns (uint256[] memory);\\n\\tfunction payoutFor(uint256 _amount, uint256 _bid) external view returns (uint256);\\n\\tfunction marketPrice(uint256 _bid) external view returns (uint256);\\n\\tfunction currentDebt(uint256 _bid) external view returns (uint256);\\n\\tfunction debtRatio(uint256 _bid) external view returns (uint256);\\n\\tfunction debtDecay(uint256 _bid) external view returns (uint64);\\n}\\n\"\r\n    },\r\n    \"/contracts/extension/ERC721Envious.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../openzeppelin/token/ERC721/ERC721.sol\\\";\\nimport \\\"../openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../openzeppelin/token/ERC20/IERC20.sol\\\";\\nimport \\\"../openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../openzeppelin/utils/Address.sol\\\";\\n\\nimport \\\"../interfaces/IERC721Envious.sol\\\";\\nimport \\\"../interfaces/IBondDepository.sol\\\";\\nimport \\\"../interfaces/INoteKeeper.sol\\\";\\n\\n/**\\n * @title ERC721 Collateralization\\n *\\n * @author F4T50 @ghostchain\\n * @author 571nkY @ghostchain\\n * @author 5Tr3TcH @ghostchain\\n *\\n * @dev This implements an optional extension of {ERC721} defined in the GhostEnvy lightpaper that\\n * adds collateralization functionality for all tokens behind this smart contract as well as any\\n * unique tokenId can have it's own floor price and/or estimated future price.\\n */\\nabstract contract ERC721Envious is ERC721, IERC721Envious {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t/// @dev See {IERC721Envious-commissions}\\n\\tuint256[2] public override commissions;\\n\\t/// @dev See {IERC721Envious-blackHole}\\n\\taddress public override blackHole;\\n\\n\\t/// @dev See {IERC721Envious-ghostAddress}\\n\\taddress public override ghostAddress;\\n\\t/// @dev See {IERC721Envious-ghostBondingAddress}\\n\\taddress public override ghostBondingAddress;\\n\\n\\t/// @dev See {IERC721Envious-communityToken}\\n\\taddress public override communityToken;\\n\\t/// @dev See {IERC721Envious-communityPool}\\n\\taddress[] public override communityPool;\\n\\t/// @dev See {IERC721Envious-communityBalance}\\n\\tmapping(address => uint256) public override communityBalance;\\n\\n\\t/// @dev See {IERC721Envious-disperseTokens}\\n\\taddress[] public override disperseTokens;\\n\\t/// @dev See {IERC721Envious-disperseBalance}\\n\\tmapping(address => uint256) public override disperseBalance;\\n\\t/// @dev See {IERC721Envious-disperseTotalTaken}\\n\\tmapping(address => uint256) public override disperseTotalTaken;\\n\\t/// @dev See {IERC721Envious-disperseTaken}\\n\\tmapping(uint256 => mapping(address => uint256)) public override disperseTaken;\\n\\n\\t/// @dev See {IERC721Envious-bondPayouts}\\n\\tmapping(uint256 => uint256) public override bondPayouts;\\n\\t/// @dev See {IERC721Envious-bondIndexes}\\n\\tmapping(uint256 => uint256[]) public override bondIndexes;\\n\\n\\t/// @dev See {IERC721Envious-collateralTokens}\\n\\tmapping(uint256 => address[]) public override collateralTokens;\\n\\t/// @dev See {IERC721Envious-collateralBalances}\\n\\tmapping(uint256 => mapping(address => uint256)) public override collateralBalances;\\n\\n\\t// solhint-disable-next-line\\n\\tstring private constant LENGTHS_NOT_MATCH = \\\"ERC721Envious: lengths not match\\\";\\n\\t// solhint-disable-next-line\\n\\tstring private constant LOW_AMOUNT = \\\"ERC721Envious: low amount\\\";\\n\\t// solhint-disable-next-line\\n\\tstring private constant EMPTY_GHOST = \\\"ERC721Envious: ghost is empty\\\";\\n\\t// solhint-disable-next-line\\n\\tstring private constant NO_DECIMALS = \\\"ERC721Envious: no decimals\\\";\\n\\t// solhint-disable-next-line\\n\\tstring private constant NOT_TOKEN_OWNER = \\\"ERC721Envious: only for owner\\\";\\n\\t// solhint-disable-next-line\\n\\tstring private constant COMMISSION_TOO_HIGH = \\\"ERC721Envious: commission is too high\\\";\\n\\n\\t/**\\n\\t * @dev See {IERC165-supportsInterface}.\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceId)\\n\\t\\tpublic \\n\\t\\tview \\n\\t\\tvirtual \\n\\t\\toverride(IERC165, ERC721) \\n\\t\\treturns (bool) \\n\\t{\\n\\t\\treturn interfaceId == type(IERC721Envious).interfaceId || ERC721.supportsInterface(interfaceId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Envious-harvest}.\\n\\t */\\n\\tfunction harvest(\\n\\t\\tuint256[] memory amounts, \\n\\t\\taddress[] memory tokenAddresses\\n\\t) external override virtual {\\n\\t\\trequire(amounts.length == tokenAddresses.length, LENGTHS_NOT_MATCH);\\n\\t\\tfor (uint256 i = 0; i < tokenAddresses.length; i++) {\\n\\t\\t\\t_harvest(amounts[i], tokenAddresses[i]);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Envious-collateralize}.\\n\\t */\\n\\tfunction collateralize(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256[] memory amounts,\\n\\t\\taddress[] memory tokenAddresses\\n\\t) external payable override virtual {\\n\\t\\trequire(amounts.length == tokenAddresses.length, LENGTHS_NOT_MATCH);\\n\\t\\tuint256 ethAmount = msg.value;\\n\\t\\tfor (uint256 i = 0; i < tokenAddresses.length; i++) {\\n\\t\\t\\tif (tokenAddresses[i] == address(0)) {\\n\\t\\t\\t\\tethAmount -= amounts[i];\\n\\t\\t\\t}\\n\\t\\t\\t_addTokenCollateral(tokenId, amounts[i], tokenAddresses[i], false);\\n\\t\\t}\\n\\t\\t\\n\\t\\tif (ethAmount > 0) {\\n\\t\\t\\tAddress.sendValue(payable(_msgSender()), ethAmount);\\n\\t\\t} \\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Envious-uncollateralize}.\\n\\t */\\n\\tfunction uncollateralize(\\n\\t\\tuint256 tokenId, \\n\\t\\tuint256[] memory amounts, \\n\\t\\taddress[] memory tokenAddresses\\n\\t) external override virtual {\\n\\t\\trequire(amounts.length == tokenAddresses.length, LENGTHS_NOT_MATCH);\\n\\t\\tfor (uint256 i = 0; i < tokenAddresses.length; i++) {\\n\\t\\t\\t_removeTokenCollateral(tokenId, amounts[i], tokenAddresses[i]);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Envious-disperse}.\\n\\t */\\n\\tfunction disperse(\\n\\t\\tuint256[] memory amounts, \\n\\t\\taddress[] memory tokenAddresses\\n\\t) external payable override virtual {\\n\\t\\trequire(amounts.length == tokenAddresses.length, LENGTHS_NOT_MATCH);\\n\\t\\tuint256 ethAmount = msg.value;\\n\\t\\tfor (uint256 i = 0; i < tokenAddresses.length; i++) {\\n\\t\\t\\tif (tokenAddresses[i] == address(0)) {\\n\\t\\t\\t\\tethAmount -= amounts[i];\\n\\t\\t\\t}\\n\\t\\t\\t_disperseTokenCollateral(amounts[i], tokenAddresses[i]);\\n\\t\\t}\\n\\t\\t\\n\\t\\tif (ethAmount > 0) {\\n\\t\\t\\tAddress.sendValue(payable(_msgSender()), ethAmount);\\n\\t\\t} \\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Envious-getDiscountedCollateral}.\\n\\t */\\n\\tfunction getDiscountedCollateral(\\n\\t\\tuint256 bondId,\\n\\t\\taddress quoteToken,\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 maxPrice\\n\\t) external virtual override {\\n\\t\\t// NOTE: this contract is temporary holder of `quoteToken` due to the need of\\n\\t\\t// registration of bond inside. `amount` of `quoteToken`s should be empty in\\n\\t\\t// the end of transaction.\\n\\t\\t_requireMinted(tokenId);\\n\\t\\t\\n\\t\\tIERC20(quoteToken).safeTransferFrom(_msgSender(), address(this), amount);\\n\\t\\tIERC20(quoteToken).safeApprove(ghostBondingAddress, amount);\\n\\t\\t\\n\\t\\t(uint256 payout,, uint256 index) = IBondDepository(ghostBondingAddress).deposit(\\n\\t\\t\\tbondId,\\n\\t\\t\\tamount,\\n\\t\\t\\tmaxPrice,\\n\\t\\t\\taddress(this),\\n\\t\\t\\taddress(this)\\n\\t\\t);\\n\\t\\t\\n\\t\\tif (payout > 0) {\\n\\t\\t\\tbondPayouts[tokenId] += payout;\\n\\t\\t\\tbondIndexes[tokenId].push(index);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Envious-claimDiscountedCollateral}.\\n\\t */\\n\\tfunction claimDiscountedCollateral(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256[] memory indexes\\n\\t) external virtual override {\\n\\t\\trequire(ghostAddress != address(0), EMPTY_GHOST);\\n\\t\\t\\n\\t\\tfor (uint256 i = 0; i < indexes.length; i++) {\\n\\t\\t\\tuint256 index = _arrayContains(indexes[i], bondIndexes[tokenId]);\\n\\t\\t\\tbondIndexes[tokenId][index] = bondIndexes[tokenId][bondIndexes[tokenId].length - 1];\\n\\t\\t\\tbondIndexes[tokenId].pop();\\n\\t\\t}\\n\\t\\t\\n\\t\\tuint256 payout = INoteKeeper(ghostBondingAddress).redeem(address(this), indexes, true);\\n\\t\\t\\n\\t\\tif (payout > 0) {\\n\\t\\t\\tbondPayouts[tokenId] -= payout;\\n\\t\\t\\t_addTokenCollateral(tokenId, payout, ghostAddress, true);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC721Envious-getAmount}\\n     */\\n\\tfunction getAmount(\\n\\t\\tuint256 amount,\\n\\t\\taddress tokenAddress\\n\\t) public view virtual override returns (uint256) {\\n\\t\\tuint256 circulatingSupply = IERC20(communityToken).totalSupply() - IERC20(communityToken).balanceOf(blackHole);\\n\\t\\treturn amount * _scaledAmount(tokenAddress) / circulatingSupply;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Loop over the array in order to find specific token address index.\\n\\t *\\n\\t * @param tokenAddress address representing the ERC20 token or zero address for ETH\\n\\t * @param findFrom array of addresses in which search should happen\\n\\t *\\n\\t * @return shouldAppend whether address not found and should be added to array\\n\\t * @return index in array, default to uint256 max value if not found\\n\\t */\\n\\tfunction _arrayContains(\\n\\t\\taddress tokenAddress,\\n\\t\\taddress[] memory findFrom\\n\\t) internal pure virtual returns (bool shouldAppend, uint256 index) {\\n\\t\\tshouldAppend = true;\\n\\t\\tindex = type(uint256).max;\\n\\n\\t\\tfor (uint256 i = 0; i < findFrom.length; i++) {\\n\\t\\t\\tif (findFrom[i] == tokenAddress) {\\n\\t\\t\\t\\tshouldAppend = false;\\n\\t\\t\\t\\tindex = i;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Loop over the array in order to find specific note index.\\n\\t *\\n\\t * @param noteId index of note stored previously\\n\\t * @param findFrom array of note indexes\\n\\t *\\n\\t * @return index in array, default to uint256 max value if not found\\n\\t */\\n\\tfunction _arrayContains(\\n\\t\\tuint256 noteId,\\n\\t\\tuint256[] memory findFrom\\n\\t) internal pure virtual returns (uint256 index) {\\n\\t\\tindex = type(uint256).max;\\n\\n\\t\\tfor (uint256 i = 0; i < findFrom.length; i++) {\\n\\t\\t\\tif (findFrom[i] == noteId) {\\n\\t\\t\\t\\tindex = i;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calculate amount to harvest with `communityToken` for the collected\\n\\t * commission. Calculation should happen based on all available ERC20 in\\n\\t * `communityPool`.\\n\\t *\\n\\t * @param tokenAddress address representing the ERC20 token or zero address for ETH\\n\\t *\\n\\t * @return maximum scaled proportion\\n\\t */\\n\\tfunction _scaledAmount(address tokenAddress) internal view virtual returns (uint256) {\\n\\t\\tuint256 totalValue = 0;\\n\\t\\tuint256 scaled = 0;\\n\\t\\tuint256 defaultDecimals = 10**IERC20Metadata(communityToken).decimals();\\n\\n\\t\\tfor (uint256 i = 0; i < communityPool.length; i++) {\\n\\t\\t\\tuint256 innerDecimals = communityPool[i] == address(0) ? 10**18 : 10**IERC20Metadata(communityPool[i]).decimals();\\n\\t\\t\\tuint256 tempValue = communityBalance[communityPool[i]] * defaultDecimals / innerDecimals;\\n\\t\\t\\t\\n\\t\\t\\ttotalValue += tempValue;\\n\\n\\t\\t\\tif (communityPool[i] == tokenAddress) {\\n\\t\\t\\t\\tscaled = tempValue;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn communityBalance[tokenAddress] * totalValue / scaled;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Function for `communityToken` owners if they want to redeem collected\\n\\t * commission in exchange for `communityToken`, while tokens will be send to\\n\\t * zero address in order to lock them forever.\\n\\t *\\n\\t * @param amount represents amount of `communityToken` to be send\\n\\t * @param tokenAddress address representing the ERC20 token or zero address for ETH\\n\\t */\\n\\tfunction _harvest(uint256 amount, address tokenAddress) internal virtual  {\\n\\t\\tuint256 scaledAmount = getAmount(amount, tokenAddress);\\n\\t\\tcommunityBalance[tokenAddress] -= scaledAmount;\\n\\n\\t\\tif (communityBalance[tokenAddress] == 0) {\\n\\t\\t\\t(, uint256 index) = _arrayContains(tokenAddress, communityPool);\\n\\t\\t\\tcommunityPool[index] = communityPool[communityPool.length - 1];\\n\\t\\t\\tcommunityPool.pop();\\n\\t\\t}\\n\\n\\t\\tif (tokenAddress == address(0)) {\\n\\t\\t\\tAddress.sendValue(payable(_msgSender()), scaledAmount);\\n\\t\\t} else {\\n\\t\\t\\tIERC20(tokenAddress).safeTransfer(_msgSender(), scaledAmount);\\n\\t\\t}\\n\\n\\t\\t// NOTE: not every token implements `burn` function, so that is a littl cheat\\n\\t\\tIERC20(communityToken).safeTransferFrom(_msgSender(), blackHole, amount);\\n\\n\\t\\temit Harvested(tokenAddress, amount, scaledAmount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Ability for any user to collateralize any existent ERC721 token with\\n\\t * any ERC20 token.\\n\\t *\\n\\t * Requirements:\\n\\t * - `tokenId` token must exist.\\n\\t * - `amount` should be greater than zero.\\n\\t *\\n\\t * @param tokenId unique identifier of NFT inside current smart contract\\n\\t * @param amount represents amount of ERC20 to be send\\n\\t * @param tokenAddress address representing the ERC20 token or zero address for ETH\\n\\t */\\n\\tfunction _addTokenCollateral(\\n\\t\\tuint256 tokenId, \\n\\t\\tuint256 amount, \\n\\t\\taddress tokenAddress,\\n\\t\\tbool claim\\n\\t) internal virtual {\\n\\t\\trequire(amount > 0, LOW_AMOUNT);\\n\\t\\t_requireMinted(tokenId);\\n\\n\\t\\t_disperse(tokenAddress, tokenId);\\n\\n\\t\\t(bool shouldAppend,) = _arrayContains(tokenAddress, collateralTokens[tokenId]);\\n\\t\\tif (shouldAppend) {\\n\\t\\t\\t_checkValidity(tokenAddress);\\n\\t\\t\\tcollateralTokens[tokenId].push(tokenAddress);\\n\\t\\t}\\n\\n\\t\\tuint256 ownerBalance = _communityCommission(amount, commissions[0], tokenAddress);\\n\\t\\tcollateralBalances[tokenId][tokenAddress] += ownerBalance;\\n\\n\\t\\tif (tokenAddress != address(0) && !claim) {\\n\\t\\t\\tIERC20(tokenAddress).safeTransferFrom(_msgSender(), address(this), amount);\\n\\t\\t}\\n\\n\\t\\temit Collateralized(tokenId, amount, tokenAddress);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Ability for ERC721 owner to withdraw ERC20 collateral that was\\n\\t * previously pushed inside.\\n\\t *\\n\\t * Requirements:\\n\\t * - `tokenId` token must exist.\\n\\t * - `amount` must be less or equal than collateralized value.\\n\\t *\\n\\t * @param tokenId unique identifier of NFT inside current smart contract\\n\\t * @param amount represents amount of ERC20 collateral to withdraw\\n\\t * @param tokenAddress address representing the ERC20 token or zero address for ETH\\n\\t */\\n\\tfunction _removeTokenCollateral(\\n\\t\\tuint256 tokenId, \\n\\t\\tuint256 amount, \\n\\t\\taddress tokenAddress\\n\\t) internal virtual {\\n\\t\\trequire(_ownerOf(tokenId) == _msgSender(), NOT_TOKEN_OWNER);\\n\\t\\t_disperse(tokenAddress, tokenId);\\n\\n\\t\\tcollateralBalances[tokenId][tokenAddress] -= amount;\\n\\t\\tif (collateralBalances[tokenId][tokenAddress] == 0) {\\n\\t\\t\\t(, uint256 index) = _arrayContains(tokenAddress, collateralTokens[tokenId]);\\n\\t\\t\\tcollateralTokens[tokenId][index] = collateralTokens[tokenId][collateralTokens[tokenId].length - 1];\\n\\t\\t\\tcollateralTokens[tokenId].pop();\\n\\t\\t}\\n\\n\\t\\tuint256 ownerBalance = _communityCommission(amount, commissions[1], tokenAddress);\\n\\n\\t\\tif (tokenAddress == address(0)) {\\n\\t\\t\\tAddress.sendValue(payable(_msgSender()), ownerBalance);\\n\\t\\t} else {\\n\\t\\t\\tIERC20(tokenAddress).safeTransfer(_msgSender(), ownerBalance);\\n\\t\\t}\\n\\n\\t\\temit Uncollateralized(tokenId, ownerBalance, tokenAddress);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Disperse any input amount of tokens between all token owners in current\\n\\t * smart contract. Balance will be stored inside `disperseBalance` after which\\n\\t * any user can take it with help of {_disperse}.\\n\\t *\\n\\t * Requirements:\\n\\t * - `amount` must be greater than zero.\\n\\t *\\n\\t * @param amount represents amount of ERC20 tokens to disperse\\n\\t * @param tokenAddress address representing the ERC20 token or zero address for ETH\\n\\t */\\n\\tfunction _disperseTokenCollateral(uint256 amount, address tokenAddress) internal virtual {\\n\\t\\trequire(amount > 0, LOW_AMOUNT);\\n\\n\\t\\t(bool shouldAppend,) = _arrayContains(tokenAddress, disperseTokens);\\n\\t\\tif (shouldAppend) {\\n\\t\\t\\t_checkValidity(tokenAddress);\\n\\t\\t\\tdisperseTokens.push(tokenAddress);\\n\\t\\t}\\n\\n\\t\\tdisperseBalance[tokenAddress] += amount;\\n\\t\\t\\n\\t\\tif (tokenAddress != address(0)) {\\n\\t\\t\\tIERC20(tokenAddress).safeTransferFrom(_msgSender(), address(this), amount);\\n\\t\\t}\\n\\n\\t\\temit Dispersed(tokenAddress, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Need to check if the token address has this function, because it will be used in\\n\\t * scaledAmount later. Otherwise _scaledAmount will revert on every call.\\n\\t *\\n\\t * Requirements:\\n\\t * - all addresses except zero address, because it is used for ETH\\n\\t * - any check for decimals, the idea is to be reverted if function does not exist\\n\\t *\\n\\t * @param tokenAddress potential address of ERC20 token.\\n\\t */\\n\\tfunction _checkValidity(address tokenAddress) internal virtual {\\n\\t\\tif (tokenAddress != address(0)) {\\n\\t\\t\\trequire(IERC20Metadata(tokenAddress).decimals() != type(uint8).max, NO_DECIMALS);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Function that calculates output amount after community commission taken.\\n\\t *\\n\\t * @param amount represents amount of ERC20 tokens or ETH to disperse\\n\\t * @param percentage represents commission to be taken\\n\\t * @param tokenAddress address representing the ERC20 token or zero address for ETH\\n\\t *\\n\\t * @return amount after commission\\n\\t */\\n\\tfunction _communityCommission(\\n\\t\\tuint256 amount,\\n\\t\\tuint256 percentage,\\n\\t\\taddress tokenAddress\\n\\t) internal returns (uint256) {\\n\\t\\tuint256 donation = amount * percentage / 1e5;\\n\\n\\t\\t(bool shouldAppend,) = _arrayContains(tokenAddress, communityPool);\\n\\t\\tif (shouldAppend && donation > 0) {\\n\\t\\t\\tcommunityPool.push(tokenAddress);\\n\\t\\t}\\n\\n\\t\\tcommunityBalance[tokenAddress] += donation;\\n\\t\\treturn amount - donation;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Ability to change commission.\\n\\t *\\n\\t * @param incoming is commission when user collateralize\\n\\t * @param outcoming is commission when user uncollateralize\\n\\t */\\n\\tfunction _changeCommissions(uint256 incoming, uint256 outcoming) internal virtual {\\n\\t\\trequire(incoming < 1e5 && outcoming < 1e5, COMMISSION_TOO_HIGH);\\n\\t\\tcommissions[0] = incoming;\\n\\t\\tcommissions[1] = outcoming;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Ability to change commission token.\\n\\t *\\n\\t * @param newTokenAddress represents new token for commission\\n\\t * @param newBlackHole represents address for harvested tokens\\n\\t */\\n\\tfunction _changeCommunityAddresses(address newTokenAddress, address newBlackHole) internal virtual {\\n\\t\\tcommunityToken = newTokenAddress;\\n\\t\\tblackHole = newBlackHole;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Ability to change commission token.\\n\\t *\\n\\t * @param newGhostTokenAddress represents GHST token address\\n\\t * @param newGhostBondingAddress represents ghostDAO bonding contract address\\n\\t */\\n\\tfunction _changeGhostAddresses(\\n\\t\\taddress newGhostTokenAddress, \\n\\t\\taddress newGhostBondingAddress\\n\\t) internal virtual {\\n\\t\\tghostAddress = newGhostTokenAddress;\\n\\t\\tghostBondingAddress = newGhostBondingAddress;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Function that will disperse tokens from `disperseBalance` to any NFT\\n\\t * owner. Should happen during uncollateralize process.\\n\\t *\\n\\t * @param tokenAddress address representing the ERC20 token or zero address for ETH\\n\\t * @param tokenId unique identifier of NFT in collection\\n\\t */\\n\\tfunction _disperse(address tokenAddress, uint256 tokenId) internal virtual {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1337\r\n    },\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseTokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"edgeValues\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"edgeOffsets\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"edgeRanges\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"tokenMeasurment\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"Collateralized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Dispersed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scaledAmount\",\"type\":\"uint256\"}],\"name\":\"Harvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"Uncollateralized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blackHole\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bondIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bondPayouts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"changeBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newBlackHole\",\"type\":\"address\"}],\"name\":\"changeCommunityAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"}],\"name\":\"claimDiscountedCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collateralBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collateralTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"}],\"name\":\"collateralize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"commissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"communityBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"communityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"}],\"name\":\"disperse\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"disperseBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"disperseTaken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disperseTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"disperseTotalTaken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"edges\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"range\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bondId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"name\":\"getDiscountedCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenPointer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ghostAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ghostBondingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"measurmentTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"renewSuperMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ghostToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ghostBonding\",\"type\":\"address\"}],\"name\":\"setGhostAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"}],\"name\":\"uncollateralize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GhostCollection", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "1337", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000008400000000000000000000000007ef911f8ef130f73d166468c0068753932357b1700000000000000000000000000000000000000000000000000000000000000124a6f686e204d6341666565204c6567616379000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034a4d4c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036697066733a2f2f516d58354a634e774676765879655836526b3539725a5573333256623561755074756f48754c6b7a5445594169442f00000000000000000000000000000000000000000000000000000000000000000000000000000000001900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041eb63d55b1b0000000000000000000000000000000000000000000000000000c5c22b8011510000000000000000000000000000000000000000000000000001ef43782b65c0c00000000000000000000000000000000000000000000000000410d586a20a4c00000000000000000000000000000000000000000000000000077432217e6836000000000000000000000000000000000000000000000000000bb59a27953c600000000000000000000000000000000000000000000000000010fb378f54931d0000000000000000000000000000000000000000000000000016ec91cc03214f800000000000000000000000000000000000000000000000001dcd50584cb6ff000000000000000000000000000000000000000000000000002544faa778090e000000000000000000000000000000000000000000000000002e902701677215c00000000000000000000000000000000000000000000000003a3468449c1d38c000000000000000000000000000000000000000000000000048c1b9d89df324800000000000000000000000000000000000000000000000005af297547b0d28c000000000000000000000000000000000000000000000000073324c91447914000000000000000000000000000000000000000000000000008e1bc0dd47640fc0000000000000000000000000000000000000000000000000b1a20a8c08d13b00000000000000000000000000000000000000000000000000de0a8d2f0b0589c0000000000000000000000000000000000000000000000001158e460913d0000000000000000000000000000000000000000000000000000152d02c7e14af6800000000000000000000000000000000000000000000000001b1ae4d6e2ef500000000000000000000000000000000000000000000000000021e19e0c9bab24000000000000000000000000000000000000000000000000002a59f7af0be2459c00000000000000000000000000000000000000000000000034f086f3b33b68400000000000000000000000000000000000000000000000000000000000000000001900000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000004c6e0000000000000000000000000000000000000000000000000000000000007b7600000000000000000000000000000000000000000000000000000000000098db000000000000000000000000000000000000000000000000000000000000aa7e000000000000000000000000000000000000000000000000000000000000b641000000000000000000000000000000000000000000000000000000000000cfd9000000000000000000000000000000000000000000000000000000000000df99000000000000000000000000000000000000000000000000000000000000e971000000000000000000000000000000000000000000000000000000000000ef59000000000000000000000000000000000000000000000000000000000000f34a000000000000000000000000000000000000000000000000000000000000f9ff000000000000000000000000000000000000000000000000000000000000fe2000000000000000000000000000000000000000000000000000000000000100b40000000000000000000000000000000000000000000000000000000000010240000000000000000000000000000000000000000000000000000000000001034a00000000000000000000000000000000000000000000000000000000000109ff0000000000000000000000000000000000000000000000000000000000010e2000000000000000000000000000000000000000000000000000000000000110b40000000000000000000000000000000000000000000000000000000000011240000000000000000000000000000000000000000000000000000000000001134a000000000000000000000000000000000000000000000000000000000001147b000000000000000000000000000000000000000000000000000000000001153700000000000000000000000000000000000000000000000000000000000115ac00000000000000000000000000000000000000000000000000000000000115f200000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000004c6d0000000000000000000000000000000000000000000000000000000000002f080000000000000000000000000000000000000000000000000000000000001d6500000000000000000000000000000000000000000000000000000000000011a30000000000000000000000000000000000000000000000000000000000000bc300000000000000000000000000000000000000000000000000000000000019980000000000000000000000000000000000000000000000000000000000000fc000000000000000000000000000000000000000000000000000000000000009d800000000000000000000000000000000000000000000000000000000000005e800000000000000000000000000000000000000000000000000000000000003f100000000000000000000000000000000000000000000000000000000000006b500000000000000000000000000000000000000000000000000000000000004210000000000000000000000000000000000000000000000000000000000000294000000000000000000000000000000000000000000000000000000000000018c000000000000000000000000000000000000000000000000000000000000010a00000000000000000000000000000000000000000000000000000000000006b500000000000000000000000000000000000000000000000000000000000004210000000000000000000000000000000000000000000000000000000000000294000000000000000000000000000000000000000000000000000000000000018c000000000000000000000000000000000000000000000000000000000000010a000000000000000000000000000000000000000000000000000000000000013100000000000000000000000000000000000000000000000000000000000000bc000000000000000000000000000000000000000000000000000000000000007500000000000000000000000000000000000000000000000000000000000000460000000000000000000000000000000000000000000000000000000000000031", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}