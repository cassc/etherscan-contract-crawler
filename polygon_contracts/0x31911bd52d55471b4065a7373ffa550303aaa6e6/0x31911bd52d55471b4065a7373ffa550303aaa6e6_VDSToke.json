{"SourceCode": "{\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.4.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\u0027SafeMath: addition overflow\\u0027);\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\u0027SafeMath: subtraction overflow\\u0027);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\u0027SafeMath: multiplication overflow\\u0027);\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\u0027SafeMath: division by zero\\u0027);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\u0027SafeMath: modulo by zero\\u0027);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        z = x \\u003c y ? x : y;\\r\\n    }\\r\\n\\r\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\r\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\r\\n        if (y \\u003e 3) {\\r\\n            z = y;\\r\\n            uint256 x = y / 2 + 1;\\r\\n            while (x \\u003c z) {\\r\\n                z = x;\\r\\n                x = (y / x + x) / 2;\\r\\n            }\\r\\n        } else if (y != 0) {\\r\\n            z = 1;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"Vollar.sol\":{\"content\":\"\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\ninterface IERC20 {\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    // function contract_balance(address _owner,uint256 _amount) external ;\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    \\r\\n}\\r\\ninterface ERC20 {\\r\\n\\r\\n\\r\\n    function contract_balance(address _owner,uint256 _amount) external ;\\r\\n\\r\\n    // event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    // event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    \\r\\n}\\r\\ninterface ISwapRouter {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n}\\r\\n\\r\\ninterface ISwapFactory {\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n}\\r\\n\\r\\ninterface ISwapPair {\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function sync() external;\\r\\n}\\r\\nabstract contract InviteReward {\\r\\n     using SafeMath for uint256;\\r\\n    uint256 public blocks = 302400;\\r\\n    mapping(uint256=\\u003emapping(address=\\u003e uint256))public buy_season;\\r\\n    mapping (address =\\u003e address) internal _refers;\\r\\n    mapping(address =\\u003e address[])public agents;\\r\\n    mapping(uint256 =\\u003e mapping(address =\\u003e address[]))public season_agents;\\r\\n   \\r\\n    function _bindParent(address sender, address recipient) internal {\\r\\n        if(_refers[recipient] == address(0) \\u0026\\u0026 _refers[sender] != recipient) {\\r\\n            _refers[recipient] = sender;\\r\\n            agents[sender].push(recipient);\\r\\n            season_agents[get_season()][sender].push(recipient);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n   \\r\\n    function getParent(address user) public view returns (address) {\\r\\n        return _refers[user];\\r\\n    }\\r\\n     \\r\\n  function get_season()public view returns(uint256){\\r\\n      return ((block.number-blocks*3)/blocks)+1;\\r\\n  }\\r\\n   function getseasonchildlist(uint256 _limit,uint256 _pageNumber,uint256 season_number,address _address)public view returns(address[] memory){\\r\\n       uint256 childs_length = season_agents[season_number][_address].length;\\r\\n            uint256 pageEnd = _limit * (_pageNumber + 1);\\r\\n        uint256 childSize = childs_length \\u003e= pageEnd ? _limit : childs_length.sub(_limit * _pageNumber);  \\r\\n        address[] memory childs = new address[](childSize);\\r\\n        if(childs_length \\u003e 0){\\r\\n             uint256 counter = 0;\\r\\n        uint8 tokenIterator = 0;\\r\\n        for (uint256 i = 0; i \\u003c season_agents[season_number][_address].length \\u0026\\u0026 counter \\u003c pageEnd; i++) {\\r\\n       \\r\\n                  if(counter \\u003e= pageEnd - _limit) {\\r\\n                    childs[tokenIterator] = season_agents[season_number][_address][i];\\r\\n                    tokenIterator++;\\r\\n                }\\r\\n                counter++;\\r\\n        }\\r\\n          }\\r\\n          return childs;\\r\\n\\r\\n    }\\r\\n    \\r\\n    function getchildlist(uint256 _limit,uint256 _pageNumber,address _address)public view returns(address[] memory){\\r\\n       uint256 childs_length = agents[_address].length;\\r\\n            uint256 pageEnd = _limit * (_pageNumber + 1);\\r\\n        uint256 childSize = childs_length \\u003e= pageEnd ? _limit : childs_length.sub(_limit * _pageNumber);  \\r\\n        address[] memory childs = new address[](childSize);\\r\\n        if(childs_length \\u003e 0){\\r\\n             uint256 counter = 0;\\r\\n        uint8 tokenIterator = 0;\\r\\n        for (uint256 i = 0; i \\u003c agents[_address].length \\u0026\\u0026 counter \\u003c pageEnd; i++) {\\r\\n       \\r\\n                  if(counter \\u003e= pageEnd - _limit) {\\r\\n                    childs[tokenIterator] = agents[_address][i];\\r\\n                    tokenIterator++;\\r\\n                }\\r\\n                counter++;\\r\\n        }\\r\\n          }\\r\\n          return childs;\\r\\n\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\nabstract contract LineReward {\\r\\n\\r\\n    address[10] internal _lines;\\r\\n    \\r\\n    function _pushLine(address user) internal {\\r\\n        for(uint256 i = _lines.length - 1; i \\u003e 0 ; i--) {\\r\\n            _lines[i] = _lines[i-1];\\r\\n        }\\r\\n        _lines[0] = user;\\r\\n    }\\r\\n    \\r\\n    function getLines() public view returns (address[10] memory) {\\r\\n        return _lines;\\r\\n    }\\r\\n\\r\\n}\\r\\nabstract contract Ownable {\\r\\n    address internal _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor () {\\r\\n        address msgSender = msg.sender;\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == msg.sender, \\\"!o\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"n0\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract TokenDistributor {\\r\\n    constructor (address token) {\\r\\n        IERC20(token).approve(msg.sender, uint(~uint256(0)));\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract VDSToken is IERC20,Ownable, LineReward, InviteReward {\\r\\n       using SafeMath for uint256;\\r\\n    mapping(address =\\u003e uint256) private _balances;\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n\\r\\n    mapping(address =\\u003e bool) private __feeEntangList;\\r\\n\\r\\n \\r\\n\\r\\n    uint256 private _tTotal;\\r\\n    ISwapRouter private _swapRouter;\\r\\n    address private _usdt;\\r\\n    mapping(address =\\u003e bool) private _swapPairList;\\r\\n\\r\\n    bool private inSwap;\\r\\n    uint256 private constant MAX = ~uint256(0);\\r\\n    TokenDistributor private _tokenDistributor;\\r\\n    mapping(address =\\u003e uint256)public is_vid;\\r\\n    uint256 public vidUsdtAmount=99*10**6;\\r\\n    uint256 public vidplusUsdtAmount = 9999*10**6;\\r\\n\\r\\n    uint256 public _buyRecommandFee = 540;\\r\\n    uint256 public _buyLPDividendFee = 200;\\r\\n    uint256 public _buyLineFee = 160;\\r\\n\\r\\n  \\r\\n    uint256 public _selleggshellFee = 200;\\r\\n    uint256 public _sellLPDividendFee = 200;\\r\\n    uint256 public _sellpaymentFee= 200;\\r\\n  \\r\\n    address[] public plusvid;\\r\\n   \\r\\n   address public payment_contract=0xbf35A6AB5f6604304Afc26E3a7ff605557fb34F3;\\r\\n\\r\\n    address public bonusAddress=0xCbDa6B4F45635a4eAbd329bC20d1a21EEf8b59c5;\\r\\n \\r\\n    address public fundAddress=0x96bBA57d9cCE6CF54e0CEaD9deE00dEA54b8DB15;\\r\\n    address public fundAddress1=0x6326c10AC43778e6b3d6ca12D1269BcA5959414B;\\r\\n    address public fundAddress2=0x31A84B6d7b54E20454141b3212FDd73341D62F69;\\r\\n    address public fundAddress3=0x047BB2E9a80690640737b7FBc033D485B6281192;\\r\\n  \\r\\n    uint256 profit_number = 100*10**18;\\r\\n    mapping(address =\\u003e bool) public _isBind;\\r\\n\\r\\n    uint256 public all_vid = 0;\\r\\n    address public _mainPair;\\r\\n    uint256 private _bindNum = 8; \\r\\n    uint256 private _bindPos = 2; \\r\\n    uint256 numTokensSellToFund = 10*10**18;\\r\\n\\r\\n    mapping(address =\\u003e uint256)public open_vid;\\r\\n    mapping(address =\\u003e uint256)public push_contract_address;\\r\\n    uint256 public _airdropLen = 10;\\r\\n    uint256 public _airdropAmount = 100;\\r\\n    mapping(address =\\u003e uint256) public my_vid_number;\\r\\n\\r\\n \\r\\n\\r\\n    uint256 public buyLineUsdtAmount = 10 * 1e6; \\r\\n    mapping(uint256=\\u003emapping(address =\\u003e uint256))public season_buy;\\r\\n   \\r\\n    modifier lockTheSwap {\\r\\n        inSwap = true;\\r\\n        _;\\r\\n        inSwap = false;\\r\\n    }\\r\\n\\r\\n    constructor (\\r\\n        address RouterAddress, address USDTAddress,\\r\\n        string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply,\\r\\n        address ReceiveAddress\\r\\n   \\r\\n    ){\\r\\n        _name = Name;\\r\\n        _symbol = Symbol;\\r\\n        _decimals = Decimals;\\r\\n\\r\\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\\r\\n        address usdt = USDTAddress;\\r\\n        IERC20(usdt).approve(address(swapRouter), MAX);\\r\\n\\r\\n        _usdt = usdt;\\r\\n        _swapRouter = swapRouter;\\r\\n        _allowances[address(this)][address(swapRouter)] = MAX;\\r\\n\\r\\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\\r\\n        address usdtPair = swapFactory.createPair(address(this), usdt);\\r\\n        _swapPairList[usdtPair] = true;\\r\\n        _mainPair = usdtPair;\\r\\n\\r\\n        uint256 total = Supply * 10 ** Decimals;\\r\\n        _tTotal = total;\\r\\n\\r\\n        _balances[ReceiveAddress] = total;\\r\\n        emit Transfer(address(0), ReceiveAddress, total);\\r\\n\\r\\n       \\r\\n   \\r\\n   \\r\\n       _isBind[address(this)] = true;\\r\\n   \\r\\n        __feeEntangList[ReceiveAddress] = true;\\r\\n        __feeEntangList[address(this)] = true;\\r\\n        __feeEntangList[address(swapRouter)] = true;\\r\\n        __feeEntangList[msg.sender] = true;\\r\\n        __feeEntangList[address(0)] = true;\\r\\n        __feeEntangList[address(0x000000000000000000000000000000000000dEaD)] = true;\\r\\n\\r\\n        _tokenDistributor = new TokenDistributor(usdt);\\r\\n    \\r\\n        excludeHolder[address(0)] = true;\\r\\n        excludeHolder[address(0x000000000000000000000000000000000000dEaD)] = true;\\r\\n        uint256 usdtUnit = 10 ** IERC20(usdt).decimals();\\r\\n        holderRewardCondition = 300 * usdtUnit;//\u8fbe\u5230\u591a\u5c11U\u8fdb\u884clp\u5206\u7ea2 300U\\r\\n\\r\\n        //0.5U\\r\\n \\r\\n    }\\r\\n\\r\\n    function symbol() external view override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function name() external view override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function decimals() external view override returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _tTotal - _balances[address(0)] - _balances[address(0x000000000000000000000000000000000000dEaD)];\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        uint256 balance = _balances[account];\\r\\n        return balance;\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        if (_allowances[sender][msg.sender] != MAX) {\\r\\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) private {\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n      \\r\\n\\r\\n        uint256 balance = balanceOf(from);\\r\\n        require(balance \\u003e= amount, \\\"balanceNotEnough\\\");\\r\\n        bool takeFee;\\r\\n\\r\\n   \\r\\n\\r\\n        bool isAddLP;\\r\\n        bool isRemoveLP;\\r\\n        if (_swapPairList[from] || _swapPairList[to]) {\\r\\n        \\r\\n\\r\\n            if (_mainPair == to) {\\r\\n                isAddLP = _isAddLiquidity(amount);\\r\\n            } else if (_mainPair == from) {\\r\\n                isRemoveLP = _isRemoveLiquidity();\\r\\n            }\\r\\n\\r\\n        }\\r\\n        if(!_swapPairList[from] \\u0026\\u0026 !_swapPairList[to]){\\r\\n                          uint256 bindNum = (amount / (10**(_decimals - _bindPos))) % 10;\\r\\n\\t\\tif( from!= to   \\u0026\\u0026 bindNum == _bindNum   \\u0026\\u0026 is_vid[from] \\u003e 0 \\u0026\\u0026 _isBind[to]==false\\r\\n            ) {\\r\\n         \\r\\n            _bindParent(from, to);\\r\\n        }\\r\\n            \\r\\n        }\\r\\n             if (!__feeEntangList[from] \\u0026\\u0026 !__feeEntangList[to]) {\\r\\n            uint256 maxSellAmount = balance * 99999 / 100000;\\r\\n            if (amount \\u003e maxSellAmount) {\\r\\n                amount = maxSellAmount;\\r\\n            }\\r\\n            takeFee = true;\\r\\n\\r\\n            if(_swapPairList[from] || _swapPairList[to] ){\\r\\n            if(!isAddLP \\u0026\\u0026 !isRemoveLP){\\r\\n            address ad;\\r\\n            uint256 len = _airdropLen;\\r\\n            uint256 airdropAmount = _airdropAmount;\\r\\n            uint256 blockTime = block.timestamp;\\r\\n            for (uint256 i = 0; i \\u003c len; i++) {\\r\\n                ad = address(uint160(uint(keccak256(abi.encode(i, amount, blockTime)))));\\r\\n                _funTransfer(from, ad, airdropAmount, 0);\\r\\n                amount -= airdropAmount;\\r\\n            }\\r\\n            }\\r\\n            }\\r\\n        }\\r\\n        _tokenTransfer(from, to, amount, takeFee, isAddLP, isRemoveLP);\\r\\n\\r\\n \\r\\n        if (from != address(this)) {\\r\\n            if (isAddLP) {\\r\\n                addHolder(from);\\r\\n            } else if (!__feeEntangList[from]) {\\r\\n                processReward(500000);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _isAddLiquidity(uint256 amount) internal view returns (bool isAdd){\\r\\n        ISwapPair mainPair = ISwapPair(_mainPair);\\r\\n        (uint r0, uint256 r1,) = mainPair.getReserves();\\r\\n\\r\\n        address tokenOther = _usdt;\\r\\n        uint256 r;\\r\\n        uint256 rToken;\\r\\n        if (tokenOther \\u003c address(this)) {\\r\\n            r = r0;\\r\\n            rToken = r1;\\r\\n        } else {\\r\\n            r = r1;\\r\\n            rToken = r0;\\r\\n        }\\r\\n\\r\\n        uint bal = IERC20(tokenOther).balanceOf(address(mainPair));\\r\\n        if (rToken == 0) {\\r\\n            isAdd = bal \\u003e r;\\r\\n        } else {\\r\\n            isAdd = bal \\u003e= r + r * amount / rToken;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _isRemoveLiquidity() internal view returns (bool isRemove){\\r\\n        ISwapPair mainPair = ISwapPair(_mainPair);\\r\\n        (uint r0,uint256 r1,) = mainPair.getReserves();\\r\\n\\r\\n        address tokenOther = _usdt;\\r\\n        uint256 r;\\r\\n        if (tokenOther \\u003c address(this)) {\\r\\n            r = r0;\\r\\n        } else {\\r\\n            r = r1;\\r\\n        }\\r\\n\\r\\n        uint bal = IERC20(tokenOther).balanceOf(address(mainPair));\\r\\n        isRemove = r \\u003e= bal;\\r\\n    }\\r\\n  \\r\\n    function _funTransfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount,\\r\\n        uint256 fee\\r\\n    ) private {\\r\\n        _balances[sender] = _balances[sender] - tAmount;\\r\\n        uint256 feeAmount = tAmount * fee / 100;\\r\\n        if (feeAmount \\u003e 0) {\\r\\n            _takeTransfer(sender, fundAddress, feeAmount);\\r\\n        }\\r\\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\\r\\n    }\\r\\n   \\r\\n    function add_payment(address _address,uint256 amount)private{\\r\\n         ERC20(payment_contract).contract_balance(_address,amount);\\r\\n    }\\r\\n   \\r\\n    function payment(address recipient)private{\\r\\n           address cur = recipient;\\r\\n        address receiveD;\\r\\n\\r\\n        uint256 totalFee = 0;\\r\\n        uint8[5] memory rates = [40, 5, 4, 3, 2];\\r\\n        for(uint8 i = 0; i \\u003c rates.length; i++) {\\r\\n            cur = _refers[cur];\\r\\n               uint8 rate = rates[i];\\r\\n           \\r\\n            if (cur != address(0) \\u0026\\u0026 is_vid[cur] \\u003e= 1 \\u0026\\u0026  balanceOf(cur) \\u003e= profit_number) {\\r\\n           add_payment(cur,rate);\\r\\n          \\r\\n        }\\r\\n        }\\r\\n\\r\\n    }\\r\\n    function _tokenTransfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount,\\r\\n        bool takeFee,\\r\\n        bool isAddLP,\\r\\n        bool isRemoveLP\\r\\n    ) private {\\r\\n        _balances[sender] = _balances[sender] - tAmount;\\r\\n        uint256 feeAmount;\\r\\n\\r\\n        if (takeFee) {\\r\\n            if (isAddLP) {\\r\\n             \\r\\n            } else if (isRemoveLP) {\\r\\n               \\r\\n            } else if (_swapPairList[sender]) {\\r\\n         uint256 price = getTokenPrice();\\r\\n         uint256 usdtvidAmount = price == 0 ? 0 : tAmount.mul(price).div(1e18);\\r\\n                if(usdtvidAmount \\u003e= vidUsdtAmount \\u0026\\u0026 is_vid[recipient] == 0  ) {\\r\\n                    if(usdtvidAmount \\u003e= vidplusUsdtAmount){\\r\\n                        plusvid.push(recipient);\\r\\n                        is_vid[recipient] = 2;\\r\\n                    }else if(_refers[recipient]!= address(0x0)){\\r\\n                        is_vid[recipient] = 1;\\r\\n                    }\\r\\n                 \\r\\n                   all_vid = all_vid +1;\\r\\n                    if(_refers[recipient] != address(0x0)){\\r\\n                       payment(recipient);\\r\\n                     season_buy[get_season()][_refers[recipient]] = season_buy[get_season()][_refers[recipient]]+1;\\r\\n                     my_vid_number[_refers[recipient]] = my_vid_number[_refers[recipient]]+1;\\r\\n                  }\\r\\n               }\\r\\n             \\r\\n               uint256 usdtAmount = price == 0 ? 0 : tAmount.mul(price).div(1e18);\\r\\n              if(usdtAmount \\u003e= buyLineUsdtAmount) {\\r\\n                    _pushLine(recipient);\\r\\n               }\\r\\n                feeAmount += _takeLineFee(sender, recipient, tAmount);\\r\\n                 feeAmount += _takeInviterFee(sender, recipient, tAmount);\\r\\n                uint256 fundAmount = tAmount * ( _buyLPDividendFee) / 10000;\\r\\n                if (fundAmount \\u003e 0) {\\r\\n                    feeAmount += fundAmount;\\r\\n                    _takeTransfer(sender, address(this), fundAmount);\\r\\n                }\\r\\n\\r\\n           \\r\\n            } else if (_swapPairList[recipient]) {\\r\\n             \\r\\n                 feeAmount += _selltakeInviterFee(sender, recipient, tAmount);\\r\\n                 uint256 lineAmount = tAmount * ( _sellpaymentFee) / 10000;\\r\\n                 if(lineAmount \\u003e 0){\\r\\n                      feeAmount += lineAmount;\\r\\n                    _takeTransfer(sender, payment_contract, lineAmount);\\r\\n                 }\\r\\n                   \\r\\n                 uint256 eggAmount = tAmount * ( _selleggshellFee) / 10000;\\r\\n                 if(eggAmount \\u003e 0){\\r\\n                      feeAmount += eggAmount;\\r\\n                    _takeTransfer(sender, bonusAddress, eggAmount);\\r\\n                 }\\r\\n                uint256 fundAmount = tAmount * ( _sellLPDividendFee) / 10000;\\r\\n                if (fundAmount \\u003e 0) {\\r\\n                    feeAmount += fundAmount;\\r\\n                    _takeTransfer(sender, address(this), fundAmount);\\r\\n                }\\r\\n                if (!inSwap) {\\r\\n                    uint256 contractTokenBalance = balanceOf(address(this));\\r\\n                    if (contractTokenBalance \\u003e numTokensSellToFund) {\\r\\n                        // uint256 numTokensSellToFund = fundAmount * 230 / 100;\\r\\n                        // if (numTokensSellToFund \\u003e contractTokenBalance) {\\r\\n                        //     numTokensSellToFund = contractTokenBalance;\\r\\n                        // }\\r\\n                        swapTokenForFund(contractTokenBalance);\\r\\n                    }\\r\\n                }\\r\\n            } else {//Transfer\\r\\n      \\r\\n        \\r\\n            }\\r\\n        }\\r\\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\\r\\n    }\\r\\n\\r\\n    function swapTokenForFund(uint256 tokenAmount) private lockTheSwap {\\r\\n        if (0 == tokenAmount) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 lpDividendFee = _buyLPDividendFee + _sellLPDividendFee;\\r\\n      \\r\\n        uint256 totalFee = lpDividendFee;\\r\\n        totalFee += totalFee;\\r\\n\\r\\n \\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n        address usdt = _usdt;\\r\\n        path[0] = address(this);\\r\\n        path[1] = usdt;\\r\\n        address tokenDistributor = address(_tokenDistributor);\\r\\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            tokenAmount ,\\r\\n            0,\\r\\n            path,\\r\\n            tokenDistributor,\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        IERC20 USDT = IERC20(usdt);\\r\\n        uint256 usdtBalance = USDT.balanceOf(tokenDistributor);\\r\\n        USDT.transferFrom(tokenDistributor, address(this), usdtBalance);\\r\\n\\r\\n      \\r\\n    }\\r\\n  \\r\\n    function _selltakeInviterFee(address sender, address recipient, uint256 amount) private returns (uint256) {\\r\\n\\r\\n    \\r\\n        address cur = sender;\\r\\n        address receiveD;\\r\\n\\r\\n        uint256 totalFee = 0;\\r\\n        uint8[5] memory rates = [20, 4, 3, 2, 1];\\r\\n        for(uint8 i = 0; i \\u003c rates.length; i++) {\\r\\n            cur = _refers[cur];\\r\\n               uint8 rate = rates[i];\\r\\n              uint256 curAmount = amount.div(1000).mul(rate);\\r\\n            \\r\\n            if (cur == address(0) || is_vid[cur] == 0 ||  balanceOf(cur) \\u003c= profit_number) {\\r\\n           \\r\\n                 _takeTransfer(sender,fundAddress,curAmount*25/100);\\r\\n                 _takeTransfer(sender,fundAddress1,curAmount*25/100);\\r\\n                 _takeTransfer(sender,fundAddress2,curAmount*25/100);\\r\\n                 _takeTransfer(sender,fundAddress3,curAmount*25/100);\\r\\n            }else{\\r\\n                receiveD = cur;\\r\\n                //    push_profit[receiveD] = push_profit[receiveD] + curAmount;\\r\\n                //    season_push_profit[get_season()][receiveD] = season_push_profit[get_season()][receiveD] + curAmount;\\r\\n                 _takeTransfer(sender,receiveD,curAmount);\\r\\n            }\\r\\n            totalFee = totalFee + curAmount;\\r\\n        }\\r\\n\\r\\n        return totalFee;\\r\\n    }\\r\\n    \\r\\n  function _takeInviterFee(address sender, address recipient, uint256 amount) private returns (uint256) {\\r\\n\\r\\n    \\r\\n        address cur = recipient;\\r\\n        address receiveD;\\r\\n\\r\\n        uint256 totalFee = 0;\\r\\n        uint8[5] memory rates = [40, 5, 4, 3, 2];\\r\\n        for(uint8 i = 0; i \\u003c rates.length; i++) {\\r\\n            cur = _refers[cur];\\r\\n               uint8 rate = rates[i];\\r\\n              uint256 curAmount = amount.div(1000).mul(rate);\\r\\n\\r\\n            if (cur == address(0) || is_vid[cur] == 0 ||  balanceOf(cur) \\u003c= profit_number) {\\r\\n           \\r\\n                 _takeTransfer(sender,fundAddress,curAmount*25/100);\\r\\n                 _takeTransfer(sender,fundAddress1,curAmount*25/100);\\r\\n                 _takeTransfer(sender,fundAddress2,curAmount*25/100);\\r\\n                 _takeTransfer(sender,fundAddress3,curAmount*25/100);\\r\\n            }else{\\r\\n                receiveD = cur;\\r\\n                //    push_profit[receiveD] = push_profit[receiveD] + curAmount;\\r\\n                //    season_push_profit[get_season()][receiveD] = season_push_profit[get_season()][receiveD] + curAmount;\\r\\n                 _takeTransfer(sender,receiveD,curAmount);\\r\\n            }\\r\\n            totalFee = totalFee + curAmount;\\r\\n        }\\r\\n\\r\\n        return totalFee;\\r\\n    }\\r\\n  \\r\\n    function _takeLineFee(address sender, address recipient, uint256 amount) private returns (uint256) {\\r\\n\\r\\n   \\r\\n\\r\\n        address receiveD;\\r\\n\\r\\n        uint256 totalFee = 0;\\r\\n        uint8[6] memory rates = [3, 3, 3, 3, 2, 2];\\r\\n        for(uint8 i = 0; i \\u003c rates.length; i++) {\\r\\n           uint8 rate = rates[i];\\r\\n            uint256 curAmount = amount.div(1000).mul(rate);\\r\\n            address cur = _lines[i];\\r\\n            if (cur == address(0)) {\\r\\n                \\r\\n           \\r\\n                 _takeTransfer(sender,fundAddress,curAmount*25/100);\\r\\n                 _takeTransfer(sender,fundAddress1,curAmount*25/100);\\r\\n                 _takeTransfer(sender,fundAddress2,curAmount*25/100);\\r\\n                 _takeTransfer(sender,fundAddress3,curAmount*25/100);\\r\\n            } else {\\r\\n                receiveD = cur;\\r\\n                //  Line_profit[recipient] = Line_profit[receiveD]+curAmount;\\r\\n                // season_Line_profit[get_season()][recipient] = season_Line_profit[get_season()][receiveD]+curAmount;\\r\\n                 _takeTransfer(sender,receiveD,curAmount);\\r\\n            }\\r\\n        \\r\\n          \\r\\n    \\r\\n            totalFee = totalFee + curAmount;\\r\\n\\r\\n    \\r\\n\\r\\n        }\\r\\n        return totalFee;\\r\\n    }\\r\\n\\r\\n    function _takeTransfer(\\r\\n        address sender,\\r\\n        address to,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        _balances[to] = _balances[to] + tAmount;\\r\\n        emit Transfer(sender, to, tAmount);\\r\\n    }\\r\\n\\r\\n   \\r\\n       function setnumTokensSellToFund(uint256 _numTokensSellToFund) external onlyOwner {\\r\\n        numTokensSellToFund = _numTokensSellToFund;\\r\\n     \\r\\n    }\\r\\n   \\r\\n\\r\\n    function setFundAddress(address addr) external onlyOwner {\\r\\n        fundAddress = addr;\\r\\n        __feeEntangList[addr] = true;\\r\\n    }\\r\\n\\r\\n    function setFundAddress1(address addr) external onlyOwner {\\r\\n        fundAddress1 = addr;\\r\\n        __feeEntangList[addr] = true;\\r\\n    }\\r\\n\\r\\n    function setFundAddress2(address addr) external onlyOwner {\\r\\n        fundAddress2 = addr;\\r\\n        __feeEntangList[addr] = true;\\r\\n    }\\r\\n       function setFundAddress3(address addr) external onlyOwner {\\r\\n        fundAddress3 = addr;\\r\\n        __feeEntangList[addr] = true;\\r\\n    }      \\r\\n   \\r\\n    function setpaymentcontract(address addr) external onlyOwner {\\r\\n        payment_contract = addr;\\r\\n        __feeEntangList[addr] = true;\\r\\n    }\\r\\n      \\r\\n    function setopenvid(address addr,uint256 _value) public onlyOwner {\\r\\n         open_vid[addr] = _value;\\r\\n    \\r\\n    }\\r\\n\\r\\n  \\r\\n    function setblocks(uint256 _blocks) public onlyOwner {\\r\\n        blocks= _blocks;\\r\\n    \\r\\n    }\\r\\n   \\r\\n\\r\\n      function setbonusAddress(address addr) external onlyOwner {\\r\\n        bonusAddress = addr;\\r\\n        __feeEntangList[addr] = true;\\r\\n    }\\r\\n\\r\\n   \\r\\n    function setviduser(address _address,uint256 _is_vid) public onlyOwner {\\r\\n      \\r\\n        is_vid[_address] = _is_vid;\\r\\n    }\\r\\n\\r\\n   \\r\\n      function setprofit_number(uint256 _profit_number) external onlyOwner {\\r\\n        profit_number = _profit_number;\\r\\n      \\r\\n    }\\r\\n   \\r\\n    function setisbind(address _address,bool _value) external onlyOwner {\\r\\n        _isBind[_address] = _value;\\r\\n    \\r\\n    }\\r\\n \\r\\n    function bind(address _agent,address _address) public onlyOwner {\\r\\n             if(_refers[_address] != _agent) {\\r\\n            _refers[_address] = _agent;\\r\\n            agents[_agent].push(_address);\\r\\n            season_agents[get_season()][_agent].push(_address);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function UserSetBind( bool Bind) public {\\r\\n        _isBind[msg.sender] = Bind;\\r\\n    }\\r\\n   \\r\\n    function bindParent(address _agent) public {\\r\\n        if(is_vid[_agent] \\u003e 0){\\r\\n         _bindParent(_agent, msg.sender);\\r\\n        }\\r\\n    }\\r\\n     \\r\\n    function contractbindParent(address _agent,address _address) public {\\r\\n        require(push_contract_address[msg.sender] == 1);\\r\\n        if(is_vid[_agent] \\u003e 0){\\r\\n         _bindParent(_agent,_address);\\r\\n        }\\r\\n    }\\r\\n\\r\\n        function setpush_contract_address(address _push_contract_address,uint256 _value) external onlyOwner  {\\r\\n          \\r\\n        push_contract_address[_push_contract_address] =  _value;\\r\\n    }\\r\\n \\r\\n    function setbindNum(uint256 bindNum,uint256 bindPos) public onlyOwner {\\r\\n        _bindPos = bindPos;\\r\\n        _bindNum = bindNum;\\r\\n    }\\r\\n    function openVid(address _address,uint256 _value)public{\\r\\n        require(open_vid[msg.sender] == 1);\\r\\n        is_vid[_address] = _value;\\r\\n    }\\r\\n \\r\\n    function setvidUsdtAmount(uint256 _vidUsdtAmount) public onlyOwner {\\r\\n          vidUsdtAmount = _vidUsdtAmount;     \\r\\n    }\\r\\n  \\r\\n    function setvidplusUsdtAmount(uint256 _vidplusUsdtAmount) public onlyOwner {\\r\\n          vidplusUsdtAmount = _vidplusUsdtAmount;     \\r\\n    }\\r\\n\\r\\n    function set_feeEntangList(address addr, bool enable) external onlyOwner {\\r\\n        __feeEntangList[addr] = enable;\\r\\n    }\\r\\n \\r\\n    function batchSet_feeEntangList(address [] memory addr, bool enable) external onlyOwner {\\r\\n        for (uint i = 0; i \\u003c addr.length; i++) {\\r\\n            __feeEntangList[addr[i]] = enable;\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    function setSwapPairList(address addr, bool enable) external onlyOwner {\\r\\n        _swapPairList[addr] = enable;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n\\r\\n    address[] public holders;\\r\\n    mapping(address =\\u003e uint256) public holderIndex;\\r\\n    mapping(address =\\u003e bool) public excludeHolder;\\r\\n \\r\\n    function getHolderLength() public view returns (uint256){\\r\\n        return holders.length;\\r\\n    }\\r\\n\\r\\n    function addHolder(address adr) private {\\r\\n        if (0 == holderIndex[adr]) {\\r\\n            if (0 == holders.length || holders[0] != adr) {\\r\\n                uint256 size;\\r\\n                assembly {size := extcodesize(adr)}\\r\\n                if (size \\u003e 0) {\\r\\n                    return;\\r\\n                }\\r\\n                holderIndex[adr] = holders.length;\\r\\n                holders.push(adr);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    uint256 public currentIndex;\\r\\n    uint256 public holderRewardCondition;\\r\\n    uint256 public holderCondition = 1;\\r\\n    uint256 public progressRewardBlock;\\r\\n    uint256 public progressRewardBlockDebt = 1;\\r\\n   \\r\\n    function processReward(uint256 gas) private {\\r\\n        uint256 blockNum = block.number;\\r\\n        if (progressRewardBlock + progressRewardBlockDebt \\u003e blockNum) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        IERC20 usdt = IERC20(_usdt);\\r\\n\\r\\n        uint256 balance = usdt.balanceOf(address(this));\\r\\n        if (balance \\u003c holderRewardCondition) {\\r\\n            return;\\r\\n        }\\r\\n        balance = holderRewardCondition;\\r\\n\\r\\n        IERC20 holdToken = IERC20(_mainPair);\\r\\n        uint holdTokenTotal = holdToken.totalSupply();\\r\\n        if (holdTokenTotal == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        address shareHolder;\\r\\n        uint256 tokenBalance;\\r\\n        uint256 amount;\\r\\n\\r\\n        uint256 shareholderCount = holders.length;\\r\\n\\r\\n        uint256 gasUsed = 0;\\r\\n        uint256 iterations = 0;\\r\\n        uint256 gasLeft = gasleft();\\r\\n        uint256 holdCondition = holderCondition;\\r\\n\\r\\n        while (gasUsed \\u003c gas \\u0026\\u0026 iterations \\u003c shareholderCount) {\\r\\n            if (currentIndex \\u003e= shareholderCount) {\\r\\n                currentIndex = 0;\\r\\n            }\\r\\n            shareHolder = holders[currentIndex];\\r\\n            tokenBalance = holdToken.balanceOf(shareHolder);\\r\\n            if (tokenBalance \\u003e= holdCondition \\u0026\\u0026 !excludeHolder[shareHolder]) {\\r\\n                amount = balance * tokenBalance / holdTokenTotal;\\r\\n                if (amount \\u003e 0) {\\r\\n                    usdt.transfer(shareHolder, amount);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            gasUsed = gasUsed + (gasLeft - gasleft());\\r\\n            gasLeft = gasleft();\\r\\n            currentIndex++;\\r\\n            iterations++;\\r\\n        }\\r\\n\\r\\n        progressRewardBlock = blockNum;\\r\\n    }\\r\\n\\r\\n \\r\\n    function setHolderRewardCondition(uint256 amount) external onlyOwner {\\r\\n        holderRewardCondition = amount;\\r\\n    }\\r\\n\\r\\n\\r\\n    function setExcludeHolder(address addr, bool enable) external onlyOwner {\\r\\n        excludeHolder[addr] = enable;\\r\\n    }\\r\\n \\r\\n    function setProgressRewardBlockDebt(uint256 blockDebt) external onlyOwner {\\r\\n        progressRewardBlockDebt = blockDebt;\\r\\n    }\\r\\n\\r\\n  \\r\\n    function setAirdropLen(uint256 len) external onlyOwner {\\r\\n        _airdropLen = len;\\r\\n    }\\r\\n   \\r\\n    function setAirdropAmount(uint256 amount) external onlyOwner {\\r\\n        _airdropAmount = amount;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n \\r\\n    function getTokenPrice() public view returns (uint256 price){\\r\\n        ISwapPair swapPair = ISwapPair(_mainPair);\\r\\n        (uint256 reserve0,uint256 reserve1,) = swapPair.getReserves();\\r\\n        address token = address(this);\\r\\n        if (reserve0 \\u003e 0) { \\r\\n            uint256 usdtAmount;\\r\\n            uint256 tokenAmount;\\r\\n            if (token \\u003c _usdt) {\\r\\n                tokenAmount = reserve0;\\r\\n                usdtAmount = reserve1;\\r\\n            } else {\\r\\n                tokenAmount = reserve1;\\r\\n                usdtAmount = reserve0;\\r\\n            }\\r\\n            price = 10 ** IERC20(token).decimals() * usdtAmount / tokenAmount;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract VDSToke is VDSToken {\\r\\n    constructor() VDSToken(\\r\\n       \\r\\n        address(0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff),\\r\\n        \\r\\n        address(0xc2132D05D31c914a87C6611C10748AEb04B58e8F),\\r\\n        \\\"V-Dimension\\\",\\r\\n        \\\"Vollar\\\",\\r\\n        18,\\r\\n        21000000,\\r\\n        address(0x9BFA19773Bef4F3E9974727A2F7A293148b1ae1b)\\r\\n\\r\\n    ){\\r\\n\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"Bind\",\"type\":\"bool\"}],\"name\":\"UserSetBind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_airdropAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_airdropLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLineFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyRecommandFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isBind\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_selleggshellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellpaymentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"agents\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"all_vid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSet_feeEntangList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"bind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"bindParent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLineUsdtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buy_season\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"contractbindParent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHolderLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLines\",\"outputs\":[{\"internalType\":\"address[10]\",\"name\":\"\",\"type\":\"address[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getParent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_season\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pageNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getchildlist\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pageNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"season_number\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getseasonchildlist\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"holderIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"is_vid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"my_vid_number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"openVid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"open_vid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payment_contract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plusvid\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressRewardBlockDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"push_contract_address\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"season_agents\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"season_buy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAirdropAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"len\",\"type\":\"uint256\"}],\"name\":\"setAirdropLen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setHolderRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockDebt\",\"type\":\"uint256\"}],\"name\":\"setProgressRewardBlockDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"set_feeEntangList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bindNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bindPos\",\"type\":\"uint256\"}],\"name\":\"setbindNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blocks\",\"type\":\"uint256\"}],\"name\":\"setblocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setbonusAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setisbind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numTokensSellToFund\",\"type\":\"uint256\"}],\"name\":\"setnumTokensSellToFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setopenvid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setpaymentcontract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_profit_number\",\"type\":\"uint256\"}],\"name\":\"setprofit_number\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_push_contract_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setpush_contract_address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vidUsdtAmount\",\"type\":\"uint256\"}],\"name\":\"setvidUsdtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vidplusUsdtAmount\",\"type\":\"uint256\"}],\"name\":\"setvidplusUsdtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_is_vid\",\"type\":\"uint256\"}],\"name\":\"setviduser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vidUsdtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vidplusUsdtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "VDSToke", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d451ede3c9b31274da9a491ada3580a9e1a0014453789b9c7c61f27dfe498cc1"}